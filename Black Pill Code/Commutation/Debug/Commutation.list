
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800f760  0800f760  0001f760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb4c  0800fb4c  000202ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb4c  0800fb4c  0001fb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb54  0800fb54  000202ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb54  0800fb54  0001fb54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb58  0800fb58  0001fb58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  0800fb5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002030  200002f0  0800fe48  000202f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002320  0800fe48  00022320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cf64  00000000  00000000  000203a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004120  00000000  00000000  0003d306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a18  00000000  00000000  00041428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000145a  00000000  00000000  00042e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c37e  00000000  00000000  0004429a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002034d  00000000  00000000  00060618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3bae  00000000  00000000  00080965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000080e8  00000000  00000000  00124514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0012c5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f0 	.word	0x200002f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f748 	.word	0x0800f748

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002f4 	.word	0x200002f4
 80001dc:	0800f748 	.word	0x0800f748

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f001 f9df 	bl	800227c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f851 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f000 fb13 	bl	80014ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ec6:	f000 f8b7 	bl	8001038 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000eca:	f000 f999 	bl	8001200 <MX_TIM1_Init>
  MX_I2C2_Init();
 8000ece:	f000 f933 	bl	8001138 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000ed2:	f000 f95f 	bl	8001194 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ed6:	f000 fadf 	bl	8001498 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000eda:	f00b f88b 	bl	800bff4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000ede:	f000 fa4d 	bl	800137c <MX_TIM2_Init>
  MX_TIM9_Init();
 8000ee2:	f000 fa95 	bl	8001410 <MX_TIM9_Init>
  MX_I2C1_Init();
 8000ee6:	f000 f8f9 	bl	80010dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  StartupSequence('F');
 8000eea:	2046      	movs	r0, #70	; 0x46
 8000eec:	f000 fb5e 	bl	80015ac <StartupSequence>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// Read Hall sensor for new PWM calculation
	HAL_ADC_Start(&hadc1);
 8000ef0:	4816      	ldr	r0, [pc, #88]	; (8000f4c <main+0x98>)
 8000ef2:	f001 fa9d 	bl	8002430 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ef6:	f04f 31ff 	mov.w	r1, #4294967295
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <main+0x98>)
 8000efc:	f001 fb4c 	bl	8002598 <HAL_ADC_PollForConversion>
	TargetRPM = HAL_ADC_GetValue(&hadc1);
 8000f00:	4812      	ldr	r0, [pc, #72]	; (8000f4c <main+0x98>)
 8000f02:	f001 fbd4 	bl	80026ae <HAL_ADC_GetValue>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <main+0x9c>)
 8000f0c:	801a      	strh	r2, [r3, #0]

	// Keep minimum RPM
	if ( TargetRPM < MinimumRPM ) {
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <main+0x9c>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	2b7f      	cmp	r3, #127	; 0x7f
 8000f14:	d802      	bhi.n	8000f1c <main+0x68>
		TargetRPM = MinimumRPM;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <main+0x9c>)
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	801a      	strh	r2, [r3, #0]
	}

	// Transmit RPM value to PC via USB
	len = snprintf(buf, sizeof(buf), "\n\rCurrent RPM: %04.2lf", CurrentRPM);
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <main+0xa0>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	e9cd 2300 	strd	r2, r3, [sp]
 8000f26:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <main+0xa4>)
 8000f28:	2140      	movs	r1, #64	; 0x40
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <main+0xa8>)
 8000f2c:	f00c fa9a 	bl	800d464 <sniprintf>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <main+0xac>)
 8000f36:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS((uint8_t *) buf, len);
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <main+0xac>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4807      	ldr	r0, [pc, #28]	; (8000f5c <main+0xa8>)
 8000f40:	f00b f916 	bl	800c170 <CDC_Transmit_FS>

	HAL_Delay(10);
 8000f44:	200a      	movs	r0, #10
 8000f46:	f001 fa0b 	bl	8002360 <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 8000f4a:	e7d1      	b.n	8000ef0 <main+0x3c>
 8000f4c:	2000030c 	.word	0x2000030c
 8000f50:	20000572 	.word	0x20000572
 8000f54:	20000578 	.word	0x20000578
 8000f58:	0800f760 	.word	0x0800f760
 8000f5c:	20000580 	.word	0x20000580
 8000f60:	20000570 	.word	0x20000570

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	; 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	2230      	movs	r2, #48	; 0x30
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f00c faed 	bl	800d552 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	4b28      	ldr	r3, [pc, #160]	; (8001030 <SystemClock_Config+0xcc>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	4a27      	ldr	r2, [pc, #156]	; (8001030 <SystemClock_Config+0xcc>)
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f96:	6413      	str	r3, [r2, #64]	; 0x40
 8000f98:	4b25      	ldr	r3, [pc, #148]	; (8001030 <SystemClock_Config+0xcc>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <SystemClock_Config+0xd0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a21      	ldr	r2, [pc, #132]	; (8001034 <SystemClock_Config+0xd0>)
 8000fae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <SystemClock_Config+0xd0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fd4:	2319      	movs	r3, #25
 8000fd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fd8:	23c0      	movs	r3, #192	; 0xc0
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f005 f8ef 	bl	80061cc <HAL_RCC_OscConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ff4:	f000 fc12 	bl	800181c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800100a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2103      	movs	r1, #3
 8001016:	4618      	mov	r0, r3
 8001018:	f005 fb50 	bl	80066bc <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001022:	f000 fbfb 	bl	800181c <Error_Handler>
  }
}
 8001026:	bf00      	nop
 8001028:	3750      	adds	r7, #80	; 0x50
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40007000 	.word	0x40007000

08001038 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_ADC1_Init+0x98>)
 800104c:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <MX_ADC1_Init+0x9c>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_ADC1_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001078:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <MX_ADC1_Init+0xa0>)
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_ADC1_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001084:	2201      	movs	r2, #1
 8001086:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_ADC1_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001092:	2201      	movs	r2, #1
 8001094:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001096:	480e      	ldr	r0, [pc, #56]	; (80010d0 <MX_ADC1_Init+0x98>)
 8001098:	f001 f986 	bl	80023a8 <HAL_ADC_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010a2:	f000 fbbb 	bl	800181c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010a6:	2304      	movs	r3, #4
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <MX_ADC1_Init+0x98>)
 80010b8:	f001 fb06 	bl	80026c8 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010c2:	f000 fbab 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000030c 	.word	0x2000030c
 80010d4:	40012000 	.word	0x40012000
 80010d8:	0f000001 	.word	0x0f000001

080010dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <MX_I2C1_Init+0x50>)
 80010e2:	4a13      	ldr	r2, [pc, #76]	; (8001130 <MX_I2C1_Init+0x54>)
 80010e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_I2C1_Init+0x50>)
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <MX_I2C1_Init+0x58>)
 80010ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_I2C1_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_I2C1_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_I2C1_Init+0x50>)
 80010fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MX_I2C1_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_I2C1_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_I2C1_Init+0x50>)
 800111a:	f001 ffe3 	bl	80030e4 <HAL_I2C_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001124:	f000 fb7a 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000354 	.word	0x20000354
 8001130:	40005400 	.word	0x40005400
 8001134:	000186a0 	.word	0x000186a0

08001138 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_I2C2_Init+0x50>)
 800113e:	4a13      	ldr	r2, [pc, #76]	; (800118c <MX_I2C2_Init+0x54>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_I2C2_Init+0x50>)
 8001144:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_I2C2_Init+0x58>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_I2C2_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 36;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_I2C2_Init+0x50>)
 8001150:	2224      	movs	r2, #36	; 0x24
 8001152:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_I2C2_Init+0x50>)
 8001156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <MX_I2C2_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_I2C2_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <MX_I2C2_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_I2C2_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <MX_I2C2_Init+0x50>)
 8001176:	f001 ffb5 	bl	80030e4 <HAL_I2C_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001180:	f000 fb4c 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200003a8 	.word	0x200003a8
 800118c:	40005800 	.word	0x40005800
 8001190:	000186a0 	.word	0x000186a0

08001194 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_SPI1_Init+0x64>)
 800119a:	4a18      	ldr	r2, [pc, #96]	; (80011fc <MX_SPI1_Init+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011e0:	220a      	movs	r2, #10
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011e6:	f005 fc49 	bl	8006a7c <HAL_SPI_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011f0:	f000 fb14 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200003fc 	.word	0x200003fc
 80011fc:	40013000 	.word	0x40013000

08001200 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b096      	sub	sp, #88	; 0x58
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001206:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001216:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001220:	f107 0320 	add.w	r3, r7, #32
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2220      	movs	r2, #32
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f00c f989 	bl	800d552 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001240:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <MX_TIM1_Init+0x174>)
 8001242:	4a4d      	ldr	r2, [pc, #308]	; (8001378 <MX_TIM1_Init+0x178>)
 8001244:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001246:	4b4b      	ldr	r3, [pc, #300]	; (8001374 <MX_TIM1_Init+0x174>)
 8001248:	2200      	movs	r2, #0
 800124a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b49      	ldr	r3, [pc, #292]	; (8001374 <MX_TIM1_Init+0x174>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 8001252:	4b48      	ldr	r3, [pc, #288]	; (8001374 <MX_TIM1_Init+0x174>)
 8001254:	f240 727f 	movw	r2, #1919	; 0x77f
 8001258:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b46      	ldr	r3, [pc, #280]	; (8001374 <MX_TIM1_Init+0x174>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001260:	4b44      	ldr	r3, [pc, #272]	; (8001374 <MX_TIM1_Init+0x174>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b43      	ldr	r3, [pc, #268]	; (8001374 <MX_TIM1_Init+0x174>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800126c:	4841      	ldr	r0, [pc, #260]	; (8001374 <MX_TIM1_Init+0x174>)
 800126e:	f005 fc8e 	bl	8006b8e <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001278:	f000 fad0 	bl	800181c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800127c:	483d      	ldr	r0, [pc, #244]	; (8001374 <MX_TIM1_Init+0x174>)
 800127e:	f005 fdb5 	bl	8006dec <HAL_TIM_PWM_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001288:	f000 fac8 	bl	800181c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800128c:	2304      	movs	r3, #4
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001290:	2300      	movs	r3, #0
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001294:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001298:	4619      	mov	r1, r3
 800129a:	4836      	ldr	r0, [pc, #216]	; (8001374 <MX_TIM1_Init+0x174>)
 800129c:	f006 f93a 	bl	8007514 <HAL_TIM_SlaveConfigSynchro>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80012a6:	f000 fab9 	bl	800181c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012b6:	4619      	mov	r1, r3
 80012b8:	482e      	ldr	r0, [pc, #184]	; (8001374 <MX_TIM1_Init+0x174>)
 80012ba:	f006 feef 	bl	800809c <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80012c4:	f000 faaa 	bl	800181c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c8:	2360      	movs	r3, #96	; 0x60
 80012ca:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 500;
 80012cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	2200      	movs	r2, #0
 80012ec:	4619      	mov	r1, r3
 80012ee:	4821      	ldr	r0, [pc, #132]	; (8001374 <MX_TIM1_Init+0x174>)
 80012f0:	f006 f84e 	bl	8007390 <HAL_TIM_PWM_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012fa:	f000 fa8f 	bl	800181c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	2204      	movs	r2, #4
 8001304:	4619      	mov	r1, r3
 8001306:	481b      	ldr	r0, [pc, #108]	; (8001374 <MX_TIM1_Init+0x174>)
 8001308:	f006 f842 	bl	8007390 <HAL_TIM_PWM_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001312:	f000 fa83 	bl	800181c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800131a:	f107 0320 	add.w	r3, r7, #32
 800131e:	2208      	movs	r2, #8
 8001320:	4619      	mov	r1, r3
 8001322:	4814      	ldr	r0, [pc, #80]	; (8001374 <MX_TIM1_Init+0x174>)
 8001324:	f006 f834 	bl	8007390 <HAL_TIM_PWM_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 800132e:	f000 fa75 	bl	800181c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4807      	ldr	r0, [pc, #28]	; (8001374 <MX_TIM1_Init+0x174>)
 8001356:	f006 ff0f 	bl	8008178 <HAL_TIMEx_ConfigBreakDeadTime>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8001360:	f000 fa5c 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <MX_TIM1_Init+0x174>)
 8001366:	f000 fc57 	bl	8001c18 <HAL_TIM_MspPostInit>

}
 800136a:	bf00      	nop
 800136c:	3758      	adds	r7, #88	; 0x58
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000454 	.word	0x20000454
 8001378:	40010000 	.word	0x40010000

0800137c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_TIM2_Init+0x90>)
 800139a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_TIM2_Init+0x90>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_TIM2_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_TIM2_Init+0x90>)
 80013ae:	f04f 32ff 	mov.w	r2, #4294967295
 80013b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <MX_TIM2_Init+0x90>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_TIM2_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	4619      	mov	r1, r3
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_TIM2_Init+0x90>)
 80013d8:	f006 fcfe 	bl	8007dd8 <HAL_TIMEx_HallSensor_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80013e2:	f000 fa1b 	bl	800181c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80013e6:	2350      	movs	r3, #80	; 0x50
 80013e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <MX_TIM2_Init+0x90>)
 80013f4:	f006 fe52 	bl	800809c <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80013fe:	f000 fa0d 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000049c 	.word	0x2000049c

08001410 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	615a      	str	r2, [r3, #20]
 8001426:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_TIM9_Init+0x80>)
 800142a:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <MX_TIM9_Init+0x84>)
 800142c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 9999;
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <MX_TIM9_Init+0x80>)
 8001430:	f242 720f 	movw	r2, #9999	; 0x270f
 8001434:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <MX_TIM9_Init+0x80>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9599;
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_TIM9_Init+0x80>)
 800143e:	f242 527f 	movw	r2, #9599	; 0x257f
 8001442:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_TIM9_Init+0x80>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_TIM9_Init+0x80>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8001450:	480f      	ldr	r0, [pc, #60]	; (8001490 <MX_TIM9_Init+0x80>)
 8001452:	f005 fc7c 	bl	8006d4e <HAL_TIM_OC_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 800145c:	f000 f9de 	bl	800181c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	; (8001490 <MX_TIM9_Init+0x80>)
 8001478:	f005 ff2e 	bl	80072d8 <HAL_TIM_OC_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8001482:	f000 f9cb 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200004e4 	.word	0x200004e4
 8001494:	40014000 	.word	0x40014000

08001498 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 800149e:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <MX_USART1_UART_Init+0x50>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014d0:	f006 feb8 	bl	8008244 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014da:	f000 f99f 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000052c 	.word	0x2000052c
 80014e8:	40011000 	.word	0x40011000

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <MX_GPIO_Init+0xb8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <MX_GPIO_Init+0xb8>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <MX_GPIO_Init+0xb8>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <MX_GPIO_Init+0xb8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <MX_GPIO_Init+0xb8>)
 8001528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <MX_GPIO_Init+0xb8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_GPIO_Init+0xb8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <MX_GPIO_Init+0xb8>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_GPIO_Init+0xb8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <MX_GPIO_Init+0xb8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <MX_GPIO_Init+0xb8>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_GPIO_Init+0xb8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <MX_GPIO_Init+0xbc>)
 800157a:	f001 fd99 	bl	80030b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800157e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_GPIO_Init+0xbc>)
 8001598:	f001 fc06 	bl	8002da8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020800 	.word	0x40020800

080015ac <StartupSequence>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef StartupSequence(char Direction) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]

	// Set first commutation state according to Hall sensors
	if (PrepareCommutation(Direction) == HAL_ERROR) {
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f8cb 	bl	8001754 <PrepareCommutation>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <StartupSequence+0x1c>
		return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e072      	b.n	80016ae <StartupSequence+0x102>
	}

	// Start HallSensor timer
	HAL_TIMEx_HallSensor_Start(&htim2);
 80015c8:	483b      	ldr	r0, [pc, #236]	; (80016b8 <StartupSequence+0x10c>)
 80015ca:	f006 fcaf 	bl	8007f2c <HAL_TIMEx_HallSensor_Start>

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015ce:	2100      	movs	r1, #0
 80015d0:	483a      	ldr	r0, [pc, #232]	; (80016bc <StartupSequence+0x110>)
 80015d2:	f005 fc65 	bl	8006ea0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015d6:	2104      	movs	r1, #4
 80015d8:	4838      	ldr	r0, [pc, #224]	; (80016bc <StartupSequence+0x110>)
 80015da:	f005 fc61 	bl	8006ea0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80015de:	2108      	movs	r1, #8
 80015e0:	4836      	ldr	r0, [pc, #216]	; (80016bc <StartupSequence+0x110>)
 80015e2:	f005 fc5d 	bl	8006ea0 <HAL_TIM_PWM_Start>

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 80015e6:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <StartupSequence+0x114>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	4a35      	ldr	r2, [pc, #212]	; (80016c0 <StartupSequence+0x114>)
 80015ec:	f023 0320 	bic.w	r3, r3, #32
 80015f0:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <StartupSequence+0x114>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	4a32      	ldr	r2, [pc, #200]	; (80016c0 <StartupSequence+0x114>)
 80015f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015fc:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 80015fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800160c:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 800160e:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <StartupSequence+0x118>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	4a2c      	ldr	r2, [pc, #176]	; (80016c4 <StartupSequence+0x118>)
 8001614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001618:	60d3      	str	r3, [r2, #12]

	// Start Interrupts
	HAL_TIM_Base_Start_IT(&htim1);
 800161a:	4828      	ldr	r0, [pc, #160]	; (80016bc <StartupSequence+0x110>)
 800161c:	f005 fb06 	bl	8006c2c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001620:	4825      	ldr	r0, [pc, #148]	; (80016b8 <StartupSequence+0x10c>)
 8001622:	f005 fb03 	bl	8006c2c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);
 8001626:	4828      	ldr	r0, [pc, #160]	; (80016c8 <StartupSequence+0x11c>)
 8001628:	f005 fb00 	bl	8006c2c <HAL_TIM_Base_Start_IT>

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <StartupSequence+0x114>)
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	4a23      	ldr	r2, [pc, #140]	; (80016c0 <StartupSequence+0x114>)
 8001632:	f023 0320 	bic.w	r3, r3, #32
 8001636:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 8001638:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <StartupSequence+0x114>)
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	4a20      	ldr	r2, [pc, #128]	; (80016c0 <StartupSequence+0x114>)
 800163e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001642:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 8001644:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001652:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <StartupSequence+0x118>)
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	4a1a      	ldr	r2, [pc, #104]	; (80016c4 <StartupSequence+0x118>)
 800165a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800165e:	6113      	str	r3, [r2, #16]

	// Enable interrupts
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <StartupSequence+0x114>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <StartupSequence+0x114>)
 8001666:	f043 0320 	orr.w	r3, r3, #32
 800166a:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 800166c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800167a:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <StartupSequence+0x118>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <StartupSequence+0x118>)
 8001682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001686:	60d3      	str	r3, [r2, #12]

	// Write some registers
	TIM1->CR2  |= 0x0005; 			// Set CCPC 1 and CCUS 1 in CR2
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <StartupSequence+0x114>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <StartupSequence+0x114>)
 800168e:	f043 0305 	orr.w	r3, r3, #5
 8001692:	6053      	str	r3, [r2, #4]
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <StartupSequence+0x114>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <StartupSequence+0x114>)
 800169a:	f043 0320 	orr.w	r3, r3, #32
 800169e:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <StartupSequence+0x114>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <StartupSequence+0x114>)
 80016a6:	f043 0320 	orr.w	r3, r3, #32
 80016aa:	60d3      	str	r3, [r2, #12]
	// TIM1->BDTR |= TIM_BDTR_OSSR;

	return HAL_OK;
 80016ac:	2300      	movs	r3, #0

}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000049c 	.word	0x2000049c
 80016bc:	20000454 	.word	0x20000454
 80016c0:	40010000 	.word	0x40010000
 80016c4:	40014000 	.word	0x40014000
 80016c8:	200004e4 	.word	0x200004e4

080016cc <StopSequence>:

HAL_StatusTypeDef StopSequence() {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

	// Stop HallSensor timer
	HAL_TIMEx_HallSensor_Stop(&htim2);
 80016d0:	481c      	ldr	r0, [pc, #112]	; (8001744 <StopSequence+0x78>)
 80016d2:	f006 fcab 	bl	800802c <HAL_TIMEx_HallSensor_Stop>

	// Disable all output channels
	TIM1->CCER  = 0x0000;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <StopSequence+0x7c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = 0x0808;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <StopSequence+0x7c>)
 80016de:	f640 0208 	movw	r2, #2056	; 0x808
 80016e2:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = 0x0808;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <StopSequence+0x7c>)
 80016e6:	f640 0208 	movw	r2, #2056	; 0x808
 80016ea:	61da      	str	r2, [r3, #28]

	// Disable commutation
	TIM1->EGR |= TIM_EGR_COMG; 				// Trigger one last commutation event
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <StopSequence+0x7c>)
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	4a15      	ldr	r2, [pc, #84]	; (8001748 <StopSequence+0x7c>)
 80016f2:	f043 0320 	orr.w	r3, r3, #32
 80016f6:	6153      	str	r3, [r2, #20]
	while (((TIM1->SR >> 5) & 0x1) == 1); 	// Wait until commutation event has happened
 80016f8:	bf00      	nop
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <StopSequence+0x7c>)
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d0f8      	beq.n	80016fa <StopSequence+0x2e>
	TIM1->DIER &= ~TIM_DIER_COMIE; 			// Disable commutation events in DIER register
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <StopSequence+0x7c>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <StopSequence+0x7c>)
 800170e:	f023 0320 	bic.w	r3, r3, #32
 8001712:	60d3      	str	r3, [r2, #12]

	// Stop interrupts
	HAL_TIM_Base_Stop_IT(&htim1);
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <StopSequence+0x80>)
 8001716:	f005 faeb 	bl	8006cf0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);
 800171a:	480a      	ldr	r0, [pc, #40]	; (8001744 <StopSequence+0x78>)
 800171c:	f005 fae8 	bl	8006cf0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim9);
 8001720:	480b      	ldr	r0, [pc, #44]	; (8001750 <StopSequence+0x84>)
 8001722:	f005 fae5 	bl	8006cf0 <HAL_TIM_Base_Stop_IT>

	// Stop PWM Timers
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001726:	2100      	movs	r1, #0
 8001728:	4808      	ldr	r0, [pc, #32]	; (800174c <StopSequence+0x80>)
 800172a:	f005 fc69 	bl	8007000 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800172e:	2104      	movs	r1, #4
 8001730:	4806      	ldr	r0, [pc, #24]	; (800174c <StopSequence+0x80>)
 8001732:	f005 fc65 	bl	8007000 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001736:	2108      	movs	r1, #8
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <StopSequence+0x80>)
 800173a:	f005 fc61 	bl	8007000 <HAL_TIM_PWM_Stop>

	return HAL_OK;
 800173e:	2300      	movs	r3, #0

}
 8001740:	4618      	mov	r0, r3
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000049c 	.word	0x2000049c
 8001748:	40010000 	.word	0x40010000
 800174c:	20000454 	.word	0x20000454
 8001750:	200004e4 	.word	0x200004e4

08001754 <PrepareCommutation>:

HAL_StatusTypeDef PrepareCommutation(char Direction) {
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]

	// Read IDR for Hall Sensor status
	uint8_t Hall = (GPIOA->IDR & 0x0007) - 1;
 800175e:	4b2b      	ldr	r3, [pc, #172]	; (800180c <PrepareCommutation+0xb8>)
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	b2db      	uxtb	r3, r3
 800176a:	3b01      	subs	r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]

	// Edit Hall data according to direction.
	switch (Direction) {
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b42      	cmp	r3, #66	; 0x42
 8001772:	d010      	beq.n	8001796 <PrepareCommutation+0x42>
 8001774:	2b46      	cmp	r3, #70	; 0x46
 8001776:	d120      	bne.n	80017ba <PrepareCommutation+0x66>
	case 'F':
		Hall += 2; // Select next value in the array to go forward
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	3302      	adds	r3, #2
 800177c:	73fb      	strb	r3, [r7, #15]
		Hall %= 6; // If original was 5 it needs to be 0 to we use % 6
 800177e:	7bfa      	ldrb	r2, [r7, #15]
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <PrepareCommutation+0xbc>)
 8001782:	fba3 1302 	umull	r1, r3, r3, r2
 8001786:	0899      	lsrs	r1, r3, #2
 8001788:	460b      	mov	r3, r1
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	440b      	add	r3, r1
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	73fb      	strb	r3, [r7, #15]
	break;
 8001794:	e013      	b.n	80017be <PrepareCommutation+0x6a>
	case 'B':
		Hall += 6; // To not go negative in the next step we add 6
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	3306      	adds	r3, #6
 800179a:	73fb      	strb	r3, [r7, #15]
		Hall -= 2; // Select previous value to go backwards
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	3b02      	subs	r3, #2
 80017a0:	73fb      	strb	r3, [r7, #15]
		Hall %= 6; // If original was 0 it needs to become 5, this also negates the 6 we added previously
 80017a2:	7bfa      	ldrb	r2, [r7, #15]
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <PrepareCommutation+0xbc>)
 80017a6:	fba3 1302 	umull	r1, r3, r3, r2
 80017aa:	0899      	lsrs	r1, r3, #2
 80017ac:	460b      	mov	r3, r1
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	440b      	add	r3, r1
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	73fb      	strb	r3, [r7, #15]
	break;
 80017b8:	e001      	b.n	80017be <PrepareCommutation+0x6a>
	default:
		return HAL_ERROR; // If F or B is not supplied the function should return with an error
 80017ba:	2301      	movs	r3, #1
 80017bc:	e020      	b.n	8001800 <PrepareCommutation+0xac>
	break;
	}

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	4914      	ldr	r1, [pc, #80]	; (8001814 <PrepareCommutation+0xc0>)
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	440b      	add	r3, r1
 80017cc:	881a      	ldrh	r2, [r3, #0]
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <PrepareCommutation+0xc4>)
 80017d0:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 80017d2:	7bfa      	ldrb	r2, [r7, #15]
 80017d4:	490f      	ldr	r1, [pc, #60]	; (8001814 <PrepareCommutation+0xc0>)
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	440b      	add	r3, r1
 80017e0:	3304      	adds	r3, #4
 80017e2:	881a      	ldrh	r2, [r3, #0]
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <PrepareCommutation+0xc4>)
 80017e6:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	490a      	ldr	r1, [pc, #40]	; (8001814 <PrepareCommutation+0xc0>)
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	440b      	add	r3, r1
 80017f6:	3302      	adds	r3, #2
 80017f8:	881a      	ldrh	r2, [r3, #0]
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <PrepareCommutation+0xc4>)
 80017fc:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 80017fe:	2300      	movs	r3, #0

}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40020000 	.word	0x40020000
 8001810:	aaaaaaab 	.word	0xaaaaaaab
 8001814:	20000000 	.word	0x20000000
 8001818:	40010000 	.word	0x40010000

0800181c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001820:	b672      	cpsid	i
}
 8001822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001824:	e7fe      	b.n	8001824 <Error_Handler+0x8>
	...

08001828 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <HAL_MspInit+0x4c>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <HAL_MspInit+0x4c>)
 8001838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <HAL_MspInit+0x4c>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_MspInit+0x4c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_MspInit+0x4c>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_MspInit+0x4c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800

08001878 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <HAL_ADC_MspInit+0x7c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d127      	bne.n	80018ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <HAL_ADC_MspInit+0x80>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <HAL_ADC_MspInit+0x80>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <HAL_ADC_MspInit+0x80>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_ADC_MspInit+0x80>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_ADC_MspInit+0x80>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_ADC_MspInit+0x80>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018d2:	2310      	movs	r3, #16
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d6:	2303      	movs	r3, #3
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <HAL_ADC_MspInit+0x84>)
 80018e6:	f001 fa5f 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40012000 	.word	0x40012000
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000

08001900 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	; 0x30
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a43      	ldr	r2, [pc, #268]	; (8001a2c <HAL_I2C_MspInit+0x12c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d12c      	bne.n	800197c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	4b42      	ldr	r3, [pc, #264]	; (8001a30 <HAL_I2C_MspInit+0x130>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a41      	ldr	r2, [pc, #260]	; (8001a30 <HAL_I2C_MspInit+0x130>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <HAL_I2C_MspInit+0x130>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800193e:	23c0      	movs	r3, #192	; 0xc0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001942:	2312      	movs	r3, #18
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800194e:	2304      	movs	r3, #4
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	4836      	ldr	r0, [pc, #216]	; (8001a34 <HAL_I2C_MspInit+0x134>)
 800195a:	f001 fa25 	bl	8002da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <HAL_I2C_MspInit+0x130>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a32      	ldr	r2, [pc, #200]	; (8001a30 <HAL_I2C_MspInit+0x130>)
 8001968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <HAL_I2C_MspInit+0x130>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800197a:	e052      	b.n	8001a22 <HAL_I2C_MspInit+0x122>
  else if(hi2c->Instance==I2C2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a2d      	ldr	r2, [pc, #180]	; (8001a38 <HAL_I2C_MspInit+0x138>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d14d      	bne.n	8001a22 <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <HAL_I2C_MspInit+0x130>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a28      	ldr	r2, [pc, #160]	; (8001a30 <HAL_I2C_MspInit+0x130>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <HAL_I2C_MspInit+0x130>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a8:	2312      	movs	r3, #18
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019b4:	2304      	movs	r3, #4
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	481d      	ldr	r0, [pc, #116]	; (8001a34 <HAL_I2C_MspInit+0x134>)
 80019c0:	f001 f9f2 	bl	8002da8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ca:	2312      	movs	r3, #18
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80019d6:	2309      	movs	r3, #9
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	4619      	mov	r1, r3
 80019e0:	4814      	ldr	r0, [pc, #80]	; (8001a34 <HAL_I2C_MspInit+0x134>)
 80019e2:	f001 f9e1 	bl	8002da8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_I2C_MspInit+0x130>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_I2C_MspInit+0x130>)
 80019f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_I2C_MspInit+0x130>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2021      	movs	r0, #33	; 0x21
 8001a08:	f001 f967 	bl	8002cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001a0c:	2021      	movs	r0, #33	; 0x21
 8001a0e:	f001 f980 	bl	8002d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2022      	movs	r0, #34	; 0x22
 8001a18:	f001 f95f 	bl	8002cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001a1c:	2022      	movs	r0, #34	; 0x22
 8001a1e:	f001 f978 	bl	8002d12 <HAL_NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3730      	adds	r7, #48	; 0x30
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40005400 	.word	0x40005400
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020400 	.word	0x40020400
 8001a38:	40005800 	.word	0x40005800

08001a3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <HAL_SPI_MspInit+0x84>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d12b      	bne.n	8001ab6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_SPI_MspInit+0x88>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <HAL_SPI_MspInit+0x88>)
 8001a68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_SPI_MspInit+0x88>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_SPI_MspInit+0x88>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <HAL_SPI_MspInit+0x88>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_SPI_MspInit+0x88>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a96:	23e0      	movs	r3, #224	; 0xe0
 8001a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <HAL_SPI_MspInit+0x8c>)
 8001ab2:	f001 f979 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40013000 	.word	0x40013000
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020000 	.word	0x40020000

08001acc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <HAL_TIM_Base_MspInit+0x58>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d11d      	bne.n	8001b1a <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <HAL_TIM_Base_MspInit+0x5c>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a10      	ldr	r2, [pc, #64]	; (8001b28 <HAL_TIM_Base_MspInit+0x5c>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_TIM_Base_MspInit+0x5c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	2018      	movs	r0, #24
 8001b00:	f001 f8eb 	bl	8002cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b04:	2018      	movs	r0, #24
 8001b06:	f001 f904 	bl	8002d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	201a      	movs	r0, #26
 8001b10:	f001 f8e3 	bl	8002cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b14:	201a      	movs	r0, #26
 8001b16:	f001 f8fc 	bl	8002d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40010000 	.word	0x40010000
 8001b28:	40023800 	.word	0x40023800

08001b2c <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b4c:	d133      	bne.n	8001bb6 <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a1a      	ldr	r2, [pc, #104]	; (8001bc0 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001b86:	2307      	movs	r3, #7
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b96:	2301      	movs	r3, #1
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4808      	ldr	r0, [pc, #32]	; (8001bc4 <HAL_TIMEx_HallSensor_MspInit+0x98>)
 8001ba2:	f001 f901 	bl	8002da8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	201c      	movs	r0, #28
 8001bac:	f001 f895 	bl	8002cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bb0:	201c      	movs	r0, #28
 8001bb2:	f001 f8ae 	bl	8002d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bb6:	bf00      	nop
 8001bb8:	3728      	adds	r7, #40	; 0x28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM9)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <HAL_TIM_OC_MspInit+0x48>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d115      	bne.n	8001c06 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_TIM_OC_MspInit+0x4c>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <HAL_TIM_OC_MspInit+0x4c>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_TIM_OC_MspInit+0x4c>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2018      	movs	r0, #24
 8001bfc:	f001 f86d 	bl	8002cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001c00:	2018      	movs	r0, #24
 8001c02:	f001 f886 	bl	8002d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40014000 	.word	0x40014000
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a22      	ldr	r2, [pc, #136]	; (8001cc0 <HAL_TIM_MspPostInit+0xa8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d13d      	bne.n	8001cb6 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_TIM_MspPostInit+0xac>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a20      	ldr	r2, [pc, #128]	; (8001cc4 <HAL_TIM_MspPostInit+0xac>)
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_TIM_MspPostInit+0xac>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <HAL_TIM_MspPostInit+0xac>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <HAL_TIM_MspPostInit+0xac>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_TIM_MspPostInit+0xac>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8001c72:	f242 0303 	movw	r3, #8195	; 0x2003
 8001c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	480e      	ldr	r0, [pc, #56]	; (8001cc8 <HAL_TIM_MspPostInit+0xb0>)
 8001c90:	f001 f88a 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001c94:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4806      	ldr	r0, [pc, #24]	; (8001ccc <HAL_TIM_MspPostInit+0xb4>)
 8001cb2:	f001 f879 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020400 	.word	0x40020400
 8001ccc:	40020000 	.word	0x40020000

08001cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a28      	ldr	r2, [pc, #160]	; (8001d90 <HAL_UART_MspInit+0xc0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d14a      	bne.n	8001d88 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <HAL_UART_MspInit+0xc4>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a26      	ldr	r2, [pc, #152]	; (8001d94 <HAL_UART_MspInit+0xc4>)
 8001cfc:	f043 0310 	orr.w	r3, r3, #16
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_UART_MspInit+0xc4>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_UART_MspInit+0xc4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_UART_MspInit+0xc4>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_UART_MspInit+0xc4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_UART_MspInit+0xc4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <HAL_UART_MspInit+0xc4>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <HAL_UART_MspInit+0xc4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d58:	2307      	movs	r3, #7
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	480d      	ldr	r0, [pc, #52]	; (8001d98 <HAL_UART_MspInit+0xc8>)
 8001d64:	f001 f820 	bl	8002da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d78:	2307      	movs	r3, #7
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	4806      	ldr	r0, [pc, #24]	; (8001d9c <HAL_UART_MspInit+0xcc>)
 8001d84:	f001 f810 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d88:	bf00      	nop
 8001d8a:	3728      	adds	r7, #40	; 0x28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40011000 	.word	0x40011000
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40020400 	.word	0x40020400

08001da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <NMI_Handler+0x4>

08001da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler+0x4>

08001dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler+0x4>

08001db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <BusFault_Handler+0x4>

08001db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <UsageFault_Handler+0x4>

08001dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dec:	f000 fa98 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	CurrentRPM = 0;
 8001df8:	4907      	ldr	r1, [pc, #28]	; (8001e18 <TIM1_BRK_TIM9_IRQHandler+0x24>)
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	e9c1 2300 	strd	r2, r3, [r1]

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <TIM1_BRK_TIM9_IRQHandler+0x28>)
 8001e08:	f005 f95e 	bl	80070c8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001e0c:	4804      	ldr	r0, [pc, #16]	; (8001e20 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 8001e0e:	f005 f95b 	bl	80070c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000578 	.word	0x20000578
 8001e1c:	20000454 	.word	0x20000454
 8001e20:	200004e4 	.word	0x200004e4

08001e24 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	// Set next Commutation states
	PrepareCommutation('F');
 8001e28:	2046      	movs	r0, #70	; 0x46
 8001e2a:	f7ff fc93 	bl	8001754 <PrepareCommutation>

	// Reset COMIF in SR register
	TIM1->SR &= ~TIM_SR_COMIF;
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001e34:	f023 0320 	bic.w	r3, r3, #32
 8001e38:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e3a:	4803      	ldr	r0, [pc, #12]	; (8001e48 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 8001e3c:	f005 f944 	bl	80070c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40010000 	.word	0x40010000
 8001e48:	20000454 	.word	0x20000454
 8001e4c:	00000000 	.word	0x00000000

08001e50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	uint32_t HallTime = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001e56:	2100      	movs	r1, #0
 8001e58:	486d      	ldr	r0, [pc, #436]	; (8002010 <TIM2_IRQHandler+0x1c0>)
 8001e5a:	f005 fb9d 	bl	8007598 <HAL_TIM_ReadCapturedValue>
 8001e5e:	6078      	str	r0, [r7, #4]
	if ( HallTime > 0 ) {
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d026      	beq.n	8001eb4 <TIM2_IRQHandler+0x64>
		CurrentRPM = 1 / ((HallTime * 6.0 / Fapb1clk) / 60);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe fb54 	bl	8000514 <__aeabi_ui2d>
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	4b68      	ldr	r3, [pc, #416]	; (8002014 <TIM2_IRQHandler+0x1c4>)
 8001e72:	f7fe fbc9 	bl	8000608 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	a360      	add	r3, pc, #384	; (adr r3, 8002000 <TIM2_IRQHandler+0x1b0>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	f7fe fcea 	bl	800085c <__aeabi_ddiv>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	4b60      	ldr	r3, [pc, #384]	; (8002018 <TIM2_IRQHandler+0x1c8>)
 8001e96:	f7fe fce1 	bl	800085c <__aeabi_ddiv>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	f04f 0000 	mov.w	r0, #0
 8001ea2:	495e      	ldr	r1, [pc, #376]	; (800201c <TIM2_IRQHandler+0x1cc>)
 8001ea4:	f7fe fcda 	bl	800085c <__aeabi_ddiv>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	495c      	ldr	r1, [pc, #368]	; (8002020 <TIM2_IRQHandler+0x1d0>)
 8001eae:	e9c1 2300 	strd	r2, r3, [r1]
 8001eb2:	e006      	b.n	8001ec2 <TIM2_IRQHandler+0x72>
	} else {
		CurrentRPM = 0;
 8001eb4:	495a      	ldr	r1, [pc, #360]	; (8002020 <TIM2_IRQHandler+0x1d0>)
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	e9c1 2300 	strd	r2, r3, [r1]
	}

	// If maximum RPM is exceeded -> shutdown
	if ( CurrentRPM > MaximumRPM ) {
 8001ec2:	4b57      	ldr	r3, [pc, #348]	; (8002020 <TIM2_IRQHandler+0x1d0>)
 8001ec4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ec8:	a34f      	add	r3, pc, #316	; (adr r3, 8002008 <TIM2_IRQHandler+0x1b8>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f7fe fe2b 	bl	8000b28 <__aeabi_dcmpgt>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <TIM2_IRQHandler+0x8c>
		StopSequence();
 8001ed8:	f7ff fbf8 	bl	80016cc <StopSequence>
	}

	// If RPM is higher or lower than expected / wanted, increase or decrease PWM
	// Once the PWM approaches its target slowly adjust the PWM
	if ( TargetRPM > CurrentRPM) {
 8001edc:	4b51      	ldr	r3, [pc, #324]	; (8002024 <TIM2_IRQHandler+0x1d4>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fb27 	bl	8000534 <__aeabi_i2d>
 8001ee6:	4b4e      	ldr	r3, [pc, #312]	; (8002020 <TIM2_IRQHandler+0x1d0>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	f7fe fe1c 	bl	8000b28 <__aeabi_dcmpgt>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d026      	beq.n	8001f44 <TIM2_IRQHandler+0xf4>
		if ( TargetRPM > CurrentRPM + SpeedUp) {
 8001ef6:	4b4b      	ldr	r3, [pc, #300]	; (8002024 <TIM2_IRQHandler+0x1d4>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fb1a 	bl	8000534 <__aeabi_i2d>
 8001f00:	4604      	mov	r4, r0
 8001f02:	460d      	mov	r5, r1
 8001f04:	4b46      	ldr	r3, [pc, #280]	; (8002020 <TIM2_IRQHandler+0x1d0>)
 8001f06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	4b46      	ldr	r3, [pc, #280]	; (8002028 <TIM2_IRQHandler+0x1d8>)
 8001f10:	f7fe f9c4 	bl	800029c <__adddf3>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4620      	mov	r0, r4
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	f7fe fe04 	bl	8000b28 <__aeabi_dcmpgt>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <TIM2_IRQHandler+0xe8>
			PWM += Mode;
 8001f26:	4b41      	ldr	r3, [pc, #260]	; (800202c <TIM2_IRQHandler+0x1dc>)
 8001f28:	781a      	ldrb	r2, [r3, #0]
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <TIM2_IRQHandler+0x1e0>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4b3e      	ldr	r3, [pc, #248]	; (800202c <TIM2_IRQHandler+0x1dc>)
 8001f34:	701a      	strb	r2, [r3, #0]
 8001f36:	e005      	b.n	8001f44 <TIM2_IRQHandler+0xf4>
		} else {
			PWM++;
 8001f38:	4b3c      	ldr	r3, [pc, #240]	; (800202c <TIM2_IRQHandler+0x1dc>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b3a      	ldr	r3, [pc, #232]	; (800202c <TIM2_IRQHandler+0x1dc>)
 8001f42:	701a      	strb	r2, [r3, #0]
		}
	}

	if ( TargetRPM < CurrentRPM ) {
 8001f44:	4b37      	ldr	r3, [pc, #220]	; (8002024 <TIM2_IRQHandler+0x1d4>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe faf3 	bl	8000534 <__aeabi_i2d>
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <TIM2_IRQHandler+0x1d0>)
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	f7fe fdca 	bl	8000aec <__aeabi_dcmplt>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d026      	beq.n	8001fac <TIM2_IRQHandler+0x15c>
		if ( TargetRPM < CurrentRPM - SpeedUp) {
 8001f5e:	4b31      	ldr	r3, [pc, #196]	; (8002024 <TIM2_IRQHandler+0x1d4>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fae6 	bl	8000534 <__aeabi_i2d>
 8001f68:	4604      	mov	r4, r0
 8001f6a:	460d      	mov	r5, r1
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <TIM2_IRQHandler+0x1d0>)
 8001f6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <TIM2_IRQHandler+0x1d8>)
 8001f78:	f7fe f98e 	bl	8000298 <__aeabi_dsub>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
 8001f84:	f7fe fdb2 	bl	8000aec <__aeabi_dcmplt>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <TIM2_IRQHandler+0x150>
			PWM -= Mode;
 8001f8e:	4b27      	ldr	r3, [pc, #156]	; (800202c <TIM2_IRQHandler+0x1dc>)
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	4b27      	ldr	r3, [pc, #156]	; (8002030 <TIM2_IRQHandler+0x1e0>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <TIM2_IRQHandler+0x1dc>)
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	e005      	b.n	8001fac <TIM2_IRQHandler+0x15c>
		} else {
			PWM--;
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <TIM2_IRQHandler+0x1dc>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b20      	ldr	r3, [pc, #128]	; (800202c <TIM2_IRQHandler+0x1dc>)
 8001faa:	701a      	strb	r2, [r3, #0]
		}
	}

	// Update PWM according to temporary potentiometer input
	TIM1->CR1 |= 0x0002;  // Disable Update Events
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <TIM2_IRQHandler+0x1e4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a20      	ldr	r2, [pc, #128]	; (8002034 <TIM2_IRQHandler+0x1e4>)
 8001fb2:	f043 0302 	orr.w	r3, r3, #2
 8001fb6:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = PWM;	  // Set new PWM for channel 1
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	; (800202c <TIM2_IRQHandler+0x1dc>)
 8001fba:	781a      	ldrb	r2, [r3, #0]
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <TIM2_IRQHandler+0x1e4>)
 8001fbe:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = PWM;	  // Set new PWM for channel 2
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	; (800202c <TIM2_IRQHandler+0x1dc>)
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <TIM2_IRQHandler+0x1e4>)
 8001fc6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = PWM;	  // Set new PWM for channel 3
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <TIM2_IRQHandler+0x1dc>)
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <TIM2_IRQHandler+0x1e4>)
 8001fce:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CR1 &= ~0x0002; // Enable Update Events
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <TIM2_IRQHandler+0x1e4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a17      	ldr	r2, [pc, #92]	; (8002034 <TIM2_IRQHandler+0x1e4>)
 8001fd6:	f023 0302 	bic.w	r3, r3, #2
 8001fda:	6013      	str	r3, [r2, #0]

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 8001fdc:	4b16      	ldr	r3, [pc, #88]	; (8002038 <TIM2_IRQHandler+0x1e8>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR
	TIM1->EGR |= TIM_EGR_COMG;
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <TIM2_IRQHandler+0x1e4>)
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	4a13      	ldr	r2, [pc, #76]	; (8002034 <TIM2_IRQHandler+0x1e4>)
 8001fe8:	f043 0320 	orr.w	r3, r3, #32
 8001fec:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fee:	4808      	ldr	r0, [pc, #32]	; (8002010 <TIM2_IRQHandler+0x1c0>)
 8001ff0:	f005 f86a 	bl	80070c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8001ffc:	f3af 8000 	nop.w
 8002000:	00000000 	.word	0x00000000
 8002004:	4196e360 	.word	0x4196e360
 8002008:	00000000 	.word	0x00000000
 800200c:	40b38800 	.word	0x40b38800
 8002010:	2000049c 	.word	0x2000049c
 8002014:	40180000 	.word	0x40180000
 8002018:	404e0000 	.word	0x404e0000
 800201c:	3ff00000 	.word	0x3ff00000
 8002020:	20000578 	.word	0x20000578
 8002024:	20000572 	.word	0x20000572
 8002028:	40490000 	.word	0x40490000
 800202c:	20000024 	.word	0x20000024
 8002030:	20000026 	.word	0x20000026
 8002034:	40010000 	.word	0x40010000
 8002038:	40014000 	.word	0x40014000

0800203c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <I2C2_EV_IRQHandler+0x10>)
 8002042:	f001 f993 	bl	800336c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200003a8 	.word	0x200003a8

08002050 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <I2C2_ER_IRQHandler+0x10>)
 8002056:	f001 fadc 	bl	8003612 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200003a8 	.word	0x200003a8

08002064 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <OTG_FS_IRQHandler+0x10>)
 800206a:	f002 ff82 	bl	8004f72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20001aa8 	.word	0x20001aa8

08002078 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return 1;
 800207c:	2301      	movs	r3, #1
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_kill>:

int _kill(int pid, int sig)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002092:	f00b fab1 	bl	800d5f8 <__errno>
 8002096:	4603      	mov	r3, r0
 8002098:	2216      	movs	r2, #22
 800209a:	601a      	str	r2, [r3, #0]
  return -1;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_exit>:

void _exit (int status)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ffe7 	bl	8002088 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ba:	e7fe      	b.n	80020ba <_exit+0x12>

080020bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	e00a      	b.n	80020e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ce:	f3af 8000 	nop.w
 80020d2:	4601      	mov	r1, r0
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	60ba      	str	r2, [r7, #8]
 80020da:	b2ca      	uxtb	r2, r1
 80020dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3301      	adds	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	dbf0      	blt.n	80020ce <_read+0x12>
  }

  return len;
 80020ec:	687b      	ldr	r3, [r7, #4]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	e009      	b.n	800211c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60ba      	str	r2, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbf1      	blt.n	8002108 <_write+0x12>
  }
  return len;
 8002124:	687b      	ldr	r3, [r7, #4]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_close>:

int _close(int file)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002156:	605a      	str	r2, [r3, #4]
  return 0;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_isatty>:

int _isatty(int file)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800216e:	2301      	movs	r3, #1
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <_sbrk+0x5c>)
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <_sbrk+0x60>)
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <_sbrk+0x64>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	; (8002200 <_sbrk+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d207      	bcs.n	80021d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c8:	f00b fa16 	bl	800d5f8 <__errno>
 80021cc:	4603      	mov	r3, r0
 80021ce:	220c      	movs	r2, #12
 80021d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	e009      	b.n	80021ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <_sbrk+0x64>)
 80021e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20020000 	.word	0x20020000
 80021f8:	00000400 	.word	0x00000400
 80021fc:	200005c0 	.word	0x200005c0
 8002200:	20002320 	.word	0x20002320

08002204 <SystemInit>:
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <SystemInit+0x20>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	4a05      	ldr	r2, [pc, #20]	; (8002224 <SystemInit+0x20>)
 8002210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800222e:	490e      	ldr	r1, [pc, #56]	; (8002268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002244:	4c0b      	ldr	r4, [pc, #44]	; (8002274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002252:	f7ff ffd7 	bl	8002204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002256:	f00b f9d5 	bl	800d604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225a:	f7fe fe2b 	bl	8000eb4 <main>
  bx  lr    
 800225e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 800226c:	0800fb5c 	.word	0x0800fb5c
  ldr r2, =_sbss
 8002270:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8002274:	20002320 	.word	0x20002320

08002278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC_IRQHandler>
	...

0800227c <HAL_Init>:
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
 8002280:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <HAL_Init+0x40>)
 8002286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_Init+0x40>)
 8002292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_Init+0x40>)
 800229e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 fd0d 	bl	8002cc4 <HAL_NVIC_SetPriorityGrouping>
 80022aa:	200f      	movs	r0, #15
 80022ac:	f000 f808 	bl	80022c0 <HAL_InitTick>
 80022b0:	f7ff faba 	bl	8001828 <HAL_MspInit>
 80022b4:	2300      	movs	r3, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023c00 	.word	0x40023c00

080022c0 <HAL_InitTick>:
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_InitTick+0x54>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x58>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fd25 	bl	8002d2e <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_InitTick+0x2e>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00e      	b.n	800230c <HAL_InitTick+0x4c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d80a      	bhi.n	800230a <HAL_InitTick+0x4a>
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f000 fced 	bl	8002cda <HAL_NVIC_SetPriority>
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <HAL_InitTick+0x5c>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_InitTick+0x4c>
 800230a:	2301      	movs	r3, #1
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000028 	.word	0x20000028
 8002318:	20000030 	.word	0x20000030
 800231c:	2000002c 	.word	0x2000002c

08002320 <HAL_IncTick>:
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000030 	.word	0x20000030
 8002344:	200005c4 	.word	0x200005c4

08002348 <HAL_GetTick>:
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	200005c4 	.word	0x200005c4

08002360 <HAL_Delay>:
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	f7ff ffee 	bl	8002348 <HAL_GetTick>
 800236c:	60b8      	str	r0, [r7, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d005      	beq.n	8002386 <HAL_Delay+0x26>
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_Delay+0x44>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	bf00      	nop
 8002388:	f7ff ffde 	bl	8002348 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d8f7      	bhi.n	8002388 <HAL_Delay+0x28>
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000030 	.word	0x20000030

080023a8 <HAL_ADC_Init>:
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_ADC_Init+0x16>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e033      	b.n	8002426 <HAL_ADC_Init+0x7e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_ADC_Init+0x32>
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff fa56 	bl	8001878 <HAL_ADC_MspInit>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <HAL_ADC_Init+0x70>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023ee:	f023 0302 	bic.w	r3, r3, #2
 80023f2:	f043 0202 	orr.w	r2, r3, #2
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fa96 	bl	800292c <ADC_Init>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	645a      	str	r2, [r3, #68]	; 0x44
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f023 0303 	bic.w	r3, r3, #3
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
 8002416:	e001      	b.n	800241c <HAL_ADC_Init+0x74>
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_ADC_Start>:
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	2300      	movs	r3, #0
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_ADC_Start+0x1a>
 8002446:	2302      	movs	r3, #2
 8002448:	e097      	b.n	800257a <HAL_ADC_Start+0x14a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d018      	beq.n	8002492 <HAL_ADC_Start+0x62>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	4b45      	ldr	r3, [pc, #276]	; (8002588 <HAL_ADC_Start+0x158>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a45      	ldr	r2, [pc, #276]	; (800258c <HAL_ADC_Start+0x15c>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	0c9a      	lsrs	r2, r3, #18
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	e002      	b.n	800248c <HAL_ADC_Start+0x5c>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	3b01      	subs	r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f9      	bne.n	8002486 <HAL_ADC_Start+0x56>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d15f      	bne.n	8002560 <HAL_ADC_Start+0x130>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <HAL_ADC_Start+0xa2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024de:	d106      	bne.n	80024ee <HAL_ADC_Start+0xbe>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f023 0206 	bic.w	r2, r3, #6
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
 80024ec:	e002      	b.n	80024f4 <HAL_ADC_Start+0xc4>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	645a      	str	r2, [r3, #68]	; 0x44
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_ADC_Start+0x160>)
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <HAL_ADC_Start+0x106>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d129      	bne.n	8002578 <HAL_ADC_Start+0x148>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	e020      	b.n	8002578 <HAL_ADC_Start+0x148>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a16      	ldr	r2, [pc, #88]	; (8002594 <HAL_ADC_Start+0x164>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d11b      	bne.n	8002578 <HAL_ADC_Start+0x148>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d114      	bne.n	8002578 <HAL_ADC_Start+0x148>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	e00b      	b.n	8002578 <HAL_ADC_Start+0x148>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	f043 0210 	orr.w	r2, r3, #16
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	645a      	str	r2, [r3, #68]	; 0x44
 8002578:	2300      	movs	r3, #0
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20000028 	.word	0x20000028
 800258c:	431bde83 	.word	0x431bde83
 8002590:	40012300 	.word	0x40012300
 8002594:	40012000 	.word	0x40012000

08002598 <HAL_ADC_PollForConversion>:
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b4:	d113      	bne.n	80025de <HAL_ADC_PollForConversion+0x46>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c4:	d10b      	bne.n	80025de <HAL_ADC_PollForConversion+0x46>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f043 0220 	orr.w	r2, r3, #32
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025da:	2301      	movs	r3, #1
 80025dc:	e063      	b.n	80026a6 <HAL_ADC_PollForConversion+0x10e>
 80025de:	f7ff feb3 	bl	8002348 <HAL_GetTick>
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	e021      	b.n	800262a <HAL_ADC_PollForConversion+0x92>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d01d      	beq.n	800262a <HAL_ADC_PollForConversion+0x92>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <HAL_ADC_PollForConversion+0x6c>
 80025f4:	f7ff fea8 	bl	8002348 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d212      	bcs.n	800262a <HAL_ADC_PollForConversion+0x92>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b02      	cmp	r3, #2
 8002610:	d00b      	beq.n	800262a <HAL_ADC_PollForConversion+0x92>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f043 0204 	orr.w	r2, r3, #4
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002626:	2303      	movs	r3, #3
 8002628:	e03d      	b.n	80026a6 <HAL_ADC_PollForConversion+0x10e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b02      	cmp	r3, #2
 8002636:	d1d6      	bne.n	80025e6 <HAL_ADC_PollForConversion+0x4e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0212 	mvn.w	r2, #18
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d123      	bne.n	80026a4 <HAL_ADC_PollForConversion+0x10c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7e1b      	ldrb	r3, [r3, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d11f      	bne.n	80026a4 <HAL_ADC_PollForConversion+0x10c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d006      	beq.n	8002680 <HAL_ADC_PollForConversion+0xe8>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d111      	bne.n	80026a4 <HAL_ADC_PollForConversion+0x10c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <HAL_ADC_PollForConversion+0x10c>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
 80026a4:	2300      	movs	r3, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_ADC_GetValue>:
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_ADC_ConfigChannel>:
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x1c>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e113      	b.n	800290c <HAL_ADC_ConfigChannel+0x244>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b09      	cmp	r3, #9
 80026f2:	d925      	bls.n	8002740 <HAL_ADC_ConfigChannel+0x78>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68d9      	ldr	r1, [r3, #12]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	3b1e      	subs	r3, #30
 800270a:	2207      	movs	r2, #7
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43da      	mvns	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	400a      	ands	r2, r1
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68d9      	ldr	r1, [r3, #12]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	4618      	mov	r0, r3
 800272c:	4603      	mov	r3, r0
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4403      	add	r3, r0
 8002732:	3b1e      	subs	r3, #30
 8002734:	409a      	lsls	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	e022      	b.n	8002786 <HAL_ADC_ConfigChannel+0xbe>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6919      	ldr	r1, [r3, #16]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	2207      	movs	r2, #7
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	400a      	ands	r2, r1
 8002762:	611a      	str	r2, [r3, #16]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6919      	ldr	r1, [r3, #16]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	4618      	mov	r0, r3
 8002776:	4603      	mov	r3, r0
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4403      	add	r3, r0
 800277c:	409a      	lsls	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	611a      	str	r2, [r3, #16]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b06      	cmp	r3, #6
 800278c:	d824      	bhi.n	80027d8 <HAL_ADC_ConfigChannel+0x110>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	3b05      	subs	r3, #5
 80027a0:	221f      	movs	r2, #31
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	400a      	ands	r2, r1
 80027ae:	635a      	str	r2, [r3, #52]	; 0x34
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	3b05      	subs	r3, #5
 80027ca:	fa00 f203 	lsl.w	r2, r0, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	635a      	str	r2, [r3, #52]	; 0x34
 80027d6:	e04c      	b.n	8002872 <HAL_ADC_ConfigChannel+0x1aa>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b0c      	cmp	r3, #12
 80027de:	d824      	bhi.n	800282a <HAL_ADC_ConfigChannel+0x162>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	3b23      	subs	r3, #35	; 0x23
 80027f2:	221f      	movs	r2, #31
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43da      	mvns	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	400a      	ands	r2, r1
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	4618      	mov	r0, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	3b23      	subs	r3, #35	; 0x23
 800281c:	fa00 f203 	lsl.w	r2, r0, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
 8002828:	e023      	b.n	8002872 <HAL_ADC_ConfigChannel+0x1aa>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	3b41      	subs	r3, #65	; 0x41
 800283c:	221f      	movs	r2, #31
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	400a      	ands	r2, r1
 800284a:	62da      	str	r2, [r3, #44]	; 0x2c
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	b29b      	uxth	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	3b41      	subs	r3, #65	; 0x41
 8002866:	fa00 f203 	lsl.w	r2, r0, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c
 8002872:	4b29      	ldr	r3, [pc, #164]	; (8002918 <HAL_ADC_ConfigChannel+0x250>)
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a28      	ldr	r2, [pc, #160]	; (800291c <HAL_ADC_ConfigChannel+0x254>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d10f      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1d8>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b12      	cmp	r3, #18
 8002886:	d10b      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1d8>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1d      	ldr	r2, [pc, #116]	; (800291c <HAL_ADC_ConfigChannel+0x254>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d12b      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x23a>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <HAL_ADC_ConfigChannel+0x258>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d003      	beq.n	80028bc <HAL_ADC_ConfigChannel+0x1f4>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b11      	cmp	r3, #17
 80028ba:	d122      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x23a>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a11      	ldr	r2, [pc, #68]	; (8002920 <HAL_ADC_ConfigChannel+0x258>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d111      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x23a>
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_ADC_ConfigChannel+0x25c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a11      	ldr	r2, [pc, #68]	; (8002928 <HAL_ADC_ConfigChannel+0x260>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	0c9a      	lsrs	r2, r3, #18
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	e002      	b.n	80028fc <HAL_ADC_ConfigChannel+0x234>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f9      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x22e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800290a:	2300      	movs	r3, #0
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40012300 	.word	0x40012300
 800291c:	40012000 	.word	0x40012000
 8002920:	10000012 	.word	0x10000012
 8002924:	20000028 	.word	0x20000028
 8002928:	431bde83 	.word	0x431bde83

0800292c <ADC_Init>:
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	4b79      	ldr	r3, [pc, #484]	; (8002b1c <ADC_Init+0x1f0>)
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	431a      	orrs	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	021a      	lsls	r2, r3, #8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6899      	ldr	r1, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	4a58      	ldr	r2, [pc, #352]	; (8002b20 <ADC_Init+0x1f4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d022      	beq.n	8002a0a <ADC_Init+0xde>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6899      	ldr	r1, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6899      	ldr	r1, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	e00f      	b.n	8002a2a <ADC_Init+0xfe>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0202 	bic.w	r2, r2, #2
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6899      	ldr	r1, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7e1b      	ldrb	r3, [r3, #24]
 8002a44:	005a      	lsls	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01b      	beq.n	8002a90 <ADC_Init+0x164>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	3b01      	subs	r3, #1
 8002a84:	035a      	lsls	r2, r3, #13
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	e007      	b.n	8002aa0 <ADC_Init+0x174>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	051a      	lsls	r2, r3, #20
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6899      	ldr	r1, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ae2:	025a      	lsls	r2, r3, #9
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6899      	ldr	r1, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	029a      	lsls	r2, r3, #10
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	40012300 	.word	0x40012300
 8002b20:	0f000001 	.word	0x0f000001

08002b24 <__NVIC_SetPriorityGrouping>:
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b40:	4013      	ands	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	021a      	lsls	r2, r3, #8
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	60d3      	str	r3, [r2, #12]
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_GetPriorityGrouping>:
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <__NVIC_GetPriorityGrouping+0x18>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_EnableIRQ>:
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0b      	blt.n	8002bb2 <__NVIC_EnableIRQ+0x2a>
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <__NVIC_EnableIRQ+0x38>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <__NVIC_SetPriority>:
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	71fb      	strb	r3, [r7, #7]
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	db0a      	blt.n	8002bee <__NVIC_SetPriority+0x2a>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	490c      	ldr	r1, [pc, #48]	; (8002c10 <__NVIC_SetPriority+0x4c>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	0112      	lsls	r2, r2, #4
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	440b      	add	r3, r1
 8002be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002bec:	e00a      	b.n	8002c04 <__NVIC_SetPriority+0x40>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4908      	ldr	r1, [pc, #32]	; (8002c14 <__NVIC_SetPriority+0x50>)
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	3b04      	subs	r3, #4
 8002bfc:	0112      	lsls	r2, r2, #4
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	440b      	add	r3, r1
 8002c02:	761a      	strb	r2, [r3, #24]
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <NVIC_EncodePriority>:
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f1c3 0307 	rsb	r3, r3, #7
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	bf28      	it	cs
 8002c36:	2304      	movcs	r3, #4
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d902      	bls.n	8002c48 <NVIC_EncodePriority+0x30>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3b03      	subs	r3, #3
 8002c46:	e000      	b.n	8002c4a <NVIC_EncodePriority+0x32>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	f04f 31ff 	mov.w	r1, #4294967295
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43d9      	mvns	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	400b      	ands	r3, r1
 8002c70:	4313      	orrs	r3, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	; 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <SysTick_Config>:
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c90:	d301      	bcc.n	8002c96 <SysTick_Config+0x16>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00f      	b.n	8002cb6 <SysTick_Config+0x36>
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <SysTick_Config+0x40>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	6053      	str	r3, [r2, #4]
 8002c9e:	210f      	movs	r1, #15
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f7ff ff8e 	bl	8002bc4 <__NVIC_SetPriority>
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <SysTick_Config+0x40>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <SysTick_Config+0x40>)
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	e000e010 	.word	0xe000e010

08002cc4 <HAL_NVIC_SetPriorityGrouping>:
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff29 	bl	8002b24 <__NVIC_SetPriorityGrouping>
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_SetPriority>:
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	f7ff ff3e 	bl	8002b6c <__NVIC_GetPriorityGrouping>
 8002cf0:	6178      	str	r0, [r7, #20]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	6978      	ldr	r0, [r7, #20]
 8002cf8:	f7ff ff8e 	bl	8002c18 <NVIC_EncodePriority>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff5d 	bl	8002bc4 <__NVIC_SetPriority>
 8002d0a:	bf00      	nop
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_EnableIRQ>:
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	71fb      	strb	r3, [r7, #7]
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff31 	bl	8002b88 <__NVIC_EnableIRQ>
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_SYSTICK_Config>:
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ffa2 	bl	8002c80 <SysTick_Config>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_DMA_Abort_IT>:
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d004      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x1e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2280      	movs	r2, #128	; 0x80
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54
 8002d60:	2301      	movs	r3, #1
 8002d62:	e00c      	b.n	8002d7e <HAL_DMA_Abort_IT+0x38>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2205      	movs	r2, #5
 8002d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_DMA_GetState>:
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_GPIO_Init>:
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	; 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e159      	b.n	8003078 <HAL_GPIO_Init+0x2d0>
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	f040 8148 	bne.w	8003072 <HAL_GPIO_Init+0x2ca>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d005      	beq.n	8002dfa <HAL_GPIO_Init+0x52>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d130      	bne.n	8002e5c <HAL_GPIO_Init+0xb4>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2203      	movs	r2, #3
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	609a      	str	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	2201      	movs	r2, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 0201 	and.w	r2, r3, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d017      	beq.n	8002e98 <HAL_GPIO_Init+0xf0>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	60da      	str	r2, [r3, #12]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d123      	bne.n	8002eec <HAL_GPIO_Init+0x144>
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	08da      	lsrs	r2, r3, #3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3208      	adds	r2, #8
 8002eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	220f      	movs	r2, #15
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	08da      	lsrs	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3208      	adds	r2, #8
 8002ee6:	69b9      	ldr	r1, [r7, #24]
 8002ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0203 	and.w	r2, r3, #3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80a2 	beq.w	8003072 <HAL_GPIO_Init+0x2ca>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b57      	ldr	r3, [pc, #348]	; (8003090 <HAL_GPIO_Init+0x2e8>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	4a56      	ldr	r2, [pc, #344]	; (8003090 <HAL_GPIO_Init+0x2e8>)
 8002f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3e:	4b54      	ldr	r3, [pc, #336]	; (8003090 <HAL_GPIO_Init+0x2e8>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4a52      	ldr	r2, [pc, #328]	; (8003094 <HAL_GPIO_Init+0x2ec>)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3302      	adds	r3, #2
 8002f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	220f      	movs	r2, #15
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a49      	ldr	r2, [pc, #292]	; (8003098 <HAL_GPIO_Init+0x2f0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d019      	beq.n	8002faa <HAL_GPIO_Init+0x202>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a48      	ldr	r2, [pc, #288]	; (800309c <HAL_GPIO_Init+0x2f4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_GPIO_Init+0x1fe>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <HAL_GPIO_Init+0x2f8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00d      	beq.n	8002fa2 <HAL_GPIO_Init+0x1fa>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a46      	ldr	r2, [pc, #280]	; (80030a4 <HAL_GPIO_Init+0x2fc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d007      	beq.n	8002f9e <HAL_GPIO_Init+0x1f6>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a45      	ldr	r2, [pc, #276]	; (80030a8 <HAL_GPIO_Init+0x300>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <HAL_GPIO_Init+0x1f2>
 8002f96:	2304      	movs	r3, #4
 8002f98:	e008      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002f9a:	2307      	movs	r3, #7
 8002f9c:	e006      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e004      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e002      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002faa:	2300      	movs	r3, #0
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	f002 0203 	and.w	r2, r2, #3
 8002fb2:	0092      	lsls	r2, r2, #2
 8002fb4:	4093      	lsls	r3, r2
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	4935      	ldr	r1, [pc, #212]	; (8003094 <HAL_GPIO_Init+0x2ec>)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002fca:	4b38      	ldr	r3, [pc, #224]	; (80030ac <HAL_GPIO_Init+0x304>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x246>
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	4a2f      	ldr	r2, [pc, #188]	; (80030ac <HAL_GPIO_Init+0x304>)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	6093      	str	r3, [r2, #8]
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <HAL_GPIO_Init+0x304>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_GPIO_Init+0x270>
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	4a24      	ldr	r2, [pc, #144]	; (80030ac <HAL_GPIO_Init+0x304>)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	60d3      	str	r3, [r2, #12]
 800301e:	4b23      	ldr	r3, [pc, #140]	; (80030ac <HAL_GPIO_Init+0x304>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x29a>
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	4a1a      	ldr	r2, [pc, #104]	; (80030ac <HAL_GPIO_Init+0x304>)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6053      	str	r3, [r2, #4]
 8003048:	4b18      	ldr	r3, [pc, #96]	; (80030ac <HAL_GPIO_Init+0x304>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x2c4>
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	4a0f      	ldr	r2, [pc, #60]	; (80030ac <HAL_GPIO_Init+0x304>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3301      	adds	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	f67f aea2 	bls.w	8002dc4 <HAL_GPIO_Init+0x1c>
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	3724      	adds	r7, #36	; 0x24
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	40013800 	.word	0x40013800
 8003098:	40020000 	.word	0x40020000
 800309c:	40020400 	.word	0x40020400
 80030a0:	40020800 	.word	0x40020800
 80030a4:	40020c00 	.word	0x40020c00
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40013c00 	.word	0x40013c00

080030b0 <HAL_GPIO_WritePin>:
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	807b      	strh	r3, [r7, #2]
 80030bc:	4613      	mov	r3, r2
 80030be:	707b      	strb	r3, [r7, #1]
 80030c0:	787b      	ldrb	r3, [r7, #1]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_WritePin+0x1e>
 80030c6:	887a      	ldrh	r2, [r7, #2]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	619a      	str	r2, [r3, #24]
 80030cc:	e003      	b.n	80030d6 <HAL_GPIO_WritePin+0x26>
 80030ce:	887b      	ldrh	r3, [r7, #2]
 80030d0:	041a      	lsls	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	619a      	str	r2, [r3, #24]
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_I2C_Init>:
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_I2C_Init+0x12>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e12b      	b.n	800334e <HAL_I2C_Init+0x26a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_I2C_Init+0x2c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe fbf8 	bl	8001900 <HAL_I2C_MspInit>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2224      	movs	r2, #36	; 0x24
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f003 fc70 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4a81      	ldr	r2, [pc, #516]	; (8003358 <HAL_I2C_Init+0x274>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d807      	bhi.n	8003168 <HAL_I2C_Init+0x84>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a80      	ldr	r2, [pc, #512]	; (800335c <HAL_I2C_Init+0x278>)
 800315c:	4293      	cmp	r3, r2
 800315e:	bf94      	ite	ls
 8003160:	2301      	movls	r3, #1
 8003162:	2300      	movhi	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e006      	b.n	8003176 <HAL_I2C_Init+0x92>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a7d      	ldr	r2, [pc, #500]	; (8003360 <HAL_I2C_Init+0x27c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	bf94      	ite	ls
 8003170:	2301      	movls	r3, #1
 8003172:	2300      	movhi	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Init+0x9a>
 800317a:	2301      	movs	r3, #1
 800317c:	e0e7      	b.n	800334e <HAL_I2C_Init+0x26a>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4a78      	ldr	r2, [pc, #480]	; (8003364 <HAL_I2C_Init+0x280>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	0c9b      	lsrs	r3, r3, #18
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a6a      	ldr	r2, [pc, #424]	; (8003358 <HAL_I2C_Init+0x274>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d802      	bhi.n	80031b8 <HAL_I2C_Init+0xd4>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3301      	adds	r3, #1
 80031b6:	e009      	b.n	80031cc <HAL_I2C_Init+0xe8>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	4a69      	ldr	r2, [pc, #420]	; (8003368 <HAL_I2C_Init+0x284>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	099b      	lsrs	r3, r3, #6
 80031ca:	3301      	adds	r3, #1
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6213      	str	r3, [r2, #32]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	495c      	ldr	r1, [pc, #368]	; (8003358 <HAL_I2C_Init+0x274>)
 80031e8:	428b      	cmp	r3, r1
 80031ea:	d819      	bhi.n	8003220 <HAL_I2C_Init+0x13c>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1e59      	subs	r1, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fa:	1c59      	adds	r1, r3, #1
 80031fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003200:	400b      	ands	r3, r1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_I2C_Init+0x138>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1e59      	subs	r1, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	fbb1 f3f3 	udiv	r3, r1, r3
 8003214:	3301      	adds	r3, #1
 8003216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321a:	e051      	b.n	80032c0 <HAL_I2C_Init+0x1dc>
 800321c:	2304      	movs	r3, #4
 800321e:	e04f      	b.n	80032c0 <HAL_I2C_Init+0x1dc>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d111      	bne.n	800324c <HAL_I2C_Init+0x168>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1e58      	subs	r0, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	440b      	add	r3, r1
 8003236:	fbb0 f3f3 	udiv	r3, r0, r3
 800323a:	3301      	adds	r3, #1
 800323c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e012      	b.n	8003272 <HAL_I2C_Init+0x18e>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1e58      	subs	r0, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	0099      	lsls	r1, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003262:	3301      	adds	r3, #1
 8003264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Init+0x196>
 8003276:	2301      	movs	r3, #1
 8003278:	e022      	b.n	80032c0 <HAL_I2C_Init+0x1dc>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10e      	bne.n	80032a0 <HAL_I2C_Init+0x1bc>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1e58      	subs	r0, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6859      	ldr	r1, [r3, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	440b      	add	r3, r1
 8003290:	fbb0 f3f3 	udiv	r3, r0, r3
 8003294:	3301      	adds	r3, #1
 8003296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329e:	e00f      	b.n	80032c0 <HAL_I2C_Init+0x1dc>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1e58      	subs	r0, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	0099      	lsls	r1, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b6:	3301      	adds	r3, #1
 80032b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	6809      	ldr	r1, [r1, #0]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61cb      	str	r3, [r1, #28]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69da      	ldr	r2, [r3, #28]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6911      	ldr	r1, [r2, #16]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68d2      	ldr	r2, [r2, #12]
 80032fa:	4311      	orrs	r1, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	430b      	orrs	r3, r1
 8003302:	6093      	str	r3, [r2, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	60da      	str	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800334c:	2300      	movs	r3, #0
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	000186a0 	.word	0x000186a0
 800335c:	001e847f 	.word	0x001e847f
 8003360:	003d08ff 	.word	0x003d08ff
 8003364:	431bde83 	.word	0x431bde83
 8003368:	10624dd3 	.word	0x10624dd3

0800336c <HAL_I2C_EV_IRQHandler>:
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800338c:	73fb      	strb	r3, [r7, #15]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003394:	73bb      	strb	r3, [r7, #14]
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	2b10      	cmp	r3, #16
 800339a:	d003      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0x38>
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	f040 80b1 	bne.w	8003506 <HAL_I2C_EV_IRQHandler+0x19a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10d      	bne.n	80033da <HAL_I2C_EV_IRQHandler+0x6e>
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80033c4:	d003      	beq.n	80033ce <HAL_I2C_EV_IRQHandler+0x62>
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80033cc:	d101      	bne.n	80033d2 <HAL_I2C_EV_IRQHandler+0x66>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <HAL_I2C_EV_IRQHandler+0x68>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f000 8114 	beq.w	8003602 <HAL_I2C_EV_IRQHandler+0x296>
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00b      	beq.n	80033fc <HAL_I2C_EV_IRQHandler+0x90>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d006      	beq.n	80033fc <HAL_I2C_EV_IRQHandler+0x90>
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f001 fc54 	bl	8004c9c <I2C_ConvertOtherXferOptions>
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fd5e 	bl	8003eb6 <I2C_Master_SB>
 80033fa:	e083      	b.n	8003504 <HAL_I2C_EV_IRQHandler+0x198>
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_I2C_EV_IRQHandler+0xac>
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_I2C_EV_IRQHandler+0xac>
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fdd6 	bl	8003fc2 <I2C_Master_ADD10>
 8003416:	e075      	b.n	8003504 <HAL_I2C_EV_IRQHandler+0x198>
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_I2C_EV_IRQHandler+0xc8>
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_I2C_EV_IRQHandler+0xc8>
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fdf2 	bl	8004016 <I2C_Master_ADDR>
 8003432:	e067      	b.n	8003504 <HAL_I2C_EV_IRQHandler+0x198>
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d036      	beq.n	80034ac <HAL_I2C_EV_IRQHandler+0x140>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800344c:	f000 80db 	beq.w	8003606 <HAL_I2C_EV_IRQHandler+0x29a>
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00d      	beq.n	8003476 <HAL_I2C_EV_IRQHandler+0x10a>
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_I2C_EV_IRQHandler+0x10a>
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d103      	bne.n	8003476 <HAL_I2C_EV_IRQHandler+0x10a>
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f9d6 	bl	8003820 <I2C_MasterTransmit_TXE>
 8003474:	e046      	b.n	8003504 <HAL_I2C_EV_IRQHandler+0x198>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80c2 	beq.w	8003606 <HAL_I2C_EV_IRQHandler+0x29a>
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80bc 	beq.w	8003606 <HAL_I2C_EV_IRQHandler+0x29a>
 800348e:	7bbb      	ldrb	r3, [r7, #14]
 8003490:	2b21      	cmp	r3, #33	; 0x21
 8003492:	d103      	bne.n	800349c <HAL_I2C_EV_IRQHandler+0x130>
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fa5f 	bl	8003958 <I2C_MasterTransmit_BTF>
 800349a:	e0b4      	b.n	8003606 <HAL_I2C_EV_IRQHandler+0x29a>
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	f040 80b1 	bne.w	8003606 <HAL_I2C_EV_IRQHandler+0x29a>
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 facd 	bl	8003a44 <I2C_MemoryTransmit_TXE_BTF>
 80034aa:	e0ac      	b.n	8003606 <HAL_I2C_EV_IRQHandler+0x29a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ba:	f000 80a4 	beq.w	8003606 <HAL_I2C_EV_IRQHandler+0x29a>
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00d      	beq.n	80034e4 <HAL_I2C_EV_IRQHandler+0x178>
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_I2C_EV_IRQHandler+0x178>
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d103      	bne.n	80034e4 <HAL_I2C_EV_IRQHandler+0x178>
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fb45 	bl	8003b6c <I2C_MasterReceive_RXNE>
 80034e2:	e00f      	b.n	8003504 <HAL_I2C_EV_IRQHandler+0x198>
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 808b 	beq.w	8003606 <HAL_I2C_EV_IRQHandler+0x29a>
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8085 	beq.w	8003606 <HAL_I2C_EV_IRQHandler+0x29a>
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fbf0 	bl	8003ce2 <I2C_MasterReceive_BTF>
 8003502:	e080      	b.n	8003606 <HAL_I2C_EV_IRQHandler+0x29a>
 8003504:	e07f      	b.n	8003606 <HAL_I2C_EV_IRQHandler+0x29a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d004      	beq.n	8003518 <HAL_I2C_EV_IRQHandler+0x1ac>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	e007      	b.n	8003528 <HAL_I2C_EV_IRQHandler+0x1bc>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	61bb      	str	r3, [r7, #24]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	61fb      	str	r3, [r7, #28]
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d011      	beq.n	8003556 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00c      	beq.n	8003556 <HAL_I2C_EV_IRQHandler+0x1ea>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_I2C_EV_IRQHandler+0x1e0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	69b9      	ldr	r1, [r7, #24]
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 ffb0 	bl	80044b4 <I2C_Slave_ADDR>
 8003554:	e05a      	b.n	800360c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_I2C_EV_IRQHandler+0x206>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_I2C_EV_IRQHandler+0x206>
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 ffea 	bl	8004544 <I2C_Slave_STOPF>
 8003570:	e04c      	b.n	800360c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003572:	7bbb      	ldrb	r3, [r7, #14]
 8003574:	2b21      	cmp	r3, #33	; 0x21
 8003576:	d002      	beq.n	800357e <HAL_I2C_EV_IRQHandler+0x212>
 8003578:	7bbb      	ldrb	r3, [r7, #14]
 800357a:	2b29      	cmp	r3, #41	; 0x29
 800357c:	d120      	bne.n	80035c0 <HAL_I2C_EV_IRQHandler+0x254>
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00d      	beq.n	80035a4 <HAL_I2C_EV_IRQHandler+0x238>
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_I2C_EV_IRQHandler+0x238>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d103      	bne.n	80035a4 <HAL_I2C_EV_IRQHandler+0x238>
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fecb 	bl	8004338 <I2C_SlaveTransmit_TXE>
 80035a2:	e032      	b.n	800360a <HAL_I2C_EV_IRQHandler+0x29e>
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d02d      	beq.n	800360a <HAL_I2C_EV_IRQHandler+0x29e>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d028      	beq.n	800360a <HAL_I2C_EV_IRQHandler+0x29e>
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fefa 	bl	80043b2 <I2C_SlaveTransmit_BTF>
 80035be:	e024      	b.n	800360a <HAL_I2C_EV_IRQHandler+0x29e>
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <HAL_I2C_EV_IRQHandler+0x27a>
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_I2C_EV_IRQHandler+0x27a>
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <HAL_I2C_EV_IRQHandler+0x27a>
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 ff08 	bl	80043f4 <I2C_SlaveReceive_RXNE>
 80035e4:	e012      	b.n	800360c <HAL_I2C_EV_IRQHandler+0x2a0>
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <HAL_I2C_EV_IRQHandler+0x2a0>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_I2C_EV_IRQHandler+0x2a0>
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 ff38 	bl	8004470 <I2C_SlaveReceive_BTF>
 8003600:	e004      	b.n	800360c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003602:	bf00      	nop
 8003604:	e002      	b.n	800360c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003606:	bf00      	nop
 8003608:	e000      	b.n	800360c <HAL_I2C_EV_IRQHandler+0x2a0>
 800360a:	bf00      	nop
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_I2C_ER_IRQHandler>:
 8003612:	b580      	push	{r7, lr}
 8003614:	b08a      	sub	sp, #40	; 0x28
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	623b      	str	r3, [r7, #32]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	2300      	movs	r3, #0
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003634:	76fb      	strb	r3, [r7, #27]
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <HAL_I2C_ER_IRQHandler+0x4a>
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_I2C_ER_IRQHandler+0x4a>
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800365a:	615a      	str	r2, [r3, #20]
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <HAL_I2C_ER_IRQHandler+0x70>
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_I2C_ER_IRQHandler+0x70>
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	f043 0302 	orr.w	r3, r3, #2
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003680:	615a      	str	r2, [r3, #20]
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d03e      	beq.n	800370a <HAL_I2C_ER_IRQHandler+0xf8>
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d039      	beq.n	800370a <HAL_I2C_ER_IRQHandler+0xf8>
 8003696:	7efb      	ldrb	r3, [r7, #27]
 8003698:	76bb      	strb	r3, [r7, #26]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	74fb      	strb	r3, [r7, #19]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	7ebb      	ldrb	r3, [r7, #26]
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d112      	bne.n	80036dc <HAL_I2C_ER_IRQHandler+0xca>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10f      	bne.n	80036dc <HAL_I2C_ER_IRQHandler+0xca>
 80036bc:	7cfb      	ldrb	r3, [r7, #19]
 80036be:	2b21      	cmp	r3, #33	; 0x21
 80036c0:	d008      	beq.n	80036d4 <HAL_I2C_ER_IRQHandler+0xc2>
 80036c2:	7cfb      	ldrb	r3, [r7, #19]
 80036c4:	2b29      	cmp	r3, #41	; 0x29
 80036c6:	d005      	beq.n	80036d4 <HAL_I2C_ER_IRQHandler+0xc2>
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	2b28      	cmp	r3, #40	; 0x28
 80036cc:	d106      	bne.n	80036dc <HAL_I2C_ER_IRQHandler+0xca>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b21      	cmp	r3, #33	; 0x21
 80036d2:	d103      	bne.n	80036dc <HAL_I2C_ER_IRQHandler+0xca>
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f001 f865 	bl	80047a4 <I2C_Slave_AF>
 80036da:	e016      	b.n	800370a <HAL_I2C_ER_IRQHandler+0xf8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036e4:	615a      	str	r2, [r3, #20]
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	f043 0304 	orr.w	r3, r3, #4
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
 80036ee:	7efb      	ldrb	r3, [r7, #27]
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d002      	beq.n	80036fa <HAL_I2C_ER_IRQHandler+0xe8>
 80036f4:	7efb      	ldrb	r3, [r7, #27]
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d107      	bne.n	800370a <HAL_I2C_ER_IRQHandler+0xf8>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00d      	beq.n	8003730 <HAL_I2C_ER_IRQHandler+0x11e>
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d008      	beq.n	8003730 <HAL_I2C_ER_IRQHandler+0x11e>
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	f043 0308 	orr.w	r3, r3, #8
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800372e:	615a      	str	r2, [r3, #20]
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_I2C_ER_IRQHandler+0x136>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f001 f89e 	bl	8004884 <I2C_ITError>
 8003748:	bf00      	nop
 800374a:	3728      	adds	r7, #40	; 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_I2C_MasterTxCpltCallback>:
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_I2C_MasterRxCpltCallback>:
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_I2C_SlaveTxCpltCallback>:
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_I2C_SlaveRxCpltCallback>:
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_I2C_AddrCallback>:
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	70fb      	strb	r3, [r7, #3]
 80037ac:	4613      	mov	r3, r2
 80037ae:	803b      	strh	r3, [r7, #0]
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_I2C_ListenCpltCallback>:
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_I2C_MemTxCpltCallback>:
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_I2C_MemRxCpltCallback>:
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_I2C_ErrorCallback>:
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_I2C_AbortCpltCallback>:
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <I2C_MasterTransmit_TXE>:
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382e:	73fb      	strb	r3, [r7, #15]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003836:	73bb      	strb	r3, [r7, #14]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	2b00      	cmp	r3, #0
 8003844:	d150      	bne.n	80038e8 <I2C_MasterTransmit_TXE+0xc8>
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	2b21      	cmp	r3, #33	; 0x21
 800384a:	d14d      	bne.n	80038e8 <I2C_MasterTransmit_TXE+0xc8>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b08      	cmp	r3, #8
 8003850:	d01d      	beq.n	800388e <I2C_MasterTransmit_TXE+0x6e>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b20      	cmp	r3, #32
 8003856:	d01a      	beq.n	800388e <I2C_MasterTransmit_TXE+0x6e>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800385e:	d016      	beq.n	800388e <I2C_MasterTransmit_TXE+0x6e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2211      	movs	r2, #17
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ff62 	bl	8003750 <HAL_I2C_MasterTxCpltCallback>
 800388c:	e060      	b.n	8003950 <I2C_MasterTransmit_TXE+0x130>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d107      	bne.n	80038d8 <I2C_MasterTransmit_TXE+0xb8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff ff7d 	bl	80037d0 <HAL_I2C_MemTxCpltCallback>
 80038d6:	e03b      	b.n	8003950 <I2C_MasterTransmit_TXE+0x130>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff35 	bl	8003750 <HAL_I2C_MasterTxCpltCallback>
 80038e6:	e033      	b.n	8003950 <I2C_MasterTransmit_TXE+0x130>
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b21      	cmp	r3, #33	; 0x21
 80038ec:	d005      	beq.n	80038fa <I2C_MasterTransmit_TXE+0xda>
 80038ee:	7bbb      	ldrb	r3, [r7, #14]
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d12d      	bne.n	8003950 <I2C_MasterTransmit_TXE+0x130>
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b22      	cmp	r3, #34	; 0x22
 80038f8:	d12a      	bne.n	8003950 <I2C_MasterTransmit_TXE+0x130>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d108      	bne.n	8003916 <I2C_MasterTransmit_TXE+0xf6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	e01c      	b.n	8003950 <I2C_MasterTransmit_TXE+0x130>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b40      	cmp	r3, #64	; 0x40
 8003920:	d103      	bne.n	800392a <I2C_MasterTransmit_TXE+0x10a>
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f88e 	bl	8003a44 <I2C_MemoryTransmit_TXE_BTF>
 8003928:	e012      	b.n	8003950 <I2C_MasterTransmit_TXE+0x130>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	781a      	ldrb	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	611a      	str	r2, [r3, #16]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	625a      	str	r2, [r3, #36]	; 0x24
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800394e:	e7ff      	b.n	8003950 <I2C_MasterTransmit_TXE+0x130>
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <I2C_MasterTransmit_BTF>:
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b21      	cmp	r3, #33	; 0x21
 8003970:	d164      	bne.n	8003a3c <I2C_MasterTransmit_BTF+0xe4>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d012      	beq.n	80039a2 <I2C_MasterTransmit_BTF+0x4a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	781a      	ldrb	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	611a      	str	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039a0:	e04c      	b.n	8003a3c <I2C_MasterTransmit_BTF+0xe4>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d01d      	beq.n	80039e4 <I2C_MasterTransmit_BTF+0x8c>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d01a      	beq.n	80039e4 <I2C_MasterTransmit_BTF+0x8c>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039b4:	d016      	beq.n	80039e4 <I2C_MasterTransmit_BTF+0x8c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2211      	movs	r2, #17
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff feb7 	bl	8003750 <HAL_I2C_MasterTxCpltCallback>
 80039e2:	e02b      	b.n	8003a3c <I2C_MasterTransmit_BTF+0xe4>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b40      	cmp	r3, #64	; 0x40
 8003a1c:	d107      	bne.n	8003a2e <I2C_MasterTransmit_BTF+0xd6>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff fed2 	bl	80037d0 <HAL_I2C_MemTxCpltCallback>
 8003a2c:	e006      	b.n	8003a3c <I2C_MasterTransmit_BTF+0xe4>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff fe8a 	bl	8003750 <HAL_I2C_MasterTxCpltCallback>
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <I2C_MemoryTransmit_TXE_BTF>:
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d11d      	bne.n	8003a98 <I2C_MemoryTransmit_TXE_BTF+0x54>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d10b      	bne.n	8003a7c <I2C_MemoryTransmit_TXE_BTF+0x38>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	611a      	str	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	651a      	str	r2, [r3, #80]	; 0x50
 8003a7a:	e073      	b.n	8003b64 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	121b      	asrs	r3, r3, #8
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	651a      	str	r2, [r3, #80]	; 0x50
 8003a96:	e065      	b.n	8003b64 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d10b      	bne.n	8003ab8 <I2C_MemoryTransmit_TXE_BTF+0x74>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	611a      	str	r2, [r3, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	651a      	str	r2, [r3, #80]	; 0x50
 8003ab6:	e055      	b.n	8003b64 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d151      	bne.n	8003b64 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b22      	cmp	r3, #34	; 0x22
 8003ac4:	d10d      	bne.n	8003ae2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	651a      	str	r2, [r3, #80]	; 0x50
 8003ae0:	e040      	b.n	8003b64 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d015      	beq.n	8003b18 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b21      	cmp	r3, #33	; 0x21
 8003af0:	d112      	bne.n	8003b18 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	781a      	ldrb	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	611a      	str	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b16:	e025      	b.n	8003b64 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d120      	bne.n	8003b64 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	2b21      	cmp	r3, #33	; 0x21
 8003b26:	d11d      	bne.n	8003b64 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff fe36 	bl	80037d0 <HAL_I2C_MemTxCpltCallback>
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <I2C_MasterReceive_RXNE>:
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b22      	cmp	r3, #34	; 0x22
 8003b7e:	f040 80ac 	bne.w	8003cda <I2C_MasterReceive_RXNE+0x16e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d921      	bls.n	8003bd4 <I2C_MasterReceive_RXNE+0x68>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	f040 808c 	bne.w	8003cda <I2C_MasterReceive_RXNE+0x16e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	e082      	b.n	8003cda <I2C_MasterReceive_RXNE+0x16e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d075      	beq.n	8003cc8 <I2C_MasterReceive_RXNE+0x15c>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d002      	beq.n	8003be8 <I2C_MasterReceive_RXNE+0x7c>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d16f      	bne.n	8003cc8 <I2C_MasterReceive_RXNE+0x15c>
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f001 f825 	bl	8004c38 <I2C_WaitOnSTOPRequestThroughIT>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d142      	bne.n	8003c7a <I2C_MasterReceive_RXNE+0x10e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c12:	605a      	str	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	d10a      	bne.n	8003c64 <I2C_MasterReceive_RXNE+0xf8>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff fdc1 	bl	80037e4 <HAL_I2C_MemRxCpltCallback>
 8003c62:	e03a      	b.n	8003cda <I2C_MasterReceive_RXNE+0x16e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2212      	movs	r2, #18
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff fd76 	bl	8003764 <HAL_I2C_MasterRxCpltCallback>
 8003c78:	e02f      	b.n	8003cda <I2C_MasterReceive_RXNE+0x16e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fd99 	bl	80037f8 <HAL_I2C_ErrorCallback>
 8003cc6:	e008      	b.n	8003cda <I2C_MasterReceive_RXNE+0x16e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	e7ff      	b.n	8003cda <I2C_MasterReceive_RXNE+0x16e>
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <I2C_MasterReceive_BTF>:
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d11b      	bne.n	8003d32 <I2C_MasterReceive_BTF+0x50>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d30:	e0bd      	b.n	8003eae <I2C_MasterReceive_BTF+0x1cc>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d129      	bne.n	8003d90 <I2C_MasterReceive_BTF+0xae>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d00a      	beq.n	8003d68 <I2C_MasterReceive_BTF+0x86>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d007      	beq.n	8003d68 <I2C_MasterReceive_BTF+0x86>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d8e:	e08e      	b.n	8003eae <I2C_MasterReceive_BTF+0x1cc>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d176      	bne.n	8003e88 <I2C_MasterReceive_BTF+0x1a6>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d002      	beq.n	8003da6 <I2C_MasterReceive_BTF+0xc4>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d108      	bne.n	8003db8 <I2C_MasterReceive_BTF+0xd6>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e019      	b.n	8003dec <I2C_MasterReceive_BTF+0x10a>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d002      	beq.n	8003dc4 <I2C_MasterReceive_BTF+0xe2>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d108      	bne.n	8003dd6 <I2C_MasterReceive_BTF+0xf4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	e00a      	b.n	8003dec <I2C_MasterReceive_BTF+0x10a>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d007      	beq.n	8003dec <I2C_MasterReceive_BTF+0x10a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d10a      	bne.n	8003e72 <I2C_MasterReceive_BTF+0x190>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	; 0x30
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff fcba 	bl	80037e4 <HAL_I2C_MemRxCpltCallback>
 8003e70:	e01d      	b.n	8003eae <I2C_MasterReceive_BTF+0x1cc>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2212      	movs	r2, #18
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fc6f 	bl	8003764 <HAL_I2C_MasterRxCpltCallback>
 8003e86:	e012      	b.n	8003eae <I2C_MasterReceive_BTF+0x1cc>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	625a      	str	r2, [r3, #36]	; 0x24
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <I2C_Master_SB>:
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b40      	cmp	r3, #64	; 0x40
 8003ec8:	d117      	bne.n	8003efa <I2C_Master_SB+0x44>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d109      	bne.n	8003ee6 <I2C_Master_SB+0x30>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ee2:	611a      	str	r2, [r3, #16]
 8003ee4:	e067      	b.n	8003fb6 <I2C_Master_SB+0x100>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	611a      	str	r2, [r3, #16]
 8003ef8:	e05d      	b.n	8003fb6 <I2C_Master_SB+0x100>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f02:	d133      	bne.n	8003f6c <I2C_Master_SB+0xb6>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b21      	cmp	r3, #33	; 0x21
 8003f0e:	d109      	bne.n	8003f24 <I2C_Master_SB+0x6e>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f20:	611a      	str	r2, [r3, #16]
 8003f22:	e008      	b.n	8003f36 <I2C_Master_SB+0x80>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	611a      	str	r2, [r3, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d004      	beq.n	8003f48 <I2C_Master_SB+0x92>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d108      	bne.n	8003f5a <I2C_Master_SB+0xa4>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d032      	beq.n	8003fb6 <I2C_Master_SB+0x100>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d02d      	beq.n	8003fb6 <I2C_Master_SB+0x100>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	e024      	b.n	8003fb6 <I2C_Master_SB+0x100>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10e      	bne.n	8003f92 <I2C_Master_SB+0xdc>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	11db      	asrs	r3, r3, #7
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 0306 	and.w	r3, r3, #6
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f063 030f 	orn	r3, r3, #15
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	611a      	str	r2, [r3, #16]
 8003f90:	e011      	b.n	8003fb6 <I2C_Master_SB+0x100>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d10d      	bne.n	8003fb6 <I2C_Master_SB+0x100>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	11db      	asrs	r3, r3, #7
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f003 0306 	and.w	r3, r3, #6
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f063 030e 	orn	r3, r3, #14
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	611a      	str	r2, [r3, #16]
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <I2C_Master_ADD10>:
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	611a      	str	r2, [r3, #16]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <I2C_Master_ADD10+0x26>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d108      	bne.n	8003ffa <I2C_Master_ADD10+0x38>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00c      	beq.n	800400a <I2C_Master_ADD10+0x48>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d007      	beq.n	800400a <I2C_Master_ADD10+0x48>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <I2C_Master_ADDR>:
 8004016:	b480      	push	{r7}
 8004018:	b091      	sub	sp, #68	; 0x44
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004024:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	63bb      	str	r3, [r7, #56]	; 0x38
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	637b      	str	r3, [r7, #52]	; 0x34
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b22      	cmp	r3, #34	; 0x22
 800403e:	f040 8169 	bne.w	8004314 <I2C_Master_ADDR+0x2fe>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10f      	bne.n	800406a <I2C_Master_ADDR+0x54>
 800404a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	d10b      	bne.n	800406a <I2C_Master_ADDR+0x54>
 8004052:	2300      	movs	r3, #0
 8004054:	633b      	str	r3, [r7, #48]	; 0x30
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	633b      	str	r3, [r7, #48]	; 0x30
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	633b      	str	r3, [r7, #48]	; 0x30
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	e160      	b.n	800432c <I2C_Master_ADDR+0x316>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406e:	2b00      	cmp	r3, #0
 8004070:	d11d      	bne.n	80040ae <I2C_Master_ADDR+0x98>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800407a:	d118      	bne.n	80040ae <I2C_Master_ADDR+0x98>
 800407c:	2300      	movs	r3, #0
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	651a      	str	r2, [r3, #80]	; 0x50
 80040ac:	e13e      	b.n	800432c <I2C_Master_ADDR+0x316>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d113      	bne.n	80040e0 <I2C_Master_ADDR+0xca>
 80040b8:	2300      	movs	r3, #0
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e115      	b.n	800430c <I2C_Master_ADDR+0x2f6>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	f040 808a 	bne.w	8004200 <I2C_Master_ADDR+0x1ea>
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040f2:	d137      	bne.n	8004164 <I2C_Master_ADDR+0x14e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800410e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004112:	d113      	bne.n	800413c <I2C_Master_ADDR+0x126>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	2300      	movs	r3, #0
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	e0e7      	b.n	800430c <I2C_Master_ADDR+0x2f6>
 800413c:	2300      	movs	r3, #0
 800413e:	623b      	str	r3, [r7, #32]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	623b      	str	r3, [r7, #32]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	623b      	str	r3, [r7, #32]
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	e0d3      	b.n	800430c <I2C_Master_ADDR+0x2f6>
 8004164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004166:	2b08      	cmp	r3, #8
 8004168:	d02e      	beq.n	80041c8 <I2C_Master_ADDR+0x1b2>
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	2b20      	cmp	r3, #32
 800416e:	d02b      	beq.n	80041c8 <I2C_Master_ADDR+0x1b2>
 8004170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004172:	2b12      	cmp	r3, #18
 8004174:	d102      	bne.n	800417c <I2C_Master_ADDR+0x166>
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	2b01      	cmp	r3, #1
 800417a:	d125      	bne.n	80041c8 <I2C_Master_ADDR+0x1b2>
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	2b04      	cmp	r3, #4
 8004180:	d00e      	beq.n	80041a0 <I2C_Master_ADDR+0x18a>
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	2b02      	cmp	r3, #2
 8004186:	d00b      	beq.n	80041a0 <I2C_Master_ADDR+0x18a>
 8004188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418a:	2b10      	cmp	r3, #16
 800418c:	d008      	beq.n	80041a0 <I2C_Master_ADDR+0x18a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e007      	b.n	80041b0 <I2C_Master_ADDR+0x19a>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	61fb      	str	r3, [r7, #28]
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	e0a1      	b.n	800430c <I2C_Master_ADDR+0x2f6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	2300      	movs	r3, #0
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	61bb      	str	r3, [r7, #24]
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e085      	b.n	800430c <I2C_Master_ADDR+0x2f6>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d14d      	bne.n	80042a6 <I2C_Master_ADDR+0x290>
 800420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420c:	2b04      	cmp	r3, #4
 800420e:	d016      	beq.n	800423e <I2C_Master_ADDR+0x228>
 8004210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004212:	2b02      	cmp	r3, #2
 8004214:	d013      	beq.n	800423e <I2C_Master_ADDR+0x228>
 8004216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004218:	2b10      	cmp	r3, #16
 800421a:	d010      	beq.n	800423e <I2C_Master_ADDR+0x228>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	e007      	b.n	800424e <I2C_Master_ADDR+0x238>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425c:	d117      	bne.n	800428e <I2C_Master_ADDR+0x278>
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004264:	d00b      	beq.n	800427e <I2C_Master_ADDR+0x268>
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	2b01      	cmp	r3, #1
 800426a:	d008      	beq.n	800427e <I2C_Master_ADDR+0x268>
 800426c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426e:	2b08      	cmp	r3, #8
 8004270:	d005      	beq.n	800427e <I2C_Master_ADDR+0x268>
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	2b10      	cmp	r3, #16
 8004276:	d002      	beq.n	800427e <I2C_Master_ADDR+0x268>
 8004278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427a:	2b20      	cmp	r3, #32
 800427c:	d107      	bne.n	800428e <I2C_Master_ADDR+0x278>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	e032      	b.n	800430c <I2C_Master_ADDR+0x2f6>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c4:	d117      	bne.n	80042f6 <I2C_Master_ADDR+0x2e0>
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042cc:	d00b      	beq.n	80042e6 <I2C_Master_ADDR+0x2d0>
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d008      	beq.n	80042e6 <I2C_Master_ADDR+0x2d0>
 80042d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d005      	beq.n	80042e6 <I2C_Master_ADDR+0x2d0>
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	2b10      	cmp	r3, #16
 80042de:	d002      	beq.n	80042e6 <I2C_Master_ADDR+0x2d0>
 80042e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d107      	bne.n	80042f6 <I2C_Master_ADDR+0x2e0>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	651a      	str	r2, [r3, #80]	; 0x50
 8004312:	e00b      	b.n	800432c <I2C_Master_ADDR+0x316>
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	e7ff      	b.n	800432c <I2C_Master_ADDR+0x316>
 800432c:	bf00      	nop
 800432e:	3744      	adds	r7, #68	; 0x44
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <I2C_SlaveTransmit_TXE>:
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004346:	73fb      	strb	r3, [r7, #15]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d02b      	beq.n	80043aa <I2C_SlaveTransmit_TXE+0x72>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	781a      	ldrb	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	611a      	str	r2, [r3, #16]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	625a      	str	r2, [r3, #36]	; 0x24
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d114      	bne.n	80043aa <I2C_SlaveTransmit_TXE+0x72>
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b29      	cmp	r3, #41	; 0x29
 8004384:	d111      	bne.n	80043aa <I2C_SlaveTransmit_TXE+0x72>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004394:	605a      	str	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2221      	movs	r2, #33	; 0x21
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2228      	movs	r2, #40	; 0x28
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff f9e7 	bl	8003778 <HAL_I2C_SlaveTxCpltCallback>
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <I2C_SlaveTransmit_BTF>:
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d011      	beq.n	80043e8 <I2C_SlaveTransmit_BTF+0x36>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	611a      	str	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <I2C_SlaveReceive_RXNE>:
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004402:	73fb      	strb	r3, [r7, #15]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d02c      	beq.n	8004468 <I2C_SlaveReceive_RXNE+0x74>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d114      	bne.n	8004468 <I2C_SlaveReceive_RXNE+0x74>
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b2a      	cmp	r3, #42	; 0x2a
 8004442:	d111      	bne.n	8004468 <I2C_SlaveReceive_RXNE+0x74>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004452:	605a      	str	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2222      	movs	r2, #34	; 0x22
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2228      	movs	r2, #40	; 0x28
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff f992 	bl	800378c <HAL_I2C_SlaveRxCpltCallback>
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <I2C_SlaveReceive_BTF>:
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d012      	beq.n	80044a8 <I2C_SlaveReceive_BTF+0x38>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	625a      	str	r2, [r3, #36]	; 0x24
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <I2C_Slave_ADDR>:
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	73fb      	strb	r3, [r7, #15]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044ce:	2b28      	cmp	r3, #40	; 0x28
 80044d0:	d125      	bne.n	800451e <I2C_Slave_ADDR+0x6a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <I2C_Slave_ADDR+0x3c>
 80044ec:	2301      	movs	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d103      	bne.n	8004502 <I2C_Slave_ADDR+0x4e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	81bb      	strh	r3, [r7, #12]
 8004500:	e002      	b.n	8004508 <I2C_Slave_ADDR+0x54>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	81bb      	strh	r3, [r7, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004510:	89ba      	ldrh	r2, [r7, #12]
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff f942 	bl	80037a0 <HAL_I2C_AddrCallback>
 800451c:	e00e      	b.n	800453c <I2C_Slave_ADDR+0x88>
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <I2C_Slave_STOPF>:
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004552:	73fb      	strb	r3, [r7, #15]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	2300      	movs	r3, #0
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800459c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a0:	d172      	bne.n	8004688 <I2C_Slave_STOPF+0x144>
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b22      	cmp	r3, #34	; 0x22
 80045a6:	d002      	beq.n	80045ae <I2C_Slave_STOPF+0x6a>
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b2a      	cmp	r3, #42	; 0x2a
 80045ac:	d135      	bne.n	800461a <I2C_Slave_STOPF+0xd6>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <I2C_Slave_STOPF+0x8e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f043 0204 	orr.w	r2, r3, #4
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fbcf 	bl	8002d8a <HAL_DMA_GetState>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d049      	beq.n	8004686 <I2C_Slave_STOPF+0x142>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	4a69      	ldr	r2, [pc, #420]	; (800479c <I2C_Slave_STOPF+0x258>)
 80045f8:	651a      	str	r2, [r3, #80]	; 0x50
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fba1 	bl	8002d46 <HAL_DMA_Abort_IT>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d03d      	beq.n	8004686 <I2C_Slave_STOPF+0x142>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004614:	4610      	mov	r0, r2
 8004616:	4798      	blx	r3
 8004618:	e035      	b.n	8004686 <I2C_Slave_STOPF+0x142>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	b29a      	uxth	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <I2C_Slave_STOPF+0xfa>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f043 0204 	orr.w	r2, r3, #4
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fb99 	bl	8002d8a <HAL_DMA_GetState>
 8004658:	4603      	mov	r3, r0
 800465a:	2b01      	cmp	r3, #1
 800465c:	d014      	beq.n	8004688 <I2C_Slave_STOPF+0x144>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004662:	4a4e      	ldr	r2, [pc, #312]	; (800479c <I2C_Slave_STOPF+0x258>)
 8004664:	651a      	str	r2, [r3, #80]	; 0x50
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe fb6b 	bl	8002d46 <HAL_DMA_Abort_IT>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <I2C_Slave_STOPF+0x144>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004680:	4610      	mov	r0, r2
 8004682:	4798      	blx	r3
 8004684:	e000      	b.n	8004688 <I2C_Slave_STOPF+0x144>
 8004686:	bf00      	nop
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d03e      	beq.n	8004710 <I2C_Slave_STOPF+0x1cc>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b04      	cmp	r3, #4
 800469e:	d112      	bne.n	80046c6 <I2C_Slave_STOPF+0x182>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b40      	cmp	r3, #64	; 0x40
 80046d2:	d112      	bne.n	80046fa <I2C_Slave_STOPF+0x1b6>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	625a      	str	r2, [r3, #36]	; 0x24
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <I2C_Slave_STOPF+0x1cc>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f043 0204 	orr.w	r2, r3, #4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	641a      	str	r2, [r3, #64]	; 0x40
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <I2C_Slave_STOPF+0x1dc>
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f8b3 	bl	8004884 <I2C_ITError>
 800471e:	e039      	b.n	8004794 <I2C_Slave_STOPF+0x250>
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	2b2a      	cmp	r3, #42	; 0x2a
 8004724:	d109      	bne.n	800473a <I2C_Slave_STOPF+0x1f6>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2228      	movs	r2, #40	; 0x28
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff f829 	bl	800378c <HAL_I2C_SlaveRxCpltCallback>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b28      	cmp	r3, #40	; 0x28
 8004744:	d111      	bne.n	800476a <I2C_Slave_STOPF+0x226>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <I2C_Slave_STOPF+0x25c>)
 800474a:	62da      	str	r2, [r3, #44]	; 0x2c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	631a      	str	r2, [r3, #48]	; 0x30
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff f82a 	bl	80037bc <HAL_I2C_ListenCpltCallback>
 8004768:	e014      	b.n	8004794 <I2C_Slave_STOPF+0x250>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	2b22      	cmp	r3, #34	; 0x22
 8004770:	d002      	beq.n	8004778 <I2C_Slave_STOPF+0x234>
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	2b22      	cmp	r3, #34	; 0x22
 8004776:	d10d      	bne.n	8004794 <I2C_Slave_STOPF+0x250>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fe fffc 	bl	800378c <HAL_I2C_SlaveRxCpltCallback>
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	08004ae9 	.word	0x08004ae9
 80047a0:	ffff0000 	.word	0xffff0000

080047a4 <I2C_Slave_AF>:
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b2:	73fb      	strb	r3, [r7, #15]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d002      	beq.n	80047c6 <I2C_Slave_AF+0x22>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d129      	bne.n	800481a <I2C_Slave_AF+0x76>
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b28      	cmp	r3, #40	; 0x28
 80047ca:	d126      	bne.n	800481a <I2C_Slave_AF+0x76>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a2c      	ldr	r2, [pc, #176]	; (8004880 <I2C_Slave_AF+0xdc>)
 80047d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047ea:	615a      	str	r2, [r3, #20]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fe ffd2 	bl	80037bc <HAL_I2C_ListenCpltCallback>
 8004818:	e02e      	b.n	8004878 <I2C_Slave_AF+0xd4>
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	2b21      	cmp	r3, #33	; 0x21
 800481e:	d126      	bne.n	800486e <I2C_Slave_AF+0xca>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a17      	ldr	r2, [pc, #92]	; (8004880 <I2C_Slave_AF+0xdc>)
 8004824:	62da      	str	r2, [r3, #44]	; 0x2c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2221      	movs	r2, #33	; 0x21
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004854:	615a      	str	r2, [r3, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fe ff86 	bl	8003778 <HAL_I2C_SlaveTxCpltCallback>
 800486c:	e004      	b.n	8004878 <I2C_Slave_AF+0xd4>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004876:	615a      	str	r2, [r3, #20]
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	ffff0000 	.word	0xffff0000

08004884 <I2C_ITError>:
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004892:	73fb      	strb	r3, [r7, #15]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800489a:	73bb      	strb	r3, [r7, #14]
 800489c:	7bbb      	ldrb	r3, [r7, #14]
 800489e:	2b10      	cmp	r3, #16
 80048a0:	d002      	beq.n	80048a8 <I2C_ITError+0x24>
 80048a2:	7bbb      	ldrb	r3, [r7, #14]
 80048a4:	2b40      	cmp	r3, #64	; 0x40
 80048a6:	d10a      	bne.n	80048be <I2C_ITError+0x3a>
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	2b22      	cmp	r3, #34	; 0x22
 80048ac:	d107      	bne.n	80048be <I2C_ITError+0x3a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048c4:	2b28      	cmp	r3, #40	; 0x28
 80048c6:	d107      	bne.n	80048d8 <I2C_ITError+0x54>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2228      	movs	r2, #40	; 0x28
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048d6:	e015      	b.n	8004904 <I2C_ITError+0x80>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e6:	d00a      	beq.n	80048fe <I2C_ITError+0x7a>
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	2b60      	cmp	r3, #96	; 0x60
 80048ec:	d007      	beq.n	80048fe <I2C_ITError+0x7a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800490e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004912:	d162      	bne.n	80049da <I2C_ITError+0x156>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004922:	605a      	str	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d020      	beq.n	8004974 <I2C_ITError+0xf0>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004936:	4a6a      	ldr	r2, [pc, #424]	; (8004ae0 <I2C_ITError+0x25c>)
 8004938:	651a      	str	r2, [r3, #80]	; 0x50
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe fa01 	bl	8002d46 <HAL_DMA_Abort_IT>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8089 	beq.w	8004a5e <I2C_ITError+0x1da>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800496e:	4610      	mov	r0, r2
 8004970:	4798      	blx	r3
 8004972:	e074      	b.n	8004a5e <I2C_ITError+0x1da>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	4a59      	ldr	r2, [pc, #356]	; (8004ae0 <I2C_ITError+0x25c>)
 800497a:	651a      	str	r2, [r3, #80]	; 0x50
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	4618      	mov	r0, r3
 8004982:	f7fe f9e0 	bl	8002d46 <HAL_DMA_Abort_IT>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d068      	beq.n	8004a5e <I2C_ITError+0x1da>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	d10b      	bne.n	80049b2 <I2C_ITError+0x12e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	625a      	str	r2, [r3, #36]	; 0x24
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049d4:	4610      	mov	r0, r2
 80049d6:	4798      	blx	r3
 80049d8:	e041      	b.n	8004a5e <I2C_ITError+0x1da>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b60      	cmp	r3, #96	; 0x60
 80049e4:	d125      	bne.n	8004a32 <I2C_ITError+0x1ae>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fe:	2b40      	cmp	r3, #64	; 0x40
 8004a00:	d10b      	bne.n	8004a1a <I2C_ITError+0x196>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0201 	bic.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fe feee 	bl	800380c <HAL_I2C_AbortCpltCallback>
 8004a30:	e015      	b.n	8004a5e <I2C_ITError+0x1da>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d10b      	bne.n	8004a58 <I2C_ITError+0x1d4>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7fe fecd 	bl	80037f8 <HAL_I2C_ErrorCallback>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	60bb      	str	r3, [r7, #8]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10e      	bne.n	8004a8c <I2C_ITError+0x208>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d109      	bne.n	8004a8c <I2C_ITError+0x208>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <I2C_ITError+0x208>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <I2C_ITError+0x218>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a9a:	605a      	str	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa2:	73fb      	strb	r3, [r7, #15]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d113      	bne.n	8004ad8 <I2C_ITError+0x254>
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b28      	cmp	r3, #40	; 0x28
 8004ab4:	d110      	bne.n	8004ad8 <I2C_ITError+0x254>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <I2C_ITError+0x260>)
 8004aba:	62da      	str	r2, [r3, #44]	; 0x2c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fe fe72 	bl	80037bc <HAL_I2C_ListenCpltCallback>
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	08004ae9 	.word	0x08004ae9
 8004ae4:	ffff0000 	.word	0xffff0000

08004ae8 <I2C_DMAAbort>:
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	74fb      	strb	r3, [r7, #19]
 8004b02:	4b4b      	ldr	r3, [pc, #300]	; (8004c30 <I2C_DMAAbort+0x148>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	08db      	lsrs	r3, r3, #3
 8004b08:	4a4a      	ldr	r2, [pc, #296]	; (8004c34 <I2C_DMAAbort+0x14c>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	0a1a      	lsrs	r2, r3, #8
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	00da      	lsls	r2, r3, #3
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <I2C_DMAAbort+0x48>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f043 0220 	orr.w	r2, r3, #32
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8004b2e:	e00a      	b.n	8004b46 <I2C_DMAAbort+0x5e>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b44:	d0ea      	beq.n	8004b1c <I2C_DMAAbort+0x34>
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <I2C_DMAAbort+0x6e>
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b52:	2200      	movs	r2, #0
 8004b54:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <I2C_DMAAbort+0x7e>
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	2200      	movs	r2, #0
 8004b64:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <I2C_DMAAbort+0xa4>
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	2200      	movs	r2, #0
 8004b8a:	651a      	str	r2, [r3, #80]	; 0x50
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <I2C_DMAAbort+0xb4>
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	2200      	movs	r2, #0
 8004b9a:	651a      	str	r2, [r3, #80]	; 0x50
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b60      	cmp	r3, #96	; 0x60
 8004bb6:	d10e      	bne.n	8004bd6 <I2C_DMAAbort+0xee>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40
 8004bce:	6978      	ldr	r0, [r7, #20]
 8004bd0:	f7fe fe1c 	bl	800380c <HAL_I2C_AbortCpltCallback>
 8004bd4:	e027      	b.n	8004c26 <I2C_DMAAbort+0x13e>
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bdc:	2b28      	cmp	r3, #40	; 0x28
 8004bde:	d117      	bne.n	8004c10 <I2C_DMAAbort+0x128>
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2228      	movs	r2, #40	; 0x28
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c0e:	e007      	b.n	8004c20 <I2C_DMAAbort+0x138>
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c20:	6978      	ldr	r0, [r7, #20]
 8004c22:	f7fe fde9 	bl	80037f8 <HAL_I2C_ErrorCallback>
 8004c26:	bf00      	nop
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000028 	.word	0x20000028
 8004c34:	14f8b589 	.word	0x14f8b589

08004c38 <I2C_WaitOnSTOPRequestThroughIT>:
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	08db      	lsrs	r3, r3, #3
 8004c4a:	4a13      	ldr	r2, [pc, #76]	; (8004c98 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c50:	0a1a      	lsrs	r2, r3, #8
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d107      	bne.n	8004c76 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	f043 0220 	orr.w	r2, r3, #32
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	641a      	str	r2, [r3, #64]	; 0x40
 8004c72:	2301      	movs	r3, #1
 8004c74:	e008      	b.n	8004c88 <I2C_WaitOnSTOPRequestThroughIT+0x50>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c84:	d0e9      	beq.n	8004c5a <I2C_WaitOnSTOPRequestThroughIT+0x22>
 8004c86:	2300      	movs	r3, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	20000028 	.word	0x20000028
 8004c98:	14f8b589 	.word	0x14f8b589

08004c9c <I2C_ConvertOtherXferOptions>:
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004cac:	d103      	bne.n	8004cb6 <I2C_ConvertOtherXferOptions+0x1a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cb4:	e007      	b.n	8004cc6 <I2C_ConvertOtherXferOptions+0x2a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004cbe:	d102      	bne.n	8004cc6 <I2C_ConvertOtherXferOptions+0x2a>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_PCD_Init>:
 8004cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cd4:	b08f      	sub	sp, #60	; 0x3c
 8004cd6:	af0a      	add	r7, sp, #40	; 0x28
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_PCD_Init+0x12>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e10f      	b.n	8004f04 <HAL_PCD_Init+0x232>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_PCD_Init+0x32>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f007 fb7e 	bl	800c400 <HAL_PCD_MspInit>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2203      	movs	r2, #3
 8004d08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <HAL_PCD_Init+0x4c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	611a      	str	r2, [r3, #16]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f003 fe65 	bl	80089f2 <USB_DisableGlobalInt>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	687e      	ldr	r6, [r7, #4]
 8004d30:	466d      	mov	r5, sp
 8004d32:	f106 0410 	add.w	r4, r6, #16
 8004d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d42:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d46:	1d33      	adds	r3, r6, #4
 8004d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d4a:	6838      	ldr	r0, [r7, #0]
 8004d4c:	f003 fd3c 	bl	80087c8 <USB_CoreInit>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <HAL_PCD_Init+0x90>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e0d0      	b.n	8004f04 <HAL_PCD_Init+0x232>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f003 fe53 	bl	8008a14 <USB_SetCurrentMode>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]
 8004d72:	e04a      	b.n	8004e0a <HAL_PCD_Init+0x138>
 8004d74:	7bfa      	ldrb	r2, [r7, #15]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	333d      	adds	r3, #61	; 0x3d
 8004d84:	2201      	movs	r2, #1
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	7bfa      	ldrb	r2, [r7, #15]
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	333c      	adds	r3, #60	; 0x3c
 8004d98:	7bfa      	ldrb	r2, [r7, #15]
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	7bfa      	ldrb	r2, [r7, #15]
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	b298      	uxth	r0, r3
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	3344      	adds	r3, #68	; 0x44
 8004db0:	4602      	mov	r2, r0
 8004db2:	801a      	strh	r2, [r3, #0]
 8004db4:	7bfa      	ldrb	r2, [r7, #15]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	3340      	adds	r3, #64	; 0x40
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	7bfa      	ldrb	r2, [r7, #15]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	3348      	adds	r3, #72	; 0x48
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	7bfa      	ldrb	r2, [r7, #15]
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	4413      	add	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	334c      	adds	r3, #76	; 0x4c
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	7bfa      	ldrb	r2, [r7, #15]
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	3354      	adds	r3, #84	; 0x54
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	3301      	adds	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
 8004e0a:	7bfa      	ldrb	r2, [r7, #15]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d3af      	bcc.n	8004d74 <HAL_PCD_Init+0xa2>
 8004e14:	2300      	movs	r3, #0
 8004e16:	73fb      	strb	r3, [r7, #15]
 8004e18:	e044      	b.n	8004ea4 <HAL_PCD_Init+0x1d2>
 8004e1a:	7bfa      	ldrb	r2, [r7, #15]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	7bfa      	ldrb	r2, [r7, #15]
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	4613      	mov	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004e42:	7bfa      	ldrb	r2, [r7, #15]
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	7bfa      	ldrb	r2, [r7, #15]
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	7bfa      	ldrb	r2, [r7, #15]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	7bfa      	ldrb	r2, [r7, #15]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	7bfa      	ldrb	r2, [r7, #15]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
 8004ea4:	7bfa      	ldrb	r2, [r7, #15]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d3b5      	bcc.n	8004e1a <HAL_PCD_Init+0x148>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	687e      	ldr	r6, [r7, #4]
 8004eb6:	466d      	mov	r5, sp
 8004eb8:	f106 0410 	add.w	r4, r6, #16
 8004ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ec4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ec8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ecc:	1d33      	adds	r3, r6, #4
 8004ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ed0:	6838      	ldr	r0, [r7, #0]
 8004ed2:	f003 fdeb 	bl	8008aac <USB_DevInit>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_PCD_Init+0x216>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e00d      	b.n	8004f04 <HAL_PCD_Init+0x232>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f004 ff3a 	bl	8009d76 <USB_DevDisconnect>
 8004f02:	2300      	movs	r3, #0
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f0c <HAL_PCD_Start>:
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_PCD_Start+0x1c>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e020      	b.n	8004f6a <HAL_PCD_Start+0x5e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d109      	bne.n	8004f4c <HAL_PCD_Start+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d005      	beq.n	8004f4c <HAL_PCD_Start+0x40>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	639a      	str	r2, [r3, #56]	; 0x38
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f003 fd3d 	bl	80089d0 <USB_EnableGlobalInt>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f004 feea 	bl	8009d34 <USB_DevConnect>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004f68:	2300      	movs	r3, #0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_PCD_IRQHandler>:
 8004f72:	b590      	push	{r4, r7, lr}
 8004f74:	b08d      	sub	sp, #52	; 0x34
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	623b      	str	r3, [r7, #32]
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f004 ffa8 	bl	8009ede <USB_GetMode>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f040 848a 	bne.w	80058aa <HAL_PCD_IRQHandler+0x938>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f004 ff0c 	bl	8009db8 <USB_ReadInterrupts>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8480 	beq.w	80058a8 <HAL_PCD_IRQHandler+0x936>
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	0a1b      	lsrs	r3, r3, #8
 8004fb2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f004 fef9 	bl	8009db8 <USB_ReadInterrupts>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d107      	bne.n	8004fe0 <HAL_PCD_IRQHandler+0x6e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695a      	ldr	r2, [r3, #20]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f002 0202 	and.w	r2, r2, #2
 8004fde:	615a      	str	r2, [r3, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f004 fee7 	bl	8009db8 <USB_ReadInterrupts>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d161      	bne.n	80050b8 <HAL_PCD_IRQHandler+0x146>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0210 	bic.w	r2, r2, #16
 8005002:	619a      	str	r2, [r3, #24]
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f003 020f 	and.w	r2, r3, #15
 8005010:	4613      	mov	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	4413      	add	r3, r2
 8005020:	3304      	adds	r3, #4
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	0c5b      	lsrs	r3, r3, #17
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	2b02      	cmp	r3, #2
 800502e:	d124      	bne.n	800507a <HAL_PCD_IRQHandler+0x108>
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d035      	beq.n	80050a8 <HAL_PCD_IRQHandler+0x136>
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	6919      	ldr	r1, [r3, #16]
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	091b      	lsrs	r3, r3, #4
 8005044:	b29b      	uxth	r3, r3
 8005046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800504a:	b29b      	uxth	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	6a38      	ldr	r0, [r7, #32]
 8005050:	f004 fd1e 	bl	8009a90 <USB_ReadPacket>
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	091b      	lsrs	r3, r3, #4
 800505c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005060:	441a      	add	r2, r3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	611a      	str	r2, [r3, #16]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	6a1a      	ldr	r2, [r3, #32]
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005072:	441a      	add	r2, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	621a      	str	r2, [r3, #32]
 8005078:	e016      	b.n	80050a8 <HAL_PCD_IRQHandler+0x136>
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	0c5b      	lsrs	r3, r3, #17
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	2b06      	cmp	r3, #6
 8005084:	d110      	bne.n	80050a8 <HAL_PCD_IRQHandler+0x136>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800508c:	2208      	movs	r2, #8
 800508e:	4619      	mov	r1, r3
 8005090:	6a38      	ldr	r0, [r7, #32]
 8005092:	f004 fcfd 	bl	8009a90 <USB_ReadPacket>
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	6a1a      	ldr	r2, [r3, #32]
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	091b      	lsrs	r3, r3, #4
 800509e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050a2:	441a      	add	r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	621a      	str	r2, [r3, #32]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0210 	orr.w	r2, r2, #16
 80050b6:	619a      	str	r2, [r3, #24]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f004 fe7b 	bl	8009db8 <USB_ReadInterrupts>
 80050c2:	4603      	mov	r3, r0
 80050c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050cc:	f040 80a7 	bne.w	800521e <HAL_PCD_IRQHandler+0x2ac>
 80050d0:	2300      	movs	r3, #0
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f004 fe80 	bl	8009dde <USB_ReadDevAllOutEpInterrupt>
 80050de:	62b8      	str	r0, [r7, #40]	; 0x28
 80050e0:	e099      	b.n	8005216 <HAL_PCD_IRQHandler+0x2a4>
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 808e 	beq.w	800520a <HAL_PCD_IRQHandler+0x298>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	4611      	mov	r1, r2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f004 fea4 	bl	8009e46 <USB_ReadDevOutEPInterrupt>
 80050fe:	6138      	str	r0, [r7, #16]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00c      	beq.n	8005124 <HAL_PCD_IRQHandler+0x1b2>
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	461a      	mov	r2, r3
 8005118:	2301      	movs	r3, #1
 800511a:	6093      	str	r3, [r2, #8]
 800511c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fec2 	bl	8005ea8 <PCD_EP_OutXfrComplete_int>
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00c      	beq.n	8005148 <HAL_PCD_IRQHandler+0x1d6>
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513a:	461a      	mov	r2, r3
 800513c:	2308      	movs	r3, #8
 800513e:	6093      	str	r3, [r2, #8]
 8005140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 ff98 	bl	8006078 <PCD_EP_OutSetupPacket_int>
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f003 0310 	and.w	r3, r3, #16
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <HAL_PCD_IRQHandler+0x1f2>
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	461a      	mov	r2, r3
 8005160:	2310      	movs	r3, #16
 8005162:	6093      	str	r3, [r2, #8]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d030      	beq.n	80051d0 <HAL_PCD_IRQHandler+0x25e>
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005176:	2b80      	cmp	r3, #128	; 0x80
 8005178:	d109      	bne.n	800518e <HAL_PCD_IRQHandler+0x21c>
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005188:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800518c:	6053      	str	r3, [r2, #4]
 800518e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005190:	4613      	mov	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	4413      	add	r3, r2
 80051a0:	3304      	adds	r3, #4
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	78db      	ldrb	r3, [r3, #3]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d108      	bne.n	80051be <HAL_PCD_IRQHandler+0x24c>
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2200      	movs	r2, #0
 80051b0:	70da      	strb	r2, [r3, #3]
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f007 fa1d 	bl	800c5f8 <HAL_PCD_ISOOUTIncompleteCallback>
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	461a      	mov	r2, r3
 80051cc:	2302      	movs	r3, #2
 80051ce:	6093      	str	r3, [r2, #8]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d008      	beq.n	80051ec <HAL_PCD_IRQHandler+0x27a>
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	461a      	mov	r2, r3
 80051e8:	2320      	movs	r3, #32
 80051ea:	6093      	str	r3, [r2, #8]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_PCD_IRQHandler+0x298>
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005202:	461a      	mov	r2, r3
 8005204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005208:	6093      	str	r3, [r2, #8]
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	3301      	adds	r3, #1
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005218:	2b00      	cmp	r3, #0
 800521a:	f47f af62 	bne.w	80050e2 <HAL_PCD_IRQHandler+0x170>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f004 fdc8 	bl	8009db8 <USB_ReadInterrupts>
 8005228:	4603      	mov	r3, r0
 800522a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800522e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005232:	f040 80db 	bne.w	80053ec <HAL_PCD_IRQHandler+0x47a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f004 fde9 	bl	8009e12 <USB_ReadDevAllInEpInterrupt>
 8005240:	62b8      	str	r0, [r7, #40]	; 0x28
 8005242:	2300      	movs	r3, #0
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
 8005246:	e0cd      	b.n	80053e4 <HAL_PCD_IRQHandler+0x472>
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80c2 	beq.w	80053d8 <HAL_PCD_IRQHandler+0x466>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	4611      	mov	r1, r2
 800525e:	4618      	mov	r0, r3
 8005260:	f004 fe0f 	bl	8009e82 <USB_ReadDevInEPInterrupt>
 8005264:	6138      	str	r0, [r7, #16]
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d057      	beq.n	8005320 <HAL_PCD_IRQHandler+0x3ae>
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	2201      	movs	r2, #1
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	43db      	mvns	r3, r3
 800528a:	69f9      	ldr	r1, [r7, #28]
 800528c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005290:	4013      	ands	r3, r2
 8005292:	634b      	str	r3, [r1, #52]	; 0x34
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a0:	461a      	mov	r2, r3
 80052a2:	2301      	movs	r3, #1
 80052a4:	6093      	str	r3, [r2, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d132      	bne.n	8005314 <HAL_PCD_IRQHandler+0x3a2>
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b2:	4613      	mov	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	334c      	adds	r3, #76	; 0x4c
 80052be:	6819      	ldr	r1, [r3, #0]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c4:	4613      	mov	r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4403      	add	r3, r0
 80052ce:	3348      	adds	r3, #72	; 0x48
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4419      	add	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d8:	4613      	mov	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4403      	add	r3, r0
 80052e2:	334c      	adds	r3, #76	; 0x4c
 80052e4:	6019      	str	r1, [r3, #0]
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d113      	bne.n	8005314 <HAL_PCD_IRQHandler+0x3a2>
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f0:	4613      	mov	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	3354      	adds	r3, #84	; 0x54
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d108      	bne.n	8005314 <HAL_PCD_IRQHandler+0x3a2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800530c:	461a      	mov	r2, r3
 800530e:	2101      	movs	r1, #1
 8005310:	f004 fe16 	bl	8009f40 <USB_EP0_OutStart>
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	b2db      	uxtb	r3, r3
 8005318:	4619      	mov	r1, r3
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f007 f8f1 	bl	800c502 <HAL_PCD_DataInStageCallback>
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <HAL_PCD_IRQHandler+0x3ca>
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005336:	461a      	mov	r2, r3
 8005338:	2308      	movs	r3, #8
 800533a:	6093      	str	r3, [r2, #8]
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b00      	cmp	r3, #0
 8005344:	d008      	beq.n	8005358 <HAL_PCD_IRQHandler+0x3e6>
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005352:	461a      	mov	r2, r3
 8005354:	2310      	movs	r3, #16
 8005356:	6093      	str	r3, [r2, #8]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_PCD_IRQHandler+0x402>
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536e:	461a      	mov	r2, r3
 8005370:	2340      	movs	r3, #64	; 0x40
 8005372:	6093      	str	r3, [r2, #8]
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d023      	beq.n	80053c6 <HAL_PCD_IRQHandler+0x454>
 800537e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005380:	6a38      	ldr	r0, [r7, #32]
 8005382:	f003 fcf7 	bl	8008d74 <USB_FlushTxFifo>
 8005386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005388:	4613      	mov	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	3338      	adds	r3, #56	; 0x38
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	4413      	add	r3, r2
 8005396:	3304      	adds	r3, #4
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	78db      	ldrb	r3, [r3, #3]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d108      	bne.n	80053b4 <HAL_PCD_IRQHandler+0x442>
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2200      	movs	r2, #0
 80053a6:	70da      	strb	r2, [r3, #3]
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	4619      	mov	r1, r3
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f007 f934 	bl	800c61c <HAL_PCD_ISOINIncompleteCallback>
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c0:	461a      	mov	r2, r3
 80053c2:	2302      	movs	r3, #2
 80053c4:	6093      	str	r3, [r2, #8]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <HAL_PCD_IRQHandler+0x466>
 80053d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fcdb 	bl	8005d8e <PCD_WriteEmptyTxFifo>
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	3301      	adds	r3, #1
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	085b      	lsrs	r3, r3, #1
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f47f af2e 	bne.w	8005248 <HAL_PCD_IRQHandler+0x2d6>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f004 fce1 	bl	8009db8 <USB_ReadInterrupts>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005400:	d122      	bne.n	8005448 <HAL_PCD_IRQHandler+0x4d6>
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	6053      	str	r3, [r2, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800541c:	2b01      	cmp	r3, #1
 800541e:	d108      	bne.n	8005432 <HAL_PCD_IRQHandler+0x4c0>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8005428:	2100      	movs	r1, #0
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fec2 	bl	80061b4 <HAL_PCDEx_LPM_Callback>
 8005430:	e002      	b.n	8005438 <HAL_PCD_IRQHandler+0x4c6>
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f007 f8d2 	bl	800c5dc <HAL_PCD_ResumeCallback>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695a      	ldr	r2, [r3, #20]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005446:	615a      	str	r2, [r3, #20]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f004 fcb3 	bl	8009db8 <USB_ReadInterrupts>
 8005452:	4603      	mov	r3, r0
 8005454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545c:	d112      	bne.n	8005484 <HAL_PCD_IRQHandler+0x512>
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b01      	cmp	r3, #1
 800546c:	d102      	bne.n	8005474 <HAL_PCD_IRQHandler+0x502>
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f007 f88e 	bl	800c590 <HAL_PCD_SuspendCallback>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695a      	ldr	r2, [r3, #20]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005482:	615a      	str	r2, [r3, #20]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4618      	mov	r0, r3
 800548a:	f004 fc95 	bl	8009db8 <USB_ReadInterrupts>
 800548e:	4603      	mov	r3, r0
 8005490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005498:	f040 80b7 	bne.w	800560a <HAL_PCD_IRQHandler+0x698>
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054aa:	f023 0301 	bic.w	r3, r3, #1
 80054ae:	6053      	str	r3, [r2, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2110      	movs	r1, #16
 80054b6:	4618      	mov	r0, r3
 80054b8:	f003 fc5c 	bl	8008d74 <USB_FlushTxFifo>
 80054bc:	2300      	movs	r3, #0
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054c0:	e046      	b.n	8005550 <HAL_PCD_IRQHandler+0x5de>
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ce:	461a      	mov	r2, r3
 80054d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054d4:	6093      	str	r3, [r2, #8]
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e6:	0151      	lsls	r1, r2, #5
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	440a      	add	r2, r1
 80054ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005502:	461a      	mov	r2, r3
 8005504:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005508:	6093      	str	r3, [r2, #8]
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800551a:	0151      	lsls	r1, r2, #5
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	440a      	add	r2, r1
 8005520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005524:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800553a:	0151      	lsls	r1, r2, #5
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	440a      	add	r2, r1
 8005540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005544:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	3301      	adds	r3, #1
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005556:	429a      	cmp	r2, r3
 8005558:	d3b3      	bcc.n	80054c2 <HAL_PCD_IRQHandler+0x550>
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005568:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800556c:	61d3      	str	r3, [r2, #28]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	2b00      	cmp	r3, #0
 8005574:	d016      	beq.n	80055a4 <HAL_PCD_IRQHandler+0x632>
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005586:	f043 030b 	orr.w	r3, r3, #11
 800558a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800559c:	f043 030b 	orr.w	r3, r3, #11
 80055a0:	6453      	str	r3, [r2, #68]	; 0x44
 80055a2:	e015      	b.n	80055d0 <HAL_PCD_IRQHandler+0x65e>
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80055ba:	6153      	str	r3, [r2, #20]
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ca:	f043 030b 	orr.w	r3, r3, #11
 80055ce:	6113      	str	r3, [r2, #16]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	b2d9      	uxtb	r1, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80055f4:	461a      	mov	r2, r3
 80055f6:	f004 fca3 	bl	8009f40 <USB_EP0_OutStart>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005608:	615a      	str	r2, [r3, #20]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f004 fbd2 	bl	8009db8 <USB_ReadInterrupts>
 8005614:	4603      	mov	r3, r0
 8005616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800561a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800561e:	d124      	bne.n	800566a <HAL_PCD_IRQHandler+0x6f8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f004 fc68 	bl	8009efa <USB_ActivateSetup>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f003 fc1d 	bl	8008e6e <USB_GetDevSpeed>
 8005634:	4603      	mov	r3, r0
 8005636:	461a      	mov	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60da      	str	r2, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681c      	ldr	r4, [r3, #0]
 8005640:	f001 f9e8 	bl	8006a14 <HAL_RCC_GetHCLKFreq>
 8005644:	4601      	mov	r1, r0
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	461a      	mov	r2, r3
 800564e:	4620      	mov	r0, r4
 8005650:	f003 f91c 	bl	800888c <USB_SetTurnaroundTime>
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f006 ff7c 	bl	800c552 <HAL_PCD_ResetCallback>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695a      	ldr	r2, [r3, #20]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005668:	615a      	str	r2, [r3, #20]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f004 fba2 	bl	8009db8 <USB_ReadInterrupts>
 8005674:	4603      	mov	r3, r0
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b08      	cmp	r3, #8
 800567c:	d10a      	bne.n	8005694 <HAL_PCD_IRQHandler+0x722>
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f006 ff59 	bl	800c536 <HAL_PCD_SOFCallback>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f002 0208 	and.w	r2, r2, #8
 8005692:	615a      	str	r2, [r3, #20]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f004 fb8d 	bl	8009db8 <USB_ReadInterrupts>
 800569e:	4603      	mov	r3, r0
 80056a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a4:	2b80      	cmp	r3, #128	; 0x80
 80056a6:	d122      	bne.n	80056ee <HAL_PCD_IRQHandler+0x77c>
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	619a      	str	r2, [r3, #24]
 80056b4:	2301      	movs	r3, #1
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
 80056b8:	e014      	b.n	80056e4 <HAL_PCD_IRQHandler+0x772>
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056be:	4613      	mov	r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d105      	bne.n	80056de <HAL_PCD_IRQHandler+0x76c>
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fb27 	bl	8005d2c <HAL_PCD_EP_Abort>
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	3301      	adds	r3, #1
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d3e5      	bcc.n	80056ba <HAL_PCD_IRQHandler+0x748>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f004 fb60 	bl	8009db8 <USB_ReadInterrupts>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005702:	d13b      	bne.n	800577c <HAL_PCD_IRQHandler+0x80a>
 8005704:	2301      	movs	r3, #1
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
 8005708:	e02b      	b.n	8005762 <HAL_PCD_IRQHandler+0x7f0>
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571e:	4613      	mov	r3, r2
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	440b      	add	r3, r1
 8005728:	3340      	adds	r3, #64	; 0x40
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d115      	bne.n	800575c <HAL_PCD_IRQHandler+0x7ea>
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	da12      	bge.n	800575c <HAL_PCD_IRQHandler+0x7ea>
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573a:	4613      	mov	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	333f      	adds	r3, #63	; 0x3f
 8005746:	2201      	movs	r2, #1
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005752:	b2db      	uxtb	r3, r3
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fae8 	bl	8005d2c <HAL_PCD_EP_Abort>
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	3301      	adds	r3, #1
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005768:	429a      	cmp	r2, r3
 800576a:	d3ce      	bcc.n	800570a <HAL_PCD_IRQHandler+0x798>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695a      	ldr	r2, [r3, #20]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800577a:	615a      	str	r2, [r3, #20]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4618      	mov	r0, r3
 8005782:	f004 fb19 	bl	8009db8 <USB_ReadInterrupts>
 8005786:	4603      	mov	r3, r0
 8005788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800578c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005790:	d155      	bne.n	800583e <HAL_PCD_IRQHandler+0x8cc>
 8005792:	2301      	movs	r3, #1
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
 8005796:	e045      	b.n	8005824 <HAL_PCD_IRQHandler+0x8b2>
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ac:	4613      	mov	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d12e      	bne.n	800581e <HAL_PCD_IRQHandler+0x8ac>
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	da2b      	bge.n	800581e <HAL_PCD_IRQHandler+0x8ac>
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d121      	bne.n	800581e <HAL_PCD_IRQHandler+0x8ac>
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057de:	4613      	mov	r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80057ec:	2201      	movs	r2, #1
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	619a      	str	r2, [r3, #24]
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <HAL_PCD_IRQHandler+0x8ac>
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800581a:	6053      	str	r3, [r2, #4]
 800581c:	e007      	b.n	800582e <HAL_PCD_IRQHandler+0x8bc>
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	3301      	adds	r3, #1
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800582a:	429a      	cmp	r2, r3
 800582c:	d3b4      	bcc.n	8005798 <HAL_PCD_IRQHandler+0x826>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695a      	ldr	r2, [r3, #20]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800583c:	615a      	str	r2, [r3, #20]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f004 fab8 	bl	8009db8 <USB_ReadInterrupts>
 8005848:	4603      	mov	r3, r0
 800584a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800584e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005852:	d10a      	bne.n	800586a <HAL_PCD_IRQHandler+0x8f8>
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f006 fef3 	bl	800c640 <HAL_PCD_ConnectCallback>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695a      	ldr	r2, [r3, #20]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005868:	615a      	str	r2, [r3, #20]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f004 faa2 	bl	8009db8 <USB_ReadInterrupts>
 8005874:	4603      	mov	r3, r0
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	2b04      	cmp	r3, #4
 800587c:	d115      	bne.n	80058aa <HAL_PCD_IRQHandler+0x938>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <HAL_PCD_IRQHandler+0x924>
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f006 fee3 	bl	800c65c <HAL_PCD_DisconnectCallback>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6859      	ldr	r1, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
 80058a6:	e000      	b.n	80058aa <HAL_PCD_IRQHandler+0x938>
 80058a8:	bf00      	nop
 80058aa:	3734      	adds	r7, #52	; 0x34
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd90      	pop	{r4, r7, pc}

080058b0 <HAL_PCD_SetAddress>:
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	70fb      	strb	r3, [r7, #3]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_PCD_SetAddress+0x1a>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e013      	b.n	80058f2 <HAL_PCD_SetAddress+0x42>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	78fa      	ldrb	r2, [r7, #3]
 80058d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	78fa      	ldrb	r2, [r7, #3]
 80058e0:	4611      	mov	r1, r2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f004 fa00 	bl	8009ce8 <USB_SetDevAddress>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80058f0:	2300      	movs	r3, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_PCD_EP_Open>:
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	4608      	mov	r0, r1
 8005904:	4611      	mov	r1, r2
 8005906:	461a      	mov	r2, r3
 8005908:	4603      	mov	r3, r0
 800590a:	70fb      	strb	r3, [r7, #3]
 800590c:	460b      	mov	r3, r1
 800590e:	803b      	strh	r3, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	70bb      	strb	r3, [r7, #2]
 8005914:	2300      	movs	r3, #0
 8005916:	72fb      	strb	r3, [r7, #11]
 8005918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800591c:	2b00      	cmp	r3, #0
 800591e:	da0f      	bge.n	8005940 <HAL_PCD_EP_Open+0x46>
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	f003 020f 	and.w	r2, r3, #15
 8005926:	4613      	mov	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	3338      	adds	r3, #56	; 0x38
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	4413      	add	r3, r2
 8005934:	3304      	adds	r3, #4
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	705a      	strb	r2, [r3, #1]
 800593e:	e00f      	b.n	8005960 <HAL_PCD_EP_Open+0x66>
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	f003 020f 	and.w	r2, r3, #15
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	4413      	add	r3, r2
 8005956:	3304      	adds	r3, #4
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	705a      	strb	r2, [r3, #1]
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	b2da      	uxtb	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	883a      	ldrh	r2, [r7, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	60da      	str	r2, [r3, #12]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	78ba      	ldrb	r2, [r7, #2]
 8005976:	711a      	strb	r2, [r3, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <HAL_PCD_EP_Open+0x90>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	811a      	strh	r2, [r3, #8]
 800598a:	78bb      	ldrb	r3, [r7, #2]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d102      	bne.n	8005996 <HAL_PCD_EP_Open+0x9c>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	715a      	strb	r2, [r3, #5]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_PCD_EP_Open+0xaa>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e00e      	b.n	80059c2 <HAL_PCD_EP_Open+0xc8>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68f9      	ldr	r1, [r7, #12]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f003 fa80 	bl	8008eb8 <USB_ActivateEndpoint>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80059c0:	7afb      	ldrb	r3, [r7, #11]
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_PCD_EP_Close>:
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	460b      	mov	r3, r1
 80059d4:	70fb      	strb	r3, [r7, #3]
 80059d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	da0f      	bge.n	80059fe <HAL_PCD_EP_Close+0x34>
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	f003 020f 	and.w	r2, r3, #15
 80059e4:	4613      	mov	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	3338      	adds	r3, #56	; 0x38
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	4413      	add	r3, r2
 80059f2:	3304      	adds	r3, #4
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	705a      	strb	r2, [r3, #1]
 80059fc:	e00f      	b.n	8005a1e <HAL_PCD_EP_Close+0x54>
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	f003 020f 	and.w	r2, r3, #15
 8005a04:	4613      	mov	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	4413      	add	r3, r2
 8005a14:	3304      	adds	r3, #4
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	705a      	strb	r2, [r3, #1]
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_PCD_EP_Close+0x6e>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e00e      	b.n	8005a56 <HAL_PCD_EP_Close+0x8c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68f9      	ldr	r1, [r7, #12]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f003 fabe 	bl	8008fc8 <USB_DeactivateEndpoint>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005a54:	2300      	movs	r3, #0
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_PCD_EP_Receive>:
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b086      	sub	sp, #24
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	603b      	str	r3, [r7, #0]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	72fb      	strb	r3, [r7, #11]
 8005a6e:	7afb      	ldrb	r3, [r7, #11]
 8005a70:	f003 020f 	and.w	r2, r3, #15
 8005a74:	4613      	mov	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	3304      	adds	r3, #4
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	611a      	str	r2, [r3, #16]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	619a      	str	r2, [r3, #24]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2200      	movs	r2, #0
 8005a98:	621a      	str	r2, [r3, #32]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	705a      	strb	r2, [r3, #1]
 8005aa0:	7afb      	ldrb	r3, [r7, #11]
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d102      	bne.n	8005aba <HAL_PCD_EP_Receive+0x5c>
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	615a      	str	r2, [r3, #20]
 8005aba:	7afb      	ldrb	r3, [r7, #11]
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <HAL_PCD_EP_Receive+0x7a>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6979      	ldr	r1, [r7, #20]
 8005ad2:	f003 fd9d 	bl	8009610 <USB_EP0StartXfer>
 8005ad6:	e008      	b.n	8005aea <HAL_PCD_EP_Receive+0x8c>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	6979      	ldr	r1, [r7, #20]
 8005ae6:	f003 fb4b 	bl	8009180 <USB_EPStartXfer>
 8005aea:	2300      	movs	r3, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_PCD_EP_GetRxCount>:
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	f003 020f 	and.w	r2, r3, #15
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	440b      	add	r3, r1
 8005b12:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_PCD_EP_Transmit>:
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	607a      	str	r2, [r7, #4]
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	460b      	mov	r3, r1
 8005b32:	72fb      	strb	r3, [r7, #11]
 8005b34:	7afb      	ldrb	r3, [r7, #11]
 8005b36:	f003 020f 	and.w	r2, r3, #15
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	3338      	adds	r3, #56	; 0x38
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	3304      	adds	r3, #4
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	611a      	str	r2, [r3, #16]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	619a      	str	r2, [r3, #24]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	621a      	str	r2, [r3, #32]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2201      	movs	r2, #1
 8005b62:	705a      	strb	r2, [r3, #1]
 8005b64:	7afb      	ldrb	r3, [r7, #11]
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d102      	bne.n	8005b7e <HAL_PCD_EP_Transmit+0x5a>
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	615a      	str	r2, [r3, #20]
 8005b7e:	7afb      	ldrb	r3, [r7, #11]
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d109      	bne.n	8005b9c <HAL_PCD_EP_Transmit+0x78>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	461a      	mov	r2, r3
 8005b94:	6979      	ldr	r1, [r7, #20]
 8005b96:	f003 fd3b 	bl	8009610 <USB_EP0StartXfer>
 8005b9a:	e008      	b.n	8005bae <HAL_PCD_EP_Transmit+0x8a>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6979      	ldr	r1, [r7, #20]
 8005baa:	f003 fae9 	bl	8009180 <USB_EPStartXfer>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_PCD_EP_SetStall>:
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	f003 020f 	and.w	r2, r3, #15
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d901      	bls.n	8005bd6 <HAL_PCD_EP_SetStall+0x1e>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e050      	b.n	8005c78 <HAL_PCD_EP_SetStall+0xc0>
 8005bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	da0f      	bge.n	8005bfe <HAL_PCD_EP_SetStall+0x46>
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	f003 020f 	and.w	r2, r3, #15
 8005be4:	4613      	mov	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	3338      	adds	r3, #56	; 0x38
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	705a      	strb	r2, [r3, #1]
 8005bfc:	e00d      	b.n	8005c1a <HAL_PCD_EP_SetStall+0x62>
 8005bfe:	78fa      	ldrb	r2, [r7, #3]
 8005c00:	4613      	mov	r3, r2
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	4413      	add	r3, r2
 8005c10:	3304      	adds	r3, #4
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	705a      	strb	r2, [r3, #1]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	709a      	strb	r2, [r3, #2]
 8005c20:	78fb      	ldrb	r3, [r7, #3]
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_PCD_EP_SetStall+0x82>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e01e      	b.n	8005c78 <HAL_PCD_EP_SetStall+0xc0>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68f9      	ldr	r1, [r7, #12]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f003 ff79 	bl	8009b40 <USB_EPSetStall>
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10a      	bne.n	8005c6e <HAL_PCD_EP_SetStall+0xb6>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	b2d9      	uxtb	r1, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f004 f969 	bl	8009f40 <USB_EP0_OutStart>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005c76:	2300      	movs	r3, #0
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_PCD_EP_ClrStall>:
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	70fb      	strb	r3, [r7, #3]
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	f003 020f 	and.w	r2, r3, #15
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d901      	bls.n	8005c9e <HAL_PCD_EP_ClrStall+0x1e>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e042      	b.n	8005d24 <HAL_PCD_EP_ClrStall+0xa4>
 8005c9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	da0f      	bge.n	8005cc6 <HAL_PCD_EP_ClrStall+0x46>
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	f003 020f 	and.w	r2, r3, #15
 8005cac:	4613      	mov	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	3338      	adds	r3, #56	; 0x38
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	4413      	add	r3, r2
 8005cba:	3304      	adds	r3, #4
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	705a      	strb	r2, [r3, #1]
 8005cc4:	e00f      	b.n	8005ce6 <HAL_PCD_EP_ClrStall+0x66>
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	f003 020f 	and.w	r2, r3, #15
 8005ccc:	4613      	mov	r3, r2
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	4413      	add	r3, r2
 8005cdc:	3304      	adds	r3, #4
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	705a      	strb	r2, [r3, #1]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	709a      	strb	r2, [r3, #2]
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	701a      	strb	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <HAL_PCD_EP_ClrStall+0x86>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e00e      	b.n	8005d24 <HAL_PCD_EP_ClrStall+0xa4>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f003 ff81 	bl	8009c1c <USB_EPClearStall>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005d22:	2300      	movs	r3, #0
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_PCD_EP_Abort>:
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
 8005d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	da0c      	bge.n	8005d5a <HAL_PCD_EP_Abort+0x2e>
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	f003 020f 	and.w	r2, r3, #15
 8005d46:	4613      	mov	r3, r2
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	4413      	add	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	3338      	adds	r3, #56	; 0x38
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	4413      	add	r3, r2
 8005d54:	3304      	adds	r3, #4
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e00c      	b.n	8005d74 <HAL_PCD_EP_Abort+0x48>
 8005d5a:	78fb      	ldrb	r3, [r7, #3]
 8005d5c:	f003 020f 	and.w	r2, r3, #15
 8005d60:	4613      	mov	r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	4413      	add	r3, r2
 8005d70:	3304      	adds	r3, #4
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68f9      	ldr	r1, [r7, #12]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f003 fda0 	bl	80098c0 <USB_EPStopXfer>
 8005d80:	4603      	mov	r3, r0
 8005d82:	72fb      	strb	r3, [r7, #11]
 8005d84:	7afb      	ldrb	r3, [r7, #11]
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <PCD_WriteEmptyTxFifo>:
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b08a      	sub	sp, #40	; 0x28
 8005d92:	af02      	add	r7, sp, #8
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	3338      	adds	r3, #56	; 0x38
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	4413      	add	r3, r2
 8005db2:	3304      	adds	r3, #4
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a1a      	ldr	r2, [r3, #32]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d901      	bls.n	8005dc6 <PCD_WriteEmptyTxFifo+0x38>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e06c      	b.n	8005ea0 <PCD_WriteEmptyTxFifo+0x112>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d902      	bls.n	8005de2 <PCD_WriteEmptyTxFifo+0x54>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	3303      	adds	r3, #3
 8005de6:	089b      	lsrs	r3, r3, #2
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	e02b      	b.n	8005e44 <PCD_WriteEmptyTxFifo+0xb6>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	699a      	ldr	r2, [r3, #24]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d902      	bls.n	8005e08 <PCD_WriteEmptyTxFifo+0x7a>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	61fb      	str	r3, [r7, #28]
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	3303      	adds	r3, #3
 8005e0c:	089b      	lsrs	r3, r3, #2
 8005e0e:	61bb      	str	r3, [r7, #24]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6919      	ldr	r1, [r3, #16]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	b298      	uxth	r0, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	4603      	mov	r3, r0
 8005e26:	6978      	ldr	r0, [r7, #20]
 8005e28:	f003 fdf4 	bl	8009a14 <USB_WritePacket>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	441a      	add	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	611a      	str	r2, [r3, #16]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a1a      	ldr	r2, [r3, #32]
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	441a      	add	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	621a      	str	r2, [r3, #32]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d809      	bhi.n	8005e6e <PCD_WriteEmptyTxFifo+0xe0>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a1a      	ldr	r2, [r3, #32]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d203      	bcs.n	8005e6e <PCD_WriteEmptyTxFifo+0xe0>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1be      	bne.n	8005dec <PCD_WriteEmptyTxFifo+0x5e>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d811      	bhi.n	8005e9e <PCD_WriteEmptyTxFifo+0x110>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	2201      	movs	r2, #1
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	60bb      	str	r3, [r7, #8]
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	43db      	mvns	r3, r3
 8005e94:	6939      	ldr	r1, [r7, #16]
 8005e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	634b      	str	r3, [r1, #52]	; 0x34
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3720      	adds	r7, #32
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <PCD_EP_OutXfrComplete_int>:
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	61fb      	str	r3, [r7, #28]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	61bb      	str	r3, [r7, #24]
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	333c      	adds	r3, #60	; 0x3c
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	613b      	str	r3, [r7, #16]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d17b      	bne.n	8005fd6 <PCD_EP_OutXfrComplete_int+0x12e>
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d015      	beq.n	8005f14 <PCD_EP_OutXfrComplete_int+0x6c>
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	4a61      	ldr	r2, [pc, #388]	; (8006070 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	f240 80b9 	bls.w	8006064 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80b3 	beq.w	8006064 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f10:	6093      	str	r3, [r2, #8]
 8005f12:	e0a7      	b.n	8006064 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d009      	beq.n	8005f32 <PCD_EP_OutXfrComplete_int+0x8a>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	2320      	movs	r3, #32
 8005f2e:	6093      	str	r3, [r2, #8]
 8005f30:	e098      	b.n	8006064 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f040 8093 	bne.w	8006064 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	4a4b      	ldr	r2, [pc, #300]	; (8006070 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d90f      	bls.n	8005f66 <PCD_EP_OutXfrComplete_int+0xbe>
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <PCD_EP_OutXfrComplete_int+0xbe>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f62:	6093      	str	r3, [r2, #8]
 8005f64:	e07e      	b.n	8006064 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	4413      	add	r3, r2
 8005f78:	3304      	adds	r3, #4
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	0159      	lsls	r1, r3, #5
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	440b      	add	r3, r1
 8005f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f92:	1ad2      	subs	r2, r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	621a      	str	r2, [r3, #32]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d114      	bne.n	8005fc8 <PCD_EP_OutXfrComplete_int+0x120>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <PCD_EP_OutXfrComplete_int+0x112>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	f003 ffc4 	bl	8009f40 <USB_EP0_OutStart>
 8005fb8:	e006      	b.n	8005fc8 <PCD_EP_OutXfrComplete_int+0x120>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	441a      	add	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	611a      	str	r2, [r3, #16]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f006 fa7c 	bl	800c4cc <HAL_PCD_DataOutStageCallback>
 8005fd4:	e046      	b.n	8006064 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	4a26      	ldr	r2, [pc, #152]	; (8006074 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d124      	bne.n	8006028 <PCD_EP_OutXfrComplete_int+0x180>
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <PCD_EP_OutXfrComplete_int+0x156>
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffa:	6093      	str	r3, [r2, #8]
 8005ffc:	e032      	b.n	8006064 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <PCD_EP_OutXfrComplete_int+0x172>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006014:	461a      	mov	r2, r3
 8006016:	2320      	movs	r3, #32
 8006018:	6093      	str	r3, [r2, #8]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f006 fa53 	bl	800c4cc <HAL_PCD_DataOutStageCallback>
 8006026:	e01d      	b.n	8006064 <PCD_EP_OutXfrComplete_int+0x1bc>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d114      	bne.n	8006058 <PCD_EP_OutXfrComplete_int+0x1b0>
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	4613      	mov	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	440b      	add	r3, r1
 800603c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d108      	bne.n	8006058 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006050:	461a      	mov	r2, r3
 8006052:	2100      	movs	r1, #0
 8006054:	f003 ff74 	bl	8009f40 <USB_EP0_OutStart>
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f006 fa34 	bl	800c4cc <HAL_PCD_DataOutStageCallback>
 8006064:	2300      	movs	r3, #0
 8006066:	4618      	mov	r0, r3
 8006068:	3720      	adds	r7, #32
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	4f54300a 	.word	0x4f54300a
 8006074:	4f54310a 	.word	0x4f54310a

08006078 <PCD_EP_OutSetupPacket_int>:
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	333c      	adds	r3, #60	; 0x3c
 8006090:	3304      	adds	r3, #4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	60bb      	str	r3, [r7, #8]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4a15      	ldr	r2, [pc, #84]	; (8006100 <PCD_EP_OutSetupPacket_int+0x88>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d90e      	bls.n	80060cc <PCD_EP_OutSetupPacket_int+0x54>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d009      	beq.n	80060cc <PCD_EP_OutSetupPacket_int+0x54>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c4:	461a      	mov	r2, r3
 80060c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ca:	6093      	str	r3, [r2, #8]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f006 f9eb 	bl	800c4a8 <HAL_PCD_SetupStageCallback>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4a0a      	ldr	r2, [pc, #40]	; (8006100 <PCD_EP_OutSetupPacket_int+0x88>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d90c      	bls.n	80060f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d108      	bne.n	80060f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6818      	ldr	r0, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060ec:	461a      	mov	r2, r3
 80060ee:	2101      	movs	r1, #1
 80060f0:	f003 ff26 	bl	8009f40 <USB_EP0_OutStart>
 80060f4:	2300      	movs	r3, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	4f54300a 	.word	0x4f54300a

08006104 <HAL_PCDEx_SetTxFiFo>:
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	70fb      	strb	r3, [r7, #3]
 8006110:	4613      	mov	r3, r2
 8006112:	803b      	strh	r3, [r7, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	60bb      	str	r3, [r7, #8]
 800611c:	78fb      	ldrb	r3, [r7, #3]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d107      	bne.n	8006132 <HAL_PCDEx_SetTxFiFo+0x2e>
 8006122:	883b      	ldrh	r3, [r7, #0]
 8006124:	0419      	lsls	r1, r3, #16
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	430a      	orrs	r2, r1
 800612e:	629a      	str	r2, [r3, #40]	; 0x28
 8006130:	e028      	b.n	8006184 <HAL_PCDEx_SetTxFiFo+0x80>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	0c1b      	lsrs	r3, r3, #16
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	4413      	add	r3, r2
 800613e:	60bb      	str	r3, [r7, #8]
 8006140:	2300      	movs	r3, #0
 8006142:	73fb      	strb	r3, [r7, #15]
 8006144:	e00d      	b.n	8006162 <HAL_PCDEx_SetTxFiFo+0x5e>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	3340      	adds	r3, #64	; 0x40
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	0c1b      	lsrs	r3, r3, #16
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	4413      	add	r3, r2
 800615a:	60bb      	str	r3, [r7, #8]
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	3301      	adds	r3, #1
 8006160:	73fb      	strb	r3, [r7, #15]
 8006162:	7bfa      	ldrb	r2, [r7, #15]
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	3b01      	subs	r3, #1
 8006168:	429a      	cmp	r2, r3
 800616a:	d3ec      	bcc.n	8006146 <HAL_PCDEx_SetTxFiFo+0x42>
 800616c:	883b      	ldrh	r3, [r7, #0]
 800616e:	0418      	lsls	r0, r3, #16
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6819      	ldr	r1, [r3, #0]
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	3b01      	subs	r3, #1
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	4302      	orrs	r2, r0
 800617c:	3340      	adds	r3, #64	; 0x40
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	440b      	add	r3, r1
 8006182:	605a      	str	r2, [r3, #4]
 8006184:	2300      	movs	r3, #0
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_PCDEx_SetRxFiFo>:
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	460b      	mov	r3, r1
 800619c:	807b      	strh	r3, [r7, #2]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	887a      	ldrh	r2, [r7, #2]
 80061a4:	625a      	str	r2, [r3, #36]	; 0x24
 80061a6:	2300      	movs	r3, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_PCDEx_LPM_Callback>:
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	70fb      	strb	r3, [r7, #3]
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_RCC_OscConfig>:
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_RCC_OscConfig+0x12>
 80061da:	2301      	movs	r3, #1
 80061dc:	e267      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d075      	beq.n	80062d6 <HAL_RCC_OscConfig+0x10a>
 80061ea:	4b88      	ldr	r3, [pc, #544]	; (800640c <HAL_RCC_OscConfig+0x240>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f003 030c 	and.w	r3, r3, #12
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d00c      	beq.n	8006210 <HAL_RCC_OscConfig+0x44>
 80061f6:	4b85      	ldr	r3, [pc, #532]	; (800640c <HAL_RCC_OscConfig+0x240>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d112      	bne.n	8006228 <HAL_RCC_OscConfig+0x5c>
 8006202:	4b82      	ldr	r3, [pc, #520]	; (800640c <HAL_RCC_OscConfig+0x240>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800620a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800620e:	d10b      	bne.n	8006228 <HAL_RCC_OscConfig+0x5c>
 8006210:	4b7e      	ldr	r3, [pc, #504]	; (800640c <HAL_RCC_OscConfig+0x240>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d05b      	beq.n	80062d4 <HAL_RCC_OscConfig+0x108>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d157      	bne.n	80062d4 <HAL_RCC_OscConfig+0x108>
 8006224:	2301      	movs	r3, #1
 8006226:	e242      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006230:	d106      	bne.n	8006240 <HAL_RCC_OscConfig+0x74>
 8006232:	4b76      	ldr	r3, [pc, #472]	; (800640c <HAL_RCC_OscConfig+0x240>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a75      	ldr	r2, [pc, #468]	; (800640c <HAL_RCC_OscConfig+0x240>)
 8006238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	e01d      	b.n	800627c <HAL_RCC_OscConfig+0xb0>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006248:	d10c      	bne.n	8006264 <HAL_RCC_OscConfig+0x98>
 800624a:	4b70      	ldr	r3, [pc, #448]	; (800640c <HAL_RCC_OscConfig+0x240>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a6f      	ldr	r2, [pc, #444]	; (800640c <HAL_RCC_OscConfig+0x240>)
 8006250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	4b6d      	ldr	r3, [pc, #436]	; (800640c <HAL_RCC_OscConfig+0x240>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a6c      	ldr	r2, [pc, #432]	; (800640c <HAL_RCC_OscConfig+0x240>)
 800625c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	e00b      	b.n	800627c <HAL_RCC_OscConfig+0xb0>
 8006264:	4b69      	ldr	r3, [pc, #420]	; (800640c <HAL_RCC_OscConfig+0x240>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a68      	ldr	r2, [pc, #416]	; (800640c <HAL_RCC_OscConfig+0x240>)
 800626a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	4b66      	ldr	r3, [pc, #408]	; (800640c <HAL_RCC_OscConfig+0x240>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a65      	ldr	r2, [pc, #404]	; (800640c <HAL_RCC_OscConfig+0x240>)
 8006276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d013      	beq.n	80062ac <HAL_RCC_OscConfig+0xe0>
 8006284:	f7fc f860 	bl	8002348 <HAL_GetTick>
 8006288:	6138      	str	r0, [r7, #16]
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0xd2>
 800628c:	f7fc f85c 	bl	8002348 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b64      	cmp	r3, #100	; 0x64
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0xd2>
 800629a:	2303      	movs	r3, #3
 800629c:	e207      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 800629e:	4b5b      	ldr	r3, [pc, #364]	; (800640c <HAL_RCC_OscConfig+0x240>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0f0      	beq.n	800628c <HAL_RCC_OscConfig+0xc0>
 80062aa:	e014      	b.n	80062d6 <HAL_RCC_OscConfig+0x10a>
 80062ac:	f7fc f84c 	bl	8002348 <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0xfa>
 80062b4:	f7fc f848 	bl	8002348 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	; 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0xfa>
 80062c2:	2303      	movs	r3, #3
 80062c4:	e1f3      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 80062c6:	4b51      	ldr	r3, [pc, #324]	; (800640c <HAL_RCC_OscConfig+0x240>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f0      	bne.n	80062b4 <HAL_RCC_OscConfig+0xe8>
 80062d2:	e000      	b.n	80062d6 <HAL_RCC_OscConfig+0x10a>
 80062d4:	bf00      	nop
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d063      	beq.n	80063aa <HAL_RCC_OscConfig+0x1de>
 80062e2:	4b4a      	ldr	r3, [pc, #296]	; (800640c <HAL_RCC_OscConfig+0x240>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00b      	beq.n	8006306 <HAL_RCC_OscConfig+0x13a>
 80062ee:	4b47      	ldr	r3, [pc, #284]	; (800640c <HAL_RCC_OscConfig+0x240>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 030c 	and.w	r3, r3, #12
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d11c      	bne.n	8006334 <HAL_RCC_OscConfig+0x168>
 80062fa:	4b44      	ldr	r3, [pc, #272]	; (800640c <HAL_RCC_OscConfig+0x240>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d116      	bne.n	8006334 <HAL_RCC_OscConfig+0x168>
 8006306:	4b41      	ldr	r3, [pc, #260]	; (800640c <HAL_RCC_OscConfig+0x240>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_RCC_OscConfig+0x152>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d001      	beq.n	800631e <HAL_RCC_OscConfig+0x152>
 800631a:	2301      	movs	r3, #1
 800631c:	e1c7      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 800631e:	4b3b      	ldr	r3, [pc, #236]	; (800640c <HAL_RCC_OscConfig+0x240>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	4937      	ldr	r1, [pc, #220]	; (800640c <HAL_RCC_OscConfig+0x240>)
 800632e:	4313      	orrs	r3, r2
 8006330:	600b      	str	r3, [r1, #0]
 8006332:	e03a      	b.n	80063aa <HAL_RCC_OscConfig+0x1de>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d020      	beq.n	800637e <HAL_RCC_OscConfig+0x1b2>
 800633c:	4b34      	ldr	r3, [pc, #208]	; (8006410 <HAL_RCC_OscConfig+0x244>)
 800633e:	2201      	movs	r2, #1
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	f7fc f801 	bl	8002348 <HAL_GetTick>
 8006346:	6138      	str	r0, [r7, #16]
 8006348:	e008      	b.n	800635c <HAL_RCC_OscConfig+0x190>
 800634a:	f7fb fffd 	bl	8002348 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d901      	bls.n	800635c <HAL_RCC_OscConfig+0x190>
 8006358:	2303      	movs	r3, #3
 800635a:	e1a8      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 800635c:	4b2b      	ldr	r3, [pc, #172]	; (800640c <HAL_RCC_OscConfig+0x240>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0f0      	beq.n	800634a <HAL_RCC_OscConfig+0x17e>
 8006368:	4b28      	ldr	r3, [pc, #160]	; (800640c <HAL_RCC_OscConfig+0x240>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	4925      	ldr	r1, [pc, #148]	; (800640c <HAL_RCC_OscConfig+0x240>)
 8006378:	4313      	orrs	r3, r2
 800637a:	600b      	str	r3, [r1, #0]
 800637c:	e015      	b.n	80063aa <HAL_RCC_OscConfig+0x1de>
 800637e:	4b24      	ldr	r3, [pc, #144]	; (8006410 <HAL_RCC_OscConfig+0x244>)
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	f7fb ffe0 	bl	8002348 <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x1d2>
 800638c:	f7fb ffdc 	bl	8002348 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x1d2>
 800639a:	2303      	movs	r3, #3
 800639c:	e187      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 800639e:	4b1b      	ldr	r3, [pc, #108]	; (800640c <HAL_RCC_OscConfig+0x240>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0x1c0>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d036      	beq.n	8006424 <HAL_RCC_OscConfig+0x258>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d016      	beq.n	80063ec <HAL_RCC_OscConfig+0x220>
 80063be:	4b15      	ldr	r3, [pc, #84]	; (8006414 <HAL_RCC_OscConfig+0x248>)
 80063c0:	2201      	movs	r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	f7fb ffc0 	bl	8002348 <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x212>
 80063cc:	f7fb ffbc 	bl	8002348 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x212>
 80063da:	2303      	movs	r3, #3
 80063dc:	e167      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 80063de:	4b0b      	ldr	r3, [pc, #44]	; (800640c <HAL_RCC_OscConfig+0x240>)
 80063e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0x200>
 80063ea:	e01b      	b.n	8006424 <HAL_RCC_OscConfig+0x258>
 80063ec:	4b09      	ldr	r3, [pc, #36]	; (8006414 <HAL_RCC_OscConfig+0x248>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	f7fb ffa9 	bl	8002348 <HAL_GetTick>
 80063f6:	6138      	str	r0, [r7, #16]
 80063f8:	e00e      	b.n	8006418 <HAL_RCC_OscConfig+0x24c>
 80063fa:	f7fb ffa5 	bl	8002348 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d907      	bls.n	8006418 <HAL_RCC_OscConfig+0x24c>
 8006408:	2303      	movs	r3, #3
 800640a:	e150      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 800640c:	40023800 	.word	0x40023800
 8006410:	42470000 	.word	0x42470000
 8006414:	42470e80 	.word	0x42470e80
 8006418:	4b88      	ldr	r3, [pc, #544]	; (800663c <HAL_RCC_OscConfig+0x470>)
 800641a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1ea      	bne.n	80063fa <HAL_RCC_OscConfig+0x22e>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 8097 	beq.w	8006560 <HAL_RCC_OscConfig+0x394>
 8006432:	2300      	movs	r3, #0
 8006434:	75fb      	strb	r3, [r7, #23]
 8006436:	4b81      	ldr	r3, [pc, #516]	; (800663c <HAL_RCC_OscConfig+0x470>)
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10f      	bne.n	8006462 <HAL_RCC_OscConfig+0x296>
 8006442:	2300      	movs	r3, #0
 8006444:	60bb      	str	r3, [r7, #8]
 8006446:	4b7d      	ldr	r3, [pc, #500]	; (800663c <HAL_RCC_OscConfig+0x470>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	4a7c      	ldr	r2, [pc, #496]	; (800663c <HAL_RCC_OscConfig+0x470>)
 800644c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006450:	6413      	str	r3, [r2, #64]	; 0x40
 8006452:	4b7a      	ldr	r3, [pc, #488]	; (800663c <HAL_RCC_OscConfig+0x470>)
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800645a:	60bb      	str	r3, [r7, #8]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2301      	movs	r3, #1
 8006460:	75fb      	strb	r3, [r7, #23]
 8006462:	4b77      	ldr	r3, [pc, #476]	; (8006640 <HAL_RCC_OscConfig+0x474>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646a:	2b00      	cmp	r3, #0
 800646c:	d118      	bne.n	80064a0 <HAL_RCC_OscConfig+0x2d4>
 800646e:	4b74      	ldr	r3, [pc, #464]	; (8006640 <HAL_RCC_OscConfig+0x474>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a73      	ldr	r2, [pc, #460]	; (8006640 <HAL_RCC_OscConfig+0x474>)
 8006474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	f7fb ff65 	bl	8002348 <HAL_GetTick>
 800647e:	6138      	str	r0, [r7, #16]
 8006480:	e008      	b.n	8006494 <HAL_RCC_OscConfig+0x2c8>
 8006482:	f7fb ff61 	bl	8002348 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d901      	bls.n	8006494 <HAL_RCC_OscConfig+0x2c8>
 8006490:	2303      	movs	r3, #3
 8006492:	e10c      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 8006494:	4b6a      	ldr	r3, [pc, #424]	; (8006640 <HAL_RCC_OscConfig+0x474>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0f0      	beq.n	8006482 <HAL_RCC_OscConfig+0x2b6>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d106      	bne.n	80064b6 <HAL_RCC_OscConfig+0x2ea>
 80064a8:	4b64      	ldr	r3, [pc, #400]	; (800663c <HAL_RCC_OscConfig+0x470>)
 80064aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ac:	4a63      	ldr	r2, [pc, #396]	; (800663c <HAL_RCC_OscConfig+0x470>)
 80064ae:	f043 0301 	orr.w	r3, r3, #1
 80064b2:	6713      	str	r3, [r2, #112]	; 0x70
 80064b4:	e01c      	b.n	80064f0 <HAL_RCC_OscConfig+0x324>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	2b05      	cmp	r3, #5
 80064bc:	d10c      	bne.n	80064d8 <HAL_RCC_OscConfig+0x30c>
 80064be:	4b5f      	ldr	r3, [pc, #380]	; (800663c <HAL_RCC_OscConfig+0x470>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c2:	4a5e      	ldr	r2, [pc, #376]	; (800663c <HAL_RCC_OscConfig+0x470>)
 80064c4:	f043 0304 	orr.w	r3, r3, #4
 80064c8:	6713      	str	r3, [r2, #112]	; 0x70
 80064ca:	4b5c      	ldr	r3, [pc, #368]	; (800663c <HAL_RCC_OscConfig+0x470>)
 80064cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ce:	4a5b      	ldr	r2, [pc, #364]	; (800663c <HAL_RCC_OscConfig+0x470>)
 80064d0:	f043 0301 	orr.w	r3, r3, #1
 80064d4:	6713      	str	r3, [r2, #112]	; 0x70
 80064d6:	e00b      	b.n	80064f0 <HAL_RCC_OscConfig+0x324>
 80064d8:	4b58      	ldr	r3, [pc, #352]	; (800663c <HAL_RCC_OscConfig+0x470>)
 80064da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064dc:	4a57      	ldr	r2, [pc, #348]	; (800663c <HAL_RCC_OscConfig+0x470>)
 80064de:	f023 0301 	bic.w	r3, r3, #1
 80064e2:	6713      	str	r3, [r2, #112]	; 0x70
 80064e4:	4b55      	ldr	r3, [pc, #340]	; (800663c <HAL_RCC_OscConfig+0x470>)
 80064e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e8:	4a54      	ldr	r2, [pc, #336]	; (800663c <HAL_RCC_OscConfig+0x470>)
 80064ea:	f023 0304 	bic.w	r3, r3, #4
 80064ee:	6713      	str	r3, [r2, #112]	; 0x70
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d015      	beq.n	8006524 <HAL_RCC_OscConfig+0x358>
 80064f8:	f7fb ff26 	bl	8002348 <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]
 80064fe:	e00a      	b.n	8006516 <HAL_RCC_OscConfig+0x34a>
 8006500:	f7fb ff22 	bl	8002348 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	f241 3288 	movw	r2, #5000	; 0x1388
 800650e:	4293      	cmp	r3, r2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x34a>
 8006512:	2303      	movs	r3, #3
 8006514:	e0cb      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 8006516:	4b49      	ldr	r3, [pc, #292]	; (800663c <HAL_RCC_OscConfig+0x470>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0ee      	beq.n	8006500 <HAL_RCC_OscConfig+0x334>
 8006522:	e014      	b.n	800654e <HAL_RCC_OscConfig+0x382>
 8006524:	f7fb ff10 	bl	8002348 <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]
 800652a:	e00a      	b.n	8006542 <HAL_RCC_OscConfig+0x376>
 800652c:	f7fb ff0c 	bl	8002348 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	f241 3288 	movw	r2, #5000	; 0x1388
 800653a:	4293      	cmp	r3, r2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x376>
 800653e:	2303      	movs	r3, #3
 8006540:	e0b5      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 8006542:	4b3e      	ldr	r3, [pc, #248]	; (800663c <HAL_RCC_OscConfig+0x470>)
 8006544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1ee      	bne.n	800652c <HAL_RCC_OscConfig+0x360>
 800654e:	7dfb      	ldrb	r3, [r7, #23]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d105      	bne.n	8006560 <HAL_RCC_OscConfig+0x394>
 8006554:	4b39      	ldr	r3, [pc, #228]	; (800663c <HAL_RCC_OscConfig+0x470>)
 8006556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006558:	4a38      	ldr	r2, [pc, #224]	; (800663c <HAL_RCC_OscConfig+0x470>)
 800655a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800655e:	6413      	str	r3, [r2, #64]	; 0x40
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80a1 	beq.w	80066ac <HAL_RCC_OscConfig+0x4e0>
 800656a:	4b34      	ldr	r3, [pc, #208]	; (800663c <HAL_RCC_OscConfig+0x470>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 030c 	and.w	r3, r3, #12
 8006572:	2b08      	cmp	r3, #8
 8006574:	d05c      	beq.n	8006630 <HAL_RCC_OscConfig+0x464>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d141      	bne.n	8006602 <HAL_RCC_OscConfig+0x436>
 800657e:	4b31      	ldr	r3, [pc, #196]	; (8006644 <HAL_RCC_OscConfig+0x478>)
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	f7fb fee0 	bl	8002348 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x3d2>
 800658c:	f7fb fedc 	bl	8002348 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x3d2>
 800659a:	2303      	movs	r3, #3
 800659c:	e087      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 800659e:	4b27      	ldr	r3, [pc, #156]	; (800663c <HAL_RCC_OscConfig+0x470>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f0      	bne.n	800658c <HAL_RCC_OscConfig+0x3c0>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69da      	ldr	r2, [r3, #28]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	019b      	lsls	r3, r3, #6
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c0:	085b      	lsrs	r3, r3, #1
 80065c2:	3b01      	subs	r3, #1
 80065c4:	041b      	lsls	r3, r3, #16
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065cc:	061b      	lsls	r3, r3, #24
 80065ce:	491b      	ldr	r1, [pc, #108]	; (800663c <HAL_RCC_OscConfig+0x470>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	604b      	str	r3, [r1, #4]
 80065d4:	4b1b      	ldr	r3, [pc, #108]	; (8006644 <HAL_RCC_OscConfig+0x478>)
 80065d6:	2201      	movs	r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	f7fb feb5 	bl	8002348 <HAL_GetTick>
 80065de:	6138      	str	r0, [r7, #16]
 80065e0:	e008      	b.n	80065f4 <HAL_RCC_OscConfig+0x428>
 80065e2:	f7fb feb1 	bl	8002348 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d901      	bls.n	80065f4 <HAL_RCC_OscConfig+0x428>
 80065f0:	2303      	movs	r3, #3
 80065f2:	e05c      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 80065f4:	4b11      	ldr	r3, [pc, #68]	; (800663c <HAL_RCC_OscConfig+0x470>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0f0      	beq.n	80065e2 <HAL_RCC_OscConfig+0x416>
 8006600:	e054      	b.n	80066ac <HAL_RCC_OscConfig+0x4e0>
 8006602:	4b10      	ldr	r3, [pc, #64]	; (8006644 <HAL_RCC_OscConfig+0x478>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f7fb fe9e 	bl	8002348 <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0x456>
 8006610:	f7fb fe9a 	bl	8002348 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0x456>
 800661e:	2303      	movs	r3, #3
 8006620:	e045      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 8006622:	4b06      	ldr	r3, [pc, #24]	; (800663c <HAL_RCC_OscConfig+0x470>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1f0      	bne.n	8006610 <HAL_RCC_OscConfig+0x444>
 800662e:	e03d      	b.n	80066ac <HAL_RCC_OscConfig+0x4e0>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d107      	bne.n	8006648 <HAL_RCC_OscConfig+0x47c>
 8006638:	2301      	movs	r3, #1
 800663a:	e038      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 800663c:	40023800 	.word	0x40023800
 8006640:	40007000 	.word	0x40007000
 8006644:	42470060 	.word	0x42470060
 8006648:	4b1b      	ldr	r3, [pc, #108]	; (80066b8 <HAL_RCC_OscConfig+0x4ec>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d028      	beq.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	429a      	cmp	r2, r3
 8006662:	d121      	bne.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	429a      	cmp	r2, r3
 8006670:	d11a      	bne.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006678:	4013      	ands	r3, r2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800667e:	0192      	lsls	r2, r2, #6
 8006680:	4293      	cmp	r3, r2
 8006682:	d111      	bne.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	085b      	lsrs	r3, r3, #1
 8006690:	3b01      	subs	r3, #1
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	429a      	cmp	r2, r3
 8006696:	d107      	bne.n	80066a8 <HAL_RCC_OscConfig+0x4dc>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	061b      	lsls	r3, r3, #24
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d001      	beq.n	80066ac <HAL_RCC_OscConfig+0x4e0>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <HAL_RCC_OscConfig+0x4e2>
 80066ac:	2300      	movs	r3, #0
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40023800 	.word	0x40023800

080066bc <HAL_RCC_ClockConfig>:
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x14>
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0cc      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
 80066d0:	4b68      	ldr	r3, [pc, #416]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d90c      	bls.n	80066f8 <HAL_RCC_ClockConfig+0x3c>
 80066de:	4b65      	ldr	r3, [pc, #404]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	4b63      	ldr	r3, [pc, #396]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d001      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x3c>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0b8      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d020      	beq.n	8006746 <HAL_RCC_ClockConfig+0x8a>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d005      	beq.n	800671c <HAL_RCC_ClockConfig+0x60>
 8006710:	4b59      	ldr	r3, [pc, #356]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	4a58      	ldr	r2, [pc, #352]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800671a:	6093      	str	r3, [r2, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b00      	cmp	r3, #0
 8006726:	d005      	beq.n	8006734 <HAL_RCC_ClockConfig+0x78>
 8006728:	4b53      	ldr	r3, [pc, #332]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	4a52      	ldr	r2, [pc, #328]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800672e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006732:	6093      	str	r3, [r2, #8]
 8006734:	4b50      	ldr	r3, [pc, #320]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	494d      	ldr	r1, [pc, #308]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006742:	4313      	orrs	r3, r2
 8006744:	608b      	str	r3, [r1, #8]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d044      	beq.n	80067dc <HAL_RCC_ClockConfig+0x120>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d107      	bne.n	800676a <HAL_RCC_ClockConfig+0xae>
 800675a:	4b47      	ldr	r3, [pc, #284]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d119      	bne.n	800679a <HAL_RCC_ClockConfig+0xde>
 8006766:	2301      	movs	r3, #1
 8006768:	e07f      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d003      	beq.n	800677a <HAL_RCC_ClockConfig+0xbe>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b03      	cmp	r3, #3
 8006778:	d107      	bne.n	800678a <HAL_RCC_ClockConfig+0xce>
 800677a:	4b3f      	ldr	r3, [pc, #252]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d109      	bne.n	800679a <HAL_RCC_ClockConfig+0xde>
 8006786:	2301      	movs	r3, #1
 8006788:	e06f      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
 800678a:	4b3b      	ldr	r3, [pc, #236]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_RCC_ClockConfig+0xde>
 8006796:	2301      	movs	r3, #1
 8006798:	e067      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
 800679a:	4b37      	ldr	r3, [pc, #220]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f023 0203 	bic.w	r2, r3, #3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4934      	ldr	r1, [pc, #208]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	608b      	str	r3, [r1, #8]
 80067ac:	f7fb fdcc 	bl	8002348 <HAL_GetTick>
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	e00a      	b.n	80067ca <HAL_RCC_ClockConfig+0x10e>
 80067b4:	f7fb fdc8 	bl	8002348 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_ClockConfig+0x10e>
 80067c6:	2303      	movs	r3, #3
 80067c8:	e04f      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
 80067ca:	4b2b      	ldr	r3, [pc, #172]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 020c 	and.w	r2, r3, #12
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	429a      	cmp	r2, r3
 80067da:	d1eb      	bne.n	80067b4 <HAL_RCC_ClockConfig+0xf8>
 80067dc:	4b25      	ldr	r3, [pc, #148]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d20c      	bcs.n	8006804 <HAL_RCC_ClockConfig+0x148>
 80067ea:	4b22      	ldr	r3, [pc, #136]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	4b20      	ldr	r3, [pc, #128]	; (8006874 <HAL_RCC_ClockConfig+0x1b8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d001      	beq.n	8006804 <HAL_RCC_ClockConfig+0x148>
 8006800:	2301      	movs	r3, #1
 8006802:	e032      	b.n	800686a <HAL_RCC_ClockConfig+0x1ae>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d008      	beq.n	8006822 <HAL_RCC_ClockConfig+0x166>
 8006810:	4b19      	ldr	r3, [pc, #100]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	4916      	ldr	r1, [pc, #88]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	4313      	orrs	r3, r2
 8006820:	608b      	str	r3, [r1, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <HAL_RCC_ClockConfig+0x186>
 800682e:	4b12      	ldr	r3, [pc, #72]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	490e      	ldr	r1, [pc, #56]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	4313      	orrs	r3, r2
 8006840:	608b      	str	r3, [r1, #8]
 8006842:	f000 f821 	bl	8006888 <HAL_RCC_GetSysClockFreq>
 8006846:	4602      	mov	r2, r0
 8006848:	4b0b      	ldr	r3, [pc, #44]	; (8006878 <HAL_RCC_ClockConfig+0x1bc>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	091b      	lsrs	r3, r3, #4
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	490a      	ldr	r1, [pc, #40]	; (800687c <HAL_RCC_ClockConfig+0x1c0>)
 8006854:	5ccb      	ldrb	r3, [r1, r3]
 8006856:	fa22 f303 	lsr.w	r3, r2, r3
 800685a:	4a09      	ldr	r2, [pc, #36]	; (8006880 <HAL_RCC_ClockConfig+0x1c4>)
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	4b09      	ldr	r3, [pc, #36]	; (8006884 <HAL_RCC_ClockConfig+0x1c8>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4618      	mov	r0, r3
 8006864:	f7fb fd2c 	bl	80022c0 <HAL_InitTick>
 8006868:	2300      	movs	r3, #0
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	40023c00 	.word	0x40023c00
 8006878:	40023800 	.word	0x40023800
 800687c:	0800f7c0 	.word	0x0800f7c0
 8006880:	20000028 	.word	0x20000028
 8006884:	2000002c 	.word	0x2000002c

08006888 <HAL_RCC_GetSysClockFreq>:
 8006888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800688c:	b090      	sub	sp, #64	; 0x40
 800688e:	af00      	add	r7, sp, #0
 8006890:	2300      	movs	r3, #0
 8006892:	637b      	str	r3, [r7, #52]	; 0x34
 8006894:	2300      	movs	r3, #0
 8006896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006898:	2300      	movs	r3, #0
 800689a:	633b      	str	r3, [r7, #48]	; 0x30
 800689c:	2300      	movs	r3, #0
 800689e:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a0:	4b59      	ldr	r3, [pc, #356]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 030c 	and.w	r3, r3, #12
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d00d      	beq.n	80068c8 <HAL_RCC_GetSysClockFreq+0x40>
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	f200 80a1 	bhi.w	80069f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <HAL_RCC_GetSysClockFreq+0x34>
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d003      	beq.n	80068c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80068ba:	e09b      	b.n	80069f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80068bc:	4b53      	ldr	r3, [pc, #332]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x184>)
 80068be:	63bb      	str	r3, [r7, #56]	; 0x38
 80068c0:	e09b      	b.n	80069fa <HAL_RCC_GetSysClockFreq+0x172>
 80068c2:	4b53      	ldr	r3, [pc, #332]	; (8006a10 <HAL_RCC_GetSysClockFreq+0x188>)
 80068c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80068c6:	e098      	b.n	80069fa <HAL_RCC_GetSysClockFreq+0x172>
 80068c8:	4b4f      	ldr	r3, [pc, #316]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
 80068d2:	4b4d      	ldr	r3, [pc, #308]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d028      	beq.n	8006930 <HAL_RCC_GetSysClockFreq+0xa8>
 80068de:	4b4a      	ldr	r3, [pc, #296]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	099b      	lsrs	r3, r3, #6
 80068e4:	2200      	movs	r2, #0
 80068e6:	623b      	str	r3, [r7, #32]
 80068e8:	627a      	str	r2, [r7, #36]	; 0x24
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80068f0:	2100      	movs	r1, #0
 80068f2:	4b47      	ldr	r3, [pc, #284]	; (8006a10 <HAL_RCC_GetSysClockFreq+0x188>)
 80068f4:	fb03 f201 	mul.w	r2, r3, r1
 80068f8:	2300      	movs	r3, #0
 80068fa:	fb00 f303 	mul.w	r3, r0, r3
 80068fe:	4413      	add	r3, r2
 8006900:	4a43      	ldr	r2, [pc, #268]	; (8006a10 <HAL_RCC_GetSysClockFreq+0x188>)
 8006902:	fba0 1202 	umull	r1, r2, r0, r2
 8006906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006908:	460a      	mov	r2, r1
 800690a:	62ba      	str	r2, [r7, #40]	; 0x28
 800690c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800690e:	4413      	add	r3, r2
 8006910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006914:	2200      	movs	r2, #0
 8006916:	61bb      	str	r3, [r7, #24]
 8006918:	61fa      	str	r2, [r7, #28]
 800691a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800691e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006922:	f7fa f949 	bl	8000bb8 <__aeabi_uldivmod>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4613      	mov	r3, r2
 800692c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800692e:	e053      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0x150>
 8006930:	4b35      	ldr	r3, [pc, #212]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x180>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	099b      	lsrs	r3, r3, #6
 8006936:	2200      	movs	r2, #0
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	617a      	str	r2, [r7, #20]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006942:	f04f 0b00 	mov.w	fp, #0
 8006946:	4652      	mov	r2, sl
 8006948:	465b      	mov	r3, fp
 800694a:	f04f 0000 	mov.w	r0, #0
 800694e:	f04f 0100 	mov.w	r1, #0
 8006952:	0159      	lsls	r1, r3, #5
 8006954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006958:	0150      	lsls	r0, r2, #5
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	ebb2 080a 	subs.w	r8, r2, sl
 8006962:	eb63 090b 	sbc.w	r9, r3, fp
 8006966:	f04f 0200 	mov.w	r2, #0
 800696a:	f04f 0300 	mov.w	r3, #0
 800696e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006972:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006976:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800697a:	ebb2 0408 	subs.w	r4, r2, r8
 800697e:	eb63 0509 	sbc.w	r5, r3, r9
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	00eb      	lsls	r3, r5, #3
 800698c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006990:	00e2      	lsls	r2, r4, #3
 8006992:	4614      	mov	r4, r2
 8006994:	461d      	mov	r5, r3
 8006996:	eb14 030a 	adds.w	r3, r4, sl
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	eb45 030b 	adc.w	r3, r5, fp
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069ae:	4629      	mov	r1, r5
 80069b0:	028b      	lsls	r3, r1, #10
 80069b2:	4621      	mov	r1, r4
 80069b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069b8:	4621      	mov	r1, r4
 80069ba:	028a      	lsls	r2, r1, #10
 80069bc:	4610      	mov	r0, r2
 80069be:	4619      	mov	r1, r3
 80069c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c2:	2200      	movs	r2, #0
 80069c4:	60bb      	str	r3, [r7, #8]
 80069c6:	60fa      	str	r2, [r7, #12]
 80069c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069cc:	f7fa f8f4 	bl	8000bb8 <__aeabi_uldivmod>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4613      	mov	r3, r2
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d8:	4b0b      	ldr	r3, [pc, #44]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x180>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	0c1b      	lsrs	r3, r3, #16
 80069de:	f003 0303 	and.w	r3, r3, #3
 80069e2:	3301      	adds	r3, #1
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	633b      	str	r3, [r7, #48]	; 0x30
 80069e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80069f2:	e002      	b.n	80069fa <HAL_RCC_GetSysClockFreq+0x172>
 80069f4:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x184>)
 80069f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069f8:	bf00      	nop
 80069fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fc:	4618      	mov	r0, r3
 80069fe:	3740      	adds	r7, #64	; 0x40
 8006a00:	46bd      	mov	sp, r7
 8006a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a06:	bf00      	nop
 8006a08:	40023800 	.word	0x40023800
 8006a0c:	00f42400 	.word	0x00f42400
 8006a10:	017d7840 	.word	0x017d7840

08006a14 <HAL_RCC_GetHCLKFreq>:
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	4b03      	ldr	r3, [pc, #12]	; (8006a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	20000028 	.word	0x20000028

08006a2c <HAL_RCC_GetPCLK1Freq>:
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	f7ff fff0 	bl	8006a14 <HAL_RCC_GetHCLKFreq>
 8006a34:	4602      	mov	r2, r0
 8006a36:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	0a9b      	lsrs	r3, r3, #10
 8006a3c:	f003 0307 	and.w	r3, r3, #7
 8006a40:	4903      	ldr	r1, [pc, #12]	; (8006a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a42:	5ccb      	ldrb	r3, [r1, r3]
 8006a44:	fa22 f303 	lsr.w	r3, r2, r3
 8006a48:	4618      	mov	r0, r3
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	40023800 	.word	0x40023800
 8006a50:	0800f7d0 	.word	0x0800f7d0

08006a54 <HAL_RCC_GetPCLK2Freq>:
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	f7ff ffdc 	bl	8006a14 <HAL_RCC_GetHCLKFreq>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	0b5b      	lsrs	r3, r3, #13
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	4903      	ldr	r1, [pc, #12]	; (8006a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a6a:	5ccb      	ldrb	r3, [r1, r3]
 8006a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a70:	4618      	mov	r0, r3
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	40023800 	.word	0x40023800
 8006a78:	0800f7d0 	.word	0x0800f7d0

08006a7c <HAL_SPI_Init>:
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_SPI_Init+0x12>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e07b      	b.n	8006b86 <HAL_SPI_Init+0x10a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d108      	bne.n	8006aa8 <HAL_SPI_Init+0x2c>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a9e:	d009      	beq.n	8006ab4 <HAL_SPI_Init+0x38>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	61da      	str	r2, [r3, #28]
 8006aa6:	e005      	b.n	8006ab4 <HAL_SPI_Init+0x38>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	611a      	str	r2, [r3, #16]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	615a      	str	r2, [r3, #20]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	629a      	str	r2, [r3, #40]	; 0x28
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d106      	bne.n	8006ad4 <HAL_SPI_Init+0x58>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7fa ffb4 	bl	8001a3c <HAL_SPI_MspInit>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006afc:	431a      	orrs	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	431a      	orrs	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b38:	ea42 0103 	orr.w	r1, r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	0c1b      	lsrs	r3, r3, #16
 8006b52:	f003 0104 	and.w	r1, r3, #4
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	f003 0210 	and.w	r2, r3, #16
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69da      	ldr	r2, [r3, #28]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b74:	61da      	str	r2, [r3, #28]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	655a      	str	r2, [r3, #84]	; 0x54
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006b84:	2300      	movs	r3, #0
 8006b86:	4618      	mov	r0, r3
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_TIM_Base_Init>:
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <HAL_TIM_Base_Init+0x12>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e041      	b.n	8006c24 <HAL_TIM_Base_Init+0x96>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <HAL_TIM_Base_Init+0x2c>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7fa ff89 	bl	8001acc <HAL_TIM_Base_MspInit>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	3304      	adds	r3, #4
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4610      	mov	r0, r2
 8006bce:	f000 fd59 	bl	8007684 <TIM_Base_SetConfig>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c22:	2300      	movs	r3, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_TIM_Base_Start_IT>:
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d001      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x18>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e044      	b.n	8006cce <HAL_TIM_Base_Start_IT+0xa2>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	60da      	str	r2, [r3, #12]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a1e      	ldr	r2, [pc, #120]	; (8006cdc <HAL_TIM_Base_Start_IT+0xb0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d018      	beq.n	8006c98 <HAL_TIM_Base_Start_IT+0x6c>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6e:	d013      	beq.n	8006c98 <HAL_TIM_Base_Start_IT+0x6c>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a1a      	ldr	r2, [pc, #104]	; (8006ce0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00e      	beq.n	8006c98 <HAL_TIM_Base_Start_IT+0x6c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a19      	ldr	r2, [pc, #100]	; (8006ce4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d009      	beq.n	8006c98 <HAL_TIM_Base_Start_IT+0x6c>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a17      	ldr	r2, [pc, #92]	; (8006ce8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d004      	beq.n	8006c98 <HAL_TIM_Base_Start_IT+0x6c>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a16      	ldr	r2, [pc, #88]	; (8006cec <HAL_TIM_Base_Start_IT+0xc0>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d111      	bne.n	8006cbc <HAL_TIM_Base_Start_IT+0x90>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b06      	cmp	r3, #6
 8006ca8:	d010      	beq.n	8006ccc <HAL_TIM_Base_Start_IT+0xa0>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f042 0201 	orr.w	r2, r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	e007      	b.n	8006ccc <HAL_TIM_Base_Start_IT+0xa0>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	40010000 	.word	0x40010000
 8006ce0:	40000400 	.word	0x40000400
 8006ce4:	40000800 	.word	0x40000800
 8006ce8:	40000c00 	.word	0x40000c00
 8006cec:	40014000 	.word	0x40014000

08006cf0 <HAL_TIM_Base_Stop_IT>:
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0201 	bic.w	r2, r2, #1
 8006d06:	60da      	str	r2, [r3, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6a1a      	ldr	r2, [r3, #32]
 8006d0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d12:	4013      	ands	r3, r2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10f      	bne.n	8006d38 <HAL_TIM_Base_Stop_IT+0x48>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6a1a      	ldr	r2, [r3, #32]
 8006d1e:	f240 4344 	movw	r3, #1092	; 0x444
 8006d22:	4013      	ands	r3, r2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d107      	bne.n	8006d38 <HAL_TIM_Base_Stop_IT+0x48>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d40:	2300      	movs	r3, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <HAL_TIM_OC_Init>:
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b082      	sub	sp, #8
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <HAL_TIM_OC_Init+0x12>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e041      	b.n	8006de4 <HAL_TIM_OC_Init+0x96>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d106      	bne.n	8006d7a <HAL_TIM_OC_Init+0x2c>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7fa ff27 	bl	8001bc8 <HAL_TIM_OC_MspInit>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f000 fc79 	bl	8007684 <TIM_Base_SetConfig>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006de2:	2300      	movs	r3, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_TIM_PWM_Init>:
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_TIM_PWM_Init+0x12>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e041      	b.n	8006e82 <HAL_TIM_PWM_Init+0x96>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <HAL_TIM_PWM_Init+0x2c>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f839 	bl	8006e8a <HAL_TIM_PWM_MspInit>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f000 fc2a 	bl	8007684 <TIM_Base_SetConfig>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e80:	2300      	movs	r3, #0
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_TIM_PWM_MspInit>:
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
	...

08006ea0 <HAL_TIM_PWM_Start>:
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d109      	bne.n	8006ec4 <HAL_TIM_PWM_Start+0x24>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	bf14      	ite	ne
 8006ebc:	2301      	movne	r3, #1
 8006ebe:	2300      	moveq	r3, #0
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	e022      	b.n	8006f0a <HAL_TIM_PWM_Start+0x6a>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	d109      	bne.n	8006ede <HAL_TIM_PWM_Start+0x3e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	bf14      	ite	ne
 8006ed6:	2301      	movne	r3, #1
 8006ed8:	2300      	moveq	r3, #0
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	e015      	b.n	8006f0a <HAL_TIM_PWM_Start+0x6a>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d109      	bne.n	8006ef8 <HAL_TIM_PWM_Start+0x58>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	bf14      	ite	ne
 8006ef0:	2301      	movne	r3, #1
 8006ef2:	2300      	moveq	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	e008      	b.n	8006f0a <HAL_TIM_PWM_Start+0x6a>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	bf14      	ite	ne
 8006f04:	2301      	movne	r3, #1
 8006f06:	2300      	moveq	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <HAL_TIM_PWM_Start+0x72>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e068      	b.n	8006fe4 <HAL_TIM_PWM_Start+0x144>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_PWM_Start+0x82>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f20:	e013      	b.n	8006f4a <HAL_TIM_PWM_Start+0xaa>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_PWM_Start+0x92>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f30:	e00b      	b.n	8006f4a <HAL_TIM_PWM_Start+0xaa>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_PWM_Start+0xa2>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f40:	e003      	b.n	8006f4a <HAL_TIM_PWM_Start+0xaa>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 ff1b 	bl	8007d8e <TIM_CCxChannelCmd>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a23      	ldr	r2, [pc, #140]	; (8006fec <HAL_TIM_PWM_Start+0x14c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d107      	bne.n	8006f72 <HAL_TIM_PWM_Start+0xd2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f70:	645a      	str	r2, [r3, #68]	; 0x44
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1d      	ldr	r2, [pc, #116]	; (8006fec <HAL_TIM_PWM_Start+0x14c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d018      	beq.n	8006fae <HAL_TIM_PWM_Start+0x10e>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f84:	d013      	beq.n	8006fae <HAL_TIM_PWM_Start+0x10e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a19      	ldr	r2, [pc, #100]	; (8006ff0 <HAL_TIM_PWM_Start+0x150>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00e      	beq.n	8006fae <HAL_TIM_PWM_Start+0x10e>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a17      	ldr	r2, [pc, #92]	; (8006ff4 <HAL_TIM_PWM_Start+0x154>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d009      	beq.n	8006fae <HAL_TIM_PWM_Start+0x10e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a16      	ldr	r2, [pc, #88]	; (8006ff8 <HAL_TIM_PWM_Start+0x158>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d004      	beq.n	8006fae <HAL_TIM_PWM_Start+0x10e>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a14      	ldr	r2, [pc, #80]	; (8006ffc <HAL_TIM_PWM_Start+0x15c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d111      	bne.n	8006fd2 <HAL_TIM_PWM_Start+0x132>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f003 0307 	and.w	r3, r3, #7
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b06      	cmp	r3, #6
 8006fbe:	d010      	beq.n	8006fe2 <HAL_TIM_PWM_Start+0x142>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0201 	orr.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	e007      	b.n	8006fe2 <HAL_TIM_PWM_Start+0x142>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0201 	orr.w	r2, r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	40010000 	.word	0x40010000
 8006ff0:	40000400 	.word	0x40000400
 8006ff4:	40000800 	.word	0x40000800
 8006ff8:	40000c00 	.word	0x40000c00
 8006ffc:	40014000 	.word	0x40014000

08007000 <HAL_TIM_PWM_Stop>:
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2200      	movs	r2, #0
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	4618      	mov	r0, r3
 8007014:	f000 febb 	bl	8007d8e <TIM_CCxChannelCmd>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a29      	ldr	r2, [pc, #164]	; (80070c4 <HAL_TIM_PWM_Stop+0xc4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d117      	bne.n	8007052 <HAL_TIM_PWM_Stop+0x52>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6a1a      	ldr	r2, [r3, #32]
 8007028:	f241 1311 	movw	r3, #4369	; 0x1111
 800702c:	4013      	ands	r3, r2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10f      	bne.n	8007052 <HAL_TIM_PWM_Stop+0x52>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6a1a      	ldr	r2, [r3, #32]
 8007038:	f240 4344 	movw	r3, #1092	; 0x444
 800703c:	4013      	ands	r3, r2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d107      	bne.n	8007052 <HAL_TIM_PWM_Stop+0x52>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007050:	645a      	str	r2, [r3, #68]	; 0x44
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6a1a      	ldr	r2, [r3, #32]
 8007058:	f241 1311 	movw	r3, #4369	; 0x1111
 800705c:	4013      	ands	r3, r2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10f      	bne.n	8007082 <HAL_TIM_PWM_Stop+0x82>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6a1a      	ldr	r2, [r3, #32]
 8007068:	f240 4344 	movw	r3, #1092	; 0x444
 800706c:	4013      	ands	r3, r2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d107      	bne.n	8007082 <HAL_TIM_PWM_Stop+0x82>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0201 	bic.w	r2, r2, #1
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d104      	bne.n	8007092 <HAL_TIM_PWM_Stop+0x92>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007090:	e013      	b.n	80070ba <HAL_TIM_PWM_Stop+0xba>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b04      	cmp	r3, #4
 8007096:	d104      	bne.n	80070a2 <HAL_TIM_PWM_Stop+0xa2>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a0:	e00b      	b.n	80070ba <HAL_TIM_PWM_Stop+0xba>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d104      	bne.n	80070b2 <HAL_TIM_PWM_Stop+0xb2>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070b0:	e003      	b.n	80070ba <HAL_TIM_PWM_Stop+0xba>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070ba:	2300      	movs	r3, #0
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	40010000 	.word	0x40010000

080070c8 <HAL_TIM_IRQHandler>:
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d122      	bne.n	8007124 <HAL_TIM_IRQHandler+0x5c>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d11b      	bne.n	8007124 <HAL_TIM_IRQHandler+0x5c>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0202 	mvn.w	r2, #2
 80070f4:	611a      	str	r2, [r3, #16]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	771a      	strb	r2, [r3, #28]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_TIM_IRQHandler+0x4a>
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fa9c 	bl	8007648 <HAL_TIM_IC_CaptureCallback>
 8007110:	e005      	b.n	800711e <HAL_TIM_IRQHandler+0x56>
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa8e 	bl	8007634 <HAL_TIM_OC_DelayElapsedCallback>
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fa9f 	bl	800765c <HAL_TIM_PWM_PulseFinishedCallback>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	771a      	strb	r2, [r3, #28]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b04      	cmp	r3, #4
 8007130:	d122      	bne.n	8007178 <HAL_TIM_IRQHandler+0xb0>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b04      	cmp	r3, #4
 800713e:	d11b      	bne.n	8007178 <HAL_TIM_IRQHandler+0xb0>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f06f 0204 	mvn.w	r2, #4
 8007148:	611a      	str	r2, [r3, #16]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2202      	movs	r2, #2
 800714e:	771a      	strb	r2, [r3, #28]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_TIM_IRQHandler+0x9e>
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fa72 	bl	8007648 <HAL_TIM_IC_CaptureCallback>
 8007164:	e005      	b.n	8007172 <HAL_TIM_IRQHandler+0xaa>
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fa64 	bl	8007634 <HAL_TIM_OC_DelayElapsedCallback>
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fa75 	bl	800765c <HAL_TIM_PWM_PulseFinishedCallback>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	771a      	strb	r2, [r3, #28]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 0308 	and.w	r3, r3, #8
 8007182:	2b08      	cmp	r3, #8
 8007184:	d122      	bne.n	80071cc <HAL_TIM_IRQHandler+0x104>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b08      	cmp	r3, #8
 8007192:	d11b      	bne.n	80071cc <HAL_TIM_IRQHandler+0x104>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f06f 0208 	mvn.w	r2, #8
 800719c:	611a      	str	r2, [r3, #16]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2204      	movs	r2, #4
 80071a2:	771a      	strb	r2, [r3, #28]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <HAL_TIM_IRQHandler+0xf2>
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fa48 	bl	8007648 <HAL_TIM_IC_CaptureCallback>
 80071b8:	e005      	b.n	80071c6 <HAL_TIM_IRQHandler+0xfe>
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fa3a 	bl	8007634 <HAL_TIM_OC_DelayElapsedCallback>
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fa4b 	bl	800765c <HAL_TIM_PWM_PulseFinishedCallback>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	771a      	strb	r2, [r3, #28]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0310 	and.w	r3, r3, #16
 80071d6:	2b10      	cmp	r3, #16
 80071d8:	d122      	bne.n	8007220 <HAL_TIM_IRQHandler+0x158>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0310 	and.w	r3, r3, #16
 80071e4:	2b10      	cmp	r3, #16
 80071e6:	d11b      	bne.n	8007220 <HAL_TIM_IRQHandler+0x158>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0210 	mvn.w	r2, #16
 80071f0:	611a      	str	r2, [r3, #16]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2208      	movs	r2, #8
 80071f6:	771a      	strb	r2, [r3, #28]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_TIM_IRQHandler+0x146>
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa1e 	bl	8007648 <HAL_TIM_IC_CaptureCallback>
 800720c:	e005      	b.n	800721a <HAL_TIM_IRQHandler+0x152>
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa10 	bl	8007634 <HAL_TIM_OC_DelayElapsedCallback>
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fa21 	bl	800765c <HAL_TIM_PWM_PulseFinishedCallback>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	771a      	strb	r2, [r3, #28]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b01      	cmp	r3, #1
 800722c:	d10e      	bne.n	800724c <HAL_TIM_IRQHandler+0x184>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b01      	cmp	r3, #1
 800723a:	d107      	bne.n	800724c <HAL_TIM_IRQHandler+0x184>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0201 	mvn.w	r2, #1
 8007244:	611a      	str	r2, [r3, #16]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f9ea 	bl	8007620 <HAL_TIM_PeriodElapsedCallback>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007256:	2b80      	cmp	r3, #128	; 0x80
 8007258:	d10e      	bne.n	8007278 <HAL_TIM_IRQHandler+0x1b0>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007264:	2b80      	cmp	r3, #128	; 0x80
 8007266:	d107      	bne.n	8007278 <HAL_TIM_IRQHandler+0x1b0>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007270:	611a      	str	r2, [r3, #16]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 ffdc 	bl	8008230 <HAL_TIMEx_BreakCallback>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007282:	2b40      	cmp	r3, #64	; 0x40
 8007284:	d10e      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x1dc>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007290:	2b40      	cmp	r3, #64	; 0x40
 8007292:	d107      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x1dc>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800729c:	611a      	str	r2, [r3, #16]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f9e6 	bl	8007670 <HAL_TIM_TriggerCallback>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d10e      	bne.n	80072d0 <HAL_TIM_IRQHandler+0x208>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f003 0320 	and.w	r3, r3, #32
 80072bc:	2b20      	cmp	r3, #32
 80072be:	d107      	bne.n	80072d0 <HAL_TIM_IRQHandler+0x208>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0220 	mvn.w	r2, #32
 80072c8:	611a      	str	r2, [r3, #16]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 ffa6 	bl	800821c <HAL_TIMEx_CommutCallback>
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_TIM_OC_ConfigChannel>:
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	2300      	movs	r3, #0
 80072e6:	75fb      	strb	r3, [r7, #23]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d101      	bne.n	80072f6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80072f2:	2302      	movs	r3, #2
 80072f4:	e048      	b.n	8007388 <HAL_TIM_OC_ConfigChannel+0xb0>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b0c      	cmp	r3, #12
 8007302:	d839      	bhi.n	8007378 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007304:	a201      	add	r2, pc, #4	; (adr r2, 800730c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	08007341 	.word	0x08007341
 8007310:	08007379 	.word	0x08007379
 8007314:	08007379 	.word	0x08007379
 8007318:	08007379 	.word	0x08007379
 800731c:	0800734f 	.word	0x0800734f
 8007320:	08007379 	.word	0x08007379
 8007324:	08007379 	.word	0x08007379
 8007328:	08007379 	.word	0x08007379
 800732c:	0800735d 	.word	0x0800735d
 8007330:	08007379 	.word	0x08007379
 8007334:	08007379 	.word	0x08007379
 8007338:	08007379 	.word	0x08007379
 800733c:	0800736b 	.word	0x0800736b
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68b9      	ldr	r1, [r7, #8]
 8007346:	4618      	mov	r0, r3
 8007348:	f000 fa1c 	bl	8007784 <TIM_OC1_SetConfig>
 800734c:	e017      	b.n	800737e <HAL_TIM_OC_ConfigChannel+0xa6>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fa7b 	bl	8007850 <TIM_OC2_SetConfig>
 800735a:	e010      	b.n	800737e <HAL_TIM_OC_ConfigChannel+0xa6>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68b9      	ldr	r1, [r7, #8]
 8007362:	4618      	mov	r0, r3
 8007364:	f000 fae0 	bl	8007928 <TIM_OC3_SetConfig>
 8007368:	e009      	b.n	800737e <HAL_TIM_OC_ConfigChannel+0xa6>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	4618      	mov	r0, r3
 8007372:	f000 fb43 	bl	80079fc <TIM_OC4_SetConfig>
 8007376:	e002      	b.n	800737e <HAL_TIM_OC_ConfigChannel+0xa6>
 8007378:	2301      	movs	r3, #1
 800737a:	75fb      	strb	r3, [r7, #23]
 800737c:	bf00      	nop
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HAL_TIM_PWM_ConfigChannel>:
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	2300      	movs	r3, #0
 800739e:	75fb      	strb	r3, [r7, #23]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d101      	bne.n	80073ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073aa:	2302      	movs	r3, #2
 80073ac:	e0ae      	b.n	800750c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b0c      	cmp	r3, #12
 80073ba:	f200 809f 	bhi.w	80074fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80073be:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	080073f9 	.word	0x080073f9
 80073c8:	080074fd 	.word	0x080074fd
 80073cc:	080074fd 	.word	0x080074fd
 80073d0:	080074fd 	.word	0x080074fd
 80073d4:	08007439 	.word	0x08007439
 80073d8:	080074fd 	.word	0x080074fd
 80073dc:	080074fd 	.word	0x080074fd
 80073e0:	080074fd 	.word	0x080074fd
 80073e4:	0800747b 	.word	0x0800747b
 80073e8:	080074fd 	.word	0x080074fd
 80073ec:	080074fd 	.word	0x080074fd
 80073f0:	080074fd 	.word	0x080074fd
 80073f4:	080074bb 	.word	0x080074bb
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68b9      	ldr	r1, [r7, #8]
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 f9c0 	bl	8007784 <TIM_OC1_SetConfig>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0208 	orr.w	r2, r2, #8
 8007412:	619a      	str	r2, [r3, #24]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0204 	bic.w	r2, r2, #4
 8007422:	619a      	str	r2, [r3, #24]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6999      	ldr	r1, [r3, #24]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	691a      	ldr	r2, [r3, #16]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	619a      	str	r2, [r3, #24]
 8007436:	e064      	b.n	8007502 <HAL_TIM_PWM_ConfigChannel+0x172>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fa06 	bl	8007850 <TIM_OC2_SetConfig>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699a      	ldr	r2, [r3, #24]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007452:	619a      	str	r2, [r3, #24]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007462:	619a      	str	r2, [r3, #24]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6999      	ldr	r1, [r3, #24]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	021a      	lsls	r2, r3, #8
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	619a      	str	r2, [r3, #24]
 8007478:	e043      	b.n	8007502 <HAL_TIM_PWM_ConfigChannel+0x172>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fa51 	bl	8007928 <TIM_OC3_SetConfig>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69da      	ldr	r2, [r3, #28]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f042 0208 	orr.w	r2, r2, #8
 8007494:	61da      	str	r2, [r3, #28]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69da      	ldr	r2, [r3, #28]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0204 	bic.w	r2, r2, #4
 80074a4:	61da      	str	r2, [r3, #28]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69d9      	ldr	r1, [r3, #28]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	61da      	str	r2, [r3, #28]
 80074b8:	e023      	b.n	8007502 <HAL_TIM_PWM_ConfigChannel+0x172>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68b9      	ldr	r1, [r7, #8]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fa9b 	bl	80079fc <TIM_OC4_SetConfig>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69da      	ldr	r2, [r3, #28]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074d4:	61da      	str	r2, [r3, #28]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69da      	ldr	r2, [r3, #28]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074e4:	61da      	str	r2, [r3, #28]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69d9      	ldr	r1, [r3, #28]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	021a      	lsls	r2, r3, #8
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	61da      	str	r2, [r3, #28]
 80074fa:	e002      	b.n	8007502 <HAL_TIM_PWM_ConfigChannel+0x172>
 80074fc:	2301      	movs	r3, #1
 80074fe:	75fb      	strb	r3, [r7, #23]
 8007500:	bf00      	nop
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	4618      	mov	r0, r3
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_TIM_SlaveConfigSynchro>:
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007524:	2b01      	cmp	r3, #1
 8007526:	d101      	bne.n	800752c <HAL_TIM_SlaveConfigSynchro+0x18>
 8007528:	2302      	movs	r3, #2
 800752a:	e031      	b.n	8007590 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 faac 	bl	8007a9c <TIM_SlaveTimer_SetConfig>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d009      	beq.n	800755e <HAL_TIM_SlaveConfigSynchro+0x4a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800755a:	2301      	movs	r3, #1
 800755c:	e018      	b.n	8007590 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800756c:	60da      	str	r2, [r3, #12]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800757c:	60da      	str	r2, [r3, #12]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800758e:	2300      	movs	r3, #0
 8007590:	4618      	mov	r0, r3
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_TIM_ReadCapturedValue>:
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b0c      	cmp	r3, #12
 80075aa:	d831      	bhi.n	8007610 <HAL_TIM_ReadCapturedValue+0x78>
 80075ac:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	080075e9 	.word	0x080075e9
 80075b8:	08007611 	.word	0x08007611
 80075bc:	08007611 	.word	0x08007611
 80075c0:	08007611 	.word	0x08007611
 80075c4:	080075f3 	.word	0x080075f3
 80075c8:	08007611 	.word	0x08007611
 80075cc:	08007611 	.word	0x08007611
 80075d0:	08007611 	.word	0x08007611
 80075d4:	080075fd 	.word	0x080075fd
 80075d8:	08007611 	.word	0x08007611
 80075dc:	08007611 	.word	0x08007611
 80075e0:	08007611 	.word	0x08007611
 80075e4:	08007607 	.word	0x08007607
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	e00f      	b.n	8007612 <HAL_TIM_ReadCapturedValue+0x7a>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	e00a      	b.n	8007612 <HAL_TIM_ReadCapturedValue+0x7a>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	e005      	b.n	8007612 <HAL_TIM_ReadCapturedValue+0x7a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	e000      	b.n	8007612 <HAL_TIM_ReadCapturedValue+0x7a>
 8007610:	bf00      	nop
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	4618      	mov	r0, r3
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_TIM_PeriodElapsedCallback>:
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_TIM_OC_DelayElapsedCallback>:
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_TIM_IC_CaptureCallback>:
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_TIM_PWM_PulseFinishedCallback>:
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_TIM_TriggerCallback>:
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <TIM_Base_SetConfig>:
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a34      	ldr	r2, [pc, #208]	; (8007768 <TIM_Base_SetConfig+0xe4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00f      	beq.n	80076bc <TIM_Base_SetConfig+0x38>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a2:	d00b      	beq.n	80076bc <TIM_Base_SetConfig+0x38>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a31      	ldr	r2, [pc, #196]	; (800776c <TIM_Base_SetConfig+0xe8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d007      	beq.n	80076bc <TIM_Base_SetConfig+0x38>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a30      	ldr	r2, [pc, #192]	; (8007770 <TIM_Base_SetConfig+0xec>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d003      	beq.n	80076bc <TIM_Base_SetConfig+0x38>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a2f      	ldr	r2, [pc, #188]	; (8007774 <TIM_Base_SetConfig+0xf0>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d108      	bne.n	80076ce <TIM_Base_SetConfig+0x4a>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a25      	ldr	r2, [pc, #148]	; (8007768 <TIM_Base_SetConfig+0xe4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d01b      	beq.n	800770e <TIM_Base_SetConfig+0x8a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076dc:	d017      	beq.n	800770e <TIM_Base_SetConfig+0x8a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a22      	ldr	r2, [pc, #136]	; (800776c <TIM_Base_SetConfig+0xe8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d013      	beq.n	800770e <TIM_Base_SetConfig+0x8a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a21      	ldr	r2, [pc, #132]	; (8007770 <TIM_Base_SetConfig+0xec>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00f      	beq.n	800770e <TIM_Base_SetConfig+0x8a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a20      	ldr	r2, [pc, #128]	; (8007774 <TIM_Base_SetConfig+0xf0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00b      	beq.n	800770e <TIM_Base_SetConfig+0x8a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a1f      	ldr	r2, [pc, #124]	; (8007778 <TIM_Base_SetConfig+0xf4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d007      	beq.n	800770e <TIM_Base_SetConfig+0x8a>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a1e      	ldr	r2, [pc, #120]	; (800777c <TIM_Base_SetConfig+0xf8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d003      	beq.n	800770e <TIM_Base_SetConfig+0x8a>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a1d      	ldr	r2, [pc, #116]	; (8007780 <TIM_Base_SetConfig+0xfc>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d108      	bne.n	8007720 <TIM_Base_SetConfig+0x9c>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	4313      	orrs	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	62da      	str	r2, [r3, #44]	; 0x2c
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	629a      	str	r2, [r3, #40]	; 0x28
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a08      	ldr	r2, [pc, #32]	; (8007768 <TIM_Base_SetConfig+0xe4>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d103      	bne.n	8007754 <TIM_Base_SetConfig+0xd0>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	631a      	str	r2, [r3, #48]	; 0x30
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	615a      	str	r2, [r3, #20]
 800775a:	bf00      	nop
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40010000 	.word	0x40010000
 800776c:	40000400 	.word	0x40000400
 8007770:	40000800 	.word	0x40000800
 8007774:	40000c00 	.word	0x40000c00
 8007778:	40014000 	.word	0x40014000
 800777c:	40014400 	.word	0x40014400
 8007780:	40014800 	.word	0x40014800

08007784 <TIM_OC1_SetConfig>:
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	f023 0201 	bic.w	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	621a      	str	r2, [r3, #32]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	617b      	str	r3, [r7, #20]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0303 	bic.w	r3, r3, #3
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f023 0302 	bic.w	r3, r3, #2
 80077cc:	617b      	str	r3, [r7, #20]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a1c      	ldr	r2, [pc, #112]	; (800784c <TIM_OC1_SetConfig+0xc8>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d10c      	bne.n	80077fa <TIM_OC1_SetConfig+0x76>
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f023 0308 	bic.w	r3, r3, #8
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	617b      	str	r3, [r7, #20]
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f023 0304 	bic.w	r3, r3, #4
 80077f8:	617b      	str	r3, [r7, #20]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a13      	ldr	r2, [pc, #76]	; (800784c <TIM_OC1_SetConfig+0xc8>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d111      	bne.n	8007826 <TIM_OC1_SetConfig+0xa2>
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	4313      	orrs	r3, r2
 800781a:	613b      	str	r3, [r7, #16]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	4313      	orrs	r3, r2
 8007824:	613b      	str	r3, [r7, #16]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	605a      	str	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	619a      	str	r2, [r3, #24]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	635a      	str	r2, [r3, #52]	; 0x34
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	621a      	str	r2, [r3, #32]
 8007840:	bf00      	nop
 8007842:	371c      	adds	r7, #28
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	40010000 	.word	0x40010000

08007850 <TIM_OC2_SetConfig>:
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f023 0210 	bic.w	r2, r3, #16
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	621a      	str	r2, [r3, #32]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	613b      	str	r3, [r7, #16]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	021b      	lsls	r3, r3, #8
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	4313      	orrs	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f023 0320 	bic.w	r3, r3, #32
 800789a:	617b      	str	r3, [r7, #20]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a1e      	ldr	r2, [pc, #120]	; (8007924 <TIM_OC2_SetConfig+0xd4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d10d      	bne.n	80078cc <TIM_OC2_SetConfig+0x7c>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	011b      	lsls	r3, r3, #4
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a15      	ldr	r2, [pc, #84]	; (8007924 <TIM_OC2_SetConfig+0xd4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d113      	bne.n	80078fc <TIM_OC2_SetConfig+0xac>
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078e2:	613b      	str	r3, [r7, #16]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	613b      	str	r3, [r7, #16]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	605a      	str	r2, [r3, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	619a      	str	r2, [r3, #24]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	639a      	str	r2, [r3, #56]	; 0x38
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	621a      	str	r2, [r3, #32]
 8007916:	bf00      	nop
 8007918:	371c      	adds	r7, #28
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40010000 	.word	0x40010000

08007928 <TIM_OC3_SetConfig>:
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	621a      	str	r2, [r3, #32]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	613b      	str	r3, [r7, #16]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0303 	bic.w	r3, r3, #3
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007970:	617b      	str	r3, [r7, #20]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	021b      	lsls	r3, r3, #8
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	4313      	orrs	r3, r2
 800797c:	617b      	str	r3, [r7, #20]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a1d      	ldr	r2, [pc, #116]	; (80079f8 <TIM_OC3_SetConfig+0xd0>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d10d      	bne.n	80079a2 <TIM_OC3_SetConfig+0x7a>
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	021b      	lsls	r3, r3, #8
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	4313      	orrs	r3, r2
 8007998:	617b      	str	r3, [r7, #20]
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079a0:	617b      	str	r3, [r7, #20]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a14      	ldr	r2, [pc, #80]	; (80079f8 <TIM_OC3_SetConfig+0xd0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d113      	bne.n	80079d2 <TIM_OC3_SetConfig+0xaa>
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079b0:	613b      	str	r3, [r7, #16]
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	011b      	lsls	r3, r3, #4
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	613b      	str	r3, [r7, #16]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	613b      	str	r3, [r7, #16]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	605a      	str	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	61da      	str	r2, [r3, #28]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	621a      	str	r2, [r3, #32]
 80079ec:	bf00      	nop
 80079ee:	371c      	adds	r7, #28
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	40010000 	.word	0x40010000

080079fc <TIM_OC4_SetConfig>:
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	621a      	str	r2, [r3, #32]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	021b      	lsls	r3, r3, #8
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a46:	613b      	str	r3, [r7, #16]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	031b      	lsls	r3, r3, #12
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a10      	ldr	r2, [pc, #64]	; (8007a98 <TIM_OC4_SetConfig+0x9c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d109      	bne.n	8007a70 <TIM_OC4_SetConfig+0x74>
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	019b      	lsls	r3, r3, #6
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	605a      	str	r2, [r3, #4]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	61da      	str	r2, [r3, #28]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	641a      	str	r2, [r3, #64]	; 0x40
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	621a      	str	r2, [r3, #32]
 8007a8a:	bf00      	nop
 8007a8c:	371c      	adds	r7, #28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	40010000 	.word	0x40010000

08007a9c <TIM_SlaveTimer_SetConfig>:
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	75fb      	strb	r3, [r7, #23]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	613b      	str	r3, [r7, #16]
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab8:	613b      	str	r3, [r7, #16]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	613b      	str	r3, [r7, #16]
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f023 0307 	bic.w	r3, r3, #7
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	613b      	str	r3, [r7, #16]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	609a      	str	r2, [r3, #8]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2b70      	cmp	r3, #112	; 0x70
 8007ae4:	d01a      	beq.n	8007b1c <TIM_SlaveTimer_SetConfig+0x80>
 8007ae6:	2b70      	cmp	r3, #112	; 0x70
 8007ae8:	d860      	bhi.n	8007bac <TIM_SlaveTimer_SetConfig+0x110>
 8007aea:	2b60      	cmp	r3, #96	; 0x60
 8007aec:	d054      	beq.n	8007b98 <TIM_SlaveTimer_SetConfig+0xfc>
 8007aee:	2b60      	cmp	r3, #96	; 0x60
 8007af0:	d85c      	bhi.n	8007bac <TIM_SlaveTimer_SetConfig+0x110>
 8007af2:	2b50      	cmp	r3, #80	; 0x50
 8007af4:	d046      	beq.n	8007b84 <TIM_SlaveTimer_SetConfig+0xe8>
 8007af6:	2b50      	cmp	r3, #80	; 0x50
 8007af8:	d858      	bhi.n	8007bac <TIM_SlaveTimer_SetConfig+0x110>
 8007afa:	2b40      	cmp	r3, #64	; 0x40
 8007afc:	d019      	beq.n	8007b32 <TIM_SlaveTimer_SetConfig+0x96>
 8007afe:	2b40      	cmp	r3, #64	; 0x40
 8007b00:	d854      	bhi.n	8007bac <TIM_SlaveTimer_SetConfig+0x110>
 8007b02:	2b30      	cmp	r3, #48	; 0x30
 8007b04:	d055      	beq.n	8007bb2 <TIM_SlaveTimer_SetConfig+0x116>
 8007b06:	2b30      	cmp	r3, #48	; 0x30
 8007b08:	d850      	bhi.n	8007bac <TIM_SlaveTimer_SetConfig+0x110>
 8007b0a:	2b20      	cmp	r3, #32
 8007b0c:	d051      	beq.n	8007bb2 <TIM_SlaveTimer_SetConfig+0x116>
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	d84c      	bhi.n	8007bac <TIM_SlaveTimer_SetConfig+0x110>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d04d      	beq.n	8007bb2 <TIM_SlaveTimer_SetConfig+0x116>
 8007b16:	2b10      	cmp	r3, #16
 8007b18:	d04b      	beq.n	8007bb2 <TIM_SlaveTimer_SetConfig+0x116>
 8007b1a:	e047      	b.n	8007bac <TIM_SlaveTimer_SetConfig+0x110>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	68d9      	ldr	r1, [r3, #12]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	689a      	ldr	r2, [r3, #8]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	f000 f90f 	bl	8007d4e <TIM_ETR_SetConfig>
 8007b30:	e040      	b.n	8007bb4 <TIM_SlaveTimer_SetConfig+0x118>
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b05      	cmp	r3, #5
 8007b38:	d101      	bne.n	8007b3e <TIM_SlaveTimer_SetConfig+0xa2>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e03b      	b.n	8007bb6 <TIM_SlaveTimer_SetConfig+0x11a>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0201 	bic.w	r2, r2, #1
 8007b54:	621a      	str	r2, [r3, #32]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	60bb      	str	r3, [r7, #8]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b64:	60bb      	str	r3, [r7, #8]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60bb      	str	r3, [r7, #8]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	619a      	str	r2, [r3, #24]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	621a      	str	r2, [r3, #32]
 8007b82:	e017      	b.n	8007bb4 <TIM_SlaveTimer_SetConfig+0x118>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6818      	ldr	r0, [r3, #0]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	6899      	ldr	r1, [r3, #8]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	461a      	mov	r2, r3
 8007b92:	f000 f87d 	bl	8007c90 <TIM_TI1_ConfigInputStage>
 8007b96:	e00d      	b.n	8007bb4 <TIM_SlaveTimer_SetConfig+0x118>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	6899      	ldr	r1, [r3, #8]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	f000 f8a2 	bl	8007cee <TIM_TI2_ConfigInputStage>
 8007baa:	e003      	b.n	8007bb4 <TIM_SlaveTimer_SetConfig+0x118>
 8007bac:	2301      	movs	r3, #1
 8007bae:	75fb      	strb	r3, [r7, #23]
 8007bb0:	e000      	b.n	8007bb4 <TIM_SlaveTimer_SetConfig+0x118>
 8007bb2:	bf00      	nop
 8007bb4:	7dfb      	ldrb	r3, [r7, #23]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <TIM_TI1_SetConfig>:
 8007bc0:	b480      	push	{r7}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	f023 0201 	bic.w	r2, r3, #1
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	621a      	str	r2, [r3, #32]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	617b      	str	r3, [r7, #20]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	613b      	str	r3, [r7, #16]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4a24      	ldr	r2, [pc, #144]	; (8007c7c <TIM_TI1_SetConfig+0xbc>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d013      	beq.n	8007c16 <TIM_TI1_SetConfig+0x56>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf4:	d00f      	beq.n	8007c16 <TIM_TI1_SetConfig+0x56>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4a21      	ldr	r2, [pc, #132]	; (8007c80 <TIM_TI1_SetConfig+0xc0>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d00b      	beq.n	8007c16 <TIM_TI1_SetConfig+0x56>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4a20      	ldr	r2, [pc, #128]	; (8007c84 <TIM_TI1_SetConfig+0xc4>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d007      	beq.n	8007c16 <TIM_TI1_SetConfig+0x56>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4a1f      	ldr	r2, [pc, #124]	; (8007c88 <TIM_TI1_SetConfig+0xc8>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d003      	beq.n	8007c16 <TIM_TI1_SetConfig+0x56>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4a1e      	ldr	r2, [pc, #120]	; (8007c8c <TIM_TI1_SetConfig+0xcc>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d101      	bne.n	8007c1a <TIM_TI1_SetConfig+0x5a>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <TIM_TI1_SetConfig+0x5c>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d008      	beq.n	8007c32 <TIM_TI1_SetConfig+0x72>
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f023 0303 	bic.w	r3, r3, #3
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]
 8007c30:	e003      	b.n	8007c3a <TIM_TI1_SetConfig+0x7a>
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f043 0301 	orr.w	r3, r3, #1
 8007c38:	617b      	str	r3, [r7, #20]
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c40:	617b      	str	r3, [r7, #20]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	011b      	lsls	r3, r3, #4
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f023 030a 	bic.w	r3, r3, #10
 8007c54:	613b      	str	r3, [r7, #16]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f003 030a 	and.w	r3, r3, #10
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	619a      	str	r2, [r3, #24]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	621a      	str	r2, [r3, #32]
 8007c6e:	bf00      	nop
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40010000 	.word	0x40010000
 8007c80:	40000400 	.word	0x40000400
 8007c84:	40000800 	.word	0x40000800
 8007c88:	40000c00 	.word	0x40000c00
 8007c8c:	40014000 	.word	0x40014000

08007c90 <TIM_TI1_ConfigInputStage>:
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	617b      	str	r3, [r7, #20]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	f023 0201 	bic.w	r2, r3, #1
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	621a      	str	r2, [r3, #32]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	613b      	str	r3, [r7, #16]
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cba:	613b      	str	r3, [r7, #16]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	011b      	lsls	r3, r3, #4
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	613b      	str	r3, [r7, #16]
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f023 030a 	bic.w	r3, r3, #10
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	619a      	str	r2, [r3, #24]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	621a      	str	r2, [r3, #32]
 8007ce2:	bf00      	nop
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <TIM_TI2_ConfigInputStage>:
 8007cee:	b480      	push	{r7}
 8007cf0:	b087      	sub	sp, #28
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607a      	str	r2, [r7, #4]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f023 0210 	bic.w	r2, r3, #16
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	621a      	str	r2, [r3, #32]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	613b      	str	r3, [r7, #16]
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	031b      	lsls	r3, r3, #12
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d2a:	613b      	str	r3, [r7, #16]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	613b      	str	r3, [r7, #16]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	619a      	str	r2, [r3, #24]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	621a      	str	r2, [r3, #32]
 8007d42:	bf00      	nop
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <TIM_ETR_SetConfig>:
 8007d4e:	b480      	push	{r7}
 8007d50:	b087      	sub	sp, #28
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	021a      	lsls	r2, r3, #8
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	431a      	orrs	r2, r3
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	609a      	str	r2, [r3, #8]
 8007d82:	bf00      	nop
 8007d84:	371c      	adds	r7, #28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <TIM_CCxChannelCmd>:
 8007d8e:	b480      	push	{r7}
 8007d90:	b087      	sub	sp, #28
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	607a      	str	r2, [r7, #4]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f003 031f 	and.w	r3, r3, #31
 8007da0:	2201      	movs	r2, #1
 8007da2:	fa02 f303 	lsl.w	r3, r2, r3
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a1a      	ldr	r2, [r3, #32]
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	43db      	mvns	r3, r3
 8007db0:	401a      	ands	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	621a      	str	r2, [r3, #32]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6a1a      	ldr	r2, [r3, #32]
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f003 031f 	and.w	r3, r3, #31
 8007dc0:	6879      	ldr	r1, [r7, #4]
 8007dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	621a      	str	r2, [r3, #32]
 8007dcc:	bf00      	nop
 8007dce:	371c      	adds	r7, #28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_TIMEx_HallSensor_Init>:
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08a      	sub	sp, #40	; 0x28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <HAL_TIMEx_HallSensor_Init+0x14>
 8007de8:	2301      	movs	r3, #1
 8007dea:	e09a      	b.n	8007f22 <HAL_TIMEx_HallSensor_Init+0x14a>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d106      	bne.n	8007e06 <HAL_TIMEx_HallSensor_Init+0x2e>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7f9 fe93 	bl	8001b2c <HAL_TIMEx_HallSensor_MspInit>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2202      	movs	r2, #2
 8007e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3304      	adds	r3, #4
 8007e16:	4619      	mov	r1, r3
 8007e18:	4610      	mov	r0, r2
 8007e1a:	f7ff fc33 	bl	8007684 <TIM_Base_SetConfig>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	6819      	ldr	r1, [r3, #0]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	2203      	movs	r2, #3
 8007e2c:	f7ff fec8 	bl	8007bc0 <TIM_TI1_SetConfig>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699a      	ldr	r2, [r3, #24]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 020c 	bic.w	r2, r2, #12
 8007e3e:	619a      	str	r2, [r3, #24]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6999      	ldr	r1, [r3, #24]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	619a      	str	r2, [r3, #24]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e60:	605a      	str	r2, [r3, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007e70:	609a      	str	r2, [r3, #8]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e80:	609a      	str	r2, [r3, #8]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 0207 	bic.w	r2, r2, #7
 8007e90:	609a      	str	r2, [r3, #8]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0204 	orr.w	r2, r2, #4
 8007ea0:	609a      	str	r2, [r3, #8]
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	623b      	str	r3, [r7, #32]
 8007eaa:	2370      	movs	r3, #112	; 0x70
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	61bb      	str	r3, [r7, #24]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	617b      	str	r3, [r7, #20]
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	613b      	str	r3, [r7, #16]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f107 020c 	add.w	r2, r7, #12
 8007ec8:	4611      	mov	r1, r2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7ff fcc0 	bl	8007850 <TIM_OC2_SetConfig>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007ede:	605a      	str	r2, [r3, #4]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8007eee:	605a      	str	r2, [r3, #4]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f20:	2300      	movs	r3, #0
 8007f22:	4618      	mov	r0, r3
 8007f24:	3728      	adds	r7, #40	; 0x28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <HAL_TIMEx_HallSensor_Start>:
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f3a:	73fb      	strb	r3, [r7, #15]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f42:	73bb      	strb	r3, [r7, #14]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f4a:	737b      	strb	r3, [r7, #13]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f52:	733b      	strb	r3, [r7, #12]
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d108      	bne.n	8007f6c <HAL_TIMEx_HallSensor_Start+0x40>
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d105      	bne.n	8007f6c <HAL_TIMEx_HallSensor_Start+0x40>
 8007f60:	7b7b      	ldrb	r3, [r7, #13]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d102      	bne.n	8007f6c <HAL_TIMEx_HallSensor_Start+0x40>
 8007f66:	7b3b      	ldrb	r3, [r7, #12]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d001      	beq.n	8007f70 <HAL_TIMEx_HallSensor_Start+0x44>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e04f      	b.n	8008010 <HAL_TIMEx_HallSensor_Start+0xe4>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2202      	movs	r2, #2
 8007f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2201      	movs	r2, #1
 8007f96:	2100      	movs	r1, #0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff fef8 	bl	8007d8e <TIM_CCxChannelCmd>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a1d      	ldr	r2, [pc, #116]	; (8008018 <HAL_TIMEx_HallSensor_Start+0xec>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d018      	beq.n	8007fda <HAL_TIMEx_HallSensor_Start+0xae>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb0:	d013      	beq.n	8007fda <HAL_TIMEx_HallSensor_Start+0xae>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a19      	ldr	r2, [pc, #100]	; (800801c <HAL_TIMEx_HallSensor_Start+0xf0>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d00e      	beq.n	8007fda <HAL_TIMEx_HallSensor_Start+0xae>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a17      	ldr	r2, [pc, #92]	; (8008020 <HAL_TIMEx_HallSensor_Start+0xf4>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d009      	beq.n	8007fda <HAL_TIMEx_HallSensor_Start+0xae>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a16      	ldr	r2, [pc, #88]	; (8008024 <HAL_TIMEx_HallSensor_Start+0xf8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d004      	beq.n	8007fda <HAL_TIMEx_HallSensor_Start+0xae>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a14      	ldr	r2, [pc, #80]	; (8008028 <HAL_TIMEx_HallSensor_Start+0xfc>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d111      	bne.n	8007ffe <HAL_TIMEx_HallSensor_Start+0xd2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	60bb      	str	r3, [r7, #8]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	2b06      	cmp	r3, #6
 8007fea:	d010      	beq.n	800800e <HAL_TIMEx_HallSensor_Start+0xe2>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0201 	orr.w	r2, r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	e007      	b.n	800800e <HAL_TIMEx_HallSensor_Start+0xe2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 0201 	orr.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	2300      	movs	r3, #0
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	40010000 	.word	0x40010000
 800801c:	40000400 	.word	0x40000400
 8008020:	40000800 	.word	0x40000800
 8008024:	40000c00 	.word	0x40000c00
 8008028:	40014000 	.word	0x40014000

0800802c <HAL_TIMEx_HallSensor_Stop>:
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2200      	movs	r2, #0
 800803a:	2100      	movs	r1, #0
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff fea6 	bl	8007d8e <TIM_CCxChannelCmd>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6a1a      	ldr	r2, [r3, #32]
 8008048:	f241 1311 	movw	r3, #4369	; 0x1111
 800804c:	4013      	ands	r3, r2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10f      	bne.n	8008072 <HAL_TIMEx_HallSensor_Stop+0x46>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6a1a      	ldr	r2, [r3, #32]
 8008058:	f240 4344 	movw	r3, #1092	; 0x444
 800805c:	4013      	ands	r3, r2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d107      	bne.n	8008072 <HAL_TIMEx_HallSensor_Stop+0x46>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0201 	bic.w	r2, r2, #1
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008092:	2300      	movs	r3, #0
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_TIMEx_MasterConfigSynchronization>:
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e050      	b.n	8008156 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	60bb      	str	r3, [r7, #8]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	605a      	str	r2, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a1c      	ldr	r2, [pc, #112]	; (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d018      	beq.n	800812a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008100:	d013      	beq.n	800812a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a18      	ldr	r2, [pc, #96]	; (8008168 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d00e      	beq.n	800812a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a16      	ldr	r2, [pc, #88]	; (800816c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d009      	beq.n	800812a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a15      	ldr	r2, [pc, #84]	; (8008170 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d004      	beq.n	800812a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a13      	ldr	r2, [pc, #76]	; (8008174 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d10c      	bne.n	8008144 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008130:	60bb      	str	r3, [r7, #8]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	4313      	orrs	r3, r2
 800813a:	60bb      	str	r3, [r7, #8]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	609a      	str	r2, [r3, #8]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008154:	2300      	movs	r3, #0
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	40010000 	.word	0x40010000
 8008168:	40000400 	.word	0x40000400
 800816c:	40000800 	.word	0x40000800
 8008170:	40000c00 	.word	0x40000c00
 8008174:	40014000 	.word	0x40014000

08008178 <HAL_TIMEx_ConfigBreakDeadTime>:
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800818c:	2b01      	cmp	r3, #1
 800818e:	d101      	bne.n	8008194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008190:	2302      	movs	r3, #2
 8008192:	e03d      	b.n	8008210 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	645a      	str	r2, [r3, #68]	; 0x44
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800820e:	2300      	movs	r3, #0
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_TIMEx_CommutCallback>:
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_TIMEx_BreakCallback>:
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_UART_Init>:
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <HAL_UART_Init+0x12>
 8008252:	2301      	movs	r3, #1
 8008254:	e03f      	b.n	80082d6 <HAL_UART_Init+0x92>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d106      	bne.n	8008270 <HAL_UART_Init+0x2c>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7f9 fd30 	bl	8001cd0 <HAL_UART_MspInit>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2224      	movs	r2, #36	; 0x24
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008286:	60da      	str	r2, [r3, #12]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f829 	bl	80082e0 <UART_SetConfig>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	691a      	ldr	r2, [r3, #16]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800829c:	611a      	str	r2, [r3, #16]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	695a      	ldr	r2, [r3, #20]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082ac:	615a      	str	r2, [r3, #20]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082bc:	60da      	str	r2, [r3, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	641a      	str	r2, [r3, #64]	; 0x40
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082d4:	2300      	movs	r3, #0
 80082d6:	4618      	mov	r0, r3
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
	...

080082e0 <UART_SetConfig>:
 80082e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082e4:	b0c0      	sub	sp, #256	; 0x100
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80082ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082fc:	68d9      	ldr	r1, [r3, #12]
 80082fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	ea40 0301 	orr.w	r3, r0, r1
 8008308:	6113      	str	r3, [r2, #16]
 800830a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830e:	689a      	ldr	r2, [r3, #8]
 8008310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	431a      	orrs	r2, r3
 8008318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	431a      	orrs	r2, r3
 8008320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	4313      	orrs	r3, r2
 8008328:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008338:	f021 010c 	bic.w	r1, r1, #12
 800833c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008346:	430b      	orrs	r3, r1
 8008348:	60d3      	str	r3, [r2, #12]
 800834a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835a:	6999      	ldr	r1, [r3, #24]
 800835c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	ea40 0301 	orr.w	r3, r0, r1
 8008366:	6153      	str	r3, [r2, #20]
 8008368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	4b8f      	ldr	r3, [pc, #572]	; (80085ac <UART_SetConfig+0x2cc>)
 8008370:	429a      	cmp	r2, r3
 8008372:	d005      	beq.n	8008380 <UART_SetConfig+0xa0>
 8008374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4b8d      	ldr	r3, [pc, #564]	; (80085b0 <UART_SetConfig+0x2d0>)
 800837c:	429a      	cmp	r2, r3
 800837e:	d104      	bne.n	800838a <UART_SetConfig+0xaa>
 8008380:	f7fe fb68 	bl	8006a54 <HAL_RCC_GetPCLK2Freq>
 8008384:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008388:	e003      	b.n	8008392 <UART_SetConfig+0xb2>
 800838a:	f7fe fb4f 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 800838e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800839c:	f040 810c 	bne.w	80085b8 <UART_SetConfig+0x2d8>
 80083a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083a4:	2200      	movs	r2, #0
 80083a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80083ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80083b2:	4622      	mov	r2, r4
 80083b4:	462b      	mov	r3, r5
 80083b6:	1891      	adds	r1, r2, r2
 80083b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80083ba:	415b      	adcs	r3, r3
 80083bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80083c2:	4621      	mov	r1, r4
 80083c4:	eb12 0801 	adds.w	r8, r2, r1
 80083c8:	4629      	mov	r1, r5
 80083ca:	eb43 0901 	adc.w	r9, r3, r1
 80083ce:	f04f 0200 	mov.w	r2, #0
 80083d2:	f04f 0300 	mov.w	r3, #0
 80083d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083e2:	4690      	mov	r8, r2
 80083e4:	4699      	mov	r9, r3
 80083e6:	4623      	mov	r3, r4
 80083e8:	eb18 0303 	adds.w	r3, r8, r3
 80083ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083f0:	462b      	mov	r3, r5
 80083f2:	eb49 0303 	adc.w	r3, r9, r3
 80083f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008406:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800840a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800840e:	460b      	mov	r3, r1
 8008410:	18db      	adds	r3, r3, r3
 8008412:	653b      	str	r3, [r7, #80]	; 0x50
 8008414:	4613      	mov	r3, r2
 8008416:	eb42 0303 	adc.w	r3, r2, r3
 800841a:	657b      	str	r3, [r7, #84]	; 0x54
 800841c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008420:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008424:	f7f8 fbc8 	bl	8000bb8 <__aeabi_uldivmod>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4b61      	ldr	r3, [pc, #388]	; (80085b4 <UART_SetConfig+0x2d4>)
 800842e:	fba3 2302 	umull	r2, r3, r3, r2
 8008432:	095b      	lsrs	r3, r3, #5
 8008434:	011c      	lsls	r4, r3, #4
 8008436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800843a:	2200      	movs	r2, #0
 800843c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008440:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008444:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008448:	4642      	mov	r2, r8
 800844a:	464b      	mov	r3, r9
 800844c:	1891      	adds	r1, r2, r2
 800844e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008450:	415b      	adcs	r3, r3
 8008452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008454:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008458:	4641      	mov	r1, r8
 800845a:	eb12 0a01 	adds.w	sl, r2, r1
 800845e:	4649      	mov	r1, r9
 8008460:	eb43 0b01 	adc.w	fp, r3, r1
 8008464:	f04f 0200 	mov.w	r2, #0
 8008468:	f04f 0300 	mov.w	r3, #0
 800846c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008470:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008478:	4692      	mov	sl, r2
 800847a:	469b      	mov	fp, r3
 800847c:	4643      	mov	r3, r8
 800847e:	eb1a 0303 	adds.w	r3, sl, r3
 8008482:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008486:	464b      	mov	r3, r9
 8008488:	eb4b 0303 	adc.w	r3, fp, r3
 800848c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800849c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80084a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80084a4:	460b      	mov	r3, r1
 80084a6:	18db      	adds	r3, r3, r3
 80084a8:	643b      	str	r3, [r7, #64]	; 0x40
 80084aa:	4613      	mov	r3, r2
 80084ac:	eb42 0303 	adc.w	r3, r2, r3
 80084b0:	647b      	str	r3, [r7, #68]	; 0x44
 80084b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80084ba:	f7f8 fb7d 	bl	8000bb8 <__aeabi_uldivmod>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4611      	mov	r1, r2
 80084c4:	4b3b      	ldr	r3, [pc, #236]	; (80085b4 <UART_SetConfig+0x2d4>)
 80084c6:	fba3 2301 	umull	r2, r3, r3, r1
 80084ca:	095b      	lsrs	r3, r3, #5
 80084cc:	2264      	movs	r2, #100	; 0x64
 80084ce:	fb02 f303 	mul.w	r3, r2, r3
 80084d2:	1acb      	subs	r3, r1, r3
 80084d4:	00db      	lsls	r3, r3, #3
 80084d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80084da:	4b36      	ldr	r3, [pc, #216]	; (80085b4 <UART_SetConfig+0x2d4>)
 80084dc:	fba3 2302 	umull	r2, r3, r3, r2
 80084e0:	095b      	lsrs	r3, r3, #5
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084e8:	441c      	add	r4, r3
 80084ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084ee:	2200      	movs	r2, #0
 80084f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80084f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80084fc:	4642      	mov	r2, r8
 80084fe:	464b      	mov	r3, r9
 8008500:	1891      	adds	r1, r2, r2
 8008502:	63b9      	str	r1, [r7, #56]	; 0x38
 8008504:	415b      	adcs	r3, r3
 8008506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008508:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800850c:	4641      	mov	r1, r8
 800850e:	1851      	adds	r1, r2, r1
 8008510:	6339      	str	r1, [r7, #48]	; 0x30
 8008512:	4649      	mov	r1, r9
 8008514:	414b      	adcs	r3, r1
 8008516:	637b      	str	r3, [r7, #52]	; 0x34
 8008518:	f04f 0200 	mov.w	r2, #0
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008524:	4659      	mov	r1, fp
 8008526:	00cb      	lsls	r3, r1, #3
 8008528:	4651      	mov	r1, sl
 800852a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800852e:	4651      	mov	r1, sl
 8008530:	00ca      	lsls	r2, r1, #3
 8008532:	4610      	mov	r0, r2
 8008534:	4619      	mov	r1, r3
 8008536:	4603      	mov	r3, r0
 8008538:	4642      	mov	r2, r8
 800853a:	189b      	adds	r3, r3, r2
 800853c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008540:	464b      	mov	r3, r9
 8008542:	460a      	mov	r2, r1
 8008544:	eb42 0303 	adc.w	r3, r2, r3
 8008548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800854c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008558:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800855c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008560:	460b      	mov	r3, r1
 8008562:	18db      	adds	r3, r3, r3
 8008564:	62bb      	str	r3, [r7, #40]	; 0x28
 8008566:	4613      	mov	r3, r2
 8008568:	eb42 0303 	adc.w	r3, r2, r3
 800856c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800856e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008572:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008576:	f7f8 fb1f 	bl	8000bb8 <__aeabi_uldivmod>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	4b0d      	ldr	r3, [pc, #52]	; (80085b4 <UART_SetConfig+0x2d4>)
 8008580:	fba3 1302 	umull	r1, r3, r3, r2
 8008584:	095b      	lsrs	r3, r3, #5
 8008586:	2164      	movs	r1, #100	; 0x64
 8008588:	fb01 f303 	mul.w	r3, r1, r3
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	3332      	adds	r3, #50	; 0x32
 8008592:	4a08      	ldr	r2, [pc, #32]	; (80085b4 <UART_SetConfig+0x2d4>)
 8008594:	fba2 2303 	umull	r2, r3, r2, r3
 8008598:	095b      	lsrs	r3, r3, #5
 800859a:	f003 0207 	and.w	r2, r3, #7
 800859e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4422      	add	r2, r4
 80085a6:	609a      	str	r2, [r3, #8]
 80085a8:	e106      	b.n	80087b8 <UART_SetConfig+0x4d8>
 80085aa:	bf00      	nop
 80085ac:	40011000 	.word	0x40011000
 80085b0:	40011400 	.word	0x40011400
 80085b4:	51eb851f 	.word	0x51eb851f
 80085b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085bc:	2200      	movs	r2, #0
 80085be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80085c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80085ca:	4642      	mov	r2, r8
 80085cc:	464b      	mov	r3, r9
 80085ce:	1891      	adds	r1, r2, r2
 80085d0:	6239      	str	r1, [r7, #32]
 80085d2:	415b      	adcs	r3, r3
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24
 80085d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085da:	4641      	mov	r1, r8
 80085dc:	1854      	adds	r4, r2, r1
 80085de:	4649      	mov	r1, r9
 80085e0:	eb43 0501 	adc.w	r5, r3, r1
 80085e4:	f04f 0200 	mov.w	r2, #0
 80085e8:	f04f 0300 	mov.w	r3, #0
 80085ec:	00eb      	lsls	r3, r5, #3
 80085ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085f2:	00e2      	lsls	r2, r4, #3
 80085f4:	4614      	mov	r4, r2
 80085f6:	461d      	mov	r5, r3
 80085f8:	4643      	mov	r3, r8
 80085fa:	18e3      	adds	r3, r4, r3
 80085fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008600:	464b      	mov	r3, r9
 8008602:	eb45 0303 	adc.w	r3, r5, r3
 8008606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800860a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008616:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800861a:	f04f 0200 	mov.w	r2, #0
 800861e:	f04f 0300 	mov.w	r3, #0
 8008622:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008626:	4629      	mov	r1, r5
 8008628:	008b      	lsls	r3, r1, #2
 800862a:	4621      	mov	r1, r4
 800862c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008630:	4621      	mov	r1, r4
 8008632:	008a      	lsls	r2, r1, #2
 8008634:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008638:	f7f8 fabe 	bl	8000bb8 <__aeabi_uldivmod>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	4b60      	ldr	r3, [pc, #384]	; (80087c4 <UART_SetConfig+0x4e4>)
 8008642:	fba3 2302 	umull	r2, r3, r3, r2
 8008646:	095b      	lsrs	r3, r3, #5
 8008648:	011c      	lsls	r4, r3, #4
 800864a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800864e:	2200      	movs	r2, #0
 8008650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008654:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008658:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800865c:	4642      	mov	r2, r8
 800865e:	464b      	mov	r3, r9
 8008660:	1891      	adds	r1, r2, r2
 8008662:	61b9      	str	r1, [r7, #24]
 8008664:	415b      	adcs	r3, r3
 8008666:	61fb      	str	r3, [r7, #28]
 8008668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800866c:	4641      	mov	r1, r8
 800866e:	1851      	adds	r1, r2, r1
 8008670:	6139      	str	r1, [r7, #16]
 8008672:	4649      	mov	r1, r9
 8008674:	414b      	adcs	r3, r1
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	f04f 0300 	mov.w	r3, #0
 8008680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008684:	4659      	mov	r1, fp
 8008686:	00cb      	lsls	r3, r1, #3
 8008688:	4651      	mov	r1, sl
 800868a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800868e:	4651      	mov	r1, sl
 8008690:	00ca      	lsls	r2, r1, #3
 8008692:	4610      	mov	r0, r2
 8008694:	4619      	mov	r1, r3
 8008696:	4603      	mov	r3, r0
 8008698:	4642      	mov	r2, r8
 800869a:	189b      	adds	r3, r3, r2
 800869c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086a0:	464b      	mov	r3, r9
 80086a2:	460a      	mov	r2, r1
 80086a4:	eb42 0303 	adc.w	r3, r2, r3
 80086a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80086b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80086b8:	f04f 0200 	mov.w	r2, #0
 80086bc:	f04f 0300 	mov.w	r3, #0
 80086c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80086c4:	4649      	mov	r1, r9
 80086c6:	008b      	lsls	r3, r1, #2
 80086c8:	4641      	mov	r1, r8
 80086ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086ce:	4641      	mov	r1, r8
 80086d0:	008a      	lsls	r2, r1, #2
 80086d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80086d6:	f7f8 fa6f 	bl	8000bb8 <__aeabi_uldivmod>
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	4611      	mov	r1, r2
 80086e0:	4b38      	ldr	r3, [pc, #224]	; (80087c4 <UART_SetConfig+0x4e4>)
 80086e2:	fba3 2301 	umull	r2, r3, r3, r1
 80086e6:	095b      	lsrs	r3, r3, #5
 80086e8:	2264      	movs	r2, #100	; 0x64
 80086ea:	fb02 f303 	mul.w	r3, r2, r3
 80086ee:	1acb      	subs	r3, r1, r3
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	3332      	adds	r3, #50	; 0x32
 80086f4:	4a33      	ldr	r2, [pc, #204]	; (80087c4 <UART_SetConfig+0x4e4>)
 80086f6:	fba2 2303 	umull	r2, r3, r2, r3
 80086fa:	095b      	lsrs	r3, r3, #5
 80086fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008700:	441c      	add	r4, r3
 8008702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008706:	2200      	movs	r2, #0
 8008708:	673b      	str	r3, [r7, #112]	; 0x70
 800870a:	677a      	str	r2, [r7, #116]	; 0x74
 800870c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008710:	4642      	mov	r2, r8
 8008712:	464b      	mov	r3, r9
 8008714:	1891      	adds	r1, r2, r2
 8008716:	60b9      	str	r1, [r7, #8]
 8008718:	415b      	adcs	r3, r3
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008720:	4641      	mov	r1, r8
 8008722:	1851      	adds	r1, r2, r1
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	4649      	mov	r1, r9
 8008728:	414b      	adcs	r3, r1
 800872a:	607b      	str	r3, [r7, #4]
 800872c:	f04f 0200 	mov.w	r2, #0
 8008730:	f04f 0300 	mov.w	r3, #0
 8008734:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008738:	4659      	mov	r1, fp
 800873a:	00cb      	lsls	r3, r1, #3
 800873c:	4651      	mov	r1, sl
 800873e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008742:	4651      	mov	r1, sl
 8008744:	00ca      	lsls	r2, r1, #3
 8008746:	4610      	mov	r0, r2
 8008748:	4619      	mov	r1, r3
 800874a:	4603      	mov	r3, r0
 800874c:	4642      	mov	r2, r8
 800874e:	189b      	adds	r3, r3, r2
 8008750:	66bb      	str	r3, [r7, #104]	; 0x68
 8008752:	464b      	mov	r3, r9
 8008754:	460a      	mov	r2, r1
 8008756:	eb42 0303 	adc.w	r3, r2, r3
 800875a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800875c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	663b      	str	r3, [r7, #96]	; 0x60
 8008766:	667a      	str	r2, [r7, #100]	; 0x64
 8008768:	f04f 0200 	mov.w	r2, #0
 800876c:	f04f 0300 	mov.w	r3, #0
 8008770:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008774:	4649      	mov	r1, r9
 8008776:	008b      	lsls	r3, r1, #2
 8008778:	4641      	mov	r1, r8
 800877a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800877e:	4641      	mov	r1, r8
 8008780:	008a      	lsls	r2, r1, #2
 8008782:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008786:	f7f8 fa17 	bl	8000bb8 <__aeabi_uldivmod>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4b0d      	ldr	r3, [pc, #52]	; (80087c4 <UART_SetConfig+0x4e4>)
 8008790:	fba3 1302 	umull	r1, r3, r3, r2
 8008794:	095b      	lsrs	r3, r3, #5
 8008796:	2164      	movs	r1, #100	; 0x64
 8008798:	fb01 f303 	mul.w	r3, r1, r3
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	011b      	lsls	r3, r3, #4
 80087a0:	3332      	adds	r3, #50	; 0x32
 80087a2:	4a08      	ldr	r2, [pc, #32]	; (80087c4 <UART_SetConfig+0x4e4>)
 80087a4:	fba2 2303 	umull	r2, r3, r2, r3
 80087a8:	095b      	lsrs	r3, r3, #5
 80087aa:	f003 020f 	and.w	r2, r3, #15
 80087ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4422      	add	r2, r4
 80087b6:	609a      	str	r2, [r3, #8]
 80087b8:	bf00      	nop
 80087ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80087be:	46bd      	mov	sp, r7
 80087c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087c4:	51eb851f 	.word	0x51eb851f

080087c8 <USB_CoreInit>:
 80087c8:	b084      	sub	sp, #16
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	f107 001c 	add.w	r0, r7, #28
 80087d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d122      	bne.n	8008826 <USB_CoreInit+0x5e>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	639a      	str	r2, [r3, #56]	; 0x38
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80087f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	60d3      	str	r3, [r2, #12]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	60da      	str	r2, [r3, #12]
 8008808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800880a:	2b01      	cmp	r3, #1
 800880c:	d105      	bne.n	800881a <USB_CoreInit+0x52>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60da      	str	r2, [r3, #12]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f001 fbee 	bl	8009ffc <USB_CoreReset>
 8008820:	4603      	mov	r3, r0
 8008822:	73fb      	strb	r3, [r7, #15]
 8008824:	e01a      	b.n	800885c <USB_CoreInit+0x94>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	60da      	str	r2, [r3, #12]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f001 fbe2 	bl	8009ffc <USB_CoreReset>
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]
 800883c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800883e:	2b00      	cmp	r3, #0
 8008840:	d106      	bne.n	8008850 <USB_CoreInit+0x88>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008846:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	639a      	str	r2, [r3, #56]	; 0x38
 800884e:	e005      	b.n	800885c <USB_CoreInit+0x94>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	639a      	str	r2, [r3, #56]	; 0x38
 800885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885e:	2b01      	cmp	r3, #1
 8008860:	d10b      	bne.n	800887a <USB_CoreInit+0xb2>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f043 0206 	orr.w	r2, r3, #6
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	609a      	str	r2, [r3, #8]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f043 0220 	orr.w	r2, r3, #32
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	609a      	str	r2, [r3, #8]
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008886:	b004      	add	sp, #16
 8008888:	4770      	bx	lr
	...

0800888c <USB_SetTurnaroundTime>:
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	71fb      	strb	r3, [r7, #7]
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	2b02      	cmp	r3, #2
 800889e:	d165      	bne.n	800896c <USB_SetTurnaroundTime+0xe0>
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	4a41      	ldr	r2, [pc, #260]	; (80089a8 <USB_SetTurnaroundTime+0x11c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d906      	bls.n	80088b6 <USB_SetTurnaroundTime+0x2a>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4a40      	ldr	r2, [pc, #256]	; (80089ac <USB_SetTurnaroundTime+0x120>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d202      	bcs.n	80088b6 <USB_SetTurnaroundTime+0x2a>
 80088b0:	230f      	movs	r3, #15
 80088b2:	617b      	str	r3, [r7, #20]
 80088b4:	e062      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	4a3c      	ldr	r2, [pc, #240]	; (80089ac <USB_SetTurnaroundTime+0x120>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d306      	bcc.n	80088cc <USB_SetTurnaroundTime+0x40>
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	4a3b      	ldr	r2, [pc, #236]	; (80089b0 <USB_SetTurnaroundTime+0x124>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d202      	bcs.n	80088cc <USB_SetTurnaroundTime+0x40>
 80088c6:	230e      	movs	r3, #14
 80088c8:	617b      	str	r3, [r7, #20]
 80088ca:	e057      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	4a38      	ldr	r2, [pc, #224]	; (80089b0 <USB_SetTurnaroundTime+0x124>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d306      	bcc.n	80088e2 <USB_SetTurnaroundTime+0x56>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	4a37      	ldr	r2, [pc, #220]	; (80089b4 <USB_SetTurnaroundTime+0x128>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d202      	bcs.n	80088e2 <USB_SetTurnaroundTime+0x56>
 80088dc:	230d      	movs	r3, #13
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	e04c      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	4a33      	ldr	r2, [pc, #204]	; (80089b4 <USB_SetTurnaroundTime+0x128>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d306      	bcc.n	80088f8 <USB_SetTurnaroundTime+0x6c>
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	4a32      	ldr	r2, [pc, #200]	; (80089b8 <USB_SetTurnaroundTime+0x12c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d802      	bhi.n	80088f8 <USB_SetTurnaroundTime+0x6c>
 80088f2:	230c      	movs	r3, #12
 80088f4:	617b      	str	r3, [r7, #20]
 80088f6:	e041      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	4a2f      	ldr	r2, [pc, #188]	; (80089b8 <USB_SetTurnaroundTime+0x12c>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d906      	bls.n	800890e <USB_SetTurnaroundTime+0x82>
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	4a2e      	ldr	r2, [pc, #184]	; (80089bc <USB_SetTurnaroundTime+0x130>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d802      	bhi.n	800890e <USB_SetTurnaroundTime+0x82>
 8008908:	230b      	movs	r3, #11
 800890a:	617b      	str	r3, [r7, #20]
 800890c:	e036      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	4a2a      	ldr	r2, [pc, #168]	; (80089bc <USB_SetTurnaroundTime+0x130>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d906      	bls.n	8008924 <USB_SetTurnaroundTime+0x98>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	4a29      	ldr	r2, [pc, #164]	; (80089c0 <USB_SetTurnaroundTime+0x134>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d802      	bhi.n	8008924 <USB_SetTurnaroundTime+0x98>
 800891e:	230a      	movs	r3, #10
 8008920:	617b      	str	r3, [r7, #20]
 8008922:	e02b      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4a26      	ldr	r2, [pc, #152]	; (80089c0 <USB_SetTurnaroundTime+0x134>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d906      	bls.n	800893a <USB_SetTurnaroundTime+0xae>
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4a25      	ldr	r2, [pc, #148]	; (80089c4 <USB_SetTurnaroundTime+0x138>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d202      	bcs.n	800893a <USB_SetTurnaroundTime+0xae>
 8008934:	2309      	movs	r3, #9
 8008936:	617b      	str	r3, [r7, #20]
 8008938:	e020      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	4a21      	ldr	r2, [pc, #132]	; (80089c4 <USB_SetTurnaroundTime+0x138>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d306      	bcc.n	8008950 <USB_SetTurnaroundTime+0xc4>
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	4a20      	ldr	r2, [pc, #128]	; (80089c8 <USB_SetTurnaroundTime+0x13c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d802      	bhi.n	8008950 <USB_SetTurnaroundTime+0xc4>
 800894a:	2308      	movs	r3, #8
 800894c:	617b      	str	r3, [r7, #20]
 800894e:	e015      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4a1d      	ldr	r2, [pc, #116]	; (80089c8 <USB_SetTurnaroundTime+0x13c>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d906      	bls.n	8008966 <USB_SetTurnaroundTime+0xda>
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	4a1c      	ldr	r2, [pc, #112]	; (80089cc <USB_SetTurnaroundTime+0x140>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d202      	bcs.n	8008966 <USB_SetTurnaroundTime+0xda>
 8008960:	2307      	movs	r3, #7
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	e00a      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
 8008966:	2306      	movs	r3, #6
 8008968:	617b      	str	r3, [r7, #20]
 800896a:	e007      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d102      	bne.n	8008978 <USB_SetTurnaroundTime+0xec>
 8008972:	2309      	movs	r3, #9
 8008974:	617b      	str	r3, [r7, #20]
 8008976:	e001      	b.n	800897c <USB_SetTurnaroundTime+0xf0>
 8008978:	2309      	movs	r3, #9
 800897a:	617b      	str	r3, [r7, #20]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	60da      	str	r2, [r3, #12]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	029b      	lsls	r3, r3, #10
 8008990:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008994:	431a      	orrs	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	60da      	str	r2, [r3, #12]
 800899a:	2300      	movs	r3, #0
 800899c:	4618      	mov	r0, r3
 800899e:	371c      	adds	r7, #28
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	00d8acbf 	.word	0x00d8acbf
 80089ac:	00e4e1c0 	.word	0x00e4e1c0
 80089b0:	00f42400 	.word	0x00f42400
 80089b4:	01067380 	.word	0x01067380
 80089b8:	011a499f 	.word	0x011a499f
 80089bc:	01312cff 	.word	0x01312cff
 80089c0:	014ca43f 	.word	0x014ca43f
 80089c4:	016e3600 	.word	0x016e3600
 80089c8:	01a6ab1f 	.word	0x01a6ab1f
 80089cc:	01e84800 	.word	0x01e84800

080089d0 <USB_EnableGlobalInt>:
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f043 0201 	orr.w	r2, r3, #1
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	609a      	str	r2, [r3, #8]
 80089e4:	2300      	movs	r3, #0
 80089e6:	4618      	mov	r0, r3
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <USB_DisableGlobalInt>:
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f023 0201 	bic.w	r2, r3, #1
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	609a      	str	r2, [r3, #8]
 8008a06:	2300      	movs	r3, #0
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USB_SetCurrentMode>:
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	70fb      	strb	r3, [r7, #3]
 8008a20:	2300      	movs	r3, #0
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	60da      	str	r2, [r3, #12]
 8008a30:	78fb      	ldrb	r3, [r7, #3]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d115      	bne.n	8008a62 <USB_SetCurrentMode+0x4e>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	60da      	str	r2, [r3, #12]
 8008a42:	2001      	movs	r0, #1
 8008a44:	f7f9 fc8c 	bl	8002360 <HAL_Delay>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	60fb      	str	r3, [r7, #12]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 fa45 	bl	8009ede <USB_GetMode>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d01e      	beq.n	8008a98 <USB_SetCurrentMode+0x84>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b31      	cmp	r3, #49	; 0x31
 8008a5e:	d9f0      	bls.n	8008a42 <USB_SetCurrentMode+0x2e>
 8008a60:	e01a      	b.n	8008a98 <USB_SetCurrentMode+0x84>
 8008a62:	78fb      	ldrb	r3, [r7, #3]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d115      	bne.n	8008a94 <USB_SetCurrentMode+0x80>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	60da      	str	r2, [r3, #12]
 8008a74:	2001      	movs	r0, #1
 8008a76:	f7f9 fc73 	bl	8002360 <HAL_Delay>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	60fb      	str	r3, [r7, #12]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f001 fa2c 	bl	8009ede <USB_GetMode>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <USB_SetCurrentMode+0x84>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2b31      	cmp	r3, #49	; 0x31
 8008a90:	d9f0      	bls.n	8008a74 <USB_SetCurrentMode+0x60>
 8008a92:	e001      	b.n	8008a98 <USB_SetCurrentMode+0x84>
 8008a94:	2301      	movs	r3, #1
 8008a96:	e005      	b.n	8008aa4 <USB_SetCurrentMode+0x90>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b32      	cmp	r3, #50	; 0x32
 8008a9c:	d101      	bne.n	8008aa2 <USB_SetCurrentMode+0x8e>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e000      	b.n	8008aa4 <USB_SetCurrentMode+0x90>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USB_DevInit>:
 8008aac:	b084      	sub	sp, #16
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b086      	sub	sp, #24
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8008abe:	2300      	movs	r3, #0
 8008ac0:	75fb      	strb	r3, [r7, #23]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	60fb      	str	r3, [r7, #12]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	613b      	str	r3, [r7, #16]
 8008aca:	e009      	b.n	8008ae0 <USB_DevInit+0x34>
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	3340      	adds	r3, #64	; 0x40
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	605a      	str	r2, [r3, #4]
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	3301      	adds	r3, #1
 8008ade:	613b      	str	r3, [r7, #16]
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	2b0e      	cmp	r3, #14
 8008ae4:	d9f2      	bls.n	8008acc <USB_DevInit+0x20>
 8008ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d11c      	bne.n	8008b26 <USB_DevInit+0x7a>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008afa:	f043 0302 	orr.w	r3, r3, #2
 8008afe:	6053      	str	r3, [r2, #4]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	639a      	str	r2, [r3, #56]	; 0x38
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b10:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	639a      	str	r2, [r3, #56]	; 0x38
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	639a      	str	r2, [r3, #56]	; 0x38
 8008b24:	e00b      	b.n	8008b3e <USB_DevInit+0x92>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	639a      	str	r2, [r3, #56]	; 0x38
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	639a      	str	r2, [r3, #56]	; 0x38
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b44:	461a      	mov	r2, r3
 8008b46:	2300      	movs	r3, #0
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b50:	4619      	mov	r1, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b58:	461a      	mov	r2, r3
 8008b5a:	680b      	ldr	r3, [r1, #0]
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d10c      	bne.n	8008b7e <USB_DevInit+0xd2>
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d104      	bne.n	8008b74 <USB_DevInit+0xc8>
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f965 	bl	8008e3c <USB_SetDevSpeed>
 8008b72:	e008      	b.n	8008b86 <USB_DevInit+0xda>
 8008b74:	2101      	movs	r1, #1
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f960 	bl	8008e3c <USB_SetDevSpeed>
 8008b7c:	e003      	b.n	8008b86 <USB_DevInit+0xda>
 8008b7e:	2103      	movs	r1, #3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f95b 	bl	8008e3c <USB_SetDevSpeed>
 8008b86:	2110      	movs	r1, #16
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f8f3 	bl	8008d74 <USB_FlushTxFifo>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <USB_DevInit+0xec>
 8008b94:	2301      	movs	r3, #1
 8008b96:	75fb      	strb	r3, [r7, #23]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f91f 	bl	8008ddc <USB_FlushRxFifo>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <USB_DevInit+0xfc>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	75fb      	strb	r3, [r7, #23]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bae:	461a      	mov	r2, r3
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	6113      	str	r3, [r2, #16]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bba:	461a      	mov	r2, r3
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	6153      	str	r3, [r2, #20]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	2300      	movs	r3, #0
 8008bca:	61d3      	str	r3, [r2, #28]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	613b      	str	r3, [r7, #16]
 8008bd0:	e043      	b.n	8008c5a <USB_DevInit+0x1ae>
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008be8:	d118      	bne.n	8008c1c <USB_DevInit+0x170>
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10a      	bne.n	8008c06 <USB_DevInit+0x15a>
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	e013      	b.n	8008c2e <USB_DevInit+0x182>
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c12:	461a      	mov	r2, r3
 8008c14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	e008      	b.n	8008c2e <USB_DevInit+0x182>
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c28:	461a      	mov	r2, r3
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	6113      	str	r3, [r2, #16]
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c52:	6093      	str	r3, [r2, #8]
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	3301      	adds	r3, #1
 8008c58:	613b      	str	r3, [r7, #16]
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d3b7      	bcc.n	8008bd2 <USB_DevInit+0x126>
 8008c62:	2300      	movs	r3, #0
 8008c64:	613b      	str	r3, [r7, #16]
 8008c66:	e043      	b.n	8008cf0 <USB_DevInit+0x244>
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c7e:	d118      	bne.n	8008cb2 <USB_DevInit+0x206>
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <USB_DevInit+0x1f0>
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c92:	461a      	mov	r2, r3
 8008c94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	e013      	b.n	8008cc4 <USB_DevInit+0x218>
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca8:	461a      	mov	r2, r3
 8008caa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	e008      	b.n	8008cc4 <USB_DevInit+0x218>
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	6013      	str	r3, [r2, #0]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	6113      	str	r3, [r2, #16]
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ce8:	6093      	str	r3, [r2, #8]
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	3301      	adds	r3, #1
 8008cee:	613b      	str	r3, [r7, #16]
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d3b7      	bcc.n	8008c68 <USB_DevInit+0x1bc>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d0a:	6113      	str	r3, [r2, #16]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	619a      	str	r2, [r3, #24]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d18:	615a      	str	r2, [r3, #20]
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d105      	bne.n	8008d2c <USB_DevInit+0x280>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	f043 0210 	orr.w	r2, r3, #16
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	619a      	str	r2, [r3, #24]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	699a      	ldr	r2, [r3, #24]
 8008d30:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <USB_DevInit+0x2c4>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6193      	str	r3, [r2, #24]
 8008d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d005      	beq.n	8008d4a <USB_DevInit+0x29e>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	f043 0208 	orr.w	r2, r3, #8
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	619a      	str	r2, [r3, #24]
 8008d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d107      	bne.n	8008d60 <USB_DevInit+0x2b4>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d58:	f043 0304 	orr.w	r3, r3, #4
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	6193      	str	r3, [r2, #24]
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d6c:	b004      	add	sp, #16
 8008d6e:	4770      	bx	lr
 8008d70:	803c3800 	.word	0x803c3800

08008d74 <USB_FlushTxFifo>:
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3301      	adds	r3, #1
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	4a13      	ldr	r2, [pc, #76]	; (8008dd8 <USB_FlushTxFifo+0x64>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d901      	bls.n	8008d94 <USB_FlushTxFifo+0x20>
 8008d90:	2303      	movs	r3, #3
 8008d92:	e01b      	b.n	8008dcc <USB_FlushTxFifo+0x58>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	daf2      	bge.n	8008d82 <USB_FlushTxFifo+0xe>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	019b      	lsls	r3, r3, #6
 8008da4:	f043 0220 	orr.w	r2, r3, #32
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	611a      	str	r2, [r3, #16]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3301      	adds	r3, #1
 8008db0:	60fb      	str	r3, [r7, #12]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	4a08      	ldr	r2, [pc, #32]	; (8008dd8 <USB_FlushTxFifo+0x64>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d901      	bls.n	8008dbe <USB_FlushTxFifo+0x4a>
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e006      	b.n	8008dcc <USB_FlushTxFifo+0x58>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	f003 0320 	and.w	r3, r3, #32
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	d0f0      	beq.n	8008dac <USB_FlushTxFifo+0x38>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	00030d40 	.word	0x00030d40

08008ddc <USB_FlushRxFifo>:
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	2300      	movs	r3, #0
 8008de6:	60fb      	str	r3, [r7, #12]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4a11      	ldr	r2, [pc, #68]	; (8008e38 <USB_FlushRxFifo+0x5c>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d901      	bls.n	8008dfa <USB_FlushRxFifo+0x1e>
 8008df6:	2303      	movs	r3, #3
 8008df8:	e018      	b.n	8008e2c <USB_FlushRxFifo+0x50>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	daf2      	bge.n	8008de8 <USB_FlushRxFifo+0xc>
 8008e02:	2300      	movs	r3, #0
 8008e04:	60fb      	str	r3, [r7, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2210      	movs	r2, #16
 8008e0a:	611a      	str	r2, [r3, #16]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4a08      	ldr	r2, [pc, #32]	; (8008e38 <USB_FlushRxFifo+0x5c>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d901      	bls.n	8008e1e <USB_FlushRxFifo+0x42>
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e006      	b.n	8008e2c <USB_FlushRxFifo+0x50>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f003 0310 	and.w	r3, r3, #16
 8008e26:	2b10      	cmp	r3, #16
 8008e28:	d0f0      	beq.n	8008e0c <USB_FlushRxFifo+0x30>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	00030d40 	.word	0x00030d40

08008e3c <USB_SetDevSpeed>:
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	68f9      	ldr	r1, [r7, #12]
 8008e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	600b      	str	r3, [r1, #0]
 8008e60:	2300      	movs	r3, #0
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <USB_GetDevSpeed>:
 8008e6e:	b480      	push	{r7}
 8008e70:	b087      	sub	sp, #28
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	613b      	str	r3, [r7, #16]
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f003 0306 	and.w	r3, r3, #6
 8008e86:	60fb      	str	r3, [r7, #12]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d102      	bne.n	8008e94 <USB_GetDevSpeed+0x26>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	75fb      	strb	r3, [r7, #23]
 8008e92:	e00a      	b.n	8008eaa <USB_GetDevSpeed+0x3c>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d002      	beq.n	8008ea0 <USB_GetDevSpeed+0x32>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2b06      	cmp	r3, #6
 8008e9e:	d102      	bne.n	8008ea6 <USB_GetDevSpeed+0x38>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	75fb      	strb	r3, [r7, #23]
 8008ea4:	e001      	b.n	8008eaa <USB_GetDevSpeed+0x3c>
 8008ea6:	230f      	movs	r3, #15
 8008ea8:	75fb      	strb	r3, [r7, #23]
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
 8008eac:	4618      	mov	r0, r3
 8008eae:	371c      	adds	r7, #28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <USB_ActivateEndpoint>:
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	60fb      	str	r3, [r7, #12]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	60bb      	str	r3, [r7, #8]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	785b      	ldrb	r3, [r3, #1]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d13a      	bne.n	8008f4a <USB_ActivateEndpoint+0x92>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eda:	69da      	ldr	r2, [r3, #28]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	f003 030f 	and.w	r3, r3, #15
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	68f9      	ldr	r1, [r7, #12]
 8008eee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	61cb      	str	r3, [r1, #28]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d155      	bne.n	8008fb8 <USB_ActivateEndpoint+0x100>
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	791b      	ldrb	r3, [r3, #4]
 8008f26:	049b      	lsls	r3, r3, #18
 8008f28:	4319      	orrs	r1, r3
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	059b      	lsls	r3, r3, #22
 8008f2e:	430b      	orrs	r3, r1
 8008f30:	4313      	orrs	r3, r2
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	0151      	lsls	r1, r2, #5
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	440a      	add	r2, r1
 8008f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f46:	6013      	str	r3, [r2, #0]
 8008f48:	e036      	b.n	8008fb8 <USB_ActivateEndpoint+0x100>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f50:	69da      	ldr	r2, [r3, #28]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	f003 030f 	and.w	r3, r3, #15
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f60:	041b      	lsls	r3, r3, #16
 8008f62:	68f9      	ldr	r1, [r7, #12]
 8008f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	61cb      	str	r3, [r1, #28]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d11a      	bne.n	8008fb8 <USB_ActivateEndpoint+0x100>
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	791b      	ldrb	r3, [r3, #4]
 8008f9c:	049b      	lsls	r3, r3, #18
 8008f9e:	430b      	orrs	r3, r1
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	0151      	lsls	r1, r2, #5
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	440a      	add	r2, r1
 8008faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb6:	6013      	str	r3, [r2, #0]
 8008fb8:	2300      	movs	r3, #0
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
	...

08008fc8 <USB_DeactivateEndpoint>:
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	60fb      	str	r3, [r7, #12]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	60bb      	str	r3, [r7, #8]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	785b      	ldrb	r3, [r3, #1]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d161      	bne.n	80090a8 <USB_DeactivateEndpoint+0xe0>
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ffa:	d11f      	bne.n	800903c <USB_DeactivateEndpoint+0x74>
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	0151      	lsls	r1, r2, #5
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	440a      	add	r2, r1
 8009012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009016:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	0151      	lsls	r1, r2, #5
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	440a      	add	r2, r1
 8009032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	f003 030f 	and.w	r3, r3, #15
 800904c:	2101      	movs	r1, #1
 800904e:	fa01 f303 	lsl.w	r3, r1, r3
 8009052:	b29b      	uxth	r3, r3
 8009054:	43db      	mvns	r3, r3
 8009056:	68f9      	ldr	r1, [r7, #12]
 8009058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800905c:	4013      	ands	r3, r2
 800905e:	63cb      	str	r3, [r1, #60]	; 0x3c
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009066:	69da      	ldr	r2, [r3, #28]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	f003 030f 	and.w	r3, r3, #15
 8009070:	2101      	movs	r1, #1
 8009072:	fa01 f303 	lsl.w	r3, r1, r3
 8009076:	b29b      	uxth	r3, r3
 8009078:	43db      	mvns	r3, r3
 800907a:	68f9      	ldr	r1, [r7, #12]
 800907c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009080:	4013      	ands	r3, r2
 8009082:	61cb      	str	r3, [r1, #28]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4413      	add	r3, r2
 800908c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	0159      	lsls	r1, r3, #5
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	440b      	add	r3, r1
 800909a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909e:	4619      	mov	r1, r3
 80090a0:	4b35      	ldr	r3, [pc, #212]	; (8009178 <USB_DeactivateEndpoint+0x1b0>)
 80090a2:	4013      	ands	r3, r2
 80090a4:	600b      	str	r3, [r1, #0]
 80090a6:	e060      	b.n	800916a <USB_DeactivateEndpoint+0x1a2>
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090be:	d11f      	bne.n	8009100 <USB_DeactivateEndpoint+0x138>
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	0151      	lsls	r1, r2, #5
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	440a      	add	r2, r1
 80090d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	0151      	lsls	r1, r2, #5
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	440a      	add	r2, r1
 80090f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	f003 030f 	and.w	r3, r3, #15
 8009110:	2101      	movs	r1, #1
 8009112:	fa01 f303 	lsl.w	r3, r1, r3
 8009116:	041b      	lsls	r3, r3, #16
 8009118:	43db      	mvns	r3, r3
 800911a:	68f9      	ldr	r1, [r7, #12]
 800911c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009120:	4013      	ands	r3, r2
 8009122:	63cb      	str	r3, [r1, #60]	; 0x3c
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912a:	69da      	ldr	r2, [r3, #28]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	2101      	movs	r1, #1
 8009136:	fa01 f303 	lsl.w	r3, r1, r3
 800913a:	041b      	lsls	r3, r3, #16
 800913c:	43db      	mvns	r3, r3
 800913e:	68f9      	ldr	r1, [r7, #12]
 8009140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009144:	4013      	ands	r3, r2
 8009146:	61cb      	str	r3, [r1, #28]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	015a      	lsls	r2, r3, #5
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4413      	add	r3, r2
 8009150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	0159      	lsls	r1, r3, #5
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	440b      	add	r3, r1
 800915e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009162:	4619      	mov	r1, r3
 8009164:	4b05      	ldr	r3, [pc, #20]	; (800917c <USB_DeactivateEndpoint+0x1b4>)
 8009166:	4013      	ands	r3, r2
 8009168:	600b      	str	r3, [r1, #0]
 800916a:	2300      	movs	r3, #0
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	ec337800 	.word	0xec337800
 800917c:	eff37800 	.word	0xeff37800

08009180 <USB_EPStartXfer>:
 8009180:	b580      	push	{r7, lr}
 8009182:	b08a      	sub	sp, #40	; 0x28
 8009184:	af02      	add	r7, sp, #8
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	4613      	mov	r3, r2
 800918c:	71fb      	strb	r3, [r7, #7]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	61fb      	str	r3, [r7, #28]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	61bb      	str	r3, [r7, #24]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	785b      	ldrb	r3, [r3, #1]
 800919c:	2b01      	cmp	r3, #1
 800919e:	f040 815c 	bne.w	800945a <USB_EPStartXfer+0x2da>
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d132      	bne.n	8009210 <USB_EPStartXfer+0x90>
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	015a      	lsls	r2, r3, #5
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	4413      	add	r3, r2
 80091b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	0151      	lsls	r1, r2, #5
 80091bc:	69fa      	ldr	r2, [r7, #28]
 80091be:	440a      	add	r2, r1
 80091c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091cc:	6113      	str	r3, [r2, #16]
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	015a      	lsls	r2, r3, #5
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	4413      	add	r3, r2
 80091d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	69ba      	ldr	r2, [r7, #24]
 80091de:	0151      	lsls	r1, r2, #5
 80091e0:	69fa      	ldr	r2, [r7, #28]
 80091e2:	440a      	add	r2, r1
 80091e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091ec:	6113      	str	r3, [r2, #16]
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	69ba      	ldr	r2, [r7, #24]
 80091fe:	0151      	lsls	r1, r2, #5
 8009200:	69fa      	ldr	r2, [r7, #28]
 8009202:	440a      	add	r2, r1
 8009204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009208:	0cdb      	lsrs	r3, r3, #19
 800920a:	04db      	lsls	r3, r3, #19
 800920c:	6113      	str	r3, [r2, #16]
 800920e:	e074      	b.n	80092fa <USB_EPStartXfer+0x17a>
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	4413      	add	r3, r2
 8009218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	69ba      	ldr	r2, [r7, #24]
 8009220:	0151      	lsls	r1, r2, #5
 8009222:	69fa      	ldr	r2, [r7, #28]
 8009224:	440a      	add	r2, r1
 8009226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800922a:	0cdb      	lsrs	r3, r3, #19
 800922c:	04db      	lsls	r3, r3, #19
 800922e:	6113      	str	r3, [r2, #16]
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	0151      	lsls	r1, r2, #5
 8009242:	69fa      	ldr	r2, [r7, #28]
 8009244:	440a      	add	r2, r1
 8009246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800924a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800924e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009252:	6113      	str	r3, [r2, #16]
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	4413      	add	r3, r2
 800925c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009260:	691a      	ldr	r2, [r3, #16]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	6999      	ldr	r1, [r3, #24]
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	440b      	add	r3, r1
 800926c:	1e59      	subs	r1, r3, #1
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	fbb1 f3f3 	udiv	r3, r1, r3
 8009276:	04d9      	lsls	r1, r3, #19
 8009278:	4b9d      	ldr	r3, [pc, #628]	; (80094f0 <USB_EPStartXfer+0x370>)
 800927a:	400b      	ands	r3, r1
 800927c:	69b9      	ldr	r1, [r7, #24]
 800927e:	0148      	lsls	r0, r1, #5
 8009280:	69f9      	ldr	r1, [r7, #28]
 8009282:	4401      	add	r1, r0
 8009284:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009288:	4313      	orrs	r3, r2
 800928a:	610b      	str	r3, [r1, #16]
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	015a      	lsls	r2, r3, #5
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	4413      	add	r3, r2
 8009294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009298:	691a      	ldr	r2, [r3, #16]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092a2:	69b9      	ldr	r1, [r7, #24]
 80092a4:	0148      	lsls	r0, r1, #5
 80092a6:	69f9      	ldr	r1, [r7, #28]
 80092a8:	4401      	add	r1, r0
 80092aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80092ae:	4313      	orrs	r3, r2
 80092b0:	610b      	str	r3, [r1, #16]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	791b      	ldrb	r3, [r3, #4]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d11f      	bne.n	80092fa <USB_EPStartXfer+0x17a>
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	0151      	lsls	r1, r2, #5
 80092cc:	69fa      	ldr	r2, [r7, #28]
 80092ce:	440a      	add	r2, r1
 80092d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80092d8:	6113      	str	r3, [r2, #16]
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	0151      	lsls	r1, r2, #5
 80092ec:	69fa      	ldr	r2, [r7, #28]
 80092ee:	440a      	add	r2, r1
 80092f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092f8:	6113      	str	r3, [r2, #16]
 80092fa:	79fb      	ldrb	r3, [r7, #7]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d14b      	bne.n	8009398 <USB_EPStartXfer+0x218>
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d009      	beq.n	800931c <USB_EPStartXfer+0x19c>
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009314:	461a      	mov	r2, r3
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	6153      	str	r3, [r2, #20]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	791b      	ldrb	r3, [r3, #4]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d128      	bne.n	8009376 <USB_EPStartXfer+0x1f6>
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009330:	2b00      	cmp	r3, #0
 8009332:	d110      	bne.n	8009356 <USB_EPStartXfer+0x1d6>
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	0151      	lsls	r1, r2, #5
 8009346:	69fa      	ldr	r2, [r7, #28]
 8009348:	440a      	add	r2, r1
 800934a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800934e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009352:	6013      	str	r3, [r2, #0]
 8009354:	e00f      	b.n	8009376 <USB_EPStartXfer+0x1f6>
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	015a      	lsls	r2, r3, #5
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	4413      	add	r3, r2
 800935e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	69ba      	ldr	r2, [r7, #24]
 8009366:	0151      	lsls	r1, r2, #5
 8009368:	69fa      	ldr	r2, [r7, #28]
 800936a:	440a      	add	r2, r1
 800936c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009374:	6013      	str	r3, [r2, #0]
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	4413      	add	r3, r2
 800937e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	0151      	lsls	r1, r2, #5
 8009388:	69fa      	ldr	r2, [r7, #28]
 800938a:	440a      	add	r2, r1
 800938c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009390:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	e133      	b.n	8009600 <USB_EPStartXfer+0x480>
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	69ba      	ldr	r2, [r7, #24]
 80093a8:	0151      	lsls	r1, r2, #5
 80093aa:	69fa      	ldr	r2, [r7, #28]
 80093ac:	440a      	add	r2, r1
 80093ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	791b      	ldrb	r3, [r3, #4]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d015      	beq.n	80093ec <USB_EPStartXfer+0x26c>
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 811b 	beq.w	8009600 <USB_EPStartXfer+0x480>
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	f003 030f 	and.w	r3, r3, #15
 80093da:	2101      	movs	r1, #1
 80093dc:	fa01 f303 	lsl.w	r3, r1, r3
 80093e0:	69f9      	ldr	r1, [r7, #28]
 80093e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093e6:	4313      	orrs	r3, r2
 80093e8:	634b      	str	r3, [r1, #52]	; 0x34
 80093ea:	e109      	b.n	8009600 <USB_EPStartXfer+0x480>
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d110      	bne.n	800941e <USB_EPStartXfer+0x29e>
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	0151      	lsls	r1, r2, #5
 800940e:	69fa      	ldr	r2, [r7, #28]
 8009410:	440a      	add	r2, r1
 8009412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009416:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800941a:	6013      	str	r3, [r2, #0]
 800941c:	e00f      	b.n	800943e <USB_EPStartXfer+0x2be>
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	0151      	lsls	r1, r2, #5
 8009430:	69fa      	ldr	r2, [r7, #28]
 8009432:	440a      	add	r2, r1
 8009434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800943c:	6013      	str	r3, [r2, #0]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	6919      	ldr	r1, [r3, #16]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	781a      	ldrb	r2, [r3, #0]
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	b298      	uxth	r0, r3
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	4603      	mov	r3, r0
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f000 fade 	bl	8009a14 <USB_WritePacket>
 8009458:	e0d2      	b.n	8009600 <USB_EPStartXfer+0x480>
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	0151      	lsls	r1, r2, #5
 800946c:	69fa      	ldr	r2, [r7, #28]
 800946e:	440a      	add	r2, r1
 8009470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009474:	0cdb      	lsrs	r3, r3, #19
 8009476:	04db      	lsls	r3, r3, #19
 8009478:	6113      	str	r3, [r2, #16]
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	0151      	lsls	r1, r2, #5
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	440a      	add	r2, r1
 8009490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009494:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009498:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800949c:	6113      	str	r3, [r2, #16]
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d126      	bne.n	80094f4 <USB_EPStartXfer+0x374>
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b2:	691a      	ldr	r2, [r3, #16]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094bc:	69b9      	ldr	r1, [r7, #24]
 80094be:	0148      	lsls	r0, r1, #5
 80094c0:	69f9      	ldr	r1, [r7, #28]
 80094c2:	4401      	add	r1, r0
 80094c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094c8:	4313      	orrs	r3, r2
 80094ca:	610b      	str	r3, [r1, #16]
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	015a      	lsls	r2, r3, #5
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	4413      	add	r3, r2
 80094d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	69ba      	ldr	r2, [r7, #24]
 80094dc:	0151      	lsls	r1, r2, #5
 80094de:	69fa      	ldr	r2, [r7, #28]
 80094e0:	440a      	add	r2, r1
 80094e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094ea:	6113      	str	r3, [r2, #16]
 80094ec:	e03a      	b.n	8009564 <USB_EPStartXfer+0x3e4>
 80094ee:	bf00      	nop
 80094f0:	1ff80000 	.word	0x1ff80000
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	699a      	ldr	r2, [r3, #24]
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	4413      	add	r3, r2
 80094fe:	1e5a      	subs	r2, r3, #1
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	fbb2 f3f3 	udiv	r3, r2, r3
 8009508:	82fb      	strh	r3, [r7, #22]
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	8afa      	ldrh	r2, [r7, #22]
 8009510:	fb03 f202 	mul.w	r2, r3, r2
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	61da      	str	r2, [r3, #28]
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	4413      	add	r3, r2
 8009520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009524:	691a      	ldr	r2, [r3, #16]
 8009526:	8afb      	ldrh	r3, [r7, #22]
 8009528:	04d9      	lsls	r1, r3, #19
 800952a:	4b38      	ldr	r3, [pc, #224]	; (800960c <USB_EPStartXfer+0x48c>)
 800952c:	400b      	ands	r3, r1
 800952e:	69b9      	ldr	r1, [r7, #24]
 8009530:	0148      	lsls	r0, r1, #5
 8009532:	69f9      	ldr	r1, [r7, #28]
 8009534:	4401      	add	r1, r0
 8009536:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800953a:	4313      	orrs	r3, r2
 800953c:	610b      	str	r3, [r1, #16]
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	4413      	add	r3, r2
 8009546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800954a:	691a      	ldr	r2, [r3, #16]
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	69db      	ldr	r3, [r3, #28]
 8009550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009554:	69b9      	ldr	r1, [r7, #24]
 8009556:	0148      	lsls	r0, r1, #5
 8009558:	69f9      	ldr	r1, [r7, #28]
 800955a:	4401      	add	r1, r0
 800955c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009560:	4313      	orrs	r3, r2
 8009562:	610b      	str	r3, [r1, #16]
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d10d      	bne.n	8009586 <USB_EPStartXfer+0x406>
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d009      	beq.n	8009586 <USB_EPStartXfer+0x406>
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	6919      	ldr	r1, [r3, #16]
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009582:	460a      	mov	r2, r1
 8009584:	615a      	str	r2, [r3, #20]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	791b      	ldrb	r3, [r3, #4]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d128      	bne.n	80095e0 <USB_EPStartXfer+0x460>
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800959a:	2b00      	cmp	r3, #0
 800959c:	d110      	bne.n	80095c0 <USB_EPStartXfer+0x440>
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	69ba      	ldr	r2, [r7, #24]
 80095ae:	0151      	lsls	r1, r2, #5
 80095b0:	69fa      	ldr	r2, [r7, #28]
 80095b2:	440a      	add	r2, r1
 80095b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095bc:	6013      	str	r3, [r2, #0]
 80095be:	e00f      	b.n	80095e0 <USB_EPStartXfer+0x460>
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	0151      	lsls	r1, r2, #5
 80095d2:	69fa      	ldr	r2, [r7, #28]
 80095d4:	440a      	add	r2, r1
 80095d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095de:	6013      	str	r3, [r2, #0]
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	0151      	lsls	r1, r2, #5
 80095f2:	69fa      	ldr	r2, [r7, #28]
 80095f4:	440a      	add	r2, r1
 80095f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095fe:	6013      	str	r3, [r2, #0]
 8009600:	2300      	movs	r3, #0
 8009602:	4618      	mov	r0, r3
 8009604:	3720      	adds	r7, #32
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	1ff80000 	.word	0x1ff80000

08009610 <USB_EP0StartXfer>:
 8009610:	b480      	push	{r7}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	4613      	mov	r3, r2
 800961c:	71fb      	strb	r3, [r7, #7]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	617b      	str	r3, [r7, #20]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	613b      	str	r3, [r7, #16]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	785b      	ldrb	r3, [r3, #1]
 800962c:	2b01      	cmp	r3, #1
 800962e:	f040 80ce 	bne.w	80097ce <USB_EP0StartXfer+0x1be>
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d132      	bne.n	80096a0 <USB_EP0StartXfer+0x90>
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	0151      	lsls	r1, r2, #5
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	440a      	add	r2, r1
 8009650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009654:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009658:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800965c:	6113      	str	r3, [r2, #16]
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	015a      	lsls	r2, r3, #5
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	4413      	add	r3, r2
 8009666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	0151      	lsls	r1, r2, #5
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	440a      	add	r2, r1
 8009674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009678:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800967c:	6113      	str	r3, [r2, #16]
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	4413      	add	r3, r2
 8009686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	0151      	lsls	r1, r2, #5
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	440a      	add	r2, r1
 8009694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009698:	0cdb      	lsrs	r3, r3, #19
 800969a:	04db      	lsls	r3, r3, #19
 800969c:	6113      	str	r3, [r2, #16]
 800969e:	e04e      	b.n	800973e <USB_EP0StartXfer+0x12e>
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	0151      	lsls	r1, r2, #5
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	440a      	add	r2, r1
 80096b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ba:	0cdb      	lsrs	r3, r3, #19
 80096bc:	04db      	lsls	r3, r3, #19
 80096be:	6113      	str	r3, [r2, #16]
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	0151      	lsls	r1, r2, #5
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	440a      	add	r2, r1
 80096d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096e2:	6113      	str	r3, [r2, #16]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	699a      	ldr	r2, [r3, #24]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d903      	bls.n	80096f8 <USB_EP0StartXfer+0xe8>
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	68da      	ldr	r2, [r3, #12]
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	619a      	str	r2, [r3, #24]
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	0151      	lsls	r1, r2, #5
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	440a      	add	r2, r1
 800970e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009712:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009716:	6113      	str	r3, [r2, #16]
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	4413      	add	r3, r2
 8009720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009724:	691a      	ldr	r2, [r3, #16]
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800972e:	6939      	ldr	r1, [r7, #16]
 8009730:	0148      	lsls	r0, r1, #5
 8009732:	6979      	ldr	r1, [r7, #20]
 8009734:	4401      	add	r1, r0
 8009736:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800973a:	4313      	orrs	r3, r2
 800973c:	610b      	str	r3, [r1, #16]
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d11e      	bne.n	8009782 <USB_EP0StartXfer+0x172>
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d009      	beq.n	8009760 <USB_EP0StartXfer+0x150>
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009758:	461a      	mov	r2, r3
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	6153      	str	r3, [r2, #20]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	0151      	lsls	r1, r2, #5
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	440a      	add	r2, r1
 8009776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800977a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	e097      	b.n	80098b2 <USB_EP0StartXfer+0x2a2>
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	0151      	lsls	r1, r2, #5
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	440a      	add	r2, r1
 8009798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800979c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 8083 	beq.w	80098b2 <USB_EP0StartXfer+0x2a2>
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	f003 030f 	and.w	r3, r3, #15
 80097bc:	2101      	movs	r1, #1
 80097be:	fa01 f303 	lsl.w	r3, r1, r3
 80097c2:	6979      	ldr	r1, [r7, #20]
 80097c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097c8:	4313      	orrs	r3, r2
 80097ca:	634b      	str	r3, [r1, #52]	; 0x34
 80097cc:	e071      	b.n	80098b2 <USB_EP0StartXfer+0x2a2>
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	0151      	lsls	r1, r2, #5
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	440a      	add	r2, r1
 80097e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097e8:	0cdb      	lsrs	r3, r3, #19
 80097ea:	04db      	lsls	r3, r3, #19
 80097ec:	6113      	str	r3, [r2, #16]
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	0151      	lsls	r1, r2, #5
 8009800:	697a      	ldr	r2, [r7, #20]
 8009802:	440a      	add	r2, r1
 8009804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009808:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800980c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009810:	6113      	str	r3, [r2, #16]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <USB_EP0StartXfer+0x212>
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	68da      	ldr	r2, [r3, #12]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	619a      	str	r2, [r3, #24]
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	68da      	ldr	r2, [r3, #12]
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	61da      	str	r2, [r3, #28]
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	015a      	lsls	r2, r3, #5
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	4413      	add	r3, r2
 8009832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	0151      	lsls	r1, r2, #5
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	440a      	add	r2, r1
 8009840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009844:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009848:	6113      	str	r3, [r2, #16]
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009856:	691a      	ldr	r2, [r3, #16]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009860:	6939      	ldr	r1, [r7, #16]
 8009862:	0148      	lsls	r0, r1, #5
 8009864:	6979      	ldr	r1, [r7, #20]
 8009866:	4401      	add	r1, r0
 8009868:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800986c:	4313      	orrs	r3, r2
 800986e:	610b      	str	r3, [r1, #16]
 8009870:	79fb      	ldrb	r3, [r7, #7]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d10d      	bne.n	8009892 <USB_EP0StartXfer+0x282>
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d009      	beq.n	8009892 <USB_EP0StartXfer+0x282>
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	6919      	ldr	r1, [r3, #16]
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800988e:	460a      	mov	r2, r1
 8009890:	615a      	str	r2, [r3, #20]
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	4413      	add	r3, r2
 800989a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	2300      	movs	r3, #0
 80098b4:	4618      	mov	r0, r3
 80098b6:	371c      	adds	r7, #28
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <USB_EPStopXfer>:
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
 80098ca:	2300      	movs	r3, #0
 80098cc:	60fb      	str	r3, [r7, #12]
 80098ce:	2300      	movs	r3, #0
 80098d0:	75fb      	strb	r3, [r7, #23]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	613b      	str	r3, [r7, #16]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d14a      	bne.n	8009974 <USB_EPStopXfer+0xb4>
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098f6:	f040 8086 	bne.w	8009a06 <USB_EPStopXfer+0x146>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	4413      	add	r3, r2
 8009904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	7812      	ldrb	r2, [r2, #0]
 800990e:	0151      	lsls	r1, r2, #5
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	440a      	add	r2, r1
 8009914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009918:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	015a      	lsls	r2, r3, #5
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	4413      	add	r3, r2
 8009928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	7812      	ldrb	r2, [r2, #0]
 8009932:	0151      	lsls	r1, r2, #5
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	440a      	add	r2, r1
 8009938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800993c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3301      	adds	r3, #1
 8009946:	60fb      	str	r3, [r7, #12]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f242 7210 	movw	r2, #10000	; 0x2710
 800994e:	4293      	cmp	r3, r2
 8009950:	d902      	bls.n	8009958 <USB_EPStopXfer+0x98>
 8009952:	2301      	movs	r3, #1
 8009954:	75fb      	strb	r3, [r7, #23]
 8009956:	e056      	b.n	8009a06 <USB_EPStopXfer+0x146>
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	4413      	add	r3, r2
 8009962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800996c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009970:	d0e7      	beq.n	8009942 <USB_EPStopXfer+0x82>
 8009972:	e048      	b.n	8009a06 <USB_EPStopXfer+0x146>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	4413      	add	r3, r2
 800997e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800998c:	d13b      	bne.n	8009a06 <USB_EPStopXfer+0x146>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	7812      	ldrb	r2, [r2, #0]
 80099a2:	0151      	lsls	r1, r2, #5
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	440a      	add	r2, r1
 80099a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099b0:	6013      	str	r3, [r2, #0]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	7812      	ldrb	r2, [r2, #0]
 80099c6:	0151      	lsls	r1, r2, #5
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	440a      	add	r2, r1
 80099cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3301      	adds	r3, #1
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f242 7210 	movw	r2, #10000	; 0x2710
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d902      	bls.n	80099ec <USB_EPStopXfer+0x12c>
 80099e6:	2301      	movs	r3, #1
 80099e8:	75fb      	strb	r3, [r7, #23]
 80099ea:	e00c      	b.n	8009a06 <USB_EPStopXfer+0x146>
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a04:	d0e7      	beq.n	80099d6 <USB_EPStopXfer+0x116>
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	371c      	adds	r7, #28
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <USB_WritePacket>:
 8009a14:	b480      	push	{r7}
 8009a16:	b089      	sub	sp, #36	; 0x24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	461a      	mov	r2, r3
 8009a22:	460b      	mov	r3, r1
 8009a24:	71fb      	strb	r3, [r7, #7]
 8009a26:	4613      	mov	r3, r2
 8009a28:	80bb      	strh	r3, [r7, #4]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	617b      	str	r3, [r7, #20]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	61fb      	str	r3, [r7, #28]
 8009a32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d123      	bne.n	8009a82 <USB_WritePacket+0x6e>
 8009a3a:	88bb      	ldrh	r3, [r7, #4]
 8009a3c:	3303      	adds	r3, #3
 8009a3e:	089b      	lsrs	r3, r3, #2
 8009a40:	613b      	str	r3, [r7, #16]
 8009a42:	2300      	movs	r3, #0
 8009a44:	61bb      	str	r3, [r7, #24]
 8009a46:	e018      	b.n	8009a7a <USB_WritePacket+0x66>
 8009a48:	79fb      	ldrb	r3, [r7, #7]
 8009a4a:	031a      	lsls	r2, r3, #12
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a54:	461a      	mov	r2, r3
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	61fb      	str	r3, [r7, #28]
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	3301      	adds	r3, #1
 8009a66:	61fb      	str	r3, [r7, #28]
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	61fb      	str	r3, [r7, #28]
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	3301      	adds	r3, #1
 8009a72:	61fb      	str	r3, [r7, #28]
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	3301      	adds	r3, #1
 8009a78:	61bb      	str	r3, [r7, #24]
 8009a7a:	69ba      	ldr	r2, [r7, #24]
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d3e2      	bcc.n	8009a48 <USB_WritePacket+0x34>
 8009a82:	2300      	movs	r3, #0
 8009a84:	4618      	mov	r0, r3
 8009a86:	3724      	adds	r7, #36	; 0x24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <USB_ReadPacket>:
 8009a90:	b480      	push	{r7}
 8009a92:	b08b      	sub	sp, #44	; 0x2c
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	80fb      	strh	r3, [r7, #6]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	61bb      	str	r3, [r7, #24]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8009aa6:	88fb      	ldrh	r3, [r7, #6]
 8009aa8:	089b      	lsrs	r3, r3, #2
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	617b      	str	r3, [r7, #20]
 8009aae:	88fb      	ldrh	r3, [r7, #6]
 8009ab0:	f003 0303 	and.w	r3, r3, #3
 8009ab4:	83fb      	strh	r3, [r7, #30]
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	623b      	str	r3, [r7, #32]
 8009aba:	e014      	b.n	8009ae6 <USB_ReadPacket+0x56>
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	3301      	adds	r3, #1
 8009acc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	3301      	adds	r3, #1
 8009ade:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	623b      	str	r3, [r7, #32]
 8009ae6:	6a3a      	ldr	r2, [r7, #32]
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d3e6      	bcc.n	8009abc <USB_ReadPacket+0x2c>
 8009aee:	8bfb      	ldrh	r3, [r7, #30]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d01e      	beq.n	8009b32 <USB_ReadPacket+0xa2>
 8009af4:	2300      	movs	r3, #0
 8009af6:	623b      	str	r3, [r7, #32]
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009afe:	461a      	mov	r2, r3
 8009b00:	f107 0310 	add.w	r3, r7, #16
 8009b04:	6812      	ldr	r2, [r2, #0]
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	6a3b      	ldr	r3, [r7, #32]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	fa22 f303 	lsr.w	r3, r2, r3
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	623b      	str	r3, [r7, #32]
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	3301      	adds	r3, #1
 8009b24:	627b      	str	r3, [r7, #36]	; 0x24
 8009b26:	8bfb      	ldrh	r3, [r7, #30]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	83fb      	strh	r3, [r7, #30]
 8009b2c:	8bfb      	ldrh	r3, [r7, #30]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1ea      	bne.n	8009b08 <USB_ReadPacket+0x78>
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	4618      	mov	r0, r3
 8009b36:	372c      	adds	r7, #44	; 0x2c
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <USB_EPSetStall>:
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	60fb      	str	r3, [r7, #12]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	60bb      	str	r3, [r7, #8]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	785b      	ldrb	r3, [r3, #1]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d12c      	bne.n	8009bb6 <USB_EPSetStall+0x76>
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	db12      	blt.n	8009b94 <USB_EPSetStall+0x54>
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00f      	beq.n	8009b94 <USB_EPSetStall+0x54>
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	0151      	lsls	r1, r2, #5
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	440a      	add	r2, r1
 8009b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b92:	6013      	str	r3, [r2, #0]
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	0151      	lsls	r1, r2, #5
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	440a      	add	r2, r1
 8009baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	e02b      	b.n	8009c0e <USB_EPSetStall+0xce>
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	015a      	lsls	r2, r3, #5
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	db12      	blt.n	8009bee <USB_EPSetStall+0xae>
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00f      	beq.n	8009bee <USB_EPSetStall+0xae>
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	0151      	lsls	r1, r2, #5
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	440a      	add	r2, r1
 8009be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009be8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bec:	6013      	str	r3, [r2, #0]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	0151      	lsls	r1, r2, #5
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	440a      	add	r2, r1
 8009c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c0c:	6013      	str	r3, [r2, #0]
 8009c0e:	2300      	movs	r3, #0
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <USB_EPClearStall>:
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	60fb      	str	r3, [r7, #12]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	60bb      	str	r3, [r7, #8]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	785b      	ldrb	r3, [r3, #1]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d128      	bne.n	8009c8a <USB_EPClearStall+0x6e>
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	0151      	lsls	r1, r2, #5
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	440a      	add	r2, r1
 8009c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c56:	6013      	str	r3, [r2, #0]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	791b      	ldrb	r3, [r3, #4]
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d003      	beq.n	8009c68 <USB_EPClearStall+0x4c>
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	791b      	ldrb	r3, [r3, #4]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d138      	bne.n	8009cda <USB_EPClearStall+0xbe>
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	0151      	lsls	r1, r2, #5
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	440a      	add	r2, r1
 8009c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c86:	6013      	str	r3, [r2, #0]
 8009c88:	e027      	b.n	8009cda <USB_EPClearStall+0xbe>
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	0151      	lsls	r1, r2, #5
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	440a      	add	r2, r1
 8009ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ca4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ca8:	6013      	str	r3, [r2, #0]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	791b      	ldrb	r3, [r3, #4]
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d003      	beq.n	8009cba <USB_EPClearStall+0x9e>
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	791b      	ldrb	r3, [r3, #4]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d10f      	bne.n	8009cda <USB_EPClearStall+0xbe>
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	015a      	lsls	r2, r3, #5
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	0151      	lsls	r1, r2, #5
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	440a      	add	r2, r1
 8009cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cd8:	6013      	str	r3, [r2, #0]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <USB_SetDevAddress>:
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	60fb      	str	r3, [r7, #12]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d0a:	6013      	str	r3, [r2, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	78fb      	ldrb	r3, [r7, #3]
 8009d16:	011b      	lsls	r3, r3, #4
 8009d18:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d1c:	68f9      	ldr	r1, [r7, #12]
 8009d1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d22:	4313      	orrs	r3, r2
 8009d24:	600b      	str	r3, [r1, #0]
 8009d26:	2300      	movs	r3, #0
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <USB_DevConnect>:
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d4e:	f023 0303 	bic.w	r3, r3, #3
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d62:	f023 0302 	bic.w	r3, r3, #2
 8009d66:	6053      	str	r3, [r2, #4]
 8009d68:	2300      	movs	r3, #0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <USB_DevDisconnect>:
 8009d76:	b480      	push	{r7}
 8009d78:	b085      	sub	sp, #20
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	60fb      	str	r3, [r7, #12]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d90:	f023 0303 	bic.w	r3, r3, #3
 8009d94:	6013      	str	r3, [r2, #0]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009da4:	f043 0302 	orr.w	r3, r3, #2
 8009da8:	6053      	str	r3, [r2, #4]
 8009daa:	2300      	movs	r3, #0
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <USB_ReadInterrupts>:
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	4013      	ands	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <USB_ReadDevAllOutEpInterrupt>:
 8009dde:	b480      	push	{r7}
 8009de0:	b085      	sub	sp, #20
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	60fb      	str	r3, [r7, #12]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	60bb      	str	r3, [r7, #8]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	4013      	ands	r3, r2
 8009e00:	60bb      	str	r3, [r7, #8]
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	0c1b      	lsrs	r3, r3, #16
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <USB_ReadDevAllInEpInterrupt>:
 8009e12:	b480      	push	{r7}
 8009e14:	b085      	sub	sp, #20
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	60bb      	str	r3, [r7, #8]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	4013      	ands	r3, r2
 8009e34:	60bb      	str	r3, [r7, #8]
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <USB_ReadDevOutEPInterrupt>:
 8009e46:	b480      	push	{r7}
 8009e48:	b085      	sub	sp, #20
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	70fb      	strb	r3, [r7, #3]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	60fb      	str	r3, [r7, #12]
 8009e56:	78fb      	ldrb	r3, [r7, #3]
 8009e58:	015a      	lsls	r2, r3, #5
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	60bb      	str	r3, [r7, #8]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	4013      	ands	r3, r2
 8009e72:	60bb      	str	r3, [r7, #8]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	4618      	mov	r0, r3
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <USB_ReadDevInEPInterrupt>:
 8009e82:	b480      	push	{r7}
 8009e84:	b087      	sub	sp, #28
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70fb      	strb	r3, [r7, #3]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	617b      	str	r3, [r7, #20]
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	613b      	str	r3, [r7, #16]
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea4:	60fb      	str	r3, [r7, #12]
 8009ea6:	78fb      	ldrb	r3, [r7, #3]
 8009ea8:	f003 030f 	and.w	r3, r3, #15
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb2:	01db      	lsls	r3, r3, #7
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	613b      	str	r3, [r7, #16]
 8009ebc:	78fb      	ldrb	r3, [r7, #3]
 8009ebe:	015a      	lsls	r2, r3, #5
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	4013      	ands	r3, r2
 8009ece:	60bb      	str	r3, [r7, #8]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	371c      	adds	r7, #28
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <USB_GetMode>:
 8009ede:	b480      	push	{r7}
 8009ee0:	b083      	sub	sp, #12
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	4618      	mov	r0, r3
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <USB_ActivateSetup>:
 8009efa:	b480      	push	{r7}
 8009efc:	b085      	sub	sp, #20
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	60fb      	str	r3, [r7, #12]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009f18:	f023 0307 	bic.w	r3, r3, #7
 8009f1c:	6013      	str	r3, [r2, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f30:	6053      	str	r3, [r2, #4]
 8009f32:	2300      	movs	r3, #0
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <USB_EP0_OutStart>:
 8009f40:	b480      	push	{r7}
 8009f42:	b087      	sub	sp, #28
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	607a      	str	r2, [r7, #4]
 8009f4c:	72fb      	strb	r3, [r7, #11]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	617b      	str	r3, [r7, #20]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	333c      	adds	r3, #60	; 0x3c
 8009f56:	3304      	adds	r3, #4
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	613b      	str	r3, [r7, #16]
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	4a26      	ldr	r2, [pc, #152]	; (8009ff8 <USB_EP0_OutStart+0xb8>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d90a      	bls.n	8009f7a <USB_EP0_OutStart+0x3a>
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f74:	d101      	bne.n	8009f7a <USB_EP0_OutStart+0x3a>
 8009f76:	2300      	movs	r3, #0
 8009f78:	e037      	b.n	8009fea <USB_EP0_OutStart+0xaa>
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f80:	461a      	mov	r2, r3
 8009f82:	2300      	movs	r3, #0
 8009f84:	6113      	str	r3, [r2, #16]
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f98:	6113      	str	r3, [r2, #16]
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa8:	f043 0318 	orr.w	r3, r3, #24
 8009fac:	6113      	str	r3, [r2, #16]
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fbc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009fc0:	6113      	str	r3, [r2, #16]
 8009fc2:	7afb      	ldrb	r3, [r7, #11]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d10f      	bne.n	8009fe8 <USB_EP0_OutStart+0xa8>
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fce:	461a      	mov	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6153      	str	r3, [r2, #20]
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	697a      	ldr	r2, [r7, #20]
 8009fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fe2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009fe6:	6013      	str	r3, [r2, #0]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4618      	mov	r0, r3
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	4f54300a 	.word	0x4f54300a

08009ffc <USB_CoreReset>:
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	2300      	movs	r3, #0
 800a006:	60fb      	str	r3, [r7, #12]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3301      	adds	r3, #1
 800a00c:	60fb      	str	r3, [r7, #12]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	4a13      	ldr	r2, [pc, #76]	; (800a060 <USB_CoreReset+0x64>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d901      	bls.n	800a01a <USB_CoreReset+0x1e>
 800a016:	2303      	movs	r3, #3
 800a018:	e01b      	b.n	800a052 <USB_CoreReset+0x56>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	daf2      	bge.n	800a008 <USB_CoreReset+0xc>
 800a022:	2300      	movs	r3, #0
 800a024:	60fb      	str	r3, [r7, #12]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	f043 0201 	orr.w	r2, r3, #1
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	611a      	str	r2, [r3, #16]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3301      	adds	r3, #1
 800a036:	60fb      	str	r3, [r7, #12]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	4a09      	ldr	r2, [pc, #36]	; (800a060 <USB_CoreReset+0x64>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d901      	bls.n	800a044 <USB_CoreReset+0x48>
 800a040:	2303      	movs	r3, #3
 800a042:	e006      	b.n	800a052 <USB_CoreReset+0x56>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	f003 0301 	and.w	r3, r3, #1
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d0f0      	beq.n	800a032 <USB_CoreReset+0x36>
 800a050:	2300      	movs	r3, #0
 800a052:	4618      	mov	r0, r3
 800a054:	3714      	adds	r7, #20
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	00030d40 	.word	0x00030d40

0800a064 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a070:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a074:	f002 fc8a 	bl	800c98c <USBD_static_malloc>
 800a078:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d109      	bne.n	800a094 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	32b0      	adds	r2, #176	; 0xb0
 800a08a:	2100      	movs	r1, #0
 800a08c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a090:	2302      	movs	r3, #2
 800a092:	e0d4      	b.n	800a23e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a094:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a098:	2100      	movs	r1, #0
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f003 fa59 	bl	800d552 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	32b0      	adds	r2, #176	; 0xb0
 800a0aa:	68f9      	ldr	r1, [r7, #12]
 800a0ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	32b0      	adds	r2, #176	; 0xb0
 800a0ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	7c1b      	ldrb	r3, [r3, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d138      	bne.n	800a13e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a0cc:	4b5e      	ldr	r3, [pc, #376]	; (800a248 <USBD_CDC_Init+0x1e4>)
 800a0ce:	7819      	ldrb	r1, [r3, #0]
 800a0d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f002 fb35 	bl	800c746 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a0dc:	4b5a      	ldr	r3, [pc, #360]	; (800a248 <USBD_CDC_Init+0x1e4>)
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	f003 020f 	and.w	r2, r3, #15
 800a0e4:	6879      	ldr	r1, [r7, #4]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	4413      	add	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	440b      	add	r3, r1
 800a0f0:	3324      	adds	r3, #36	; 0x24
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a0f6:	4b55      	ldr	r3, [pc, #340]	; (800a24c <USBD_CDC_Init+0x1e8>)
 800a0f8:	7819      	ldrb	r1, [r3, #0]
 800a0fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0fe:	2202      	movs	r2, #2
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f002 fb20 	bl	800c746 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a106:	4b51      	ldr	r3, [pc, #324]	; (800a24c <USBD_CDC_Init+0x1e8>)
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	f003 020f 	and.w	r2, r3, #15
 800a10e:	6879      	ldr	r1, [r7, #4]
 800a110:	4613      	mov	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	440b      	add	r3, r1
 800a11a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a11e:	2201      	movs	r2, #1
 800a120:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a122:	4b4b      	ldr	r3, [pc, #300]	; (800a250 <USBD_CDC_Init+0x1ec>)
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	f003 020f 	and.w	r2, r3, #15
 800a12a:	6879      	ldr	r1, [r7, #4]
 800a12c:	4613      	mov	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	440b      	add	r3, r1
 800a136:	3326      	adds	r3, #38	; 0x26
 800a138:	2210      	movs	r2, #16
 800a13a:	801a      	strh	r2, [r3, #0]
 800a13c:	e035      	b.n	800a1aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a13e:	4b42      	ldr	r3, [pc, #264]	; (800a248 <USBD_CDC_Init+0x1e4>)
 800a140:	7819      	ldrb	r1, [r3, #0]
 800a142:	2340      	movs	r3, #64	; 0x40
 800a144:	2202      	movs	r2, #2
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f002 fafd 	bl	800c746 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a14c:	4b3e      	ldr	r3, [pc, #248]	; (800a248 <USBD_CDC_Init+0x1e4>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	f003 020f 	and.w	r2, r3, #15
 800a154:	6879      	ldr	r1, [r7, #4]
 800a156:	4613      	mov	r3, r2
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	440b      	add	r3, r1
 800a160:	3324      	adds	r3, #36	; 0x24
 800a162:	2201      	movs	r2, #1
 800a164:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a166:	4b39      	ldr	r3, [pc, #228]	; (800a24c <USBD_CDC_Init+0x1e8>)
 800a168:	7819      	ldrb	r1, [r3, #0]
 800a16a:	2340      	movs	r3, #64	; 0x40
 800a16c:	2202      	movs	r2, #2
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f002 fae9 	bl	800c746 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a174:	4b35      	ldr	r3, [pc, #212]	; (800a24c <USBD_CDC_Init+0x1e8>)
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	f003 020f 	and.w	r2, r3, #15
 800a17c:	6879      	ldr	r1, [r7, #4]
 800a17e:	4613      	mov	r3, r2
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4413      	add	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	440b      	add	r3, r1
 800a188:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a18c:	2201      	movs	r2, #1
 800a18e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a190:	4b2f      	ldr	r3, [pc, #188]	; (800a250 <USBD_CDC_Init+0x1ec>)
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	f003 020f 	and.w	r2, r3, #15
 800a198:	6879      	ldr	r1, [r7, #4]
 800a19a:	4613      	mov	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4413      	add	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	440b      	add	r3, r1
 800a1a4:	3326      	adds	r3, #38	; 0x26
 800a1a6:	2210      	movs	r2, #16
 800a1a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a1aa:	4b29      	ldr	r3, [pc, #164]	; (800a250 <USBD_CDC_Init+0x1ec>)
 800a1ac:	7819      	ldrb	r1, [r3, #0]
 800a1ae:	2308      	movs	r3, #8
 800a1b0:	2203      	movs	r2, #3
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f002 fac7 	bl	800c746 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a1b8:	4b25      	ldr	r3, [pc, #148]	; (800a250 <USBD_CDC_Init+0x1ec>)
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	f003 020f 	and.w	r2, r3, #15
 800a1c0:	6879      	ldr	r1, [r7, #4]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	4413      	add	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	440b      	add	r3, r1
 800a1cc:	3324      	adds	r3, #36	; 0x24
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	33b0      	adds	r3, #176	; 0xb0
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a208:	2302      	movs	r3, #2
 800a20a:	e018      	b.n	800a23e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	7c1b      	ldrb	r3, [r3, #16]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a214:	4b0d      	ldr	r3, [pc, #52]	; (800a24c <USBD_CDC_Init+0x1e8>)
 800a216:	7819      	ldrb	r1, [r3, #0]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a21e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f002 fb7e 	bl	800c924 <USBD_LL_PrepareReceive>
 800a228:	e008      	b.n	800a23c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a22a:	4b08      	ldr	r3, [pc, #32]	; (800a24c <USBD_CDC_Init+0x1e8>)
 800a22c:	7819      	ldrb	r1, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a234:	2340      	movs	r3, #64	; 0x40
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f002 fb74 	bl	800c924 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	200000bb 	.word	0x200000bb
 800a24c:	200000bc 	.word	0x200000bc
 800a250:	200000bd 	.word	0x200000bd

0800a254 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a260:	4b3a      	ldr	r3, [pc, #232]	; (800a34c <USBD_CDC_DeInit+0xf8>)
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f002 fa93 	bl	800c792 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a26c:	4b37      	ldr	r3, [pc, #220]	; (800a34c <USBD_CDC_DeInit+0xf8>)
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	f003 020f 	and.w	r2, r3, #15
 800a274:	6879      	ldr	r1, [r7, #4]
 800a276:	4613      	mov	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	440b      	add	r3, r1
 800a280:	3324      	adds	r3, #36	; 0x24
 800a282:	2200      	movs	r2, #0
 800a284:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a286:	4b32      	ldr	r3, [pc, #200]	; (800a350 <USBD_CDC_DeInit+0xfc>)
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	4619      	mov	r1, r3
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f002 fa80 	bl	800c792 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a292:	4b2f      	ldr	r3, [pc, #188]	; (800a350 <USBD_CDC_DeInit+0xfc>)
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	f003 020f 	and.w	r2, r3, #15
 800a29a:	6879      	ldr	r1, [r7, #4]
 800a29c:	4613      	mov	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	440b      	add	r3, r1
 800a2a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a2ae:	4b29      	ldr	r3, [pc, #164]	; (800a354 <USBD_CDC_DeInit+0x100>)
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f002 fa6c 	bl	800c792 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a2ba:	4b26      	ldr	r3, [pc, #152]	; (800a354 <USBD_CDC_DeInit+0x100>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	f003 020f 	and.w	r2, r3, #15
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	440b      	add	r3, r1
 800a2ce:	3324      	adds	r3, #36	; 0x24
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a2d4:	4b1f      	ldr	r3, [pc, #124]	; (800a354 <USBD_CDC_DeInit+0x100>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	f003 020f 	and.w	r2, r3, #15
 800a2dc:	6879      	ldr	r1, [r7, #4]
 800a2de:	4613      	mov	r3, r2
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4413      	add	r3, r2
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	440b      	add	r3, r1
 800a2e8:	3326      	adds	r3, #38	; 0x26
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	32b0      	adds	r2, #176	; 0xb0
 800a2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d01f      	beq.n	800a340 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	33b0      	adds	r3, #176	; 0xb0
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	32b0      	adds	r2, #176	; 0xb0
 800a31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a322:	4618      	mov	r0, r3
 800a324:	f002 fb40 	bl	800c9a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	32b0      	adds	r2, #176	; 0xb0
 800a332:	2100      	movs	r1, #0
 800a334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	200000bb 	.word	0x200000bb
 800a350:	200000bc 	.word	0x200000bc
 800a354:	200000bd 	.word	0x200000bd

0800a358 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	32b0      	adds	r2, #176	; 0xb0
 800a36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a370:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a372:	2300      	movs	r3, #0
 800a374:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a376:	2300      	movs	r3, #0
 800a378:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a384:	2303      	movs	r3, #3
 800a386:	e0bf      	b.n	800a508 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a390:	2b00      	cmp	r3, #0
 800a392:	d050      	beq.n	800a436 <USBD_CDC_Setup+0xde>
 800a394:	2b20      	cmp	r3, #32
 800a396:	f040 80af 	bne.w	800a4f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	88db      	ldrh	r3, [r3, #6]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d03a      	beq.n	800a418 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	b25b      	sxtb	r3, r3
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	da1b      	bge.n	800a3e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	33b0      	adds	r3, #176	; 0xb0
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4413      	add	r3, r2
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	683a      	ldr	r2, [r7, #0]
 800a3c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a3c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	88d2      	ldrh	r2, [r2, #6]
 800a3c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	88db      	ldrh	r3, [r3, #6]
 800a3ce:	2b07      	cmp	r3, #7
 800a3d0:	bf28      	it	cs
 800a3d2:	2307      	movcs	r3, #7
 800a3d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	89fa      	ldrh	r2, [r7, #14]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f001 fd89 	bl	800bef4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a3e2:	e090      	b.n	800a506 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	785a      	ldrb	r2, [r3, #1]
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	88db      	ldrh	r3, [r3, #6]
 800a3f2:	2b3f      	cmp	r3, #63	; 0x3f
 800a3f4:	d803      	bhi.n	800a3fe <USBD_CDC_Setup+0xa6>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	88db      	ldrh	r3, [r3, #6]
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	e000      	b.n	800a400 <USBD_CDC_Setup+0xa8>
 800a3fe:	2240      	movs	r2, #64	; 0x40
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a406:	6939      	ldr	r1, [r7, #16]
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a40e:	461a      	mov	r2, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f001 fd9b 	bl	800bf4c <USBD_CtlPrepareRx>
      break;
 800a416:	e076      	b.n	800a506 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	33b0      	adds	r3, #176	; 0xb0
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	7850      	ldrb	r0, [r2, #1]
 800a42e:	2200      	movs	r2, #0
 800a430:	6839      	ldr	r1, [r7, #0]
 800a432:	4798      	blx	r3
      break;
 800a434:	e067      	b.n	800a506 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	785b      	ldrb	r3, [r3, #1]
 800a43a:	2b0b      	cmp	r3, #11
 800a43c:	d851      	bhi.n	800a4e2 <USBD_CDC_Setup+0x18a>
 800a43e:	a201      	add	r2, pc, #4	; (adr r2, 800a444 <USBD_CDC_Setup+0xec>)
 800a440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a444:	0800a475 	.word	0x0800a475
 800a448:	0800a4f1 	.word	0x0800a4f1
 800a44c:	0800a4e3 	.word	0x0800a4e3
 800a450:	0800a4e3 	.word	0x0800a4e3
 800a454:	0800a4e3 	.word	0x0800a4e3
 800a458:	0800a4e3 	.word	0x0800a4e3
 800a45c:	0800a4e3 	.word	0x0800a4e3
 800a460:	0800a4e3 	.word	0x0800a4e3
 800a464:	0800a4e3 	.word	0x0800a4e3
 800a468:	0800a4e3 	.word	0x0800a4e3
 800a46c:	0800a49f 	.word	0x0800a49f
 800a470:	0800a4c9 	.word	0x0800a4c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d107      	bne.n	800a490 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a480:	f107 030a 	add.w	r3, r7, #10
 800a484:	2202      	movs	r2, #2
 800a486:	4619      	mov	r1, r3
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 fd33 	bl	800bef4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a48e:	e032      	b.n	800a4f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a490:	6839      	ldr	r1, [r7, #0]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f001 fcbd 	bl	800be12 <USBD_CtlError>
            ret = USBD_FAIL;
 800a498:	2303      	movs	r3, #3
 800a49a:	75fb      	strb	r3, [r7, #23]
          break;
 800a49c:	e02b      	b.n	800a4f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	d107      	bne.n	800a4ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a4aa:	f107 030d 	add.w	r3, r7, #13
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f001 fd1e 	bl	800bef4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a4b8:	e01d      	b.n	800a4f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a4ba:	6839      	ldr	r1, [r7, #0]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f001 fca8 	bl	800be12 <USBD_CtlError>
            ret = USBD_FAIL;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	75fb      	strb	r3, [r7, #23]
          break;
 800a4c6:	e016      	b.n	800a4f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b03      	cmp	r3, #3
 800a4d2:	d00f      	beq.n	800a4f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a4d4:	6839      	ldr	r1, [r7, #0]
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f001 fc9b 	bl	800be12 <USBD_CtlError>
            ret = USBD_FAIL;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a4e0:	e008      	b.n	800a4f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f001 fc94 	bl	800be12 <USBD_CtlError>
          ret = USBD_FAIL;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	75fb      	strb	r3, [r7, #23]
          break;
 800a4ee:	e002      	b.n	800a4f6 <USBD_CDC_Setup+0x19e>
          break;
 800a4f0:	bf00      	nop
 800a4f2:	e008      	b.n	800a506 <USBD_CDC_Setup+0x1ae>
          break;
 800a4f4:	bf00      	nop
      }
      break;
 800a4f6:	e006      	b.n	800a506 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f001 fc89 	bl	800be12 <USBD_CtlError>
      ret = USBD_FAIL;
 800a500:	2303      	movs	r3, #3
 800a502:	75fb      	strb	r3, [r7, #23]
      break;
 800a504:	bf00      	nop
  }

  return (uint8_t)ret;
 800a506:	7dfb      	ldrb	r3, [r7, #23]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3718      	adds	r7, #24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	460b      	mov	r3, r1
 800a51a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a522:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	32b0      	adds	r2, #176	; 0xb0
 800a52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a536:	2303      	movs	r3, #3
 800a538:	e065      	b.n	800a606 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	32b0      	adds	r2, #176	; 0xb0
 800a544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a548:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a54a:	78fb      	ldrb	r3, [r7, #3]
 800a54c:	f003 020f 	and.w	r2, r3, #15
 800a550:	6879      	ldr	r1, [r7, #4]
 800a552:	4613      	mov	r3, r2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	440b      	add	r3, r1
 800a55c:	3318      	adds	r3, #24
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d02f      	beq.n	800a5c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	f003 020f 	and.w	r2, r3, #15
 800a56a:	6879      	ldr	r1, [r7, #4]
 800a56c:	4613      	mov	r3, r2
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	4413      	add	r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	440b      	add	r3, r1
 800a576:	3318      	adds	r3, #24
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	78fb      	ldrb	r3, [r7, #3]
 800a57c:	f003 010f 	and.w	r1, r3, #15
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	460b      	mov	r3, r1
 800a584:	00db      	lsls	r3, r3, #3
 800a586:	440b      	add	r3, r1
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	4403      	add	r3, r0
 800a58c:	3348      	adds	r3, #72	; 0x48
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	fbb2 f1f3 	udiv	r1, r2, r3
 800a594:	fb01 f303 	mul.w	r3, r1, r3
 800a598:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d112      	bne.n	800a5c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a59e:	78fb      	ldrb	r3, [r7, #3]
 800a5a0:	f003 020f 	and.w	r2, r3, #15
 800a5a4:	6879      	ldr	r1, [r7, #4]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	440b      	add	r3, r1
 800a5b0:	3318      	adds	r3, #24
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a5b6:	78f9      	ldrb	r1, [r7, #3]
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f002 f990 	bl	800c8e2 <USBD_LL_Transmit>
 800a5c2:	e01f      	b.n	800a604 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	33b0      	adds	r3, #176	; 0xb0
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d010      	beq.n	800a604 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	33b0      	adds	r3, #176	; 0xb0
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a5fa:	68ba      	ldr	r2, [r7, #8]
 800a5fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a600:	78fa      	ldrb	r2, [r7, #3]
 800a602:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	460b      	mov	r3, r1
 800a618:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	32b0      	adds	r2, #176	; 0xb0
 800a624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a628:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	32b0      	adds	r2, #176	; 0xb0
 800a634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d101      	bne.n	800a640 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e01a      	b.n	800a676 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a640:	78fb      	ldrb	r3, [r7, #3]
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f002 f98e 	bl	800c966 <USBD_LL_GetRxDataSize>
 800a64a:	4602      	mov	r2, r0
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	33b0      	adds	r3, #176	; 0xb0
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4413      	add	r3, r2
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a670:	4611      	mov	r1, r2
 800a672:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b084      	sub	sp, #16
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	32b0      	adds	r2, #176	; 0xb0
 800a690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a694:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e025      	b.n	800a6ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	33b0      	adds	r3, #176	; 0xb0
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d01a      	beq.n	800a6ea <USBD_CDC_EP0_RxReady+0x6c>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a6ba:	2bff      	cmp	r3, #255	; 0xff
 800a6bc:	d015      	beq.n	800a6ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	33b0      	adds	r3, #176	; 0xb0
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a6d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a6de:	b292      	uxth	r2, r2
 800a6e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	22ff      	movs	r2, #255	; 0xff
 800a6e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a6fc:	2182      	movs	r1, #130	; 0x82
 800a6fe:	4818      	ldr	r0, [pc, #96]	; (800a760 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a700:	f000 fd4f 	bl	800b1a2 <USBD_GetEpDesc>
 800a704:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a706:	2101      	movs	r1, #1
 800a708:	4815      	ldr	r0, [pc, #84]	; (800a760 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a70a:	f000 fd4a 	bl	800b1a2 <USBD_GetEpDesc>
 800a70e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a710:	2181      	movs	r1, #129	; 0x81
 800a712:	4813      	ldr	r0, [pc, #76]	; (800a760 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a714:	f000 fd45 	bl	800b1a2 <USBD_GetEpDesc>
 800a718:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d002      	beq.n	800a726 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	2210      	movs	r2, #16
 800a724:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d006      	beq.n	800a73a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	2200      	movs	r2, #0
 800a730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a734:	711a      	strb	r2, [r3, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d006      	beq.n	800a74e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a748:	711a      	strb	r2, [r3, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2243      	movs	r2, #67	; 0x43
 800a752:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a754:	4b02      	ldr	r3, [pc, #8]	; (800a760 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a756:	4618      	mov	r0, r3
 800a758:	3718      	adds	r7, #24
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20000078 	.word	0x20000078

0800a764 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a76c:	2182      	movs	r1, #130	; 0x82
 800a76e:	4818      	ldr	r0, [pc, #96]	; (800a7d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a770:	f000 fd17 	bl	800b1a2 <USBD_GetEpDesc>
 800a774:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a776:	2101      	movs	r1, #1
 800a778:	4815      	ldr	r0, [pc, #84]	; (800a7d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a77a:	f000 fd12 	bl	800b1a2 <USBD_GetEpDesc>
 800a77e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a780:	2181      	movs	r1, #129	; 0x81
 800a782:	4813      	ldr	r0, [pc, #76]	; (800a7d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a784:	f000 fd0d 	bl	800b1a2 <USBD_GetEpDesc>
 800a788:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	2210      	movs	r2, #16
 800a794:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d006      	beq.n	800a7aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	711a      	strb	r2, [r3, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f042 0202 	orr.w	r2, r2, #2
 800a7a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d006      	beq.n	800a7be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	711a      	strb	r2, [r3, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f042 0202 	orr.w	r2, r2, #2
 800a7bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2243      	movs	r2, #67	; 0x43
 800a7c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a7c4:	4b02      	ldr	r3, [pc, #8]	; (800a7d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3718      	adds	r7, #24
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20000078 	.word	0x20000078

0800a7d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a7dc:	2182      	movs	r1, #130	; 0x82
 800a7de:	4818      	ldr	r0, [pc, #96]	; (800a840 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7e0:	f000 fcdf 	bl	800b1a2 <USBD_GetEpDesc>
 800a7e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	4815      	ldr	r0, [pc, #84]	; (800a840 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7ea:	f000 fcda 	bl	800b1a2 <USBD_GetEpDesc>
 800a7ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a7f0:	2181      	movs	r1, #129	; 0x81
 800a7f2:	4813      	ldr	r0, [pc, #76]	; (800a840 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a7f4:	f000 fcd5 	bl	800b1a2 <USBD_GetEpDesc>
 800a7f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d002      	beq.n	800a806 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	2210      	movs	r2, #16
 800a804:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d006      	beq.n	800a81a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	2200      	movs	r2, #0
 800a810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a814:	711a      	strb	r2, [r3, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d006      	beq.n	800a82e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a828:	711a      	strb	r2, [r3, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2243      	movs	r2, #67	; 0x43
 800a832:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a834:	4b02      	ldr	r3, [pc, #8]	; (800a840 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a836:	4618      	mov	r0, r3
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	20000078 	.word	0x20000078

0800a844 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	220a      	movs	r2, #10
 800a850:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a852:	4b03      	ldr	r3, [pc, #12]	; (800a860 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a854:	4618      	mov	r0, r3
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr
 800a860:	20000034 	.word	0x20000034

0800a864 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a874:	2303      	movs	r3, #3
 800a876:	e009      	b.n	800a88c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	33b0      	adds	r3, #176	; 0xb0
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	32b0      	adds	r2, #176	; 0xb0
 800a8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d101      	bne.n	800a8be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e008      	b.n	800a8d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	371c      	adds	r7, #28
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	32b0      	adds	r2, #176	; 0xb0
 800a8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d101      	bne.n	800a900 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	e004      	b.n	800a90a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
	...

0800a918 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	32b0      	adds	r2, #176	; 0xb0
 800a92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a930:	2301      	movs	r3, #1
 800a932:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	32b0      	adds	r2, #176	; 0xb0
 800a93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a946:	2303      	movs	r3, #3
 800a948:	e025      	b.n	800a996 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a950:	2b00      	cmp	r3, #0
 800a952:	d11f      	bne.n	800a994 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2201      	movs	r2, #1
 800a958:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a95c:	4b10      	ldr	r3, [pc, #64]	; (800a9a0 <USBD_CDC_TransmitPacket+0x88>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	f003 020f 	and.w	r2, r3, #15
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	4613      	mov	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4413      	add	r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	4403      	add	r3, r0
 800a976:	3318      	adds	r3, #24
 800a978:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a97a:	4b09      	ldr	r3, [pc, #36]	; (800a9a0 <USBD_CDC_TransmitPacket+0x88>)
 800a97c:	7819      	ldrb	r1, [r3, #0]
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f001 ffa9 	bl	800c8e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a994:	7bfb      	ldrb	r3, [r7, #15]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	200000bb 	.word	0x200000bb

0800a9a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	32b0      	adds	r2, #176	; 0xb0
 800a9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	32b0      	adds	r2, #176	; 0xb0
 800a9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	e018      	b.n	800aa04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	7c1b      	ldrb	r3, [r3, #16]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10a      	bne.n	800a9f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9da:	4b0c      	ldr	r3, [pc, #48]	; (800aa0c <USBD_CDC_ReceivePacket+0x68>)
 800a9dc:	7819      	ldrb	r1, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f001 ff9b 	bl	800c924 <USBD_LL_PrepareReceive>
 800a9ee:	e008      	b.n	800aa02 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9f0:	4b06      	ldr	r3, [pc, #24]	; (800aa0c <USBD_CDC_ReceivePacket+0x68>)
 800a9f2:	7819      	ldrb	r1, [r3, #0]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9fa:	2340      	movs	r3, #64	; 0x40
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f001 ff91 	bl	800c924 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	200000bc 	.word	0x200000bc

0800aa10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d101      	bne.n	800aa28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa24:	2303      	movs	r3, #3
 800aa26:	e01f      	b.n	800aa68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2201      	movs	r2, #1
 800aa52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	79fa      	ldrb	r2, [r7, #7]
 800aa5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f001 fe0b 	bl	800c678 <USBD_LL_Init>
 800aa62:	4603      	mov	r3, r0
 800aa64:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aa66:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3718      	adds	r7, #24
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e025      	b.n	800aad4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	32ae      	adds	r2, #174	; 0xae
 800aa9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00f      	beq.n	800aac4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	32ae      	adds	r2, #174	; 0xae
 800aaae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab4:	f107 020e 	add.w	r2, r7, #14
 800aab8:	4610      	mov	r0, r2
 800aaba:	4798      	blx	r3
 800aabc:	4602      	mov	r2, r0
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aaca:	1c5a      	adds	r2, r3, #1
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aad2:	2300      	movs	r3, #0
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f001 fe13 	bl	800c710 <USBD_LL_Start>
 800aaea:	4603      	mov	r3, r0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aafc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	370c      	adds	r7, #12
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b084      	sub	sp, #16
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
 800ab12:	460b      	mov	r3, r1
 800ab14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab16:	2300      	movs	r3, #0
 800ab18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d009      	beq.n	800ab38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	78fa      	ldrb	r2, [r7, #3]
 800ab2e:	4611      	mov	r1, r2
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	4798      	blx	r3
 800ab34:	4603      	mov	r3, r0
 800ab36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b084      	sub	sp, #16
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	78fa      	ldrb	r2, [r7, #3]
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	4798      	blx	r3
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b084      	sub	sp, #16
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab86:	6839      	ldr	r1, [r7, #0]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f001 f908 	bl	800bd9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2201      	movs	r2, #1
 800ab92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800abaa:	f003 031f 	and.w	r3, r3, #31
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d01a      	beq.n	800abe8 <USBD_LL_SetupStage+0x72>
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d822      	bhi.n	800abfc <USBD_LL_SetupStage+0x86>
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d002      	beq.n	800abc0 <USBD_LL_SetupStage+0x4a>
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d00a      	beq.n	800abd4 <USBD_LL_SetupStage+0x5e>
 800abbe:	e01d      	b.n	800abfc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abc6:	4619      	mov	r1, r3
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fb5f 	bl	800b28c <USBD_StdDevReq>
 800abce:	4603      	mov	r3, r0
 800abd0:	73fb      	strb	r3, [r7, #15]
      break;
 800abd2:	e020      	b.n	800ac16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abda:	4619      	mov	r1, r3
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fbc7 	bl	800b370 <USBD_StdItfReq>
 800abe2:	4603      	mov	r3, r0
 800abe4:	73fb      	strb	r3, [r7, #15]
      break;
 800abe6:	e016      	b.n	800ac16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abee:	4619      	mov	r1, r3
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fc29 	bl	800b448 <USBD_StdEPReq>
 800abf6:	4603      	mov	r3, r0
 800abf8:	73fb      	strb	r3, [r7, #15]
      break;
 800abfa:	e00c      	b.n	800ac16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f001 fde0 	bl	800c7d0 <USBD_LL_StallEP>
 800ac10:	4603      	mov	r3, r0
 800ac12:	73fb      	strb	r3, [r7, #15]
      break;
 800ac14:	bf00      	nop
  }

  return ret;
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	607a      	str	r2, [r7, #4]
 800ac2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ac32:	7afb      	ldrb	r3, [r7, #11]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d16e      	bne.n	800ad16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ac3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	f040 8098 	bne.w	800ad7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	689a      	ldr	r2, [r3, #8]
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d913      	bls.n	800ac80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	689a      	ldr	r2, [r3, #8]
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	1ad2      	subs	r2, r2, r3
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	68da      	ldr	r2, [r3, #12]
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	bf28      	it	cs
 800ac72:	4613      	movcs	r3, r2
 800ac74:	461a      	mov	r2, r3
 800ac76:	6879      	ldr	r1, [r7, #4]
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f001 f984 	bl	800bf86 <USBD_CtlContinueRx>
 800ac7e:	e07d      	b.n	800ad7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac86:	f003 031f 	and.w	r3, r3, #31
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d014      	beq.n	800acb8 <USBD_LL_DataOutStage+0x98>
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d81d      	bhi.n	800acce <USBD_LL_DataOutStage+0xae>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d002      	beq.n	800ac9c <USBD_LL_DataOutStage+0x7c>
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d003      	beq.n	800aca2 <USBD_LL_DataOutStage+0x82>
 800ac9a:	e018      	b.n	800acce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	75bb      	strb	r3, [r7, #22]
            break;
 800aca0:	e018      	b.n	800acd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	4619      	mov	r1, r3
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f000 fa5e 	bl	800b16e <USBD_CoreFindIF>
 800acb2:	4603      	mov	r3, r0
 800acb4:	75bb      	strb	r3, [r7, #22]
            break;
 800acb6:	e00d      	b.n	800acd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	4619      	mov	r1, r3
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f000 fa60 	bl	800b188 <USBD_CoreFindEP>
 800acc8:	4603      	mov	r3, r0
 800acca:	75bb      	strb	r3, [r7, #22]
            break;
 800accc:	e002      	b.n	800acd4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800acce:	2300      	movs	r3, #0
 800acd0:	75bb      	strb	r3, [r7, #22]
            break;
 800acd2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800acd4:	7dbb      	ldrb	r3, [r7, #22]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d119      	bne.n	800ad0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	2b03      	cmp	r3, #3
 800ace4:	d113      	bne.n	800ad0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ace6:	7dba      	ldrb	r2, [r7, #22]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	32ae      	adds	r2, #174	; 0xae
 800acec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00b      	beq.n	800ad0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800acf6:	7dba      	ldrb	r2, [r7, #22]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800acfe:	7dba      	ldrb	r2, [r7, #22]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	32ae      	adds	r2, #174	; 0xae
 800ad04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f001 f94a 	bl	800bfa8 <USBD_CtlSendStatus>
 800ad14:	e032      	b.n	800ad7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ad16:	7afb      	ldrb	r3, [r7, #11]
 800ad18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	4619      	mov	r1, r3
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f000 fa31 	bl	800b188 <USBD_CoreFindEP>
 800ad26:	4603      	mov	r3, r0
 800ad28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad2a:	7dbb      	ldrb	r3, [r7, #22]
 800ad2c:	2bff      	cmp	r3, #255	; 0xff
 800ad2e:	d025      	beq.n	800ad7c <USBD_LL_DataOutStage+0x15c>
 800ad30:	7dbb      	ldrb	r3, [r7, #22]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d122      	bne.n	800ad7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	2b03      	cmp	r3, #3
 800ad40:	d117      	bne.n	800ad72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ad42:	7dba      	ldrb	r2, [r7, #22]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	32ae      	adds	r2, #174	; 0xae
 800ad48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00f      	beq.n	800ad72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ad52:	7dba      	ldrb	r2, [r7, #22]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ad5a:	7dba      	ldrb	r2, [r7, #22]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	32ae      	adds	r2, #174	; 0xae
 800ad60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	7afa      	ldrb	r2, [r7, #11]
 800ad68:	4611      	mov	r1, r2
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	4798      	blx	r3
 800ad6e:	4603      	mov	r3, r0
 800ad70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ad78:	7dfb      	ldrb	r3, [r7, #23]
 800ad7a:	e000      	b.n	800ad7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3718      	adds	r7, #24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b086      	sub	sp, #24
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	60f8      	str	r0, [r7, #12]
 800ad8e:	460b      	mov	r3, r1
 800ad90:	607a      	str	r2, [r7, #4]
 800ad92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ad94:	7afb      	ldrb	r3, [r7, #11]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d16f      	bne.n	800ae7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3314      	adds	r3, #20
 800ad9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d15a      	bne.n	800ae60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	689a      	ldr	r2, [r3, #8]
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d914      	bls.n	800ade0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	689a      	ldr	r2, [r3, #8]
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	1ad2      	subs	r2, r2, r3
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	461a      	mov	r2, r3
 800adca:	6879      	ldr	r1, [r7, #4]
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f001 f8ac 	bl	800bf2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800add2:	2300      	movs	r3, #0
 800add4:	2200      	movs	r2, #0
 800add6:	2100      	movs	r1, #0
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f001 fda3 	bl	800c924 <USBD_LL_PrepareReceive>
 800adde:	e03f      	b.n	800ae60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	68da      	ldr	r2, [r3, #12]
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d11c      	bne.n	800ae26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	685a      	ldr	r2, [r3, #4]
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d316      	bcc.n	800ae26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d20f      	bcs.n	800ae26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae06:	2200      	movs	r2, #0
 800ae08:	2100      	movs	r1, #0
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f001 f88d 	bl	800bf2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae18:	2300      	movs	r3, #0
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f001 fd80 	bl	800c924 <USBD_LL_PrepareReceive>
 800ae24:	e01c      	b.n	800ae60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	2b03      	cmp	r3, #3
 800ae30:	d10f      	bne.n	800ae52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d009      	beq.n	800ae52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae52:	2180      	movs	r1, #128	; 0x80
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f001 fcbb 	bl	800c7d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f001 f8b7 	bl	800bfce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d03a      	beq.n	800aee0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f7ff fe42 	bl	800aaf4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ae78:	e032      	b.n	800aee0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ae7a:	7afb      	ldrb	r3, [r7, #11]
 800ae7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	4619      	mov	r1, r3
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f000 f97f 	bl	800b188 <USBD_CoreFindEP>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
 800ae90:	2bff      	cmp	r3, #255	; 0xff
 800ae92:	d025      	beq.n	800aee0 <USBD_LL_DataInStage+0x15a>
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d122      	bne.n	800aee0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d11c      	bne.n	800aee0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aea6:	7dfa      	ldrb	r2, [r7, #23]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	32ae      	adds	r2, #174	; 0xae
 800aeac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d014      	beq.n	800aee0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aeb6:	7dfa      	ldrb	r2, [r7, #23]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aebe:	7dfa      	ldrb	r2, [r7, #23]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	32ae      	adds	r2, #174	; 0xae
 800aec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	7afa      	ldrb	r2, [r7, #11]
 800aecc:	4611      	mov	r1, r2
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	4798      	blx	r3
 800aed2:	4603      	mov	r3, r0
 800aed4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aed6:	7dbb      	ldrb	r3, [r7, #22]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d001      	beq.n	800aee0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aedc:	7dbb      	ldrb	r3, [r7, #22]
 800aede:	e000      	b.n	800aee2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aef2:	2300      	movs	r3, #0
 800aef4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af22:	2b00      	cmp	r3, #0
 800af24:	d014      	beq.n	800af50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00e      	beq.n	800af50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	6852      	ldr	r2, [r2, #4]
 800af3e:	b2d2      	uxtb	r2, r2
 800af40:	4611      	mov	r1, r2
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	4798      	blx	r3
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d001      	beq.n	800af50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800af4c:	2303      	movs	r3, #3
 800af4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af50:	2340      	movs	r3, #64	; 0x40
 800af52:	2200      	movs	r2, #0
 800af54:	2100      	movs	r1, #0
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f001 fbf5 	bl	800c746 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2240      	movs	r2, #64	; 0x40
 800af68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af6c:	2340      	movs	r3, #64	; 0x40
 800af6e:	2200      	movs	r2, #0
 800af70:	2180      	movs	r1, #128	; 0x80
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f001 fbe7 	bl	800c746 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2240      	movs	r2, #64	; 0x40
 800af82:	621a      	str	r2, [r3, #32]

  return ret;
 800af84:	7bfb      	ldrb	r3, [r7, #15]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af8e:	b480      	push	{r7}
 800af90:	b083      	sub	sp, #12
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	460b      	mov	r3, r1
 800af98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	78fa      	ldrb	r2, [r7, #3]
 800af9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	370c      	adds	r7, #12
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800afae:	b480      	push	{r7}
 800afb0:	b083      	sub	sp, #12
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2204      	movs	r2, #4
 800afc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800afda:	b480      	push	{r7}
 800afdc:	b083      	sub	sp, #12
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	2b04      	cmp	r3, #4
 800afec:	d106      	bne.n	800affc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b082      	sub	sp, #8
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d110      	bne.n	800b040 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00b      	beq.n	800b040 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b02e:	69db      	ldr	r3, [r3, #28]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d005      	beq.n	800b040 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b03a:	69db      	ldr	r3, [r3, #28]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3708      	adds	r7, #8
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b082      	sub	sp, #8
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	460b      	mov	r3, r1
 800b054:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	32ae      	adds	r2, #174	; 0xae
 800b060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b068:	2303      	movs	r3, #3
 800b06a:	e01c      	b.n	800b0a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b072:	b2db      	uxtb	r3, r3
 800b074:	2b03      	cmp	r3, #3
 800b076:	d115      	bne.n	800b0a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	32ae      	adds	r2, #174	; 0xae
 800b082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b086:	6a1b      	ldr	r3, [r3, #32]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00b      	beq.n	800b0a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	32ae      	adds	r2, #174	; 0xae
 800b096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09a:	6a1b      	ldr	r3, [r3, #32]
 800b09c:	78fa      	ldrb	r2, [r7, #3]
 800b09e:	4611      	mov	r1, r2
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b082      	sub	sp, #8
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	32ae      	adds	r2, #174	; 0xae
 800b0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d101      	bne.n	800b0d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e01c      	b.n	800b10a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	2b03      	cmp	r3, #3
 800b0da:	d115      	bne.n	800b108 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	32ae      	adds	r2, #174	; 0xae
 800b0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00b      	beq.n	800b108 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	32ae      	adds	r2, #174	; 0xae
 800b0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b100:	78fa      	ldrb	r2, [r7, #3]
 800b102:	4611      	mov	r1, r2
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b112:	b480      	push	{r7}
 800b114:	b083      	sub	sp, #12
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b130:	2300      	movs	r3, #0
 800b132:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00e      	beq.n	800b164 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	6852      	ldr	r2, [r2, #4]
 800b152:	b2d2      	uxtb	r2, r2
 800b154:	4611      	mov	r1, r2
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	4798      	blx	r3
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d001      	beq.n	800b164 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b160:	2303      	movs	r3, #3
 800b162:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b164:	7bfb      	ldrb	r3, [r7, #15]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b16e:	b480      	push	{r7}
 800b170:	b083      	sub	sp, #12
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	460b      	mov	r3, r1
 800b178:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b17a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	460b      	mov	r3, r1
 800b192:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b194:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b196:	4618      	mov	r0, r3
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b086      	sub	sp, #24
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	885b      	ldrh	r3, [r3, #2]
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d920      	bls.n	800b20c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b1d2:	e013      	b.n	800b1fc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b1d4:	f107 030a 	add.w	r3, r7, #10
 800b1d8:	4619      	mov	r1, r3
 800b1da:	6978      	ldr	r0, [r7, #20]
 800b1dc:	f000 f81b 	bl	800b216 <USBD_GetNextDesc>
 800b1e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	785b      	ldrb	r3, [r3, #1]
 800b1e6:	2b05      	cmp	r3, #5
 800b1e8:	d108      	bne.n	800b1fc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	789b      	ldrb	r3, [r3, #2]
 800b1f2:	78fa      	ldrb	r2, [r7, #3]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d008      	beq.n	800b20a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	885b      	ldrh	r3, [r3, #2]
 800b200:	b29a      	uxth	r2, r3
 800b202:	897b      	ldrh	r3, [r7, #10]
 800b204:	429a      	cmp	r2, r3
 800b206:	d8e5      	bhi.n	800b1d4 <USBD_GetEpDesc+0x32>
 800b208:	e000      	b.n	800b20c <USBD_GetEpDesc+0x6a>
          break;
 800b20a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b20c:	693b      	ldr	r3, [r7, #16]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3718      	adds	r7, #24
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b216:	b480      	push	{r7}
 800b218:	b085      	sub	sp, #20
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
 800b21e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	881a      	ldrh	r2, [r3, #0]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	4413      	add	r3, r2
 800b230:	b29a      	uxth	r2, r3
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	461a      	mov	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4413      	add	r3, r2
 800b240:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b242:	68fb      	ldr	r3, [r7, #12]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b250:	b480      	push	{r7}
 800b252:	b087      	sub	sp, #28
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	3301      	adds	r3, #1
 800b266:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b26e:	8a3b      	ldrh	r3, [r7, #16]
 800b270:	021b      	lsls	r3, r3, #8
 800b272:	b21a      	sxth	r2, r3
 800b274:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b278:	4313      	orrs	r3, r2
 800b27a:	b21b      	sxth	r3, r3
 800b27c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b27e:	89fb      	ldrh	r3, [r7, #14]
}
 800b280:	4618      	mov	r0, r3
 800b282:	371c      	adds	r7, #28
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2a2:	2b40      	cmp	r3, #64	; 0x40
 800b2a4:	d005      	beq.n	800b2b2 <USBD_StdDevReq+0x26>
 800b2a6:	2b40      	cmp	r3, #64	; 0x40
 800b2a8:	d857      	bhi.n	800b35a <USBD_StdDevReq+0xce>
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00f      	beq.n	800b2ce <USBD_StdDevReq+0x42>
 800b2ae:	2b20      	cmp	r3, #32
 800b2b0:	d153      	bne.n	800b35a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	32ae      	adds	r2, #174	; 0xae
 800b2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	4798      	blx	r3
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	73fb      	strb	r3, [r7, #15]
      break;
 800b2cc:	e04a      	b.n	800b364 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	785b      	ldrb	r3, [r3, #1]
 800b2d2:	2b09      	cmp	r3, #9
 800b2d4:	d83b      	bhi.n	800b34e <USBD_StdDevReq+0xc2>
 800b2d6:	a201      	add	r2, pc, #4	; (adr r2, 800b2dc <USBD_StdDevReq+0x50>)
 800b2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2dc:	0800b331 	.word	0x0800b331
 800b2e0:	0800b345 	.word	0x0800b345
 800b2e4:	0800b34f 	.word	0x0800b34f
 800b2e8:	0800b33b 	.word	0x0800b33b
 800b2ec:	0800b34f 	.word	0x0800b34f
 800b2f0:	0800b30f 	.word	0x0800b30f
 800b2f4:	0800b305 	.word	0x0800b305
 800b2f8:	0800b34f 	.word	0x0800b34f
 800b2fc:	0800b327 	.word	0x0800b327
 800b300:	0800b319 	.word	0x0800b319
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fa3c 	bl	800b784 <USBD_GetDescriptor>
          break;
 800b30c:	e024      	b.n	800b358 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 fba1 	bl	800ba58 <USBD_SetAddress>
          break;
 800b316:	e01f      	b.n	800b358 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fbe0 	bl	800bae0 <USBD_SetConfig>
 800b320:	4603      	mov	r3, r0
 800b322:	73fb      	strb	r3, [r7, #15]
          break;
 800b324:	e018      	b.n	800b358 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b326:	6839      	ldr	r1, [r7, #0]
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 fc83 	bl	800bc34 <USBD_GetConfig>
          break;
 800b32e:	e013      	b.n	800b358 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b330:	6839      	ldr	r1, [r7, #0]
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fcb4 	bl	800bca0 <USBD_GetStatus>
          break;
 800b338:	e00e      	b.n	800b358 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fce3 	bl	800bd08 <USBD_SetFeature>
          break;
 800b342:	e009      	b.n	800b358 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b344:	6839      	ldr	r1, [r7, #0]
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 fd07 	bl	800bd5a <USBD_ClrFeature>
          break;
 800b34c:	e004      	b.n	800b358 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fd5e 	bl	800be12 <USBD_CtlError>
          break;
 800b356:	bf00      	nop
      }
      break;
 800b358:	e004      	b.n	800b364 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b35a:	6839      	ldr	r1, [r7, #0]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 fd58 	bl	800be12 <USBD_CtlError>
      break;
 800b362:	bf00      	nop
  }

  return ret;
 800b364:	7bfb      	ldrb	r3, [r7, #15]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop

0800b370 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b386:	2b40      	cmp	r3, #64	; 0x40
 800b388:	d005      	beq.n	800b396 <USBD_StdItfReq+0x26>
 800b38a:	2b40      	cmp	r3, #64	; 0x40
 800b38c:	d852      	bhi.n	800b434 <USBD_StdItfReq+0xc4>
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d001      	beq.n	800b396 <USBD_StdItfReq+0x26>
 800b392:	2b20      	cmp	r3, #32
 800b394:	d14e      	bne.n	800b434 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d840      	bhi.n	800b426 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	889b      	ldrh	r3, [r3, #4]
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d836      	bhi.n	800b41c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	889b      	ldrh	r3, [r3, #4]
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7ff fed9 	bl	800b16e <USBD_CoreFindIF>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3c0:	7bbb      	ldrb	r3, [r7, #14]
 800b3c2:	2bff      	cmp	r3, #255	; 0xff
 800b3c4:	d01d      	beq.n	800b402 <USBD_StdItfReq+0x92>
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d11a      	bne.n	800b402 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b3cc:	7bba      	ldrb	r2, [r7, #14]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	32ae      	adds	r2, #174	; 0xae
 800b3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00f      	beq.n	800b3fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b3dc:	7bba      	ldrb	r2, [r7, #14]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b3e4:	7bba      	ldrb	r2, [r7, #14]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	32ae      	adds	r2, #174	; 0xae
 800b3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	4798      	blx	r3
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b3fa:	e004      	b.n	800b406 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b400:	e001      	b.n	800b406 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b402:	2303      	movs	r3, #3
 800b404:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	88db      	ldrh	r3, [r3, #6]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d110      	bne.n	800b430 <USBD_StdItfReq+0xc0>
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d10d      	bne.n	800b430 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 fdc7 	bl	800bfa8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b41a:	e009      	b.n	800b430 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b41c:	6839      	ldr	r1, [r7, #0]
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fcf7 	bl	800be12 <USBD_CtlError>
          break;
 800b424:	e004      	b.n	800b430 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b426:	6839      	ldr	r1, [r7, #0]
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fcf2 	bl	800be12 <USBD_CtlError>
          break;
 800b42e:	e000      	b.n	800b432 <USBD_StdItfReq+0xc2>
          break;
 800b430:	bf00      	nop
      }
      break;
 800b432:	e004      	b.n	800b43e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b434:	6839      	ldr	r1, [r7, #0]
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 fceb 	bl	800be12 <USBD_CtlError>
      break;
 800b43c:	bf00      	nop
  }

  return ret;
 800b43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b452:	2300      	movs	r3, #0
 800b454:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	889b      	ldrh	r3, [r3, #4]
 800b45a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b464:	2b40      	cmp	r3, #64	; 0x40
 800b466:	d007      	beq.n	800b478 <USBD_StdEPReq+0x30>
 800b468:	2b40      	cmp	r3, #64	; 0x40
 800b46a:	f200 817f 	bhi.w	800b76c <USBD_StdEPReq+0x324>
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d02a      	beq.n	800b4c8 <USBD_StdEPReq+0x80>
 800b472:	2b20      	cmp	r3, #32
 800b474:	f040 817a 	bne.w	800b76c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b478:	7bbb      	ldrb	r3, [r7, #14]
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff fe83 	bl	800b188 <USBD_CoreFindEP>
 800b482:	4603      	mov	r3, r0
 800b484:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b486:	7b7b      	ldrb	r3, [r7, #13]
 800b488:	2bff      	cmp	r3, #255	; 0xff
 800b48a:	f000 8174 	beq.w	800b776 <USBD_StdEPReq+0x32e>
 800b48e:	7b7b      	ldrb	r3, [r7, #13]
 800b490:	2b00      	cmp	r3, #0
 800b492:	f040 8170 	bne.w	800b776 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b496:	7b7a      	ldrb	r2, [r7, #13]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b49e:	7b7a      	ldrb	r2, [r7, #13]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	32ae      	adds	r2, #174	; 0xae
 800b4a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f000 8163 	beq.w	800b776 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b4b0:	7b7a      	ldrb	r2, [r7, #13]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	32ae      	adds	r2, #174	; 0xae
 800b4b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	4798      	blx	r3
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b4c6:	e156      	b.n	800b776 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	785b      	ldrb	r3, [r3, #1]
 800b4cc:	2b03      	cmp	r3, #3
 800b4ce:	d008      	beq.n	800b4e2 <USBD_StdEPReq+0x9a>
 800b4d0:	2b03      	cmp	r3, #3
 800b4d2:	f300 8145 	bgt.w	800b760 <USBD_StdEPReq+0x318>
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f000 809b 	beq.w	800b612 <USBD_StdEPReq+0x1ca>
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d03c      	beq.n	800b55a <USBD_StdEPReq+0x112>
 800b4e0:	e13e      	b.n	800b760 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	d002      	beq.n	800b4f4 <USBD_StdEPReq+0xac>
 800b4ee:	2b03      	cmp	r3, #3
 800b4f0:	d016      	beq.n	800b520 <USBD_StdEPReq+0xd8>
 800b4f2:	e02c      	b.n	800b54e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4f4:	7bbb      	ldrb	r3, [r7, #14]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00d      	beq.n	800b516 <USBD_StdEPReq+0xce>
 800b4fa:	7bbb      	ldrb	r3, [r7, #14]
 800b4fc:	2b80      	cmp	r3, #128	; 0x80
 800b4fe:	d00a      	beq.n	800b516 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b500:	7bbb      	ldrb	r3, [r7, #14]
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f001 f963 	bl	800c7d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b50a:	2180      	movs	r1, #128	; 0x80
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f001 f95f 	bl	800c7d0 <USBD_LL_StallEP>
 800b512:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b514:	e020      	b.n	800b558 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b516:	6839      	ldr	r1, [r7, #0]
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fc7a 	bl	800be12 <USBD_CtlError>
              break;
 800b51e:	e01b      	b.n	800b558 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	885b      	ldrh	r3, [r3, #2]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d10e      	bne.n	800b546 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b528:	7bbb      	ldrb	r3, [r7, #14]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00b      	beq.n	800b546 <USBD_StdEPReq+0xfe>
 800b52e:	7bbb      	ldrb	r3, [r7, #14]
 800b530:	2b80      	cmp	r3, #128	; 0x80
 800b532:	d008      	beq.n	800b546 <USBD_StdEPReq+0xfe>
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	88db      	ldrh	r3, [r3, #6]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d104      	bne.n	800b546 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b53c:	7bbb      	ldrb	r3, [r7, #14]
 800b53e:	4619      	mov	r1, r3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f001 f945 	bl	800c7d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fd2e 	bl	800bfa8 <USBD_CtlSendStatus>

              break;
 800b54c:	e004      	b.n	800b558 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b54e:	6839      	ldr	r1, [r7, #0]
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 fc5e 	bl	800be12 <USBD_CtlError>
              break;
 800b556:	bf00      	nop
          }
          break;
 800b558:	e107      	b.n	800b76a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b560:	b2db      	uxtb	r3, r3
 800b562:	2b02      	cmp	r3, #2
 800b564:	d002      	beq.n	800b56c <USBD_StdEPReq+0x124>
 800b566:	2b03      	cmp	r3, #3
 800b568:	d016      	beq.n	800b598 <USBD_StdEPReq+0x150>
 800b56a:	e04b      	b.n	800b604 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b56c:	7bbb      	ldrb	r3, [r7, #14]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00d      	beq.n	800b58e <USBD_StdEPReq+0x146>
 800b572:	7bbb      	ldrb	r3, [r7, #14]
 800b574:	2b80      	cmp	r3, #128	; 0x80
 800b576:	d00a      	beq.n	800b58e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b578:	7bbb      	ldrb	r3, [r7, #14]
 800b57a:	4619      	mov	r1, r3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f001 f927 	bl	800c7d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b582:	2180      	movs	r1, #128	; 0x80
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f001 f923 	bl	800c7d0 <USBD_LL_StallEP>
 800b58a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b58c:	e040      	b.n	800b610 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b58e:	6839      	ldr	r1, [r7, #0]
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fc3e 	bl	800be12 <USBD_CtlError>
              break;
 800b596:	e03b      	b.n	800b610 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	885b      	ldrh	r3, [r3, #2]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d136      	bne.n	800b60e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b5a0:	7bbb      	ldrb	r3, [r7, #14]
 800b5a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d004      	beq.n	800b5b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b5aa:	7bbb      	ldrb	r3, [r7, #14]
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f001 f92d 	bl	800c80e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fcf7 	bl	800bfa8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b5ba:	7bbb      	ldrb	r3, [r7, #14]
 800b5bc:	4619      	mov	r1, r3
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7ff fde2 	bl	800b188 <USBD_CoreFindEP>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5c8:	7b7b      	ldrb	r3, [r7, #13]
 800b5ca:	2bff      	cmp	r3, #255	; 0xff
 800b5cc:	d01f      	beq.n	800b60e <USBD_StdEPReq+0x1c6>
 800b5ce:	7b7b      	ldrb	r3, [r7, #13]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d11c      	bne.n	800b60e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b5d4:	7b7a      	ldrb	r2, [r7, #13]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b5dc:	7b7a      	ldrb	r2, [r7, #13]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	32ae      	adds	r2, #174	; 0xae
 800b5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d010      	beq.n	800b60e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b5ec:	7b7a      	ldrb	r2, [r7, #13]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	32ae      	adds	r2, #174	; 0xae
 800b5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	4798      	blx	r3
 800b5fe:	4603      	mov	r3, r0
 800b600:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b602:	e004      	b.n	800b60e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b604:	6839      	ldr	r1, [r7, #0]
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 fc03 	bl	800be12 <USBD_CtlError>
              break;
 800b60c:	e000      	b.n	800b610 <USBD_StdEPReq+0x1c8>
              break;
 800b60e:	bf00      	nop
          }
          break;
 800b610:	e0ab      	b.n	800b76a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d002      	beq.n	800b624 <USBD_StdEPReq+0x1dc>
 800b61e:	2b03      	cmp	r3, #3
 800b620:	d032      	beq.n	800b688 <USBD_StdEPReq+0x240>
 800b622:	e097      	b.n	800b754 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b624:	7bbb      	ldrb	r3, [r7, #14]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d007      	beq.n	800b63a <USBD_StdEPReq+0x1f2>
 800b62a:	7bbb      	ldrb	r3, [r7, #14]
 800b62c:	2b80      	cmp	r3, #128	; 0x80
 800b62e:	d004      	beq.n	800b63a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b630:	6839      	ldr	r1, [r7, #0]
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 fbed 	bl	800be12 <USBD_CtlError>
                break;
 800b638:	e091      	b.n	800b75e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b63a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	da0b      	bge.n	800b65a <USBD_StdEPReq+0x212>
 800b642:	7bbb      	ldrb	r3, [r7, #14]
 800b644:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b648:	4613      	mov	r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	4413      	add	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	3310      	adds	r3, #16
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	4413      	add	r3, r2
 800b656:	3304      	adds	r3, #4
 800b658:	e00b      	b.n	800b672 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
 800b65c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b660:	4613      	mov	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	4413      	add	r3, r2
 800b670:	3304      	adds	r3, #4
 800b672:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	2200      	movs	r2, #0
 800b678:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	2202      	movs	r2, #2
 800b67e:	4619      	mov	r1, r3
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 fc37 	bl	800bef4 <USBD_CtlSendData>
              break;
 800b686:	e06a      	b.n	800b75e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	da11      	bge.n	800b6b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b690:	7bbb      	ldrb	r3, [r7, #14]
 800b692:	f003 020f 	and.w	r2, r3, #15
 800b696:	6879      	ldr	r1, [r7, #4]
 800b698:	4613      	mov	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	4413      	add	r3, r2
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	440b      	add	r3, r1
 800b6a2:	3324      	adds	r3, #36	; 0x24
 800b6a4:	881b      	ldrh	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d117      	bne.n	800b6da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fbb0 	bl	800be12 <USBD_CtlError>
                  break;
 800b6b2:	e054      	b.n	800b75e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6b4:	7bbb      	ldrb	r3, [r7, #14]
 800b6b6:	f003 020f 	and.w	r2, r3, #15
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	4413      	add	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	440b      	add	r3, r1
 800b6c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b6ca:	881b      	ldrh	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d104      	bne.n	800b6da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fb9d 	bl	800be12 <USBD_CtlError>
                  break;
 800b6d8:	e041      	b.n	800b75e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	da0b      	bge.n	800b6fa <USBD_StdEPReq+0x2b2>
 800b6e2:	7bbb      	ldrb	r3, [r7, #14]
 800b6e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4413      	add	r3, r2
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	3310      	adds	r3, #16
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	e00b      	b.n	800b712 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6fa:	7bbb      	ldrb	r3, [r7, #14]
 800b6fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b700:	4613      	mov	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	4413      	add	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	4413      	add	r3, r2
 800b710:	3304      	adds	r3, #4
 800b712:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b714:	7bbb      	ldrb	r3, [r7, #14]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d002      	beq.n	800b720 <USBD_StdEPReq+0x2d8>
 800b71a:	7bbb      	ldrb	r3, [r7, #14]
 800b71c:	2b80      	cmp	r3, #128	; 0x80
 800b71e:	d103      	bne.n	800b728 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
 800b726:	e00e      	b.n	800b746 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b728:	7bbb      	ldrb	r3, [r7, #14]
 800b72a:	4619      	mov	r1, r3
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f001 f88d 	bl	800c84c <USBD_LL_IsStallEP>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d003      	beq.n	800b740 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	2201      	movs	r2, #1
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	e002      	b.n	800b746 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	2200      	movs	r2, #0
 800b744:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	2202      	movs	r2, #2
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fbd1 	bl	800bef4 <USBD_CtlSendData>
              break;
 800b752:	e004      	b.n	800b75e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fb5b 	bl	800be12 <USBD_CtlError>
              break;
 800b75c:	bf00      	nop
          }
          break;
 800b75e:	e004      	b.n	800b76a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fb55 	bl	800be12 <USBD_CtlError>
          break;
 800b768:	bf00      	nop
      }
      break;
 800b76a:	e005      	b.n	800b778 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fb4f 	bl	800be12 <USBD_CtlError>
      break;
 800b774:	e000      	b.n	800b778 <USBD_StdEPReq+0x330>
      break;
 800b776:	bf00      	nop
  }

  return ret;
 800b778:	7bfb      	ldrb	r3, [r7, #15]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
	...

0800b784 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b78e:	2300      	movs	r3, #0
 800b790:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b792:	2300      	movs	r3, #0
 800b794:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b796:	2300      	movs	r3, #0
 800b798:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	885b      	ldrh	r3, [r3, #2]
 800b79e:	0a1b      	lsrs	r3, r3, #8
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	2b06      	cmp	r3, #6
 800b7a6:	f200 8128 	bhi.w	800b9fa <USBD_GetDescriptor+0x276>
 800b7aa:	a201      	add	r2, pc, #4	; (adr r2, 800b7b0 <USBD_GetDescriptor+0x2c>)
 800b7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b0:	0800b7cd 	.word	0x0800b7cd
 800b7b4:	0800b7e5 	.word	0x0800b7e5
 800b7b8:	0800b825 	.word	0x0800b825
 800b7bc:	0800b9fb 	.word	0x0800b9fb
 800b7c0:	0800b9fb 	.word	0x0800b9fb
 800b7c4:	0800b99b 	.word	0x0800b99b
 800b7c8:	0800b9c7 	.word	0x0800b9c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	7c12      	ldrb	r2, [r2, #16]
 800b7d8:	f107 0108 	add.w	r1, r7, #8
 800b7dc:	4610      	mov	r0, r2
 800b7de:	4798      	blx	r3
 800b7e0:	60f8      	str	r0, [r7, #12]
      break;
 800b7e2:	e112      	b.n	800ba0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	7c1b      	ldrb	r3, [r3, #16]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10d      	bne.n	800b808 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f4:	f107 0208 	add.w	r2, r7, #8
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	4798      	blx	r3
 800b7fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	3301      	adds	r3, #1
 800b802:	2202      	movs	r2, #2
 800b804:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b806:	e100      	b.n	800ba0a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b810:	f107 0208 	add.w	r2, r7, #8
 800b814:	4610      	mov	r0, r2
 800b816:	4798      	blx	r3
 800b818:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	3301      	adds	r3, #1
 800b81e:	2202      	movs	r2, #2
 800b820:	701a      	strb	r2, [r3, #0]
      break;
 800b822:	e0f2      	b.n	800ba0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	885b      	ldrh	r3, [r3, #2]
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	2b05      	cmp	r3, #5
 800b82c:	f200 80ac 	bhi.w	800b988 <USBD_GetDescriptor+0x204>
 800b830:	a201      	add	r2, pc, #4	; (adr r2, 800b838 <USBD_GetDescriptor+0xb4>)
 800b832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b836:	bf00      	nop
 800b838:	0800b851 	.word	0x0800b851
 800b83c:	0800b885 	.word	0x0800b885
 800b840:	0800b8b9 	.word	0x0800b8b9
 800b844:	0800b8ed 	.word	0x0800b8ed
 800b848:	0800b921 	.word	0x0800b921
 800b84c:	0800b955 	.word	0x0800b955
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00b      	beq.n	800b874 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	7c12      	ldrb	r2, [r2, #16]
 800b868:	f107 0108 	add.w	r1, r7, #8
 800b86c:	4610      	mov	r0, r2
 800b86e:	4798      	blx	r3
 800b870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b872:	e091      	b.n	800b998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b874:	6839      	ldr	r1, [r7, #0]
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 facb 	bl	800be12 <USBD_CtlError>
            err++;
 800b87c:	7afb      	ldrb	r3, [r7, #11]
 800b87e:	3301      	adds	r3, #1
 800b880:	72fb      	strb	r3, [r7, #11]
          break;
 800b882:	e089      	b.n	800b998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00b      	beq.n	800b8a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	7c12      	ldrb	r2, [r2, #16]
 800b89c:	f107 0108 	add.w	r1, r7, #8
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	4798      	blx	r3
 800b8a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8a6:	e077      	b.n	800b998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fab1 	bl	800be12 <USBD_CtlError>
            err++;
 800b8b0:	7afb      	ldrb	r3, [r7, #11]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8b6:	e06f      	b.n	800b998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d00b      	beq.n	800b8dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	7c12      	ldrb	r2, [r2, #16]
 800b8d0:	f107 0108 	add.w	r1, r7, #8
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	4798      	blx	r3
 800b8d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8da:	e05d      	b.n	800b998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8dc:	6839      	ldr	r1, [r7, #0]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 fa97 	bl	800be12 <USBD_CtlError>
            err++;
 800b8e4:	7afb      	ldrb	r3, [r7, #11]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b8ea:	e055      	b.n	800b998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8f2:	691b      	ldr	r3, [r3, #16]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00b      	beq.n	800b910 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	7c12      	ldrb	r2, [r2, #16]
 800b904:	f107 0108 	add.w	r1, r7, #8
 800b908:	4610      	mov	r0, r2
 800b90a:	4798      	blx	r3
 800b90c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b90e:	e043      	b.n	800b998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fa7d 	bl	800be12 <USBD_CtlError>
            err++;
 800b918:	7afb      	ldrb	r3, [r7, #11]
 800b91a:	3301      	adds	r3, #1
 800b91c:	72fb      	strb	r3, [r7, #11]
          break;
 800b91e:	e03b      	b.n	800b998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b926:	695b      	ldr	r3, [r3, #20]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00b      	beq.n	800b944 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b932:	695b      	ldr	r3, [r3, #20]
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	7c12      	ldrb	r2, [r2, #16]
 800b938:	f107 0108 	add.w	r1, r7, #8
 800b93c:	4610      	mov	r0, r2
 800b93e:	4798      	blx	r3
 800b940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b942:	e029      	b.n	800b998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b944:	6839      	ldr	r1, [r7, #0]
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fa63 	bl	800be12 <USBD_CtlError>
            err++;
 800b94c:	7afb      	ldrb	r3, [r7, #11]
 800b94e:	3301      	adds	r3, #1
 800b950:	72fb      	strb	r3, [r7, #11]
          break;
 800b952:	e021      	b.n	800b998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00b      	beq.n	800b978 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	7c12      	ldrb	r2, [r2, #16]
 800b96c:	f107 0108 	add.w	r1, r7, #8
 800b970:	4610      	mov	r0, r2
 800b972:	4798      	blx	r3
 800b974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b976:	e00f      	b.n	800b998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b978:	6839      	ldr	r1, [r7, #0]
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 fa49 	bl	800be12 <USBD_CtlError>
            err++;
 800b980:	7afb      	ldrb	r3, [r7, #11]
 800b982:	3301      	adds	r3, #1
 800b984:	72fb      	strb	r3, [r7, #11]
          break;
 800b986:	e007      	b.n	800b998 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 fa41 	bl	800be12 <USBD_CtlError>
          err++;
 800b990:	7afb      	ldrb	r3, [r7, #11]
 800b992:	3301      	adds	r3, #1
 800b994:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b996:	bf00      	nop
      }
      break;
 800b998:	e037      	b.n	800ba0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	7c1b      	ldrb	r3, [r3, #16]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d109      	bne.n	800b9b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9aa:	f107 0208 	add.w	r2, r7, #8
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	4798      	blx	r3
 800b9b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9b4:	e029      	b.n	800ba0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b9b6:	6839      	ldr	r1, [r7, #0]
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 fa2a 	bl	800be12 <USBD_CtlError>
        err++;
 800b9be:	7afb      	ldrb	r3, [r7, #11]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	72fb      	strb	r3, [r7, #11]
      break;
 800b9c4:	e021      	b.n	800ba0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	7c1b      	ldrb	r3, [r3, #16]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10d      	bne.n	800b9ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d6:	f107 0208 	add.w	r2, r7, #8
 800b9da:	4610      	mov	r0, r2
 800b9dc:	4798      	blx	r3
 800b9de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	2207      	movs	r2, #7
 800b9e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9e8:	e00f      	b.n	800ba0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b9ea:	6839      	ldr	r1, [r7, #0]
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 fa10 	bl	800be12 <USBD_CtlError>
        err++;
 800b9f2:	7afb      	ldrb	r3, [r7, #11]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	72fb      	strb	r3, [r7, #11]
      break;
 800b9f8:	e007      	b.n	800ba0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fa08 	bl	800be12 <USBD_CtlError>
      err++;
 800ba02:	7afb      	ldrb	r3, [r7, #11]
 800ba04:	3301      	adds	r3, #1
 800ba06:	72fb      	strb	r3, [r7, #11]
      break;
 800ba08:	bf00      	nop
  }

  if (err != 0U)
 800ba0a:	7afb      	ldrb	r3, [r7, #11]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d11e      	bne.n	800ba4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	88db      	ldrh	r3, [r3, #6]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d016      	beq.n	800ba46 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ba18:	893b      	ldrh	r3, [r7, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00e      	beq.n	800ba3c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	88da      	ldrh	r2, [r3, #6]
 800ba22:	893b      	ldrh	r3, [r7, #8]
 800ba24:	4293      	cmp	r3, r2
 800ba26:	bf28      	it	cs
 800ba28:	4613      	movcs	r3, r2
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba2e:	893b      	ldrh	r3, [r7, #8]
 800ba30:	461a      	mov	r2, r3
 800ba32:	68f9      	ldr	r1, [r7, #12]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 fa5d 	bl	800bef4 <USBD_CtlSendData>
 800ba3a:	e009      	b.n	800ba50 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ba3c:	6839      	ldr	r1, [r7, #0]
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 f9e7 	bl	800be12 <USBD_CtlError>
 800ba44:	e004      	b.n	800ba50 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 faae 	bl	800bfa8 <USBD_CtlSendStatus>
 800ba4c:	e000      	b.n	800ba50 <USBD_GetDescriptor+0x2cc>
    return;
 800ba4e:	bf00      	nop
  }
}
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop

0800ba58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	889b      	ldrh	r3, [r3, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d131      	bne.n	800bace <USBD_SetAddress+0x76>
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	88db      	ldrh	r3, [r3, #6]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d12d      	bne.n	800bace <USBD_SetAddress+0x76>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	885b      	ldrh	r3, [r3, #2]
 800ba76:	2b7f      	cmp	r3, #127	; 0x7f
 800ba78:	d829      	bhi.n	800bace <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	885b      	ldrh	r3, [r3, #2]
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	2b03      	cmp	r3, #3
 800ba90:	d104      	bne.n	800ba9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ba92:	6839      	ldr	r1, [r7, #0]
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 f9bc 	bl	800be12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba9a:	e01d      	b.n	800bad8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	7bfa      	ldrb	r2, [r7, #15]
 800baa0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
 800baa6:	4619      	mov	r1, r3
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fefb 	bl	800c8a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fa7a 	bl	800bfa8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bab4:	7bfb      	ldrb	r3, [r7, #15]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d004      	beq.n	800bac4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2202      	movs	r2, #2
 800babe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bac2:	e009      	b.n	800bad8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bacc:	e004      	b.n	800bad8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bace:	6839      	ldr	r1, [r7, #0]
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 f99e 	bl	800be12 <USBD_CtlError>
  }
}
 800bad6:	bf00      	nop
 800bad8:	bf00      	nop
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	885b      	ldrh	r3, [r3, #2]
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	4b4e      	ldr	r3, [pc, #312]	; (800bc30 <USBD_SetConfig+0x150>)
 800baf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800baf8:	4b4d      	ldr	r3, [pc, #308]	; (800bc30 <USBD_SetConfig+0x150>)
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d905      	bls.n	800bb0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f985 	bl	800be12 <USBD_CtlError>
    return USBD_FAIL;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	e08c      	b.n	800bc26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d002      	beq.n	800bb1e <USBD_SetConfig+0x3e>
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d029      	beq.n	800bb70 <USBD_SetConfig+0x90>
 800bb1c:	e075      	b.n	800bc0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bb1e:	4b44      	ldr	r3, [pc, #272]	; (800bc30 <USBD_SetConfig+0x150>)
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d020      	beq.n	800bb68 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bb26:	4b42      	ldr	r3, [pc, #264]	; (800bc30 <USBD_SetConfig+0x150>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb30:	4b3f      	ldr	r3, [pc, #252]	; (800bc30 <USBD_SetConfig+0x150>)
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	4619      	mov	r1, r3
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7fe ffe7 	bl	800ab0a <USBD_SetClassConfig>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bb40:	7bfb      	ldrb	r3, [r7, #15]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d008      	beq.n	800bb58 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bb46:	6839      	ldr	r1, [r7, #0]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f962 	bl	800be12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2202      	movs	r2, #2
 800bb52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb56:	e065      	b.n	800bc24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 fa25 	bl	800bfa8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2203      	movs	r2, #3
 800bb62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb66:	e05d      	b.n	800bc24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fa1d 	bl	800bfa8 <USBD_CtlSendStatus>
      break;
 800bb6e:	e059      	b.n	800bc24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bb70:	4b2f      	ldr	r3, [pc, #188]	; (800bc30 <USBD_SetConfig+0x150>)
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d112      	bne.n	800bb9e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2202      	movs	r2, #2
 800bb7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bb80:	4b2b      	ldr	r3, [pc, #172]	; (800bc30 <USBD_SetConfig+0x150>)
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	461a      	mov	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb8a:	4b29      	ldr	r3, [pc, #164]	; (800bc30 <USBD_SetConfig+0x150>)
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7fe ffd6 	bl	800ab42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fa06 	bl	800bfa8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb9c:	e042      	b.n	800bc24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bb9e:	4b24      	ldr	r3, [pc, #144]	; (800bc30 <USBD_SetConfig+0x150>)
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	461a      	mov	r2, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d02a      	beq.n	800bc02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f7fe ffc4 	bl	800ab42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bbba:	4b1d      	ldr	r3, [pc, #116]	; (800bc30 <USBD_SetConfig+0x150>)
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bbc4:	4b1a      	ldr	r3, [pc, #104]	; (800bc30 <USBD_SetConfig+0x150>)
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	4619      	mov	r1, r3
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f7fe ff9d 	bl	800ab0a <USBD_SetClassConfig>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bbd4:	7bfb      	ldrb	r3, [r7, #15]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00f      	beq.n	800bbfa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bbda:	6839      	ldr	r1, [r7, #0]
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 f918 	bl	800be12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	4619      	mov	r1, r3
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7fe ffa9 	bl	800ab42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bbf8:	e014      	b.n	800bc24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 f9d4 	bl	800bfa8 <USBD_CtlSendStatus>
      break;
 800bc00:	e010      	b.n	800bc24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f9d0 	bl	800bfa8 <USBD_CtlSendStatus>
      break;
 800bc08:	e00c      	b.n	800bc24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bc0a:	6839      	ldr	r1, [r7, #0]
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 f900 	bl	800be12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc12:	4b07      	ldr	r3, [pc, #28]	; (800bc30 <USBD_SetConfig+0x150>)
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	4619      	mov	r1, r3
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f7fe ff92 	bl	800ab42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bc1e:	2303      	movs	r3, #3
 800bc20:	73fb      	strb	r3, [r7, #15]
      break;
 800bc22:	bf00      	nop
  }

  return ret;
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	200005c8 	.word	0x200005c8

0800bc34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	88db      	ldrh	r3, [r3, #6]
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d004      	beq.n	800bc50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc46:	6839      	ldr	r1, [r7, #0]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 f8e2 	bl	800be12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc4e:	e023      	b.n	800bc98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	dc02      	bgt.n	800bc62 <USBD_GetConfig+0x2e>
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	dc03      	bgt.n	800bc68 <USBD_GetConfig+0x34>
 800bc60:	e015      	b.n	800bc8e <USBD_GetConfig+0x5a>
 800bc62:	2b03      	cmp	r3, #3
 800bc64:	d00b      	beq.n	800bc7e <USBD_GetConfig+0x4a>
 800bc66:	e012      	b.n	800bc8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	3308      	adds	r3, #8
 800bc72:	2201      	movs	r2, #1
 800bc74:	4619      	mov	r1, r3
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f93c 	bl	800bef4 <USBD_CtlSendData>
        break;
 800bc7c:	e00c      	b.n	800bc98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	3304      	adds	r3, #4
 800bc82:	2201      	movs	r2, #1
 800bc84:	4619      	mov	r1, r3
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 f934 	bl	800bef4 <USBD_CtlSendData>
        break;
 800bc8c:	e004      	b.n	800bc98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bc8e:	6839      	ldr	r1, [r7, #0]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f8be 	bl	800be12 <USBD_CtlError>
        break;
 800bc96:	bf00      	nop
}
 800bc98:	bf00      	nop
 800bc9a:	3708      	adds	r7, #8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d81e      	bhi.n	800bcf6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	88db      	ldrh	r3, [r3, #6]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d004      	beq.n	800bcca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f8a5 	bl	800be12 <USBD_CtlError>
        break;
 800bcc8:	e01a      	b.n	800bd00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2201      	movs	r2, #1
 800bcce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d005      	beq.n	800bce6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	f043 0202 	orr.w	r2, r3, #2
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	330c      	adds	r3, #12
 800bcea:	2202      	movs	r2, #2
 800bcec:	4619      	mov	r1, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 f900 	bl	800bef4 <USBD_CtlSendData>
      break;
 800bcf4:	e004      	b.n	800bd00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f88a 	bl	800be12 <USBD_CtlError>
      break;
 800bcfe:	bf00      	nop
  }
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	885b      	ldrh	r3, [r3, #2]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d107      	bne.n	800bd2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f940 	bl	800bfa8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bd28:	e013      	b.n	800bd52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	885b      	ldrh	r3, [r3, #2]
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	d10b      	bne.n	800bd4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	889b      	ldrh	r3, [r3, #4]
 800bd36:	0a1b      	lsrs	r3, r3, #8
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	b2da      	uxtb	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 f930 	bl	800bfa8 <USBD_CtlSendStatus>
}
 800bd48:	e003      	b.n	800bd52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bd4a:	6839      	ldr	r1, [r7, #0]
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f860 	bl	800be12 <USBD_CtlError>
}
 800bd52:	bf00      	nop
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b082      	sub	sp, #8
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	2b02      	cmp	r3, #2
 800bd70:	d80b      	bhi.n	800bd8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	885b      	ldrh	r3, [r3, #2]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d10c      	bne.n	800bd94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 f910 	bl	800bfa8 <USBD_CtlSendStatus>
      }
      break;
 800bd88:	e004      	b.n	800bd94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bd8a:	6839      	ldr	r1, [r7, #0]
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 f840 	bl	800be12 <USBD_CtlError>
      break;
 800bd92:	e000      	b.n	800bd96 <USBD_ClrFeature+0x3c>
      break;
 800bd94:	bf00      	nop
  }
}
 800bd96:	bf00      	nop
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b084      	sub	sp, #16
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	781a      	ldrb	r2, [r3, #0]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	781a      	ldrb	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f7ff fa41 	bl	800b250 <SWAPBYTE>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	3301      	adds	r3, #1
 800bde0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f7ff fa34 	bl	800b250 <SWAPBYTE>
 800bde8:	4603      	mov	r3, r0
 800bdea:	461a      	mov	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f7ff fa27 	bl	800b250 <SWAPBYTE>
 800be02:	4603      	mov	r3, r0
 800be04:	461a      	mov	r2, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	80da      	strh	r2, [r3, #6]
}
 800be0a:	bf00      	nop
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b082      	sub	sp, #8
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800be1c:	2180      	movs	r1, #128	; 0x80
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 fcd6 	bl	800c7d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800be24:	2100      	movs	r1, #0
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fcd2 	bl	800c7d0 <USBD_LL_StallEP>
}
 800be2c:	bf00      	nop
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b086      	sub	sp, #24
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be40:	2300      	movs	r3, #0
 800be42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d036      	beq.n	800beb8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800be4e:	6938      	ldr	r0, [r7, #16]
 800be50:	f000 f836 	bl	800bec0 <USBD_GetLen>
 800be54:	4603      	mov	r3, r0
 800be56:	3301      	adds	r3, #1
 800be58:	b29b      	uxth	r3, r3
 800be5a:	005b      	lsls	r3, r3, #1
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800be62:	7dfb      	ldrb	r3, [r7, #23]
 800be64:	68ba      	ldr	r2, [r7, #8]
 800be66:	4413      	add	r3, r2
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	7812      	ldrb	r2, [r2, #0]
 800be6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800be6e:	7dfb      	ldrb	r3, [r7, #23]
 800be70:	3301      	adds	r3, #1
 800be72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800be74:	7dfb      	ldrb	r3, [r7, #23]
 800be76:	68ba      	ldr	r2, [r7, #8]
 800be78:	4413      	add	r3, r2
 800be7a:	2203      	movs	r2, #3
 800be7c:	701a      	strb	r2, [r3, #0]
  idx++;
 800be7e:	7dfb      	ldrb	r3, [r7, #23]
 800be80:	3301      	adds	r3, #1
 800be82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800be84:	e013      	b.n	800beae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800be86:	7dfb      	ldrb	r3, [r7, #23]
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	4413      	add	r3, r2
 800be8c:	693a      	ldr	r2, [r7, #16]
 800be8e:	7812      	ldrb	r2, [r2, #0]
 800be90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	3301      	adds	r3, #1
 800be96:	613b      	str	r3, [r7, #16]
    idx++;
 800be98:	7dfb      	ldrb	r3, [r7, #23]
 800be9a:	3301      	adds	r3, #1
 800be9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	68ba      	ldr	r2, [r7, #8]
 800bea2:	4413      	add	r3, r2
 800bea4:	2200      	movs	r2, #0
 800bea6:	701a      	strb	r2, [r3, #0]
    idx++;
 800bea8:	7dfb      	ldrb	r3, [r7, #23]
 800beaa:	3301      	adds	r3, #1
 800beac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d1e7      	bne.n	800be86 <USBD_GetString+0x52>
 800beb6:	e000      	b.n	800beba <USBD_GetString+0x86>
    return;
 800beb8:	bf00      	nop
  }
}
 800beba:	3718      	adds	r7, #24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bec8:	2300      	movs	r3, #0
 800beca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bed0:	e005      	b.n	800bede <USBD_GetLen+0x1e>
  {
    len++;
 800bed2:	7bfb      	ldrb	r3, [r7, #15]
 800bed4:	3301      	adds	r3, #1
 800bed6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	3301      	adds	r3, #1
 800bedc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1f5      	bne.n	800bed2 <USBD_GetLen+0x12>
  }

  return len;
 800bee6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3714      	adds	r7, #20
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2202      	movs	r2, #2
 800bf04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	2100      	movs	r1, #0
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	f000 fce1 	bl	800c8e2 <USBD_LL_Transmit>

  return USBD_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b084      	sub	sp, #16
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	60f8      	str	r0, [r7, #12]
 800bf32:	60b9      	str	r1, [r7, #8]
 800bf34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	2100      	movs	r1, #0
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f000 fcd0 	bl	800c8e2 <USBD_LL_Transmit>

  return USBD_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3710      	adds	r7, #16
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2203      	movs	r2, #3
 800bf5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	2100      	movs	r1, #0
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f000 fcd4 	bl	800c924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b084      	sub	sp, #16
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	60f8      	str	r0, [r7, #12]
 800bf8e:	60b9      	str	r1, [r7, #8]
 800bf90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68ba      	ldr	r2, [r7, #8]
 800bf96:	2100      	movs	r1, #0
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f000 fcc3 	bl	800c924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3710      	adds	r7, #16
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2204      	movs	r2, #4
 800bfb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bfb8:	2300      	movs	r3, #0
 800bfba:	2200      	movs	r2, #0
 800bfbc:	2100      	movs	r1, #0
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fc8f 	bl	800c8e2 <USBD_LL_Transmit>

  return USBD_OK;
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b082      	sub	sp, #8
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2205      	movs	r2, #5
 800bfda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfde:	2300      	movs	r3, #0
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	2100      	movs	r1, #0
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 fc9d 	bl	800c924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfea:	2300      	movs	r3, #0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bff8:	2200      	movs	r2, #0
 800bffa:	4912      	ldr	r1, [pc, #72]	; (800c044 <MX_USB_DEVICE_Init+0x50>)
 800bffc:	4812      	ldr	r0, [pc, #72]	; (800c048 <MX_USB_DEVICE_Init+0x54>)
 800bffe:	f7fe fd07 	bl	800aa10 <USBD_Init>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d001      	beq.n	800c00c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c008:	f7f5 fc08 	bl	800181c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c00c:	490f      	ldr	r1, [pc, #60]	; (800c04c <MX_USB_DEVICE_Init+0x58>)
 800c00e:	480e      	ldr	r0, [pc, #56]	; (800c048 <MX_USB_DEVICE_Init+0x54>)
 800c010:	f7fe fd2e 	bl	800aa70 <USBD_RegisterClass>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d001      	beq.n	800c01e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c01a:	f7f5 fbff 	bl	800181c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c01e:	490c      	ldr	r1, [pc, #48]	; (800c050 <MX_USB_DEVICE_Init+0x5c>)
 800c020:	4809      	ldr	r0, [pc, #36]	; (800c048 <MX_USB_DEVICE_Init+0x54>)
 800c022:	f7fe fc1f 	bl	800a864 <USBD_CDC_RegisterInterface>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d001      	beq.n	800c030 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c02c:	f7f5 fbf6 	bl	800181c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c030:	4805      	ldr	r0, [pc, #20]	; (800c048 <MX_USB_DEVICE_Init+0x54>)
 800c032:	f7fe fd53 	bl	800aadc <USBD_Start>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d001      	beq.n	800c040 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c03c:	f7f5 fbee 	bl	800181c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c040:	bf00      	nop
 800c042:	bd80      	pop	{r7, pc}
 800c044:	200000d4 	.word	0x200000d4
 800c048:	200005cc 	.word	0x200005cc
 800c04c:	20000040 	.word	0x20000040
 800c050:	200000c0 	.word	0x200000c0

0800c054 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c058:	2200      	movs	r2, #0
 800c05a:	4905      	ldr	r1, [pc, #20]	; (800c070 <CDC_Init_FS+0x1c>)
 800c05c:	4805      	ldr	r0, [pc, #20]	; (800c074 <CDC_Init_FS+0x20>)
 800c05e:	f7fe fc1b 	bl	800a898 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c062:	4905      	ldr	r1, [pc, #20]	; (800c078 <CDC_Init_FS+0x24>)
 800c064:	4803      	ldr	r0, [pc, #12]	; (800c074 <CDC_Init_FS+0x20>)
 800c066:	f7fe fc39 	bl	800a8dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c06a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	200010a8 	.word	0x200010a8
 800c074:	200005cc 	.word	0x200005cc
 800c078:	200008a8 	.word	0x200008a8

0800c07c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c07c:	b480      	push	{r7}
 800c07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c080:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c082:	4618      	mov	r0, r3
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	4603      	mov	r3, r0
 800c094:	6039      	str	r1, [r7, #0]
 800c096:	71fb      	strb	r3, [r7, #7]
 800c098:	4613      	mov	r3, r2
 800c09a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c09c:	79fb      	ldrb	r3, [r7, #7]
 800c09e:	2b23      	cmp	r3, #35	; 0x23
 800c0a0:	d84a      	bhi.n	800c138 <CDC_Control_FS+0xac>
 800c0a2:	a201      	add	r2, pc, #4	; (adr r2, 800c0a8 <CDC_Control_FS+0x1c>)
 800c0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a8:	0800c139 	.word	0x0800c139
 800c0ac:	0800c139 	.word	0x0800c139
 800c0b0:	0800c139 	.word	0x0800c139
 800c0b4:	0800c139 	.word	0x0800c139
 800c0b8:	0800c139 	.word	0x0800c139
 800c0bc:	0800c139 	.word	0x0800c139
 800c0c0:	0800c139 	.word	0x0800c139
 800c0c4:	0800c139 	.word	0x0800c139
 800c0c8:	0800c139 	.word	0x0800c139
 800c0cc:	0800c139 	.word	0x0800c139
 800c0d0:	0800c139 	.word	0x0800c139
 800c0d4:	0800c139 	.word	0x0800c139
 800c0d8:	0800c139 	.word	0x0800c139
 800c0dc:	0800c139 	.word	0x0800c139
 800c0e0:	0800c139 	.word	0x0800c139
 800c0e4:	0800c139 	.word	0x0800c139
 800c0e8:	0800c139 	.word	0x0800c139
 800c0ec:	0800c139 	.word	0x0800c139
 800c0f0:	0800c139 	.word	0x0800c139
 800c0f4:	0800c139 	.word	0x0800c139
 800c0f8:	0800c139 	.word	0x0800c139
 800c0fc:	0800c139 	.word	0x0800c139
 800c100:	0800c139 	.word	0x0800c139
 800c104:	0800c139 	.word	0x0800c139
 800c108:	0800c139 	.word	0x0800c139
 800c10c:	0800c139 	.word	0x0800c139
 800c110:	0800c139 	.word	0x0800c139
 800c114:	0800c139 	.word	0x0800c139
 800c118:	0800c139 	.word	0x0800c139
 800c11c:	0800c139 	.word	0x0800c139
 800c120:	0800c139 	.word	0x0800c139
 800c124:	0800c139 	.word	0x0800c139
 800c128:	0800c139 	.word	0x0800c139
 800c12c:	0800c139 	.word	0x0800c139
 800c130:	0800c139 	.word	0x0800c139
 800c134:	0800c139 	.word	0x0800c139
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c138:	bf00      	nop
  }

  return (USBD_OK);
 800c13a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c152:	6879      	ldr	r1, [r7, #4]
 800c154:	4805      	ldr	r0, [pc, #20]	; (800c16c <CDC_Receive_FS+0x24>)
 800c156:	f7fe fbc1 	bl	800a8dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c15a:	4804      	ldr	r0, [pc, #16]	; (800c16c <CDC_Receive_FS+0x24>)
 800c15c:	f7fe fc22 	bl	800a9a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c160:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c162:	4618      	mov	r0, r3
 800c164:	3708      	adds	r7, #8
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	200005cc 	.word	0x200005cc

0800c170 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	460b      	mov	r3, r1
 800c17a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c180:	4b0d      	ldr	r3, [pc, #52]	; (800c1b8 <CDC_Transmit_FS+0x48>)
 800c182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c186:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d001      	beq.n	800c196 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c192:	2301      	movs	r3, #1
 800c194:	e00b      	b.n	800c1ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c196:	887b      	ldrh	r3, [r7, #2]
 800c198:	461a      	mov	r2, r3
 800c19a:	6879      	ldr	r1, [r7, #4]
 800c19c:	4806      	ldr	r0, [pc, #24]	; (800c1b8 <CDC_Transmit_FS+0x48>)
 800c19e:	f7fe fb7b 	bl	800a898 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c1a2:	4805      	ldr	r0, [pc, #20]	; (800c1b8 <CDC_Transmit_FS+0x48>)
 800c1a4:	f7fe fbb8 	bl	800a918 <USBD_CDC_TransmitPacket>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	200005cc 	.word	0x200005cc

0800c1bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b087      	sub	sp, #28
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c1ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	371c      	adds	r7, #28
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr
	...

0800c1e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	6039      	str	r1, [r7, #0]
 800c1ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	2212      	movs	r2, #18
 800c1f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c1f2:	4b03      	ldr	r3, [pc, #12]	; (800c200 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr
 800c200:	200000f0 	.word	0x200000f0

0800c204 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	4603      	mov	r3, r0
 800c20c:	6039      	str	r1, [r7, #0]
 800c20e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2204      	movs	r2, #4
 800c214:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c216:	4b03      	ldr	r3, [pc, #12]	; (800c224 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c218:	4618      	mov	r0, r3
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr
 800c224:	20000104 	.word	0x20000104

0800c228 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	4603      	mov	r3, r0
 800c230:	6039      	str	r1, [r7, #0]
 800c232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c234:	79fb      	ldrb	r3, [r7, #7]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d105      	bne.n	800c246 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	4907      	ldr	r1, [pc, #28]	; (800c25c <USBD_FS_ProductStrDescriptor+0x34>)
 800c23e:	4808      	ldr	r0, [pc, #32]	; (800c260 <USBD_FS_ProductStrDescriptor+0x38>)
 800c240:	f7ff fdf8 	bl	800be34 <USBD_GetString>
 800c244:	e004      	b.n	800c250 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c246:	683a      	ldr	r2, [r7, #0]
 800c248:	4904      	ldr	r1, [pc, #16]	; (800c25c <USBD_FS_ProductStrDescriptor+0x34>)
 800c24a:	4805      	ldr	r0, [pc, #20]	; (800c260 <USBD_FS_ProductStrDescriptor+0x38>)
 800c24c:	f7ff fdf2 	bl	800be34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c250:	4b02      	ldr	r3, [pc, #8]	; (800c25c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c252:	4618      	mov	r0, r3
 800c254:	3708      	adds	r7, #8
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	200018a8 	.word	0x200018a8
 800c260:	0800f778 	.word	0x0800f778

0800c264 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	4603      	mov	r3, r0
 800c26c:	6039      	str	r1, [r7, #0]
 800c26e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c270:	683a      	ldr	r2, [r7, #0]
 800c272:	4904      	ldr	r1, [pc, #16]	; (800c284 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c274:	4804      	ldr	r0, [pc, #16]	; (800c288 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c276:	f7ff fddd 	bl	800be34 <USBD_GetString>
  return USBD_StrDesc;
 800c27a:	4b02      	ldr	r3, [pc, #8]	; (800c284 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	200018a8 	.word	0x200018a8
 800c288:	0800f790 	.word	0x0800f790

0800c28c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	6039      	str	r1, [r7, #0]
 800c296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	221a      	movs	r2, #26
 800c29c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c29e:	f000 f843 	bl	800c328 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c2a2:	4b02      	ldr	r3, [pc, #8]	; (800c2ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	20000108 	.word	0x20000108

0800c2b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	6039      	str	r1, [r7, #0]
 800c2ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c2bc:	79fb      	ldrb	r3, [r7, #7]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d105      	bne.n	800c2ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	4907      	ldr	r1, [pc, #28]	; (800c2e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2c6:	4808      	ldr	r0, [pc, #32]	; (800c2e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2c8:	f7ff fdb4 	bl	800be34 <USBD_GetString>
 800c2cc:	e004      	b.n	800c2d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	4904      	ldr	r1, [pc, #16]	; (800c2e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2d2:	4805      	ldr	r0, [pc, #20]	; (800c2e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2d4:	f7ff fdae 	bl	800be34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2d8:	4b02      	ldr	r3, [pc, #8]	; (800c2e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3708      	adds	r7, #8
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	200018a8 	.word	0x200018a8
 800c2e8:	0800f7a4 	.word	0x0800f7a4

0800c2ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	6039      	str	r1, [r7, #0]
 800c2f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2f8:	79fb      	ldrb	r3, [r7, #7]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d105      	bne.n	800c30a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2fe:	683a      	ldr	r2, [r7, #0]
 800c300:	4907      	ldr	r1, [pc, #28]	; (800c320 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c302:	4808      	ldr	r0, [pc, #32]	; (800c324 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c304:	f7ff fd96 	bl	800be34 <USBD_GetString>
 800c308:	e004      	b.n	800c314 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c30a:	683a      	ldr	r2, [r7, #0]
 800c30c:	4904      	ldr	r1, [pc, #16]	; (800c320 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c30e:	4805      	ldr	r0, [pc, #20]	; (800c324 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c310:	f7ff fd90 	bl	800be34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c314:	4b02      	ldr	r3, [pc, #8]	; (800c320 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c316:	4618      	mov	r0, r3
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	200018a8 	.word	0x200018a8
 800c324:	0800f7b0 	.word	0x0800f7b0

0800c328 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c32e:	4b0f      	ldr	r3, [pc, #60]	; (800c36c <Get_SerialNum+0x44>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c334:	4b0e      	ldr	r3, [pc, #56]	; (800c370 <Get_SerialNum+0x48>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c33a:	4b0e      	ldr	r3, [pc, #56]	; (800c374 <Get_SerialNum+0x4c>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4413      	add	r3, r2
 800c346:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d009      	beq.n	800c362 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c34e:	2208      	movs	r2, #8
 800c350:	4909      	ldr	r1, [pc, #36]	; (800c378 <Get_SerialNum+0x50>)
 800c352:	68f8      	ldr	r0, [r7, #12]
 800c354:	f000 f814 	bl	800c380 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c358:	2204      	movs	r2, #4
 800c35a:	4908      	ldr	r1, [pc, #32]	; (800c37c <Get_SerialNum+0x54>)
 800c35c:	68b8      	ldr	r0, [r7, #8]
 800c35e:	f000 f80f 	bl	800c380 <IntToUnicode>
  }
}
 800c362:	bf00      	nop
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	1fff7a10 	.word	0x1fff7a10
 800c370:	1fff7a14 	.word	0x1fff7a14
 800c374:	1fff7a18 	.word	0x1fff7a18
 800c378:	2000010a 	.word	0x2000010a
 800c37c:	2000011a 	.word	0x2000011a

0800c380 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c380:	b480      	push	{r7}
 800c382:	b087      	sub	sp, #28
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	4613      	mov	r3, r2
 800c38c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c392:	2300      	movs	r3, #0
 800c394:	75fb      	strb	r3, [r7, #23]
 800c396:	e027      	b.n	800c3e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	0f1b      	lsrs	r3, r3, #28
 800c39c:	2b09      	cmp	r3, #9
 800c39e:	d80b      	bhi.n	800c3b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	0f1b      	lsrs	r3, r3, #28
 800c3a4:	b2da      	uxtb	r2, r3
 800c3a6:	7dfb      	ldrb	r3, [r7, #23]
 800c3a8:	005b      	lsls	r3, r3, #1
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	440b      	add	r3, r1
 800c3b0:	3230      	adds	r2, #48	; 0x30
 800c3b2:	b2d2      	uxtb	r2, r2
 800c3b4:	701a      	strb	r2, [r3, #0]
 800c3b6:	e00a      	b.n	800c3ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	0f1b      	lsrs	r3, r3, #28
 800c3bc:	b2da      	uxtb	r2, r3
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
 800c3c0:	005b      	lsls	r3, r3, #1
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	440b      	add	r3, r1
 800c3c8:	3237      	adds	r2, #55	; 0x37
 800c3ca:	b2d2      	uxtb	r2, r2
 800c3cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	011b      	lsls	r3, r3, #4
 800c3d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3d4:	7dfb      	ldrb	r3, [r7, #23]
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	3301      	adds	r3, #1
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	4413      	add	r3, r2
 800c3de:	2200      	movs	r2, #0
 800c3e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c3e2:	7dfb      	ldrb	r3, [r7, #23]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	75fb      	strb	r3, [r7, #23]
 800c3e8:	7dfa      	ldrb	r2, [r7, #23]
 800c3ea:	79fb      	ldrb	r3, [r7, #7]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d3d3      	bcc.n	800c398 <IntToUnicode+0x18>
  }
}
 800c3f0:	bf00      	nop
 800c3f2:	bf00      	nop
 800c3f4:	371c      	adds	r7, #28
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr
	...

0800c400 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b08a      	sub	sp, #40	; 0x28
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c408:	f107 0314 	add.w	r3, r7, #20
 800c40c:	2200      	movs	r2, #0
 800c40e:	601a      	str	r2, [r3, #0]
 800c410:	605a      	str	r2, [r3, #4]
 800c412:	609a      	str	r2, [r3, #8]
 800c414:	60da      	str	r2, [r3, #12]
 800c416:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c420:	d13a      	bne.n	800c498 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c422:	2300      	movs	r3, #0
 800c424:	613b      	str	r3, [r7, #16]
 800c426:	4b1e      	ldr	r3, [pc, #120]	; (800c4a0 <HAL_PCD_MspInit+0xa0>)
 800c428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c42a:	4a1d      	ldr	r2, [pc, #116]	; (800c4a0 <HAL_PCD_MspInit+0xa0>)
 800c42c:	f043 0301 	orr.w	r3, r3, #1
 800c430:	6313      	str	r3, [r2, #48]	; 0x30
 800c432:	4b1b      	ldr	r3, [pc, #108]	; (800c4a0 <HAL_PCD_MspInit+0xa0>)
 800c434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c436:	f003 0301 	and.w	r3, r3, #1
 800c43a:	613b      	str	r3, [r7, #16]
 800c43c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c43e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c444:	2302      	movs	r3, #2
 800c446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c448:	2300      	movs	r3, #0
 800c44a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c44c:	2303      	movs	r3, #3
 800c44e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c450:	230a      	movs	r3, #10
 800c452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c454:	f107 0314 	add.w	r3, r7, #20
 800c458:	4619      	mov	r1, r3
 800c45a:	4812      	ldr	r0, [pc, #72]	; (800c4a4 <HAL_PCD_MspInit+0xa4>)
 800c45c:	f7f6 fca4 	bl	8002da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c460:	4b0f      	ldr	r3, [pc, #60]	; (800c4a0 <HAL_PCD_MspInit+0xa0>)
 800c462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c464:	4a0e      	ldr	r2, [pc, #56]	; (800c4a0 <HAL_PCD_MspInit+0xa0>)
 800c466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c46a:	6353      	str	r3, [r2, #52]	; 0x34
 800c46c:	2300      	movs	r3, #0
 800c46e:	60fb      	str	r3, [r7, #12]
 800c470:	4b0b      	ldr	r3, [pc, #44]	; (800c4a0 <HAL_PCD_MspInit+0xa0>)
 800c472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c474:	4a0a      	ldr	r2, [pc, #40]	; (800c4a0 <HAL_PCD_MspInit+0xa0>)
 800c476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c47a:	6453      	str	r3, [r2, #68]	; 0x44
 800c47c:	4b08      	ldr	r3, [pc, #32]	; (800c4a0 <HAL_PCD_MspInit+0xa0>)
 800c47e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c484:	60fb      	str	r3, [r7, #12]
 800c486:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c488:	2200      	movs	r2, #0
 800c48a:	2100      	movs	r1, #0
 800c48c:	2043      	movs	r0, #67	; 0x43
 800c48e:	f7f6 fc24 	bl	8002cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c492:	2043      	movs	r0, #67	; 0x43
 800c494:	f7f6 fc3d 	bl	8002d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c498:	bf00      	nop
 800c49a:	3728      	adds	r7, #40	; 0x28
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	40023800 	.word	0x40023800
 800c4a4:	40020000 	.word	0x40020000

0800c4a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c4bc:	4619      	mov	r1, r3
 800c4be:	4610      	mov	r0, r2
 800c4c0:	f7fe fb59 	bl	800ab76 <USBD_LL_SetupStage>
}
 800c4c4:	bf00      	nop
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c4de:	78fa      	ldrb	r2, [r7, #3]
 800c4e0:	6879      	ldr	r1, [r7, #4]
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	00db      	lsls	r3, r3, #3
 800c4e6:	4413      	add	r3, r2
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	440b      	add	r3, r1
 800c4ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	78fb      	ldrb	r3, [r7, #3]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	f7fe fb93 	bl	800ac20 <USBD_LL_DataOutStage>
}
 800c4fa:	bf00      	nop
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	460b      	mov	r3, r1
 800c50c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c514:	78fa      	ldrb	r2, [r7, #3]
 800c516:	6879      	ldr	r1, [r7, #4]
 800c518:	4613      	mov	r3, r2
 800c51a:	00db      	lsls	r3, r3, #3
 800c51c:	4413      	add	r3, r2
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	440b      	add	r3, r1
 800c522:	334c      	adds	r3, #76	; 0x4c
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	78fb      	ldrb	r3, [r7, #3]
 800c528:	4619      	mov	r1, r3
 800c52a:	f7fe fc2c 	bl	800ad86 <USBD_LL_DataInStage>
}
 800c52e:	bf00      	nop
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b082      	sub	sp, #8
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c544:	4618      	mov	r0, r3
 800c546:	f7fe fd60 	bl	800b00a <USBD_LL_SOF>
}
 800c54a:	bf00      	nop
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b084      	sub	sp, #16
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c55a:	2301      	movs	r3, #1
 800c55c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	2b02      	cmp	r3, #2
 800c564:	d001      	beq.n	800c56a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c566:	f7f5 f959 	bl	800181c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c570:	7bfa      	ldrb	r2, [r7, #15]
 800c572:	4611      	mov	r1, r2
 800c574:	4618      	mov	r0, r3
 800c576:	f7fe fd0a 	bl	800af8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c580:	4618      	mov	r0, r3
 800c582:	f7fe fcb2 	bl	800aeea <USBD_LL_Reset>
}
 800c586:	bf00      	nop
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
	...

0800c590 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7fe fd05 	bl	800afae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	6812      	ldr	r2, [r2, #0]
 800c5b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c5b6:	f043 0301 	orr.w	r3, r3, #1
 800c5ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a1b      	ldr	r3, [r3, #32]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d005      	beq.n	800c5d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5c4:	4b04      	ldr	r3, [pc, #16]	; (800c5d8 <HAL_PCD_SuspendCallback+0x48>)
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	4a03      	ldr	r2, [pc, #12]	; (800c5d8 <HAL_PCD_SuspendCallback+0x48>)
 800c5ca:	f043 0306 	orr.w	r3, r3, #6
 800c5ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c5d0:	bf00      	nop
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	e000ed00 	.word	0xe000ed00

0800c5dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe fcf5 	bl	800afda <USBD_LL_Resume>
}
 800c5f0:	bf00      	nop
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	460b      	mov	r3, r1
 800c602:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c60a:	78fa      	ldrb	r2, [r7, #3]
 800c60c:	4611      	mov	r1, r2
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fe fd4d 	bl	800b0ae <USBD_LL_IsoOUTIncomplete>
}
 800c614:	bf00      	nop
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	460b      	mov	r3, r1
 800c626:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c62e:	78fa      	ldrb	r2, [r7, #3]
 800c630:	4611      	mov	r1, r2
 800c632:	4618      	mov	r0, r3
 800c634:	f7fe fd09 	bl	800b04a <USBD_LL_IsoINIncomplete>
}
 800c638:	bf00      	nop
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fe fd5f 	bl	800b112 <USBD_LL_DevConnected>
}
 800c654:	bf00      	nop
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fe fd5c 	bl	800b128 <USBD_LL_DevDisconnected>
}
 800c670:	bf00      	nop
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d13c      	bne.n	800c702 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c688:	4a20      	ldr	r2, [pc, #128]	; (800c70c <USBD_LL_Init+0x94>)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4a1e      	ldr	r2, [pc, #120]	; (800c70c <USBD_LL_Init+0x94>)
 800c694:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c698:	4b1c      	ldr	r3, [pc, #112]	; (800c70c <USBD_LL_Init+0x94>)
 800c69a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c69e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c6a0:	4b1a      	ldr	r3, [pc, #104]	; (800c70c <USBD_LL_Init+0x94>)
 800c6a2:	2204      	movs	r2, #4
 800c6a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c6a6:	4b19      	ldr	r3, [pc, #100]	; (800c70c <USBD_LL_Init+0x94>)
 800c6a8:	2202      	movs	r2, #2
 800c6aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c6ac:	4b17      	ldr	r3, [pc, #92]	; (800c70c <USBD_LL_Init+0x94>)
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c6b2:	4b16      	ldr	r3, [pc, #88]	; (800c70c <USBD_LL_Init+0x94>)
 800c6b4:	2202      	movs	r2, #2
 800c6b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c6b8:	4b14      	ldr	r3, [pc, #80]	; (800c70c <USBD_LL_Init+0x94>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c6be:	4b13      	ldr	r3, [pc, #76]	; (800c70c <USBD_LL_Init+0x94>)
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c6c4:	4b11      	ldr	r3, [pc, #68]	; (800c70c <USBD_LL_Init+0x94>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c6ca:	4b10      	ldr	r3, [pc, #64]	; (800c70c <USBD_LL_Init+0x94>)
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c6d0:	4b0e      	ldr	r3, [pc, #56]	; (800c70c <USBD_LL_Init+0x94>)
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c6d6:	480d      	ldr	r0, [pc, #52]	; (800c70c <USBD_LL_Init+0x94>)
 800c6d8:	f7f8 fafb 	bl	8004cd2 <HAL_PCD_Init>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d001      	beq.n	800c6e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c6e2:	f7f5 f89b 	bl	800181c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c6e6:	2180      	movs	r1, #128	; 0x80
 800c6e8:	4808      	ldr	r0, [pc, #32]	; (800c70c <USBD_LL_Init+0x94>)
 800c6ea:	f7f9 fd52 	bl	8006192 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c6ee:	2240      	movs	r2, #64	; 0x40
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	4806      	ldr	r0, [pc, #24]	; (800c70c <USBD_LL_Init+0x94>)
 800c6f4:	f7f9 fd06 	bl	8006104 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c6f8:	2280      	movs	r2, #128	; 0x80
 800c6fa:	2101      	movs	r1, #1
 800c6fc:	4803      	ldr	r0, [pc, #12]	; (800c70c <USBD_LL_Init+0x94>)
 800c6fe:	f7f9 fd01 	bl	8006104 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c702:	2300      	movs	r3, #0
}
 800c704:	4618      	mov	r0, r3
 800c706:	3708      	adds	r7, #8
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	20001aa8 	.word	0x20001aa8

0800c710 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c718:	2300      	movs	r3, #0
 800c71a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c71c:	2300      	movs	r3, #0
 800c71e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c726:	4618      	mov	r0, r3
 800c728:	f7f8 fbf0 	bl	8004f0c <HAL_PCD_Start>
 800c72c:	4603      	mov	r3, r0
 800c72e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c730:	7bfb      	ldrb	r3, [r7, #15]
 800c732:	4618      	mov	r0, r3
 800c734:	f000 f942 	bl	800c9bc <USBD_Get_USB_Status>
 800c738:	4603      	mov	r3, r0
 800c73a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c73c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b084      	sub	sp, #16
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	4608      	mov	r0, r1
 800c750:	4611      	mov	r1, r2
 800c752:	461a      	mov	r2, r3
 800c754:	4603      	mov	r3, r0
 800c756:	70fb      	strb	r3, [r7, #3]
 800c758:	460b      	mov	r3, r1
 800c75a:	70bb      	strb	r3, [r7, #2]
 800c75c:	4613      	mov	r3, r2
 800c75e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c760:	2300      	movs	r3, #0
 800c762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c764:	2300      	movs	r3, #0
 800c766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c76e:	78bb      	ldrb	r3, [r7, #2]
 800c770:	883a      	ldrh	r2, [r7, #0]
 800c772:	78f9      	ldrb	r1, [r7, #3]
 800c774:	f7f9 f8c1 	bl	80058fa <HAL_PCD_EP_Open>
 800c778:	4603      	mov	r3, r0
 800c77a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	4618      	mov	r0, r3
 800c780:	f000 f91c 	bl	800c9bc <USBD_Get_USB_Status>
 800c784:	4603      	mov	r3, r0
 800c786:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c788:	7bbb      	ldrb	r3, [r7, #14]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b084      	sub	sp, #16
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	460b      	mov	r3, r1
 800c79c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7ac:	78fa      	ldrb	r2, [r7, #3]
 800c7ae:	4611      	mov	r1, r2
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7f9 f90a 	bl	80059ca <HAL_PCD_EP_Close>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7ba:	7bfb      	ldrb	r3, [r7, #15]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f000 f8fd 	bl	800c9bc <USBD_Get_USB_Status>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	460b      	mov	r3, r1
 800c7da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7ea:	78fa      	ldrb	r2, [r7, #3]
 800c7ec:	4611      	mov	r1, r2
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7f9 f9e2 	bl	8005bb8 <HAL_PCD_EP_SetStall>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f000 f8de 	bl	800c9bc <USBD_Get_USB_Status>
 800c800:	4603      	mov	r3, r0
 800c802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c804:	7bbb      	ldrb	r3, [r7, #14]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b084      	sub	sp, #16
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
 800c816:	460b      	mov	r3, r1
 800c818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c81a:	2300      	movs	r3, #0
 800c81c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c81e:	2300      	movs	r3, #0
 800c820:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c828:	78fa      	ldrb	r2, [r7, #3]
 800c82a:	4611      	mov	r1, r2
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7f9 fa27 	bl	8005c80 <HAL_PCD_EP_ClrStall>
 800c832:	4603      	mov	r3, r0
 800c834:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c836:	7bfb      	ldrb	r3, [r7, #15]
 800c838:	4618      	mov	r0, r3
 800c83a:	f000 f8bf 	bl	800c9bc <USBD_Get_USB_Status>
 800c83e:	4603      	mov	r3, r0
 800c840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c842:	7bbb      	ldrb	r3, [r7, #14]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	460b      	mov	r3, r1
 800c856:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c85e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c860:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c864:	2b00      	cmp	r3, #0
 800c866:	da0b      	bge.n	800c880 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c868:	78fb      	ldrb	r3, [r7, #3]
 800c86a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c86e:	68f9      	ldr	r1, [r7, #12]
 800c870:	4613      	mov	r3, r2
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	4413      	add	r3, r2
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	440b      	add	r3, r1
 800c87a:	333e      	adds	r3, #62	; 0x3e
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	e00b      	b.n	800c898 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c880:	78fb      	ldrb	r3, [r7, #3]
 800c882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c886:	68f9      	ldr	r1, [r7, #12]
 800c888:	4613      	mov	r3, r2
 800c88a:	00db      	lsls	r3, r3, #3
 800c88c:	4413      	add	r3, r2
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	440b      	add	r3, r1
 800c892:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c896:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3714      	adds	r7, #20
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c8be:	78fa      	ldrb	r2, [r7, #3]
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7f8 fff4 	bl	80058b0 <HAL_PCD_SetAddress>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8cc:	7bfb      	ldrb	r3, [r7, #15]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f000 f874 	bl	800c9bc <USBD_Get_USB_Status>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b086      	sub	sp, #24
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	60f8      	str	r0, [r7, #12]
 800c8ea:	607a      	str	r2, [r7, #4]
 800c8ec:	603b      	str	r3, [r7, #0]
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c900:	7af9      	ldrb	r1, [r7, #11]
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	f7f9 f90d 	bl	8005b24 <HAL_PCD_EP_Transmit>
 800c90a:	4603      	mov	r3, r0
 800c90c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
 800c910:	4618      	mov	r0, r3
 800c912:	f000 f853 	bl	800c9bc <USBD_Get_USB_Status>
 800c916:	4603      	mov	r3, r0
 800c918:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c91a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3718      	adds	r7, #24
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b086      	sub	sp, #24
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	607a      	str	r2, [r7, #4]
 800c92e:	603b      	str	r3, [r7, #0]
 800c930:	460b      	mov	r3, r1
 800c932:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c934:	2300      	movs	r3, #0
 800c936:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c938:	2300      	movs	r3, #0
 800c93a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c942:	7af9      	ldrb	r1, [r7, #11]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	f7f9 f889 	bl	8005a5e <HAL_PCD_EP_Receive>
 800c94c:	4603      	mov	r3, r0
 800c94e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c950:	7dfb      	ldrb	r3, [r7, #23]
 800c952:	4618      	mov	r0, r3
 800c954:	f000 f832 	bl	800c9bc <USBD_Get_USB_Status>
 800c958:	4603      	mov	r3, r0
 800c95a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c95c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3718      	adds	r7, #24
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b082      	sub	sp, #8
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	460b      	mov	r3, r1
 800c970:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c978:	78fa      	ldrb	r2, [r7, #3]
 800c97a:	4611      	mov	r1, r2
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7f9 f8b9 	bl	8005af4 <HAL_PCD_EP_GetRxCount>
 800c982:	4603      	mov	r3, r0
}
 800c984:	4618      	mov	r0, r3
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c994:	4b03      	ldr	r3, [pc, #12]	; (800c9a4 <USBD_static_malloc+0x18>)
}
 800c996:	4618      	mov	r0, r3
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	20001fb4 	.word	0x20001fb4

0800c9a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]

}
 800c9b0:	bf00      	nop
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c9ca:	79fb      	ldrb	r3, [r7, #7]
 800c9cc:	2b03      	cmp	r3, #3
 800c9ce:	d817      	bhi.n	800ca00 <USBD_Get_USB_Status+0x44>
 800c9d0:	a201      	add	r2, pc, #4	; (adr r2, 800c9d8 <USBD_Get_USB_Status+0x1c>)
 800c9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d6:	bf00      	nop
 800c9d8:	0800c9e9 	.word	0x0800c9e9
 800c9dc:	0800c9ef 	.word	0x0800c9ef
 800c9e0:	0800c9f5 	.word	0x0800c9f5
 800c9e4:	0800c9fb 	.word	0x0800c9fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c9ec:	e00b      	b.n	800ca06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c9f2:	e008      	b.n	800ca06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c9f8:	e005      	b.n	800ca06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	73fb      	strb	r3, [r7, #15]
    break;
 800c9fe:	e002      	b.n	800ca06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca00:	2303      	movs	r3, #3
 800ca02:	73fb      	strb	r3, [r7, #15]
    break;
 800ca04:	bf00      	nop
  }
  return usb_status;
 800ca06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3714      	adds	r7, #20
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <__cvt>:
 800ca14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca18:	ec55 4b10 	vmov	r4, r5, d0
 800ca1c:	2d00      	cmp	r5, #0
 800ca1e:	460e      	mov	r6, r1
 800ca20:	4619      	mov	r1, r3
 800ca22:	462b      	mov	r3, r5
 800ca24:	bfbb      	ittet	lt
 800ca26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ca2a:	461d      	movlt	r5, r3
 800ca2c:	2300      	movge	r3, #0
 800ca2e:	232d      	movlt	r3, #45	; 0x2d
 800ca30:	700b      	strb	r3, [r1, #0]
 800ca32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ca38:	4691      	mov	r9, r2
 800ca3a:	f023 0820 	bic.w	r8, r3, #32
 800ca3e:	bfbc      	itt	lt
 800ca40:	4622      	movlt	r2, r4
 800ca42:	4614      	movlt	r4, r2
 800ca44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca48:	d005      	beq.n	800ca56 <__cvt+0x42>
 800ca4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ca4e:	d100      	bne.n	800ca52 <__cvt+0x3e>
 800ca50:	3601      	adds	r6, #1
 800ca52:	2102      	movs	r1, #2
 800ca54:	e000      	b.n	800ca58 <__cvt+0x44>
 800ca56:	2103      	movs	r1, #3
 800ca58:	ab03      	add	r3, sp, #12
 800ca5a:	9301      	str	r3, [sp, #4]
 800ca5c:	ab02      	add	r3, sp, #8
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	ec45 4b10 	vmov	d0, r4, r5
 800ca64:	4653      	mov	r3, sl
 800ca66:	4632      	mov	r2, r6
 800ca68:	f000 fe7e 	bl	800d768 <_dtoa_r>
 800ca6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ca70:	4607      	mov	r7, r0
 800ca72:	d102      	bne.n	800ca7a <__cvt+0x66>
 800ca74:	f019 0f01 	tst.w	r9, #1
 800ca78:	d022      	beq.n	800cac0 <__cvt+0xac>
 800ca7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca7e:	eb07 0906 	add.w	r9, r7, r6
 800ca82:	d110      	bne.n	800caa6 <__cvt+0x92>
 800ca84:	783b      	ldrb	r3, [r7, #0]
 800ca86:	2b30      	cmp	r3, #48	; 0x30
 800ca88:	d10a      	bne.n	800caa0 <__cvt+0x8c>
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	4620      	mov	r0, r4
 800ca90:	4629      	mov	r1, r5
 800ca92:	f7f4 f821 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca96:	b918      	cbnz	r0, 800caa0 <__cvt+0x8c>
 800ca98:	f1c6 0601 	rsb	r6, r6, #1
 800ca9c:	f8ca 6000 	str.w	r6, [sl]
 800caa0:	f8da 3000 	ldr.w	r3, [sl]
 800caa4:	4499      	add	r9, r3
 800caa6:	2200      	movs	r2, #0
 800caa8:	2300      	movs	r3, #0
 800caaa:	4620      	mov	r0, r4
 800caac:	4629      	mov	r1, r5
 800caae:	f7f4 f813 	bl	8000ad8 <__aeabi_dcmpeq>
 800cab2:	b108      	cbz	r0, 800cab8 <__cvt+0xa4>
 800cab4:	f8cd 900c 	str.w	r9, [sp, #12]
 800cab8:	2230      	movs	r2, #48	; 0x30
 800caba:	9b03      	ldr	r3, [sp, #12]
 800cabc:	454b      	cmp	r3, r9
 800cabe:	d307      	bcc.n	800cad0 <__cvt+0xbc>
 800cac0:	9b03      	ldr	r3, [sp, #12]
 800cac2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cac4:	1bdb      	subs	r3, r3, r7
 800cac6:	4638      	mov	r0, r7
 800cac8:	6013      	str	r3, [r2, #0]
 800caca:	b004      	add	sp, #16
 800cacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad0:	1c59      	adds	r1, r3, #1
 800cad2:	9103      	str	r1, [sp, #12]
 800cad4:	701a      	strb	r2, [r3, #0]
 800cad6:	e7f0      	b.n	800caba <__cvt+0xa6>

0800cad8 <__exponent>:
 800cad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cada:	4603      	mov	r3, r0
 800cadc:	2900      	cmp	r1, #0
 800cade:	bfb8      	it	lt
 800cae0:	4249      	neglt	r1, r1
 800cae2:	f803 2b02 	strb.w	r2, [r3], #2
 800cae6:	bfb4      	ite	lt
 800cae8:	222d      	movlt	r2, #45	; 0x2d
 800caea:	222b      	movge	r2, #43	; 0x2b
 800caec:	2909      	cmp	r1, #9
 800caee:	7042      	strb	r2, [r0, #1]
 800caf0:	dd2a      	ble.n	800cb48 <__exponent+0x70>
 800caf2:	f10d 0207 	add.w	r2, sp, #7
 800caf6:	4617      	mov	r7, r2
 800caf8:	260a      	movs	r6, #10
 800cafa:	4694      	mov	ip, r2
 800cafc:	fb91 f5f6 	sdiv	r5, r1, r6
 800cb00:	fb06 1415 	mls	r4, r6, r5, r1
 800cb04:	3430      	adds	r4, #48	; 0x30
 800cb06:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cb0a:	460c      	mov	r4, r1
 800cb0c:	2c63      	cmp	r4, #99	; 0x63
 800cb0e:	f102 32ff 	add.w	r2, r2, #4294967295
 800cb12:	4629      	mov	r1, r5
 800cb14:	dcf1      	bgt.n	800cafa <__exponent+0x22>
 800cb16:	3130      	adds	r1, #48	; 0x30
 800cb18:	f1ac 0402 	sub.w	r4, ip, #2
 800cb1c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cb20:	1c41      	adds	r1, r0, #1
 800cb22:	4622      	mov	r2, r4
 800cb24:	42ba      	cmp	r2, r7
 800cb26:	d30a      	bcc.n	800cb3e <__exponent+0x66>
 800cb28:	f10d 0209 	add.w	r2, sp, #9
 800cb2c:	eba2 020c 	sub.w	r2, r2, ip
 800cb30:	42bc      	cmp	r4, r7
 800cb32:	bf88      	it	hi
 800cb34:	2200      	movhi	r2, #0
 800cb36:	4413      	add	r3, r2
 800cb38:	1a18      	subs	r0, r3, r0
 800cb3a:	b003      	add	sp, #12
 800cb3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb3e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cb42:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cb46:	e7ed      	b.n	800cb24 <__exponent+0x4c>
 800cb48:	2330      	movs	r3, #48	; 0x30
 800cb4a:	3130      	adds	r1, #48	; 0x30
 800cb4c:	7083      	strb	r3, [r0, #2]
 800cb4e:	70c1      	strb	r1, [r0, #3]
 800cb50:	1d03      	adds	r3, r0, #4
 800cb52:	e7f1      	b.n	800cb38 <__exponent+0x60>

0800cb54 <_printf_float>:
 800cb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb58:	ed2d 8b02 	vpush	{d8}
 800cb5c:	b08d      	sub	sp, #52	; 0x34
 800cb5e:	460c      	mov	r4, r1
 800cb60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cb64:	4616      	mov	r6, r2
 800cb66:	461f      	mov	r7, r3
 800cb68:	4605      	mov	r5, r0
 800cb6a:	f000 fcfb 	bl	800d564 <_localeconv_r>
 800cb6e:	f8d0 a000 	ldr.w	sl, [r0]
 800cb72:	4650      	mov	r0, sl
 800cb74:	f7f3 fb84 	bl	8000280 <strlen>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	930a      	str	r3, [sp, #40]	; 0x28
 800cb7c:	6823      	ldr	r3, [r4, #0]
 800cb7e:	9305      	str	r3, [sp, #20]
 800cb80:	f8d8 3000 	ldr.w	r3, [r8]
 800cb84:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cb88:	3307      	adds	r3, #7
 800cb8a:	f023 0307 	bic.w	r3, r3, #7
 800cb8e:	f103 0208 	add.w	r2, r3, #8
 800cb92:	f8c8 2000 	str.w	r2, [r8]
 800cb96:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb9e:	9307      	str	r3, [sp, #28]
 800cba0:	f8cd 8018 	str.w	r8, [sp, #24]
 800cba4:	ee08 0a10 	vmov	s16, r0
 800cba8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cbac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbb0:	4b9e      	ldr	r3, [pc, #632]	; (800ce2c <_printf_float+0x2d8>)
 800cbb2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbb6:	f7f3 ffc1 	bl	8000b3c <__aeabi_dcmpun>
 800cbba:	bb88      	cbnz	r0, 800cc20 <_printf_float+0xcc>
 800cbbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbc0:	4b9a      	ldr	r3, [pc, #616]	; (800ce2c <_printf_float+0x2d8>)
 800cbc2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc6:	f7f3 ff9b 	bl	8000b00 <__aeabi_dcmple>
 800cbca:	bb48      	cbnz	r0, 800cc20 <_printf_float+0xcc>
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2300      	movs	r3, #0
 800cbd0:	4640      	mov	r0, r8
 800cbd2:	4649      	mov	r1, r9
 800cbd4:	f7f3 ff8a 	bl	8000aec <__aeabi_dcmplt>
 800cbd8:	b110      	cbz	r0, 800cbe0 <_printf_float+0x8c>
 800cbda:	232d      	movs	r3, #45	; 0x2d
 800cbdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbe0:	4a93      	ldr	r2, [pc, #588]	; (800ce30 <_printf_float+0x2dc>)
 800cbe2:	4b94      	ldr	r3, [pc, #592]	; (800ce34 <_printf_float+0x2e0>)
 800cbe4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cbe8:	bf94      	ite	ls
 800cbea:	4690      	movls	r8, r2
 800cbec:	4698      	movhi	r8, r3
 800cbee:	2303      	movs	r3, #3
 800cbf0:	6123      	str	r3, [r4, #16]
 800cbf2:	9b05      	ldr	r3, [sp, #20]
 800cbf4:	f023 0304 	bic.w	r3, r3, #4
 800cbf8:	6023      	str	r3, [r4, #0]
 800cbfa:	f04f 0900 	mov.w	r9, #0
 800cbfe:	9700      	str	r7, [sp, #0]
 800cc00:	4633      	mov	r3, r6
 800cc02:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc04:	4621      	mov	r1, r4
 800cc06:	4628      	mov	r0, r5
 800cc08:	f000 f9da 	bl	800cfc0 <_printf_common>
 800cc0c:	3001      	adds	r0, #1
 800cc0e:	f040 8090 	bne.w	800cd32 <_printf_float+0x1de>
 800cc12:	f04f 30ff 	mov.w	r0, #4294967295
 800cc16:	b00d      	add	sp, #52	; 0x34
 800cc18:	ecbd 8b02 	vpop	{d8}
 800cc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc20:	4642      	mov	r2, r8
 800cc22:	464b      	mov	r3, r9
 800cc24:	4640      	mov	r0, r8
 800cc26:	4649      	mov	r1, r9
 800cc28:	f7f3 ff88 	bl	8000b3c <__aeabi_dcmpun>
 800cc2c:	b140      	cbz	r0, 800cc40 <_printf_float+0xec>
 800cc2e:	464b      	mov	r3, r9
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	bfbc      	itt	lt
 800cc34:	232d      	movlt	r3, #45	; 0x2d
 800cc36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cc3a:	4a7f      	ldr	r2, [pc, #508]	; (800ce38 <_printf_float+0x2e4>)
 800cc3c:	4b7f      	ldr	r3, [pc, #508]	; (800ce3c <_printf_float+0x2e8>)
 800cc3e:	e7d1      	b.n	800cbe4 <_printf_float+0x90>
 800cc40:	6863      	ldr	r3, [r4, #4]
 800cc42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cc46:	9206      	str	r2, [sp, #24]
 800cc48:	1c5a      	adds	r2, r3, #1
 800cc4a:	d13f      	bne.n	800cccc <_printf_float+0x178>
 800cc4c:	2306      	movs	r3, #6
 800cc4e:	6063      	str	r3, [r4, #4]
 800cc50:	9b05      	ldr	r3, [sp, #20]
 800cc52:	6861      	ldr	r1, [r4, #4]
 800cc54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cc58:	2300      	movs	r3, #0
 800cc5a:	9303      	str	r3, [sp, #12]
 800cc5c:	ab0a      	add	r3, sp, #40	; 0x28
 800cc5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cc62:	ab09      	add	r3, sp, #36	; 0x24
 800cc64:	ec49 8b10 	vmov	d0, r8, r9
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	6022      	str	r2, [r4, #0]
 800cc6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cc70:	4628      	mov	r0, r5
 800cc72:	f7ff fecf 	bl	800ca14 <__cvt>
 800cc76:	9b06      	ldr	r3, [sp, #24]
 800cc78:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc7a:	2b47      	cmp	r3, #71	; 0x47
 800cc7c:	4680      	mov	r8, r0
 800cc7e:	d108      	bne.n	800cc92 <_printf_float+0x13e>
 800cc80:	1cc8      	adds	r0, r1, #3
 800cc82:	db02      	blt.n	800cc8a <_printf_float+0x136>
 800cc84:	6863      	ldr	r3, [r4, #4]
 800cc86:	4299      	cmp	r1, r3
 800cc88:	dd41      	ble.n	800cd0e <_printf_float+0x1ba>
 800cc8a:	f1ab 0302 	sub.w	r3, fp, #2
 800cc8e:	fa5f fb83 	uxtb.w	fp, r3
 800cc92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc96:	d820      	bhi.n	800ccda <_printf_float+0x186>
 800cc98:	3901      	subs	r1, #1
 800cc9a:	465a      	mov	r2, fp
 800cc9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cca0:	9109      	str	r1, [sp, #36]	; 0x24
 800cca2:	f7ff ff19 	bl	800cad8 <__exponent>
 800cca6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cca8:	1813      	adds	r3, r2, r0
 800ccaa:	2a01      	cmp	r2, #1
 800ccac:	4681      	mov	r9, r0
 800ccae:	6123      	str	r3, [r4, #16]
 800ccb0:	dc02      	bgt.n	800ccb8 <_printf_float+0x164>
 800ccb2:	6822      	ldr	r2, [r4, #0]
 800ccb4:	07d2      	lsls	r2, r2, #31
 800ccb6:	d501      	bpl.n	800ccbc <_printf_float+0x168>
 800ccb8:	3301      	adds	r3, #1
 800ccba:	6123      	str	r3, [r4, #16]
 800ccbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d09c      	beq.n	800cbfe <_printf_float+0xaa>
 800ccc4:	232d      	movs	r3, #45	; 0x2d
 800ccc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccca:	e798      	b.n	800cbfe <_printf_float+0xaa>
 800cccc:	9a06      	ldr	r2, [sp, #24]
 800ccce:	2a47      	cmp	r2, #71	; 0x47
 800ccd0:	d1be      	bne.n	800cc50 <_printf_float+0xfc>
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d1bc      	bne.n	800cc50 <_printf_float+0xfc>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e7b9      	b.n	800cc4e <_printf_float+0xfa>
 800ccda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ccde:	d118      	bne.n	800cd12 <_printf_float+0x1be>
 800cce0:	2900      	cmp	r1, #0
 800cce2:	6863      	ldr	r3, [r4, #4]
 800cce4:	dd0b      	ble.n	800ccfe <_printf_float+0x1aa>
 800cce6:	6121      	str	r1, [r4, #16]
 800cce8:	b913      	cbnz	r3, 800ccf0 <_printf_float+0x19c>
 800ccea:	6822      	ldr	r2, [r4, #0]
 800ccec:	07d0      	lsls	r0, r2, #31
 800ccee:	d502      	bpl.n	800ccf6 <_printf_float+0x1a2>
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	440b      	add	r3, r1
 800ccf4:	6123      	str	r3, [r4, #16]
 800ccf6:	65a1      	str	r1, [r4, #88]	; 0x58
 800ccf8:	f04f 0900 	mov.w	r9, #0
 800ccfc:	e7de      	b.n	800ccbc <_printf_float+0x168>
 800ccfe:	b913      	cbnz	r3, 800cd06 <_printf_float+0x1b2>
 800cd00:	6822      	ldr	r2, [r4, #0]
 800cd02:	07d2      	lsls	r2, r2, #31
 800cd04:	d501      	bpl.n	800cd0a <_printf_float+0x1b6>
 800cd06:	3302      	adds	r3, #2
 800cd08:	e7f4      	b.n	800ccf4 <_printf_float+0x1a0>
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e7f2      	b.n	800ccf4 <_printf_float+0x1a0>
 800cd0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cd12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd14:	4299      	cmp	r1, r3
 800cd16:	db05      	blt.n	800cd24 <_printf_float+0x1d0>
 800cd18:	6823      	ldr	r3, [r4, #0]
 800cd1a:	6121      	str	r1, [r4, #16]
 800cd1c:	07d8      	lsls	r0, r3, #31
 800cd1e:	d5ea      	bpl.n	800ccf6 <_printf_float+0x1a2>
 800cd20:	1c4b      	adds	r3, r1, #1
 800cd22:	e7e7      	b.n	800ccf4 <_printf_float+0x1a0>
 800cd24:	2900      	cmp	r1, #0
 800cd26:	bfd4      	ite	le
 800cd28:	f1c1 0202 	rsble	r2, r1, #2
 800cd2c:	2201      	movgt	r2, #1
 800cd2e:	4413      	add	r3, r2
 800cd30:	e7e0      	b.n	800ccf4 <_printf_float+0x1a0>
 800cd32:	6823      	ldr	r3, [r4, #0]
 800cd34:	055a      	lsls	r2, r3, #21
 800cd36:	d407      	bmi.n	800cd48 <_printf_float+0x1f4>
 800cd38:	6923      	ldr	r3, [r4, #16]
 800cd3a:	4642      	mov	r2, r8
 800cd3c:	4631      	mov	r1, r6
 800cd3e:	4628      	mov	r0, r5
 800cd40:	47b8      	blx	r7
 800cd42:	3001      	adds	r0, #1
 800cd44:	d12c      	bne.n	800cda0 <_printf_float+0x24c>
 800cd46:	e764      	b.n	800cc12 <_printf_float+0xbe>
 800cd48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd4c:	f240 80e0 	bls.w	800cf10 <_printf_float+0x3bc>
 800cd50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd54:	2200      	movs	r2, #0
 800cd56:	2300      	movs	r3, #0
 800cd58:	f7f3 febe 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	d034      	beq.n	800cdca <_printf_float+0x276>
 800cd60:	4a37      	ldr	r2, [pc, #220]	; (800ce40 <_printf_float+0x2ec>)
 800cd62:	2301      	movs	r3, #1
 800cd64:	4631      	mov	r1, r6
 800cd66:	4628      	mov	r0, r5
 800cd68:	47b8      	blx	r7
 800cd6a:	3001      	adds	r0, #1
 800cd6c:	f43f af51 	beq.w	800cc12 <_printf_float+0xbe>
 800cd70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd74:	429a      	cmp	r2, r3
 800cd76:	db02      	blt.n	800cd7e <_printf_float+0x22a>
 800cd78:	6823      	ldr	r3, [r4, #0]
 800cd7a:	07d8      	lsls	r0, r3, #31
 800cd7c:	d510      	bpl.n	800cda0 <_printf_float+0x24c>
 800cd7e:	ee18 3a10 	vmov	r3, s16
 800cd82:	4652      	mov	r2, sl
 800cd84:	4631      	mov	r1, r6
 800cd86:	4628      	mov	r0, r5
 800cd88:	47b8      	blx	r7
 800cd8a:	3001      	adds	r0, #1
 800cd8c:	f43f af41 	beq.w	800cc12 <_printf_float+0xbe>
 800cd90:	f04f 0800 	mov.w	r8, #0
 800cd94:	f104 091a 	add.w	r9, r4, #26
 800cd98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	4543      	cmp	r3, r8
 800cd9e:	dc09      	bgt.n	800cdb4 <_printf_float+0x260>
 800cda0:	6823      	ldr	r3, [r4, #0]
 800cda2:	079b      	lsls	r3, r3, #30
 800cda4:	f100 8107 	bmi.w	800cfb6 <_printf_float+0x462>
 800cda8:	68e0      	ldr	r0, [r4, #12]
 800cdaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdac:	4298      	cmp	r0, r3
 800cdae:	bfb8      	it	lt
 800cdb0:	4618      	movlt	r0, r3
 800cdb2:	e730      	b.n	800cc16 <_printf_float+0xc2>
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	464a      	mov	r2, r9
 800cdb8:	4631      	mov	r1, r6
 800cdba:	4628      	mov	r0, r5
 800cdbc:	47b8      	blx	r7
 800cdbe:	3001      	adds	r0, #1
 800cdc0:	f43f af27 	beq.w	800cc12 <_printf_float+0xbe>
 800cdc4:	f108 0801 	add.w	r8, r8, #1
 800cdc8:	e7e6      	b.n	800cd98 <_printf_float+0x244>
 800cdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	dc39      	bgt.n	800ce44 <_printf_float+0x2f0>
 800cdd0:	4a1b      	ldr	r2, [pc, #108]	; (800ce40 <_printf_float+0x2ec>)
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	4631      	mov	r1, r6
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	47b8      	blx	r7
 800cdda:	3001      	adds	r0, #1
 800cddc:	f43f af19 	beq.w	800cc12 <_printf_float+0xbe>
 800cde0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cde4:	4313      	orrs	r3, r2
 800cde6:	d102      	bne.n	800cdee <_printf_float+0x29a>
 800cde8:	6823      	ldr	r3, [r4, #0]
 800cdea:	07d9      	lsls	r1, r3, #31
 800cdec:	d5d8      	bpl.n	800cda0 <_printf_float+0x24c>
 800cdee:	ee18 3a10 	vmov	r3, s16
 800cdf2:	4652      	mov	r2, sl
 800cdf4:	4631      	mov	r1, r6
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	47b8      	blx	r7
 800cdfa:	3001      	adds	r0, #1
 800cdfc:	f43f af09 	beq.w	800cc12 <_printf_float+0xbe>
 800ce00:	f04f 0900 	mov.w	r9, #0
 800ce04:	f104 0a1a 	add.w	sl, r4, #26
 800ce08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce0a:	425b      	negs	r3, r3
 800ce0c:	454b      	cmp	r3, r9
 800ce0e:	dc01      	bgt.n	800ce14 <_printf_float+0x2c0>
 800ce10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce12:	e792      	b.n	800cd3a <_printf_float+0x1e6>
 800ce14:	2301      	movs	r3, #1
 800ce16:	4652      	mov	r2, sl
 800ce18:	4631      	mov	r1, r6
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	47b8      	blx	r7
 800ce1e:	3001      	adds	r0, #1
 800ce20:	f43f aef7 	beq.w	800cc12 <_printf_float+0xbe>
 800ce24:	f109 0901 	add.w	r9, r9, #1
 800ce28:	e7ee      	b.n	800ce08 <_printf_float+0x2b4>
 800ce2a:	bf00      	nop
 800ce2c:	7fefffff 	.word	0x7fefffff
 800ce30:	0800f7d8 	.word	0x0800f7d8
 800ce34:	0800f7dc 	.word	0x0800f7dc
 800ce38:	0800f7e0 	.word	0x0800f7e0
 800ce3c:	0800f7e4 	.word	0x0800f7e4
 800ce40:	0800f7e8 	.word	0x0800f7e8
 800ce44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	bfa8      	it	ge
 800ce4c:	461a      	movge	r2, r3
 800ce4e:	2a00      	cmp	r2, #0
 800ce50:	4691      	mov	r9, r2
 800ce52:	dc37      	bgt.n	800cec4 <_printf_float+0x370>
 800ce54:	f04f 0b00 	mov.w	fp, #0
 800ce58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce5c:	f104 021a 	add.w	r2, r4, #26
 800ce60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce62:	9305      	str	r3, [sp, #20]
 800ce64:	eba3 0309 	sub.w	r3, r3, r9
 800ce68:	455b      	cmp	r3, fp
 800ce6a:	dc33      	bgt.n	800ced4 <_printf_float+0x380>
 800ce6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce70:	429a      	cmp	r2, r3
 800ce72:	db3b      	blt.n	800ceec <_printf_float+0x398>
 800ce74:	6823      	ldr	r3, [r4, #0]
 800ce76:	07da      	lsls	r2, r3, #31
 800ce78:	d438      	bmi.n	800ceec <_printf_float+0x398>
 800ce7a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ce7e:	eba2 0903 	sub.w	r9, r2, r3
 800ce82:	9b05      	ldr	r3, [sp, #20]
 800ce84:	1ad2      	subs	r2, r2, r3
 800ce86:	4591      	cmp	r9, r2
 800ce88:	bfa8      	it	ge
 800ce8a:	4691      	movge	r9, r2
 800ce8c:	f1b9 0f00 	cmp.w	r9, #0
 800ce90:	dc35      	bgt.n	800cefe <_printf_float+0x3aa>
 800ce92:	f04f 0800 	mov.w	r8, #0
 800ce96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce9a:	f104 0a1a 	add.w	sl, r4, #26
 800ce9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cea2:	1a9b      	subs	r3, r3, r2
 800cea4:	eba3 0309 	sub.w	r3, r3, r9
 800cea8:	4543      	cmp	r3, r8
 800ceaa:	f77f af79 	ble.w	800cda0 <_printf_float+0x24c>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	4652      	mov	r2, sl
 800ceb2:	4631      	mov	r1, r6
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	47b8      	blx	r7
 800ceb8:	3001      	adds	r0, #1
 800ceba:	f43f aeaa 	beq.w	800cc12 <_printf_float+0xbe>
 800cebe:	f108 0801 	add.w	r8, r8, #1
 800cec2:	e7ec      	b.n	800ce9e <_printf_float+0x34a>
 800cec4:	4613      	mov	r3, r2
 800cec6:	4631      	mov	r1, r6
 800cec8:	4642      	mov	r2, r8
 800ceca:	4628      	mov	r0, r5
 800cecc:	47b8      	blx	r7
 800cece:	3001      	adds	r0, #1
 800ced0:	d1c0      	bne.n	800ce54 <_printf_float+0x300>
 800ced2:	e69e      	b.n	800cc12 <_printf_float+0xbe>
 800ced4:	2301      	movs	r3, #1
 800ced6:	4631      	mov	r1, r6
 800ced8:	4628      	mov	r0, r5
 800ceda:	9205      	str	r2, [sp, #20]
 800cedc:	47b8      	blx	r7
 800cede:	3001      	adds	r0, #1
 800cee0:	f43f ae97 	beq.w	800cc12 <_printf_float+0xbe>
 800cee4:	9a05      	ldr	r2, [sp, #20]
 800cee6:	f10b 0b01 	add.w	fp, fp, #1
 800ceea:	e7b9      	b.n	800ce60 <_printf_float+0x30c>
 800ceec:	ee18 3a10 	vmov	r3, s16
 800cef0:	4652      	mov	r2, sl
 800cef2:	4631      	mov	r1, r6
 800cef4:	4628      	mov	r0, r5
 800cef6:	47b8      	blx	r7
 800cef8:	3001      	adds	r0, #1
 800cefa:	d1be      	bne.n	800ce7a <_printf_float+0x326>
 800cefc:	e689      	b.n	800cc12 <_printf_float+0xbe>
 800cefe:	9a05      	ldr	r2, [sp, #20]
 800cf00:	464b      	mov	r3, r9
 800cf02:	4442      	add	r2, r8
 800cf04:	4631      	mov	r1, r6
 800cf06:	4628      	mov	r0, r5
 800cf08:	47b8      	blx	r7
 800cf0a:	3001      	adds	r0, #1
 800cf0c:	d1c1      	bne.n	800ce92 <_printf_float+0x33e>
 800cf0e:	e680      	b.n	800cc12 <_printf_float+0xbe>
 800cf10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf12:	2a01      	cmp	r2, #1
 800cf14:	dc01      	bgt.n	800cf1a <_printf_float+0x3c6>
 800cf16:	07db      	lsls	r3, r3, #31
 800cf18:	d53a      	bpl.n	800cf90 <_printf_float+0x43c>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	4642      	mov	r2, r8
 800cf1e:	4631      	mov	r1, r6
 800cf20:	4628      	mov	r0, r5
 800cf22:	47b8      	blx	r7
 800cf24:	3001      	adds	r0, #1
 800cf26:	f43f ae74 	beq.w	800cc12 <_printf_float+0xbe>
 800cf2a:	ee18 3a10 	vmov	r3, s16
 800cf2e:	4652      	mov	r2, sl
 800cf30:	4631      	mov	r1, r6
 800cf32:	4628      	mov	r0, r5
 800cf34:	47b8      	blx	r7
 800cf36:	3001      	adds	r0, #1
 800cf38:	f43f ae6b 	beq.w	800cc12 <_printf_float+0xbe>
 800cf3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf40:	2200      	movs	r2, #0
 800cf42:	2300      	movs	r3, #0
 800cf44:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cf48:	f7f3 fdc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf4c:	b9d8      	cbnz	r0, 800cf86 <_printf_float+0x432>
 800cf4e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cf52:	f108 0201 	add.w	r2, r8, #1
 800cf56:	4631      	mov	r1, r6
 800cf58:	4628      	mov	r0, r5
 800cf5a:	47b8      	blx	r7
 800cf5c:	3001      	adds	r0, #1
 800cf5e:	d10e      	bne.n	800cf7e <_printf_float+0x42a>
 800cf60:	e657      	b.n	800cc12 <_printf_float+0xbe>
 800cf62:	2301      	movs	r3, #1
 800cf64:	4652      	mov	r2, sl
 800cf66:	4631      	mov	r1, r6
 800cf68:	4628      	mov	r0, r5
 800cf6a:	47b8      	blx	r7
 800cf6c:	3001      	adds	r0, #1
 800cf6e:	f43f ae50 	beq.w	800cc12 <_printf_float+0xbe>
 800cf72:	f108 0801 	add.w	r8, r8, #1
 800cf76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	4543      	cmp	r3, r8
 800cf7c:	dcf1      	bgt.n	800cf62 <_printf_float+0x40e>
 800cf7e:	464b      	mov	r3, r9
 800cf80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cf84:	e6da      	b.n	800cd3c <_printf_float+0x1e8>
 800cf86:	f04f 0800 	mov.w	r8, #0
 800cf8a:	f104 0a1a 	add.w	sl, r4, #26
 800cf8e:	e7f2      	b.n	800cf76 <_printf_float+0x422>
 800cf90:	2301      	movs	r3, #1
 800cf92:	4642      	mov	r2, r8
 800cf94:	e7df      	b.n	800cf56 <_printf_float+0x402>
 800cf96:	2301      	movs	r3, #1
 800cf98:	464a      	mov	r2, r9
 800cf9a:	4631      	mov	r1, r6
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	47b8      	blx	r7
 800cfa0:	3001      	adds	r0, #1
 800cfa2:	f43f ae36 	beq.w	800cc12 <_printf_float+0xbe>
 800cfa6:	f108 0801 	add.w	r8, r8, #1
 800cfaa:	68e3      	ldr	r3, [r4, #12]
 800cfac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfae:	1a5b      	subs	r3, r3, r1
 800cfb0:	4543      	cmp	r3, r8
 800cfb2:	dcf0      	bgt.n	800cf96 <_printf_float+0x442>
 800cfb4:	e6f8      	b.n	800cda8 <_printf_float+0x254>
 800cfb6:	f04f 0800 	mov.w	r8, #0
 800cfba:	f104 0919 	add.w	r9, r4, #25
 800cfbe:	e7f4      	b.n	800cfaa <_printf_float+0x456>

0800cfc0 <_printf_common>:
 800cfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc4:	4616      	mov	r6, r2
 800cfc6:	4699      	mov	r9, r3
 800cfc8:	688a      	ldr	r2, [r1, #8]
 800cfca:	690b      	ldr	r3, [r1, #16]
 800cfcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	bfb8      	it	lt
 800cfd4:	4613      	movlt	r3, r2
 800cfd6:	6033      	str	r3, [r6, #0]
 800cfd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cfdc:	4607      	mov	r7, r0
 800cfde:	460c      	mov	r4, r1
 800cfe0:	b10a      	cbz	r2, 800cfe6 <_printf_common+0x26>
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	6033      	str	r3, [r6, #0]
 800cfe6:	6823      	ldr	r3, [r4, #0]
 800cfe8:	0699      	lsls	r1, r3, #26
 800cfea:	bf42      	ittt	mi
 800cfec:	6833      	ldrmi	r3, [r6, #0]
 800cfee:	3302      	addmi	r3, #2
 800cff0:	6033      	strmi	r3, [r6, #0]
 800cff2:	6825      	ldr	r5, [r4, #0]
 800cff4:	f015 0506 	ands.w	r5, r5, #6
 800cff8:	d106      	bne.n	800d008 <_printf_common+0x48>
 800cffa:	f104 0a19 	add.w	sl, r4, #25
 800cffe:	68e3      	ldr	r3, [r4, #12]
 800d000:	6832      	ldr	r2, [r6, #0]
 800d002:	1a9b      	subs	r3, r3, r2
 800d004:	42ab      	cmp	r3, r5
 800d006:	dc26      	bgt.n	800d056 <_printf_common+0x96>
 800d008:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d00c:	1e13      	subs	r3, r2, #0
 800d00e:	6822      	ldr	r2, [r4, #0]
 800d010:	bf18      	it	ne
 800d012:	2301      	movne	r3, #1
 800d014:	0692      	lsls	r2, r2, #26
 800d016:	d42b      	bmi.n	800d070 <_printf_common+0xb0>
 800d018:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d01c:	4649      	mov	r1, r9
 800d01e:	4638      	mov	r0, r7
 800d020:	47c0      	blx	r8
 800d022:	3001      	adds	r0, #1
 800d024:	d01e      	beq.n	800d064 <_printf_common+0xa4>
 800d026:	6823      	ldr	r3, [r4, #0]
 800d028:	6922      	ldr	r2, [r4, #16]
 800d02a:	f003 0306 	and.w	r3, r3, #6
 800d02e:	2b04      	cmp	r3, #4
 800d030:	bf02      	ittt	eq
 800d032:	68e5      	ldreq	r5, [r4, #12]
 800d034:	6833      	ldreq	r3, [r6, #0]
 800d036:	1aed      	subeq	r5, r5, r3
 800d038:	68a3      	ldr	r3, [r4, #8]
 800d03a:	bf0c      	ite	eq
 800d03c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d040:	2500      	movne	r5, #0
 800d042:	4293      	cmp	r3, r2
 800d044:	bfc4      	itt	gt
 800d046:	1a9b      	subgt	r3, r3, r2
 800d048:	18ed      	addgt	r5, r5, r3
 800d04a:	2600      	movs	r6, #0
 800d04c:	341a      	adds	r4, #26
 800d04e:	42b5      	cmp	r5, r6
 800d050:	d11a      	bne.n	800d088 <_printf_common+0xc8>
 800d052:	2000      	movs	r0, #0
 800d054:	e008      	b.n	800d068 <_printf_common+0xa8>
 800d056:	2301      	movs	r3, #1
 800d058:	4652      	mov	r2, sl
 800d05a:	4649      	mov	r1, r9
 800d05c:	4638      	mov	r0, r7
 800d05e:	47c0      	blx	r8
 800d060:	3001      	adds	r0, #1
 800d062:	d103      	bne.n	800d06c <_printf_common+0xac>
 800d064:	f04f 30ff 	mov.w	r0, #4294967295
 800d068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d06c:	3501      	adds	r5, #1
 800d06e:	e7c6      	b.n	800cffe <_printf_common+0x3e>
 800d070:	18e1      	adds	r1, r4, r3
 800d072:	1c5a      	adds	r2, r3, #1
 800d074:	2030      	movs	r0, #48	; 0x30
 800d076:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d07a:	4422      	add	r2, r4
 800d07c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d080:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d084:	3302      	adds	r3, #2
 800d086:	e7c7      	b.n	800d018 <_printf_common+0x58>
 800d088:	2301      	movs	r3, #1
 800d08a:	4622      	mov	r2, r4
 800d08c:	4649      	mov	r1, r9
 800d08e:	4638      	mov	r0, r7
 800d090:	47c0      	blx	r8
 800d092:	3001      	adds	r0, #1
 800d094:	d0e6      	beq.n	800d064 <_printf_common+0xa4>
 800d096:	3601      	adds	r6, #1
 800d098:	e7d9      	b.n	800d04e <_printf_common+0x8e>
	...

0800d09c <_printf_i>:
 800d09c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a0:	7e0f      	ldrb	r7, [r1, #24]
 800d0a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0a4:	2f78      	cmp	r7, #120	; 0x78
 800d0a6:	4691      	mov	r9, r2
 800d0a8:	4680      	mov	r8, r0
 800d0aa:	460c      	mov	r4, r1
 800d0ac:	469a      	mov	sl, r3
 800d0ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d0b2:	d807      	bhi.n	800d0c4 <_printf_i+0x28>
 800d0b4:	2f62      	cmp	r7, #98	; 0x62
 800d0b6:	d80a      	bhi.n	800d0ce <_printf_i+0x32>
 800d0b8:	2f00      	cmp	r7, #0
 800d0ba:	f000 80d4 	beq.w	800d266 <_printf_i+0x1ca>
 800d0be:	2f58      	cmp	r7, #88	; 0x58
 800d0c0:	f000 80c0 	beq.w	800d244 <_printf_i+0x1a8>
 800d0c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0cc:	e03a      	b.n	800d144 <_printf_i+0xa8>
 800d0ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d0d2:	2b15      	cmp	r3, #21
 800d0d4:	d8f6      	bhi.n	800d0c4 <_printf_i+0x28>
 800d0d6:	a101      	add	r1, pc, #4	; (adr r1, 800d0dc <_printf_i+0x40>)
 800d0d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0dc:	0800d135 	.word	0x0800d135
 800d0e0:	0800d149 	.word	0x0800d149
 800d0e4:	0800d0c5 	.word	0x0800d0c5
 800d0e8:	0800d0c5 	.word	0x0800d0c5
 800d0ec:	0800d0c5 	.word	0x0800d0c5
 800d0f0:	0800d0c5 	.word	0x0800d0c5
 800d0f4:	0800d149 	.word	0x0800d149
 800d0f8:	0800d0c5 	.word	0x0800d0c5
 800d0fc:	0800d0c5 	.word	0x0800d0c5
 800d100:	0800d0c5 	.word	0x0800d0c5
 800d104:	0800d0c5 	.word	0x0800d0c5
 800d108:	0800d24d 	.word	0x0800d24d
 800d10c:	0800d175 	.word	0x0800d175
 800d110:	0800d207 	.word	0x0800d207
 800d114:	0800d0c5 	.word	0x0800d0c5
 800d118:	0800d0c5 	.word	0x0800d0c5
 800d11c:	0800d26f 	.word	0x0800d26f
 800d120:	0800d0c5 	.word	0x0800d0c5
 800d124:	0800d175 	.word	0x0800d175
 800d128:	0800d0c5 	.word	0x0800d0c5
 800d12c:	0800d0c5 	.word	0x0800d0c5
 800d130:	0800d20f 	.word	0x0800d20f
 800d134:	682b      	ldr	r3, [r5, #0]
 800d136:	1d1a      	adds	r2, r3, #4
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	602a      	str	r2, [r5, #0]
 800d13c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d144:	2301      	movs	r3, #1
 800d146:	e09f      	b.n	800d288 <_printf_i+0x1ec>
 800d148:	6820      	ldr	r0, [r4, #0]
 800d14a:	682b      	ldr	r3, [r5, #0]
 800d14c:	0607      	lsls	r7, r0, #24
 800d14e:	f103 0104 	add.w	r1, r3, #4
 800d152:	6029      	str	r1, [r5, #0]
 800d154:	d501      	bpl.n	800d15a <_printf_i+0xbe>
 800d156:	681e      	ldr	r6, [r3, #0]
 800d158:	e003      	b.n	800d162 <_printf_i+0xc6>
 800d15a:	0646      	lsls	r6, r0, #25
 800d15c:	d5fb      	bpl.n	800d156 <_printf_i+0xba>
 800d15e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d162:	2e00      	cmp	r6, #0
 800d164:	da03      	bge.n	800d16e <_printf_i+0xd2>
 800d166:	232d      	movs	r3, #45	; 0x2d
 800d168:	4276      	negs	r6, r6
 800d16a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d16e:	485a      	ldr	r0, [pc, #360]	; (800d2d8 <_printf_i+0x23c>)
 800d170:	230a      	movs	r3, #10
 800d172:	e012      	b.n	800d19a <_printf_i+0xfe>
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	6820      	ldr	r0, [r4, #0]
 800d178:	1d19      	adds	r1, r3, #4
 800d17a:	6029      	str	r1, [r5, #0]
 800d17c:	0605      	lsls	r5, r0, #24
 800d17e:	d501      	bpl.n	800d184 <_printf_i+0xe8>
 800d180:	681e      	ldr	r6, [r3, #0]
 800d182:	e002      	b.n	800d18a <_printf_i+0xee>
 800d184:	0641      	lsls	r1, r0, #25
 800d186:	d5fb      	bpl.n	800d180 <_printf_i+0xe4>
 800d188:	881e      	ldrh	r6, [r3, #0]
 800d18a:	4853      	ldr	r0, [pc, #332]	; (800d2d8 <_printf_i+0x23c>)
 800d18c:	2f6f      	cmp	r7, #111	; 0x6f
 800d18e:	bf0c      	ite	eq
 800d190:	2308      	moveq	r3, #8
 800d192:	230a      	movne	r3, #10
 800d194:	2100      	movs	r1, #0
 800d196:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d19a:	6865      	ldr	r5, [r4, #4]
 800d19c:	60a5      	str	r5, [r4, #8]
 800d19e:	2d00      	cmp	r5, #0
 800d1a0:	bfa2      	ittt	ge
 800d1a2:	6821      	ldrge	r1, [r4, #0]
 800d1a4:	f021 0104 	bicge.w	r1, r1, #4
 800d1a8:	6021      	strge	r1, [r4, #0]
 800d1aa:	b90e      	cbnz	r6, 800d1b0 <_printf_i+0x114>
 800d1ac:	2d00      	cmp	r5, #0
 800d1ae:	d04b      	beq.n	800d248 <_printf_i+0x1ac>
 800d1b0:	4615      	mov	r5, r2
 800d1b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d1b6:	fb03 6711 	mls	r7, r3, r1, r6
 800d1ba:	5dc7      	ldrb	r7, [r0, r7]
 800d1bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d1c0:	4637      	mov	r7, r6
 800d1c2:	42bb      	cmp	r3, r7
 800d1c4:	460e      	mov	r6, r1
 800d1c6:	d9f4      	bls.n	800d1b2 <_printf_i+0x116>
 800d1c8:	2b08      	cmp	r3, #8
 800d1ca:	d10b      	bne.n	800d1e4 <_printf_i+0x148>
 800d1cc:	6823      	ldr	r3, [r4, #0]
 800d1ce:	07de      	lsls	r6, r3, #31
 800d1d0:	d508      	bpl.n	800d1e4 <_printf_i+0x148>
 800d1d2:	6923      	ldr	r3, [r4, #16]
 800d1d4:	6861      	ldr	r1, [r4, #4]
 800d1d6:	4299      	cmp	r1, r3
 800d1d8:	bfde      	ittt	le
 800d1da:	2330      	movle	r3, #48	; 0x30
 800d1dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d1e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d1e4:	1b52      	subs	r2, r2, r5
 800d1e6:	6122      	str	r2, [r4, #16]
 800d1e8:	f8cd a000 	str.w	sl, [sp]
 800d1ec:	464b      	mov	r3, r9
 800d1ee:	aa03      	add	r2, sp, #12
 800d1f0:	4621      	mov	r1, r4
 800d1f2:	4640      	mov	r0, r8
 800d1f4:	f7ff fee4 	bl	800cfc0 <_printf_common>
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	d14a      	bne.n	800d292 <_printf_i+0x1f6>
 800d1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d200:	b004      	add	sp, #16
 800d202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	f043 0320 	orr.w	r3, r3, #32
 800d20c:	6023      	str	r3, [r4, #0]
 800d20e:	4833      	ldr	r0, [pc, #204]	; (800d2dc <_printf_i+0x240>)
 800d210:	2778      	movs	r7, #120	; 0x78
 800d212:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d216:	6823      	ldr	r3, [r4, #0]
 800d218:	6829      	ldr	r1, [r5, #0]
 800d21a:	061f      	lsls	r7, r3, #24
 800d21c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d220:	d402      	bmi.n	800d228 <_printf_i+0x18c>
 800d222:	065f      	lsls	r7, r3, #25
 800d224:	bf48      	it	mi
 800d226:	b2b6      	uxthmi	r6, r6
 800d228:	07df      	lsls	r7, r3, #31
 800d22a:	bf48      	it	mi
 800d22c:	f043 0320 	orrmi.w	r3, r3, #32
 800d230:	6029      	str	r1, [r5, #0]
 800d232:	bf48      	it	mi
 800d234:	6023      	strmi	r3, [r4, #0]
 800d236:	b91e      	cbnz	r6, 800d240 <_printf_i+0x1a4>
 800d238:	6823      	ldr	r3, [r4, #0]
 800d23a:	f023 0320 	bic.w	r3, r3, #32
 800d23e:	6023      	str	r3, [r4, #0]
 800d240:	2310      	movs	r3, #16
 800d242:	e7a7      	b.n	800d194 <_printf_i+0xf8>
 800d244:	4824      	ldr	r0, [pc, #144]	; (800d2d8 <_printf_i+0x23c>)
 800d246:	e7e4      	b.n	800d212 <_printf_i+0x176>
 800d248:	4615      	mov	r5, r2
 800d24a:	e7bd      	b.n	800d1c8 <_printf_i+0x12c>
 800d24c:	682b      	ldr	r3, [r5, #0]
 800d24e:	6826      	ldr	r6, [r4, #0]
 800d250:	6961      	ldr	r1, [r4, #20]
 800d252:	1d18      	adds	r0, r3, #4
 800d254:	6028      	str	r0, [r5, #0]
 800d256:	0635      	lsls	r5, r6, #24
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	d501      	bpl.n	800d260 <_printf_i+0x1c4>
 800d25c:	6019      	str	r1, [r3, #0]
 800d25e:	e002      	b.n	800d266 <_printf_i+0x1ca>
 800d260:	0670      	lsls	r0, r6, #25
 800d262:	d5fb      	bpl.n	800d25c <_printf_i+0x1c0>
 800d264:	8019      	strh	r1, [r3, #0]
 800d266:	2300      	movs	r3, #0
 800d268:	6123      	str	r3, [r4, #16]
 800d26a:	4615      	mov	r5, r2
 800d26c:	e7bc      	b.n	800d1e8 <_printf_i+0x14c>
 800d26e:	682b      	ldr	r3, [r5, #0]
 800d270:	1d1a      	adds	r2, r3, #4
 800d272:	602a      	str	r2, [r5, #0]
 800d274:	681d      	ldr	r5, [r3, #0]
 800d276:	6862      	ldr	r2, [r4, #4]
 800d278:	2100      	movs	r1, #0
 800d27a:	4628      	mov	r0, r5
 800d27c:	f7f2 ffb0 	bl	80001e0 <memchr>
 800d280:	b108      	cbz	r0, 800d286 <_printf_i+0x1ea>
 800d282:	1b40      	subs	r0, r0, r5
 800d284:	6060      	str	r0, [r4, #4]
 800d286:	6863      	ldr	r3, [r4, #4]
 800d288:	6123      	str	r3, [r4, #16]
 800d28a:	2300      	movs	r3, #0
 800d28c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d290:	e7aa      	b.n	800d1e8 <_printf_i+0x14c>
 800d292:	6923      	ldr	r3, [r4, #16]
 800d294:	462a      	mov	r2, r5
 800d296:	4649      	mov	r1, r9
 800d298:	4640      	mov	r0, r8
 800d29a:	47d0      	blx	sl
 800d29c:	3001      	adds	r0, #1
 800d29e:	d0ad      	beq.n	800d1fc <_printf_i+0x160>
 800d2a0:	6823      	ldr	r3, [r4, #0]
 800d2a2:	079b      	lsls	r3, r3, #30
 800d2a4:	d413      	bmi.n	800d2ce <_printf_i+0x232>
 800d2a6:	68e0      	ldr	r0, [r4, #12]
 800d2a8:	9b03      	ldr	r3, [sp, #12]
 800d2aa:	4298      	cmp	r0, r3
 800d2ac:	bfb8      	it	lt
 800d2ae:	4618      	movlt	r0, r3
 800d2b0:	e7a6      	b.n	800d200 <_printf_i+0x164>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	4632      	mov	r2, r6
 800d2b6:	4649      	mov	r1, r9
 800d2b8:	4640      	mov	r0, r8
 800d2ba:	47d0      	blx	sl
 800d2bc:	3001      	adds	r0, #1
 800d2be:	d09d      	beq.n	800d1fc <_printf_i+0x160>
 800d2c0:	3501      	adds	r5, #1
 800d2c2:	68e3      	ldr	r3, [r4, #12]
 800d2c4:	9903      	ldr	r1, [sp, #12]
 800d2c6:	1a5b      	subs	r3, r3, r1
 800d2c8:	42ab      	cmp	r3, r5
 800d2ca:	dcf2      	bgt.n	800d2b2 <_printf_i+0x216>
 800d2cc:	e7eb      	b.n	800d2a6 <_printf_i+0x20a>
 800d2ce:	2500      	movs	r5, #0
 800d2d0:	f104 0619 	add.w	r6, r4, #25
 800d2d4:	e7f5      	b.n	800d2c2 <_printf_i+0x226>
 800d2d6:	bf00      	nop
 800d2d8:	0800f7ea 	.word	0x0800f7ea
 800d2dc:	0800f7fb 	.word	0x0800f7fb

0800d2e0 <std>:
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	b510      	push	{r4, lr}
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	e9c0 3300 	strd	r3, r3, [r0]
 800d2ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2ee:	6083      	str	r3, [r0, #8]
 800d2f0:	8181      	strh	r1, [r0, #12]
 800d2f2:	6643      	str	r3, [r0, #100]	; 0x64
 800d2f4:	81c2      	strh	r2, [r0, #14]
 800d2f6:	6183      	str	r3, [r0, #24]
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	2208      	movs	r2, #8
 800d2fc:	305c      	adds	r0, #92	; 0x5c
 800d2fe:	f000 f928 	bl	800d552 <memset>
 800d302:	4b0d      	ldr	r3, [pc, #52]	; (800d338 <std+0x58>)
 800d304:	6263      	str	r3, [r4, #36]	; 0x24
 800d306:	4b0d      	ldr	r3, [pc, #52]	; (800d33c <std+0x5c>)
 800d308:	62a3      	str	r3, [r4, #40]	; 0x28
 800d30a:	4b0d      	ldr	r3, [pc, #52]	; (800d340 <std+0x60>)
 800d30c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d30e:	4b0d      	ldr	r3, [pc, #52]	; (800d344 <std+0x64>)
 800d310:	6323      	str	r3, [r4, #48]	; 0x30
 800d312:	4b0d      	ldr	r3, [pc, #52]	; (800d348 <std+0x68>)
 800d314:	6224      	str	r4, [r4, #32]
 800d316:	429c      	cmp	r4, r3
 800d318:	d006      	beq.n	800d328 <std+0x48>
 800d31a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d31e:	4294      	cmp	r4, r2
 800d320:	d002      	beq.n	800d328 <std+0x48>
 800d322:	33d0      	adds	r3, #208	; 0xd0
 800d324:	429c      	cmp	r4, r3
 800d326:	d105      	bne.n	800d334 <std+0x54>
 800d328:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d330:	f000 b98c 	b.w	800d64c <__retarget_lock_init_recursive>
 800d334:	bd10      	pop	{r4, pc}
 800d336:	bf00      	nop
 800d338:	0800d4cd 	.word	0x0800d4cd
 800d33c:	0800d4ef 	.word	0x0800d4ef
 800d340:	0800d527 	.word	0x0800d527
 800d344:	0800d54b 	.word	0x0800d54b
 800d348:	200021d4 	.word	0x200021d4

0800d34c <stdio_exit_handler>:
 800d34c:	4a02      	ldr	r2, [pc, #8]	; (800d358 <stdio_exit_handler+0xc>)
 800d34e:	4903      	ldr	r1, [pc, #12]	; (800d35c <stdio_exit_handler+0x10>)
 800d350:	4803      	ldr	r0, [pc, #12]	; (800d360 <stdio_exit_handler+0x14>)
 800d352:	f000 b869 	b.w	800d428 <_fwalk_sglue>
 800d356:	bf00      	nop
 800d358:	20000124 	.word	0x20000124
 800d35c:	0800f001 	.word	0x0800f001
 800d360:	20000130 	.word	0x20000130

0800d364 <cleanup_stdio>:
 800d364:	6841      	ldr	r1, [r0, #4]
 800d366:	4b0c      	ldr	r3, [pc, #48]	; (800d398 <cleanup_stdio+0x34>)
 800d368:	4299      	cmp	r1, r3
 800d36a:	b510      	push	{r4, lr}
 800d36c:	4604      	mov	r4, r0
 800d36e:	d001      	beq.n	800d374 <cleanup_stdio+0x10>
 800d370:	f001 fe46 	bl	800f000 <_fflush_r>
 800d374:	68a1      	ldr	r1, [r4, #8]
 800d376:	4b09      	ldr	r3, [pc, #36]	; (800d39c <cleanup_stdio+0x38>)
 800d378:	4299      	cmp	r1, r3
 800d37a:	d002      	beq.n	800d382 <cleanup_stdio+0x1e>
 800d37c:	4620      	mov	r0, r4
 800d37e:	f001 fe3f 	bl	800f000 <_fflush_r>
 800d382:	68e1      	ldr	r1, [r4, #12]
 800d384:	4b06      	ldr	r3, [pc, #24]	; (800d3a0 <cleanup_stdio+0x3c>)
 800d386:	4299      	cmp	r1, r3
 800d388:	d004      	beq.n	800d394 <cleanup_stdio+0x30>
 800d38a:	4620      	mov	r0, r4
 800d38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d390:	f001 be36 	b.w	800f000 <_fflush_r>
 800d394:	bd10      	pop	{r4, pc}
 800d396:	bf00      	nop
 800d398:	200021d4 	.word	0x200021d4
 800d39c:	2000223c 	.word	0x2000223c
 800d3a0:	200022a4 	.word	0x200022a4

0800d3a4 <global_stdio_init.part.0>:
 800d3a4:	b510      	push	{r4, lr}
 800d3a6:	4b0b      	ldr	r3, [pc, #44]	; (800d3d4 <global_stdio_init.part.0+0x30>)
 800d3a8:	4c0b      	ldr	r4, [pc, #44]	; (800d3d8 <global_stdio_init.part.0+0x34>)
 800d3aa:	4a0c      	ldr	r2, [pc, #48]	; (800d3dc <global_stdio_init.part.0+0x38>)
 800d3ac:	601a      	str	r2, [r3, #0]
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	2104      	movs	r1, #4
 800d3b4:	f7ff ff94 	bl	800d2e0 <std>
 800d3b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d3bc:	2201      	movs	r2, #1
 800d3be:	2109      	movs	r1, #9
 800d3c0:	f7ff ff8e 	bl	800d2e0 <std>
 800d3c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d3c8:	2202      	movs	r2, #2
 800d3ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3ce:	2112      	movs	r1, #18
 800d3d0:	f7ff bf86 	b.w	800d2e0 <std>
 800d3d4:	2000230c 	.word	0x2000230c
 800d3d8:	200021d4 	.word	0x200021d4
 800d3dc:	0800d34d 	.word	0x0800d34d

0800d3e0 <__sfp_lock_acquire>:
 800d3e0:	4801      	ldr	r0, [pc, #4]	; (800d3e8 <__sfp_lock_acquire+0x8>)
 800d3e2:	f000 b934 	b.w	800d64e <__retarget_lock_acquire_recursive>
 800d3e6:	bf00      	nop
 800d3e8:	20002315 	.word	0x20002315

0800d3ec <__sfp_lock_release>:
 800d3ec:	4801      	ldr	r0, [pc, #4]	; (800d3f4 <__sfp_lock_release+0x8>)
 800d3ee:	f000 b92f 	b.w	800d650 <__retarget_lock_release_recursive>
 800d3f2:	bf00      	nop
 800d3f4:	20002315 	.word	0x20002315

0800d3f8 <__sinit>:
 800d3f8:	b510      	push	{r4, lr}
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	f7ff fff0 	bl	800d3e0 <__sfp_lock_acquire>
 800d400:	6a23      	ldr	r3, [r4, #32]
 800d402:	b11b      	cbz	r3, 800d40c <__sinit+0x14>
 800d404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d408:	f7ff bff0 	b.w	800d3ec <__sfp_lock_release>
 800d40c:	4b04      	ldr	r3, [pc, #16]	; (800d420 <__sinit+0x28>)
 800d40e:	6223      	str	r3, [r4, #32]
 800d410:	4b04      	ldr	r3, [pc, #16]	; (800d424 <__sinit+0x2c>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1f5      	bne.n	800d404 <__sinit+0xc>
 800d418:	f7ff ffc4 	bl	800d3a4 <global_stdio_init.part.0>
 800d41c:	e7f2      	b.n	800d404 <__sinit+0xc>
 800d41e:	bf00      	nop
 800d420:	0800d365 	.word	0x0800d365
 800d424:	2000230c 	.word	0x2000230c

0800d428 <_fwalk_sglue>:
 800d428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d42c:	4607      	mov	r7, r0
 800d42e:	4688      	mov	r8, r1
 800d430:	4614      	mov	r4, r2
 800d432:	2600      	movs	r6, #0
 800d434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d438:	f1b9 0901 	subs.w	r9, r9, #1
 800d43c:	d505      	bpl.n	800d44a <_fwalk_sglue+0x22>
 800d43e:	6824      	ldr	r4, [r4, #0]
 800d440:	2c00      	cmp	r4, #0
 800d442:	d1f7      	bne.n	800d434 <_fwalk_sglue+0xc>
 800d444:	4630      	mov	r0, r6
 800d446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d44a:	89ab      	ldrh	r3, [r5, #12]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d907      	bls.n	800d460 <_fwalk_sglue+0x38>
 800d450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d454:	3301      	adds	r3, #1
 800d456:	d003      	beq.n	800d460 <_fwalk_sglue+0x38>
 800d458:	4629      	mov	r1, r5
 800d45a:	4638      	mov	r0, r7
 800d45c:	47c0      	blx	r8
 800d45e:	4306      	orrs	r6, r0
 800d460:	3568      	adds	r5, #104	; 0x68
 800d462:	e7e9      	b.n	800d438 <_fwalk_sglue+0x10>

0800d464 <sniprintf>:
 800d464:	b40c      	push	{r2, r3}
 800d466:	b530      	push	{r4, r5, lr}
 800d468:	4b17      	ldr	r3, [pc, #92]	; (800d4c8 <sniprintf+0x64>)
 800d46a:	1e0c      	subs	r4, r1, #0
 800d46c:	681d      	ldr	r5, [r3, #0]
 800d46e:	b09d      	sub	sp, #116	; 0x74
 800d470:	da08      	bge.n	800d484 <sniprintf+0x20>
 800d472:	238b      	movs	r3, #139	; 0x8b
 800d474:	602b      	str	r3, [r5, #0]
 800d476:	f04f 30ff 	mov.w	r0, #4294967295
 800d47a:	b01d      	add	sp, #116	; 0x74
 800d47c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d480:	b002      	add	sp, #8
 800d482:	4770      	bx	lr
 800d484:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d488:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d48c:	bf14      	ite	ne
 800d48e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d492:	4623      	moveq	r3, r4
 800d494:	9304      	str	r3, [sp, #16]
 800d496:	9307      	str	r3, [sp, #28]
 800d498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d49c:	9002      	str	r0, [sp, #8]
 800d49e:	9006      	str	r0, [sp, #24]
 800d4a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d4a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d4a6:	ab21      	add	r3, sp, #132	; 0x84
 800d4a8:	a902      	add	r1, sp, #8
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	9301      	str	r3, [sp, #4]
 800d4ae:	f001 fc23 	bl	800ecf8 <_svfiprintf_r>
 800d4b2:	1c43      	adds	r3, r0, #1
 800d4b4:	bfbc      	itt	lt
 800d4b6:	238b      	movlt	r3, #139	; 0x8b
 800d4b8:	602b      	strlt	r3, [r5, #0]
 800d4ba:	2c00      	cmp	r4, #0
 800d4bc:	d0dd      	beq.n	800d47a <sniprintf+0x16>
 800d4be:	9b02      	ldr	r3, [sp, #8]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	701a      	strb	r2, [r3, #0]
 800d4c4:	e7d9      	b.n	800d47a <sniprintf+0x16>
 800d4c6:	bf00      	nop
 800d4c8:	2000017c 	.word	0x2000017c

0800d4cc <__sread>:
 800d4cc:	b510      	push	{r4, lr}
 800d4ce:	460c      	mov	r4, r1
 800d4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4d4:	f000 f86c 	bl	800d5b0 <_read_r>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	bfab      	itete	ge
 800d4dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4de:	89a3      	ldrhlt	r3, [r4, #12]
 800d4e0:	181b      	addge	r3, r3, r0
 800d4e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4e6:	bfac      	ite	ge
 800d4e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4ea:	81a3      	strhlt	r3, [r4, #12]
 800d4ec:	bd10      	pop	{r4, pc}

0800d4ee <__swrite>:
 800d4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f2:	461f      	mov	r7, r3
 800d4f4:	898b      	ldrh	r3, [r1, #12]
 800d4f6:	05db      	lsls	r3, r3, #23
 800d4f8:	4605      	mov	r5, r0
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	4616      	mov	r6, r2
 800d4fe:	d505      	bpl.n	800d50c <__swrite+0x1e>
 800d500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d504:	2302      	movs	r3, #2
 800d506:	2200      	movs	r2, #0
 800d508:	f000 f840 	bl	800d58c <_lseek_r>
 800d50c:	89a3      	ldrh	r3, [r4, #12]
 800d50e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d516:	81a3      	strh	r3, [r4, #12]
 800d518:	4632      	mov	r2, r6
 800d51a:	463b      	mov	r3, r7
 800d51c:	4628      	mov	r0, r5
 800d51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d522:	f000 b857 	b.w	800d5d4 <_write_r>

0800d526 <__sseek>:
 800d526:	b510      	push	{r4, lr}
 800d528:	460c      	mov	r4, r1
 800d52a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d52e:	f000 f82d 	bl	800d58c <_lseek_r>
 800d532:	1c43      	adds	r3, r0, #1
 800d534:	89a3      	ldrh	r3, [r4, #12]
 800d536:	bf15      	itete	ne
 800d538:	6560      	strne	r0, [r4, #84]	; 0x54
 800d53a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d53e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d542:	81a3      	strheq	r3, [r4, #12]
 800d544:	bf18      	it	ne
 800d546:	81a3      	strhne	r3, [r4, #12]
 800d548:	bd10      	pop	{r4, pc}

0800d54a <__sclose>:
 800d54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d54e:	f000 b80d 	b.w	800d56c <_close_r>

0800d552 <memset>:
 800d552:	4402      	add	r2, r0
 800d554:	4603      	mov	r3, r0
 800d556:	4293      	cmp	r3, r2
 800d558:	d100      	bne.n	800d55c <memset+0xa>
 800d55a:	4770      	bx	lr
 800d55c:	f803 1b01 	strb.w	r1, [r3], #1
 800d560:	e7f9      	b.n	800d556 <memset+0x4>
	...

0800d564 <_localeconv_r>:
 800d564:	4800      	ldr	r0, [pc, #0]	; (800d568 <_localeconv_r+0x4>)
 800d566:	4770      	bx	lr
 800d568:	20000270 	.word	0x20000270

0800d56c <_close_r>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4d06      	ldr	r5, [pc, #24]	; (800d588 <_close_r+0x1c>)
 800d570:	2300      	movs	r3, #0
 800d572:	4604      	mov	r4, r0
 800d574:	4608      	mov	r0, r1
 800d576:	602b      	str	r3, [r5, #0]
 800d578:	f7f4 fdd9 	bl	800212e <_close>
 800d57c:	1c43      	adds	r3, r0, #1
 800d57e:	d102      	bne.n	800d586 <_close_r+0x1a>
 800d580:	682b      	ldr	r3, [r5, #0]
 800d582:	b103      	cbz	r3, 800d586 <_close_r+0x1a>
 800d584:	6023      	str	r3, [r4, #0]
 800d586:	bd38      	pop	{r3, r4, r5, pc}
 800d588:	20002310 	.word	0x20002310

0800d58c <_lseek_r>:
 800d58c:	b538      	push	{r3, r4, r5, lr}
 800d58e:	4d07      	ldr	r5, [pc, #28]	; (800d5ac <_lseek_r+0x20>)
 800d590:	4604      	mov	r4, r0
 800d592:	4608      	mov	r0, r1
 800d594:	4611      	mov	r1, r2
 800d596:	2200      	movs	r2, #0
 800d598:	602a      	str	r2, [r5, #0]
 800d59a:	461a      	mov	r2, r3
 800d59c:	f7f4 fdee 	bl	800217c <_lseek>
 800d5a0:	1c43      	adds	r3, r0, #1
 800d5a2:	d102      	bne.n	800d5aa <_lseek_r+0x1e>
 800d5a4:	682b      	ldr	r3, [r5, #0]
 800d5a6:	b103      	cbz	r3, 800d5aa <_lseek_r+0x1e>
 800d5a8:	6023      	str	r3, [r4, #0]
 800d5aa:	bd38      	pop	{r3, r4, r5, pc}
 800d5ac:	20002310 	.word	0x20002310

0800d5b0 <_read_r>:
 800d5b0:	b538      	push	{r3, r4, r5, lr}
 800d5b2:	4d07      	ldr	r5, [pc, #28]	; (800d5d0 <_read_r+0x20>)
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	4608      	mov	r0, r1
 800d5b8:	4611      	mov	r1, r2
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	602a      	str	r2, [r5, #0]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	f7f4 fd7c 	bl	80020bc <_read>
 800d5c4:	1c43      	adds	r3, r0, #1
 800d5c6:	d102      	bne.n	800d5ce <_read_r+0x1e>
 800d5c8:	682b      	ldr	r3, [r5, #0]
 800d5ca:	b103      	cbz	r3, 800d5ce <_read_r+0x1e>
 800d5cc:	6023      	str	r3, [r4, #0]
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	20002310 	.word	0x20002310

0800d5d4 <_write_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4d07      	ldr	r5, [pc, #28]	; (800d5f4 <_write_r+0x20>)
 800d5d8:	4604      	mov	r4, r0
 800d5da:	4608      	mov	r0, r1
 800d5dc:	4611      	mov	r1, r2
 800d5de:	2200      	movs	r2, #0
 800d5e0:	602a      	str	r2, [r5, #0]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	f7f4 fd87 	bl	80020f6 <_write>
 800d5e8:	1c43      	adds	r3, r0, #1
 800d5ea:	d102      	bne.n	800d5f2 <_write_r+0x1e>
 800d5ec:	682b      	ldr	r3, [r5, #0]
 800d5ee:	b103      	cbz	r3, 800d5f2 <_write_r+0x1e>
 800d5f0:	6023      	str	r3, [r4, #0]
 800d5f2:	bd38      	pop	{r3, r4, r5, pc}
 800d5f4:	20002310 	.word	0x20002310

0800d5f8 <__errno>:
 800d5f8:	4b01      	ldr	r3, [pc, #4]	; (800d600 <__errno+0x8>)
 800d5fa:	6818      	ldr	r0, [r3, #0]
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	2000017c 	.word	0x2000017c

0800d604 <__libc_init_array>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	4d0d      	ldr	r5, [pc, #52]	; (800d63c <__libc_init_array+0x38>)
 800d608:	4c0d      	ldr	r4, [pc, #52]	; (800d640 <__libc_init_array+0x3c>)
 800d60a:	1b64      	subs	r4, r4, r5
 800d60c:	10a4      	asrs	r4, r4, #2
 800d60e:	2600      	movs	r6, #0
 800d610:	42a6      	cmp	r6, r4
 800d612:	d109      	bne.n	800d628 <__libc_init_array+0x24>
 800d614:	4d0b      	ldr	r5, [pc, #44]	; (800d644 <__libc_init_array+0x40>)
 800d616:	4c0c      	ldr	r4, [pc, #48]	; (800d648 <__libc_init_array+0x44>)
 800d618:	f002 f896 	bl	800f748 <_init>
 800d61c:	1b64      	subs	r4, r4, r5
 800d61e:	10a4      	asrs	r4, r4, #2
 800d620:	2600      	movs	r6, #0
 800d622:	42a6      	cmp	r6, r4
 800d624:	d105      	bne.n	800d632 <__libc_init_array+0x2e>
 800d626:	bd70      	pop	{r4, r5, r6, pc}
 800d628:	f855 3b04 	ldr.w	r3, [r5], #4
 800d62c:	4798      	blx	r3
 800d62e:	3601      	adds	r6, #1
 800d630:	e7ee      	b.n	800d610 <__libc_init_array+0xc>
 800d632:	f855 3b04 	ldr.w	r3, [r5], #4
 800d636:	4798      	blx	r3
 800d638:	3601      	adds	r6, #1
 800d63a:	e7f2      	b.n	800d622 <__libc_init_array+0x1e>
 800d63c:	0800fb54 	.word	0x0800fb54
 800d640:	0800fb54 	.word	0x0800fb54
 800d644:	0800fb54 	.word	0x0800fb54
 800d648:	0800fb58 	.word	0x0800fb58

0800d64c <__retarget_lock_init_recursive>:
 800d64c:	4770      	bx	lr

0800d64e <__retarget_lock_acquire_recursive>:
 800d64e:	4770      	bx	lr

0800d650 <__retarget_lock_release_recursive>:
 800d650:	4770      	bx	lr

0800d652 <quorem>:
 800d652:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d656:	6903      	ldr	r3, [r0, #16]
 800d658:	690c      	ldr	r4, [r1, #16]
 800d65a:	42a3      	cmp	r3, r4
 800d65c:	4607      	mov	r7, r0
 800d65e:	db7e      	blt.n	800d75e <quorem+0x10c>
 800d660:	3c01      	subs	r4, #1
 800d662:	f101 0814 	add.w	r8, r1, #20
 800d666:	f100 0514 	add.w	r5, r0, #20
 800d66a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d66e:	9301      	str	r3, [sp, #4]
 800d670:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d674:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d678:	3301      	adds	r3, #1
 800d67a:	429a      	cmp	r2, r3
 800d67c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d680:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d684:	fbb2 f6f3 	udiv	r6, r2, r3
 800d688:	d331      	bcc.n	800d6ee <quorem+0x9c>
 800d68a:	f04f 0e00 	mov.w	lr, #0
 800d68e:	4640      	mov	r0, r8
 800d690:	46ac      	mov	ip, r5
 800d692:	46f2      	mov	sl, lr
 800d694:	f850 2b04 	ldr.w	r2, [r0], #4
 800d698:	b293      	uxth	r3, r2
 800d69a:	fb06 e303 	mla	r3, r6, r3, lr
 800d69e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d6a2:	0c1a      	lsrs	r2, r3, #16
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	ebaa 0303 	sub.w	r3, sl, r3
 800d6aa:	f8dc a000 	ldr.w	sl, [ip]
 800d6ae:	fa13 f38a 	uxtah	r3, r3, sl
 800d6b2:	fb06 220e 	mla	r2, r6, lr, r2
 800d6b6:	9300      	str	r3, [sp, #0]
 800d6b8:	9b00      	ldr	r3, [sp, #0]
 800d6ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d6be:	b292      	uxth	r2, r2
 800d6c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d6c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6c8:	f8bd 3000 	ldrh.w	r3, [sp]
 800d6cc:	4581      	cmp	r9, r0
 800d6ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6d2:	f84c 3b04 	str.w	r3, [ip], #4
 800d6d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d6da:	d2db      	bcs.n	800d694 <quorem+0x42>
 800d6dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800d6e0:	b92b      	cbnz	r3, 800d6ee <quorem+0x9c>
 800d6e2:	9b01      	ldr	r3, [sp, #4]
 800d6e4:	3b04      	subs	r3, #4
 800d6e6:	429d      	cmp	r5, r3
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	d32c      	bcc.n	800d746 <quorem+0xf4>
 800d6ec:	613c      	str	r4, [r7, #16]
 800d6ee:	4638      	mov	r0, r7
 800d6f0:	f001 f9a8 	bl	800ea44 <__mcmp>
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	db22      	blt.n	800d73e <quorem+0xec>
 800d6f8:	3601      	adds	r6, #1
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	f858 2b04 	ldr.w	r2, [r8], #4
 800d702:	f8d1 c000 	ldr.w	ip, [r1]
 800d706:	b293      	uxth	r3, r2
 800d708:	1ac3      	subs	r3, r0, r3
 800d70a:	0c12      	lsrs	r2, r2, #16
 800d70c:	fa13 f38c 	uxtah	r3, r3, ip
 800d710:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d714:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d718:	b29b      	uxth	r3, r3
 800d71a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d71e:	45c1      	cmp	r9, r8
 800d720:	f841 3b04 	str.w	r3, [r1], #4
 800d724:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d728:	d2e9      	bcs.n	800d6fe <quorem+0xac>
 800d72a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d72e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d732:	b922      	cbnz	r2, 800d73e <quorem+0xec>
 800d734:	3b04      	subs	r3, #4
 800d736:	429d      	cmp	r5, r3
 800d738:	461a      	mov	r2, r3
 800d73a:	d30a      	bcc.n	800d752 <quorem+0x100>
 800d73c:	613c      	str	r4, [r7, #16]
 800d73e:	4630      	mov	r0, r6
 800d740:	b003      	add	sp, #12
 800d742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d746:	6812      	ldr	r2, [r2, #0]
 800d748:	3b04      	subs	r3, #4
 800d74a:	2a00      	cmp	r2, #0
 800d74c:	d1ce      	bne.n	800d6ec <quorem+0x9a>
 800d74e:	3c01      	subs	r4, #1
 800d750:	e7c9      	b.n	800d6e6 <quorem+0x94>
 800d752:	6812      	ldr	r2, [r2, #0]
 800d754:	3b04      	subs	r3, #4
 800d756:	2a00      	cmp	r2, #0
 800d758:	d1f0      	bne.n	800d73c <quorem+0xea>
 800d75a:	3c01      	subs	r4, #1
 800d75c:	e7eb      	b.n	800d736 <quorem+0xe4>
 800d75e:	2000      	movs	r0, #0
 800d760:	e7ee      	b.n	800d740 <quorem+0xee>
 800d762:	0000      	movs	r0, r0
 800d764:	0000      	movs	r0, r0
	...

0800d768 <_dtoa_r>:
 800d768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d76c:	ed2d 8b04 	vpush	{d8-d9}
 800d770:	69c5      	ldr	r5, [r0, #28]
 800d772:	b093      	sub	sp, #76	; 0x4c
 800d774:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d778:	ec57 6b10 	vmov	r6, r7, d0
 800d77c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d780:	9107      	str	r1, [sp, #28]
 800d782:	4604      	mov	r4, r0
 800d784:	920a      	str	r2, [sp, #40]	; 0x28
 800d786:	930d      	str	r3, [sp, #52]	; 0x34
 800d788:	b975      	cbnz	r5, 800d7a8 <_dtoa_r+0x40>
 800d78a:	2010      	movs	r0, #16
 800d78c:	f000 fe2a 	bl	800e3e4 <malloc>
 800d790:	4602      	mov	r2, r0
 800d792:	61e0      	str	r0, [r4, #28]
 800d794:	b920      	cbnz	r0, 800d7a0 <_dtoa_r+0x38>
 800d796:	4bae      	ldr	r3, [pc, #696]	; (800da50 <_dtoa_r+0x2e8>)
 800d798:	21ef      	movs	r1, #239	; 0xef
 800d79a:	48ae      	ldr	r0, [pc, #696]	; (800da54 <_dtoa_r+0x2ec>)
 800d79c:	f001 fc90 	bl	800f0c0 <__assert_func>
 800d7a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d7a4:	6005      	str	r5, [r0, #0]
 800d7a6:	60c5      	str	r5, [r0, #12]
 800d7a8:	69e3      	ldr	r3, [r4, #28]
 800d7aa:	6819      	ldr	r1, [r3, #0]
 800d7ac:	b151      	cbz	r1, 800d7c4 <_dtoa_r+0x5c>
 800d7ae:	685a      	ldr	r2, [r3, #4]
 800d7b0:	604a      	str	r2, [r1, #4]
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	4093      	lsls	r3, r2
 800d7b6:	608b      	str	r3, [r1, #8]
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f000 ff07 	bl	800e5cc <_Bfree>
 800d7be:	69e3      	ldr	r3, [r4, #28]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	601a      	str	r2, [r3, #0]
 800d7c4:	1e3b      	subs	r3, r7, #0
 800d7c6:	bfbb      	ittet	lt
 800d7c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d7cc:	9303      	strlt	r3, [sp, #12]
 800d7ce:	2300      	movge	r3, #0
 800d7d0:	2201      	movlt	r2, #1
 800d7d2:	bfac      	ite	ge
 800d7d4:	f8c8 3000 	strge.w	r3, [r8]
 800d7d8:	f8c8 2000 	strlt.w	r2, [r8]
 800d7dc:	4b9e      	ldr	r3, [pc, #632]	; (800da58 <_dtoa_r+0x2f0>)
 800d7de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d7e2:	ea33 0308 	bics.w	r3, r3, r8
 800d7e6:	d11b      	bne.n	800d820 <_dtoa_r+0xb8>
 800d7e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800d7ee:	6013      	str	r3, [r2, #0]
 800d7f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d7f4:	4333      	orrs	r3, r6
 800d7f6:	f000 8593 	beq.w	800e320 <_dtoa_r+0xbb8>
 800d7fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7fc:	b963      	cbnz	r3, 800d818 <_dtoa_r+0xb0>
 800d7fe:	4b97      	ldr	r3, [pc, #604]	; (800da5c <_dtoa_r+0x2f4>)
 800d800:	e027      	b.n	800d852 <_dtoa_r+0xea>
 800d802:	4b97      	ldr	r3, [pc, #604]	; (800da60 <_dtoa_r+0x2f8>)
 800d804:	9300      	str	r3, [sp, #0]
 800d806:	3308      	adds	r3, #8
 800d808:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	9800      	ldr	r0, [sp, #0]
 800d80e:	b013      	add	sp, #76	; 0x4c
 800d810:	ecbd 8b04 	vpop	{d8-d9}
 800d814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d818:	4b90      	ldr	r3, [pc, #576]	; (800da5c <_dtoa_r+0x2f4>)
 800d81a:	9300      	str	r3, [sp, #0]
 800d81c:	3303      	adds	r3, #3
 800d81e:	e7f3      	b.n	800d808 <_dtoa_r+0xa0>
 800d820:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d824:	2200      	movs	r2, #0
 800d826:	ec51 0b17 	vmov	r0, r1, d7
 800d82a:	eeb0 8a47 	vmov.f32	s16, s14
 800d82e:	eef0 8a67 	vmov.f32	s17, s15
 800d832:	2300      	movs	r3, #0
 800d834:	f7f3 f950 	bl	8000ad8 <__aeabi_dcmpeq>
 800d838:	4681      	mov	r9, r0
 800d83a:	b160      	cbz	r0, 800d856 <_dtoa_r+0xee>
 800d83c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d83e:	2301      	movs	r3, #1
 800d840:	6013      	str	r3, [r2, #0]
 800d842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d844:	2b00      	cmp	r3, #0
 800d846:	f000 8568 	beq.w	800e31a <_dtoa_r+0xbb2>
 800d84a:	4b86      	ldr	r3, [pc, #536]	; (800da64 <_dtoa_r+0x2fc>)
 800d84c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d84e:	6013      	str	r3, [r2, #0]
 800d850:	3b01      	subs	r3, #1
 800d852:	9300      	str	r3, [sp, #0]
 800d854:	e7da      	b.n	800d80c <_dtoa_r+0xa4>
 800d856:	aa10      	add	r2, sp, #64	; 0x40
 800d858:	a911      	add	r1, sp, #68	; 0x44
 800d85a:	4620      	mov	r0, r4
 800d85c:	eeb0 0a48 	vmov.f32	s0, s16
 800d860:	eef0 0a68 	vmov.f32	s1, s17
 800d864:	f001 f994 	bl	800eb90 <__d2b>
 800d868:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d86c:	4682      	mov	sl, r0
 800d86e:	2d00      	cmp	r5, #0
 800d870:	d07f      	beq.n	800d972 <_dtoa_r+0x20a>
 800d872:	ee18 3a90 	vmov	r3, s17
 800d876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d87a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d87e:	ec51 0b18 	vmov	r0, r1, d8
 800d882:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d886:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d88a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d88e:	4619      	mov	r1, r3
 800d890:	2200      	movs	r2, #0
 800d892:	4b75      	ldr	r3, [pc, #468]	; (800da68 <_dtoa_r+0x300>)
 800d894:	f7f2 fd00 	bl	8000298 <__aeabi_dsub>
 800d898:	a367      	add	r3, pc, #412	; (adr r3, 800da38 <_dtoa_r+0x2d0>)
 800d89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89e:	f7f2 feb3 	bl	8000608 <__aeabi_dmul>
 800d8a2:	a367      	add	r3, pc, #412	; (adr r3, 800da40 <_dtoa_r+0x2d8>)
 800d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a8:	f7f2 fcf8 	bl	800029c <__adddf3>
 800d8ac:	4606      	mov	r6, r0
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	460f      	mov	r7, r1
 800d8b2:	f7f2 fe3f 	bl	8000534 <__aeabi_i2d>
 800d8b6:	a364      	add	r3, pc, #400	; (adr r3, 800da48 <_dtoa_r+0x2e0>)
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	f7f2 fea4 	bl	8000608 <__aeabi_dmul>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	4639      	mov	r1, r7
 800d8c8:	f7f2 fce8 	bl	800029c <__adddf3>
 800d8cc:	4606      	mov	r6, r0
 800d8ce:	460f      	mov	r7, r1
 800d8d0:	f7f3 f94a 	bl	8000b68 <__aeabi_d2iz>
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	4683      	mov	fp, r0
 800d8d8:	2300      	movs	r3, #0
 800d8da:	4630      	mov	r0, r6
 800d8dc:	4639      	mov	r1, r7
 800d8de:	f7f3 f905 	bl	8000aec <__aeabi_dcmplt>
 800d8e2:	b148      	cbz	r0, 800d8f8 <_dtoa_r+0x190>
 800d8e4:	4658      	mov	r0, fp
 800d8e6:	f7f2 fe25 	bl	8000534 <__aeabi_i2d>
 800d8ea:	4632      	mov	r2, r6
 800d8ec:	463b      	mov	r3, r7
 800d8ee:	f7f3 f8f3 	bl	8000ad8 <__aeabi_dcmpeq>
 800d8f2:	b908      	cbnz	r0, 800d8f8 <_dtoa_r+0x190>
 800d8f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d8f8:	f1bb 0f16 	cmp.w	fp, #22
 800d8fc:	d857      	bhi.n	800d9ae <_dtoa_r+0x246>
 800d8fe:	4b5b      	ldr	r3, [pc, #364]	; (800da6c <_dtoa_r+0x304>)
 800d900:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d908:	ec51 0b18 	vmov	r0, r1, d8
 800d90c:	f7f3 f8ee 	bl	8000aec <__aeabi_dcmplt>
 800d910:	2800      	cmp	r0, #0
 800d912:	d04e      	beq.n	800d9b2 <_dtoa_r+0x24a>
 800d914:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d918:	2300      	movs	r3, #0
 800d91a:	930c      	str	r3, [sp, #48]	; 0x30
 800d91c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d91e:	1b5b      	subs	r3, r3, r5
 800d920:	1e5a      	subs	r2, r3, #1
 800d922:	bf45      	ittet	mi
 800d924:	f1c3 0301 	rsbmi	r3, r3, #1
 800d928:	9305      	strmi	r3, [sp, #20]
 800d92a:	2300      	movpl	r3, #0
 800d92c:	2300      	movmi	r3, #0
 800d92e:	9206      	str	r2, [sp, #24]
 800d930:	bf54      	ite	pl
 800d932:	9305      	strpl	r3, [sp, #20]
 800d934:	9306      	strmi	r3, [sp, #24]
 800d936:	f1bb 0f00 	cmp.w	fp, #0
 800d93a:	db3c      	blt.n	800d9b6 <_dtoa_r+0x24e>
 800d93c:	9b06      	ldr	r3, [sp, #24]
 800d93e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d942:	445b      	add	r3, fp
 800d944:	9306      	str	r3, [sp, #24]
 800d946:	2300      	movs	r3, #0
 800d948:	9308      	str	r3, [sp, #32]
 800d94a:	9b07      	ldr	r3, [sp, #28]
 800d94c:	2b09      	cmp	r3, #9
 800d94e:	d868      	bhi.n	800da22 <_dtoa_r+0x2ba>
 800d950:	2b05      	cmp	r3, #5
 800d952:	bfc4      	itt	gt
 800d954:	3b04      	subgt	r3, #4
 800d956:	9307      	strgt	r3, [sp, #28]
 800d958:	9b07      	ldr	r3, [sp, #28]
 800d95a:	f1a3 0302 	sub.w	r3, r3, #2
 800d95e:	bfcc      	ite	gt
 800d960:	2500      	movgt	r5, #0
 800d962:	2501      	movle	r5, #1
 800d964:	2b03      	cmp	r3, #3
 800d966:	f200 8085 	bhi.w	800da74 <_dtoa_r+0x30c>
 800d96a:	e8df f003 	tbb	[pc, r3]
 800d96e:	3b2e      	.short	0x3b2e
 800d970:	5839      	.short	0x5839
 800d972:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d976:	441d      	add	r5, r3
 800d978:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d97c:	2b20      	cmp	r3, #32
 800d97e:	bfc1      	itttt	gt
 800d980:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d984:	fa08 f803 	lslgt.w	r8, r8, r3
 800d988:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d98c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d990:	bfd6      	itet	le
 800d992:	f1c3 0320 	rsble	r3, r3, #32
 800d996:	ea48 0003 	orrgt.w	r0, r8, r3
 800d99a:	fa06 f003 	lslle.w	r0, r6, r3
 800d99e:	f7f2 fdb9 	bl	8000514 <__aeabi_ui2d>
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d9a8:	3d01      	subs	r5, #1
 800d9aa:	920e      	str	r2, [sp, #56]	; 0x38
 800d9ac:	e76f      	b.n	800d88e <_dtoa_r+0x126>
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e7b3      	b.n	800d91a <_dtoa_r+0x1b2>
 800d9b2:	900c      	str	r0, [sp, #48]	; 0x30
 800d9b4:	e7b2      	b.n	800d91c <_dtoa_r+0x1b4>
 800d9b6:	9b05      	ldr	r3, [sp, #20]
 800d9b8:	eba3 030b 	sub.w	r3, r3, fp
 800d9bc:	9305      	str	r3, [sp, #20]
 800d9be:	f1cb 0300 	rsb	r3, fp, #0
 800d9c2:	9308      	str	r3, [sp, #32]
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d9c8:	e7bf      	b.n	800d94a <_dtoa_r+0x1e2>
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	dc52      	bgt.n	800da7a <_dtoa_r+0x312>
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	9301      	str	r3, [sp, #4]
 800d9d8:	9304      	str	r3, [sp, #16]
 800d9da:	461a      	mov	r2, r3
 800d9dc:	920a      	str	r2, [sp, #40]	; 0x28
 800d9de:	e00b      	b.n	800d9f8 <_dtoa_r+0x290>
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e7f3      	b.n	800d9cc <_dtoa_r+0x264>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9ea:	445b      	add	r3, fp
 800d9ec:	9301      	str	r3, [sp, #4]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	9304      	str	r3, [sp, #16]
 800d9f4:	bfb8      	it	lt
 800d9f6:	2301      	movlt	r3, #1
 800d9f8:	69e0      	ldr	r0, [r4, #28]
 800d9fa:	2100      	movs	r1, #0
 800d9fc:	2204      	movs	r2, #4
 800d9fe:	f102 0614 	add.w	r6, r2, #20
 800da02:	429e      	cmp	r6, r3
 800da04:	d93d      	bls.n	800da82 <_dtoa_r+0x31a>
 800da06:	6041      	str	r1, [r0, #4]
 800da08:	4620      	mov	r0, r4
 800da0a:	f000 fd9f 	bl	800e54c <_Balloc>
 800da0e:	9000      	str	r0, [sp, #0]
 800da10:	2800      	cmp	r0, #0
 800da12:	d139      	bne.n	800da88 <_dtoa_r+0x320>
 800da14:	4b16      	ldr	r3, [pc, #88]	; (800da70 <_dtoa_r+0x308>)
 800da16:	4602      	mov	r2, r0
 800da18:	f240 11af 	movw	r1, #431	; 0x1af
 800da1c:	e6bd      	b.n	800d79a <_dtoa_r+0x32>
 800da1e:	2301      	movs	r3, #1
 800da20:	e7e1      	b.n	800d9e6 <_dtoa_r+0x27e>
 800da22:	2501      	movs	r5, #1
 800da24:	2300      	movs	r3, #0
 800da26:	9307      	str	r3, [sp, #28]
 800da28:	9509      	str	r5, [sp, #36]	; 0x24
 800da2a:	f04f 33ff 	mov.w	r3, #4294967295
 800da2e:	9301      	str	r3, [sp, #4]
 800da30:	9304      	str	r3, [sp, #16]
 800da32:	2200      	movs	r2, #0
 800da34:	2312      	movs	r3, #18
 800da36:	e7d1      	b.n	800d9dc <_dtoa_r+0x274>
 800da38:	636f4361 	.word	0x636f4361
 800da3c:	3fd287a7 	.word	0x3fd287a7
 800da40:	8b60c8b3 	.word	0x8b60c8b3
 800da44:	3fc68a28 	.word	0x3fc68a28
 800da48:	509f79fb 	.word	0x509f79fb
 800da4c:	3fd34413 	.word	0x3fd34413
 800da50:	0800f819 	.word	0x0800f819
 800da54:	0800f830 	.word	0x0800f830
 800da58:	7ff00000 	.word	0x7ff00000
 800da5c:	0800f815 	.word	0x0800f815
 800da60:	0800f80c 	.word	0x0800f80c
 800da64:	0800f7e9 	.word	0x0800f7e9
 800da68:	3ff80000 	.word	0x3ff80000
 800da6c:	0800f920 	.word	0x0800f920
 800da70:	0800f888 	.word	0x0800f888
 800da74:	2301      	movs	r3, #1
 800da76:	9309      	str	r3, [sp, #36]	; 0x24
 800da78:	e7d7      	b.n	800da2a <_dtoa_r+0x2c2>
 800da7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da7c:	9301      	str	r3, [sp, #4]
 800da7e:	9304      	str	r3, [sp, #16]
 800da80:	e7ba      	b.n	800d9f8 <_dtoa_r+0x290>
 800da82:	3101      	adds	r1, #1
 800da84:	0052      	lsls	r2, r2, #1
 800da86:	e7ba      	b.n	800d9fe <_dtoa_r+0x296>
 800da88:	69e3      	ldr	r3, [r4, #28]
 800da8a:	9a00      	ldr	r2, [sp, #0]
 800da8c:	601a      	str	r2, [r3, #0]
 800da8e:	9b04      	ldr	r3, [sp, #16]
 800da90:	2b0e      	cmp	r3, #14
 800da92:	f200 80a8 	bhi.w	800dbe6 <_dtoa_r+0x47e>
 800da96:	2d00      	cmp	r5, #0
 800da98:	f000 80a5 	beq.w	800dbe6 <_dtoa_r+0x47e>
 800da9c:	f1bb 0f00 	cmp.w	fp, #0
 800daa0:	dd38      	ble.n	800db14 <_dtoa_r+0x3ac>
 800daa2:	4bc0      	ldr	r3, [pc, #768]	; (800dda4 <_dtoa_r+0x63c>)
 800daa4:	f00b 020f 	and.w	r2, fp, #15
 800daa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800daac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dab0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dab4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dab8:	d019      	beq.n	800daee <_dtoa_r+0x386>
 800daba:	4bbb      	ldr	r3, [pc, #748]	; (800dda8 <_dtoa_r+0x640>)
 800dabc:	ec51 0b18 	vmov	r0, r1, d8
 800dac0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dac4:	f7f2 feca 	bl	800085c <__aeabi_ddiv>
 800dac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dacc:	f008 080f 	and.w	r8, r8, #15
 800dad0:	2503      	movs	r5, #3
 800dad2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800dda8 <_dtoa_r+0x640>
 800dad6:	f1b8 0f00 	cmp.w	r8, #0
 800dada:	d10a      	bne.n	800daf2 <_dtoa_r+0x38a>
 800dadc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dae0:	4632      	mov	r2, r6
 800dae2:	463b      	mov	r3, r7
 800dae4:	f7f2 feba 	bl	800085c <__aeabi_ddiv>
 800dae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800daec:	e02b      	b.n	800db46 <_dtoa_r+0x3de>
 800daee:	2502      	movs	r5, #2
 800daf0:	e7ef      	b.n	800dad2 <_dtoa_r+0x36a>
 800daf2:	f018 0f01 	tst.w	r8, #1
 800daf6:	d008      	beq.n	800db0a <_dtoa_r+0x3a2>
 800daf8:	4630      	mov	r0, r6
 800dafa:	4639      	mov	r1, r7
 800dafc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800db00:	f7f2 fd82 	bl	8000608 <__aeabi_dmul>
 800db04:	3501      	adds	r5, #1
 800db06:	4606      	mov	r6, r0
 800db08:	460f      	mov	r7, r1
 800db0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800db0e:	f109 0908 	add.w	r9, r9, #8
 800db12:	e7e0      	b.n	800dad6 <_dtoa_r+0x36e>
 800db14:	f000 809f 	beq.w	800dc56 <_dtoa_r+0x4ee>
 800db18:	f1cb 0600 	rsb	r6, fp, #0
 800db1c:	4ba1      	ldr	r3, [pc, #644]	; (800dda4 <_dtoa_r+0x63c>)
 800db1e:	4fa2      	ldr	r7, [pc, #648]	; (800dda8 <_dtoa_r+0x640>)
 800db20:	f006 020f 	and.w	r2, r6, #15
 800db24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2c:	ec51 0b18 	vmov	r0, r1, d8
 800db30:	f7f2 fd6a 	bl	8000608 <__aeabi_dmul>
 800db34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db38:	1136      	asrs	r6, r6, #4
 800db3a:	2300      	movs	r3, #0
 800db3c:	2502      	movs	r5, #2
 800db3e:	2e00      	cmp	r6, #0
 800db40:	d17e      	bne.n	800dc40 <_dtoa_r+0x4d8>
 800db42:	2b00      	cmp	r3, #0
 800db44:	d1d0      	bne.n	800dae8 <_dtoa_r+0x380>
 800db46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	f000 8084 	beq.w	800dc5a <_dtoa_r+0x4f2>
 800db52:	4b96      	ldr	r3, [pc, #600]	; (800ddac <_dtoa_r+0x644>)
 800db54:	2200      	movs	r2, #0
 800db56:	4640      	mov	r0, r8
 800db58:	4649      	mov	r1, r9
 800db5a:	f7f2 ffc7 	bl	8000aec <__aeabi_dcmplt>
 800db5e:	2800      	cmp	r0, #0
 800db60:	d07b      	beq.n	800dc5a <_dtoa_r+0x4f2>
 800db62:	9b04      	ldr	r3, [sp, #16]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d078      	beq.n	800dc5a <_dtoa_r+0x4f2>
 800db68:	9b01      	ldr	r3, [sp, #4]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	dd39      	ble.n	800dbe2 <_dtoa_r+0x47a>
 800db6e:	4b90      	ldr	r3, [pc, #576]	; (800ddb0 <_dtoa_r+0x648>)
 800db70:	2200      	movs	r2, #0
 800db72:	4640      	mov	r0, r8
 800db74:	4649      	mov	r1, r9
 800db76:	f7f2 fd47 	bl	8000608 <__aeabi_dmul>
 800db7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db7e:	9e01      	ldr	r6, [sp, #4]
 800db80:	f10b 37ff 	add.w	r7, fp, #4294967295
 800db84:	3501      	adds	r5, #1
 800db86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800db8a:	4628      	mov	r0, r5
 800db8c:	f7f2 fcd2 	bl	8000534 <__aeabi_i2d>
 800db90:	4642      	mov	r2, r8
 800db92:	464b      	mov	r3, r9
 800db94:	f7f2 fd38 	bl	8000608 <__aeabi_dmul>
 800db98:	4b86      	ldr	r3, [pc, #536]	; (800ddb4 <_dtoa_r+0x64c>)
 800db9a:	2200      	movs	r2, #0
 800db9c:	f7f2 fb7e 	bl	800029c <__adddf3>
 800dba0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dba8:	9303      	str	r3, [sp, #12]
 800dbaa:	2e00      	cmp	r6, #0
 800dbac:	d158      	bne.n	800dc60 <_dtoa_r+0x4f8>
 800dbae:	4b82      	ldr	r3, [pc, #520]	; (800ddb8 <_dtoa_r+0x650>)
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	4640      	mov	r0, r8
 800dbb4:	4649      	mov	r1, r9
 800dbb6:	f7f2 fb6f 	bl	8000298 <__aeabi_dsub>
 800dbba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dbbe:	4680      	mov	r8, r0
 800dbc0:	4689      	mov	r9, r1
 800dbc2:	f7f2 ffb1 	bl	8000b28 <__aeabi_dcmpgt>
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	f040 8296 	bne.w	800e0f8 <_dtoa_r+0x990>
 800dbcc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dbd0:	4640      	mov	r0, r8
 800dbd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbd6:	4649      	mov	r1, r9
 800dbd8:	f7f2 ff88 	bl	8000aec <__aeabi_dcmplt>
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	f040 8289 	bne.w	800e0f4 <_dtoa_r+0x98c>
 800dbe2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dbe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	f2c0 814e 	blt.w	800de8a <_dtoa_r+0x722>
 800dbee:	f1bb 0f0e 	cmp.w	fp, #14
 800dbf2:	f300 814a 	bgt.w	800de8a <_dtoa_r+0x722>
 800dbf6:	4b6b      	ldr	r3, [pc, #428]	; (800dda4 <_dtoa_r+0x63c>)
 800dbf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dbfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f280 80dc 	bge.w	800ddc0 <_dtoa_r+0x658>
 800dc08:	9b04      	ldr	r3, [sp, #16]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	f300 80d8 	bgt.w	800ddc0 <_dtoa_r+0x658>
 800dc10:	f040 826f 	bne.w	800e0f2 <_dtoa_r+0x98a>
 800dc14:	4b68      	ldr	r3, [pc, #416]	; (800ddb8 <_dtoa_r+0x650>)
 800dc16:	2200      	movs	r2, #0
 800dc18:	4640      	mov	r0, r8
 800dc1a:	4649      	mov	r1, r9
 800dc1c:	f7f2 fcf4 	bl	8000608 <__aeabi_dmul>
 800dc20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc24:	f7f2 ff76 	bl	8000b14 <__aeabi_dcmpge>
 800dc28:	9e04      	ldr	r6, [sp, #16]
 800dc2a:	4637      	mov	r7, r6
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	f040 8245 	bne.w	800e0bc <_dtoa_r+0x954>
 800dc32:	9d00      	ldr	r5, [sp, #0]
 800dc34:	2331      	movs	r3, #49	; 0x31
 800dc36:	f805 3b01 	strb.w	r3, [r5], #1
 800dc3a:	f10b 0b01 	add.w	fp, fp, #1
 800dc3e:	e241      	b.n	800e0c4 <_dtoa_r+0x95c>
 800dc40:	07f2      	lsls	r2, r6, #31
 800dc42:	d505      	bpl.n	800dc50 <_dtoa_r+0x4e8>
 800dc44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc48:	f7f2 fcde 	bl	8000608 <__aeabi_dmul>
 800dc4c:	3501      	adds	r5, #1
 800dc4e:	2301      	movs	r3, #1
 800dc50:	1076      	asrs	r6, r6, #1
 800dc52:	3708      	adds	r7, #8
 800dc54:	e773      	b.n	800db3e <_dtoa_r+0x3d6>
 800dc56:	2502      	movs	r5, #2
 800dc58:	e775      	b.n	800db46 <_dtoa_r+0x3de>
 800dc5a:	9e04      	ldr	r6, [sp, #16]
 800dc5c:	465f      	mov	r7, fp
 800dc5e:	e792      	b.n	800db86 <_dtoa_r+0x41e>
 800dc60:	9900      	ldr	r1, [sp, #0]
 800dc62:	4b50      	ldr	r3, [pc, #320]	; (800dda4 <_dtoa_r+0x63c>)
 800dc64:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc68:	4431      	add	r1, r6
 800dc6a:	9102      	str	r1, [sp, #8]
 800dc6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc6e:	eeb0 9a47 	vmov.f32	s18, s14
 800dc72:	eef0 9a67 	vmov.f32	s19, s15
 800dc76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dc7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc7e:	2900      	cmp	r1, #0
 800dc80:	d044      	beq.n	800dd0c <_dtoa_r+0x5a4>
 800dc82:	494e      	ldr	r1, [pc, #312]	; (800ddbc <_dtoa_r+0x654>)
 800dc84:	2000      	movs	r0, #0
 800dc86:	f7f2 fde9 	bl	800085c <__aeabi_ddiv>
 800dc8a:	ec53 2b19 	vmov	r2, r3, d9
 800dc8e:	f7f2 fb03 	bl	8000298 <__aeabi_dsub>
 800dc92:	9d00      	ldr	r5, [sp, #0]
 800dc94:	ec41 0b19 	vmov	d9, r0, r1
 800dc98:	4649      	mov	r1, r9
 800dc9a:	4640      	mov	r0, r8
 800dc9c:	f7f2 ff64 	bl	8000b68 <__aeabi_d2iz>
 800dca0:	4606      	mov	r6, r0
 800dca2:	f7f2 fc47 	bl	8000534 <__aeabi_i2d>
 800dca6:	4602      	mov	r2, r0
 800dca8:	460b      	mov	r3, r1
 800dcaa:	4640      	mov	r0, r8
 800dcac:	4649      	mov	r1, r9
 800dcae:	f7f2 faf3 	bl	8000298 <__aeabi_dsub>
 800dcb2:	3630      	adds	r6, #48	; 0x30
 800dcb4:	f805 6b01 	strb.w	r6, [r5], #1
 800dcb8:	ec53 2b19 	vmov	r2, r3, d9
 800dcbc:	4680      	mov	r8, r0
 800dcbe:	4689      	mov	r9, r1
 800dcc0:	f7f2 ff14 	bl	8000aec <__aeabi_dcmplt>
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	d164      	bne.n	800dd92 <_dtoa_r+0x62a>
 800dcc8:	4642      	mov	r2, r8
 800dcca:	464b      	mov	r3, r9
 800dccc:	4937      	ldr	r1, [pc, #220]	; (800ddac <_dtoa_r+0x644>)
 800dcce:	2000      	movs	r0, #0
 800dcd0:	f7f2 fae2 	bl	8000298 <__aeabi_dsub>
 800dcd4:	ec53 2b19 	vmov	r2, r3, d9
 800dcd8:	f7f2 ff08 	bl	8000aec <__aeabi_dcmplt>
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	f040 80b6 	bne.w	800de4e <_dtoa_r+0x6e6>
 800dce2:	9b02      	ldr	r3, [sp, #8]
 800dce4:	429d      	cmp	r5, r3
 800dce6:	f43f af7c 	beq.w	800dbe2 <_dtoa_r+0x47a>
 800dcea:	4b31      	ldr	r3, [pc, #196]	; (800ddb0 <_dtoa_r+0x648>)
 800dcec:	ec51 0b19 	vmov	r0, r1, d9
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f7f2 fc89 	bl	8000608 <__aeabi_dmul>
 800dcf6:	4b2e      	ldr	r3, [pc, #184]	; (800ddb0 <_dtoa_r+0x648>)
 800dcf8:	ec41 0b19 	vmov	d9, r0, r1
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	4640      	mov	r0, r8
 800dd00:	4649      	mov	r1, r9
 800dd02:	f7f2 fc81 	bl	8000608 <__aeabi_dmul>
 800dd06:	4680      	mov	r8, r0
 800dd08:	4689      	mov	r9, r1
 800dd0a:	e7c5      	b.n	800dc98 <_dtoa_r+0x530>
 800dd0c:	ec51 0b17 	vmov	r0, r1, d7
 800dd10:	f7f2 fc7a 	bl	8000608 <__aeabi_dmul>
 800dd14:	9b02      	ldr	r3, [sp, #8]
 800dd16:	9d00      	ldr	r5, [sp, #0]
 800dd18:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd1a:	ec41 0b19 	vmov	d9, r0, r1
 800dd1e:	4649      	mov	r1, r9
 800dd20:	4640      	mov	r0, r8
 800dd22:	f7f2 ff21 	bl	8000b68 <__aeabi_d2iz>
 800dd26:	4606      	mov	r6, r0
 800dd28:	f7f2 fc04 	bl	8000534 <__aeabi_i2d>
 800dd2c:	3630      	adds	r6, #48	; 0x30
 800dd2e:	4602      	mov	r2, r0
 800dd30:	460b      	mov	r3, r1
 800dd32:	4640      	mov	r0, r8
 800dd34:	4649      	mov	r1, r9
 800dd36:	f7f2 faaf 	bl	8000298 <__aeabi_dsub>
 800dd3a:	f805 6b01 	strb.w	r6, [r5], #1
 800dd3e:	9b02      	ldr	r3, [sp, #8]
 800dd40:	429d      	cmp	r5, r3
 800dd42:	4680      	mov	r8, r0
 800dd44:	4689      	mov	r9, r1
 800dd46:	f04f 0200 	mov.w	r2, #0
 800dd4a:	d124      	bne.n	800dd96 <_dtoa_r+0x62e>
 800dd4c:	4b1b      	ldr	r3, [pc, #108]	; (800ddbc <_dtoa_r+0x654>)
 800dd4e:	ec51 0b19 	vmov	r0, r1, d9
 800dd52:	f7f2 faa3 	bl	800029c <__adddf3>
 800dd56:	4602      	mov	r2, r0
 800dd58:	460b      	mov	r3, r1
 800dd5a:	4640      	mov	r0, r8
 800dd5c:	4649      	mov	r1, r9
 800dd5e:	f7f2 fee3 	bl	8000b28 <__aeabi_dcmpgt>
 800dd62:	2800      	cmp	r0, #0
 800dd64:	d173      	bne.n	800de4e <_dtoa_r+0x6e6>
 800dd66:	ec53 2b19 	vmov	r2, r3, d9
 800dd6a:	4914      	ldr	r1, [pc, #80]	; (800ddbc <_dtoa_r+0x654>)
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	f7f2 fa93 	bl	8000298 <__aeabi_dsub>
 800dd72:	4602      	mov	r2, r0
 800dd74:	460b      	mov	r3, r1
 800dd76:	4640      	mov	r0, r8
 800dd78:	4649      	mov	r1, r9
 800dd7a:	f7f2 feb7 	bl	8000aec <__aeabi_dcmplt>
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	f43f af2f 	beq.w	800dbe2 <_dtoa_r+0x47a>
 800dd84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dd86:	1e6b      	subs	r3, r5, #1
 800dd88:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dd8e:	2b30      	cmp	r3, #48	; 0x30
 800dd90:	d0f8      	beq.n	800dd84 <_dtoa_r+0x61c>
 800dd92:	46bb      	mov	fp, r7
 800dd94:	e04a      	b.n	800de2c <_dtoa_r+0x6c4>
 800dd96:	4b06      	ldr	r3, [pc, #24]	; (800ddb0 <_dtoa_r+0x648>)
 800dd98:	f7f2 fc36 	bl	8000608 <__aeabi_dmul>
 800dd9c:	4680      	mov	r8, r0
 800dd9e:	4689      	mov	r9, r1
 800dda0:	e7bd      	b.n	800dd1e <_dtoa_r+0x5b6>
 800dda2:	bf00      	nop
 800dda4:	0800f920 	.word	0x0800f920
 800dda8:	0800f8f8 	.word	0x0800f8f8
 800ddac:	3ff00000 	.word	0x3ff00000
 800ddb0:	40240000 	.word	0x40240000
 800ddb4:	401c0000 	.word	0x401c0000
 800ddb8:	40140000 	.word	0x40140000
 800ddbc:	3fe00000 	.word	0x3fe00000
 800ddc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ddc4:	9d00      	ldr	r5, [sp, #0]
 800ddc6:	4642      	mov	r2, r8
 800ddc8:	464b      	mov	r3, r9
 800ddca:	4630      	mov	r0, r6
 800ddcc:	4639      	mov	r1, r7
 800ddce:	f7f2 fd45 	bl	800085c <__aeabi_ddiv>
 800ddd2:	f7f2 fec9 	bl	8000b68 <__aeabi_d2iz>
 800ddd6:	9001      	str	r0, [sp, #4]
 800ddd8:	f7f2 fbac 	bl	8000534 <__aeabi_i2d>
 800dddc:	4642      	mov	r2, r8
 800ddde:	464b      	mov	r3, r9
 800dde0:	f7f2 fc12 	bl	8000608 <__aeabi_dmul>
 800dde4:	4602      	mov	r2, r0
 800dde6:	460b      	mov	r3, r1
 800dde8:	4630      	mov	r0, r6
 800ddea:	4639      	mov	r1, r7
 800ddec:	f7f2 fa54 	bl	8000298 <__aeabi_dsub>
 800ddf0:	9e01      	ldr	r6, [sp, #4]
 800ddf2:	9f04      	ldr	r7, [sp, #16]
 800ddf4:	3630      	adds	r6, #48	; 0x30
 800ddf6:	f805 6b01 	strb.w	r6, [r5], #1
 800ddfa:	9e00      	ldr	r6, [sp, #0]
 800ddfc:	1bae      	subs	r6, r5, r6
 800ddfe:	42b7      	cmp	r7, r6
 800de00:	4602      	mov	r2, r0
 800de02:	460b      	mov	r3, r1
 800de04:	d134      	bne.n	800de70 <_dtoa_r+0x708>
 800de06:	f7f2 fa49 	bl	800029c <__adddf3>
 800de0a:	4642      	mov	r2, r8
 800de0c:	464b      	mov	r3, r9
 800de0e:	4606      	mov	r6, r0
 800de10:	460f      	mov	r7, r1
 800de12:	f7f2 fe89 	bl	8000b28 <__aeabi_dcmpgt>
 800de16:	b9c8      	cbnz	r0, 800de4c <_dtoa_r+0x6e4>
 800de18:	4642      	mov	r2, r8
 800de1a:	464b      	mov	r3, r9
 800de1c:	4630      	mov	r0, r6
 800de1e:	4639      	mov	r1, r7
 800de20:	f7f2 fe5a 	bl	8000ad8 <__aeabi_dcmpeq>
 800de24:	b110      	cbz	r0, 800de2c <_dtoa_r+0x6c4>
 800de26:	9b01      	ldr	r3, [sp, #4]
 800de28:	07db      	lsls	r3, r3, #31
 800de2a:	d40f      	bmi.n	800de4c <_dtoa_r+0x6e4>
 800de2c:	4651      	mov	r1, sl
 800de2e:	4620      	mov	r0, r4
 800de30:	f000 fbcc 	bl	800e5cc <_Bfree>
 800de34:	2300      	movs	r3, #0
 800de36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de38:	702b      	strb	r3, [r5, #0]
 800de3a:	f10b 0301 	add.w	r3, fp, #1
 800de3e:	6013      	str	r3, [r2, #0]
 800de40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de42:	2b00      	cmp	r3, #0
 800de44:	f43f ace2 	beq.w	800d80c <_dtoa_r+0xa4>
 800de48:	601d      	str	r5, [r3, #0]
 800de4a:	e4df      	b.n	800d80c <_dtoa_r+0xa4>
 800de4c:	465f      	mov	r7, fp
 800de4e:	462b      	mov	r3, r5
 800de50:	461d      	mov	r5, r3
 800de52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de56:	2a39      	cmp	r2, #57	; 0x39
 800de58:	d106      	bne.n	800de68 <_dtoa_r+0x700>
 800de5a:	9a00      	ldr	r2, [sp, #0]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d1f7      	bne.n	800de50 <_dtoa_r+0x6e8>
 800de60:	9900      	ldr	r1, [sp, #0]
 800de62:	2230      	movs	r2, #48	; 0x30
 800de64:	3701      	adds	r7, #1
 800de66:	700a      	strb	r2, [r1, #0]
 800de68:	781a      	ldrb	r2, [r3, #0]
 800de6a:	3201      	adds	r2, #1
 800de6c:	701a      	strb	r2, [r3, #0]
 800de6e:	e790      	b.n	800dd92 <_dtoa_r+0x62a>
 800de70:	4ba3      	ldr	r3, [pc, #652]	; (800e100 <_dtoa_r+0x998>)
 800de72:	2200      	movs	r2, #0
 800de74:	f7f2 fbc8 	bl	8000608 <__aeabi_dmul>
 800de78:	2200      	movs	r2, #0
 800de7a:	2300      	movs	r3, #0
 800de7c:	4606      	mov	r6, r0
 800de7e:	460f      	mov	r7, r1
 800de80:	f7f2 fe2a 	bl	8000ad8 <__aeabi_dcmpeq>
 800de84:	2800      	cmp	r0, #0
 800de86:	d09e      	beq.n	800ddc6 <_dtoa_r+0x65e>
 800de88:	e7d0      	b.n	800de2c <_dtoa_r+0x6c4>
 800de8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de8c:	2a00      	cmp	r2, #0
 800de8e:	f000 80ca 	beq.w	800e026 <_dtoa_r+0x8be>
 800de92:	9a07      	ldr	r2, [sp, #28]
 800de94:	2a01      	cmp	r2, #1
 800de96:	f300 80ad 	bgt.w	800dff4 <_dtoa_r+0x88c>
 800de9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de9c:	2a00      	cmp	r2, #0
 800de9e:	f000 80a5 	beq.w	800dfec <_dtoa_r+0x884>
 800dea2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dea6:	9e08      	ldr	r6, [sp, #32]
 800dea8:	9d05      	ldr	r5, [sp, #20]
 800deaa:	9a05      	ldr	r2, [sp, #20]
 800deac:	441a      	add	r2, r3
 800deae:	9205      	str	r2, [sp, #20]
 800deb0:	9a06      	ldr	r2, [sp, #24]
 800deb2:	2101      	movs	r1, #1
 800deb4:	441a      	add	r2, r3
 800deb6:	4620      	mov	r0, r4
 800deb8:	9206      	str	r2, [sp, #24]
 800deba:	f000 fc3d 	bl	800e738 <__i2b>
 800debe:	4607      	mov	r7, r0
 800dec0:	b165      	cbz	r5, 800dedc <_dtoa_r+0x774>
 800dec2:	9b06      	ldr	r3, [sp, #24]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	dd09      	ble.n	800dedc <_dtoa_r+0x774>
 800dec8:	42ab      	cmp	r3, r5
 800deca:	9a05      	ldr	r2, [sp, #20]
 800decc:	bfa8      	it	ge
 800dece:	462b      	movge	r3, r5
 800ded0:	1ad2      	subs	r2, r2, r3
 800ded2:	9205      	str	r2, [sp, #20]
 800ded4:	9a06      	ldr	r2, [sp, #24]
 800ded6:	1aed      	subs	r5, r5, r3
 800ded8:	1ad3      	subs	r3, r2, r3
 800deda:	9306      	str	r3, [sp, #24]
 800dedc:	9b08      	ldr	r3, [sp, #32]
 800dede:	b1f3      	cbz	r3, 800df1e <_dtoa_r+0x7b6>
 800dee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	f000 80a3 	beq.w	800e02e <_dtoa_r+0x8c6>
 800dee8:	2e00      	cmp	r6, #0
 800deea:	dd10      	ble.n	800df0e <_dtoa_r+0x7a6>
 800deec:	4639      	mov	r1, r7
 800deee:	4632      	mov	r2, r6
 800def0:	4620      	mov	r0, r4
 800def2:	f000 fce1 	bl	800e8b8 <__pow5mult>
 800def6:	4652      	mov	r2, sl
 800def8:	4601      	mov	r1, r0
 800defa:	4607      	mov	r7, r0
 800defc:	4620      	mov	r0, r4
 800defe:	f000 fc31 	bl	800e764 <__multiply>
 800df02:	4651      	mov	r1, sl
 800df04:	4680      	mov	r8, r0
 800df06:	4620      	mov	r0, r4
 800df08:	f000 fb60 	bl	800e5cc <_Bfree>
 800df0c:	46c2      	mov	sl, r8
 800df0e:	9b08      	ldr	r3, [sp, #32]
 800df10:	1b9a      	subs	r2, r3, r6
 800df12:	d004      	beq.n	800df1e <_dtoa_r+0x7b6>
 800df14:	4651      	mov	r1, sl
 800df16:	4620      	mov	r0, r4
 800df18:	f000 fcce 	bl	800e8b8 <__pow5mult>
 800df1c:	4682      	mov	sl, r0
 800df1e:	2101      	movs	r1, #1
 800df20:	4620      	mov	r0, r4
 800df22:	f000 fc09 	bl	800e738 <__i2b>
 800df26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df28:	2b00      	cmp	r3, #0
 800df2a:	4606      	mov	r6, r0
 800df2c:	f340 8081 	ble.w	800e032 <_dtoa_r+0x8ca>
 800df30:	461a      	mov	r2, r3
 800df32:	4601      	mov	r1, r0
 800df34:	4620      	mov	r0, r4
 800df36:	f000 fcbf 	bl	800e8b8 <__pow5mult>
 800df3a:	9b07      	ldr	r3, [sp, #28]
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	4606      	mov	r6, r0
 800df40:	dd7a      	ble.n	800e038 <_dtoa_r+0x8d0>
 800df42:	f04f 0800 	mov.w	r8, #0
 800df46:	6933      	ldr	r3, [r6, #16]
 800df48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800df4c:	6918      	ldr	r0, [r3, #16]
 800df4e:	f000 fba5 	bl	800e69c <__hi0bits>
 800df52:	f1c0 0020 	rsb	r0, r0, #32
 800df56:	9b06      	ldr	r3, [sp, #24]
 800df58:	4418      	add	r0, r3
 800df5a:	f010 001f 	ands.w	r0, r0, #31
 800df5e:	f000 8094 	beq.w	800e08a <_dtoa_r+0x922>
 800df62:	f1c0 0320 	rsb	r3, r0, #32
 800df66:	2b04      	cmp	r3, #4
 800df68:	f340 8085 	ble.w	800e076 <_dtoa_r+0x90e>
 800df6c:	9b05      	ldr	r3, [sp, #20]
 800df6e:	f1c0 001c 	rsb	r0, r0, #28
 800df72:	4403      	add	r3, r0
 800df74:	9305      	str	r3, [sp, #20]
 800df76:	9b06      	ldr	r3, [sp, #24]
 800df78:	4403      	add	r3, r0
 800df7a:	4405      	add	r5, r0
 800df7c:	9306      	str	r3, [sp, #24]
 800df7e:	9b05      	ldr	r3, [sp, #20]
 800df80:	2b00      	cmp	r3, #0
 800df82:	dd05      	ble.n	800df90 <_dtoa_r+0x828>
 800df84:	4651      	mov	r1, sl
 800df86:	461a      	mov	r2, r3
 800df88:	4620      	mov	r0, r4
 800df8a:	f000 fcef 	bl	800e96c <__lshift>
 800df8e:	4682      	mov	sl, r0
 800df90:	9b06      	ldr	r3, [sp, #24]
 800df92:	2b00      	cmp	r3, #0
 800df94:	dd05      	ble.n	800dfa2 <_dtoa_r+0x83a>
 800df96:	4631      	mov	r1, r6
 800df98:	461a      	mov	r2, r3
 800df9a:	4620      	mov	r0, r4
 800df9c:	f000 fce6 	bl	800e96c <__lshift>
 800dfa0:	4606      	mov	r6, r0
 800dfa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d072      	beq.n	800e08e <_dtoa_r+0x926>
 800dfa8:	4631      	mov	r1, r6
 800dfaa:	4650      	mov	r0, sl
 800dfac:	f000 fd4a 	bl	800ea44 <__mcmp>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	da6c      	bge.n	800e08e <_dtoa_r+0x926>
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	4651      	mov	r1, sl
 800dfb8:	220a      	movs	r2, #10
 800dfba:	4620      	mov	r0, r4
 800dfbc:	f000 fb28 	bl	800e610 <__multadd>
 800dfc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dfc6:	4682      	mov	sl, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	f000 81b0 	beq.w	800e32e <_dtoa_r+0xbc6>
 800dfce:	2300      	movs	r3, #0
 800dfd0:	4639      	mov	r1, r7
 800dfd2:	220a      	movs	r2, #10
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f000 fb1b 	bl	800e610 <__multadd>
 800dfda:	9b01      	ldr	r3, [sp, #4]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	4607      	mov	r7, r0
 800dfe0:	f300 8096 	bgt.w	800e110 <_dtoa_r+0x9a8>
 800dfe4:	9b07      	ldr	r3, [sp, #28]
 800dfe6:	2b02      	cmp	r3, #2
 800dfe8:	dc59      	bgt.n	800e09e <_dtoa_r+0x936>
 800dfea:	e091      	b.n	800e110 <_dtoa_r+0x9a8>
 800dfec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dff2:	e758      	b.n	800dea6 <_dtoa_r+0x73e>
 800dff4:	9b04      	ldr	r3, [sp, #16]
 800dff6:	1e5e      	subs	r6, r3, #1
 800dff8:	9b08      	ldr	r3, [sp, #32]
 800dffa:	42b3      	cmp	r3, r6
 800dffc:	bfbf      	itttt	lt
 800dffe:	9b08      	ldrlt	r3, [sp, #32]
 800e000:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e002:	9608      	strlt	r6, [sp, #32]
 800e004:	1af3      	sublt	r3, r6, r3
 800e006:	bfb4      	ite	lt
 800e008:	18d2      	addlt	r2, r2, r3
 800e00a:	1b9e      	subge	r6, r3, r6
 800e00c:	9b04      	ldr	r3, [sp, #16]
 800e00e:	bfbc      	itt	lt
 800e010:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e012:	2600      	movlt	r6, #0
 800e014:	2b00      	cmp	r3, #0
 800e016:	bfb7      	itett	lt
 800e018:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e01c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e020:	1a9d      	sublt	r5, r3, r2
 800e022:	2300      	movlt	r3, #0
 800e024:	e741      	b.n	800deaa <_dtoa_r+0x742>
 800e026:	9e08      	ldr	r6, [sp, #32]
 800e028:	9d05      	ldr	r5, [sp, #20]
 800e02a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e02c:	e748      	b.n	800dec0 <_dtoa_r+0x758>
 800e02e:	9a08      	ldr	r2, [sp, #32]
 800e030:	e770      	b.n	800df14 <_dtoa_r+0x7ac>
 800e032:	9b07      	ldr	r3, [sp, #28]
 800e034:	2b01      	cmp	r3, #1
 800e036:	dc19      	bgt.n	800e06c <_dtoa_r+0x904>
 800e038:	9b02      	ldr	r3, [sp, #8]
 800e03a:	b9bb      	cbnz	r3, 800e06c <_dtoa_r+0x904>
 800e03c:	9b03      	ldr	r3, [sp, #12]
 800e03e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e042:	b99b      	cbnz	r3, 800e06c <_dtoa_r+0x904>
 800e044:	9b03      	ldr	r3, [sp, #12]
 800e046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e04a:	0d1b      	lsrs	r3, r3, #20
 800e04c:	051b      	lsls	r3, r3, #20
 800e04e:	b183      	cbz	r3, 800e072 <_dtoa_r+0x90a>
 800e050:	9b05      	ldr	r3, [sp, #20]
 800e052:	3301      	adds	r3, #1
 800e054:	9305      	str	r3, [sp, #20]
 800e056:	9b06      	ldr	r3, [sp, #24]
 800e058:	3301      	adds	r3, #1
 800e05a:	9306      	str	r3, [sp, #24]
 800e05c:	f04f 0801 	mov.w	r8, #1
 800e060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e062:	2b00      	cmp	r3, #0
 800e064:	f47f af6f 	bne.w	800df46 <_dtoa_r+0x7de>
 800e068:	2001      	movs	r0, #1
 800e06a:	e774      	b.n	800df56 <_dtoa_r+0x7ee>
 800e06c:	f04f 0800 	mov.w	r8, #0
 800e070:	e7f6      	b.n	800e060 <_dtoa_r+0x8f8>
 800e072:	4698      	mov	r8, r3
 800e074:	e7f4      	b.n	800e060 <_dtoa_r+0x8f8>
 800e076:	d082      	beq.n	800df7e <_dtoa_r+0x816>
 800e078:	9a05      	ldr	r2, [sp, #20]
 800e07a:	331c      	adds	r3, #28
 800e07c:	441a      	add	r2, r3
 800e07e:	9205      	str	r2, [sp, #20]
 800e080:	9a06      	ldr	r2, [sp, #24]
 800e082:	441a      	add	r2, r3
 800e084:	441d      	add	r5, r3
 800e086:	9206      	str	r2, [sp, #24]
 800e088:	e779      	b.n	800df7e <_dtoa_r+0x816>
 800e08a:	4603      	mov	r3, r0
 800e08c:	e7f4      	b.n	800e078 <_dtoa_r+0x910>
 800e08e:	9b04      	ldr	r3, [sp, #16]
 800e090:	2b00      	cmp	r3, #0
 800e092:	dc37      	bgt.n	800e104 <_dtoa_r+0x99c>
 800e094:	9b07      	ldr	r3, [sp, #28]
 800e096:	2b02      	cmp	r3, #2
 800e098:	dd34      	ble.n	800e104 <_dtoa_r+0x99c>
 800e09a:	9b04      	ldr	r3, [sp, #16]
 800e09c:	9301      	str	r3, [sp, #4]
 800e09e:	9b01      	ldr	r3, [sp, #4]
 800e0a0:	b963      	cbnz	r3, 800e0bc <_dtoa_r+0x954>
 800e0a2:	4631      	mov	r1, r6
 800e0a4:	2205      	movs	r2, #5
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	f000 fab2 	bl	800e610 <__multadd>
 800e0ac:	4601      	mov	r1, r0
 800e0ae:	4606      	mov	r6, r0
 800e0b0:	4650      	mov	r0, sl
 800e0b2:	f000 fcc7 	bl	800ea44 <__mcmp>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	f73f adbb 	bgt.w	800dc32 <_dtoa_r+0x4ca>
 800e0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0be:	9d00      	ldr	r5, [sp, #0]
 800e0c0:	ea6f 0b03 	mvn.w	fp, r3
 800e0c4:	f04f 0800 	mov.w	r8, #0
 800e0c8:	4631      	mov	r1, r6
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f000 fa7e 	bl	800e5cc <_Bfree>
 800e0d0:	2f00      	cmp	r7, #0
 800e0d2:	f43f aeab 	beq.w	800de2c <_dtoa_r+0x6c4>
 800e0d6:	f1b8 0f00 	cmp.w	r8, #0
 800e0da:	d005      	beq.n	800e0e8 <_dtoa_r+0x980>
 800e0dc:	45b8      	cmp	r8, r7
 800e0de:	d003      	beq.n	800e0e8 <_dtoa_r+0x980>
 800e0e0:	4641      	mov	r1, r8
 800e0e2:	4620      	mov	r0, r4
 800e0e4:	f000 fa72 	bl	800e5cc <_Bfree>
 800e0e8:	4639      	mov	r1, r7
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f000 fa6e 	bl	800e5cc <_Bfree>
 800e0f0:	e69c      	b.n	800de2c <_dtoa_r+0x6c4>
 800e0f2:	2600      	movs	r6, #0
 800e0f4:	4637      	mov	r7, r6
 800e0f6:	e7e1      	b.n	800e0bc <_dtoa_r+0x954>
 800e0f8:	46bb      	mov	fp, r7
 800e0fa:	4637      	mov	r7, r6
 800e0fc:	e599      	b.n	800dc32 <_dtoa_r+0x4ca>
 800e0fe:	bf00      	nop
 800e100:	40240000 	.word	0x40240000
 800e104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e106:	2b00      	cmp	r3, #0
 800e108:	f000 80c8 	beq.w	800e29c <_dtoa_r+0xb34>
 800e10c:	9b04      	ldr	r3, [sp, #16]
 800e10e:	9301      	str	r3, [sp, #4]
 800e110:	2d00      	cmp	r5, #0
 800e112:	dd05      	ble.n	800e120 <_dtoa_r+0x9b8>
 800e114:	4639      	mov	r1, r7
 800e116:	462a      	mov	r2, r5
 800e118:	4620      	mov	r0, r4
 800e11a:	f000 fc27 	bl	800e96c <__lshift>
 800e11e:	4607      	mov	r7, r0
 800e120:	f1b8 0f00 	cmp.w	r8, #0
 800e124:	d05b      	beq.n	800e1de <_dtoa_r+0xa76>
 800e126:	6879      	ldr	r1, [r7, #4]
 800e128:	4620      	mov	r0, r4
 800e12a:	f000 fa0f 	bl	800e54c <_Balloc>
 800e12e:	4605      	mov	r5, r0
 800e130:	b928      	cbnz	r0, 800e13e <_dtoa_r+0x9d6>
 800e132:	4b83      	ldr	r3, [pc, #524]	; (800e340 <_dtoa_r+0xbd8>)
 800e134:	4602      	mov	r2, r0
 800e136:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e13a:	f7ff bb2e 	b.w	800d79a <_dtoa_r+0x32>
 800e13e:	693a      	ldr	r2, [r7, #16]
 800e140:	3202      	adds	r2, #2
 800e142:	0092      	lsls	r2, r2, #2
 800e144:	f107 010c 	add.w	r1, r7, #12
 800e148:	300c      	adds	r0, #12
 800e14a:	f000 ffab 	bl	800f0a4 <memcpy>
 800e14e:	2201      	movs	r2, #1
 800e150:	4629      	mov	r1, r5
 800e152:	4620      	mov	r0, r4
 800e154:	f000 fc0a 	bl	800e96c <__lshift>
 800e158:	9b00      	ldr	r3, [sp, #0]
 800e15a:	3301      	adds	r3, #1
 800e15c:	9304      	str	r3, [sp, #16]
 800e15e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e162:	4413      	add	r3, r2
 800e164:	9308      	str	r3, [sp, #32]
 800e166:	9b02      	ldr	r3, [sp, #8]
 800e168:	f003 0301 	and.w	r3, r3, #1
 800e16c:	46b8      	mov	r8, r7
 800e16e:	9306      	str	r3, [sp, #24]
 800e170:	4607      	mov	r7, r0
 800e172:	9b04      	ldr	r3, [sp, #16]
 800e174:	4631      	mov	r1, r6
 800e176:	3b01      	subs	r3, #1
 800e178:	4650      	mov	r0, sl
 800e17a:	9301      	str	r3, [sp, #4]
 800e17c:	f7ff fa69 	bl	800d652 <quorem>
 800e180:	4641      	mov	r1, r8
 800e182:	9002      	str	r0, [sp, #8]
 800e184:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e188:	4650      	mov	r0, sl
 800e18a:	f000 fc5b 	bl	800ea44 <__mcmp>
 800e18e:	463a      	mov	r2, r7
 800e190:	9005      	str	r0, [sp, #20]
 800e192:	4631      	mov	r1, r6
 800e194:	4620      	mov	r0, r4
 800e196:	f000 fc71 	bl	800ea7c <__mdiff>
 800e19a:	68c2      	ldr	r2, [r0, #12]
 800e19c:	4605      	mov	r5, r0
 800e19e:	bb02      	cbnz	r2, 800e1e2 <_dtoa_r+0xa7a>
 800e1a0:	4601      	mov	r1, r0
 800e1a2:	4650      	mov	r0, sl
 800e1a4:	f000 fc4e 	bl	800ea44 <__mcmp>
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	4629      	mov	r1, r5
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	9209      	str	r2, [sp, #36]	; 0x24
 800e1b0:	f000 fa0c 	bl	800e5cc <_Bfree>
 800e1b4:	9b07      	ldr	r3, [sp, #28]
 800e1b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1b8:	9d04      	ldr	r5, [sp, #16]
 800e1ba:	ea43 0102 	orr.w	r1, r3, r2
 800e1be:	9b06      	ldr	r3, [sp, #24]
 800e1c0:	4319      	orrs	r1, r3
 800e1c2:	d110      	bne.n	800e1e6 <_dtoa_r+0xa7e>
 800e1c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e1c8:	d029      	beq.n	800e21e <_dtoa_r+0xab6>
 800e1ca:	9b05      	ldr	r3, [sp, #20]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	dd02      	ble.n	800e1d6 <_dtoa_r+0xa6e>
 800e1d0:	9b02      	ldr	r3, [sp, #8]
 800e1d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e1d6:	9b01      	ldr	r3, [sp, #4]
 800e1d8:	f883 9000 	strb.w	r9, [r3]
 800e1dc:	e774      	b.n	800e0c8 <_dtoa_r+0x960>
 800e1de:	4638      	mov	r0, r7
 800e1e0:	e7ba      	b.n	800e158 <_dtoa_r+0x9f0>
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	e7e1      	b.n	800e1aa <_dtoa_r+0xa42>
 800e1e6:	9b05      	ldr	r3, [sp, #20]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	db04      	blt.n	800e1f6 <_dtoa_r+0xa8e>
 800e1ec:	9907      	ldr	r1, [sp, #28]
 800e1ee:	430b      	orrs	r3, r1
 800e1f0:	9906      	ldr	r1, [sp, #24]
 800e1f2:	430b      	orrs	r3, r1
 800e1f4:	d120      	bne.n	800e238 <_dtoa_r+0xad0>
 800e1f6:	2a00      	cmp	r2, #0
 800e1f8:	dded      	ble.n	800e1d6 <_dtoa_r+0xa6e>
 800e1fa:	4651      	mov	r1, sl
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	4620      	mov	r0, r4
 800e200:	f000 fbb4 	bl	800e96c <__lshift>
 800e204:	4631      	mov	r1, r6
 800e206:	4682      	mov	sl, r0
 800e208:	f000 fc1c 	bl	800ea44 <__mcmp>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	dc03      	bgt.n	800e218 <_dtoa_r+0xab0>
 800e210:	d1e1      	bne.n	800e1d6 <_dtoa_r+0xa6e>
 800e212:	f019 0f01 	tst.w	r9, #1
 800e216:	d0de      	beq.n	800e1d6 <_dtoa_r+0xa6e>
 800e218:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e21c:	d1d8      	bne.n	800e1d0 <_dtoa_r+0xa68>
 800e21e:	9a01      	ldr	r2, [sp, #4]
 800e220:	2339      	movs	r3, #57	; 0x39
 800e222:	7013      	strb	r3, [r2, #0]
 800e224:	462b      	mov	r3, r5
 800e226:	461d      	mov	r5, r3
 800e228:	3b01      	subs	r3, #1
 800e22a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e22e:	2a39      	cmp	r2, #57	; 0x39
 800e230:	d06c      	beq.n	800e30c <_dtoa_r+0xba4>
 800e232:	3201      	adds	r2, #1
 800e234:	701a      	strb	r2, [r3, #0]
 800e236:	e747      	b.n	800e0c8 <_dtoa_r+0x960>
 800e238:	2a00      	cmp	r2, #0
 800e23a:	dd07      	ble.n	800e24c <_dtoa_r+0xae4>
 800e23c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e240:	d0ed      	beq.n	800e21e <_dtoa_r+0xab6>
 800e242:	9a01      	ldr	r2, [sp, #4]
 800e244:	f109 0301 	add.w	r3, r9, #1
 800e248:	7013      	strb	r3, [r2, #0]
 800e24a:	e73d      	b.n	800e0c8 <_dtoa_r+0x960>
 800e24c:	9b04      	ldr	r3, [sp, #16]
 800e24e:	9a08      	ldr	r2, [sp, #32]
 800e250:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e254:	4293      	cmp	r3, r2
 800e256:	d043      	beq.n	800e2e0 <_dtoa_r+0xb78>
 800e258:	4651      	mov	r1, sl
 800e25a:	2300      	movs	r3, #0
 800e25c:	220a      	movs	r2, #10
 800e25e:	4620      	mov	r0, r4
 800e260:	f000 f9d6 	bl	800e610 <__multadd>
 800e264:	45b8      	cmp	r8, r7
 800e266:	4682      	mov	sl, r0
 800e268:	f04f 0300 	mov.w	r3, #0
 800e26c:	f04f 020a 	mov.w	r2, #10
 800e270:	4641      	mov	r1, r8
 800e272:	4620      	mov	r0, r4
 800e274:	d107      	bne.n	800e286 <_dtoa_r+0xb1e>
 800e276:	f000 f9cb 	bl	800e610 <__multadd>
 800e27a:	4680      	mov	r8, r0
 800e27c:	4607      	mov	r7, r0
 800e27e:	9b04      	ldr	r3, [sp, #16]
 800e280:	3301      	adds	r3, #1
 800e282:	9304      	str	r3, [sp, #16]
 800e284:	e775      	b.n	800e172 <_dtoa_r+0xa0a>
 800e286:	f000 f9c3 	bl	800e610 <__multadd>
 800e28a:	4639      	mov	r1, r7
 800e28c:	4680      	mov	r8, r0
 800e28e:	2300      	movs	r3, #0
 800e290:	220a      	movs	r2, #10
 800e292:	4620      	mov	r0, r4
 800e294:	f000 f9bc 	bl	800e610 <__multadd>
 800e298:	4607      	mov	r7, r0
 800e29a:	e7f0      	b.n	800e27e <_dtoa_r+0xb16>
 800e29c:	9b04      	ldr	r3, [sp, #16]
 800e29e:	9301      	str	r3, [sp, #4]
 800e2a0:	9d00      	ldr	r5, [sp, #0]
 800e2a2:	4631      	mov	r1, r6
 800e2a4:	4650      	mov	r0, sl
 800e2a6:	f7ff f9d4 	bl	800d652 <quorem>
 800e2aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e2ae:	9b00      	ldr	r3, [sp, #0]
 800e2b0:	f805 9b01 	strb.w	r9, [r5], #1
 800e2b4:	1aea      	subs	r2, r5, r3
 800e2b6:	9b01      	ldr	r3, [sp, #4]
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	dd07      	ble.n	800e2cc <_dtoa_r+0xb64>
 800e2bc:	4651      	mov	r1, sl
 800e2be:	2300      	movs	r3, #0
 800e2c0:	220a      	movs	r2, #10
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f000 f9a4 	bl	800e610 <__multadd>
 800e2c8:	4682      	mov	sl, r0
 800e2ca:	e7ea      	b.n	800e2a2 <_dtoa_r+0xb3a>
 800e2cc:	9b01      	ldr	r3, [sp, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	bfc8      	it	gt
 800e2d2:	461d      	movgt	r5, r3
 800e2d4:	9b00      	ldr	r3, [sp, #0]
 800e2d6:	bfd8      	it	le
 800e2d8:	2501      	movle	r5, #1
 800e2da:	441d      	add	r5, r3
 800e2dc:	f04f 0800 	mov.w	r8, #0
 800e2e0:	4651      	mov	r1, sl
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	f000 fb41 	bl	800e96c <__lshift>
 800e2ea:	4631      	mov	r1, r6
 800e2ec:	4682      	mov	sl, r0
 800e2ee:	f000 fba9 	bl	800ea44 <__mcmp>
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	dc96      	bgt.n	800e224 <_dtoa_r+0xabc>
 800e2f6:	d102      	bne.n	800e2fe <_dtoa_r+0xb96>
 800e2f8:	f019 0f01 	tst.w	r9, #1
 800e2fc:	d192      	bne.n	800e224 <_dtoa_r+0xabc>
 800e2fe:	462b      	mov	r3, r5
 800e300:	461d      	mov	r5, r3
 800e302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e306:	2a30      	cmp	r2, #48	; 0x30
 800e308:	d0fa      	beq.n	800e300 <_dtoa_r+0xb98>
 800e30a:	e6dd      	b.n	800e0c8 <_dtoa_r+0x960>
 800e30c:	9a00      	ldr	r2, [sp, #0]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d189      	bne.n	800e226 <_dtoa_r+0xabe>
 800e312:	f10b 0b01 	add.w	fp, fp, #1
 800e316:	2331      	movs	r3, #49	; 0x31
 800e318:	e796      	b.n	800e248 <_dtoa_r+0xae0>
 800e31a:	4b0a      	ldr	r3, [pc, #40]	; (800e344 <_dtoa_r+0xbdc>)
 800e31c:	f7ff ba99 	b.w	800d852 <_dtoa_r+0xea>
 800e320:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e322:	2b00      	cmp	r3, #0
 800e324:	f47f aa6d 	bne.w	800d802 <_dtoa_r+0x9a>
 800e328:	4b07      	ldr	r3, [pc, #28]	; (800e348 <_dtoa_r+0xbe0>)
 800e32a:	f7ff ba92 	b.w	800d852 <_dtoa_r+0xea>
 800e32e:	9b01      	ldr	r3, [sp, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	dcb5      	bgt.n	800e2a0 <_dtoa_r+0xb38>
 800e334:	9b07      	ldr	r3, [sp, #28]
 800e336:	2b02      	cmp	r3, #2
 800e338:	f73f aeb1 	bgt.w	800e09e <_dtoa_r+0x936>
 800e33c:	e7b0      	b.n	800e2a0 <_dtoa_r+0xb38>
 800e33e:	bf00      	nop
 800e340:	0800f888 	.word	0x0800f888
 800e344:	0800f7e8 	.word	0x0800f7e8
 800e348:	0800f80c 	.word	0x0800f80c

0800e34c <_free_r>:
 800e34c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e34e:	2900      	cmp	r1, #0
 800e350:	d044      	beq.n	800e3dc <_free_r+0x90>
 800e352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e356:	9001      	str	r0, [sp, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	f1a1 0404 	sub.w	r4, r1, #4
 800e35e:	bfb8      	it	lt
 800e360:	18e4      	addlt	r4, r4, r3
 800e362:	f000 f8e7 	bl	800e534 <__malloc_lock>
 800e366:	4a1e      	ldr	r2, [pc, #120]	; (800e3e0 <_free_r+0x94>)
 800e368:	9801      	ldr	r0, [sp, #4]
 800e36a:	6813      	ldr	r3, [r2, #0]
 800e36c:	b933      	cbnz	r3, 800e37c <_free_r+0x30>
 800e36e:	6063      	str	r3, [r4, #4]
 800e370:	6014      	str	r4, [r2, #0]
 800e372:	b003      	add	sp, #12
 800e374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e378:	f000 b8e2 	b.w	800e540 <__malloc_unlock>
 800e37c:	42a3      	cmp	r3, r4
 800e37e:	d908      	bls.n	800e392 <_free_r+0x46>
 800e380:	6825      	ldr	r5, [r4, #0]
 800e382:	1961      	adds	r1, r4, r5
 800e384:	428b      	cmp	r3, r1
 800e386:	bf01      	itttt	eq
 800e388:	6819      	ldreq	r1, [r3, #0]
 800e38a:	685b      	ldreq	r3, [r3, #4]
 800e38c:	1949      	addeq	r1, r1, r5
 800e38e:	6021      	streq	r1, [r4, #0]
 800e390:	e7ed      	b.n	800e36e <_free_r+0x22>
 800e392:	461a      	mov	r2, r3
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	b10b      	cbz	r3, 800e39c <_free_r+0x50>
 800e398:	42a3      	cmp	r3, r4
 800e39a:	d9fa      	bls.n	800e392 <_free_r+0x46>
 800e39c:	6811      	ldr	r1, [r2, #0]
 800e39e:	1855      	adds	r5, r2, r1
 800e3a0:	42a5      	cmp	r5, r4
 800e3a2:	d10b      	bne.n	800e3bc <_free_r+0x70>
 800e3a4:	6824      	ldr	r4, [r4, #0]
 800e3a6:	4421      	add	r1, r4
 800e3a8:	1854      	adds	r4, r2, r1
 800e3aa:	42a3      	cmp	r3, r4
 800e3ac:	6011      	str	r1, [r2, #0]
 800e3ae:	d1e0      	bne.n	800e372 <_free_r+0x26>
 800e3b0:	681c      	ldr	r4, [r3, #0]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	6053      	str	r3, [r2, #4]
 800e3b6:	440c      	add	r4, r1
 800e3b8:	6014      	str	r4, [r2, #0]
 800e3ba:	e7da      	b.n	800e372 <_free_r+0x26>
 800e3bc:	d902      	bls.n	800e3c4 <_free_r+0x78>
 800e3be:	230c      	movs	r3, #12
 800e3c0:	6003      	str	r3, [r0, #0]
 800e3c2:	e7d6      	b.n	800e372 <_free_r+0x26>
 800e3c4:	6825      	ldr	r5, [r4, #0]
 800e3c6:	1961      	adds	r1, r4, r5
 800e3c8:	428b      	cmp	r3, r1
 800e3ca:	bf04      	itt	eq
 800e3cc:	6819      	ldreq	r1, [r3, #0]
 800e3ce:	685b      	ldreq	r3, [r3, #4]
 800e3d0:	6063      	str	r3, [r4, #4]
 800e3d2:	bf04      	itt	eq
 800e3d4:	1949      	addeq	r1, r1, r5
 800e3d6:	6021      	streq	r1, [r4, #0]
 800e3d8:	6054      	str	r4, [r2, #4]
 800e3da:	e7ca      	b.n	800e372 <_free_r+0x26>
 800e3dc:	b003      	add	sp, #12
 800e3de:	bd30      	pop	{r4, r5, pc}
 800e3e0:	20002318 	.word	0x20002318

0800e3e4 <malloc>:
 800e3e4:	4b02      	ldr	r3, [pc, #8]	; (800e3f0 <malloc+0xc>)
 800e3e6:	4601      	mov	r1, r0
 800e3e8:	6818      	ldr	r0, [r3, #0]
 800e3ea:	f000 b823 	b.w	800e434 <_malloc_r>
 800e3ee:	bf00      	nop
 800e3f0:	2000017c 	.word	0x2000017c

0800e3f4 <sbrk_aligned>:
 800e3f4:	b570      	push	{r4, r5, r6, lr}
 800e3f6:	4e0e      	ldr	r6, [pc, #56]	; (800e430 <sbrk_aligned+0x3c>)
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	6831      	ldr	r1, [r6, #0]
 800e3fc:	4605      	mov	r5, r0
 800e3fe:	b911      	cbnz	r1, 800e406 <sbrk_aligned+0x12>
 800e400:	f000 fe40 	bl	800f084 <_sbrk_r>
 800e404:	6030      	str	r0, [r6, #0]
 800e406:	4621      	mov	r1, r4
 800e408:	4628      	mov	r0, r5
 800e40a:	f000 fe3b 	bl	800f084 <_sbrk_r>
 800e40e:	1c43      	adds	r3, r0, #1
 800e410:	d00a      	beq.n	800e428 <sbrk_aligned+0x34>
 800e412:	1cc4      	adds	r4, r0, #3
 800e414:	f024 0403 	bic.w	r4, r4, #3
 800e418:	42a0      	cmp	r0, r4
 800e41a:	d007      	beq.n	800e42c <sbrk_aligned+0x38>
 800e41c:	1a21      	subs	r1, r4, r0
 800e41e:	4628      	mov	r0, r5
 800e420:	f000 fe30 	bl	800f084 <_sbrk_r>
 800e424:	3001      	adds	r0, #1
 800e426:	d101      	bne.n	800e42c <sbrk_aligned+0x38>
 800e428:	f04f 34ff 	mov.w	r4, #4294967295
 800e42c:	4620      	mov	r0, r4
 800e42e:	bd70      	pop	{r4, r5, r6, pc}
 800e430:	2000231c 	.word	0x2000231c

0800e434 <_malloc_r>:
 800e434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e438:	1ccd      	adds	r5, r1, #3
 800e43a:	f025 0503 	bic.w	r5, r5, #3
 800e43e:	3508      	adds	r5, #8
 800e440:	2d0c      	cmp	r5, #12
 800e442:	bf38      	it	cc
 800e444:	250c      	movcc	r5, #12
 800e446:	2d00      	cmp	r5, #0
 800e448:	4607      	mov	r7, r0
 800e44a:	db01      	blt.n	800e450 <_malloc_r+0x1c>
 800e44c:	42a9      	cmp	r1, r5
 800e44e:	d905      	bls.n	800e45c <_malloc_r+0x28>
 800e450:	230c      	movs	r3, #12
 800e452:	603b      	str	r3, [r7, #0]
 800e454:	2600      	movs	r6, #0
 800e456:	4630      	mov	r0, r6
 800e458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e45c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e530 <_malloc_r+0xfc>
 800e460:	f000 f868 	bl	800e534 <__malloc_lock>
 800e464:	f8d8 3000 	ldr.w	r3, [r8]
 800e468:	461c      	mov	r4, r3
 800e46a:	bb5c      	cbnz	r4, 800e4c4 <_malloc_r+0x90>
 800e46c:	4629      	mov	r1, r5
 800e46e:	4638      	mov	r0, r7
 800e470:	f7ff ffc0 	bl	800e3f4 <sbrk_aligned>
 800e474:	1c43      	adds	r3, r0, #1
 800e476:	4604      	mov	r4, r0
 800e478:	d155      	bne.n	800e526 <_malloc_r+0xf2>
 800e47a:	f8d8 4000 	ldr.w	r4, [r8]
 800e47e:	4626      	mov	r6, r4
 800e480:	2e00      	cmp	r6, #0
 800e482:	d145      	bne.n	800e510 <_malloc_r+0xdc>
 800e484:	2c00      	cmp	r4, #0
 800e486:	d048      	beq.n	800e51a <_malloc_r+0xe6>
 800e488:	6823      	ldr	r3, [r4, #0]
 800e48a:	4631      	mov	r1, r6
 800e48c:	4638      	mov	r0, r7
 800e48e:	eb04 0903 	add.w	r9, r4, r3
 800e492:	f000 fdf7 	bl	800f084 <_sbrk_r>
 800e496:	4581      	cmp	r9, r0
 800e498:	d13f      	bne.n	800e51a <_malloc_r+0xe6>
 800e49a:	6821      	ldr	r1, [r4, #0]
 800e49c:	1a6d      	subs	r5, r5, r1
 800e49e:	4629      	mov	r1, r5
 800e4a0:	4638      	mov	r0, r7
 800e4a2:	f7ff ffa7 	bl	800e3f4 <sbrk_aligned>
 800e4a6:	3001      	adds	r0, #1
 800e4a8:	d037      	beq.n	800e51a <_malloc_r+0xe6>
 800e4aa:	6823      	ldr	r3, [r4, #0]
 800e4ac:	442b      	add	r3, r5
 800e4ae:	6023      	str	r3, [r4, #0]
 800e4b0:	f8d8 3000 	ldr.w	r3, [r8]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d038      	beq.n	800e52a <_malloc_r+0xf6>
 800e4b8:	685a      	ldr	r2, [r3, #4]
 800e4ba:	42a2      	cmp	r2, r4
 800e4bc:	d12b      	bne.n	800e516 <_malloc_r+0xe2>
 800e4be:	2200      	movs	r2, #0
 800e4c0:	605a      	str	r2, [r3, #4]
 800e4c2:	e00f      	b.n	800e4e4 <_malloc_r+0xb0>
 800e4c4:	6822      	ldr	r2, [r4, #0]
 800e4c6:	1b52      	subs	r2, r2, r5
 800e4c8:	d41f      	bmi.n	800e50a <_malloc_r+0xd6>
 800e4ca:	2a0b      	cmp	r2, #11
 800e4cc:	d917      	bls.n	800e4fe <_malloc_r+0xca>
 800e4ce:	1961      	adds	r1, r4, r5
 800e4d0:	42a3      	cmp	r3, r4
 800e4d2:	6025      	str	r5, [r4, #0]
 800e4d4:	bf18      	it	ne
 800e4d6:	6059      	strne	r1, [r3, #4]
 800e4d8:	6863      	ldr	r3, [r4, #4]
 800e4da:	bf08      	it	eq
 800e4dc:	f8c8 1000 	streq.w	r1, [r8]
 800e4e0:	5162      	str	r2, [r4, r5]
 800e4e2:	604b      	str	r3, [r1, #4]
 800e4e4:	4638      	mov	r0, r7
 800e4e6:	f104 060b 	add.w	r6, r4, #11
 800e4ea:	f000 f829 	bl	800e540 <__malloc_unlock>
 800e4ee:	f026 0607 	bic.w	r6, r6, #7
 800e4f2:	1d23      	adds	r3, r4, #4
 800e4f4:	1af2      	subs	r2, r6, r3
 800e4f6:	d0ae      	beq.n	800e456 <_malloc_r+0x22>
 800e4f8:	1b9b      	subs	r3, r3, r6
 800e4fa:	50a3      	str	r3, [r4, r2]
 800e4fc:	e7ab      	b.n	800e456 <_malloc_r+0x22>
 800e4fe:	42a3      	cmp	r3, r4
 800e500:	6862      	ldr	r2, [r4, #4]
 800e502:	d1dd      	bne.n	800e4c0 <_malloc_r+0x8c>
 800e504:	f8c8 2000 	str.w	r2, [r8]
 800e508:	e7ec      	b.n	800e4e4 <_malloc_r+0xb0>
 800e50a:	4623      	mov	r3, r4
 800e50c:	6864      	ldr	r4, [r4, #4]
 800e50e:	e7ac      	b.n	800e46a <_malloc_r+0x36>
 800e510:	4634      	mov	r4, r6
 800e512:	6876      	ldr	r6, [r6, #4]
 800e514:	e7b4      	b.n	800e480 <_malloc_r+0x4c>
 800e516:	4613      	mov	r3, r2
 800e518:	e7cc      	b.n	800e4b4 <_malloc_r+0x80>
 800e51a:	230c      	movs	r3, #12
 800e51c:	603b      	str	r3, [r7, #0]
 800e51e:	4638      	mov	r0, r7
 800e520:	f000 f80e 	bl	800e540 <__malloc_unlock>
 800e524:	e797      	b.n	800e456 <_malloc_r+0x22>
 800e526:	6025      	str	r5, [r4, #0]
 800e528:	e7dc      	b.n	800e4e4 <_malloc_r+0xb0>
 800e52a:	605b      	str	r3, [r3, #4]
 800e52c:	deff      	udf	#255	; 0xff
 800e52e:	bf00      	nop
 800e530:	20002318 	.word	0x20002318

0800e534 <__malloc_lock>:
 800e534:	4801      	ldr	r0, [pc, #4]	; (800e53c <__malloc_lock+0x8>)
 800e536:	f7ff b88a 	b.w	800d64e <__retarget_lock_acquire_recursive>
 800e53a:	bf00      	nop
 800e53c:	20002314 	.word	0x20002314

0800e540 <__malloc_unlock>:
 800e540:	4801      	ldr	r0, [pc, #4]	; (800e548 <__malloc_unlock+0x8>)
 800e542:	f7ff b885 	b.w	800d650 <__retarget_lock_release_recursive>
 800e546:	bf00      	nop
 800e548:	20002314 	.word	0x20002314

0800e54c <_Balloc>:
 800e54c:	b570      	push	{r4, r5, r6, lr}
 800e54e:	69c6      	ldr	r6, [r0, #28]
 800e550:	4604      	mov	r4, r0
 800e552:	460d      	mov	r5, r1
 800e554:	b976      	cbnz	r6, 800e574 <_Balloc+0x28>
 800e556:	2010      	movs	r0, #16
 800e558:	f7ff ff44 	bl	800e3e4 <malloc>
 800e55c:	4602      	mov	r2, r0
 800e55e:	61e0      	str	r0, [r4, #28]
 800e560:	b920      	cbnz	r0, 800e56c <_Balloc+0x20>
 800e562:	4b18      	ldr	r3, [pc, #96]	; (800e5c4 <_Balloc+0x78>)
 800e564:	4818      	ldr	r0, [pc, #96]	; (800e5c8 <_Balloc+0x7c>)
 800e566:	216b      	movs	r1, #107	; 0x6b
 800e568:	f000 fdaa 	bl	800f0c0 <__assert_func>
 800e56c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e570:	6006      	str	r6, [r0, #0]
 800e572:	60c6      	str	r6, [r0, #12]
 800e574:	69e6      	ldr	r6, [r4, #28]
 800e576:	68f3      	ldr	r3, [r6, #12]
 800e578:	b183      	cbz	r3, 800e59c <_Balloc+0x50>
 800e57a:	69e3      	ldr	r3, [r4, #28]
 800e57c:	68db      	ldr	r3, [r3, #12]
 800e57e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e582:	b9b8      	cbnz	r0, 800e5b4 <_Balloc+0x68>
 800e584:	2101      	movs	r1, #1
 800e586:	fa01 f605 	lsl.w	r6, r1, r5
 800e58a:	1d72      	adds	r2, r6, #5
 800e58c:	0092      	lsls	r2, r2, #2
 800e58e:	4620      	mov	r0, r4
 800e590:	f000 fdb4 	bl	800f0fc <_calloc_r>
 800e594:	b160      	cbz	r0, 800e5b0 <_Balloc+0x64>
 800e596:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e59a:	e00e      	b.n	800e5ba <_Balloc+0x6e>
 800e59c:	2221      	movs	r2, #33	; 0x21
 800e59e:	2104      	movs	r1, #4
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	f000 fdab 	bl	800f0fc <_calloc_r>
 800e5a6:	69e3      	ldr	r3, [r4, #28]
 800e5a8:	60f0      	str	r0, [r6, #12]
 800e5aa:	68db      	ldr	r3, [r3, #12]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1e4      	bne.n	800e57a <_Balloc+0x2e>
 800e5b0:	2000      	movs	r0, #0
 800e5b2:	bd70      	pop	{r4, r5, r6, pc}
 800e5b4:	6802      	ldr	r2, [r0, #0]
 800e5b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e5c0:	e7f7      	b.n	800e5b2 <_Balloc+0x66>
 800e5c2:	bf00      	nop
 800e5c4:	0800f819 	.word	0x0800f819
 800e5c8:	0800f899 	.word	0x0800f899

0800e5cc <_Bfree>:
 800e5cc:	b570      	push	{r4, r5, r6, lr}
 800e5ce:	69c6      	ldr	r6, [r0, #28]
 800e5d0:	4605      	mov	r5, r0
 800e5d2:	460c      	mov	r4, r1
 800e5d4:	b976      	cbnz	r6, 800e5f4 <_Bfree+0x28>
 800e5d6:	2010      	movs	r0, #16
 800e5d8:	f7ff ff04 	bl	800e3e4 <malloc>
 800e5dc:	4602      	mov	r2, r0
 800e5de:	61e8      	str	r0, [r5, #28]
 800e5e0:	b920      	cbnz	r0, 800e5ec <_Bfree+0x20>
 800e5e2:	4b09      	ldr	r3, [pc, #36]	; (800e608 <_Bfree+0x3c>)
 800e5e4:	4809      	ldr	r0, [pc, #36]	; (800e60c <_Bfree+0x40>)
 800e5e6:	218f      	movs	r1, #143	; 0x8f
 800e5e8:	f000 fd6a 	bl	800f0c0 <__assert_func>
 800e5ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5f0:	6006      	str	r6, [r0, #0]
 800e5f2:	60c6      	str	r6, [r0, #12]
 800e5f4:	b13c      	cbz	r4, 800e606 <_Bfree+0x3a>
 800e5f6:	69eb      	ldr	r3, [r5, #28]
 800e5f8:	6862      	ldr	r2, [r4, #4]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e600:	6021      	str	r1, [r4, #0]
 800e602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e606:	bd70      	pop	{r4, r5, r6, pc}
 800e608:	0800f819 	.word	0x0800f819
 800e60c:	0800f899 	.word	0x0800f899

0800e610 <__multadd>:
 800e610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e614:	690d      	ldr	r5, [r1, #16]
 800e616:	4607      	mov	r7, r0
 800e618:	460c      	mov	r4, r1
 800e61a:	461e      	mov	r6, r3
 800e61c:	f101 0c14 	add.w	ip, r1, #20
 800e620:	2000      	movs	r0, #0
 800e622:	f8dc 3000 	ldr.w	r3, [ip]
 800e626:	b299      	uxth	r1, r3
 800e628:	fb02 6101 	mla	r1, r2, r1, r6
 800e62c:	0c1e      	lsrs	r6, r3, #16
 800e62e:	0c0b      	lsrs	r3, r1, #16
 800e630:	fb02 3306 	mla	r3, r2, r6, r3
 800e634:	b289      	uxth	r1, r1
 800e636:	3001      	adds	r0, #1
 800e638:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e63c:	4285      	cmp	r5, r0
 800e63e:	f84c 1b04 	str.w	r1, [ip], #4
 800e642:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e646:	dcec      	bgt.n	800e622 <__multadd+0x12>
 800e648:	b30e      	cbz	r6, 800e68e <__multadd+0x7e>
 800e64a:	68a3      	ldr	r3, [r4, #8]
 800e64c:	42ab      	cmp	r3, r5
 800e64e:	dc19      	bgt.n	800e684 <__multadd+0x74>
 800e650:	6861      	ldr	r1, [r4, #4]
 800e652:	4638      	mov	r0, r7
 800e654:	3101      	adds	r1, #1
 800e656:	f7ff ff79 	bl	800e54c <_Balloc>
 800e65a:	4680      	mov	r8, r0
 800e65c:	b928      	cbnz	r0, 800e66a <__multadd+0x5a>
 800e65e:	4602      	mov	r2, r0
 800e660:	4b0c      	ldr	r3, [pc, #48]	; (800e694 <__multadd+0x84>)
 800e662:	480d      	ldr	r0, [pc, #52]	; (800e698 <__multadd+0x88>)
 800e664:	21ba      	movs	r1, #186	; 0xba
 800e666:	f000 fd2b 	bl	800f0c0 <__assert_func>
 800e66a:	6922      	ldr	r2, [r4, #16]
 800e66c:	3202      	adds	r2, #2
 800e66e:	f104 010c 	add.w	r1, r4, #12
 800e672:	0092      	lsls	r2, r2, #2
 800e674:	300c      	adds	r0, #12
 800e676:	f000 fd15 	bl	800f0a4 <memcpy>
 800e67a:	4621      	mov	r1, r4
 800e67c:	4638      	mov	r0, r7
 800e67e:	f7ff ffa5 	bl	800e5cc <_Bfree>
 800e682:	4644      	mov	r4, r8
 800e684:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e688:	3501      	adds	r5, #1
 800e68a:	615e      	str	r6, [r3, #20]
 800e68c:	6125      	str	r5, [r4, #16]
 800e68e:	4620      	mov	r0, r4
 800e690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e694:	0800f888 	.word	0x0800f888
 800e698:	0800f899 	.word	0x0800f899

0800e69c <__hi0bits>:
 800e69c:	0c03      	lsrs	r3, r0, #16
 800e69e:	041b      	lsls	r3, r3, #16
 800e6a0:	b9d3      	cbnz	r3, 800e6d8 <__hi0bits+0x3c>
 800e6a2:	0400      	lsls	r0, r0, #16
 800e6a4:	2310      	movs	r3, #16
 800e6a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e6aa:	bf04      	itt	eq
 800e6ac:	0200      	lsleq	r0, r0, #8
 800e6ae:	3308      	addeq	r3, #8
 800e6b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e6b4:	bf04      	itt	eq
 800e6b6:	0100      	lsleq	r0, r0, #4
 800e6b8:	3304      	addeq	r3, #4
 800e6ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e6be:	bf04      	itt	eq
 800e6c0:	0080      	lsleq	r0, r0, #2
 800e6c2:	3302      	addeq	r3, #2
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	db05      	blt.n	800e6d4 <__hi0bits+0x38>
 800e6c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e6cc:	f103 0301 	add.w	r3, r3, #1
 800e6d0:	bf08      	it	eq
 800e6d2:	2320      	moveq	r3, #32
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	4770      	bx	lr
 800e6d8:	2300      	movs	r3, #0
 800e6da:	e7e4      	b.n	800e6a6 <__hi0bits+0xa>

0800e6dc <__lo0bits>:
 800e6dc:	6803      	ldr	r3, [r0, #0]
 800e6de:	f013 0207 	ands.w	r2, r3, #7
 800e6e2:	d00c      	beq.n	800e6fe <__lo0bits+0x22>
 800e6e4:	07d9      	lsls	r1, r3, #31
 800e6e6:	d422      	bmi.n	800e72e <__lo0bits+0x52>
 800e6e8:	079a      	lsls	r2, r3, #30
 800e6ea:	bf49      	itett	mi
 800e6ec:	085b      	lsrmi	r3, r3, #1
 800e6ee:	089b      	lsrpl	r3, r3, #2
 800e6f0:	6003      	strmi	r3, [r0, #0]
 800e6f2:	2201      	movmi	r2, #1
 800e6f4:	bf5c      	itt	pl
 800e6f6:	6003      	strpl	r3, [r0, #0]
 800e6f8:	2202      	movpl	r2, #2
 800e6fa:	4610      	mov	r0, r2
 800e6fc:	4770      	bx	lr
 800e6fe:	b299      	uxth	r1, r3
 800e700:	b909      	cbnz	r1, 800e706 <__lo0bits+0x2a>
 800e702:	0c1b      	lsrs	r3, r3, #16
 800e704:	2210      	movs	r2, #16
 800e706:	b2d9      	uxtb	r1, r3
 800e708:	b909      	cbnz	r1, 800e70e <__lo0bits+0x32>
 800e70a:	3208      	adds	r2, #8
 800e70c:	0a1b      	lsrs	r3, r3, #8
 800e70e:	0719      	lsls	r1, r3, #28
 800e710:	bf04      	itt	eq
 800e712:	091b      	lsreq	r3, r3, #4
 800e714:	3204      	addeq	r2, #4
 800e716:	0799      	lsls	r1, r3, #30
 800e718:	bf04      	itt	eq
 800e71a:	089b      	lsreq	r3, r3, #2
 800e71c:	3202      	addeq	r2, #2
 800e71e:	07d9      	lsls	r1, r3, #31
 800e720:	d403      	bmi.n	800e72a <__lo0bits+0x4e>
 800e722:	085b      	lsrs	r3, r3, #1
 800e724:	f102 0201 	add.w	r2, r2, #1
 800e728:	d003      	beq.n	800e732 <__lo0bits+0x56>
 800e72a:	6003      	str	r3, [r0, #0]
 800e72c:	e7e5      	b.n	800e6fa <__lo0bits+0x1e>
 800e72e:	2200      	movs	r2, #0
 800e730:	e7e3      	b.n	800e6fa <__lo0bits+0x1e>
 800e732:	2220      	movs	r2, #32
 800e734:	e7e1      	b.n	800e6fa <__lo0bits+0x1e>
	...

0800e738 <__i2b>:
 800e738:	b510      	push	{r4, lr}
 800e73a:	460c      	mov	r4, r1
 800e73c:	2101      	movs	r1, #1
 800e73e:	f7ff ff05 	bl	800e54c <_Balloc>
 800e742:	4602      	mov	r2, r0
 800e744:	b928      	cbnz	r0, 800e752 <__i2b+0x1a>
 800e746:	4b05      	ldr	r3, [pc, #20]	; (800e75c <__i2b+0x24>)
 800e748:	4805      	ldr	r0, [pc, #20]	; (800e760 <__i2b+0x28>)
 800e74a:	f240 1145 	movw	r1, #325	; 0x145
 800e74e:	f000 fcb7 	bl	800f0c0 <__assert_func>
 800e752:	2301      	movs	r3, #1
 800e754:	6144      	str	r4, [r0, #20]
 800e756:	6103      	str	r3, [r0, #16]
 800e758:	bd10      	pop	{r4, pc}
 800e75a:	bf00      	nop
 800e75c:	0800f888 	.word	0x0800f888
 800e760:	0800f899 	.word	0x0800f899

0800e764 <__multiply>:
 800e764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e768:	4691      	mov	r9, r2
 800e76a:	690a      	ldr	r2, [r1, #16]
 800e76c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e770:	429a      	cmp	r2, r3
 800e772:	bfb8      	it	lt
 800e774:	460b      	movlt	r3, r1
 800e776:	460c      	mov	r4, r1
 800e778:	bfbc      	itt	lt
 800e77a:	464c      	movlt	r4, r9
 800e77c:	4699      	movlt	r9, r3
 800e77e:	6927      	ldr	r7, [r4, #16]
 800e780:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e784:	68a3      	ldr	r3, [r4, #8]
 800e786:	6861      	ldr	r1, [r4, #4]
 800e788:	eb07 060a 	add.w	r6, r7, sl
 800e78c:	42b3      	cmp	r3, r6
 800e78e:	b085      	sub	sp, #20
 800e790:	bfb8      	it	lt
 800e792:	3101      	addlt	r1, #1
 800e794:	f7ff feda 	bl	800e54c <_Balloc>
 800e798:	b930      	cbnz	r0, 800e7a8 <__multiply+0x44>
 800e79a:	4602      	mov	r2, r0
 800e79c:	4b44      	ldr	r3, [pc, #272]	; (800e8b0 <__multiply+0x14c>)
 800e79e:	4845      	ldr	r0, [pc, #276]	; (800e8b4 <__multiply+0x150>)
 800e7a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e7a4:	f000 fc8c 	bl	800f0c0 <__assert_func>
 800e7a8:	f100 0514 	add.w	r5, r0, #20
 800e7ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e7b0:	462b      	mov	r3, r5
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	4543      	cmp	r3, r8
 800e7b6:	d321      	bcc.n	800e7fc <__multiply+0x98>
 800e7b8:	f104 0314 	add.w	r3, r4, #20
 800e7bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e7c0:	f109 0314 	add.w	r3, r9, #20
 800e7c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e7c8:	9202      	str	r2, [sp, #8]
 800e7ca:	1b3a      	subs	r2, r7, r4
 800e7cc:	3a15      	subs	r2, #21
 800e7ce:	f022 0203 	bic.w	r2, r2, #3
 800e7d2:	3204      	adds	r2, #4
 800e7d4:	f104 0115 	add.w	r1, r4, #21
 800e7d8:	428f      	cmp	r7, r1
 800e7da:	bf38      	it	cc
 800e7dc:	2204      	movcc	r2, #4
 800e7de:	9201      	str	r2, [sp, #4]
 800e7e0:	9a02      	ldr	r2, [sp, #8]
 800e7e2:	9303      	str	r3, [sp, #12]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d80c      	bhi.n	800e802 <__multiply+0x9e>
 800e7e8:	2e00      	cmp	r6, #0
 800e7ea:	dd03      	ble.n	800e7f4 <__multiply+0x90>
 800e7ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d05b      	beq.n	800e8ac <__multiply+0x148>
 800e7f4:	6106      	str	r6, [r0, #16]
 800e7f6:	b005      	add	sp, #20
 800e7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7fc:	f843 2b04 	str.w	r2, [r3], #4
 800e800:	e7d8      	b.n	800e7b4 <__multiply+0x50>
 800e802:	f8b3 a000 	ldrh.w	sl, [r3]
 800e806:	f1ba 0f00 	cmp.w	sl, #0
 800e80a:	d024      	beq.n	800e856 <__multiply+0xf2>
 800e80c:	f104 0e14 	add.w	lr, r4, #20
 800e810:	46a9      	mov	r9, r5
 800e812:	f04f 0c00 	mov.w	ip, #0
 800e816:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e81a:	f8d9 1000 	ldr.w	r1, [r9]
 800e81e:	fa1f fb82 	uxth.w	fp, r2
 800e822:	b289      	uxth	r1, r1
 800e824:	fb0a 110b 	mla	r1, sl, fp, r1
 800e828:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e82c:	f8d9 2000 	ldr.w	r2, [r9]
 800e830:	4461      	add	r1, ip
 800e832:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e836:	fb0a c20b 	mla	r2, sl, fp, ip
 800e83a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e83e:	b289      	uxth	r1, r1
 800e840:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e844:	4577      	cmp	r7, lr
 800e846:	f849 1b04 	str.w	r1, [r9], #4
 800e84a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e84e:	d8e2      	bhi.n	800e816 <__multiply+0xb2>
 800e850:	9a01      	ldr	r2, [sp, #4]
 800e852:	f845 c002 	str.w	ip, [r5, r2]
 800e856:	9a03      	ldr	r2, [sp, #12]
 800e858:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e85c:	3304      	adds	r3, #4
 800e85e:	f1b9 0f00 	cmp.w	r9, #0
 800e862:	d021      	beq.n	800e8a8 <__multiply+0x144>
 800e864:	6829      	ldr	r1, [r5, #0]
 800e866:	f104 0c14 	add.w	ip, r4, #20
 800e86a:	46ae      	mov	lr, r5
 800e86c:	f04f 0a00 	mov.w	sl, #0
 800e870:	f8bc b000 	ldrh.w	fp, [ip]
 800e874:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e878:	fb09 220b 	mla	r2, r9, fp, r2
 800e87c:	4452      	add	r2, sl
 800e87e:	b289      	uxth	r1, r1
 800e880:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e884:	f84e 1b04 	str.w	r1, [lr], #4
 800e888:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e88c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e890:	f8be 1000 	ldrh.w	r1, [lr]
 800e894:	fb09 110a 	mla	r1, r9, sl, r1
 800e898:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e89c:	4567      	cmp	r7, ip
 800e89e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e8a2:	d8e5      	bhi.n	800e870 <__multiply+0x10c>
 800e8a4:	9a01      	ldr	r2, [sp, #4]
 800e8a6:	50a9      	str	r1, [r5, r2]
 800e8a8:	3504      	adds	r5, #4
 800e8aa:	e799      	b.n	800e7e0 <__multiply+0x7c>
 800e8ac:	3e01      	subs	r6, #1
 800e8ae:	e79b      	b.n	800e7e8 <__multiply+0x84>
 800e8b0:	0800f888 	.word	0x0800f888
 800e8b4:	0800f899 	.word	0x0800f899

0800e8b8 <__pow5mult>:
 800e8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8bc:	4615      	mov	r5, r2
 800e8be:	f012 0203 	ands.w	r2, r2, #3
 800e8c2:	4606      	mov	r6, r0
 800e8c4:	460f      	mov	r7, r1
 800e8c6:	d007      	beq.n	800e8d8 <__pow5mult+0x20>
 800e8c8:	4c25      	ldr	r4, [pc, #148]	; (800e960 <__pow5mult+0xa8>)
 800e8ca:	3a01      	subs	r2, #1
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e8d2:	f7ff fe9d 	bl	800e610 <__multadd>
 800e8d6:	4607      	mov	r7, r0
 800e8d8:	10ad      	asrs	r5, r5, #2
 800e8da:	d03d      	beq.n	800e958 <__pow5mult+0xa0>
 800e8dc:	69f4      	ldr	r4, [r6, #28]
 800e8de:	b97c      	cbnz	r4, 800e900 <__pow5mult+0x48>
 800e8e0:	2010      	movs	r0, #16
 800e8e2:	f7ff fd7f 	bl	800e3e4 <malloc>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	61f0      	str	r0, [r6, #28]
 800e8ea:	b928      	cbnz	r0, 800e8f8 <__pow5mult+0x40>
 800e8ec:	4b1d      	ldr	r3, [pc, #116]	; (800e964 <__pow5mult+0xac>)
 800e8ee:	481e      	ldr	r0, [pc, #120]	; (800e968 <__pow5mult+0xb0>)
 800e8f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e8f4:	f000 fbe4 	bl	800f0c0 <__assert_func>
 800e8f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e8fc:	6004      	str	r4, [r0, #0]
 800e8fe:	60c4      	str	r4, [r0, #12]
 800e900:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e908:	b94c      	cbnz	r4, 800e91e <__pow5mult+0x66>
 800e90a:	f240 2171 	movw	r1, #625	; 0x271
 800e90e:	4630      	mov	r0, r6
 800e910:	f7ff ff12 	bl	800e738 <__i2b>
 800e914:	2300      	movs	r3, #0
 800e916:	f8c8 0008 	str.w	r0, [r8, #8]
 800e91a:	4604      	mov	r4, r0
 800e91c:	6003      	str	r3, [r0, #0]
 800e91e:	f04f 0900 	mov.w	r9, #0
 800e922:	07eb      	lsls	r3, r5, #31
 800e924:	d50a      	bpl.n	800e93c <__pow5mult+0x84>
 800e926:	4639      	mov	r1, r7
 800e928:	4622      	mov	r2, r4
 800e92a:	4630      	mov	r0, r6
 800e92c:	f7ff ff1a 	bl	800e764 <__multiply>
 800e930:	4639      	mov	r1, r7
 800e932:	4680      	mov	r8, r0
 800e934:	4630      	mov	r0, r6
 800e936:	f7ff fe49 	bl	800e5cc <_Bfree>
 800e93a:	4647      	mov	r7, r8
 800e93c:	106d      	asrs	r5, r5, #1
 800e93e:	d00b      	beq.n	800e958 <__pow5mult+0xa0>
 800e940:	6820      	ldr	r0, [r4, #0]
 800e942:	b938      	cbnz	r0, 800e954 <__pow5mult+0x9c>
 800e944:	4622      	mov	r2, r4
 800e946:	4621      	mov	r1, r4
 800e948:	4630      	mov	r0, r6
 800e94a:	f7ff ff0b 	bl	800e764 <__multiply>
 800e94e:	6020      	str	r0, [r4, #0]
 800e950:	f8c0 9000 	str.w	r9, [r0]
 800e954:	4604      	mov	r4, r0
 800e956:	e7e4      	b.n	800e922 <__pow5mult+0x6a>
 800e958:	4638      	mov	r0, r7
 800e95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e95e:	bf00      	nop
 800e960:	0800f9e8 	.word	0x0800f9e8
 800e964:	0800f819 	.word	0x0800f819
 800e968:	0800f899 	.word	0x0800f899

0800e96c <__lshift>:
 800e96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e970:	460c      	mov	r4, r1
 800e972:	6849      	ldr	r1, [r1, #4]
 800e974:	6923      	ldr	r3, [r4, #16]
 800e976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e97a:	68a3      	ldr	r3, [r4, #8]
 800e97c:	4607      	mov	r7, r0
 800e97e:	4691      	mov	r9, r2
 800e980:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e984:	f108 0601 	add.w	r6, r8, #1
 800e988:	42b3      	cmp	r3, r6
 800e98a:	db0b      	blt.n	800e9a4 <__lshift+0x38>
 800e98c:	4638      	mov	r0, r7
 800e98e:	f7ff fddd 	bl	800e54c <_Balloc>
 800e992:	4605      	mov	r5, r0
 800e994:	b948      	cbnz	r0, 800e9aa <__lshift+0x3e>
 800e996:	4602      	mov	r2, r0
 800e998:	4b28      	ldr	r3, [pc, #160]	; (800ea3c <__lshift+0xd0>)
 800e99a:	4829      	ldr	r0, [pc, #164]	; (800ea40 <__lshift+0xd4>)
 800e99c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e9a0:	f000 fb8e 	bl	800f0c0 <__assert_func>
 800e9a4:	3101      	adds	r1, #1
 800e9a6:	005b      	lsls	r3, r3, #1
 800e9a8:	e7ee      	b.n	800e988 <__lshift+0x1c>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	f100 0114 	add.w	r1, r0, #20
 800e9b0:	f100 0210 	add.w	r2, r0, #16
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	4553      	cmp	r3, sl
 800e9b8:	db33      	blt.n	800ea22 <__lshift+0xb6>
 800e9ba:	6920      	ldr	r0, [r4, #16]
 800e9bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e9c0:	f104 0314 	add.w	r3, r4, #20
 800e9c4:	f019 091f 	ands.w	r9, r9, #31
 800e9c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e9cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e9d0:	d02b      	beq.n	800ea2a <__lshift+0xbe>
 800e9d2:	f1c9 0e20 	rsb	lr, r9, #32
 800e9d6:	468a      	mov	sl, r1
 800e9d8:	2200      	movs	r2, #0
 800e9da:	6818      	ldr	r0, [r3, #0]
 800e9dc:	fa00 f009 	lsl.w	r0, r0, r9
 800e9e0:	4310      	orrs	r0, r2
 800e9e2:	f84a 0b04 	str.w	r0, [sl], #4
 800e9e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ea:	459c      	cmp	ip, r3
 800e9ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800e9f0:	d8f3      	bhi.n	800e9da <__lshift+0x6e>
 800e9f2:	ebac 0304 	sub.w	r3, ip, r4
 800e9f6:	3b15      	subs	r3, #21
 800e9f8:	f023 0303 	bic.w	r3, r3, #3
 800e9fc:	3304      	adds	r3, #4
 800e9fe:	f104 0015 	add.w	r0, r4, #21
 800ea02:	4584      	cmp	ip, r0
 800ea04:	bf38      	it	cc
 800ea06:	2304      	movcc	r3, #4
 800ea08:	50ca      	str	r2, [r1, r3]
 800ea0a:	b10a      	cbz	r2, 800ea10 <__lshift+0xa4>
 800ea0c:	f108 0602 	add.w	r6, r8, #2
 800ea10:	3e01      	subs	r6, #1
 800ea12:	4638      	mov	r0, r7
 800ea14:	612e      	str	r6, [r5, #16]
 800ea16:	4621      	mov	r1, r4
 800ea18:	f7ff fdd8 	bl	800e5cc <_Bfree>
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea22:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea26:	3301      	adds	r3, #1
 800ea28:	e7c5      	b.n	800e9b6 <__lshift+0x4a>
 800ea2a:	3904      	subs	r1, #4
 800ea2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea30:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea34:	459c      	cmp	ip, r3
 800ea36:	d8f9      	bhi.n	800ea2c <__lshift+0xc0>
 800ea38:	e7ea      	b.n	800ea10 <__lshift+0xa4>
 800ea3a:	bf00      	nop
 800ea3c:	0800f888 	.word	0x0800f888
 800ea40:	0800f899 	.word	0x0800f899

0800ea44 <__mcmp>:
 800ea44:	b530      	push	{r4, r5, lr}
 800ea46:	6902      	ldr	r2, [r0, #16]
 800ea48:	690c      	ldr	r4, [r1, #16]
 800ea4a:	1b12      	subs	r2, r2, r4
 800ea4c:	d10e      	bne.n	800ea6c <__mcmp+0x28>
 800ea4e:	f100 0314 	add.w	r3, r0, #20
 800ea52:	3114      	adds	r1, #20
 800ea54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ea58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ea5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ea60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ea64:	42a5      	cmp	r5, r4
 800ea66:	d003      	beq.n	800ea70 <__mcmp+0x2c>
 800ea68:	d305      	bcc.n	800ea76 <__mcmp+0x32>
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	4610      	mov	r0, r2
 800ea6e:	bd30      	pop	{r4, r5, pc}
 800ea70:	4283      	cmp	r3, r0
 800ea72:	d3f3      	bcc.n	800ea5c <__mcmp+0x18>
 800ea74:	e7fa      	b.n	800ea6c <__mcmp+0x28>
 800ea76:	f04f 32ff 	mov.w	r2, #4294967295
 800ea7a:	e7f7      	b.n	800ea6c <__mcmp+0x28>

0800ea7c <__mdiff>:
 800ea7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea80:	460c      	mov	r4, r1
 800ea82:	4606      	mov	r6, r0
 800ea84:	4611      	mov	r1, r2
 800ea86:	4620      	mov	r0, r4
 800ea88:	4690      	mov	r8, r2
 800ea8a:	f7ff ffdb 	bl	800ea44 <__mcmp>
 800ea8e:	1e05      	subs	r5, r0, #0
 800ea90:	d110      	bne.n	800eab4 <__mdiff+0x38>
 800ea92:	4629      	mov	r1, r5
 800ea94:	4630      	mov	r0, r6
 800ea96:	f7ff fd59 	bl	800e54c <_Balloc>
 800ea9a:	b930      	cbnz	r0, 800eaaa <__mdiff+0x2e>
 800ea9c:	4b3a      	ldr	r3, [pc, #232]	; (800eb88 <__mdiff+0x10c>)
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	f240 2137 	movw	r1, #567	; 0x237
 800eaa4:	4839      	ldr	r0, [pc, #228]	; (800eb8c <__mdiff+0x110>)
 800eaa6:	f000 fb0b 	bl	800f0c0 <__assert_func>
 800eaaa:	2301      	movs	r3, #1
 800eaac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab4:	bfa4      	itt	ge
 800eab6:	4643      	movge	r3, r8
 800eab8:	46a0      	movge	r8, r4
 800eaba:	4630      	mov	r0, r6
 800eabc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eac0:	bfa6      	itte	ge
 800eac2:	461c      	movge	r4, r3
 800eac4:	2500      	movge	r5, #0
 800eac6:	2501      	movlt	r5, #1
 800eac8:	f7ff fd40 	bl	800e54c <_Balloc>
 800eacc:	b920      	cbnz	r0, 800ead8 <__mdiff+0x5c>
 800eace:	4b2e      	ldr	r3, [pc, #184]	; (800eb88 <__mdiff+0x10c>)
 800ead0:	4602      	mov	r2, r0
 800ead2:	f240 2145 	movw	r1, #581	; 0x245
 800ead6:	e7e5      	b.n	800eaa4 <__mdiff+0x28>
 800ead8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eadc:	6926      	ldr	r6, [r4, #16]
 800eade:	60c5      	str	r5, [r0, #12]
 800eae0:	f104 0914 	add.w	r9, r4, #20
 800eae4:	f108 0514 	add.w	r5, r8, #20
 800eae8:	f100 0e14 	add.w	lr, r0, #20
 800eaec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eaf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eaf4:	f108 0210 	add.w	r2, r8, #16
 800eaf8:	46f2      	mov	sl, lr
 800eafa:	2100      	movs	r1, #0
 800eafc:	f859 3b04 	ldr.w	r3, [r9], #4
 800eb00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eb04:	fa11 f88b 	uxtah	r8, r1, fp
 800eb08:	b299      	uxth	r1, r3
 800eb0a:	0c1b      	lsrs	r3, r3, #16
 800eb0c:	eba8 0801 	sub.w	r8, r8, r1
 800eb10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eb14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eb18:	fa1f f888 	uxth.w	r8, r8
 800eb1c:	1419      	asrs	r1, r3, #16
 800eb1e:	454e      	cmp	r6, r9
 800eb20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eb24:	f84a 3b04 	str.w	r3, [sl], #4
 800eb28:	d8e8      	bhi.n	800eafc <__mdiff+0x80>
 800eb2a:	1b33      	subs	r3, r6, r4
 800eb2c:	3b15      	subs	r3, #21
 800eb2e:	f023 0303 	bic.w	r3, r3, #3
 800eb32:	3304      	adds	r3, #4
 800eb34:	3415      	adds	r4, #21
 800eb36:	42a6      	cmp	r6, r4
 800eb38:	bf38      	it	cc
 800eb3a:	2304      	movcc	r3, #4
 800eb3c:	441d      	add	r5, r3
 800eb3e:	4473      	add	r3, lr
 800eb40:	469e      	mov	lr, r3
 800eb42:	462e      	mov	r6, r5
 800eb44:	4566      	cmp	r6, ip
 800eb46:	d30e      	bcc.n	800eb66 <__mdiff+0xea>
 800eb48:	f10c 0203 	add.w	r2, ip, #3
 800eb4c:	1b52      	subs	r2, r2, r5
 800eb4e:	f022 0203 	bic.w	r2, r2, #3
 800eb52:	3d03      	subs	r5, #3
 800eb54:	45ac      	cmp	ip, r5
 800eb56:	bf38      	it	cc
 800eb58:	2200      	movcc	r2, #0
 800eb5a:	4413      	add	r3, r2
 800eb5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800eb60:	b17a      	cbz	r2, 800eb82 <__mdiff+0x106>
 800eb62:	6107      	str	r7, [r0, #16]
 800eb64:	e7a4      	b.n	800eab0 <__mdiff+0x34>
 800eb66:	f856 8b04 	ldr.w	r8, [r6], #4
 800eb6a:	fa11 f288 	uxtah	r2, r1, r8
 800eb6e:	1414      	asrs	r4, r2, #16
 800eb70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eb74:	b292      	uxth	r2, r2
 800eb76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eb7a:	f84e 2b04 	str.w	r2, [lr], #4
 800eb7e:	1421      	asrs	r1, r4, #16
 800eb80:	e7e0      	b.n	800eb44 <__mdiff+0xc8>
 800eb82:	3f01      	subs	r7, #1
 800eb84:	e7ea      	b.n	800eb5c <__mdiff+0xe0>
 800eb86:	bf00      	nop
 800eb88:	0800f888 	.word	0x0800f888
 800eb8c:	0800f899 	.word	0x0800f899

0800eb90 <__d2b>:
 800eb90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb94:	460f      	mov	r7, r1
 800eb96:	2101      	movs	r1, #1
 800eb98:	ec59 8b10 	vmov	r8, r9, d0
 800eb9c:	4616      	mov	r6, r2
 800eb9e:	f7ff fcd5 	bl	800e54c <_Balloc>
 800eba2:	4604      	mov	r4, r0
 800eba4:	b930      	cbnz	r0, 800ebb4 <__d2b+0x24>
 800eba6:	4602      	mov	r2, r0
 800eba8:	4b24      	ldr	r3, [pc, #144]	; (800ec3c <__d2b+0xac>)
 800ebaa:	4825      	ldr	r0, [pc, #148]	; (800ec40 <__d2b+0xb0>)
 800ebac:	f240 310f 	movw	r1, #783	; 0x30f
 800ebb0:	f000 fa86 	bl	800f0c0 <__assert_func>
 800ebb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ebb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ebbc:	bb2d      	cbnz	r5, 800ec0a <__d2b+0x7a>
 800ebbe:	9301      	str	r3, [sp, #4]
 800ebc0:	f1b8 0300 	subs.w	r3, r8, #0
 800ebc4:	d026      	beq.n	800ec14 <__d2b+0x84>
 800ebc6:	4668      	mov	r0, sp
 800ebc8:	9300      	str	r3, [sp, #0]
 800ebca:	f7ff fd87 	bl	800e6dc <__lo0bits>
 800ebce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ebd2:	b1e8      	cbz	r0, 800ec10 <__d2b+0x80>
 800ebd4:	f1c0 0320 	rsb	r3, r0, #32
 800ebd8:	fa02 f303 	lsl.w	r3, r2, r3
 800ebdc:	430b      	orrs	r3, r1
 800ebde:	40c2      	lsrs	r2, r0
 800ebe0:	6163      	str	r3, [r4, #20]
 800ebe2:	9201      	str	r2, [sp, #4]
 800ebe4:	9b01      	ldr	r3, [sp, #4]
 800ebe6:	61a3      	str	r3, [r4, #24]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	bf14      	ite	ne
 800ebec:	2202      	movne	r2, #2
 800ebee:	2201      	moveq	r2, #1
 800ebf0:	6122      	str	r2, [r4, #16]
 800ebf2:	b1bd      	cbz	r5, 800ec24 <__d2b+0x94>
 800ebf4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ebf8:	4405      	add	r5, r0
 800ebfa:	603d      	str	r5, [r7, #0]
 800ebfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec00:	6030      	str	r0, [r6, #0]
 800ec02:	4620      	mov	r0, r4
 800ec04:	b003      	add	sp, #12
 800ec06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec0e:	e7d6      	b.n	800ebbe <__d2b+0x2e>
 800ec10:	6161      	str	r1, [r4, #20]
 800ec12:	e7e7      	b.n	800ebe4 <__d2b+0x54>
 800ec14:	a801      	add	r0, sp, #4
 800ec16:	f7ff fd61 	bl	800e6dc <__lo0bits>
 800ec1a:	9b01      	ldr	r3, [sp, #4]
 800ec1c:	6163      	str	r3, [r4, #20]
 800ec1e:	3020      	adds	r0, #32
 800ec20:	2201      	movs	r2, #1
 800ec22:	e7e5      	b.n	800ebf0 <__d2b+0x60>
 800ec24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ec2c:	6038      	str	r0, [r7, #0]
 800ec2e:	6918      	ldr	r0, [r3, #16]
 800ec30:	f7ff fd34 	bl	800e69c <__hi0bits>
 800ec34:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec38:	e7e2      	b.n	800ec00 <__d2b+0x70>
 800ec3a:	bf00      	nop
 800ec3c:	0800f888 	.word	0x0800f888
 800ec40:	0800f899 	.word	0x0800f899

0800ec44 <__ssputs_r>:
 800ec44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec48:	688e      	ldr	r6, [r1, #8]
 800ec4a:	461f      	mov	r7, r3
 800ec4c:	42be      	cmp	r6, r7
 800ec4e:	680b      	ldr	r3, [r1, #0]
 800ec50:	4682      	mov	sl, r0
 800ec52:	460c      	mov	r4, r1
 800ec54:	4690      	mov	r8, r2
 800ec56:	d82c      	bhi.n	800ecb2 <__ssputs_r+0x6e>
 800ec58:	898a      	ldrh	r2, [r1, #12]
 800ec5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec5e:	d026      	beq.n	800ecae <__ssputs_r+0x6a>
 800ec60:	6965      	ldr	r5, [r4, #20]
 800ec62:	6909      	ldr	r1, [r1, #16]
 800ec64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec68:	eba3 0901 	sub.w	r9, r3, r1
 800ec6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec70:	1c7b      	adds	r3, r7, #1
 800ec72:	444b      	add	r3, r9
 800ec74:	106d      	asrs	r5, r5, #1
 800ec76:	429d      	cmp	r5, r3
 800ec78:	bf38      	it	cc
 800ec7a:	461d      	movcc	r5, r3
 800ec7c:	0553      	lsls	r3, r2, #21
 800ec7e:	d527      	bpl.n	800ecd0 <__ssputs_r+0x8c>
 800ec80:	4629      	mov	r1, r5
 800ec82:	f7ff fbd7 	bl	800e434 <_malloc_r>
 800ec86:	4606      	mov	r6, r0
 800ec88:	b360      	cbz	r0, 800ece4 <__ssputs_r+0xa0>
 800ec8a:	6921      	ldr	r1, [r4, #16]
 800ec8c:	464a      	mov	r2, r9
 800ec8e:	f000 fa09 	bl	800f0a4 <memcpy>
 800ec92:	89a3      	ldrh	r3, [r4, #12]
 800ec94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec9c:	81a3      	strh	r3, [r4, #12]
 800ec9e:	6126      	str	r6, [r4, #16]
 800eca0:	6165      	str	r5, [r4, #20]
 800eca2:	444e      	add	r6, r9
 800eca4:	eba5 0509 	sub.w	r5, r5, r9
 800eca8:	6026      	str	r6, [r4, #0]
 800ecaa:	60a5      	str	r5, [r4, #8]
 800ecac:	463e      	mov	r6, r7
 800ecae:	42be      	cmp	r6, r7
 800ecb0:	d900      	bls.n	800ecb4 <__ssputs_r+0x70>
 800ecb2:	463e      	mov	r6, r7
 800ecb4:	6820      	ldr	r0, [r4, #0]
 800ecb6:	4632      	mov	r2, r6
 800ecb8:	4641      	mov	r1, r8
 800ecba:	f000 f9c9 	bl	800f050 <memmove>
 800ecbe:	68a3      	ldr	r3, [r4, #8]
 800ecc0:	1b9b      	subs	r3, r3, r6
 800ecc2:	60a3      	str	r3, [r4, #8]
 800ecc4:	6823      	ldr	r3, [r4, #0]
 800ecc6:	4433      	add	r3, r6
 800ecc8:	6023      	str	r3, [r4, #0]
 800ecca:	2000      	movs	r0, #0
 800eccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecd0:	462a      	mov	r2, r5
 800ecd2:	f000 fa3b 	bl	800f14c <_realloc_r>
 800ecd6:	4606      	mov	r6, r0
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	d1e0      	bne.n	800ec9e <__ssputs_r+0x5a>
 800ecdc:	6921      	ldr	r1, [r4, #16]
 800ecde:	4650      	mov	r0, sl
 800ece0:	f7ff fb34 	bl	800e34c <_free_r>
 800ece4:	230c      	movs	r3, #12
 800ece6:	f8ca 3000 	str.w	r3, [sl]
 800ecea:	89a3      	ldrh	r3, [r4, #12]
 800ecec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecf0:	81a3      	strh	r3, [r4, #12]
 800ecf2:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf6:	e7e9      	b.n	800eccc <__ssputs_r+0x88>

0800ecf8 <_svfiprintf_r>:
 800ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecfc:	4698      	mov	r8, r3
 800ecfe:	898b      	ldrh	r3, [r1, #12]
 800ed00:	061b      	lsls	r3, r3, #24
 800ed02:	b09d      	sub	sp, #116	; 0x74
 800ed04:	4607      	mov	r7, r0
 800ed06:	460d      	mov	r5, r1
 800ed08:	4614      	mov	r4, r2
 800ed0a:	d50e      	bpl.n	800ed2a <_svfiprintf_r+0x32>
 800ed0c:	690b      	ldr	r3, [r1, #16]
 800ed0e:	b963      	cbnz	r3, 800ed2a <_svfiprintf_r+0x32>
 800ed10:	2140      	movs	r1, #64	; 0x40
 800ed12:	f7ff fb8f 	bl	800e434 <_malloc_r>
 800ed16:	6028      	str	r0, [r5, #0]
 800ed18:	6128      	str	r0, [r5, #16]
 800ed1a:	b920      	cbnz	r0, 800ed26 <_svfiprintf_r+0x2e>
 800ed1c:	230c      	movs	r3, #12
 800ed1e:	603b      	str	r3, [r7, #0]
 800ed20:	f04f 30ff 	mov.w	r0, #4294967295
 800ed24:	e0d0      	b.n	800eec8 <_svfiprintf_r+0x1d0>
 800ed26:	2340      	movs	r3, #64	; 0x40
 800ed28:	616b      	str	r3, [r5, #20]
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ed2e:	2320      	movs	r3, #32
 800ed30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed38:	2330      	movs	r3, #48	; 0x30
 800ed3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eee0 <_svfiprintf_r+0x1e8>
 800ed3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed42:	f04f 0901 	mov.w	r9, #1
 800ed46:	4623      	mov	r3, r4
 800ed48:	469a      	mov	sl, r3
 800ed4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed4e:	b10a      	cbz	r2, 800ed54 <_svfiprintf_r+0x5c>
 800ed50:	2a25      	cmp	r2, #37	; 0x25
 800ed52:	d1f9      	bne.n	800ed48 <_svfiprintf_r+0x50>
 800ed54:	ebba 0b04 	subs.w	fp, sl, r4
 800ed58:	d00b      	beq.n	800ed72 <_svfiprintf_r+0x7a>
 800ed5a:	465b      	mov	r3, fp
 800ed5c:	4622      	mov	r2, r4
 800ed5e:	4629      	mov	r1, r5
 800ed60:	4638      	mov	r0, r7
 800ed62:	f7ff ff6f 	bl	800ec44 <__ssputs_r>
 800ed66:	3001      	adds	r0, #1
 800ed68:	f000 80a9 	beq.w	800eebe <_svfiprintf_r+0x1c6>
 800ed6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed6e:	445a      	add	r2, fp
 800ed70:	9209      	str	r2, [sp, #36]	; 0x24
 800ed72:	f89a 3000 	ldrb.w	r3, [sl]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f000 80a1 	beq.w	800eebe <_svfiprintf_r+0x1c6>
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed86:	f10a 0a01 	add.w	sl, sl, #1
 800ed8a:	9304      	str	r3, [sp, #16]
 800ed8c:	9307      	str	r3, [sp, #28]
 800ed8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed92:	931a      	str	r3, [sp, #104]	; 0x68
 800ed94:	4654      	mov	r4, sl
 800ed96:	2205      	movs	r2, #5
 800ed98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed9c:	4850      	ldr	r0, [pc, #320]	; (800eee0 <_svfiprintf_r+0x1e8>)
 800ed9e:	f7f1 fa1f 	bl	80001e0 <memchr>
 800eda2:	9a04      	ldr	r2, [sp, #16]
 800eda4:	b9d8      	cbnz	r0, 800edde <_svfiprintf_r+0xe6>
 800eda6:	06d0      	lsls	r0, r2, #27
 800eda8:	bf44      	itt	mi
 800edaa:	2320      	movmi	r3, #32
 800edac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edb0:	0711      	lsls	r1, r2, #28
 800edb2:	bf44      	itt	mi
 800edb4:	232b      	movmi	r3, #43	; 0x2b
 800edb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edba:	f89a 3000 	ldrb.w	r3, [sl]
 800edbe:	2b2a      	cmp	r3, #42	; 0x2a
 800edc0:	d015      	beq.n	800edee <_svfiprintf_r+0xf6>
 800edc2:	9a07      	ldr	r2, [sp, #28]
 800edc4:	4654      	mov	r4, sl
 800edc6:	2000      	movs	r0, #0
 800edc8:	f04f 0c0a 	mov.w	ip, #10
 800edcc:	4621      	mov	r1, r4
 800edce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edd2:	3b30      	subs	r3, #48	; 0x30
 800edd4:	2b09      	cmp	r3, #9
 800edd6:	d94d      	bls.n	800ee74 <_svfiprintf_r+0x17c>
 800edd8:	b1b0      	cbz	r0, 800ee08 <_svfiprintf_r+0x110>
 800edda:	9207      	str	r2, [sp, #28]
 800eddc:	e014      	b.n	800ee08 <_svfiprintf_r+0x110>
 800edde:	eba0 0308 	sub.w	r3, r0, r8
 800ede2:	fa09 f303 	lsl.w	r3, r9, r3
 800ede6:	4313      	orrs	r3, r2
 800ede8:	9304      	str	r3, [sp, #16]
 800edea:	46a2      	mov	sl, r4
 800edec:	e7d2      	b.n	800ed94 <_svfiprintf_r+0x9c>
 800edee:	9b03      	ldr	r3, [sp, #12]
 800edf0:	1d19      	adds	r1, r3, #4
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	9103      	str	r1, [sp, #12]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	bfbb      	ittet	lt
 800edfa:	425b      	neglt	r3, r3
 800edfc:	f042 0202 	orrlt.w	r2, r2, #2
 800ee00:	9307      	strge	r3, [sp, #28]
 800ee02:	9307      	strlt	r3, [sp, #28]
 800ee04:	bfb8      	it	lt
 800ee06:	9204      	strlt	r2, [sp, #16]
 800ee08:	7823      	ldrb	r3, [r4, #0]
 800ee0a:	2b2e      	cmp	r3, #46	; 0x2e
 800ee0c:	d10c      	bne.n	800ee28 <_svfiprintf_r+0x130>
 800ee0e:	7863      	ldrb	r3, [r4, #1]
 800ee10:	2b2a      	cmp	r3, #42	; 0x2a
 800ee12:	d134      	bne.n	800ee7e <_svfiprintf_r+0x186>
 800ee14:	9b03      	ldr	r3, [sp, #12]
 800ee16:	1d1a      	adds	r2, r3, #4
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	9203      	str	r2, [sp, #12]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	bfb8      	it	lt
 800ee20:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee24:	3402      	adds	r4, #2
 800ee26:	9305      	str	r3, [sp, #20]
 800ee28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800eef0 <_svfiprintf_r+0x1f8>
 800ee2c:	7821      	ldrb	r1, [r4, #0]
 800ee2e:	2203      	movs	r2, #3
 800ee30:	4650      	mov	r0, sl
 800ee32:	f7f1 f9d5 	bl	80001e0 <memchr>
 800ee36:	b138      	cbz	r0, 800ee48 <_svfiprintf_r+0x150>
 800ee38:	9b04      	ldr	r3, [sp, #16]
 800ee3a:	eba0 000a 	sub.w	r0, r0, sl
 800ee3e:	2240      	movs	r2, #64	; 0x40
 800ee40:	4082      	lsls	r2, r0
 800ee42:	4313      	orrs	r3, r2
 800ee44:	3401      	adds	r4, #1
 800ee46:	9304      	str	r3, [sp, #16]
 800ee48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee4c:	4825      	ldr	r0, [pc, #148]	; (800eee4 <_svfiprintf_r+0x1ec>)
 800ee4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee52:	2206      	movs	r2, #6
 800ee54:	f7f1 f9c4 	bl	80001e0 <memchr>
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	d038      	beq.n	800eece <_svfiprintf_r+0x1d6>
 800ee5c:	4b22      	ldr	r3, [pc, #136]	; (800eee8 <_svfiprintf_r+0x1f0>)
 800ee5e:	bb1b      	cbnz	r3, 800eea8 <_svfiprintf_r+0x1b0>
 800ee60:	9b03      	ldr	r3, [sp, #12]
 800ee62:	3307      	adds	r3, #7
 800ee64:	f023 0307 	bic.w	r3, r3, #7
 800ee68:	3308      	adds	r3, #8
 800ee6a:	9303      	str	r3, [sp, #12]
 800ee6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee6e:	4433      	add	r3, r6
 800ee70:	9309      	str	r3, [sp, #36]	; 0x24
 800ee72:	e768      	b.n	800ed46 <_svfiprintf_r+0x4e>
 800ee74:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee78:	460c      	mov	r4, r1
 800ee7a:	2001      	movs	r0, #1
 800ee7c:	e7a6      	b.n	800edcc <_svfiprintf_r+0xd4>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	3401      	adds	r4, #1
 800ee82:	9305      	str	r3, [sp, #20]
 800ee84:	4619      	mov	r1, r3
 800ee86:	f04f 0c0a 	mov.w	ip, #10
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee90:	3a30      	subs	r2, #48	; 0x30
 800ee92:	2a09      	cmp	r2, #9
 800ee94:	d903      	bls.n	800ee9e <_svfiprintf_r+0x1a6>
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d0c6      	beq.n	800ee28 <_svfiprintf_r+0x130>
 800ee9a:	9105      	str	r1, [sp, #20]
 800ee9c:	e7c4      	b.n	800ee28 <_svfiprintf_r+0x130>
 800ee9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800eea2:	4604      	mov	r4, r0
 800eea4:	2301      	movs	r3, #1
 800eea6:	e7f0      	b.n	800ee8a <_svfiprintf_r+0x192>
 800eea8:	ab03      	add	r3, sp, #12
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	462a      	mov	r2, r5
 800eeae:	4b0f      	ldr	r3, [pc, #60]	; (800eeec <_svfiprintf_r+0x1f4>)
 800eeb0:	a904      	add	r1, sp, #16
 800eeb2:	4638      	mov	r0, r7
 800eeb4:	f7fd fe4e 	bl	800cb54 <_printf_float>
 800eeb8:	1c42      	adds	r2, r0, #1
 800eeba:	4606      	mov	r6, r0
 800eebc:	d1d6      	bne.n	800ee6c <_svfiprintf_r+0x174>
 800eebe:	89ab      	ldrh	r3, [r5, #12]
 800eec0:	065b      	lsls	r3, r3, #25
 800eec2:	f53f af2d 	bmi.w	800ed20 <_svfiprintf_r+0x28>
 800eec6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eec8:	b01d      	add	sp, #116	; 0x74
 800eeca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eece:	ab03      	add	r3, sp, #12
 800eed0:	9300      	str	r3, [sp, #0]
 800eed2:	462a      	mov	r2, r5
 800eed4:	4b05      	ldr	r3, [pc, #20]	; (800eeec <_svfiprintf_r+0x1f4>)
 800eed6:	a904      	add	r1, sp, #16
 800eed8:	4638      	mov	r0, r7
 800eeda:	f7fe f8df 	bl	800d09c <_printf_i>
 800eede:	e7eb      	b.n	800eeb8 <_svfiprintf_r+0x1c0>
 800eee0:	0800f9f4 	.word	0x0800f9f4
 800eee4:	0800f9fe 	.word	0x0800f9fe
 800eee8:	0800cb55 	.word	0x0800cb55
 800eeec:	0800ec45 	.word	0x0800ec45
 800eef0:	0800f9fa 	.word	0x0800f9fa

0800eef4 <__sflush_r>:
 800eef4:	898a      	ldrh	r2, [r1, #12]
 800eef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eefa:	4605      	mov	r5, r0
 800eefc:	0710      	lsls	r0, r2, #28
 800eefe:	460c      	mov	r4, r1
 800ef00:	d458      	bmi.n	800efb4 <__sflush_r+0xc0>
 800ef02:	684b      	ldr	r3, [r1, #4]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	dc05      	bgt.n	800ef14 <__sflush_r+0x20>
 800ef08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	dc02      	bgt.n	800ef14 <__sflush_r+0x20>
 800ef0e:	2000      	movs	r0, #0
 800ef10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef16:	2e00      	cmp	r6, #0
 800ef18:	d0f9      	beq.n	800ef0e <__sflush_r+0x1a>
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef20:	682f      	ldr	r7, [r5, #0]
 800ef22:	6a21      	ldr	r1, [r4, #32]
 800ef24:	602b      	str	r3, [r5, #0]
 800ef26:	d032      	beq.n	800ef8e <__sflush_r+0x9a>
 800ef28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	075a      	lsls	r2, r3, #29
 800ef2e:	d505      	bpl.n	800ef3c <__sflush_r+0x48>
 800ef30:	6863      	ldr	r3, [r4, #4]
 800ef32:	1ac0      	subs	r0, r0, r3
 800ef34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef36:	b10b      	cbz	r3, 800ef3c <__sflush_r+0x48>
 800ef38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef3a:	1ac0      	subs	r0, r0, r3
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	4602      	mov	r2, r0
 800ef40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef42:	6a21      	ldr	r1, [r4, #32]
 800ef44:	4628      	mov	r0, r5
 800ef46:	47b0      	blx	r6
 800ef48:	1c43      	adds	r3, r0, #1
 800ef4a:	89a3      	ldrh	r3, [r4, #12]
 800ef4c:	d106      	bne.n	800ef5c <__sflush_r+0x68>
 800ef4e:	6829      	ldr	r1, [r5, #0]
 800ef50:	291d      	cmp	r1, #29
 800ef52:	d82b      	bhi.n	800efac <__sflush_r+0xb8>
 800ef54:	4a29      	ldr	r2, [pc, #164]	; (800effc <__sflush_r+0x108>)
 800ef56:	410a      	asrs	r2, r1
 800ef58:	07d6      	lsls	r6, r2, #31
 800ef5a:	d427      	bmi.n	800efac <__sflush_r+0xb8>
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	6062      	str	r2, [r4, #4]
 800ef60:	04d9      	lsls	r1, r3, #19
 800ef62:	6922      	ldr	r2, [r4, #16]
 800ef64:	6022      	str	r2, [r4, #0]
 800ef66:	d504      	bpl.n	800ef72 <__sflush_r+0x7e>
 800ef68:	1c42      	adds	r2, r0, #1
 800ef6a:	d101      	bne.n	800ef70 <__sflush_r+0x7c>
 800ef6c:	682b      	ldr	r3, [r5, #0]
 800ef6e:	b903      	cbnz	r3, 800ef72 <__sflush_r+0x7e>
 800ef70:	6560      	str	r0, [r4, #84]	; 0x54
 800ef72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef74:	602f      	str	r7, [r5, #0]
 800ef76:	2900      	cmp	r1, #0
 800ef78:	d0c9      	beq.n	800ef0e <__sflush_r+0x1a>
 800ef7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef7e:	4299      	cmp	r1, r3
 800ef80:	d002      	beq.n	800ef88 <__sflush_r+0x94>
 800ef82:	4628      	mov	r0, r5
 800ef84:	f7ff f9e2 	bl	800e34c <_free_r>
 800ef88:	2000      	movs	r0, #0
 800ef8a:	6360      	str	r0, [r4, #52]	; 0x34
 800ef8c:	e7c0      	b.n	800ef10 <__sflush_r+0x1c>
 800ef8e:	2301      	movs	r3, #1
 800ef90:	4628      	mov	r0, r5
 800ef92:	47b0      	blx	r6
 800ef94:	1c41      	adds	r1, r0, #1
 800ef96:	d1c8      	bne.n	800ef2a <__sflush_r+0x36>
 800ef98:	682b      	ldr	r3, [r5, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d0c5      	beq.n	800ef2a <__sflush_r+0x36>
 800ef9e:	2b1d      	cmp	r3, #29
 800efa0:	d001      	beq.n	800efa6 <__sflush_r+0xb2>
 800efa2:	2b16      	cmp	r3, #22
 800efa4:	d101      	bne.n	800efaa <__sflush_r+0xb6>
 800efa6:	602f      	str	r7, [r5, #0]
 800efa8:	e7b1      	b.n	800ef0e <__sflush_r+0x1a>
 800efaa:	89a3      	ldrh	r3, [r4, #12]
 800efac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efb0:	81a3      	strh	r3, [r4, #12]
 800efb2:	e7ad      	b.n	800ef10 <__sflush_r+0x1c>
 800efb4:	690f      	ldr	r7, [r1, #16]
 800efb6:	2f00      	cmp	r7, #0
 800efb8:	d0a9      	beq.n	800ef0e <__sflush_r+0x1a>
 800efba:	0793      	lsls	r3, r2, #30
 800efbc:	680e      	ldr	r6, [r1, #0]
 800efbe:	bf08      	it	eq
 800efc0:	694b      	ldreq	r3, [r1, #20]
 800efc2:	600f      	str	r7, [r1, #0]
 800efc4:	bf18      	it	ne
 800efc6:	2300      	movne	r3, #0
 800efc8:	eba6 0807 	sub.w	r8, r6, r7
 800efcc:	608b      	str	r3, [r1, #8]
 800efce:	f1b8 0f00 	cmp.w	r8, #0
 800efd2:	dd9c      	ble.n	800ef0e <__sflush_r+0x1a>
 800efd4:	6a21      	ldr	r1, [r4, #32]
 800efd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800efd8:	4643      	mov	r3, r8
 800efda:	463a      	mov	r2, r7
 800efdc:	4628      	mov	r0, r5
 800efde:	47b0      	blx	r6
 800efe0:	2800      	cmp	r0, #0
 800efe2:	dc06      	bgt.n	800eff2 <__sflush_r+0xfe>
 800efe4:	89a3      	ldrh	r3, [r4, #12]
 800efe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efea:	81a3      	strh	r3, [r4, #12]
 800efec:	f04f 30ff 	mov.w	r0, #4294967295
 800eff0:	e78e      	b.n	800ef10 <__sflush_r+0x1c>
 800eff2:	4407      	add	r7, r0
 800eff4:	eba8 0800 	sub.w	r8, r8, r0
 800eff8:	e7e9      	b.n	800efce <__sflush_r+0xda>
 800effa:	bf00      	nop
 800effc:	dfbffffe 	.word	0xdfbffffe

0800f000 <_fflush_r>:
 800f000:	b538      	push	{r3, r4, r5, lr}
 800f002:	690b      	ldr	r3, [r1, #16]
 800f004:	4605      	mov	r5, r0
 800f006:	460c      	mov	r4, r1
 800f008:	b913      	cbnz	r3, 800f010 <_fflush_r+0x10>
 800f00a:	2500      	movs	r5, #0
 800f00c:	4628      	mov	r0, r5
 800f00e:	bd38      	pop	{r3, r4, r5, pc}
 800f010:	b118      	cbz	r0, 800f01a <_fflush_r+0x1a>
 800f012:	6a03      	ldr	r3, [r0, #32]
 800f014:	b90b      	cbnz	r3, 800f01a <_fflush_r+0x1a>
 800f016:	f7fe f9ef 	bl	800d3f8 <__sinit>
 800f01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d0f3      	beq.n	800f00a <_fflush_r+0xa>
 800f022:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f024:	07d0      	lsls	r0, r2, #31
 800f026:	d404      	bmi.n	800f032 <_fflush_r+0x32>
 800f028:	0599      	lsls	r1, r3, #22
 800f02a:	d402      	bmi.n	800f032 <_fflush_r+0x32>
 800f02c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f02e:	f7fe fb0e 	bl	800d64e <__retarget_lock_acquire_recursive>
 800f032:	4628      	mov	r0, r5
 800f034:	4621      	mov	r1, r4
 800f036:	f7ff ff5d 	bl	800eef4 <__sflush_r>
 800f03a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f03c:	07da      	lsls	r2, r3, #31
 800f03e:	4605      	mov	r5, r0
 800f040:	d4e4      	bmi.n	800f00c <_fflush_r+0xc>
 800f042:	89a3      	ldrh	r3, [r4, #12]
 800f044:	059b      	lsls	r3, r3, #22
 800f046:	d4e1      	bmi.n	800f00c <_fflush_r+0xc>
 800f048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f04a:	f7fe fb01 	bl	800d650 <__retarget_lock_release_recursive>
 800f04e:	e7dd      	b.n	800f00c <_fflush_r+0xc>

0800f050 <memmove>:
 800f050:	4288      	cmp	r0, r1
 800f052:	b510      	push	{r4, lr}
 800f054:	eb01 0402 	add.w	r4, r1, r2
 800f058:	d902      	bls.n	800f060 <memmove+0x10>
 800f05a:	4284      	cmp	r4, r0
 800f05c:	4623      	mov	r3, r4
 800f05e:	d807      	bhi.n	800f070 <memmove+0x20>
 800f060:	1e43      	subs	r3, r0, #1
 800f062:	42a1      	cmp	r1, r4
 800f064:	d008      	beq.n	800f078 <memmove+0x28>
 800f066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f06a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f06e:	e7f8      	b.n	800f062 <memmove+0x12>
 800f070:	4402      	add	r2, r0
 800f072:	4601      	mov	r1, r0
 800f074:	428a      	cmp	r2, r1
 800f076:	d100      	bne.n	800f07a <memmove+0x2a>
 800f078:	bd10      	pop	{r4, pc}
 800f07a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f07e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f082:	e7f7      	b.n	800f074 <memmove+0x24>

0800f084 <_sbrk_r>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	4d06      	ldr	r5, [pc, #24]	; (800f0a0 <_sbrk_r+0x1c>)
 800f088:	2300      	movs	r3, #0
 800f08a:	4604      	mov	r4, r0
 800f08c:	4608      	mov	r0, r1
 800f08e:	602b      	str	r3, [r5, #0]
 800f090:	f7f3 f882 	bl	8002198 <_sbrk>
 800f094:	1c43      	adds	r3, r0, #1
 800f096:	d102      	bne.n	800f09e <_sbrk_r+0x1a>
 800f098:	682b      	ldr	r3, [r5, #0]
 800f09a:	b103      	cbz	r3, 800f09e <_sbrk_r+0x1a>
 800f09c:	6023      	str	r3, [r4, #0]
 800f09e:	bd38      	pop	{r3, r4, r5, pc}
 800f0a0:	20002310 	.word	0x20002310

0800f0a4 <memcpy>:
 800f0a4:	440a      	add	r2, r1
 800f0a6:	4291      	cmp	r1, r2
 800f0a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f0ac:	d100      	bne.n	800f0b0 <memcpy+0xc>
 800f0ae:	4770      	bx	lr
 800f0b0:	b510      	push	{r4, lr}
 800f0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0ba:	4291      	cmp	r1, r2
 800f0bc:	d1f9      	bne.n	800f0b2 <memcpy+0xe>
 800f0be:	bd10      	pop	{r4, pc}

0800f0c0 <__assert_func>:
 800f0c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0c2:	4614      	mov	r4, r2
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	4b09      	ldr	r3, [pc, #36]	; (800f0ec <__assert_func+0x2c>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4605      	mov	r5, r0
 800f0cc:	68d8      	ldr	r0, [r3, #12]
 800f0ce:	b14c      	cbz	r4, 800f0e4 <__assert_func+0x24>
 800f0d0:	4b07      	ldr	r3, [pc, #28]	; (800f0f0 <__assert_func+0x30>)
 800f0d2:	9100      	str	r1, [sp, #0]
 800f0d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f0d8:	4906      	ldr	r1, [pc, #24]	; (800f0f4 <__assert_func+0x34>)
 800f0da:	462b      	mov	r3, r5
 800f0dc:	f000 f872 	bl	800f1c4 <fiprintf>
 800f0e0:	f000 f882 	bl	800f1e8 <abort>
 800f0e4:	4b04      	ldr	r3, [pc, #16]	; (800f0f8 <__assert_func+0x38>)
 800f0e6:	461c      	mov	r4, r3
 800f0e8:	e7f3      	b.n	800f0d2 <__assert_func+0x12>
 800f0ea:	bf00      	nop
 800f0ec:	2000017c 	.word	0x2000017c
 800f0f0:	0800fa0f 	.word	0x0800fa0f
 800f0f4:	0800fa1c 	.word	0x0800fa1c
 800f0f8:	0800fa4a 	.word	0x0800fa4a

0800f0fc <_calloc_r>:
 800f0fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f0fe:	fba1 2402 	umull	r2, r4, r1, r2
 800f102:	b94c      	cbnz	r4, 800f118 <_calloc_r+0x1c>
 800f104:	4611      	mov	r1, r2
 800f106:	9201      	str	r2, [sp, #4]
 800f108:	f7ff f994 	bl	800e434 <_malloc_r>
 800f10c:	9a01      	ldr	r2, [sp, #4]
 800f10e:	4605      	mov	r5, r0
 800f110:	b930      	cbnz	r0, 800f120 <_calloc_r+0x24>
 800f112:	4628      	mov	r0, r5
 800f114:	b003      	add	sp, #12
 800f116:	bd30      	pop	{r4, r5, pc}
 800f118:	220c      	movs	r2, #12
 800f11a:	6002      	str	r2, [r0, #0]
 800f11c:	2500      	movs	r5, #0
 800f11e:	e7f8      	b.n	800f112 <_calloc_r+0x16>
 800f120:	4621      	mov	r1, r4
 800f122:	f7fe fa16 	bl	800d552 <memset>
 800f126:	e7f4      	b.n	800f112 <_calloc_r+0x16>

0800f128 <__ascii_mbtowc>:
 800f128:	b082      	sub	sp, #8
 800f12a:	b901      	cbnz	r1, 800f12e <__ascii_mbtowc+0x6>
 800f12c:	a901      	add	r1, sp, #4
 800f12e:	b142      	cbz	r2, 800f142 <__ascii_mbtowc+0x1a>
 800f130:	b14b      	cbz	r3, 800f146 <__ascii_mbtowc+0x1e>
 800f132:	7813      	ldrb	r3, [r2, #0]
 800f134:	600b      	str	r3, [r1, #0]
 800f136:	7812      	ldrb	r2, [r2, #0]
 800f138:	1e10      	subs	r0, r2, #0
 800f13a:	bf18      	it	ne
 800f13c:	2001      	movne	r0, #1
 800f13e:	b002      	add	sp, #8
 800f140:	4770      	bx	lr
 800f142:	4610      	mov	r0, r2
 800f144:	e7fb      	b.n	800f13e <__ascii_mbtowc+0x16>
 800f146:	f06f 0001 	mvn.w	r0, #1
 800f14a:	e7f8      	b.n	800f13e <__ascii_mbtowc+0x16>

0800f14c <_realloc_r>:
 800f14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f150:	4680      	mov	r8, r0
 800f152:	4614      	mov	r4, r2
 800f154:	460e      	mov	r6, r1
 800f156:	b921      	cbnz	r1, 800f162 <_realloc_r+0x16>
 800f158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f15c:	4611      	mov	r1, r2
 800f15e:	f7ff b969 	b.w	800e434 <_malloc_r>
 800f162:	b92a      	cbnz	r2, 800f170 <_realloc_r+0x24>
 800f164:	f7ff f8f2 	bl	800e34c <_free_r>
 800f168:	4625      	mov	r5, r4
 800f16a:	4628      	mov	r0, r5
 800f16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f170:	f000 f841 	bl	800f1f6 <_malloc_usable_size_r>
 800f174:	4284      	cmp	r4, r0
 800f176:	4607      	mov	r7, r0
 800f178:	d802      	bhi.n	800f180 <_realloc_r+0x34>
 800f17a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f17e:	d812      	bhi.n	800f1a6 <_realloc_r+0x5a>
 800f180:	4621      	mov	r1, r4
 800f182:	4640      	mov	r0, r8
 800f184:	f7ff f956 	bl	800e434 <_malloc_r>
 800f188:	4605      	mov	r5, r0
 800f18a:	2800      	cmp	r0, #0
 800f18c:	d0ed      	beq.n	800f16a <_realloc_r+0x1e>
 800f18e:	42bc      	cmp	r4, r7
 800f190:	4622      	mov	r2, r4
 800f192:	4631      	mov	r1, r6
 800f194:	bf28      	it	cs
 800f196:	463a      	movcs	r2, r7
 800f198:	f7ff ff84 	bl	800f0a4 <memcpy>
 800f19c:	4631      	mov	r1, r6
 800f19e:	4640      	mov	r0, r8
 800f1a0:	f7ff f8d4 	bl	800e34c <_free_r>
 800f1a4:	e7e1      	b.n	800f16a <_realloc_r+0x1e>
 800f1a6:	4635      	mov	r5, r6
 800f1a8:	e7df      	b.n	800f16a <_realloc_r+0x1e>

0800f1aa <__ascii_wctomb>:
 800f1aa:	b149      	cbz	r1, 800f1c0 <__ascii_wctomb+0x16>
 800f1ac:	2aff      	cmp	r2, #255	; 0xff
 800f1ae:	bf85      	ittet	hi
 800f1b0:	238a      	movhi	r3, #138	; 0x8a
 800f1b2:	6003      	strhi	r3, [r0, #0]
 800f1b4:	700a      	strbls	r2, [r1, #0]
 800f1b6:	f04f 30ff 	movhi.w	r0, #4294967295
 800f1ba:	bf98      	it	ls
 800f1bc:	2001      	movls	r0, #1
 800f1be:	4770      	bx	lr
 800f1c0:	4608      	mov	r0, r1
 800f1c2:	4770      	bx	lr

0800f1c4 <fiprintf>:
 800f1c4:	b40e      	push	{r1, r2, r3}
 800f1c6:	b503      	push	{r0, r1, lr}
 800f1c8:	4601      	mov	r1, r0
 800f1ca:	ab03      	add	r3, sp, #12
 800f1cc:	4805      	ldr	r0, [pc, #20]	; (800f1e4 <fiprintf+0x20>)
 800f1ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1d2:	6800      	ldr	r0, [r0, #0]
 800f1d4:	9301      	str	r3, [sp, #4]
 800f1d6:	f000 f83f 	bl	800f258 <_vfiprintf_r>
 800f1da:	b002      	add	sp, #8
 800f1dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1e0:	b003      	add	sp, #12
 800f1e2:	4770      	bx	lr
 800f1e4:	2000017c 	.word	0x2000017c

0800f1e8 <abort>:
 800f1e8:	b508      	push	{r3, lr}
 800f1ea:	2006      	movs	r0, #6
 800f1ec:	f000 fa0c 	bl	800f608 <raise>
 800f1f0:	2001      	movs	r0, #1
 800f1f2:	f7f2 ff59 	bl	80020a8 <_exit>

0800f1f6 <_malloc_usable_size_r>:
 800f1f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1fa:	1f18      	subs	r0, r3, #4
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	bfbc      	itt	lt
 800f200:	580b      	ldrlt	r3, [r1, r0]
 800f202:	18c0      	addlt	r0, r0, r3
 800f204:	4770      	bx	lr

0800f206 <__sfputc_r>:
 800f206:	6893      	ldr	r3, [r2, #8]
 800f208:	3b01      	subs	r3, #1
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	b410      	push	{r4}
 800f20e:	6093      	str	r3, [r2, #8]
 800f210:	da08      	bge.n	800f224 <__sfputc_r+0x1e>
 800f212:	6994      	ldr	r4, [r2, #24]
 800f214:	42a3      	cmp	r3, r4
 800f216:	db01      	blt.n	800f21c <__sfputc_r+0x16>
 800f218:	290a      	cmp	r1, #10
 800f21a:	d103      	bne.n	800f224 <__sfputc_r+0x1e>
 800f21c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f220:	f000 b934 	b.w	800f48c <__swbuf_r>
 800f224:	6813      	ldr	r3, [r2, #0]
 800f226:	1c58      	adds	r0, r3, #1
 800f228:	6010      	str	r0, [r2, #0]
 800f22a:	7019      	strb	r1, [r3, #0]
 800f22c:	4608      	mov	r0, r1
 800f22e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f232:	4770      	bx	lr

0800f234 <__sfputs_r>:
 800f234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f236:	4606      	mov	r6, r0
 800f238:	460f      	mov	r7, r1
 800f23a:	4614      	mov	r4, r2
 800f23c:	18d5      	adds	r5, r2, r3
 800f23e:	42ac      	cmp	r4, r5
 800f240:	d101      	bne.n	800f246 <__sfputs_r+0x12>
 800f242:	2000      	movs	r0, #0
 800f244:	e007      	b.n	800f256 <__sfputs_r+0x22>
 800f246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f24a:	463a      	mov	r2, r7
 800f24c:	4630      	mov	r0, r6
 800f24e:	f7ff ffda 	bl	800f206 <__sfputc_r>
 800f252:	1c43      	adds	r3, r0, #1
 800f254:	d1f3      	bne.n	800f23e <__sfputs_r+0xa>
 800f256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f258 <_vfiprintf_r>:
 800f258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f25c:	460d      	mov	r5, r1
 800f25e:	b09d      	sub	sp, #116	; 0x74
 800f260:	4614      	mov	r4, r2
 800f262:	4698      	mov	r8, r3
 800f264:	4606      	mov	r6, r0
 800f266:	b118      	cbz	r0, 800f270 <_vfiprintf_r+0x18>
 800f268:	6a03      	ldr	r3, [r0, #32]
 800f26a:	b90b      	cbnz	r3, 800f270 <_vfiprintf_r+0x18>
 800f26c:	f7fe f8c4 	bl	800d3f8 <__sinit>
 800f270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f272:	07d9      	lsls	r1, r3, #31
 800f274:	d405      	bmi.n	800f282 <_vfiprintf_r+0x2a>
 800f276:	89ab      	ldrh	r3, [r5, #12]
 800f278:	059a      	lsls	r2, r3, #22
 800f27a:	d402      	bmi.n	800f282 <_vfiprintf_r+0x2a>
 800f27c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f27e:	f7fe f9e6 	bl	800d64e <__retarget_lock_acquire_recursive>
 800f282:	89ab      	ldrh	r3, [r5, #12]
 800f284:	071b      	lsls	r3, r3, #28
 800f286:	d501      	bpl.n	800f28c <_vfiprintf_r+0x34>
 800f288:	692b      	ldr	r3, [r5, #16]
 800f28a:	b99b      	cbnz	r3, 800f2b4 <_vfiprintf_r+0x5c>
 800f28c:	4629      	mov	r1, r5
 800f28e:	4630      	mov	r0, r6
 800f290:	f000 f93a 	bl	800f508 <__swsetup_r>
 800f294:	b170      	cbz	r0, 800f2b4 <_vfiprintf_r+0x5c>
 800f296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f298:	07dc      	lsls	r4, r3, #31
 800f29a:	d504      	bpl.n	800f2a6 <_vfiprintf_r+0x4e>
 800f29c:	f04f 30ff 	mov.w	r0, #4294967295
 800f2a0:	b01d      	add	sp, #116	; 0x74
 800f2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a6:	89ab      	ldrh	r3, [r5, #12]
 800f2a8:	0598      	lsls	r0, r3, #22
 800f2aa:	d4f7      	bmi.n	800f29c <_vfiprintf_r+0x44>
 800f2ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2ae:	f7fe f9cf 	bl	800d650 <__retarget_lock_release_recursive>
 800f2b2:	e7f3      	b.n	800f29c <_vfiprintf_r+0x44>
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800f2b8:	2320      	movs	r3, #32
 800f2ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2be:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2c2:	2330      	movs	r3, #48	; 0x30
 800f2c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f478 <_vfiprintf_r+0x220>
 800f2c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2cc:	f04f 0901 	mov.w	r9, #1
 800f2d0:	4623      	mov	r3, r4
 800f2d2:	469a      	mov	sl, r3
 800f2d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2d8:	b10a      	cbz	r2, 800f2de <_vfiprintf_r+0x86>
 800f2da:	2a25      	cmp	r2, #37	; 0x25
 800f2dc:	d1f9      	bne.n	800f2d2 <_vfiprintf_r+0x7a>
 800f2de:	ebba 0b04 	subs.w	fp, sl, r4
 800f2e2:	d00b      	beq.n	800f2fc <_vfiprintf_r+0xa4>
 800f2e4:	465b      	mov	r3, fp
 800f2e6:	4622      	mov	r2, r4
 800f2e8:	4629      	mov	r1, r5
 800f2ea:	4630      	mov	r0, r6
 800f2ec:	f7ff ffa2 	bl	800f234 <__sfputs_r>
 800f2f0:	3001      	adds	r0, #1
 800f2f2:	f000 80a9 	beq.w	800f448 <_vfiprintf_r+0x1f0>
 800f2f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2f8:	445a      	add	r2, fp
 800f2fa:	9209      	str	r2, [sp, #36]	; 0x24
 800f2fc:	f89a 3000 	ldrb.w	r3, [sl]
 800f300:	2b00      	cmp	r3, #0
 800f302:	f000 80a1 	beq.w	800f448 <_vfiprintf_r+0x1f0>
 800f306:	2300      	movs	r3, #0
 800f308:	f04f 32ff 	mov.w	r2, #4294967295
 800f30c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f310:	f10a 0a01 	add.w	sl, sl, #1
 800f314:	9304      	str	r3, [sp, #16]
 800f316:	9307      	str	r3, [sp, #28]
 800f318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f31c:	931a      	str	r3, [sp, #104]	; 0x68
 800f31e:	4654      	mov	r4, sl
 800f320:	2205      	movs	r2, #5
 800f322:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f326:	4854      	ldr	r0, [pc, #336]	; (800f478 <_vfiprintf_r+0x220>)
 800f328:	f7f0 ff5a 	bl	80001e0 <memchr>
 800f32c:	9a04      	ldr	r2, [sp, #16]
 800f32e:	b9d8      	cbnz	r0, 800f368 <_vfiprintf_r+0x110>
 800f330:	06d1      	lsls	r1, r2, #27
 800f332:	bf44      	itt	mi
 800f334:	2320      	movmi	r3, #32
 800f336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f33a:	0713      	lsls	r3, r2, #28
 800f33c:	bf44      	itt	mi
 800f33e:	232b      	movmi	r3, #43	; 0x2b
 800f340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f344:	f89a 3000 	ldrb.w	r3, [sl]
 800f348:	2b2a      	cmp	r3, #42	; 0x2a
 800f34a:	d015      	beq.n	800f378 <_vfiprintf_r+0x120>
 800f34c:	9a07      	ldr	r2, [sp, #28]
 800f34e:	4654      	mov	r4, sl
 800f350:	2000      	movs	r0, #0
 800f352:	f04f 0c0a 	mov.w	ip, #10
 800f356:	4621      	mov	r1, r4
 800f358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f35c:	3b30      	subs	r3, #48	; 0x30
 800f35e:	2b09      	cmp	r3, #9
 800f360:	d94d      	bls.n	800f3fe <_vfiprintf_r+0x1a6>
 800f362:	b1b0      	cbz	r0, 800f392 <_vfiprintf_r+0x13a>
 800f364:	9207      	str	r2, [sp, #28]
 800f366:	e014      	b.n	800f392 <_vfiprintf_r+0x13a>
 800f368:	eba0 0308 	sub.w	r3, r0, r8
 800f36c:	fa09 f303 	lsl.w	r3, r9, r3
 800f370:	4313      	orrs	r3, r2
 800f372:	9304      	str	r3, [sp, #16]
 800f374:	46a2      	mov	sl, r4
 800f376:	e7d2      	b.n	800f31e <_vfiprintf_r+0xc6>
 800f378:	9b03      	ldr	r3, [sp, #12]
 800f37a:	1d19      	adds	r1, r3, #4
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	9103      	str	r1, [sp, #12]
 800f380:	2b00      	cmp	r3, #0
 800f382:	bfbb      	ittet	lt
 800f384:	425b      	neglt	r3, r3
 800f386:	f042 0202 	orrlt.w	r2, r2, #2
 800f38a:	9307      	strge	r3, [sp, #28]
 800f38c:	9307      	strlt	r3, [sp, #28]
 800f38e:	bfb8      	it	lt
 800f390:	9204      	strlt	r2, [sp, #16]
 800f392:	7823      	ldrb	r3, [r4, #0]
 800f394:	2b2e      	cmp	r3, #46	; 0x2e
 800f396:	d10c      	bne.n	800f3b2 <_vfiprintf_r+0x15a>
 800f398:	7863      	ldrb	r3, [r4, #1]
 800f39a:	2b2a      	cmp	r3, #42	; 0x2a
 800f39c:	d134      	bne.n	800f408 <_vfiprintf_r+0x1b0>
 800f39e:	9b03      	ldr	r3, [sp, #12]
 800f3a0:	1d1a      	adds	r2, r3, #4
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	9203      	str	r2, [sp, #12]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	bfb8      	it	lt
 800f3aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800f3ae:	3402      	adds	r4, #2
 800f3b0:	9305      	str	r3, [sp, #20]
 800f3b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f488 <_vfiprintf_r+0x230>
 800f3b6:	7821      	ldrb	r1, [r4, #0]
 800f3b8:	2203      	movs	r2, #3
 800f3ba:	4650      	mov	r0, sl
 800f3bc:	f7f0 ff10 	bl	80001e0 <memchr>
 800f3c0:	b138      	cbz	r0, 800f3d2 <_vfiprintf_r+0x17a>
 800f3c2:	9b04      	ldr	r3, [sp, #16]
 800f3c4:	eba0 000a 	sub.w	r0, r0, sl
 800f3c8:	2240      	movs	r2, #64	; 0x40
 800f3ca:	4082      	lsls	r2, r0
 800f3cc:	4313      	orrs	r3, r2
 800f3ce:	3401      	adds	r4, #1
 800f3d0:	9304      	str	r3, [sp, #16]
 800f3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3d6:	4829      	ldr	r0, [pc, #164]	; (800f47c <_vfiprintf_r+0x224>)
 800f3d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3dc:	2206      	movs	r2, #6
 800f3de:	f7f0 feff 	bl	80001e0 <memchr>
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d03f      	beq.n	800f466 <_vfiprintf_r+0x20e>
 800f3e6:	4b26      	ldr	r3, [pc, #152]	; (800f480 <_vfiprintf_r+0x228>)
 800f3e8:	bb1b      	cbnz	r3, 800f432 <_vfiprintf_r+0x1da>
 800f3ea:	9b03      	ldr	r3, [sp, #12]
 800f3ec:	3307      	adds	r3, #7
 800f3ee:	f023 0307 	bic.w	r3, r3, #7
 800f3f2:	3308      	adds	r3, #8
 800f3f4:	9303      	str	r3, [sp, #12]
 800f3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3f8:	443b      	add	r3, r7
 800f3fa:	9309      	str	r3, [sp, #36]	; 0x24
 800f3fc:	e768      	b.n	800f2d0 <_vfiprintf_r+0x78>
 800f3fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800f402:	460c      	mov	r4, r1
 800f404:	2001      	movs	r0, #1
 800f406:	e7a6      	b.n	800f356 <_vfiprintf_r+0xfe>
 800f408:	2300      	movs	r3, #0
 800f40a:	3401      	adds	r4, #1
 800f40c:	9305      	str	r3, [sp, #20]
 800f40e:	4619      	mov	r1, r3
 800f410:	f04f 0c0a 	mov.w	ip, #10
 800f414:	4620      	mov	r0, r4
 800f416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f41a:	3a30      	subs	r2, #48	; 0x30
 800f41c:	2a09      	cmp	r2, #9
 800f41e:	d903      	bls.n	800f428 <_vfiprintf_r+0x1d0>
 800f420:	2b00      	cmp	r3, #0
 800f422:	d0c6      	beq.n	800f3b2 <_vfiprintf_r+0x15a>
 800f424:	9105      	str	r1, [sp, #20]
 800f426:	e7c4      	b.n	800f3b2 <_vfiprintf_r+0x15a>
 800f428:	fb0c 2101 	mla	r1, ip, r1, r2
 800f42c:	4604      	mov	r4, r0
 800f42e:	2301      	movs	r3, #1
 800f430:	e7f0      	b.n	800f414 <_vfiprintf_r+0x1bc>
 800f432:	ab03      	add	r3, sp, #12
 800f434:	9300      	str	r3, [sp, #0]
 800f436:	462a      	mov	r2, r5
 800f438:	4b12      	ldr	r3, [pc, #72]	; (800f484 <_vfiprintf_r+0x22c>)
 800f43a:	a904      	add	r1, sp, #16
 800f43c:	4630      	mov	r0, r6
 800f43e:	f7fd fb89 	bl	800cb54 <_printf_float>
 800f442:	4607      	mov	r7, r0
 800f444:	1c78      	adds	r0, r7, #1
 800f446:	d1d6      	bne.n	800f3f6 <_vfiprintf_r+0x19e>
 800f448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f44a:	07d9      	lsls	r1, r3, #31
 800f44c:	d405      	bmi.n	800f45a <_vfiprintf_r+0x202>
 800f44e:	89ab      	ldrh	r3, [r5, #12]
 800f450:	059a      	lsls	r2, r3, #22
 800f452:	d402      	bmi.n	800f45a <_vfiprintf_r+0x202>
 800f454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f456:	f7fe f8fb 	bl	800d650 <__retarget_lock_release_recursive>
 800f45a:	89ab      	ldrh	r3, [r5, #12]
 800f45c:	065b      	lsls	r3, r3, #25
 800f45e:	f53f af1d 	bmi.w	800f29c <_vfiprintf_r+0x44>
 800f462:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f464:	e71c      	b.n	800f2a0 <_vfiprintf_r+0x48>
 800f466:	ab03      	add	r3, sp, #12
 800f468:	9300      	str	r3, [sp, #0]
 800f46a:	462a      	mov	r2, r5
 800f46c:	4b05      	ldr	r3, [pc, #20]	; (800f484 <_vfiprintf_r+0x22c>)
 800f46e:	a904      	add	r1, sp, #16
 800f470:	4630      	mov	r0, r6
 800f472:	f7fd fe13 	bl	800d09c <_printf_i>
 800f476:	e7e4      	b.n	800f442 <_vfiprintf_r+0x1ea>
 800f478:	0800f9f4 	.word	0x0800f9f4
 800f47c:	0800f9fe 	.word	0x0800f9fe
 800f480:	0800cb55 	.word	0x0800cb55
 800f484:	0800f235 	.word	0x0800f235
 800f488:	0800f9fa 	.word	0x0800f9fa

0800f48c <__swbuf_r>:
 800f48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f48e:	460e      	mov	r6, r1
 800f490:	4614      	mov	r4, r2
 800f492:	4605      	mov	r5, r0
 800f494:	b118      	cbz	r0, 800f49e <__swbuf_r+0x12>
 800f496:	6a03      	ldr	r3, [r0, #32]
 800f498:	b90b      	cbnz	r3, 800f49e <__swbuf_r+0x12>
 800f49a:	f7fd ffad 	bl	800d3f8 <__sinit>
 800f49e:	69a3      	ldr	r3, [r4, #24]
 800f4a0:	60a3      	str	r3, [r4, #8]
 800f4a2:	89a3      	ldrh	r3, [r4, #12]
 800f4a4:	071a      	lsls	r2, r3, #28
 800f4a6:	d525      	bpl.n	800f4f4 <__swbuf_r+0x68>
 800f4a8:	6923      	ldr	r3, [r4, #16]
 800f4aa:	b31b      	cbz	r3, 800f4f4 <__swbuf_r+0x68>
 800f4ac:	6823      	ldr	r3, [r4, #0]
 800f4ae:	6922      	ldr	r2, [r4, #16]
 800f4b0:	1a98      	subs	r0, r3, r2
 800f4b2:	6963      	ldr	r3, [r4, #20]
 800f4b4:	b2f6      	uxtb	r6, r6
 800f4b6:	4283      	cmp	r3, r0
 800f4b8:	4637      	mov	r7, r6
 800f4ba:	dc04      	bgt.n	800f4c6 <__swbuf_r+0x3a>
 800f4bc:	4621      	mov	r1, r4
 800f4be:	4628      	mov	r0, r5
 800f4c0:	f7ff fd9e 	bl	800f000 <_fflush_r>
 800f4c4:	b9e0      	cbnz	r0, 800f500 <__swbuf_r+0x74>
 800f4c6:	68a3      	ldr	r3, [r4, #8]
 800f4c8:	3b01      	subs	r3, #1
 800f4ca:	60a3      	str	r3, [r4, #8]
 800f4cc:	6823      	ldr	r3, [r4, #0]
 800f4ce:	1c5a      	adds	r2, r3, #1
 800f4d0:	6022      	str	r2, [r4, #0]
 800f4d2:	701e      	strb	r6, [r3, #0]
 800f4d4:	6962      	ldr	r2, [r4, #20]
 800f4d6:	1c43      	adds	r3, r0, #1
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d004      	beq.n	800f4e6 <__swbuf_r+0x5a>
 800f4dc:	89a3      	ldrh	r3, [r4, #12]
 800f4de:	07db      	lsls	r3, r3, #31
 800f4e0:	d506      	bpl.n	800f4f0 <__swbuf_r+0x64>
 800f4e2:	2e0a      	cmp	r6, #10
 800f4e4:	d104      	bne.n	800f4f0 <__swbuf_r+0x64>
 800f4e6:	4621      	mov	r1, r4
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	f7ff fd89 	bl	800f000 <_fflush_r>
 800f4ee:	b938      	cbnz	r0, 800f500 <__swbuf_r+0x74>
 800f4f0:	4638      	mov	r0, r7
 800f4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4f4:	4621      	mov	r1, r4
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	f000 f806 	bl	800f508 <__swsetup_r>
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	d0d5      	beq.n	800f4ac <__swbuf_r+0x20>
 800f500:	f04f 37ff 	mov.w	r7, #4294967295
 800f504:	e7f4      	b.n	800f4f0 <__swbuf_r+0x64>
	...

0800f508 <__swsetup_r>:
 800f508:	b538      	push	{r3, r4, r5, lr}
 800f50a:	4b2a      	ldr	r3, [pc, #168]	; (800f5b4 <__swsetup_r+0xac>)
 800f50c:	4605      	mov	r5, r0
 800f50e:	6818      	ldr	r0, [r3, #0]
 800f510:	460c      	mov	r4, r1
 800f512:	b118      	cbz	r0, 800f51c <__swsetup_r+0x14>
 800f514:	6a03      	ldr	r3, [r0, #32]
 800f516:	b90b      	cbnz	r3, 800f51c <__swsetup_r+0x14>
 800f518:	f7fd ff6e 	bl	800d3f8 <__sinit>
 800f51c:	89a3      	ldrh	r3, [r4, #12]
 800f51e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f522:	0718      	lsls	r0, r3, #28
 800f524:	d422      	bmi.n	800f56c <__swsetup_r+0x64>
 800f526:	06d9      	lsls	r1, r3, #27
 800f528:	d407      	bmi.n	800f53a <__swsetup_r+0x32>
 800f52a:	2309      	movs	r3, #9
 800f52c:	602b      	str	r3, [r5, #0]
 800f52e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f532:	81a3      	strh	r3, [r4, #12]
 800f534:	f04f 30ff 	mov.w	r0, #4294967295
 800f538:	e034      	b.n	800f5a4 <__swsetup_r+0x9c>
 800f53a:	0758      	lsls	r0, r3, #29
 800f53c:	d512      	bpl.n	800f564 <__swsetup_r+0x5c>
 800f53e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f540:	b141      	cbz	r1, 800f554 <__swsetup_r+0x4c>
 800f542:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f546:	4299      	cmp	r1, r3
 800f548:	d002      	beq.n	800f550 <__swsetup_r+0x48>
 800f54a:	4628      	mov	r0, r5
 800f54c:	f7fe fefe 	bl	800e34c <_free_r>
 800f550:	2300      	movs	r3, #0
 800f552:	6363      	str	r3, [r4, #52]	; 0x34
 800f554:	89a3      	ldrh	r3, [r4, #12]
 800f556:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f55a:	81a3      	strh	r3, [r4, #12]
 800f55c:	2300      	movs	r3, #0
 800f55e:	6063      	str	r3, [r4, #4]
 800f560:	6923      	ldr	r3, [r4, #16]
 800f562:	6023      	str	r3, [r4, #0]
 800f564:	89a3      	ldrh	r3, [r4, #12]
 800f566:	f043 0308 	orr.w	r3, r3, #8
 800f56a:	81a3      	strh	r3, [r4, #12]
 800f56c:	6923      	ldr	r3, [r4, #16]
 800f56e:	b94b      	cbnz	r3, 800f584 <__swsetup_r+0x7c>
 800f570:	89a3      	ldrh	r3, [r4, #12]
 800f572:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f57a:	d003      	beq.n	800f584 <__swsetup_r+0x7c>
 800f57c:	4621      	mov	r1, r4
 800f57e:	4628      	mov	r0, r5
 800f580:	f000 f884 	bl	800f68c <__smakebuf_r>
 800f584:	89a0      	ldrh	r0, [r4, #12]
 800f586:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f58a:	f010 0301 	ands.w	r3, r0, #1
 800f58e:	d00a      	beq.n	800f5a6 <__swsetup_r+0x9e>
 800f590:	2300      	movs	r3, #0
 800f592:	60a3      	str	r3, [r4, #8]
 800f594:	6963      	ldr	r3, [r4, #20]
 800f596:	425b      	negs	r3, r3
 800f598:	61a3      	str	r3, [r4, #24]
 800f59a:	6923      	ldr	r3, [r4, #16]
 800f59c:	b943      	cbnz	r3, 800f5b0 <__swsetup_r+0xa8>
 800f59e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f5a2:	d1c4      	bne.n	800f52e <__swsetup_r+0x26>
 800f5a4:	bd38      	pop	{r3, r4, r5, pc}
 800f5a6:	0781      	lsls	r1, r0, #30
 800f5a8:	bf58      	it	pl
 800f5aa:	6963      	ldrpl	r3, [r4, #20]
 800f5ac:	60a3      	str	r3, [r4, #8]
 800f5ae:	e7f4      	b.n	800f59a <__swsetup_r+0x92>
 800f5b0:	2000      	movs	r0, #0
 800f5b2:	e7f7      	b.n	800f5a4 <__swsetup_r+0x9c>
 800f5b4:	2000017c 	.word	0x2000017c

0800f5b8 <_raise_r>:
 800f5b8:	291f      	cmp	r1, #31
 800f5ba:	b538      	push	{r3, r4, r5, lr}
 800f5bc:	4604      	mov	r4, r0
 800f5be:	460d      	mov	r5, r1
 800f5c0:	d904      	bls.n	800f5cc <_raise_r+0x14>
 800f5c2:	2316      	movs	r3, #22
 800f5c4:	6003      	str	r3, [r0, #0]
 800f5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ca:	bd38      	pop	{r3, r4, r5, pc}
 800f5cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f5ce:	b112      	cbz	r2, 800f5d6 <_raise_r+0x1e>
 800f5d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f5d4:	b94b      	cbnz	r3, 800f5ea <_raise_r+0x32>
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	f000 f830 	bl	800f63c <_getpid_r>
 800f5dc:	462a      	mov	r2, r5
 800f5de:	4601      	mov	r1, r0
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5e6:	f000 b817 	b.w	800f618 <_kill_r>
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d00a      	beq.n	800f604 <_raise_r+0x4c>
 800f5ee:	1c59      	adds	r1, r3, #1
 800f5f0:	d103      	bne.n	800f5fa <_raise_r+0x42>
 800f5f2:	2316      	movs	r3, #22
 800f5f4:	6003      	str	r3, [r0, #0]
 800f5f6:	2001      	movs	r0, #1
 800f5f8:	e7e7      	b.n	800f5ca <_raise_r+0x12>
 800f5fa:	2400      	movs	r4, #0
 800f5fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f600:	4628      	mov	r0, r5
 800f602:	4798      	blx	r3
 800f604:	2000      	movs	r0, #0
 800f606:	e7e0      	b.n	800f5ca <_raise_r+0x12>

0800f608 <raise>:
 800f608:	4b02      	ldr	r3, [pc, #8]	; (800f614 <raise+0xc>)
 800f60a:	4601      	mov	r1, r0
 800f60c:	6818      	ldr	r0, [r3, #0]
 800f60e:	f7ff bfd3 	b.w	800f5b8 <_raise_r>
 800f612:	bf00      	nop
 800f614:	2000017c 	.word	0x2000017c

0800f618 <_kill_r>:
 800f618:	b538      	push	{r3, r4, r5, lr}
 800f61a:	4d07      	ldr	r5, [pc, #28]	; (800f638 <_kill_r+0x20>)
 800f61c:	2300      	movs	r3, #0
 800f61e:	4604      	mov	r4, r0
 800f620:	4608      	mov	r0, r1
 800f622:	4611      	mov	r1, r2
 800f624:	602b      	str	r3, [r5, #0]
 800f626:	f7f2 fd2f 	bl	8002088 <_kill>
 800f62a:	1c43      	adds	r3, r0, #1
 800f62c:	d102      	bne.n	800f634 <_kill_r+0x1c>
 800f62e:	682b      	ldr	r3, [r5, #0]
 800f630:	b103      	cbz	r3, 800f634 <_kill_r+0x1c>
 800f632:	6023      	str	r3, [r4, #0]
 800f634:	bd38      	pop	{r3, r4, r5, pc}
 800f636:	bf00      	nop
 800f638:	20002310 	.word	0x20002310

0800f63c <_getpid_r>:
 800f63c:	f7f2 bd1c 	b.w	8002078 <_getpid>

0800f640 <__swhatbuf_r>:
 800f640:	b570      	push	{r4, r5, r6, lr}
 800f642:	460c      	mov	r4, r1
 800f644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f648:	2900      	cmp	r1, #0
 800f64a:	b096      	sub	sp, #88	; 0x58
 800f64c:	4615      	mov	r5, r2
 800f64e:	461e      	mov	r6, r3
 800f650:	da0d      	bge.n	800f66e <__swhatbuf_r+0x2e>
 800f652:	89a3      	ldrh	r3, [r4, #12]
 800f654:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f658:	f04f 0100 	mov.w	r1, #0
 800f65c:	bf0c      	ite	eq
 800f65e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f662:	2340      	movne	r3, #64	; 0x40
 800f664:	2000      	movs	r0, #0
 800f666:	6031      	str	r1, [r6, #0]
 800f668:	602b      	str	r3, [r5, #0]
 800f66a:	b016      	add	sp, #88	; 0x58
 800f66c:	bd70      	pop	{r4, r5, r6, pc}
 800f66e:	466a      	mov	r2, sp
 800f670:	f000 f848 	bl	800f704 <_fstat_r>
 800f674:	2800      	cmp	r0, #0
 800f676:	dbec      	blt.n	800f652 <__swhatbuf_r+0x12>
 800f678:	9901      	ldr	r1, [sp, #4]
 800f67a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f67e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f682:	4259      	negs	r1, r3
 800f684:	4159      	adcs	r1, r3
 800f686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f68a:	e7eb      	b.n	800f664 <__swhatbuf_r+0x24>

0800f68c <__smakebuf_r>:
 800f68c:	898b      	ldrh	r3, [r1, #12]
 800f68e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f690:	079d      	lsls	r5, r3, #30
 800f692:	4606      	mov	r6, r0
 800f694:	460c      	mov	r4, r1
 800f696:	d507      	bpl.n	800f6a8 <__smakebuf_r+0x1c>
 800f698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f69c:	6023      	str	r3, [r4, #0]
 800f69e:	6123      	str	r3, [r4, #16]
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	6163      	str	r3, [r4, #20]
 800f6a4:	b002      	add	sp, #8
 800f6a6:	bd70      	pop	{r4, r5, r6, pc}
 800f6a8:	ab01      	add	r3, sp, #4
 800f6aa:	466a      	mov	r2, sp
 800f6ac:	f7ff ffc8 	bl	800f640 <__swhatbuf_r>
 800f6b0:	9900      	ldr	r1, [sp, #0]
 800f6b2:	4605      	mov	r5, r0
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	f7fe febd 	bl	800e434 <_malloc_r>
 800f6ba:	b948      	cbnz	r0, 800f6d0 <__smakebuf_r+0x44>
 800f6bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6c0:	059a      	lsls	r2, r3, #22
 800f6c2:	d4ef      	bmi.n	800f6a4 <__smakebuf_r+0x18>
 800f6c4:	f023 0303 	bic.w	r3, r3, #3
 800f6c8:	f043 0302 	orr.w	r3, r3, #2
 800f6cc:	81a3      	strh	r3, [r4, #12]
 800f6ce:	e7e3      	b.n	800f698 <__smakebuf_r+0xc>
 800f6d0:	89a3      	ldrh	r3, [r4, #12]
 800f6d2:	6020      	str	r0, [r4, #0]
 800f6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6d8:	81a3      	strh	r3, [r4, #12]
 800f6da:	9b00      	ldr	r3, [sp, #0]
 800f6dc:	6163      	str	r3, [r4, #20]
 800f6de:	9b01      	ldr	r3, [sp, #4]
 800f6e0:	6120      	str	r0, [r4, #16]
 800f6e2:	b15b      	cbz	r3, 800f6fc <__smakebuf_r+0x70>
 800f6e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	f000 f81d 	bl	800f728 <_isatty_r>
 800f6ee:	b128      	cbz	r0, 800f6fc <__smakebuf_r+0x70>
 800f6f0:	89a3      	ldrh	r3, [r4, #12]
 800f6f2:	f023 0303 	bic.w	r3, r3, #3
 800f6f6:	f043 0301 	orr.w	r3, r3, #1
 800f6fa:	81a3      	strh	r3, [r4, #12]
 800f6fc:	89a3      	ldrh	r3, [r4, #12]
 800f6fe:	431d      	orrs	r5, r3
 800f700:	81a5      	strh	r5, [r4, #12]
 800f702:	e7cf      	b.n	800f6a4 <__smakebuf_r+0x18>

0800f704 <_fstat_r>:
 800f704:	b538      	push	{r3, r4, r5, lr}
 800f706:	4d07      	ldr	r5, [pc, #28]	; (800f724 <_fstat_r+0x20>)
 800f708:	2300      	movs	r3, #0
 800f70a:	4604      	mov	r4, r0
 800f70c:	4608      	mov	r0, r1
 800f70e:	4611      	mov	r1, r2
 800f710:	602b      	str	r3, [r5, #0]
 800f712:	f7f2 fd18 	bl	8002146 <_fstat>
 800f716:	1c43      	adds	r3, r0, #1
 800f718:	d102      	bne.n	800f720 <_fstat_r+0x1c>
 800f71a:	682b      	ldr	r3, [r5, #0]
 800f71c:	b103      	cbz	r3, 800f720 <_fstat_r+0x1c>
 800f71e:	6023      	str	r3, [r4, #0]
 800f720:	bd38      	pop	{r3, r4, r5, pc}
 800f722:	bf00      	nop
 800f724:	20002310 	.word	0x20002310

0800f728 <_isatty_r>:
 800f728:	b538      	push	{r3, r4, r5, lr}
 800f72a:	4d06      	ldr	r5, [pc, #24]	; (800f744 <_isatty_r+0x1c>)
 800f72c:	2300      	movs	r3, #0
 800f72e:	4604      	mov	r4, r0
 800f730:	4608      	mov	r0, r1
 800f732:	602b      	str	r3, [r5, #0]
 800f734:	f7f2 fd17 	bl	8002166 <_isatty>
 800f738:	1c43      	adds	r3, r0, #1
 800f73a:	d102      	bne.n	800f742 <_isatty_r+0x1a>
 800f73c:	682b      	ldr	r3, [r5, #0]
 800f73e:	b103      	cbz	r3, 800f742 <_isatty_r+0x1a>
 800f740:	6023      	str	r3, [r4, #0]
 800f742:	bd38      	pop	{r3, r4, r5, pc}
 800f744:	20002310 	.word	0x20002310

0800f748 <_init>:
 800f748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f74a:	bf00      	nop
 800f74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f74e:	bc08      	pop	{r3}
 800f750:	469e      	mov	lr, r3
 800f752:	4770      	bx	lr

0800f754 <_fini>:
 800f754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f756:	bf00      	nop
 800f758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f75a:	bc08      	pop	{r3}
 800f75c:	469e      	mov	lr, r3
 800f75e:	4770      	bx	lr
