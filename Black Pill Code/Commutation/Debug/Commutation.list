
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b068  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800b208  0800b208  0001b208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b594  0800b594  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  0800b594  0800b594  0001b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b59c  0800b59c  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b59c  0800b59c  0001b59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5a0  0800b5a0  0001b5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800b5a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000270  0800b814  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  0800b814  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011183  00000000  00000000  000202e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002caf  00000000  00000000  00031466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  00034118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc0  00000000  00000000  00035180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019998  00000000  00000000  00035e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000152eb  00000000  00000000  0004f7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009be5e  00000000  00000000  00064ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005440  00000000  00000000  00100924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00105d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000270 	.word	0x20000270
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b1f0 	.word	0x0800b1f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000274 	.word	0x20000274
 80001dc:	0800b1f0 	.word	0x0800b1f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <PrepareCommutation>:
HAL_StatusTypeDef StopSequence(void);
HAL_StatusTypeDef ChangePWM (void);

/* Private function ----------------------------------------------------------*/

HAL_StatusTypeDef PrepareCommutation () {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0

	// Read IDR for Hall Sensor status
	uint16_t Hall = (GPIOA->IDR & 0b111) - 1 + 6 * Registers[DirReg];
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <PrepareCommutation+0x78>)
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <PrepareCommutation+0x7c>)
 8000fa8:	885b      	ldrh	r3, [r3, #2]
 8000faa:	4619      	mov	r1, r3
 8000fac:	0049      	lsls	r1, r1, #1
 8000fae:	440b      	add	r3, r1
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	80fb      	strh	r3, [r7, #6]

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8000fbc:	88fa      	ldrh	r2, [r7, #6]
 8000fbe:	4915      	ldr	r1, [pc, #84]	; (8001014 <PrepareCommutation+0x80>)
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	440b      	add	r3, r1
 8000fca:	881a      	ldrh	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <PrepareCommutation+0x84>)
 8000fce:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 8000fd0:	88fa      	ldrh	r2, [r7, #6]
 8000fd2:	4910      	ldr	r1, [pc, #64]	; (8001014 <PrepareCommutation+0x80>)
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	440b      	add	r3, r1
 8000fde:	3304      	adds	r3, #4
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <PrepareCommutation+0x84>)
 8000fe4:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 8000fe6:	88fa      	ldrh	r2, [r7, #6]
 8000fe8:	490a      	ldr	r1, [pc, #40]	; (8001014 <PrepareCommutation+0x80>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	881a      	ldrh	r2, [r3, #0]
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <PrepareCommutation+0x84>)
 8000ffa:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8000ffc:	2300      	movs	r3, #0

}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40020000 	.word	0x40020000
 8001010:	20000090 	.word	0x20000090
 8001014:	20000000 	.word	0x20000000
 8001018:	40010000 	.word	0x40010000
 800101c:	00000000 	.word	0x00000000

08001020 <StartupSequence>:

	return HAL_OK;

}

HAL_StatusTypeDef StartupSequence () {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

	// Initialize some constantes
	Fapb1tclk = HAL_RCC_GetPCLK1Freq() * 2; 			// Get clock frequency for APB1 timer
 8001026:	f005 fe33 	bl	8006c90 <HAL_RCC_GetPCLK1Freq>
 800102a:	4603      	mov	r3, r0
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4a8e      	ldr	r2, [pc, #568]	; (8001268 <StartupSequence+0x248>)
 8001030:	6013      	str	r3, [r2, #0]
	Fapb2tclk = HAL_RCC_GetPCLK2Freq() * 2;				// Get clock frequency for APB2 timer
 8001032:	f005 fe41 	bl	8006cb8 <HAL_RCC_GetPCLK2Freq>
 8001036:	4603      	mov	r3, r0
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4a8c      	ldr	r2, [pc, #560]	; (800126c <StartupSequence+0x24c>)
 800103c:	6013      	str	r3, [r2, #0]
	RPMConst = (Fapb2tclk / (TIM9->PSC + 1)) * 1.35; 	// Calculate a constant to later be used for RPM calculation
 800103e:	4b8b      	ldr	r3, [pc, #556]	; (800126c <StartupSequence+0x24c>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4b8b      	ldr	r3, [pc, #556]	; (8001270 <StartupSequence+0x250>)
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	3301      	adds	r3, #1
 8001048:	fbb2 f3f3 	udiv	r3, r2, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa61 	bl	8000514 <__aeabi_ui2d>
 8001052:	a383      	add	r3, pc, #524	; (adr r3, 8001260 <StartupSequence+0x240>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fad6 	bl	8000608 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fda8 	bl	8000bb8 <__aeabi_d2uiz>
 8001068:	4603      	mov	r3, r0
 800106a:	4a82      	ldr	r2, [pc, #520]	; (8001274 <StartupSequence+0x254>)
 800106c:	6013      	str	r3, [r2, #0]

	// Make sure PWM is set for first commutation
	ChangePWM();
 800106e:	f000 f981 	bl	8001374 <ChangePWM>
	*/

	// Set registers for first commutation
	// Read IDR for Hall Sensor status
	// uint16_t Hall = (GPIOA->IDR & 0b111) + 6 * Direction + 3;
	uint16_t Hall = (GPIOA->IDR & 0b111) + 6 * Registers[DirReg] - 3;
 8001072:	4b81      	ldr	r3, [pc, #516]	; (8001278 <StartupSequence+0x258>)
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	b29b      	uxth	r3, r3
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	b29a      	uxth	r2, r3
 800107e:	4b7f      	ldr	r3, [pc, #508]	; (800127c <StartupSequence+0x25c>)
 8001080:	885b      	ldrh	r3, [r3, #2]
 8001082:	4619      	mov	r1, r3
 8001084:	0049      	lsls	r1, r1, #1
 8001086:	440b      	add	r3, r1
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	b29b      	uxth	r3, r3
 800108c:	4413      	add	r3, r2
 800108e:	b29b      	uxth	r3, r3
 8001090:	3b03      	subs	r3, #3
 8001092:	80fb      	strh	r3, [r7, #6]

	// Set registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8001094:	88fa      	ldrh	r2, [r7, #6]
 8001096:	497a      	ldr	r1, [pc, #488]	; (8001280 <StartupSequence+0x260>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	440b      	add	r3, r1
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	4b77      	ldr	r3, [pc, #476]	; (8001284 <StartupSequence+0x264>)
 80010a6:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	4975      	ldr	r1, [pc, #468]	; (8001280 <StartupSequence+0x260>)
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	440b      	add	r3, r1
 80010b6:	3304      	adds	r3, #4
 80010b8:	881a      	ldrh	r2, [r3, #0]
 80010ba:	4b72      	ldr	r3, [pc, #456]	; (8001284 <StartupSequence+0x264>)
 80010bc:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 80010be:	88fa      	ldrh	r2, [r7, #6]
 80010c0:	496f      	ldr	r1, [pc, #444]	; (8001280 <StartupSequence+0x260>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	440b      	add	r3, r1
 80010cc:	3302      	adds	r3, #2
 80010ce:	881a      	ldrh	r2, [r3, #0]
 80010d0:	4b6c      	ldr	r3, [pc, #432]	; (8001284 <StartupSequence+0x264>)
 80010d2:	61da      	str	r2, [r3, #28]

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 80010d4:	2100      	movs	r1, #0
 80010d6:	486c      	ldr	r0, [pc, #432]	; (8001288 <StartupSequence+0x268>)
 80010d8:	f005 ff32 	bl	8006f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 80010dc:	2104      	movs	r1, #4
 80010de:	486a      	ldr	r0, [pc, #424]	; (8001288 <StartupSequence+0x268>)
 80010e0:	f005 ff2e 	bl	8006f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 80010e4:	2108      	movs	r1, #8
 80010e6:	4868      	ldr	r0, [pc, #416]	; (8001288 <StartupSequence+0x268>)
 80010e8:	f005 ff2a 	bl	8006f40 <HAL_TIM_PWM_Start>

	// Start HallSensor timer in XOR mode
	HAL_TIMEx_HallSensor_Start (&htim2);
 80010ec:	4867      	ldr	r0, [pc, #412]	; (800128c <StartupSequence+0x26c>)
 80010ee:	f007 fa37 	bl	8008560 <HAL_TIMEx_HallSensor_Start>

	// Start ADC timer
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010f2:	2100      	movs	r1, #0
 80010f4:	4866      	ldr	r0, [pc, #408]	; (8001290 <StartupSequence+0x270>)
 80010f6:	f005 ff23 	bl	8006f40 <HAL_TIM_PWM_Start>

	// Start Temp timer
	// HAL_TIM_PWM_Start (&htim5, TIM_CHANNEL_1);

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 80010fa:	4b62      	ldr	r3, [pc, #392]	; (8001284 <StartupSequence+0x264>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	4a61      	ldr	r2, [pc, #388]	; (8001284 <StartupSequence+0x264>)
 8001100:	f023 0320 	bic.w	r3, r3, #32
 8001104:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 8001106:	4b5f      	ldr	r3, [pc, #380]	; (8001284 <StartupSequence+0x264>)
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	4a5e      	ldr	r2, [pc, #376]	; (8001284 <StartupSequence+0x264>)
 800110c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001110:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_UIE;
 8001112:	4b5c      	ldr	r3, [pc, #368]	; (8001284 <StartupSequence+0x264>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	4a5b      	ldr	r2, [pc, #364]	; (8001284 <StartupSequence+0x264>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 800111e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800112c:	60d3      	str	r3, [r2, #12]
	TIM3->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 3
 800112e:	4b59      	ldr	r3, [pc, #356]	; (8001294 <StartupSequence+0x274>)
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	4a58      	ldr	r2, [pc, #352]	; (8001294 <StartupSequence+0x274>)
 8001134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001138:	60d3      	str	r3, [r2, #12]
	TIM5->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 5
 800113a:	4b57      	ldr	r3, [pc, #348]	; (8001298 <StartupSequence+0x278>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	4a56      	ldr	r2, [pc, #344]	; (8001298 <StartupSequence+0x278>)
 8001140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001144:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8001146:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <StartupSequence+0x250>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	4a49      	ldr	r2, [pc, #292]	; (8001270 <StartupSequence+0x250>)
 800114c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001150:	60d3      	str	r3, [r2, #12]

	// Start all timers
	HAL_TIM_Base_Start_IT (&htim1);
 8001152:	484d      	ldr	r0, [pc, #308]	; (8001288 <StartupSequence+0x268>)
 8001154:	f005 fe14 	bl	8006d80 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim2);
 8001158:	484c      	ldr	r0, [pc, #304]	; (800128c <StartupSequence+0x26c>)
 800115a:	f005 fe11 	bl	8006d80 <HAL_TIM_Base_Start_IT>
	// HAL_TIM_Base_Start_IT (&htim3);
	// HAL_TIM_Base_Start_IT (&htim5);
	HAL_TIM_Base_Start_IT (&htim9);
 800115e:	484f      	ldr	r0, [pc, #316]	; (800129c <StartupSequence+0x27c>)
 8001160:	f005 fe0e 	bl	8006d80 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT (&htim9, TIM_CHANNEL_2);
 8001164:	2104      	movs	r1, #4
 8001166:	484d      	ldr	r0, [pc, #308]	; (800129c <StartupSequence+0x27c>)
 8001168:	f006 f84e 	bl	8007208 <HAL_TIM_IC_Start_IT>

	// Start ADC for current sensing
	ADC1->CR2 &= ~ADC_CR2_CONT; // Set to single conversion mode
 800116c:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <StartupSequence+0x280>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4a4b      	ldr	r2, [pc, #300]	; (80012a0 <StartupSequence+0x280>)
 8001172:	f023 0302 	bic.w	r3, r3, #2
 8001176:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_CONT;  // Set to continuous mode
 8001178:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <StartupSequence+0x280>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4a48      	ldr	r2, [pc, #288]	; (80012a0 <StartupSequence+0x280>)
 800117e:	f043 0302 	orr.w	r3, r3, #2
 8001182:	6093      	str	r3, [r2, #8]
	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	HAL_ADC_Start_IT(&hadc1);
 8001184:	4847      	ldr	r0, [pc, #284]	; (80012a4 <StartupSequence+0x284>)
 8001186:	f001 fcb5 	bl	8002af4 <HAL_ADC_Start_IT>

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 800118a:	4b3e      	ldr	r3, [pc, #248]	; (8001284 <StartupSequence+0x264>)
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	4a3d      	ldr	r2, [pc, #244]	; (8001284 <StartupSequence+0x264>)
 8001190:	f023 0320 	bic.w	r3, r3, #32
 8001194:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 8001196:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <StartupSequence+0x264>)
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	4a3a      	ldr	r2, [pc, #232]	; (8001284 <StartupSequence+0x264>)
 800119c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011a0:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 80011a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011b0:	6113      	str	r3, [r2, #16]
	TIM3->SR &= ~TIM_SR_TIF;		// Clear timer 3 interrupt flag
 80011b2:	4b38      	ldr	r3, [pc, #224]	; (8001294 <StartupSequence+0x274>)
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	4a37      	ldr	r2, [pc, #220]	; (8001294 <StartupSequence+0x274>)
 80011b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011bc:	6113      	str	r3, [r2, #16]
	TIM5->SR &= ~TIM_SR_TIF;		// Clear timer 5 interrupt flag
 80011be:	4b36      	ldr	r3, [pc, #216]	; (8001298 <StartupSequence+0x278>)
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	4a35      	ldr	r2, [pc, #212]	; (8001298 <StartupSequence+0x278>)
 80011c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011c8:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <StartupSequence+0x250>)
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	4a28      	ldr	r2, [pc, #160]	; (8001270 <StartupSequence+0x250>)
 80011d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011d4:	6113      	str	r3, [r2, #16]

	// Enable interrupts on the necessary timers
	TIM1->DIER |= TIM_DIER_UIE;		// Enable Update events in DIER register
 80011d6:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <StartupSequence+0x264>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	4a2a      	ldr	r2, [pc, #168]	; (8001284 <StartupSequence+0x264>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 80011e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f0:	60d3      	str	r3, [r2, #12]
	TIM3->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 3
 80011f2:	4b28      	ldr	r3, [pc, #160]	; (8001294 <StartupSequence+0x274>)
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	4a27      	ldr	r2, [pc, #156]	; (8001294 <StartupSequence+0x274>)
 80011f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fc:	60d3      	str	r3, [r2, #12]
	TIM5->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 5
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <StartupSequence+0x278>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	4a25      	ldr	r2, [pc, #148]	; (8001298 <StartupSequence+0x278>)
 8001204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001208:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <StartupSequence+0x250>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <StartupSequence+0x250>)
 8001210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001214:	60d3      	str	r3, [r2, #12]

	// Write some registers
	// ADC1->CR1  |= ADC_CR1_EOCIE;	// Enable ADC interrupts
	TIM1->CR2  |= TIM_CR2_CCPC; 	// Set CCPC in CR2 to preload CCxE, CCxNE and OCxM bits
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <StartupSequence+0x264>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <StartupSequence+0x264>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6053      	str	r3, [r2, #4]
	TIM1->BDTR &= ~TIM_BDTR_DTG;	// Reset DTG bits
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <StartupSequence+0x264>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <StartupSequence+0x264>)
 8001228:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= 0x8010;			// Set dead-time to 100ns and make sure to enable MOE bit
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <StartupSequence+0x264>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a14      	ldr	r2, [pc, #80]	; (8001284 <StartupSequence+0x264>)
 8001234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001238:	f043 0310 	orr.w	r3, r3, #16
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <StartupSequence+0x264>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <StartupSequence+0x264>)
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <StartupSequence+0x264>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <StartupSequence+0x264>)
 8001250:	f043 0320 	orr.w	r3, r3, #32
 8001254:	60d3      	str	r3, [r2, #12]

	return HAL_OK;
 8001256:	2300      	movs	r3, #0

}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	9999999a 	.word	0x9999999a
 8001264:	3ff59999 	.word	0x3ff59999
 8001268:	2000028c 	.word	0x2000028c
 800126c:	20000290 	.word	0x20000290
 8001270:	40014000 	.word	0x40014000
 8001274:	20000294 	.word	0x20000294
 8001278:	40020000 	.word	0x40020000
 800127c:	20000090 	.word	0x20000090
 8001280:	20000000 	.word	0x20000000
 8001284:	40010000 	.word	0x40010000
 8001288:	200004bc 	.word	0x200004bc
 800128c:	20000504 	.word	0x20000504
 8001290:	2000054c 	.word	0x2000054c
 8001294:	40000400 	.word	0x40000400
 8001298:	40000c00 	.word	0x40000c00
 800129c:	20000624 	.word	0x20000624
 80012a0:	40012000 	.word	0x40012000
 80012a4:	2000029c 	.word	0x2000029c

080012a8 <StopSequence>:

HAL_StatusTypeDef StopSequence(void) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

	// Stop HallSensor timer
	HAL_TIMEx_HallSensor_Stop (&htim2);
 80012ac:	482b      	ldr	r0, [pc, #172]	; (800135c <StopSequence+0xb4>)
 80012ae:	f007 f9d7 	bl	8008660 <HAL_TIMEx_HallSensor_Stop>

	// Disable all output channels
	TIM1->CCER  = 0x0000;
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <StopSequence+0xb8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = 0x0000;
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <StopSequence+0xb8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = 0x0000;
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <StopSequence+0xb8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	61da      	str	r2, [r3, #28]

	// Perform one last commutation event if not already disabled
	if ( (TIM1->DIER & TIM_DIER_COMIE) >= 1 ) { 		// If COMIE bit in DIER is set commutation events are still enabled
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <StopSequence+0xb8>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f003 0320 	and.w	r3, r3, #32
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <StopSequence+0x34>

		TIM1->EGR |= TIM_EGR_COMG; 						// Trigger commutation event
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <StopSequence+0xb8>)
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	4a22      	ldr	r2, [pc, #136]	; (8001360 <StopSequence+0xb8>)
 80012d6:	f043 0320 	orr.w	r3, r3, #32
 80012da:	6153      	str	r3, [r2, #20]
		// while ( (TIM1->SR & TIM_SR_COMIF) >= 1 ); 	// Wait until commutation event has happened

	}

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 80012dc:	4b20      	ldr	r3, [pc, #128]	; (8001360 <StopSequence+0xb8>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <StopSequence+0xb8>)
 80012e2:	f023 0320 	bic.w	r3, r3, #32
 80012e6:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <StopSequence+0xb8>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <StopSequence+0xb8>)
 80012ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012f2:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_UIE;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <StopSequence+0xb8>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a19      	ldr	r2, [pc, #100]	; (8001360 <StopSequence+0xb8>)
 80012fa:	f023 0301 	bic.w	r3, r3, #1
 80012fe:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8001300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800130e:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <StopSequence+0xbc>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4a13      	ldr	r2, [pc, #76]	; (8001364 <StopSequence+0xbc>)
 8001316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800131a:	60d3      	str	r3, [r2, #12]

	// Stop interrupts
	HAL_TIM_Base_Stop_IT (&htim1);
 800131c:	4812      	ldr	r0, [pc, #72]	; (8001368 <StopSequence+0xc0>)
 800131e:	f005 fd91 	bl	8006e44 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim2);
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <StopSequence+0xb4>)
 8001324:	f005 fd8e 	bl	8006e44 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim9);
 8001328:	4810      	ldr	r0, [pc, #64]	; (800136c <StopSequence+0xc4>)
 800132a:	f005 fd8b 	bl	8006e44 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT (&htim9, TIM_CHANNEL_2);
 800132e:	2104      	movs	r1, #4
 8001330:	480e      	ldr	r0, [pc, #56]	; (800136c <StopSequence+0xc4>)
 8001332:	f006 f883 	bl	800743c <HAL_TIM_IC_Stop_IT>

	// Stop PWM Timers
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_1);
 8001336:	2100      	movs	r1, #0
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <StopSequence+0xc0>)
 800133a:	f005 feb1 	bl	80070a0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_2);
 800133e:	2104      	movs	r1, #4
 8001340:	4809      	ldr	r0, [pc, #36]	; (8001368 <StopSequence+0xc0>)
 8001342:	f005 fead 	bl	80070a0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_3);
 8001346:	2108      	movs	r1, #8
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <StopSequence+0xc0>)
 800134a:	f005 fea9 	bl	80070a0 <HAL_TIM_PWM_Stop>

	Registers[RPMReg] = 0;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <StopSequence+0xc8>)
 8001350:	2200      	movs	r2, #0
 8001352:	80da      	strh	r2, [r3, #6]

	return HAL_OK;
 8001354:	2300      	movs	r3, #0

}
 8001356:	4618      	mov	r0, r3
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000504 	.word	0x20000504
 8001360:	40010000 	.word	0x40010000
 8001364:	40014000 	.word	0x40014000
 8001368:	200004bc 	.word	0x200004bc
 800136c:	20000624 	.word	0x20000624
 8001370:	20000090 	.word	0x20000090

08001374 <ChangePWM>:

HAL_StatusTypeDef ChangePWM (void) {
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0

	uint32_t PWM = (Registers[PWMReg] * TIM1->ARR) / 100; // Calculate required CCRx value
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <ChangePWM+0x6c>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <ChangePWM+0x70>)
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <ChangePWM+0x74>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	607b      	str	r3, [r7, #4]

	if (PWM >= TIM1->ARR - 60) {
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <ChangePWM+0x70>)
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	3b3c      	subs	r3, #60	; 0x3c
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	429a      	cmp	r2, r3
 800139c:	d303      	bcc.n	80013a6 <ChangePWM+0x32>
		PWM = TIM1->ARR - 60;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <ChangePWM+0x70>)
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	3b3c      	subs	r3, #60	; 0x3c
 80013a4:	607b      	str	r3, [r7, #4]
	}

	TIM1->CR1 |= TIM_CR1_UDIS; 	// Disable Update Events
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <ChangePWM+0x70>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <ChangePWM+0x70>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = PWM;	  		// Set new PWM for channel 1
 80013b2:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <ChangePWM+0x70>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = PWM;	  		// Set new PWM for channel 2
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <ChangePWM+0x70>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = PWM;	  		// Set new PWM for channel 3
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <ChangePWM+0x70>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_UDIS; // Enable Update Events
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <ChangePWM+0x70>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <ChangePWM+0x70>)
 80013ca:	f023 0302 	bic.w	r3, r3, #2
 80013ce:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 80013d0:	2300      	movs	r3, #0

}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000090 	.word	0x20000090
 80013e4:	40010000 	.word	0x40010000
 80013e8:	51eb851f 	.word	0x51eb851f

080013ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f2:	463b      	mov	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001400:	4a22      	ldr	r2, [pc, #136]	; (800148c <MX_ADC1_Init+0xa0>)
 8001402:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <MX_ADC1_Init+0x9c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001418:	2200      	movs	r2, #0
 800141a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_ADC1_Init+0x9c>)
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_ADC1_Init+0x9c>)
 800142e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_ADC1_Init+0x9c>)
 800143c:	2201      	movs	r2, #1
 800143e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_ADC1_Init+0x9c>)
 800144a:	2201      	movs	r2, #1
 800144c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800144e:	480e      	ldr	r0, [pc, #56]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001450:	f001 fb0c 	bl	8002a6c <HAL_ADC_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800145a:	f000 fc0d 	bl	8001c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800145e:	2309      	movs	r3, #9
 8001460:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001462:	2301      	movs	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001466:	2301      	movs	r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001470:	f001 fd22 	bl	8002eb8 <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800147a:	f000 fbfd 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000029c 	.word	0x2000029c
 800148c:	40012000 	.word	0x40012000

08001490 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_ADC_MspInit+0x8c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12f      	bne.n	8001512 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_ADC_MspInit+0x90>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a19      	ldr	r2, [pc, #100]	; (8001520 <HAL_ADC_MspInit+0x90>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <HAL_ADC_MspInit+0x90>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <HAL_ADC_MspInit+0x90>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <HAL_ADC_MspInit+0x90>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_ADC_MspInit+0x90>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014ea:	2302      	movs	r3, #2
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ee:	2303      	movs	r3, #3
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4809      	ldr	r0, [pc, #36]	; (8001524 <HAL_ADC_MspInit+0x94>)
 80014fe:	f002 f855 	bl	80035ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2012      	movs	r0, #18
 8001508:	f001 ffe9 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800150c:	2012      	movs	r0, #18
 800150e:	f002 f802 	bl	8003516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40012000 	.word	0x40012000
 8001520:	40023800 	.word	0x40023800
 8001524:	40020400 	.word	0x40020400

08001528 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	// Registers[CurReg] = current * 1000;

	Counter++;
	*/

}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b50      	ldr	r3, [pc, #320]	; (8001698 <MX_GPIO_Init+0x15c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a4f      	ldr	r2, [pc, #316]	; (8001698 <MX_GPIO_Init+0x15c>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <MX_GPIO_Init+0x15c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b49      	ldr	r3, [pc, #292]	; (8001698 <MX_GPIO_Init+0x15c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a48      	ldr	r2, [pc, #288]	; (8001698 <MX_GPIO_Init+0x15c>)
 8001578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b46      	ldr	r3, [pc, #280]	; (8001698 <MX_GPIO_Init+0x15c>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b42      	ldr	r3, [pc, #264]	; (8001698 <MX_GPIO_Init+0x15c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a41      	ldr	r2, [pc, #260]	; (8001698 <MX_GPIO_Init+0x15c>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <MX_GPIO_Init+0x15c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <MX_GPIO_Init+0x15c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a3a      	ldr	r2, [pc, #232]	; (8001698 <MX_GPIO_Init+0x15c>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <MX_GPIO_Init+0x15c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c8:	4834      	ldr	r0, [pc, #208]	; (800169c <MX_GPIO_Init+0x160>)
 80015ca:	f002 f973 	bl	80038b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d4:	4832      	ldr	r0, [pc, #200]	; (80016a0 <MX_GPIO_Init+0x164>)
 80015d6:	f002 f96d 	bl	80038b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	482a      	ldr	r0, [pc, #168]	; (800169c <MX_GPIO_Init+0x160>)
 80015f4:	f001 ffda 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015f8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fe:	2303      	movs	r3, #3
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4823      	ldr	r0, [pc, #140]	; (800169c <MX_GPIO_Init+0x160>)
 800160e:	f001 ffcd 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001612:	f649 03f0 	movw	r3, #39152	; 0x98f0
 8001616:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001618:	2303      	movs	r3, #3
 800161a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	481f      	ldr	r0, [pc, #124]	; (80016a4 <MX_GPIO_Init+0x168>)
 8001628:	f001 ffc0 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_9;
 800162c:	f240 2325 	movw	r3, #549	; 0x225
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001632:	2303      	movs	r3, #3
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4817      	ldr	r0, [pc, #92]	; (80016a0 <MX_GPIO_Init+0x164>)
 8001642:	f001 ffb3 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4810      	ldr	r0, [pc, #64]	; (80016a0 <MX_GPIO_Init+0x164>)
 8001660:	f001 ffa4 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001664:	2310      	movs	r3, #16
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001668:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800166c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800166e:	2302      	movs	r3, #2
 8001670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4809      	ldr	r0, [pc, #36]	; (80016a0 <MX_GPIO_Init+0x164>)
 800167a:	f001 ff97 	bl	80035ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	200a      	movs	r0, #10
 8001684:	f001 ff2b 	bl	80034de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001688:	200a      	movs	r0, #10
 800168a:	f001 ff44 	bl	8003516 <HAL_NVIC_EnableIRQ>

}
 800168e:	bf00      	nop
 8001690:	3728      	adds	r7, #40	; 0x28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40020000 	.word	0x40020000

080016a8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016ae:	4a13      	ldr	r2, [pc, #76]	; (80016fc <MX_I2C1_Init+0x54>)
 80016b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016b4:	4a12      	ldr	r2, [pc, #72]	; (8001700 <MX_I2C1_Init+0x58>)
 80016b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016c0:	2220      	movs	r2, #32
 80016c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_I2C1_Init+0x50>)
 80016e6:	f002 f923 	bl	8003930 <HAL_I2C_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f0:	f000 fac2 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200002fc 	.word	0x200002fc
 80016fc:	40005400 	.word	0x40005400
 8001700:	000186a0 	.word	0x000186a0

08001704 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_I2C2_Init+0x50>)
 800170a:	4a13      	ldr	r2, [pc, #76]	; (8001758 <MX_I2C2_Init+0x54>)
 800170c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_I2C2_Init+0x50>)
 8001710:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_I2C2_Init+0x58>)
 8001712:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_I2C2_Init+0x50>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_I2C2_Init+0x50>)
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_I2C2_Init+0x50>)
 8001722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001726:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <MX_I2C2_Init+0x50>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_I2C2_Init+0x50>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <MX_I2C2_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_I2C2_Init+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <MX_I2C2_Init+0x50>)
 8001742:	f002 f8f5 	bl	8003930 <HAL_I2C_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800174c:	f000 fa94 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000350 	.word	0x20000350
 8001758:	40005800 	.word	0x40005800
 800175c:	000186a0 	.word	0x000186a0

08001760 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	; 0x30
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a42      	ldr	r2, [pc, #264]	; (8001888 <HAL_I2C_MspInit+0x128>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d13c      	bne.n	80017fc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	4b41      	ldr	r3, [pc, #260]	; (800188c <HAL_I2C_MspInit+0x12c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a40      	ldr	r2, [pc, #256]	; (800188c <HAL_I2C_MspInit+0x12c>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b3e      	ldr	r3, [pc, #248]	; (800188c <HAL_I2C_MspInit+0x12c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800179e:	23c0      	movs	r3, #192	; 0xc0
 80017a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a2:	2312      	movs	r3, #18
 80017a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ae:	2304      	movs	r3, #4
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	4619      	mov	r1, r3
 80017b8:	4835      	ldr	r0, [pc, #212]	; (8001890 <HAL_I2C_MspInit+0x130>)
 80017ba:	f001 fef7 	bl	80035ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	4b32      	ldr	r3, [pc, #200]	; (800188c <HAL_I2C_MspInit+0x12c>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	4a31      	ldr	r2, [pc, #196]	; (800188c <HAL_I2C_MspInit+0x12c>)
 80017c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017cc:	6413      	str	r3, [r2, #64]	; 0x40
 80017ce:	4b2f      	ldr	r3, [pc, #188]	; (800188c <HAL_I2C_MspInit+0x12c>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	201f      	movs	r0, #31
 80017e0:	f001 fe7d 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017e4:	201f      	movs	r0, #31
 80017e6:	f001 fe96 	bl	8003516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2020      	movs	r0, #32
 80017f0:	f001 fe75 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017f4:	2020      	movs	r0, #32
 80017f6:	f001 fe8e 	bl	8003516 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80017fa:	e041      	b.n	8001880 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a24      	ldr	r2, [pc, #144]	; (8001894 <HAL_I2C_MspInit+0x134>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d13c      	bne.n	8001880 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_I2C_MspInit+0x12c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a1f      	ldr	r2, [pc, #124]	; (800188c <HAL_I2C_MspInit+0x12c>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_I2C_MspInit+0x12c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001828:	2312      	movs	r3, #18
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182c:	2301      	movs	r3, #1
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001834:	2304      	movs	r3, #4
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	4619      	mov	r1, r3
 800183e:	4814      	ldr	r0, [pc, #80]	; (8001890 <HAL_I2C_MspInit+0x130>)
 8001840:	f001 feb4 	bl	80035ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001844:	2308      	movs	r3, #8
 8001846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001848:	2312      	movs	r3, #18
 800184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800184c:	2301      	movs	r3, #1
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001854:	2309      	movs	r3, #9
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	480c      	ldr	r0, [pc, #48]	; (8001890 <HAL_I2C_MspInit+0x130>)
 8001860:	f001 fea4 	bl	80035ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_I2C_MspInit+0x12c>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_I2C_MspInit+0x12c>)
 800186e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_I2C_MspInit+0x12c>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	bf00      	nop
 8001882:	3730      	adds	r7, #48	; 0x30
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40005400 	.word	0x40005400
 800188c:	40023800 	.word	0x40023800
 8001890:	40020400 	.word	0x40020400
 8001894:	40005800 	.word	0x40005800

08001898 <HAL_I2C_ListenCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

	// Once the transfer is complete start listening again.
	if (i2cHandle->Instance == I2C1) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HAL_I2C_ListenCpltCallback+0x20>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d102      	bne.n	80018b0 <HAL_I2C_ListenCpltCallback+0x18>
		HAL_I2C_EnableListen_IT (i2cHandle);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f002 fd8e 	bl	80043cc <HAL_I2C_EnableListen_IT>
	}

}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40005400 	.word	0x40005400

080018bc <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback (I2C_HandleTypeDef* i2cHandle, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70fb      	strb	r3, [r7, #3]
 80018c8:	4613      	mov	r3, r2
 80018ca:	803b      	strh	r3, [r7, #0]

	if (i2cHandle->Instance == I2C1) {
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a11      	ldr	r2, [pc, #68]	; (8001918 <HAL_I2C_AddrCallback+0x5c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d11c      	bne.n	8001910 <HAL_I2C_AddrCallback+0x54>
		if ( TransferDirection == I2C_DIRECTION_TRANSMIT ) { // If the master wants to transmit the data
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d10d      	bne.n	80018f8 <HAL_I2C_AddrCallback+0x3c>

			// Reset number of recieved bytes and start recieving the first byte.
			RxCount = 0;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_I2C_AddrCallback+0x60>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_FIRST_FRAME);
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_I2C_AddrCallback+0x60>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_I2C_AddrCallback+0x64>)
 80018ea:	18d1      	adds	r1, r2, r3
 80018ec:	2301      	movs	r3, #1
 80018ee:	2201      	movs	r2, #1
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f002 fcf8 	bl	80042e6 <HAL_I2C_Slave_Seq_Receive_IT>

		}

	}

}
 80018f6:	e00b      	b.n	8001910 <HAL_I2C_AddrCallback+0x54>
			if( HAL_I2C_Slave_Seq_Transmit_IT(i2cHandle, (uint8_t *) Registers, RegSize * 2, I2C_FIRST_FRAME) == HAL_ERROR) {
 80018f8:	2301      	movs	r3, #1
 80018fa:	220a      	movs	r2, #10
 80018fc:	4909      	ldr	r1, [pc, #36]	; (8001924 <HAL_I2C_AddrCallback+0x68>)
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f002 fc7e 	bl	8004200 <HAL_I2C_Slave_Seq_Transmit_IT>
			HAL_I2C_DisableListen_IT(i2cHandle);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f002 fd97 	bl	8004438 <HAL_I2C_DisableListen_IT>
			HAL_I2C_EnableListen_IT(i2cHandle);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f002 fd5e 	bl	80043cc <HAL_I2C_EnableListen_IT>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40005400 	.word	0x40005400
 800191c:	200002e5 	.word	0x200002e5
 8001920:	200002e8 	.word	0x200002e8
 8001924:	20000090 	.word	0x20000090

08001928 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d12e      	bne.n	8001998 <HAL_I2C_SlaveRxCpltCallback+0x70>

		RxCount++;
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 8001944:	701a      	strb	r2, [r3, #0]

		if ( RxCount < RxSize ) {
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b03      	cmp	r3, #3
 800194c:	d818      	bhi.n	8001980 <HAL_I2C_SlaveRxCpltCallback+0x58>

			// If the number of recieved bytes is less than the total keep recieving and otherwise recieve te last byte.
			if (RxCount == RxSize - 1) {
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d10a      	bne.n	800196c <HAL_I2C_SlaveRxCpltCallback+0x44>
				HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_LAST_FRAME);
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_I2C_SlaveRxCpltCallback+0x80>)
 800195e:	18d1      	adds	r1, r2, r3
 8001960:	2320      	movs	r3, #32
 8001962:	2201      	movs	r2, #1
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f002 fcbe 	bl	80042e6 <HAL_I2C_Slave_Seq_Receive_IT>
 800196a:	e009      	b.n	8001980 <HAL_I2C_SlaveRxCpltCallback+0x58>
			} else {
				HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_NEXT_FRAME);
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_I2C_SlaveRxCpltCallback+0x80>)
 8001974:	18d1      	adds	r1, r2, r3
 8001976:	2304      	movs	r3, #4
 8001978:	2201      	movs	r2, #1
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f002 fcb3 	bl	80042e6 <HAL_I2C_Slave_Seq_Receive_IT>
			}
		}

		// Once the maximum of recievable bytes has been reached start processing the data.
		if ( RxCount == RxSize) {
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b04      	cmp	r3, #4
 8001986:	d101      	bne.n	800198c <HAL_I2C_SlaveRxCpltCallback+0x64>
			ProcessData();
 8001988:	f000 f842 	bl	8001a10 <ProcessData>
		}

		HAL_I2C_DisableListen_IT(i2cHandle);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f002 fd53 	bl	8004438 <HAL_I2C_DisableListen_IT>
		HAL_I2C_EnableListen_IT(i2cHandle);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f002 fd1a 	bl	80043cc <HAL_I2C_EnableListen_IT>

	}

}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40005400 	.word	0x40005400
 80019a4:	200002e5 	.word	0x200002e5
 80019a8:	200002e8 	.word	0x200002e8

080019ac <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback (I2C_HandleTypeDef* i2cHandle) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <HAL_I2C_ErrorCallback+0x58>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d11d      	bne.n	80019fa <HAL_I2C_ErrorCallback+0x4e>

		if ( HAL_I2C_GetError (i2cHandle) == 4) {
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f002 ffa3 	bl	800490a <HAL_I2C_GetError>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d114      	bne.n	80019f4 <HAL_I2C_ErrorCallback+0x48>

			__HAL_I2C_CLEAR_FLAG (i2cHandle, I2C_FLAG_AF); 	// Clear AF flag
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019d2:	615a      	str	r2, [r3, #20]

			if ( TxCount == 0) { 							// Error while recieving
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_I2C_ErrorCallback+0x5c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d105      	bne.n	80019e8 <HAL_I2C_ErrorCallback+0x3c>
				I2C_Error = HAL_ERROR;						// Custom error to know if an error has occured. It is not cleared anywhere.
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_I2C_ErrorCallback+0x60>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
				ProcessData();								// Error 4 is an unexpected termination of the transfer so the recieved data can still be used.
 80019e2:	f000 f815 	bl	8001a10 <ProcessData>
 80019e6:	e005      	b.n	80019f4 <HAL_I2C_ErrorCallback+0x48>
			} else { 										// Error while transmitting, this is ignored
				TxCount--;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_I2C_ErrorCallback+0x5c>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_I2C_ErrorCallback+0x5c>)
 80019f2:	701a      	strb	r2, [r3, #0]
			}

		}

		// Start listening again since an error will most likely have terminated the transfer.
		HAL_I2C_EnableListen_IT(i2cHandle);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f002 fce9 	bl	80043cc <HAL_I2C_EnableListen_IT>

	}

}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40005400 	.word	0x40005400
 8001a08:	200002e4 	.word	0x200002e4
 8001a0c:	200002f8 	.word	0x200002f8

08001a10 <ProcessData>:

void ProcessData (void) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0

	// Initialize some variables
	StartReg = RxData[0]; 			// Start address of registers to be written
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <ProcessData+0x9c>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <ProcessData+0xa0>)
 8001a1e:	601a      	str	r2, [r3, #0]
	NumReg = RxCount; 				// Number of registers to be written
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <ProcessData+0xa4>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <ProcessData+0xa8>)
 8001a28:	601a      	str	r2, [r3, #0]
	EndReg = StartReg + NumReg - 2; // Last register to be written
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <ProcessData+0xa0>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <ProcessData+0xa8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	3b02      	subs	r3, #2
 8001a36:	4a21      	ldr	r2, [pc, #132]	; (8001abc <ProcessData+0xac>)
 8001a38:	6013      	str	r3, [r2, #0]

	// If the last register to be writen is larger than the size of the register call the error handler
	if (EndReg > RegSize) {
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <ProcessData+0xac>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	dd01      	ble.n	8001a46 <ProcessData+0x36>
		Error_Handler();
 8001a42:	f000 f919 	bl	8001c78 <Error_Handler>
	}

	// Write data into the register using a for loop
	for (int i = 2; i < NumReg; i++) {
 8001a46:	2302      	movs	r3, #2
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	e00f      	b.n	8001a6c <ProcessData+0x5c>
		Registers[StartReg++] = RxData[i];
 8001a4c:	4a17      	ldr	r2, [pc, #92]	; (8001aac <ProcessData+0x9c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	7818      	ldrb	r0, [r3, #0]
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <ProcessData+0xa0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	4915      	ldr	r1, [pc, #84]	; (8001ab0 <ProcessData+0xa0>)
 8001a5c:	600a      	str	r2, [r1, #0]
 8001a5e:	b281      	uxth	r1, r0
 8001a60:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <ProcessData+0xb0>)
 8001a62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 2; i < NumReg; i++) {
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <ProcessData+0xa8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	dbea      	blt.n	8001a4c <ProcessData+0x3c>
	}

	// If the PWM is higher than 0 but the motor is not turning then startup
	if ( Registers[PWMReg] > 0 && Registers[RPMReg] == 0) {
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <ProcessData+0xb0>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <ProcessData+0x7a>
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <ProcessData+0xb0>)
 8001a80:	88db      	ldrh	r3, [r3, #6]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <ProcessData+0x7a>
		StartupSequence();
 8001a86:	f7ff facb 	bl	8001020 <StartupSequence>
	}

	// If the PWM is 0 and the motor is still turning shutdown
	if ( Registers[PWMReg] == 0 && Registers[RPMReg] > 0 ) {
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <ProcessData+0xb0>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
		// StopSequence();
	}

	// Call some functions
	ChangePWM(); 				// Update PWM values
 8001a90:	f7ff fc70 	bl	8001374 <ChangePWM>
	memset(RxData, 0, RxSize); 	// Empty the RxData array for next transmission
 8001a94:	2204      	movs	r2, #4
 8001a96:	2100      	movs	r1, #0
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <ProcessData+0x9c>)
 8001a9a:	f007 fc58 	bl	800934e <memset>

	// Activate the buzzer everytime a transfer has been completed
	Buzzer = 1;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <ProcessData+0xb4>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200002e8 	.word	0x200002e8
 8001ab0:	200002ec 	.word	0x200002ec
 8001ab4:	200002e5 	.word	0x200002e5
 8001ab8:	200002f0 	.word	0x200002f0
 8001abc:	200002f4 	.word	0x200002f4
 8001ac0:	20000090 	.word	0x20000090
 8001ac4:	200003a4 	.word	0x200003a4

08001ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ace:	f000 ff5b 	bl	8002988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad2:	f000 f867 	bl	8001ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad6:	f7ff fd31 	bl	800153c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001ada:	f000 fb37 	bl	800214c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ade:	f000 fbef 	bl	80022c0 <MX_TIM2_Init>
  MX_TIM9_Init();
 8001ae2:	f000 fd39 	bl	8002558 <MX_TIM9_Init>
  MX_I2C1_Init();
 8001ae6:	f7ff fddf 	bl	80016a8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001aea:	f7ff fc7f 	bl	80013ec <MX_ADC1_Init>
  MX_I2C2_Init();
 8001aee:	f7ff fe09 	bl	8001704 <MX_I2C2_Init>
  MX_TIM4_Init();
 8001af2:	f000 fc85 	bl	8002400 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001af6:	f000 fc2d 	bl	8002354 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001afa:	f000 fcd5 	bl	80024a8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	HAL_I2C_EnableListen_IT (&hi2c1);
 8001afe:	4824      	ldr	r0, [pc, #144]	; (8001b90 <main+0xc8>)
 8001b00:	f002 fc64 	bl	80043cc <HAL_I2C_EnableListen_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  float current = (3.3 * (TotalCurrent / AvgSizeCur)) / 40960 / 0.015;
 8001b04:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <main+0xcc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <main+0xd0>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	0bdb      	lsrs	r3, r3, #15
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fcff 	bl	8000514 <__aeabi_ui2d>
 8001b16:	a31a      	add	r3, pc, #104	; (adr r3, 8001b80 <main+0xb8>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	f7fe fd74 	bl	8000608 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <main+0xd4>)
 8001b2e:	f7fe fe95 	bl	800085c <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	a313      	add	r3, pc, #76	; (adr r3, 8001b88 <main+0xc0>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fe8c 	bl	800085c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7ff f854 	bl	8000bf8 <__aeabi_d2f>
 8001b50:	4603      	mov	r3, r0
 8001b52:	607b      	str	r3, [r7, #4]
	  Registers[CurReg] = current * 10 * Registers[PWMReg];
 8001b54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <main+0xd8>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b74:	ee17 3a90 	vmov	r3, s15
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <main+0xd8>)
 8001b7c:	809a      	strh	r2, [r3, #4]
  {
 8001b7e:	e7c1      	b.n	8001b04 <main+0x3c>
 8001b80:	66666666 	.word	0x66666666
 8001b84:	400a6666 	.word	0x400a6666
 8001b88:	eb851eb8 	.word	0xeb851eb8
 8001b8c:	3f8eb851 	.word	0x3f8eb851
 8001b90:	200002fc 	.word	0x200002fc
 8001b94:	20000298 	.word	0x20000298
 8001b98:	d1b71759 	.word	0xd1b71759
 8001b9c:	40e40000 	.word	0x40e40000
 8001ba0:	20000090 	.word	0x20000090

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b094      	sub	sp, #80	; 0x50
 8001ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001baa:	f107 0320 	add.w	r3, r7, #32
 8001bae:	2230      	movs	r2, #48	; 0x30
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f007 fbcb 	bl	800934e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <SystemClock_Config+0xcc>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	4a27      	ldr	r2, [pc, #156]	; (8001c70 <SystemClock_Config+0xcc>)
 8001bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <SystemClock_Config+0xcc>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <SystemClock_Config+0xd0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <SystemClock_Config+0xd0>)
 8001bee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <SystemClock_Config+0xd0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c00:	2301      	movs	r3, #1
 8001c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c14:	2319      	movs	r3, #25
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001c18:	23c0      	movs	r3, #192	; 0xc0
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c20:	2304      	movs	r3, #4
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f004 fc01 	bl	8006430 <HAL_RCC_OscConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c34:	f000 f820 	bl	8001c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c38:	230f      	movs	r3, #15
 8001c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	2103      	movs	r1, #3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f004 fe62 	bl	8006920 <HAL_RCC_ClockConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c62:	f000 f809 	bl	8001c78 <Error_Handler>
  }
}
 8001c66:	bf00      	nop
 8001c68:	3750      	adds	r7, #80	; 0x50
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000

08001c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c7c:	b672      	cpsid	i
}
 8001c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <Error_Handler+0x8>
	...

08001c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <NMI_Handler+0x4>

08001cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <HardFault_Handler+0x4>

08001ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <MemManage_Handler+0x4>

08001ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <BusFault_Handler+0x4>

08001cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <UsageFault_Handler+0x4>

08001cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d20:	f000 fe84 	bl	8002a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

	Buzzer = 1;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <EXTI4_IRQHandler+0x14>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d32:	2010      	movs	r0, #16
 8001d34:	f001 fdd8 	bl	80038e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200003a4 	.word	0x200003a4

08001d40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <ADC_IRQHandler+0x10>)
 8001d46:	f000 ff93 	bl	8002c70 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000029c 	.word	0x2000029c

08001d54 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	if ( (TIM9->SR & TIM_SR_CC2IF) >= 1) { // If the CC2IF is set it means a input capture has happened
 8001d58:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d03f      	beq.n	8001de4 <TIM1_BRK_TIM9_IRQHandler+0x90>

		Total -= RPM[i];
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a2a      	ldr	r2, [pc, #168]	; (8001e14 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d6a:	8812      	ldrh	r2, [r2, #0]
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4a2a      	ldr	r2, [pc, #168]	; (8001e18 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001d70:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001d78:	6013      	str	r3, [r2, #0]
		RPM[i] = RPMConst / (TIM9->CCR2);
 8001d7a:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <TIM1_BRK_TIM9_IRQHandler+0xc8>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d82:	fbb2 f1f3 	udiv	r1, r2, r3
 8001d86:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	b289      	uxth	r1, r1
 8001d8e:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001d90:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Total += RPM[i];
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001d9c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001daa:	6013      	str	r3, [r2, #0]

		i++;
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001db6:	801a      	strh	r2, [r3, #0]

		if ( i >= AvgSize - 1 ) {
 8001db8:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	2b7e      	cmp	r3, #126	; 0x7e
 8001dbe:	d902      	bls.n	8001dc6 <TIM1_BRK_TIM9_IRQHandler+0x72>
			i = 0;
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	801a      	strh	r2, [r3, #0]
		}

		Registers[RPMReg] = Total / AvgSize;
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	09db      	lsrs	r3, r3, #7
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001dd0:	80da      	strh	r2, [r3, #6]

		// If maximum RPM is exceeded -> shutdown
		if ( Registers[RPMReg] > MaximumRPM ) {
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001dd4:	88db      	ldrh	r3, [r3, #6]
 8001dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d90e      	bls.n	8001dfc <TIM1_BRK_TIM9_IRQHandler+0xa8>
			StopSequence();
 8001dde:	f7ff fa63 	bl	80012a8 <StopSequence>
 8001de2:	e00b      	b.n	8001dfc <TIM1_BRK_TIM9_IRQHandler+0xa8>
		}
	} else {
		Registers[RPMReg] = 0; // If the CC2IF was not set it means the timer has overflowed and the motor is thus stationary
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	80da      	strh	r2, [r3, #6]
		Total = 0;
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
		memset(RPM, 0, AvgSize * 2);
 8001df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001df4:	2100      	movs	r1, #0
 8001df6:	4808      	ldr	r0, [pc, #32]	; (8001e18 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001df8:	f007 faa9 	bl	800934e <memset>
	}


  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dfc:	4809      	ldr	r0, [pc, #36]	; (8001e24 <TIM1_BRK_TIM9_IRQHandler+0xd0>)
 8001dfe:	f005 fbcb 	bl	8007598 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001e02:	4809      	ldr	r0, [pc, #36]	; (8001e28 <TIM1_BRK_TIM9_IRQHandler+0xd4>)
 8001e04:	f005 fbc8 	bl	8007598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40014000 	.word	0x40014000
 8001e10:	200003ac 	.word	0x200003ac
 8001e14:	200004b0 	.word	0x200004b0
 8001e18:	200003b0 	.word	0x200003b0
 8001e1c:	20000294 	.word	0x20000294
 8001e20:	20000090 	.word	0x20000090
 8001e24:	200004bc 	.word	0x200004bc
 8001e28:	20000624 	.word	0x20000624

08001e2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	// TIM3->CR1 |= TIM_CR1_CEN;
	HAL_TIM_Base_Start_IT (&htim3);
	*/

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e32:	f005 fbb1 	bl	8007598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200004bc 	.word	0x200004bc

08001e40 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	PrepareCommutation ();		// Set next Commutation states
 8001e44:	f7ff f8a6 	bl	8000f94 <PrepareCommutation>

	TIM1->SR &= ~TIM_SR_COMIF; 	// Reset COMIF in SR register
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001e4e:	f023 0320 	bic.w	r3, r3, #32
 8001e52:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e54:	4803      	ldr	r0, [pc, #12]	; (8001e64 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 8001e56:	f005 fb9f 	bl	8007598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40010000 	.word	0x40010000
 8001e64:	200004bc 	.word	0x200004bc

08001e68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <TIM2_IRQHandler+0x20>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR to generate commutation interrupt
	TIM1->EGR |= TIM_EGR_COMG;
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <TIM2_IRQHandler+0x24>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <TIM2_IRQHandler+0x24>)
 8001e78:	f043 0320 	orr.w	r3, r3, #32
 8001e7c:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e7e:	4804      	ldr	r0, [pc, #16]	; (8001e90 <TIM2_IRQHandler+0x28>)
 8001e80:	f005 fb8a 	bl	8007598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40014000 	.word	0x40014000
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	20000504 	.word	0x20000504

08001e94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	// Start single conversion
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <TIM3_IRQHandler+0x2c>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <TIM3_IRQHandler+0x2c>)
 8001e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ea2:	6093      	str	r3, [r2, #8]
	ADCCounter++;
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <TIM3_IRQHandler+0x30>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	4a06      	ldr	r2, [pc, #24]	; (8001ec4 <TIM3_IRQHandler+0x30>)
 8001eac:	6013      	str	r3, [r2, #0]

	// Disable timer again
	// TIM3->CR1 &= ~TIM_CR1_CEN;
	HAL_TIM_Base_Stop_IT (&htim3);
 8001eae:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <TIM3_IRQHandler+0x34>)
 8001eb0:	f004 ffc8 	bl	8006e44 <HAL_TIM_Base_Stop_IT>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <TIM3_IRQHandler+0x34>)
 8001eb6:	f005 fb6f 	bl	8007598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40012000 	.word	0x40012000
 8001ec4:	200004b4 	.word	0x200004b4
 8001ec8:	2000054c 	.word	0x2000054c

08001ecc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <I2C1_EV_IRQHandler+0x10>)
 8001ed2:	f002 faec 	bl	80044ae <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200002fc 	.word	0x200002fc

08001ee0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <I2C1_ER_IRQHandler+0x10>)
 8001ee6:	f002 fc35 	bl	8004754 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200002fc 	.word	0x200002fc

08001ef4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM5_IRQn 0 */

	uint8_t buff[2];
	float Temp = 0;
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]

	buff[0] = 0x05;
 8001f00:	2305      	movs	r3, #5
 8001f02:	703b      	strb	r3, [r7, #0]
	buff[1] = 0x00;
 8001f04:	2300      	movs	r3, #0
 8001f06:	707b      	strb	r3, [r7, #1]

	ret = HAL_I2C_Master_Transmit(&hi2c2, MCP9808_ADDR << 1, buff, 1, HAL_MAX_DELAY);
 8001f08:	463a      	mov	r2, r7
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2301      	movs	r3, #1
 8001f12:	2130      	movs	r1, #48	; 0x30
 8001f14:	481c      	ldr	r0, [pc, #112]	; (8001f88 <TIM5_IRQHandler+0x94>)
 8001f16:	f001 fe4f 	bl	8003bb8 <HAL_I2C_Master_Transmit>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <TIM5_IRQHandler+0x98>)
 8001f20:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Receive(&hi2c2, MCP9808_ADDR << 1, buff, 2, HAL_MAX_DELAY);
 8001f22:	463a      	mov	r2, r7
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	2130      	movs	r1, #48	; 0x30
 8001f2e:	4816      	ldr	r0, [pc, #88]	; (8001f88 <TIM5_IRQHandler+0x94>)
 8001f30:	f001 ff40 	bl	8003db4 <HAL_I2C_Master_Receive>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <TIM5_IRQHandler+0x98>)
 8001f3a:	701a      	strb	r2, [r3, #0]

	Temp = ((((int16_t)buff[0] << 11) + ((int16_t)buff[1] << 3)) >> 3) / 1600.0;
 8001f3c:	783b      	ldrb	r3, [r7, #0]
 8001f3e:	02da      	lsls	r2, r3, #11
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	10db      	asrs	r3, r3, #3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe faf3 	bl	8000534 <__aeabi_i2d>
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <TIM5_IRQHandler+0x9c>)
 8001f54:	f7fe fc82 	bl	800085c <__aeabi_ddiv>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7fe fe4a 	bl	8000bf8 <__aeabi_d2f>
 8001f64:	4603      	mov	r3, r0
 8001f66:	607b      	str	r3, [r7, #4]
	Registers[TempReg] = Temp;
 8001f68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f70:	ee17 3a90 	vmov	r3, s15
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <TIM5_IRQHandler+0xa0>)
 8001f78:	811a      	strh	r2, [r3, #8]

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f7a:	4807      	ldr	r0, [pc, #28]	; (8001f98 <TIM5_IRQHandler+0xa4>)
 8001f7c:	f005 fb0c 	bl	8007598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000350 	.word	0x20000350
 8001f8c:	200003a8 	.word	0x200003a8
 8001f90:	40990000 	.word	0x40990000
 8001f94:	20000090 	.word	0x20000090
 8001f98:	200005dc 	.word	0x200005dc

08001f9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return 1;
 8001fa0:	2301      	movs	r3, #1
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_kill>:

int _kill(int pid, int sig)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fb6:	f007 fa1d 	bl	80093f4 <__errno>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2216      	movs	r2, #22
 8001fbe:	601a      	str	r2, [r3, #0]
  return -1;
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <_exit>:

void _exit (int status)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ffe7 	bl	8001fac <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fde:	e7fe      	b.n	8001fde <_exit+0x12>

08001fe0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e00a      	b.n	8002008 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ff2:	f3af 8000 	nop.w
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	60ba      	str	r2, [r7, #8]
 8001ffe:	b2ca      	uxtb	r2, r1
 8002000:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	dbf0      	blt.n	8001ff2 <_read+0x12>
  }

  return len;
 8002010:	687b      	ldr	r3, [r7, #4]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e009      	b.n	8002040 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	60ba      	str	r2, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf1      	blt.n	800202c <_write+0x12>
  }
  return len;
 8002048:	687b      	ldr	r3, [r7, #4]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_close>:

int _close(int file)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800207a:	605a      	str	r2, [r3, #4]
  return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_isatty>:

int _isatty(int file)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <_sbrk+0x5c>)
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <_sbrk+0x60>)
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <_sbrk+0x64>)
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <_sbrk+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d207      	bcs.n	80020fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ec:	f007 f982 	bl	80093f4 <__errno>
 80020f0:	4603      	mov	r3, r0
 80020f2:	220c      	movs	r2, #12
 80020f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	e009      	b.n	8002110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002102:	4b07      	ldr	r3, [pc, #28]	; (8002120 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <_sbrk+0x64>)
 800210c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20020000 	.word	0x20020000
 800211c:	00000400 	.word	0x00000400
 8002120:	200004b8 	.word	0x200004b8
 8002124:	200007c0 	.word	0x200007c0

08002128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <SystemInit+0x20>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <SystemInit+0x20>)
 8002134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b096      	sub	sp, #88	; 0x58
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002152:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
 8002160:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002162:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800216c:	f107 0320 	add.w	r3, r7, #32
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
 800217c:	615a      	str	r2, [r3, #20]
 800217e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002180:	463b      	mov	r3, r7
 8002182:	2220      	movs	r2, #32
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f007 f8e1 	bl	800934e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800218c:	4b4a      	ldr	r3, [pc, #296]	; (80022b8 <MX_TIM1_Init+0x16c>)
 800218e:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <MX_TIM1_Init+0x170>)
 8002190:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <MX_TIM1_Init+0x16c>)
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002198:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <MX_TIM1_Init+0x16c>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 800219e:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80021a0:	f240 727f 	movw	r2, #1919	; 0x77f
 80021a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a6:	4b44      	ldr	r3, [pc, #272]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021ac:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b2:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021b8:	483f      	ldr	r0, [pc, #252]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80021ba:	f004 fd91 	bl	8006ce0 <HAL_TIM_Base_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80021c4:	f7ff fd58 	bl	8001c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021c8:	483b      	ldr	r0, [pc, #236]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80021ca:	f004 fe6a 	bl	8006ea2 <HAL_TIM_PWM_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80021d4:	f7ff fd50 	bl	8001c78 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80021d8:	2304      	movs	r3, #4
 80021da:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80021dc:	2300      	movs	r3, #0
 80021de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80021e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021e4:	4619      	mov	r1, r3
 80021e6:	4834      	ldr	r0, [pc, #208]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80021e8:	f005 fc3c 	bl	8007a64 <HAL_TIM_SlaveConfigSynchro>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80021f2:	f7ff fd41 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002202:	4619      	mov	r1, r3
 8002204:	482c      	ldr	r0, [pc, #176]	; (80022b8 <MX_TIM1_Init+0x16c>)
 8002206:	f006 fa63 	bl	80086d0 <HAL_TIMEx_MasterConfigSynchronization>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002210:	f7ff fd32 	bl	8001c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002214:	2360      	movs	r3, #96	; 0x60
 8002216:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002228:	2300      	movs	r3, #0
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002230:	f107 0320 	add.w	r3, r7, #32
 8002234:	2200      	movs	r2, #0
 8002236:	4619      	mov	r1, r3
 8002238:	481f      	ldr	r0, [pc, #124]	; (80022b8 <MX_TIM1_Init+0x16c>)
 800223a:	f005 fb51 	bl	80078e0 <HAL_TIM_PWM_ConfigChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002244:	f7ff fd18 	bl	8001c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002248:	f107 0320 	add.w	r3, r7, #32
 800224c:	2204      	movs	r2, #4
 800224e:	4619      	mov	r1, r3
 8002250:	4819      	ldr	r0, [pc, #100]	; (80022b8 <MX_TIM1_Init+0x16c>)
 8002252:	f005 fb45 	bl	80078e0 <HAL_TIM_PWM_ConfigChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800225c:	f7ff fd0c 	bl	8001c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002260:	f107 0320 	add.w	r3, r7, #32
 8002264:	2208      	movs	r2, #8
 8002266:	4619      	mov	r1, r3
 8002268:	4813      	ldr	r0, [pc, #76]	; (80022b8 <MX_TIM1_Init+0x16c>)
 800226a:	f005 fb39 	bl	80078e0 <HAL_TIM_PWM_ConfigChannel>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002274:	f7ff fd00 	bl	8001c78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800228c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002290:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002296:	463b      	mov	r3, r7
 8002298:	4619      	mov	r1, r3
 800229a:	4807      	ldr	r0, [pc, #28]	; (80022b8 <MX_TIM1_Init+0x16c>)
 800229c:	f006 fa86 	bl	80087ac <HAL_TIMEx_ConfigBreakDeadTime>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 80022a6:	f7ff fce7 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022aa:	4803      	ldr	r0, [pc, #12]	; (80022b8 <MX_TIM1_Init+0x16c>)
 80022ac:	f000 fae6 	bl	800287c <HAL_TIM_MspPostInit>

}
 80022b0:	bf00      	nop
 80022b2:	3758      	adds	r7, #88	; 0x58
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	200004bc 	.word	0x200004bc
 80022bc:	40010000 	.word	0x40010000

080022c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80022c6:	f107 0308 	add.w	r3, r7, #8
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d4:	463b      	mov	r3, r7
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022dc:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <MX_TIM2_Init+0x90>)
 80022de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <MX_TIM2_Init+0x90>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <MX_TIM2_Init+0x90>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <MX_TIM2_Init+0x90>)
 80022f2:	f04f 32ff 	mov.w	r2, #4294967295
 80022f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f8:	4b15      	ldr	r3, [pc, #84]	; (8002350 <MX_TIM2_Init+0x90>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <MX_TIM2_Init+0x90>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8002314:	f107 0308 	add.w	r3, r7, #8
 8002318:	4619      	mov	r1, r3
 800231a:	480d      	ldr	r0, [pc, #52]	; (8002350 <MX_TIM2_Init+0x90>)
 800231c:	f006 f876 	bl	800840c <HAL_TIMEx_HallSensor_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002326:	f7ff fca7 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800232a:	2350      	movs	r3, #80	; 0x50
 800232c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002332:	463b      	mov	r3, r7
 8002334:	4619      	mov	r1, r3
 8002336:	4806      	ldr	r0, [pc, #24]	; (8002350 <MX_TIM2_Init+0x90>)
 8002338:	f006 f9ca 	bl	80086d0 <HAL_TIMEx_MasterConfigSynchronization>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002342:	f7ff fc99 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000504 	.word	0x20000504

08002354 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235a:	f107 0320 	add.w	r3, r7, #32
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	615a      	str	r2, [r3, #20]
 8002374:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <MX_TIM3_Init+0xa4>)
 8002378:	4a20      	ldr	r2, [pc, #128]	; (80023fc <MX_TIM3_Init+0xa8>)
 800237a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800237c:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <MX_TIM3_Init+0xa4>)
 800237e:	2200      	movs	r2, #0
 8002380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <MX_TIM3_Init+0xa4>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 959;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <MX_TIM3_Init+0xa4>)
 800238a:	f240 32bf 	movw	r2, #959	; 0x3bf
 800238e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <MX_TIM3_Init+0xa4>)
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <MX_TIM3_Init+0xa4>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800239c:	4816      	ldr	r0, [pc, #88]	; (80023f8 <MX_TIM3_Init+0xa4>)
 800239e:	f004 fd80 	bl	8006ea2 <HAL_TIM_PWM_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80023a8:	f7ff fc66 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023ac:	2320      	movs	r3, #32
 80023ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023b4:	f107 0320 	add.w	r3, r7, #32
 80023b8:	4619      	mov	r1, r3
 80023ba:	480f      	ldr	r0, [pc, #60]	; (80023f8 <MX_TIM3_Init+0xa4>)
 80023bc:	f006 f988 	bl	80086d0 <HAL_TIMEx_MasterConfigSynchronization>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80023c6:	f7ff fc57 	bl	8001c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ca:	2360      	movs	r3, #96	; 0x60
 80023cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	2200      	movs	r2, #0
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_TIM3_Init+0xa4>)
 80023e2:	f005 fa7d 	bl	80078e0 <HAL_TIM_PWM_ConfigChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80023ec:	f7ff fc44 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023f0:	bf00      	nop
 80023f2:	3728      	adds	r7, #40	; 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	2000054c 	.word	0x2000054c
 80023fc:	40000400 	.word	0x40000400

08002400 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002406:	f107 0310 	add.w	r3, r7, #16
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002410:	463b      	mov	r3, r7
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800241c:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <MX_TIM4_Init+0xa0>)
 800241e:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <MX_TIM4_Init+0xa4>)
 8002420:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002422:	4b1f      	ldr	r3, [pc, #124]	; (80024a0 <MX_TIM4_Init+0xa0>)
 8002424:	2200      	movs	r2, #0
 8002426:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <MX_TIM4_Init+0xa0>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <MX_TIM4_Init+0xa0>)
 8002430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002434:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <MX_TIM4_Init+0xa0>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <MX_TIM4_Init+0xa0>)
 800243e:	2200      	movs	r2, #0
 8002440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002442:	4817      	ldr	r0, [pc, #92]	; (80024a0 <MX_TIM4_Init+0xa0>)
 8002444:	f004 fe90 	bl	8007168 <HAL_TIM_IC_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800244e:	f7ff fc13 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800245a:	f107 0310 	add.w	r3, r7, #16
 800245e:	4619      	mov	r1, r3
 8002460:	480f      	ldr	r0, [pc, #60]	; (80024a0 <MX_TIM4_Init+0xa0>)
 8002462:	f006 f935 	bl	80086d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800246c:	f7ff fc04 	bl	8001c78 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002470:	2300      	movs	r3, #0
 8002472:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002474:	2301      	movs	r3, #1
 8002476:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002480:	463b      	mov	r3, r7
 8002482:	2208      	movs	r2, #8
 8002484:	4619      	mov	r1, r3
 8002486:	4806      	ldr	r0, [pc, #24]	; (80024a0 <MX_TIM4_Init+0xa0>)
 8002488:	f005 f98e 	bl	80077a8 <HAL_TIM_IC_ConfigChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8002492:	f7ff fbf1 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000594 	.word	0x20000594
 80024a4:	40000800 	.word	0x40000800

080024a8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ae:	f107 0320 	add.w	r3, r7, #32
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]
 80024c6:	615a      	str	r2, [r3, #20]
 80024c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024ca:	4b20      	ldr	r3, [pc, #128]	; (800254c <MX_TIM5_Init+0xa4>)
 80024cc:	4a20      	ldr	r2, [pc, #128]	; (8002550 <MX_TIM5_Init+0xa8>)
 80024ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100;
 80024d0:	4b1e      	ldr	r3, [pc, #120]	; (800254c <MX_TIM5_Init+0xa4>)
 80024d2:	2264      	movs	r2, #100	; 0x64
 80024d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <MX_TIM5_Init+0xa4>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 960000;
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <MX_TIM5_Init+0xa4>)
 80024de:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <MX_TIM5_Init+0xac>)
 80024e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e2:	4b1a      	ldr	r3, [pc, #104]	; (800254c <MX_TIM5_Init+0xa4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e8:	4b18      	ldr	r3, [pc, #96]	; (800254c <MX_TIM5_Init+0xa4>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80024ee:	4817      	ldr	r0, [pc, #92]	; (800254c <MX_TIM5_Init+0xa4>)
 80024f0:	f004 fcd7 	bl	8006ea2 <HAL_TIM_PWM_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80024fa:	f7ff fbbd 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002506:	f107 0320 	add.w	r3, r7, #32
 800250a:	4619      	mov	r1, r3
 800250c:	480f      	ldr	r0, [pc, #60]	; (800254c <MX_TIM5_Init+0xa4>)
 800250e:	f006 f8df 	bl	80086d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002518:	f7ff fbae 	bl	8001c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251c:	2360      	movs	r3, #96	; 0x60
 800251e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2200      	movs	r2, #0
 8002530:	4619      	mov	r1, r3
 8002532:	4806      	ldr	r0, [pc, #24]	; (800254c <MX_TIM5_Init+0xa4>)
 8002534:	f005 f9d4 	bl	80078e0 <HAL_TIM_PWM_ConfigChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800253e:	f7ff fb9b 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002542:	bf00      	nop
 8002544:	3728      	adds	r7, #40	; 0x28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200005dc 	.word	0x200005dc
 8002550:	40000c00 	.word	0x40000c00
 8002554:	000ea600 	.word	0x000ea600

08002558 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800255e:	463b      	mov	r3, r7
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <MX_TIM9_Init+0x78>)
 800256c:	4a19      	ldr	r2, [pc, #100]	; (80025d4 <MX_TIM9_Init+0x7c>)
 800256e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1499;
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <MX_TIM9_Init+0x78>)
 8002572:	f240 52db 	movw	r2, #1499	; 0x5db
 8002576:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <MX_TIM9_Init+0x78>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 63999;
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <MX_TIM9_Init+0x78>)
 8002580:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002584:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002586:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <MX_TIM9_Init+0x78>)
 8002588:	2200      	movs	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <MX_TIM9_Init+0x78>)
 800258e:	2200      	movs	r2, #0
 8002590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8002592:	480f      	ldr	r0, [pc, #60]	; (80025d0 <MX_TIM9_Init+0x78>)
 8002594:	f004 fde8 	bl	8007168 <HAL_TIM_IC_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800259e:	f7ff fb6b 	bl	8001c78 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025a2:	2300      	movs	r3, #0
 80025a4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025a6:	2301      	movs	r3, #1
 80025a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 80025ae:	2302      	movs	r3, #2
 80025b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025b2:	463b      	mov	r3, r7
 80025b4:	2204      	movs	r2, #4
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_TIM9_Init+0x78>)
 80025ba:	f005 f8f5 	bl	80077a8 <HAL_TIM_IC_ConfigChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 80025c4:	f7ff fb58 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000624 	.word	0x20000624
 80025d4:	40014000 	.word	0x40014000

080025d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a16      	ldr	r2, [pc, #88]	; (8002640 <HAL_TIM_Base_MspInit+0x68>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d125      	bne.n	8002636 <HAL_TIM_Base_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <HAL_TIM_Base_MspInit+0x6c>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a14      	ldr	r2, [pc, #80]	; (8002644 <HAL_TIM_Base_MspInit+0x6c>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_TIM_Base_MspInit+0x6c>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	2018      	movs	r0, #24
 800260c:	f000 ff67 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002610:	2018      	movs	r0, #24
 8002612:	f000 ff80 	bl	8003516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	2019      	movs	r0, #25
 800261c:	f000 ff5f 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002620:	2019      	movs	r0, #25
 8002622:	f000 ff78 	bl	8003516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	201a      	movs	r0, #26
 800262c:	f000 ff57 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002630:	201a      	movs	r0, #26
 8002632:	f000 ff70 	bl	8003516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40010000 	.word	0x40010000
 8002644:	40023800 	.word	0x40023800

08002648 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002668:	d133      	bne.n	80026d2 <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a13      	ldr	r2, [pc, #76]	; (80026dc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80026a2:	2307      	movs	r3, #7
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026aa:	2301      	movs	r3, #1
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026b2:	2301      	movs	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4808      	ldr	r0, [pc, #32]	; (80026e0 <HAL_TIMEx_HallSensor_MspInit+0x98>)
 80026be:	f000 ff75 	bl	80035ac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	201c      	movs	r0, #28
 80026c8:	f000 ff09 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026cc:	201c      	movs	r0, #28
 80026ce:	f000 ff22 	bl	8003516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026d2:	bf00      	nop
 80026d4:	3728      	adds	r7, #40	; 0x28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40020000 	.word	0x40020000

080026e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <HAL_TIM_PWM_MspInit+0x80>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d116      	bne.n	8002724 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_TIM_PWM_MspInit+0x84>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <HAL_TIM_PWM_MspInit+0x84>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_TIM_PWM_MspInit+0x84>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002712:	2200      	movs	r2, #0
 8002714:	2100      	movs	r1, #0
 8002716:	201d      	movs	r0, #29
 8002718:	f000 fee1 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800271c:	201d      	movs	r0, #29
 800271e:	f000 fefa 	bl	8003516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002722:	e01a      	b.n	800275a <HAL_TIM_PWM_MspInit+0x76>
  else if(tim_pwmHandle->Instance==TIM5)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a10      	ldr	r2, [pc, #64]	; (800276c <HAL_TIM_PWM_MspInit+0x88>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d115      	bne.n	800275a <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <HAL_TIM_PWM_MspInit+0x84>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <HAL_TIM_PWM_MspInit+0x84>)
 8002738:	f043 0308 	orr.w	r3, r3, #8
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_TIM_PWM_MspInit+0x84>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	2100      	movs	r1, #0
 800274e:	2032      	movs	r0, #50	; 0x32
 8002750:	f000 fec5 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002754:	2032      	movs	r0, #50	; 0x32
 8002756:	f000 fede 	bl	8003516 <HAL_NVIC_EnableIRQ>
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40000400 	.word	0x40000400
 8002768:	40023800 	.word	0x40023800
 800276c:	40000c00 	.word	0x40000c00

08002770 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08c      	sub	sp, #48	; 0x30
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a36      	ldr	r2, [pc, #216]	; (8002868 <HAL_TIM_IC_MspInit+0xf8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d12d      	bne.n	80027ee <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	4b35      	ldr	r3, [pc, #212]	; (800286c <HAL_TIM_IC_MspInit+0xfc>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a34      	ldr	r2, [pc, #208]	; (800286c <HAL_TIM_IC_MspInit+0xfc>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b32      	ldr	r3, [pc, #200]	; (800286c <HAL_TIM_IC_MspInit+0xfc>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	4b2e      	ldr	r3, [pc, #184]	; (800286c <HAL_TIM_IC_MspInit+0xfc>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a2d      	ldr	r2, [pc, #180]	; (800286c <HAL_TIM_IC_MspInit+0xfc>)
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b2b      	ldr	r3, [pc, #172]	; (800286c <HAL_TIM_IC_MspInit+0xfc>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027dc:	2302      	movs	r3, #2
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e0:	f107 031c 	add.w	r3, r7, #28
 80027e4:	4619      	mov	r1, r3
 80027e6:	4822      	ldr	r0, [pc, #136]	; (8002870 <HAL_TIM_IC_MspInit+0x100>)
 80027e8:	f000 fee0 	bl	80035ac <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80027ec:	e038      	b.n	8002860 <HAL_TIM_IC_MspInit+0xf0>
  else if(tim_icHandle->Instance==TIM9)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a20      	ldr	r2, [pc, #128]	; (8002874 <HAL_TIM_IC_MspInit+0x104>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d133      	bne.n	8002860 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_TIM_IC_MspInit+0xfc>)
 80027fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002800:	4a1a      	ldr	r2, [pc, #104]	; (800286c <HAL_TIM_IC_MspInit+0xfc>)
 8002802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002806:	6453      	str	r3, [r2, #68]	; 0x44
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_TIM_IC_MspInit+0xfc>)
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <HAL_TIM_IC_MspInit+0xfc>)
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	4a13      	ldr	r2, [pc, #76]	; (800286c <HAL_TIM_IC_MspInit+0xfc>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6313      	str	r3, [r2, #48]	; 0x30
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_TIM_IC_MspInit+0xfc>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002830:	2308      	movs	r3, #8
 8002832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002838:	2301      	movs	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002840:	2303      	movs	r3, #3
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	4619      	mov	r1, r3
 800284a:	480b      	ldr	r0, [pc, #44]	; (8002878 <HAL_TIM_IC_MspInit+0x108>)
 800284c:	f000 feae 	bl	80035ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002850:	2200      	movs	r2, #0
 8002852:	2100      	movs	r1, #0
 8002854:	2018      	movs	r0, #24
 8002856:	f000 fe42 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800285a:	2018      	movs	r0, #24
 800285c:	f000 fe5b 	bl	8003516 <HAL_NVIC_EnableIRQ>
}
 8002860:	bf00      	nop
 8002862:	3730      	adds	r7, #48	; 0x30
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40000800 	.word	0x40000800
 800286c:	40023800 	.word	0x40023800
 8002870:	40020400 	.word	0x40020400
 8002874:	40014000 	.word	0x40014000
 8002878:	40020000 	.word	0x40020000

0800287c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a22      	ldr	r2, [pc, #136]	; (8002924 <HAL_TIM_MspPostInit+0xa8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d13d      	bne.n	800291a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	4b21      	ldr	r3, [pc, #132]	; (8002928 <HAL_TIM_MspPostInit+0xac>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a20      	ldr	r2, [pc, #128]	; (8002928 <HAL_TIM_MspPostInit+0xac>)
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <HAL_TIM_MspPostInit+0xac>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <HAL_TIM_MspPostInit+0xac>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a19      	ldr	r2, [pc, #100]	; (8002928 <HAL_TIM_MspPostInit+0xac>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_TIM_MspPostInit+0xac>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80028d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80028da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	2302      	movs	r3, #2
 80028de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e4:	2300      	movs	r3, #0
 80028e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028e8:	2301      	movs	r3, #1
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	4619      	mov	r1, r3
 80028f2:	480e      	ldr	r0, [pc, #56]	; (800292c <HAL_TIM_MspPostInit+0xb0>)
 80028f4:	f000 fe5a 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80028f8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80028fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800290a:	2301      	movs	r3, #1
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	4619      	mov	r1, r3
 8002914:	4806      	ldr	r0, [pc, #24]	; (8002930 <HAL_TIM_MspPostInit+0xb4>)
 8002916:	f000 fe49 	bl	80035ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800291a:	bf00      	nop
 800291c:	3728      	adds	r7, #40	; 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40010000 	.word	0x40010000
 8002928:	40023800 	.word	0x40023800
 800292c:	40020400 	.word	0x40020400
 8002930:	40020000 	.word	0x40020000

08002934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800296c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002938:	480d      	ldr	r0, [pc, #52]	; (8002970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800293a:	490e      	ldr	r1, [pc, #56]	; (8002974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800293c:	4a0e      	ldr	r2, [pc, #56]	; (8002978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002940:	e002      	b.n	8002948 <LoopCopyDataInit>

08002942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002946:	3304      	adds	r3, #4

08002948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800294c:	d3f9      	bcc.n	8002942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294e:	4a0b      	ldr	r2, [pc, #44]	; (800297c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002950:	4c0b      	ldr	r4, [pc, #44]	; (8002980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002954:	e001      	b.n	800295a <LoopFillZerobss>

08002956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002958:	3204      	adds	r2, #4

0800295a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800295c:	d3fb      	bcc.n	8002956 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800295e:	f7ff fbe3 	bl	8002128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002962:	f006 fd4d 	bl	8009400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002966:	f7ff f8af 	bl	8001ac8 <main>
  bx  lr    
 800296a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800296c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002974:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8002978:	0800b5a4 	.word	0x0800b5a4
  ldr r2, =_sbss
 800297c:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8002980:	200007bc 	.word	0x200007bc

08002984 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002984:	e7fe      	b.n	8002984 <DMA1_Stream0_IRQHandler>
	...

08002988 <HAL_Init>:
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <HAL_Init+0x40>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <HAL_Init+0x40>)
 8002992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_Init+0x40>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <HAL_Init+0x40>)
 800299e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_Init+0x40>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a07      	ldr	r2, [pc, #28]	; (80029c8 <HAL_Init+0x40>)
 80029aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	2003      	movs	r0, #3
 80029b2:	f000 fd89 	bl	80034c8 <HAL_NVIC_SetPriorityGrouping>
 80029b6:	200f      	movs	r0, #15
 80029b8:	f000 f808 	bl	80029cc <HAL_InitTick>
 80029bc:	f7ff f962 	bl	8001c84 <HAL_MspInit>
 80029c0:	2300      	movs	r3, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023c00 	.word	0x40023c00

080029cc <HAL_InitTick>:
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_InitTick+0x54>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_InitTick+0x58>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fda1 	bl	8003532 <HAL_SYSTICK_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_InitTick+0x2e>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00e      	b.n	8002a18 <HAL_InitTick+0x4c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b0f      	cmp	r3, #15
 80029fe:	d80a      	bhi.n	8002a16 <HAL_InitTick+0x4a>
 8002a00:	2200      	movs	r2, #0
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f000 fd69 	bl	80034de <HAL_NVIC_SetPriority>
 8002a0c:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <HAL_InitTick+0x5c>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_InitTick+0x4c>
 8002a16:	2301      	movs	r3, #1
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	2000009c 	.word	0x2000009c
 8002a24:	200000a4 	.word	0x200000a4
 8002a28:	200000a0 	.word	0x200000a0

08002a2c <HAL_IncTick>:
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_IncTick+0x20>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_IncTick+0x24>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <HAL_IncTick+0x24>)
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	200000a4 	.word	0x200000a4
 8002a50:	2000066c 	.word	0x2000066c

08002a54 <HAL_GetTick>:
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_GetTick+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	2000066c 	.word	0x2000066c

08002a6c <HAL_ADC_Init>:
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_Init+0x16>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e033      	b.n	8002aea <HAL_ADC_Init+0x7e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_ADC_Init+0x32>
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fe fd00 	bl	8001490 <HAL_ADC_MspInit>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d118      	bne.n	8002adc <HAL_ADC_Init+0x70>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ab2:	f023 0302 	bic.w	r3, r3, #2
 8002ab6:	f043 0202 	orr.w	r2, r3, #2
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fb2c 	bl	800311c <ADC_Init>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	f043 0201 	orr.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
 8002ada:	e001      	b.n	8002ae0 <HAL_ADC_Init+0x74>
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <HAL_ADC_Start_IT>:
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	2300      	movs	r3, #0
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_Start_IT+0x1a>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e0a1      	b.n	8002c52 <HAL_ADC_Start_IT+0x15e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d018      	beq.n	8002b56 <HAL_ADC_Start_IT+0x62>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_ADC_Start_IT+0x16c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <HAL_ADC_Start_IT+0x170>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0c9a      	lsrs	r2, r3, #18
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	e002      	b.n	8002b50 <HAL_ADC_Start_IT+0x5c>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f9      	bne.n	8002b4a <HAL_ADC_Start_IT+0x56>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d169      	bne.n	8002c38 <HAL_ADC_Start_IT+0x144>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <HAL_ADC_Start_IT+0xa2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba2:	d106      	bne.n	8002bb2 <HAL_ADC_Start_IT+0xbe>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba8:	f023 0206 	bic.w	r2, r3, #6
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	645a      	str	r2, [r3, #68]	; 0x44
 8002bb0:	e002      	b.n	8002bb8 <HAL_ADC_Start_IT+0xc4>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	645a      	str	r2, [r3, #68]	; 0x44
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002bc0:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <HAL_ADC_Start_IT+0x174>)
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bdc:	f043 0320 	orr.w	r3, r3, #32
 8002be0:	6053      	str	r3, [r2, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10f      	bne.n	8002c0e <HAL_ADC_Start_IT+0x11a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d129      	bne.n	8002c50 <HAL_ADC_Start_IT+0x15c>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	e020      	b.n	8002c50 <HAL_ADC_Start_IT+0x15c>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a16      	ldr	r2, [pc, #88]	; (8002c6c <HAL_ADC_Start_IT+0x178>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d11b      	bne.n	8002c50 <HAL_ADC_Start_IT+0x15c>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d114      	bne.n	8002c50 <HAL_ADC_Start_IT+0x15c>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	e00b      	b.n	8002c50 <HAL_ADC_Start_IT+0x15c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	f043 0210 	orr.w	r2, r3, #16
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	645a      	str	r2, [r3, #68]	; 0x44
 8002c50:	2300      	movs	r3, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	2000009c 	.word	0x2000009c
 8002c64:	431bde83 	.word	0x431bde83
 8002c68:	40012300 	.word	0x40012300
 8002c6c:	40012000 	.word	0x40012000

08002c70 <HAL_ADC_IRQHandler>:
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d049      	beq.n	8002d3a <HAL_ADC_IRQHandler+0xca>
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d046      	beq.n	8002d3a <HAL_ADC_IRQHandler+0xca>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <HAL_ADC_IRQHandler+0x54>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d12b      	bne.n	8002d2a <HAL_ADC_IRQHandler+0xba>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	7e1b      	ldrb	r3, [r3, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d127      	bne.n	8002d2a <HAL_ADC_IRQHandler+0xba>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d006      	beq.n	8002cf6 <HAL_ADC_IRQHandler+0x86>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d119      	bne.n	8002d2a <HAL_ADC_IRQHandler+0xba>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0220 	bic.w	r2, r2, #32
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <HAL_ADC_IRQHandler+0xba>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fe fbfc 	bl	8001528 <HAL_ADC_ConvCpltCallback>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0212 	mvn.w	r2, #18
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d057      	beq.n	8002e00 <HAL_ADC_IRQHandler+0x190>
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d054      	beq.n	8002e00 <HAL_ADC_IRQHandler+0x190>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <HAL_ADC_IRQHandler+0xfe>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d139      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x180>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d006      	beq.n	8002d98 <HAL_ADC_IRQHandler+0x128>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d12b      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x180>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d124      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x180>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d11d      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x180>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7e1b      	ldrb	r3, [r3, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d119      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x180>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x180>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fa8f 	bl	8003314 <HAL_ADCEx_InjectedConvCpltCallback>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f06f 020c 	mvn.w	r2, #12
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d017      	beq.n	8002e46 <HAL_ADC_IRQHandler+0x1d6>
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d014      	beq.n	8002e46 <HAL_ADC_IRQHandler+0x1d6>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d10d      	bne.n	8002e46 <HAL_ADC_IRQHandler+0x1d6>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f82a 	bl	8002e90 <HAL_ADC_LevelOutOfWindowCallback>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0201 	mvn.w	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d015      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x218>
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d012      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x218>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f043 0202 	orr.w	r2, r3, #2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	645a      	str	r2, [r3, #68]	; 0x44
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f06f 0220 	mvn.w	r2, #32
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f813 	bl	8002ea4 <HAL_ADC_ErrorCallback>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f06f 0220 	mvn.w	r2, #32
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	bf00      	nop
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_ADC_LevelOutOfWindowCallback>:
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_ADC_ErrorCallback>:
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_ADC_ConfigChannel>:
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x1c>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e113      	b.n	80030fc <HAL_ADC_ConfigChannel+0x244>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b09      	cmp	r3, #9
 8002ee2:	d925      	bls.n	8002f30 <HAL_ADC_ConfigChannel+0x78>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68d9      	ldr	r1, [r3, #12]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3b1e      	subs	r3, #30
 8002efa:	2207      	movs	r2, #7
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43da      	mvns	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	400a      	ands	r2, r1
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68d9      	ldr	r1, [r3, #12]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4403      	add	r3, r0
 8002f22:	3b1e      	subs	r3, #30
 8002f24:	409a      	lsls	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	e022      	b.n	8002f76 <HAL_ADC_ConfigChannel+0xbe>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6919      	ldr	r1, [r3, #16]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	2207      	movs	r2, #7
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	400a      	ands	r2, r1
 8002f52:	611a      	str	r2, [r3, #16]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6919      	ldr	r1, [r3, #16]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	4618      	mov	r0, r3
 8002f66:	4603      	mov	r3, r0
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4403      	add	r3, r0
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	611a      	str	r2, [r3, #16]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b06      	cmp	r3, #6
 8002f7c:	d824      	bhi.n	8002fc8 <HAL_ADC_ConfigChannel+0x110>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3b05      	subs	r3, #5
 8002f90:	221f      	movs	r2, #31
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	635a      	str	r2, [r3, #52]	; 0x34
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	4618      	mov	r0, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3b05      	subs	r3, #5
 8002fba:	fa00 f203 	lsl.w	r2, r0, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fc6:	e04c      	b.n	8003062 <HAL_ADC_ConfigChannel+0x1aa>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	d824      	bhi.n	800301a <HAL_ADC_ConfigChannel+0x162>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	3b23      	subs	r3, #35	; 0x23
 8002fe2:	221f      	movs	r2, #31
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43da      	mvns	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	400a      	ands	r2, r1
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	4618      	mov	r0, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	3b23      	subs	r3, #35	; 0x23
 800300c:	fa00 f203 	lsl.w	r2, r0, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
 8003018:	e023      	b.n	8003062 <HAL_ADC_ConfigChannel+0x1aa>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	3b41      	subs	r3, #65	; 0x41
 800302c:	221f      	movs	r2, #31
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	400a      	ands	r2, r1
 800303a:	62da      	str	r2, [r3, #44]	; 0x2c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	b29b      	uxth	r3, r3
 8003048:	4618      	mov	r0, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	3b41      	subs	r3, #65	; 0x41
 8003056:	fa00 f203 	lsl.w	r2, r0, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c
 8003062:	4b29      	ldr	r3, [pc, #164]	; (8003108 <HAL_ADC_ConfigChannel+0x250>)
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a28      	ldr	r2, [pc, #160]	; (800310c <HAL_ADC_ConfigChannel+0x254>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d10f      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x1d8>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b12      	cmp	r3, #18
 8003076:	d10b      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x1d8>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1d      	ldr	r2, [pc, #116]	; (800310c <HAL_ADC_ConfigChannel+0x254>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d12b      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x23a>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <HAL_ADC_ConfigChannel+0x258>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d003      	beq.n	80030ac <HAL_ADC_ConfigChannel+0x1f4>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b11      	cmp	r3, #17
 80030aa:	d122      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x23a>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a11      	ldr	r2, [pc, #68]	; (8003110 <HAL_ADC_ConfigChannel+0x258>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d111      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x23a>
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <HAL_ADC_ConfigChannel+0x25c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a11      	ldr	r2, [pc, #68]	; (8003118 <HAL_ADC_ConfigChannel+0x260>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	0c9a      	lsrs	r2, r3, #18
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	e002      	b.n	80030ec <HAL_ADC_ConfigChannel+0x234>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f9      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x22e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80030fa:	2300      	movs	r3, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40012300 	.word	0x40012300
 800310c:	40012000 	.word	0x40012000
 8003110:	10000012 	.word	0x10000012
 8003114:	2000009c 	.word	0x2000009c
 8003118:	431bde83 	.word	0x431bde83

0800311c <ADC_Init>:
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	4b79      	ldr	r3, [pc, #484]	; (800330c <ADC_Init+0x1f0>)
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	431a      	orrs	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	021a      	lsls	r2, r3, #8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6899      	ldr	r1, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	4a58      	ldr	r2, [pc, #352]	; (8003310 <ADC_Init+0x1f4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d022      	beq.n	80031fa <ADC_Init+0xde>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6899      	ldr	r1, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	609a      	str	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6899      	ldr	r1, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	e00f      	b.n	800321a <ADC_Init+0xfe>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003208:	609a      	str	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0202 	bic.w	r2, r2, #2
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6899      	ldr	r1, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7e1b      	ldrb	r3, [r3, #24]
 8003234:	005a      	lsls	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01b      	beq.n	8003280 <ADC_Init+0x164>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	3b01      	subs	r3, #1
 8003274:	035a      	lsls	r2, r3, #13
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	e007      	b.n	8003290 <ADC_Init+0x174>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328e:	605a      	str	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	051a      	lsls	r2, r3, #20
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6899      	ldr	r1, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032d2:	025a      	lsls	r2, r3, #9
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6899      	ldr	r1, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	029a      	lsls	r2, r3, #10
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40012300 	.word	0x40012300
 8003310:	0f000001 	.word	0x0f000001

08003314 <HAL_ADCEx_InjectedConvCpltCallback>:
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <__NVIC_SetPriorityGrouping>:
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <__NVIC_SetPriorityGrouping+0x44>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003344:	4013      	ands	r3, r2
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	021a      	lsls	r2, r3, #8
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4313      	orrs	r3, r2
 8003350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	4a04      	ldr	r2, [pc, #16]	; (800336c <__NVIC_SetPriorityGrouping+0x44>)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	60d3      	str	r3, [r2, #12]
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <__NVIC_GetPriorityGrouping>:
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <__NVIC_GetPriorityGrouping+0x18>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	0a1b      	lsrs	r3, r3, #8
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <__NVIC_EnableIRQ>:
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	2b00      	cmp	r3, #0
 800339c:	db0b      	blt.n	80033b6 <__NVIC_EnableIRQ+0x2a>
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	f003 021f 	and.w	r2, r3, #31
 80033a4:	4907      	ldr	r1, [pc, #28]	; (80033c4 <__NVIC_EnableIRQ+0x38>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	2001      	movs	r0, #1
 80033ae:	fa00 f202 	lsl.w	r2, r0, r2
 80033b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	e000e100 	.word	0xe000e100

080033c8 <__NVIC_SetPriority>:
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	6039      	str	r1, [r7, #0]
 80033d2:	71fb      	strb	r3, [r7, #7]
 80033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	db0a      	blt.n	80033f2 <__NVIC_SetPriority+0x2a>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	490c      	ldr	r1, [pc, #48]	; (8003414 <__NVIC_SetPriority+0x4c>)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	0112      	lsls	r2, r2, #4
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	440b      	add	r3, r1
 80033ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80033f0:	e00a      	b.n	8003408 <__NVIC_SetPriority+0x40>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	4908      	ldr	r1, [pc, #32]	; (8003418 <__NVIC_SetPriority+0x50>)
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	3b04      	subs	r3, #4
 8003400:	0112      	lsls	r2, r2, #4
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	440b      	add	r3, r1
 8003406:	761a      	strb	r2, [r3, #24]
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000e100 	.word	0xe000e100
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <NVIC_EncodePriority>:
 800341c:	b480      	push	{r7}
 800341e:	b089      	sub	sp, #36	; 0x24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f1c3 0307 	rsb	r3, r3, #7
 8003436:	2b04      	cmp	r3, #4
 8003438:	bf28      	it	cs
 800343a:	2304      	movcs	r3, #4
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3304      	adds	r3, #4
 8003442:	2b06      	cmp	r3, #6
 8003444:	d902      	bls.n	800344c <NVIC_EncodePriority+0x30>
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3b03      	subs	r3, #3
 800344a:	e000      	b.n	800344e <NVIC_EncodePriority+0x32>
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	f04f 32ff 	mov.w	r2, #4294967295
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43da      	mvns	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	401a      	ands	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	409a      	lsls	r2, r3
 8003464:	f04f 31ff 	mov.w	r1, #4294967295
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	43d9      	mvns	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	400b      	ands	r3, r1
 8003474:	4313      	orrs	r3, r2
 8003476:	4618      	mov	r0, r3
 8003478:	3724      	adds	r7, #36	; 0x24
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <SysTick_Config>:
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003494:	d301      	bcc.n	800349a <SysTick_Config+0x16>
 8003496:	2301      	movs	r3, #1
 8003498:	e00f      	b.n	80034ba <SysTick_Config+0x36>
 800349a:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <SysTick_Config+0x40>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	6053      	str	r3, [r2, #4]
 80034a2:	210f      	movs	r1, #15
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295
 80034a8:	f7ff ff8e 	bl	80033c8 <__NVIC_SetPriority>
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <SysTick_Config+0x40>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <SysTick_Config+0x40>)
 80034b4:	2207      	movs	r2, #7
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	2300      	movs	r3, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	e000e010 	.word	0xe000e010

080034c8 <HAL_NVIC_SetPriorityGrouping>:
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff29 	bl	8003328 <__NVIC_SetPriorityGrouping>
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_NVIC_SetPriority>:
 80034de:	b580      	push	{r7, lr}
 80034e0:	b086      	sub	sp, #24
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	4603      	mov	r3, r0
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	73fb      	strb	r3, [r7, #15]
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	f7ff ff3e 	bl	8003370 <__NVIC_GetPriorityGrouping>
 80034f4:	6178      	str	r0, [r7, #20]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	6978      	ldr	r0, [r7, #20]
 80034fc:	f7ff ff8e 	bl	800341c <NVIC_EncodePriority>
 8003500:	4602      	mov	r2, r0
 8003502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ff5d 	bl	80033c8 <__NVIC_SetPriority>
 800350e:	bf00      	nop
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_NVIC_EnableIRQ>:
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	4603      	mov	r3, r0
 800351e:	71fb      	strb	r3, [r7, #7]
 8003520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff31 	bl	800338c <__NVIC_EnableIRQ>
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_SYSTICK_Config>:
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ffa2 	bl	8003484 <SysTick_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_DMA_Abort_IT>:
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d004      	beq.n	8003568 <HAL_DMA_Abort_IT+0x1e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	655a      	str	r2, [r3, #84]	; 0x54
 8003564:	2301      	movs	r3, #1
 8003566:	e00c      	b.n	8003582 <HAL_DMA_Abort_IT+0x38>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2205      	movs	r2, #5
 800356c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	2300      	movs	r3, #0
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_DMA_GetState>:
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800359c:	b2db      	uxtb	r3, r3
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_GPIO_Init>:
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	; 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	e159      	b.n	800387c <HAL_GPIO_Init+0x2d0>
 80035c8:	2201      	movs	r2, #1
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	f040 8148 	bne.w	8003876 <HAL_GPIO_Init+0x2ca>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d005      	beq.n	80035fe <HAL_GPIO_Init+0x52>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d130      	bne.n	8003660 <HAL_GPIO_Init+0xb4>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	2203      	movs	r2, #3
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	609a      	str	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	2201      	movs	r2, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 0201 	and.w	r2, r3, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b03      	cmp	r3, #3
 800366a:	d017      	beq.n	800369c <HAL_GPIO_Init+0xf0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	2203      	movs	r2, #3
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	60da      	str	r2, [r3, #12]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d123      	bne.n	80036f0 <HAL_GPIO_Init+0x144>
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	08da      	lsrs	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3208      	adds	r2, #8
 80036b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	220f      	movs	r2, #15
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	08da      	lsrs	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3208      	adds	r2, #8
 80036ea:	69b9      	ldr	r1, [r7, #24]
 80036ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	2203      	movs	r2, #3
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0203 	and.w	r2, r3, #3
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80a2 	beq.w	8003876 <HAL_GPIO_Init+0x2ca>
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	4b57      	ldr	r3, [pc, #348]	; (8003894 <HAL_GPIO_Init+0x2e8>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	4a56      	ldr	r2, [pc, #344]	; (8003894 <HAL_GPIO_Init+0x2e8>)
 800373c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003740:	6453      	str	r3, [r2, #68]	; 0x44
 8003742:	4b54      	ldr	r3, [pc, #336]	; (8003894 <HAL_GPIO_Init+0x2e8>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4a52      	ldr	r2, [pc, #328]	; (8003898 <HAL_GPIO_Init+0x2ec>)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	089b      	lsrs	r3, r3, #2
 8003754:	3302      	adds	r3, #2
 8003756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	220f      	movs	r2, #15
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a49      	ldr	r2, [pc, #292]	; (800389c <HAL_GPIO_Init+0x2f0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d019      	beq.n	80037ae <HAL_GPIO_Init+0x202>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a48      	ldr	r2, [pc, #288]	; (80038a0 <HAL_GPIO_Init+0x2f4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_GPIO_Init+0x1fe>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a47      	ldr	r2, [pc, #284]	; (80038a4 <HAL_GPIO_Init+0x2f8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00d      	beq.n	80037a6 <HAL_GPIO_Init+0x1fa>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a46      	ldr	r2, [pc, #280]	; (80038a8 <HAL_GPIO_Init+0x2fc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <HAL_GPIO_Init+0x1f6>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a45      	ldr	r2, [pc, #276]	; (80038ac <HAL_GPIO_Init+0x300>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_GPIO_Init+0x1f2>
 800379a:	2304      	movs	r3, #4
 800379c:	e008      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 800379e:	2307      	movs	r3, #7
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 80037a2:	2303      	movs	r3, #3
 80037a4:	e004      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e002      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 80037ae:	2300      	movs	r3, #0
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f002 0203 	and.w	r2, r2, #3
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	4093      	lsls	r3, r2
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
 80037c0:	4935      	ldr	r1, [pc, #212]	; (8003898 <HAL_GPIO_Init+0x2ec>)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	3302      	adds	r3, #2
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80037ce:	4b38      	ldr	r3, [pc, #224]	; (80038b0 <HAL_GPIO_Init+0x304>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x246>
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	4a2f      	ldr	r2, [pc, #188]	; (80038b0 <HAL_GPIO_Init+0x304>)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6093      	str	r3, [r2, #8]
 80037f8:	4b2d      	ldr	r3, [pc, #180]	; (80038b0 <HAL_GPIO_Init+0x304>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x270>
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	4a24      	ldr	r2, [pc, #144]	; (80038b0 <HAL_GPIO_Init+0x304>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	60d3      	str	r3, [r2, #12]
 8003822:	4b23      	ldr	r3, [pc, #140]	; (80038b0 <HAL_GPIO_Init+0x304>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x29a>
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	4a1a      	ldr	r2, [pc, #104]	; (80038b0 <HAL_GPIO_Init+0x304>)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	6053      	str	r3, [r2, #4]
 800384c:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <HAL_GPIO_Init+0x304>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x2c4>
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	4a0f      	ldr	r2, [pc, #60]	; (80038b0 <HAL_GPIO_Init+0x304>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3301      	adds	r3, #1
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	f67f aea2 	bls.w	80035c8 <HAL_GPIO_Init+0x1c>
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3724      	adds	r7, #36	; 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	40013800 	.word	0x40013800
 800389c:	40020000 	.word	0x40020000
 80038a0:	40020400 	.word	0x40020400
 80038a4:	40020800 	.word	0x40020800
 80038a8:	40020c00 	.word	0x40020c00
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40013c00 	.word	0x40013c00

080038b4 <HAL_GPIO_WritePin>:
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	807b      	strh	r3, [r7, #2]
 80038c0:	4613      	mov	r3, r2
 80038c2:	707b      	strb	r3, [r7, #1]
 80038c4:	787b      	ldrb	r3, [r7, #1]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_WritePin+0x1e>
 80038ca:	887a      	ldrh	r2, [r7, #2]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	619a      	str	r2, [r3, #24]
 80038d0:	e003      	b.n	80038da <HAL_GPIO_WritePin+0x26>
 80038d2:	887b      	ldrh	r3, [r7, #2]
 80038d4:	041a      	lsls	r2, r3, #16
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	619a      	str	r2, [r3, #24]
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_GPIO_EXTI_IRQHandler>:
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	80fb      	strh	r3, [r7, #6]
 80038f2:	4b08      	ldr	r3, [pc, #32]	; (8003914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d006      	beq.n	800390c <HAL_GPIO_EXTI_IRQHandler+0x24>
 80038fe:	4a05      	ldr	r2, [pc, #20]	; (8003914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	6153      	str	r3, [r2, #20]
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f806 	bl	8003918 <HAL_GPIO_EXTI_Callback>
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40013c00 	.word	0x40013c00

08003918 <HAL_GPIO_EXTI_Callback>:
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	80fb      	strh	r3, [r7, #6]
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <HAL_I2C_Init>:
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_I2C_Init+0x12>
 800393e:	2301      	movs	r3, #1
 8003940:	e12b      	b.n	8003b9a <HAL_I2C_Init+0x26a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_I2C_Init+0x2c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd ff02 	bl	8001760 <HAL_I2C_MspInit>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2224      	movs	r2, #36	; 0x24
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f003 f97c 	bl	8006c90 <HAL_RCC_GetPCLK1Freq>
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4a81      	ldr	r2, [pc, #516]	; (8003ba4 <HAL_I2C_Init+0x274>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d807      	bhi.n	80039b4 <HAL_I2C_Init+0x84>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a80      	ldr	r2, [pc, #512]	; (8003ba8 <HAL_I2C_Init+0x278>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	bf94      	ite	ls
 80039ac:	2301      	movls	r3, #1
 80039ae:	2300      	movhi	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e006      	b.n	80039c2 <HAL_I2C_Init+0x92>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a7d      	ldr	r2, [pc, #500]	; (8003bac <HAL_I2C_Init+0x27c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	bf94      	ite	ls
 80039bc:	2301      	movls	r3, #1
 80039be:	2300      	movhi	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Init+0x9a>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e0e7      	b.n	8003b9a <HAL_I2C_Init+0x26a>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4a78      	ldr	r2, [pc, #480]	; (8003bb0 <HAL_I2C_Init+0x280>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	0c9b      	lsrs	r3, r3, #18
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4a6a      	ldr	r2, [pc, #424]	; (8003ba4 <HAL_I2C_Init+0x274>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d802      	bhi.n	8003a04 <HAL_I2C_Init+0xd4>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3301      	adds	r3, #1
 8003a02:	e009      	b.n	8003a18 <HAL_I2C_Init+0xe8>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a0a:	fb02 f303 	mul.w	r3, r2, r3
 8003a0e:	4a69      	ldr	r2, [pc, #420]	; (8003bb4 <HAL_I2C_Init+0x284>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	3301      	adds	r3, #1
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	6213      	str	r3, [r2, #32]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	495c      	ldr	r1, [pc, #368]	; (8003ba4 <HAL_I2C_Init+0x274>)
 8003a34:	428b      	cmp	r3, r1
 8003a36:	d819      	bhi.n	8003a6c <HAL_I2C_Init+0x13c>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1e59      	subs	r1, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a46:	1c59      	adds	r1, r3, #1
 8003a48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a4c:	400b      	ands	r3, r1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_I2C_Init+0x138>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1e59      	subs	r1, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a60:	3301      	adds	r3, #1
 8003a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a66:	e051      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	e04f      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d111      	bne.n	8003a98 <HAL_I2C_Init+0x168>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e58      	subs	r0, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	440b      	add	r3, r1
 8003a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	e012      	b.n	8003abe <HAL_I2C_Init+0x18e>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1e58      	subs	r0, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	0099      	lsls	r1, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Init+0x196>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e022      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10e      	bne.n	8003aec <HAL_I2C_Init+0x1bc>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1e58      	subs	r0, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	440b      	add	r3, r1
 8003adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aea:	e00f      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	1e58      	subs	r0, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	0099      	lsls	r1, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b02:	3301      	adds	r3, #1
 8003b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	6809      	ldr	r1, [r1, #0]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61cb      	str	r3, [r1, #28]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6911      	ldr	r1, [r2, #16]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68d2      	ldr	r2, [r2, #12]
 8003b46:	4311      	orrs	r1, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6093      	str	r3, [r2, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	60da      	str	r2, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b98:	2300      	movs	r3, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	000186a0 	.word	0x000186a0
 8003ba8:	001e847f 	.word	0x001e847f
 8003bac:	003d08ff 	.word	0x003d08ff
 8003bb0:	431bde83 	.word	0x431bde83
 8003bb4:	10624dd3 	.word	0x10624dd3

08003bb8 <HAL_I2C_Master_Transmit>:
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	817b      	strh	r3, [r7, #10]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	813b      	strh	r3, [r7, #8]
 8003bcc:	f7fe ff42 	bl	8002a54 <HAL_GetTick>
 8003bd0:	6178      	str	r0, [r7, #20]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	f040 80e0 	bne.w	8003da0 <HAL_I2C_Master_Transmit+0x1e8>
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2319      	movs	r3, #25
 8003be6:	2201      	movs	r2, #1
 8003be8:	4970      	ldr	r1, [pc, #448]	; (8003dac <HAL_I2C_Master_Transmit+0x1f4>)
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f002 f9f6 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Master_Transmit+0x42>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e0d3      	b.n	8003da2 <HAL_I2C_Master_Transmit+0x1ea>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_I2C_Master_Transmit+0x50>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e0cc      	b.n	8003da2 <HAL_I2C_Master_Transmit+0x1ea>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d007      	beq.n	8003c2e <HAL_I2C_Master_Transmit+0x76>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0201 	orr.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2221      	movs	r2, #33	; 0x21
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2210      	movs	r2, #16
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	893a      	ldrh	r2, [r7, #8]
 8003c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	; 0x28
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4a50      	ldr	r2, [pc, #320]	; (8003db0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c70:	8979      	ldrh	r1, [r7, #10]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f001 ffb8 	bl	8005bec <I2C_MasterRequestWrite>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Master_Transmit+0xce>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e08d      	b.n	8003da2 <HAL_I2C_Master_Transmit+0x1ea>
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	e066      	b.n	8003d6c <HAL_I2C_Master_Transmit+0x1b4>
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	6a39      	ldr	r1, [r7, #32]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f002 fa70 	bl	8006188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00d      	beq.n	8003cca <HAL_I2C_Master_Transmit+0x112>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d107      	bne.n	8003cc6 <HAL_I2C_Master_Transmit+0x10e>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e06b      	b.n	8003da2 <HAL_I2C_Master_Transmit+0x1ea>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	781a      	ldrb	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	611a      	str	r2, [r3, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	625a      	str	r2, [r3, #36]	; 0x24
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	851a      	strh	r2, [r3, #40]	; 0x28
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d11b      	bne.n	8003d40 <HAL_I2C_Master_Transmit+0x188>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d017      	beq.n	8003d40 <HAL_I2C_Master_Transmit+0x188>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	781a      	ldrb	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	611a      	str	r2, [r3, #16]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	6a39      	ldr	r1, [r7, #32]
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f002 fa60 	bl	800620a <I2C_WaitOnBTFFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <HAL_I2C_Master_Transmit+0x1b4>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d107      	bne.n	8003d68 <HAL_I2C_Master_Transmit+0x1b0>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e01a      	b.n	8003da2 <HAL_I2C_Master_Transmit+0x1ea>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d194      	bne.n	8003c9e <HAL_I2C_Master_Transmit+0xe6>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e000      	b.n	8003da2 <HAL_I2C_Master_Transmit+0x1ea>
 8003da0:	2302      	movs	r3, #2
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	00100002 	.word	0x00100002
 8003db0:	ffff0000 	.word	0xffff0000

08003db4 <HAL_I2C_Master_Receive>:
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08c      	sub	sp, #48	; 0x30
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	817b      	strh	r3, [r7, #10]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	813b      	strh	r3, [r7, #8]
 8003dc8:	f7fe fe44 	bl	8002a54 <HAL_GetTick>
 8003dcc:	6278      	str	r0, [r7, #36]	; 0x24
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	f040 820b 	bne.w	80041f2 <HAL_I2C_Master_Receive+0x43e>
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	2319      	movs	r3, #25
 8003de2:	2201      	movs	r2, #1
 8003de4:	497c      	ldr	r1, [pc, #496]	; (8003fd8 <HAL_I2C_Master_Receive+0x224>)
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f002 f8f8 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Master_Receive+0x42>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e1fe      	b.n	80041f4 <HAL_I2C_Master_Receive+0x440>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_I2C_Master_Receive+0x50>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e1f7      	b.n	80041f4 <HAL_I2C_Master_Receive+0x440>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d007      	beq.n	8003e2a <HAL_I2C_Master_Receive+0x76>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0201 	orr.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2222      	movs	r2, #34	; 0x22
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2210      	movs	r2, #16
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	893a      	ldrh	r2, [r7, #8]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	851a      	strh	r2, [r3, #40]	; 0x28
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4a5c      	ldr	r2, [pc, #368]	; (8003fdc <HAL_I2C_Master_Receive+0x228>)
 8003e6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e6c:	8979      	ldrh	r1, [r7, #10]
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f001 ff3c 	bl	8005cf0 <I2C_MasterRequestRead>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Master_Receive+0xce>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e1b8      	b.n	80041f4 <HAL_I2C_Master_Receive+0x440>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d113      	bne.n	8003eb2 <HAL_I2C_Master_Receive+0xfe>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	623b      	str	r3, [r7, #32]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	623b      	str	r3, [r7, #32]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	623b      	str	r3, [r7, #32]
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	e18c      	b.n	80041cc <HAL_I2C_Master_Receive+0x418>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d11b      	bne.n	8003ef2 <HAL_I2C_Master_Receive+0x13e>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e16c      	b.n	80041cc <HAL_I2C_Master_Receive+0x418>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d11b      	bne.n	8003f32 <HAL_I2C_Master_Receive+0x17e>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	e14c      	b.n	80041cc <HAL_I2C_Master_Receive+0x418>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	e138      	b.n	80041cc <HAL_I2C_Master_Receive+0x418>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	f200 80f1 	bhi.w	8004146 <HAL_I2C_Master_Receive+0x392>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d123      	bne.n	8003fb4 <HAL_I2C_Master_Receive+0x200>
 8003f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f002 f9bd 	bl	80062f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_I2C_Master_Receive+0x1cc>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e139      	b.n	80041f4 <HAL_I2C_Master_Receive+0x440>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	; 0x28
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fb2:	e10b      	b.n	80041cc <HAL_I2C_Master_Receive+0x418>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d14e      	bne.n	800405a <HAL_I2C_Master_Receive+0x2a6>
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	4906      	ldr	r1, [pc, #24]	; (8003fe0 <HAL_I2C_Master_Receive+0x22c>)
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f002 f808 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_I2C_Master_Receive+0x230>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e10e      	b.n	80041f4 <HAL_I2C_Master_Receive+0x440>
 8003fd6:	bf00      	nop
 8003fd8:	00100002 	.word	0x00100002
 8003fdc:	ffff0000 	.word	0xffff0000
 8003fe0:	00010004 	.word	0x00010004
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	625a      	str	r2, [r3, #36]	; 0x24
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	851a      	strh	r2, [r3, #40]	; 0x28
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	701a      	strb	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	625a      	str	r2, [r3, #36]	; 0x24
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	851a      	strh	r2, [r3, #40]	; 0x28
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004058:	e0b8      	b.n	80041cc <HAL_I2C_Master_Receive+0x418>
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	2200      	movs	r2, #0
 8004062:	4966      	ldr	r1, [pc, #408]	; (80041fc <HAL_I2C_Master_Receive+0x448>)
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f001 ffb9 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_I2C_Master_Receive+0x2c0>
 8004070:	2301      	movs	r3, #1
 8004072:	e0bf      	b.n	80041f4 <HAL_I2C_Master_Receive+0x440>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	625a      	str	r2, [r3, #36]	; 0x24
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	851a      	strh	r2, [r3, #40]	; 0x28
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	2200      	movs	r2, #0
 80040be:	494f      	ldr	r1, [pc, #316]	; (80041fc <HAL_I2C_Master_Receive+0x448>)
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f001 ff8b 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_I2C_Master_Receive+0x31c>
 80040cc:	2301      	movs	r3, #1
 80040ce:	e091      	b.n	80041f4 <HAL_I2C_Master_Receive+0x440>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	851a      	strh	r2, [r3, #40]	; 0x28
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	625a      	str	r2, [r3, #36]	; 0x24
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	851a      	strh	r2, [r3, #40]	; 0x28
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004144:	e042      	b.n	80041cc <HAL_I2C_Master_Receive+0x418>
 8004146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f002 f8d0 	bl	80062f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <HAL_I2C_Master_Receive+0x3a6>
 8004156:	2301      	movs	r3, #1
 8004158:	e04c      	b.n	80041f4 <HAL_I2C_Master_Receive+0x440>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	701a      	strb	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	625a      	str	r2, [r3, #36]	; 0x24
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	851a      	strh	r2, [r3, #40]	; 0x28
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b04      	cmp	r3, #4
 8004198:	d118      	bne.n	80041cc <HAL_I2C_Master_Receive+0x418>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	851a      	strh	r2, [r3, #40]	; 0x28
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f47f aec2 	bne.w	8003f5a <HAL_I2C_Master_Receive+0x1a6>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041ee:	2300      	movs	r3, #0
 80041f0:	e000      	b.n	80041f4 <HAL_I2C_Master_Receive+0x440>
 80041f2:	2302      	movs	r3, #2
 80041f4:	4618      	mov	r0, r3
 80041f6:	3728      	adds	r7, #40	; 0x28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	00010004 	.word	0x00010004

08004200 <HAL_I2C_Slave_Seq_Transmit_IT>:
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	80fb      	strh	r3, [r7, #6]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800421c:	2b28      	cmp	r3, #40	; 0x28
 800421e:	d15b      	bne.n	80042d8 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
 800422c:	2301      	movs	r3, #1
 800422e:	e054      	b.n	80042da <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800423a:	2302      	movs	r3, #2
 800423c:	e04d      	b.n	80042da <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b01      	cmp	r3, #1
 8004252:	d007      	beq.n	8004264 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2229      	movs	r2, #41	; 0x29
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	641a      	str	r2, [r3, #64]	; 0x40
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	625a      	str	r2, [r3, #36]	; 0x24
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	88fa      	ldrh	r2, [r7, #6]
 8004294:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	851a      	strh	r2, [r3, #40]	; 0x28
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80042d2:	605a      	str	r2, [r3, #4]
 80042d4:	2300      	movs	r3, #0
 80042d6:	e000      	b.n	80042da <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80042d8:	2302      	movs	r3, #2
 80042da:	4618      	mov	r0, r3
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_I2C_Slave_Seq_Receive_IT>:
 80042e6:	b480      	push	{r7}
 80042e8:	b087      	sub	sp, #28
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004302:	2b28      	cmp	r3, #40	; 0x28
 8004304:	d15b      	bne.n	80043be <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
 8004312:	2301      	movs	r3, #1
 8004314:	e054      	b.n	80043c0 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8004320:	2302      	movs	r3, #2
 8004322:	e04d      	b.n	80043c0 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d007      	beq.n	800434a <HAL_I2C_Slave_Seq_Receive_IT+0x64>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	222a      	movs	r2, #42	; 0x2a
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	641a      	str	r2, [r3, #64]	; 0x40
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	88fa      	ldrh	r2, [r7, #6]
 800437a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	851a      	strh	r2, [r3, #40]	; 0x28
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	62da      	str	r2, [r3, #44]	; 0x2c
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	2300      	movs	r3, #0
 80043bc:	e000      	b.n	80043c0 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80043be:	2302      	movs	r3, #2
 80043c0:	4618      	mov	r0, r3
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_I2C_EnableListen_IT>:
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d124      	bne.n	800442a <HAL_I2C_EnableListen_IT+0x5e>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2228      	movs	r2, #40	; 0x28
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d007      	beq.n	8004406 <HAL_I2C_EnableListen_IT+0x3a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	2300      	movs	r3, #0
 8004428:	e000      	b.n	800442c <HAL_I2C_EnableListen_IT+0x60>
 800442a:	2302      	movs	r3, #2
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_I2C_DisableListen_IT>:
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b28      	cmp	r3, #40	; 0x28
 800444a:	d129      	bne.n	80044a0 <HAL_I2C_DisableListen_IT+0x68>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800449a:	605a      	str	r2, [r3, #4]
 800449c:	2300      	movs	r3, #0
 800449e:	e000      	b.n	80044a2 <HAL_I2C_DisableListen_IT+0x6a>
 80044a0:	2302      	movs	r3, #2
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <HAL_I2C_EV_IRQHandler>:
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b088      	sub	sp, #32
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d6:	73bb      	strb	r3, [r7, #14]
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b10      	cmp	r3, #16
 80044dc:	d003      	beq.n	80044e6 <HAL_I2C_EV_IRQHandler+0x38>
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	2b40      	cmp	r3, #64	; 0x40
 80044e2:	f040 80b1 	bne.w	8004648 <HAL_I2C_EV_IRQHandler+0x19a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10d      	bne.n	800451c <HAL_I2C_EV_IRQHandler+0x6e>
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004506:	d003      	beq.n	8004510 <HAL_I2C_EV_IRQHandler+0x62>
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800450e:	d101      	bne.n	8004514 <HAL_I2C_EV_IRQHandler+0x66>
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <HAL_I2C_EV_IRQHandler+0x68>
 8004514:	2300      	movs	r3, #0
 8004516:	2b01      	cmp	r3, #1
 8004518:	f000 8114 	beq.w	8004744 <HAL_I2C_EV_IRQHandler+0x296>
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00b      	beq.n	800453e <HAL_I2C_EV_IRQHandler+0x90>
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800452c:	2b00      	cmp	r3, #0
 800452e:	d006      	beq.n	800453e <HAL_I2C_EV_IRQHandler+0x90>
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f001 ff62 	bl	80063fa <I2C_ConvertOtherXferOptions>
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fd3e 	bl	8004fb8 <I2C_Master_SB>
 800453c:	e083      	b.n	8004646 <HAL_I2C_EV_IRQHandler+0x198>
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_I2C_EV_IRQHandler+0xac>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_I2C_EV_IRQHandler+0xac>
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fdb6 	bl	80050c4 <I2C_Master_ADD10>
 8004558:	e075      	b.n	8004646 <HAL_I2C_EV_IRQHandler+0x198>
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_I2C_EV_IRQHandler+0xc8>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_I2C_EV_IRQHandler+0xc8>
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fdd2 	bl	8005118 <I2C_Master_ADDR>
 8004574:	e067      	b.n	8004646 <HAL_I2C_EV_IRQHandler+0x198>
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d036      	beq.n	80045ee <HAL_I2C_EV_IRQHandler+0x140>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800458a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800458e:	f000 80db 	beq.w	8004748 <HAL_I2C_EV_IRQHandler+0x29a>
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <HAL_I2C_EV_IRQHandler+0x10a>
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_I2C_EV_IRQHandler+0x10a>
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d103      	bne.n	80045b8 <HAL_I2C_EV_IRQHandler+0x10a>
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f9b6 	bl	8004922 <I2C_MasterTransmit_TXE>
 80045b6:	e046      	b.n	8004646 <HAL_I2C_EV_IRQHandler+0x198>
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80c2 	beq.w	8004748 <HAL_I2C_EV_IRQHandler+0x29a>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80bc 	beq.w	8004748 <HAL_I2C_EV_IRQHandler+0x29a>
 80045d0:	7bbb      	ldrb	r3, [r7, #14]
 80045d2:	2b21      	cmp	r3, #33	; 0x21
 80045d4:	d103      	bne.n	80045de <HAL_I2C_EV_IRQHandler+0x130>
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa3f 	bl	8004a5a <I2C_MasterTransmit_BTF>
 80045dc:	e0b4      	b.n	8004748 <HAL_I2C_EV_IRQHandler+0x29a>
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	f040 80b1 	bne.w	8004748 <HAL_I2C_EV_IRQHandler+0x29a>
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 faad 	bl	8004b46 <I2C_MemoryTransmit_TXE_BTF>
 80045ec:	e0ac      	b.n	8004748 <HAL_I2C_EV_IRQHandler+0x29a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045fc:	f000 80a4 	beq.w	8004748 <HAL_I2C_EV_IRQHandler+0x29a>
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00d      	beq.n	8004626 <HAL_I2C_EV_IRQHandler+0x178>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <HAL_I2C_EV_IRQHandler+0x178>
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <HAL_I2C_EV_IRQHandler+0x178>
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fb25 	bl	8004c6e <I2C_MasterReceive_RXNE>
 8004624:	e00f      	b.n	8004646 <HAL_I2C_EV_IRQHandler+0x198>
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 808b 	beq.w	8004748 <HAL_I2C_EV_IRQHandler+0x29a>
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8085 	beq.w	8004748 <HAL_I2C_EV_IRQHandler+0x29a>
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fbd0 	bl	8004de4 <I2C_MasterReceive_BTF>
 8004644:	e080      	b.n	8004748 <HAL_I2C_EV_IRQHandler+0x29a>
 8004646:	e07f      	b.n	8004748 <HAL_I2C_EV_IRQHandler+0x29a>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <HAL_I2C_EV_IRQHandler+0x1ac>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	e007      	b.n	800466a <HAL_I2C_EV_IRQHandler+0x1bc>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d011      	beq.n	8004698 <HAL_I2C_EV_IRQHandler+0x1ea>
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00c      	beq.n	8004698 <HAL_I2C_EV_IRQHandler+0x1ea>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_I2C_EV_IRQHandler+0x1e0>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	69b9      	ldr	r1, [r7, #24]
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 ff90 	bl	80055b6 <I2C_Slave_ADDR>
 8004696:	e05a      	b.n	800474e <HAL_I2C_EV_IRQHandler+0x2a0>
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_I2C_EV_IRQHandler+0x206>
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <HAL_I2C_EV_IRQHandler+0x206>
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 ffcb 	bl	8005648 <I2C_Slave_STOPF>
 80046b2:	e04c      	b.n	800474e <HAL_I2C_EV_IRQHandler+0x2a0>
 80046b4:	7bbb      	ldrb	r3, [r7, #14]
 80046b6:	2b21      	cmp	r3, #33	; 0x21
 80046b8:	d002      	beq.n	80046c0 <HAL_I2C_EV_IRQHandler+0x212>
 80046ba:	7bbb      	ldrb	r3, [r7, #14]
 80046bc:	2b29      	cmp	r3, #41	; 0x29
 80046be:	d120      	bne.n	8004702 <HAL_I2C_EV_IRQHandler+0x254>
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00d      	beq.n	80046e6 <HAL_I2C_EV_IRQHandler+0x238>
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_I2C_EV_IRQHandler+0x238>
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <HAL_I2C_EV_IRQHandler+0x238>
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 feab 	bl	800543a <I2C_SlaveTransmit_TXE>
 80046e4:	e032      	b.n	800474c <HAL_I2C_EV_IRQHandler+0x29e>
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d02d      	beq.n	800474c <HAL_I2C_EV_IRQHandler+0x29e>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d028      	beq.n	800474c <HAL_I2C_EV_IRQHandler+0x29e>
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 feda 	bl	80054b4 <I2C_SlaveTransmit_BTF>
 8004700:	e024      	b.n	800474c <HAL_I2C_EV_IRQHandler+0x29e>
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00d      	beq.n	8004728 <HAL_I2C_EV_IRQHandler+0x27a>
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <HAL_I2C_EV_IRQHandler+0x27a>
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d103      	bne.n	8004728 <HAL_I2C_EV_IRQHandler+0x27a>
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fee8 	bl	80054f6 <I2C_SlaveReceive_RXNE>
 8004726:	e012      	b.n	800474e <HAL_I2C_EV_IRQHandler+0x2a0>
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00d      	beq.n	800474e <HAL_I2C_EV_IRQHandler+0x2a0>
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <HAL_I2C_EV_IRQHandler+0x2a0>
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 ff18 	bl	8005572 <I2C_SlaveReceive_BTF>
 8004742:	e004      	b.n	800474e <HAL_I2C_EV_IRQHandler+0x2a0>
 8004744:	bf00      	nop
 8004746:	e002      	b.n	800474e <HAL_I2C_EV_IRQHandler+0x2a0>
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <HAL_I2C_EV_IRQHandler+0x2a0>
 800474c:	bf00      	nop
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_I2C_ER_IRQHandler>:
 8004754:	b580      	push	{r7, lr}
 8004756:	b08a      	sub	sp, #40	; 0x28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	623b      	str	r3, [r7, #32]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	2300      	movs	r3, #0
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004776:	76fb      	strb	r3, [r7, #27]
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00d      	beq.n	800479e <HAL_I2C_ER_IRQHandler+0x4a>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_I2C_ER_IRQHandler+0x4a>
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800479c:	615a      	str	r2, [r3, #20]
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00d      	beq.n	80047c4 <HAL_I2C_ER_IRQHandler+0x70>
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_I2C_ER_IRQHandler+0x70>
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	f043 0302 	orr.w	r3, r3, #2
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80047c2:	615a      	str	r2, [r3, #20]
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d03e      	beq.n	800484c <HAL_I2C_ER_IRQHandler+0xf8>
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d039      	beq.n	800484c <HAL_I2C_ER_IRQHandler+0xf8>
 80047d8:	7efb      	ldrb	r3, [r7, #27]
 80047da:	76bb      	strb	r3, [r7, #26]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ea:	74fb      	strb	r3, [r7, #19]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	7ebb      	ldrb	r3, [r7, #26]
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d112      	bne.n	800481e <HAL_I2C_ER_IRQHandler+0xca>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10f      	bne.n	800481e <HAL_I2C_ER_IRQHandler+0xca>
 80047fe:	7cfb      	ldrb	r3, [r7, #19]
 8004800:	2b21      	cmp	r3, #33	; 0x21
 8004802:	d008      	beq.n	8004816 <HAL_I2C_ER_IRQHandler+0xc2>
 8004804:	7cfb      	ldrb	r3, [r7, #19]
 8004806:	2b29      	cmp	r3, #41	; 0x29
 8004808:	d005      	beq.n	8004816 <HAL_I2C_ER_IRQHandler+0xc2>
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b28      	cmp	r3, #40	; 0x28
 800480e:	d106      	bne.n	800481e <HAL_I2C_ER_IRQHandler+0xca>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b21      	cmp	r3, #33	; 0x21
 8004814:	d103      	bne.n	800481e <HAL_I2C_ER_IRQHandler+0xca>
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f001 f846 	bl	80058a8 <I2C_Slave_AF>
 800481c:	e016      	b.n	800484c <HAL_I2C_ER_IRQHandler+0xf8>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004826:	615a      	str	r2, [r3, #20]
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	f043 0304 	orr.w	r3, r3, #4
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
 8004830:	7efb      	ldrb	r3, [r7, #27]
 8004832:	2b10      	cmp	r3, #16
 8004834:	d002      	beq.n	800483c <HAL_I2C_ER_IRQHandler+0xe8>
 8004836:	7efb      	ldrb	r3, [r7, #27]
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d107      	bne.n	800484c <HAL_I2C_ER_IRQHandler+0xf8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00d      	beq.n	8004872 <HAL_I2C_ER_IRQHandler+0x11e>
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_I2C_ER_IRQHandler+0x11e>
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	f043 0308 	orr.w	r3, r3, #8
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004870:	615a      	str	r2, [r3, #20]
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_I2C_ER_IRQHandler+0x136>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f001 f87f 	bl	8005988 <I2C_ITError>
 800488a:	bf00      	nop
 800488c:	3728      	adds	r7, #40	; 0x28
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_I2C_MasterTxCpltCallback>:
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_I2C_MasterRxCpltCallback>:
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_I2C_SlaveTxCpltCallback>:
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_I2C_MemTxCpltCallback>:
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_I2C_MemRxCpltCallback>:
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_I2C_AbortCpltCallback>:
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_I2C_GetError>:
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	4618      	mov	r0, r3
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <I2C_MasterTransmit_TXE>:
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004930:	73fb      	strb	r3, [r7, #15]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004938:	73bb      	strb	r3, [r7, #14]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004944:	2b00      	cmp	r3, #0
 8004946:	d150      	bne.n	80049ea <I2C_MasterTransmit_TXE+0xc8>
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b21      	cmp	r3, #33	; 0x21
 800494c:	d14d      	bne.n	80049ea <I2C_MasterTransmit_TXE+0xc8>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d01d      	beq.n	8004990 <I2C_MasterTransmit_TXE+0x6e>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b20      	cmp	r3, #32
 8004958:	d01a      	beq.n	8004990 <I2C_MasterTransmit_TXE+0x6e>
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004960:	d016      	beq.n	8004990 <I2C_MasterTransmit_TXE+0x6e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2211      	movs	r2, #17
 8004976:	631a      	str	r2, [r3, #48]	; 0x30
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ff82 	bl	8004892 <HAL_I2C_MasterTxCpltCallback>
 800498e:	e060      	b.n	8004a52 <I2C_MasterTransmit_TXE+0x130>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800499e:	605a      	str	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b40      	cmp	r3, #64	; 0x40
 80049c8:	d107      	bne.n	80049da <I2C_MasterTransmit_TXE+0xb8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff ff7b 	bl	80048ce <HAL_I2C_MemTxCpltCallback>
 80049d8:	e03b      	b.n	8004a52 <I2C_MasterTransmit_TXE+0x130>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff ff55 	bl	8004892 <HAL_I2C_MasterTxCpltCallback>
 80049e8:	e033      	b.n	8004a52 <I2C_MasterTransmit_TXE+0x130>
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	2b21      	cmp	r3, #33	; 0x21
 80049ee:	d005      	beq.n	80049fc <I2C_MasterTransmit_TXE+0xda>
 80049f0:	7bbb      	ldrb	r3, [r7, #14]
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d12d      	bne.n	8004a52 <I2C_MasterTransmit_TXE+0x130>
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	2b22      	cmp	r3, #34	; 0x22
 80049fa:	d12a      	bne.n	8004a52 <I2C_MasterTransmit_TXE+0x130>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d108      	bne.n	8004a18 <I2C_MasterTransmit_TXE+0xf6>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	e01c      	b.n	8004a52 <I2C_MasterTransmit_TXE+0x130>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d103      	bne.n	8004a2c <I2C_MasterTransmit_TXE+0x10a>
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f88e 	bl	8004b46 <I2C_MemoryTransmit_TXE_BTF>
 8004a2a:	e012      	b.n	8004a52 <I2C_MasterTransmit_TXE+0x130>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	611a      	str	r2, [r3, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a50:	e7ff      	b.n	8004a52 <I2C_MasterTransmit_TXE+0x130>
 8004a52:	bf00      	nop
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <I2C_MasterTransmit_BTF>:
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b21      	cmp	r3, #33	; 0x21
 8004a72:	d164      	bne.n	8004b3e <I2C_MasterTransmit_BTF+0xe4>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d012      	beq.n	8004aa4 <I2C_MasterTransmit_BTF+0x4a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	781a      	ldrb	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	611a      	str	r2, [r3, #16]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004aa2:	e04c      	b.n	8004b3e <I2C_MasterTransmit_BTF+0xe4>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d01d      	beq.n	8004ae6 <I2C_MasterTransmit_BTF+0x8c>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d01a      	beq.n	8004ae6 <I2C_MasterTransmit_BTF+0x8c>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ab6:	d016      	beq.n	8004ae6 <I2C_MasterTransmit_BTF+0x8c>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ac6:	605a      	str	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2211      	movs	r2, #17
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff fed7 	bl	8004892 <HAL_I2C_MasterTxCpltCallback>
 8004ae4:	e02b      	b.n	8004b3e <I2C_MasterTransmit_BTF+0xe4>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b40      	cmp	r3, #64	; 0x40
 8004b1e:	d107      	bne.n	8004b30 <I2C_MasterTransmit_BTF+0xd6>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff fed0 	bl	80048ce <HAL_I2C_MemTxCpltCallback>
 8004b2e:	e006      	b.n	8004b3e <I2C_MasterTransmit_BTF+0xe4>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff feaa 	bl	8004892 <HAL_I2C_MasterTxCpltCallback>
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <I2C_MemoryTransmit_TXE_BTF>:
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b54:	73fb      	strb	r3, [r7, #15]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d11d      	bne.n	8004b9a <I2C_MemoryTransmit_TXE_BTF+0x54>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d10b      	bne.n	8004b7e <I2C_MemoryTransmit_TXE_BTF+0x38>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	611a      	str	r2, [r3, #16]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b76:	1c9a      	adds	r2, r3, #2
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	651a      	str	r2, [r3, #80]	; 0x50
 8004b7c:	e073      	b.n	8004c66 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	121b      	asrs	r3, r3, #8
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	611a      	str	r2, [r3, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	651a      	str	r2, [r3, #80]	; 0x50
 8004b98:	e065      	b.n	8004c66 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d10b      	bne.n	8004bba <I2C_MemoryTransmit_TXE_BTF+0x74>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	611a      	str	r2, [r3, #16]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	651a      	str	r2, [r3, #80]	; 0x50
 8004bb8:	e055      	b.n	8004c66 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d151      	bne.n	8004c66 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	2b22      	cmp	r3, #34	; 0x22
 8004bc6:	d10d      	bne.n	8004be4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	651a      	str	r2, [r3, #80]	; 0x50
 8004be2:	e040      	b.n	8004c66 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d015      	beq.n	8004c1a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b21      	cmp	r3, #33	; 0x21
 8004bf2:	d112      	bne.n	8004c1a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	611a      	str	r2, [r3, #16]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	625a      	str	r2, [r3, #36]	; 0x24
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c18:	e025      	b.n	8004c66 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d120      	bne.n	8004c66 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b21      	cmp	r3, #33	; 0x21
 8004c28:	d11d      	bne.n	8004c66 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c38:	605a      	str	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff fe34 	bl	80048ce <HAL_I2C_MemTxCpltCallback>
 8004c66:	bf00      	nop
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <I2C_MasterReceive_RXNE>:
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b22      	cmp	r3, #34	; 0x22
 8004c80:	f040 80ac 	bne.w	8004ddc <I2C_MasterReceive_RXNE+0x16e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d921      	bls.n	8004cd6 <I2C_MasterReceive_RXNE+0x68>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	f040 808c 	bne.w	8004ddc <I2C_MasterReceive_RXNE+0x16e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd2:	605a      	str	r2, [r3, #4]
 8004cd4:	e082      	b.n	8004ddc <I2C_MasterReceive_RXNE+0x16e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d075      	beq.n	8004dca <I2C_MasterReceive_RXNE+0x15c>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d002      	beq.n	8004cea <I2C_MasterReceive_RXNE+0x7c>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d16f      	bne.n	8004dca <I2C_MasterReceive_RXNE+0x15c>
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f001 face 	bl	800628c <I2C_WaitOnSTOPRequestThroughIT>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d142      	bne.n	8004d7c <I2C_MasterReceive_RXNE+0x10e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d14:	605a      	str	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d10a      	bne.n	8004d66 <I2C_MasterReceive_RXNE+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff fdbf 	bl	80048e2 <HAL_I2C_MemRxCpltCallback>
 8004d64:	e03a      	b.n	8004ddc <I2C_MasterReceive_RXNE+0x16e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2212      	movs	r2, #18
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fd96 	bl	80048a6 <HAL_I2C_MasterRxCpltCallback>
 8004d7a:	e02f      	b.n	8004ddc <I2C_MasterReceive_RXNE+0x16e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d8a:	605a      	str	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	625a      	str	r2, [r3, #36]	; 0x24
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fc fdf2 	bl	80019ac <HAL_I2C_ErrorCallback>
 8004dc8:	e008      	b.n	8004ddc <I2C_MasterReceive_RXNE+0x16e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	e7ff      	b.n	8004ddc <I2C_MasterReceive_RXNE+0x16e>
 8004ddc:	bf00      	nop
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <I2C_MasterReceive_BTF>:
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d11b      	bne.n	8004e34 <I2C_MasterReceive_BTF+0x50>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e0a:	605a      	str	r2, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	625a      	str	r2, [r3, #36]	; 0x24
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e32:	e0bd      	b.n	8004fb0 <I2C_MasterReceive_BTF+0x1cc>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d129      	bne.n	8004e92 <I2C_MasterReceive_BTF+0xae>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d00a      	beq.n	8004e6a <I2C_MasterReceive_BTF+0x86>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d007      	beq.n	8004e6a <I2C_MasterReceive_BTF+0x86>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	625a      	str	r2, [r3, #36]	; 0x24
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e90:	e08e      	b.n	8004fb0 <I2C_MasterReceive_BTF+0x1cc>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d176      	bne.n	8004f8a <I2C_MasterReceive_BTF+0x1a6>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d002      	beq.n	8004ea8 <I2C_MasterReceive_BTF+0xc4>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	d108      	bne.n	8004eba <I2C_MasterReceive_BTF+0xd6>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	e019      	b.n	8004eee <I2C_MasterReceive_BTF+0x10a>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d002      	beq.n	8004ec6 <I2C_MasterReceive_BTF+0xe2>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d108      	bne.n	8004ed8 <I2C_MasterReceive_BTF+0xf4>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e00a      	b.n	8004eee <I2C_MasterReceive_BTF+0x10a>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d007      	beq.n	8004eee <I2C_MasterReceive_BTF+0x10a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b40      	cmp	r3, #64	; 0x40
 8004f5c:	d10a      	bne.n	8004f74 <I2C_MasterReceive_BTF+0x190>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff fcb8 	bl	80048e2 <HAL_I2C_MemRxCpltCallback>
 8004f72:	e01d      	b.n	8004fb0 <I2C_MasterReceive_BTF+0x1cc>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2212      	movs	r2, #18
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff fc8f 	bl	80048a6 <HAL_I2C_MasterRxCpltCallback>
 8004f88:	e012      	b.n	8004fb0 <I2C_MasterReceive_BTF+0x1cc>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	701a      	strb	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	625a      	str	r2, [r3, #36]	; 0x24
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <I2C_Master_SB>:
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b40      	cmp	r3, #64	; 0x40
 8004fca:	d117      	bne.n	8004ffc <I2C_Master_SB+0x44>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d109      	bne.n	8004fe8 <I2C_Master_SB+0x30>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fe4:	611a      	str	r2, [r3, #16]
 8004fe6:	e067      	b.n	80050b8 <I2C_Master_SB+0x100>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	611a      	str	r2, [r3, #16]
 8004ffa:	e05d      	b.n	80050b8 <I2C_Master_SB+0x100>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005004:	d133      	bne.n	800506e <I2C_Master_SB+0xb6>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b21      	cmp	r3, #33	; 0x21
 8005010:	d109      	bne.n	8005026 <I2C_Master_SB+0x6e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	b2db      	uxtb	r3, r3
 8005018:	461a      	mov	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005022:	611a      	str	r2, [r3, #16]
 8005024:	e008      	b.n	8005038 <I2C_Master_SB+0x80>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	b2da      	uxtb	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	611a      	str	r2, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <I2C_Master_SB+0x92>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d108      	bne.n	800505c <I2C_Master_SB+0xa4>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	2b00      	cmp	r3, #0
 8005050:	d032      	beq.n	80050b8 <I2C_Master_SB+0x100>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d02d      	beq.n	80050b8 <I2C_Master_SB+0x100>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800506a:	605a      	str	r2, [r3, #4]
 800506c:	e024      	b.n	80050b8 <I2C_Master_SB+0x100>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10e      	bne.n	8005094 <I2C_Master_SB+0xdc>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507a:	b29b      	uxth	r3, r3
 800507c:	11db      	asrs	r3, r3, #7
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f003 0306 	and.w	r3, r3, #6
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f063 030f 	orn	r3, r3, #15
 800508a:	b2da      	uxtb	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	611a      	str	r2, [r3, #16]
 8005092:	e011      	b.n	80050b8 <I2C_Master_SB+0x100>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005098:	2b01      	cmp	r3, #1
 800509a:	d10d      	bne.n	80050b8 <I2C_Master_SB+0x100>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	11db      	asrs	r3, r3, #7
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f003 0306 	and.w	r3, r3, #6
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f063 030e 	orn	r3, r3, #14
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	611a      	str	r2, [r3, #16]
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <I2C_Master_ADD10>:
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	611a      	str	r2, [r3, #16]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d004      	beq.n	80050ea <I2C_Master_ADD10+0x26>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d108      	bne.n	80050fc <I2C_Master_ADD10+0x38>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00c      	beq.n	800510c <I2C_Master_ADD10+0x48>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <I2C_Master_ADD10+0x48>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800510a:	605a      	str	r2, [r3, #4]
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <I2C_Master_ADDR>:
 8005118:	b480      	push	{r7}
 800511a:	b091      	sub	sp, #68	; 0x44
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005126:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	637b      	str	r3, [r7, #52]	; 0x34
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b22      	cmp	r3, #34	; 0x22
 8005140:	f040 8169 	bne.w	8005416 <I2C_Master_ADDR+0x2fe>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10f      	bne.n	800516c <I2C_Master_ADDR+0x54>
 800514c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005150:	2b40      	cmp	r3, #64	; 0x40
 8005152:	d10b      	bne.n	800516c <I2C_Master_ADDR+0x54>
 8005154:	2300      	movs	r3, #0
 8005156:	633b      	str	r3, [r7, #48]	; 0x30
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	633b      	str	r3, [r7, #48]	; 0x30
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	633b      	str	r3, [r7, #48]	; 0x30
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	e160      	b.n	800542e <I2C_Master_ADDR+0x316>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005170:	2b00      	cmp	r3, #0
 8005172:	d11d      	bne.n	80051b0 <I2C_Master_ADDR+0x98>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800517c:	d118      	bne.n	80051b0 <I2C_Master_ADDR+0x98>
 800517e:	2300      	movs	r3, #0
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	651a      	str	r2, [r3, #80]	; 0x50
 80051ae:	e13e      	b.n	800542e <I2C_Master_ADDR+0x316>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d113      	bne.n	80051e2 <I2C_Master_ADDR+0xca>
 80051ba:	2300      	movs	r3, #0
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	e115      	b.n	800540e <I2C_Master_ADDR+0x2f6>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	f040 808a 	bne.w	8005302 <I2C_Master_ADDR+0x1ea>
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051f4:	d137      	bne.n	8005266 <I2C_Master_ADDR+0x14e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005214:	d113      	bne.n	800523e <I2C_Master_ADDR+0x126>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	2300      	movs	r3, #0
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	e0e7      	b.n	800540e <I2C_Master_ADDR+0x2f6>
 800523e:	2300      	movs	r3, #0
 8005240:	623b      	str	r3, [r7, #32]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	623b      	str	r3, [r7, #32]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	623b      	str	r3, [r7, #32]
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	e0d3      	b.n	800540e <I2C_Master_ADDR+0x2f6>
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	2b08      	cmp	r3, #8
 800526a:	d02e      	beq.n	80052ca <I2C_Master_ADDR+0x1b2>
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	2b20      	cmp	r3, #32
 8005270:	d02b      	beq.n	80052ca <I2C_Master_ADDR+0x1b2>
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	2b12      	cmp	r3, #18
 8005276:	d102      	bne.n	800527e <I2C_Master_ADDR+0x166>
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	2b01      	cmp	r3, #1
 800527c:	d125      	bne.n	80052ca <I2C_Master_ADDR+0x1b2>
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	2b04      	cmp	r3, #4
 8005282:	d00e      	beq.n	80052a2 <I2C_Master_ADDR+0x18a>
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	2b02      	cmp	r3, #2
 8005288:	d00b      	beq.n	80052a2 <I2C_Master_ADDR+0x18a>
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	2b10      	cmp	r3, #16
 800528e:	d008      	beq.n	80052a2 <I2C_Master_ADDR+0x18a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e007      	b.n	80052b2 <I2C_Master_ADDR+0x19a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	e0a1      	b.n	800540e <I2C_Master_ADDR+0x2f6>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	2300      	movs	r3, #0
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e085      	b.n	800540e <I2C_Master_ADDR+0x2f6>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d14d      	bne.n	80053a8 <I2C_Master_ADDR+0x290>
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530e:	2b04      	cmp	r3, #4
 8005310:	d016      	beq.n	8005340 <I2C_Master_ADDR+0x228>
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	2b02      	cmp	r3, #2
 8005316:	d013      	beq.n	8005340 <I2C_Master_ADDR+0x228>
 8005318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531a:	2b10      	cmp	r3, #16
 800531c:	d010      	beq.n	8005340 <I2C_Master_ADDR+0x228>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e007      	b.n	8005350 <I2C_Master_ADDR+0x238>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800535a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535e:	d117      	bne.n	8005390 <I2C_Master_ADDR+0x278>
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005366:	d00b      	beq.n	8005380 <I2C_Master_ADDR+0x268>
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	2b01      	cmp	r3, #1
 800536c:	d008      	beq.n	8005380 <I2C_Master_ADDR+0x268>
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	2b08      	cmp	r3, #8
 8005372:	d005      	beq.n	8005380 <I2C_Master_ADDR+0x268>
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	2b10      	cmp	r3, #16
 8005378:	d002      	beq.n	8005380 <I2C_Master_ADDR+0x268>
 800537a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537c:	2b20      	cmp	r3, #32
 800537e:	d107      	bne.n	8005390 <I2C_Master_ADDR+0x278>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800538e:	605a      	str	r2, [r3, #4]
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	e032      	b.n	800540e <I2C_Master_ADDR+0x2f6>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c6:	d117      	bne.n	80053f8 <I2C_Master_ADDR+0x2e0>
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053ce:	d00b      	beq.n	80053e8 <I2C_Master_ADDR+0x2d0>
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d008      	beq.n	80053e8 <I2C_Master_ADDR+0x2d0>
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d005      	beq.n	80053e8 <I2C_Master_ADDR+0x2d0>
 80053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d002      	beq.n	80053e8 <I2C_Master_ADDR+0x2d0>
 80053e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d107      	bne.n	80053f8 <I2C_Master_ADDR+0x2e0>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053f6:	605a      	str	r2, [r3, #4]
 80053f8:	2300      	movs	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	651a      	str	r2, [r3, #80]	; 0x50
 8005414:	e00b      	b.n	800542e <I2C_Master_ADDR+0x316>
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	e7ff      	b.n	800542e <I2C_Master_ADDR+0x316>
 800542e:	bf00      	nop
 8005430:	3744      	adds	r7, #68	; 0x44
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <I2C_SlaveTransmit_TXE>:
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005448:	73fb      	strb	r3, [r7, #15]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d02b      	beq.n	80054ac <I2C_SlaveTransmit_TXE+0x72>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	781a      	ldrb	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	611a      	str	r2, [r3, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	625a      	str	r2, [r3, #36]	; 0x24
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d114      	bne.n	80054ac <I2C_SlaveTransmit_TXE+0x72>
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	2b29      	cmp	r3, #41	; 0x29
 8005486:	d111      	bne.n	80054ac <I2C_SlaveTransmit_TXE+0x72>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005496:	605a      	str	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2221      	movs	r2, #33	; 0x21
 800549c:	631a      	str	r2, [r3, #48]	; 0x30
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2228      	movs	r2, #40	; 0x28
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fa07 	bl	80048ba <HAL_I2C_SlaveTxCpltCallback>
 80054ac:	bf00      	nop
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <I2C_SlaveTransmit_BTF>:
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d011      	beq.n	80054ea <I2C_SlaveTransmit_BTF+0x36>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	781a      	ldrb	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	611a      	str	r2, [r3, #16]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	625a      	str	r2, [r3, #36]	; 0x24
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <I2C_SlaveReceive_RXNE>:
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005504:	73fb      	strb	r3, [r7, #15]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d02c      	beq.n	800556a <I2C_SlaveReceive_RXNE+0x74>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	625a      	str	r2, [r3, #36]	; 0x24
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d114      	bne.n	800556a <I2C_SlaveReceive_RXNE+0x74>
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	2b2a      	cmp	r3, #42	; 0x2a
 8005544:	d111      	bne.n	800556a <I2C_SlaveReceive_RXNE+0x74>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005554:	605a      	str	r2, [r3, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2222      	movs	r2, #34	; 0x22
 800555a:	631a      	str	r2, [r3, #48]	; 0x30
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2228      	movs	r2, #40	; 0x28
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fc f9df 	bl	8001928 <HAL_I2C_SlaveRxCpltCallback>
 800556a:	bf00      	nop
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <I2C_SlaveReceive_BTF>:
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d012      	beq.n	80055aa <I2C_SlaveReceive_BTF+0x38>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	625a      	str	r2, [r3, #36]	; 0x24
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <I2C_Slave_ADDR>:
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
 80055c0:	2300      	movs	r3, #0
 80055c2:	73fb      	strb	r3, [r7, #15]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055d0:	2b28      	cmp	r3, #40	; 0x28
 80055d2:	d125      	bne.n	8005620 <I2C_Slave_ADDR+0x6a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e2:	605a      	str	r2, [r3, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <I2C_Slave_ADDR+0x3c>
 80055ee:	2301      	movs	r3, #1
 80055f0:	73fb      	strb	r3, [r7, #15]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d103      	bne.n	8005604 <I2C_Slave_ADDR+0x4e>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	81bb      	strh	r3, [r7, #12]
 8005602:	e002      	b.n	800560a <I2C_Slave_ADDR+0x54>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	81bb      	strh	r3, [r7, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005612:	89ba      	ldrh	r2, [r7, #12]
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7fc f94f 	bl	80018bc <HAL_I2C_AddrCallback>
 800561e:	e00e      	b.n	800563e <I2C_Slave_ADDR+0x88>
 8005620:	2300      	movs	r3, #0
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <I2C_Slave_STOPF>:
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005656:	73fb      	strb	r3, [r7, #15]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	2300      	movs	r3, #0
 800566a:	60bb      	str	r3, [r7, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	60bb      	str	r3, [r7, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a4:	d172      	bne.n	800578c <I2C_Slave_STOPF+0x144>
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	2b22      	cmp	r3, #34	; 0x22
 80056aa:	d002      	beq.n	80056b2 <I2C_Slave_STOPF+0x6a>
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b2a      	cmp	r3, #42	; 0x2a
 80056b0:	d135      	bne.n	800571e <I2C_Slave_STOPF+0xd6>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <I2C_Slave_STOPF+0x8e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f043 0204 	orr.w	r2, r3, #4
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fd ff4f 	bl	800358e <HAL_DMA_GetState>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d049      	beq.n	800578a <I2C_Slave_STOPF+0x142>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fa:	4a69      	ldr	r2, [pc, #420]	; (80058a0 <I2C_Slave_STOPF+0x258>)
 80056fc:	651a      	str	r2, [r3, #80]	; 0x50
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	4618      	mov	r0, r3
 8005704:	f7fd ff21 	bl	800354a <HAL_DMA_Abort_IT>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d03d      	beq.n	800578a <I2C_Slave_STOPF+0x142>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005718:	4610      	mov	r0, r2
 800571a:	4798      	blx	r3
 800571c:	e035      	b.n	800578a <I2C_Slave_STOPF+0x142>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	b29a      	uxth	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <I2C_Slave_STOPF+0xfa>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f043 0204 	orr.w	r2, r3, #4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005750:	605a      	str	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005756:	4618      	mov	r0, r3
 8005758:	f7fd ff19 	bl	800358e <HAL_DMA_GetState>
 800575c:	4603      	mov	r3, r0
 800575e:	2b01      	cmp	r3, #1
 8005760:	d014      	beq.n	800578c <I2C_Slave_STOPF+0x144>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005766:	4a4e      	ldr	r2, [pc, #312]	; (80058a0 <I2C_Slave_STOPF+0x258>)
 8005768:	651a      	str	r2, [r3, #80]	; 0x50
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576e:	4618      	mov	r0, r3
 8005770:	f7fd feeb 	bl	800354a <HAL_DMA_Abort_IT>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <I2C_Slave_STOPF+0x144>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005784:	4610      	mov	r0, r2
 8005786:	4798      	blx	r3
 8005788:	e000      	b.n	800578c <I2C_Slave_STOPF+0x144>
 800578a:	bf00      	nop
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d03e      	beq.n	8005814 <I2C_Slave_STOPF+0x1cc>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d112      	bne.n	80057ca <I2C_Slave_STOPF+0x182>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d112      	bne.n	80057fe <I2C_Slave_STOPF+0x1b6>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <I2C_Slave_STOPF+0x1cc>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f043 0204 	orr.w	r2, r3, #4
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	641a      	str	r2, [r3, #64]	; 0x40
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <I2C_Slave_STOPF+0x1dc>
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f8b3 	bl	8005988 <I2C_ITError>
 8005822:	e039      	b.n	8005898 <I2C_Slave_STOPF+0x250>
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b2a      	cmp	r3, #42	; 0x2a
 8005828:	d109      	bne.n	800583e <I2C_Slave_STOPF+0x1f6>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	631a      	str	r2, [r3, #48]	; 0x30
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2228      	movs	r2, #40	; 0x28
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fc f875 	bl	8001928 <HAL_I2C_SlaveRxCpltCallback>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b28      	cmp	r3, #40	; 0x28
 8005848:	d111      	bne.n	800586e <I2C_Slave_STOPF+0x226>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a15      	ldr	r2, [pc, #84]	; (80058a4 <I2C_Slave_STOPF+0x25c>)
 800584e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	; 0x30
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fc f816 	bl	8001898 <HAL_I2C_ListenCpltCallback>
 800586c:	e014      	b.n	8005898 <I2C_Slave_STOPF+0x250>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	2b22      	cmp	r3, #34	; 0x22
 8005874:	d002      	beq.n	800587c <I2C_Slave_STOPF+0x234>
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	2b22      	cmp	r3, #34	; 0x22
 800587a:	d10d      	bne.n	8005898 <I2C_Slave_STOPF+0x250>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	; 0x30
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fc f848 	bl	8001928 <HAL_I2C_SlaveRxCpltCallback>
 8005898:	bf00      	nop
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	08005e8d 	.word	0x08005e8d
 80058a4:	ffff0000 	.word	0xffff0000

080058a8 <I2C_Slave_AF>:
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b6:	73fb      	strb	r3, [r7, #15]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d002      	beq.n	80058ca <I2C_Slave_AF+0x22>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	d129      	bne.n	800591e <I2C_Slave_AF+0x76>
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	2b28      	cmp	r3, #40	; 0x28
 80058ce:	d126      	bne.n	800591e <I2C_Slave_AF+0x76>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a2c      	ldr	r2, [pc, #176]	; (8005984 <I2C_Slave_AF+0xdc>)
 80058d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058e4:	605a      	str	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058ee:	615a      	str	r2, [r3, #20]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	631a      	str	r2, [r3, #48]	; 0x30
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fb ffbe 	bl	8001898 <HAL_I2C_ListenCpltCallback>
 800591c:	e02e      	b.n	800597c <I2C_Slave_AF+0xd4>
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b21      	cmp	r3, #33	; 0x21
 8005922:	d126      	bne.n	8005972 <I2C_Slave_AF+0xca>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a17      	ldr	r2, [pc, #92]	; (8005984 <I2C_Slave_AF+0xdc>)
 8005928:	62da      	str	r2, [r3, #44]	; 0x2c
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2221      	movs	r2, #33	; 0x21
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800594e:	605a      	str	r2, [r3, #4]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005958:	615a      	str	r2, [r3, #20]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7fe ffa5 	bl	80048ba <HAL_I2C_SlaveTxCpltCallback>
 8005970:	e004      	b.n	800597c <I2C_Slave_AF+0xd4>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800597a:	615a      	str	r2, [r3, #20]
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	ffff0000 	.word	0xffff0000

08005988 <I2C_ITError>:
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005996:	73fb      	strb	r3, [r7, #15]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800599e:	73bb      	strb	r3, [r7, #14]
 80059a0:	7bbb      	ldrb	r3, [r7, #14]
 80059a2:	2b10      	cmp	r3, #16
 80059a4:	d002      	beq.n	80059ac <I2C_ITError+0x24>
 80059a6:	7bbb      	ldrb	r3, [r7, #14]
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d10a      	bne.n	80059c2 <I2C_ITError+0x3a>
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b22      	cmp	r3, #34	; 0x22
 80059b0:	d107      	bne.n	80059c2 <I2C_ITError+0x3a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059c8:	2b28      	cmp	r3, #40	; 0x28
 80059ca:	d107      	bne.n	80059dc <I2C_ITError+0x54>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	631a      	str	r2, [r3, #48]	; 0x30
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2228      	movs	r2, #40	; 0x28
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059da:	e015      	b.n	8005a08 <I2C_ITError+0x80>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ea:	d00a      	beq.n	8005a02 <I2C_ITError+0x7a>
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	2b60      	cmp	r3, #96	; 0x60
 80059f0:	d007      	beq.n	8005a02 <I2C_ITError+0x7a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a16:	d162      	bne.n	8005ade <I2C_ITError+0x156>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a26:	605a      	str	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d020      	beq.n	8005a78 <I2C_ITError+0xf0>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3a:	4a6a      	ldr	r2, [pc, #424]	; (8005be4 <I2C_ITError+0x25c>)
 8005a3c:	651a      	str	r2, [r3, #80]	; 0x50
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fd fd81 	bl	800354a <HAL_DMA_Abort_IT>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 8089 	beq.w	8005b62 <I2C_ITError+0x1da>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0201 	bic.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a72:	4610      	mov	r0, r2
 8005a74:	4798      	blx	r3
 8005a76:	e074      	b.n	8005b62 <I2C_ITError+0x1da>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	4a59      	ldr	r2, [pc, #356]	; (8005be4 <I2C_ITError+0x25c>)
 8005a7e:	651a      	str	r2, [r3, #80]	; 0x50
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fd fd60 	bl	800354a <HAL_DMA_Abort_IT>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d068      	beq.n	8005b62 <I2C_ITError+0x1da>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d10b      	bne.n	8005ab6 <I2C_ITError+0x12e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	625a      	str	r2, [r3, #36]	; 0x24
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0201 	bic.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4798      	blx	r3
 8005adc:	e041      	b.n	8005b62 <I2C_ITError+0x1da>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b60      	cmp	r3, #96	; 0x60
 8005ae8:	d125      	bne.n	8005b36 <I2C_ITError+0x1ae>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	641a      	str	r2, [r3, #64]	; 0x40
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d10b      	bne.n	8005b1e <I2C_ITError+0x196>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0201 	bic.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fe fee1 	bl	80048f6 <HAL_I2C_AbortCpltCallback>
 8005b34:	e015      	b.n	8005b62 <I2C_ITError+0x1da>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d10b      	bne.n	8005b5c <I2C_ITError+0x1d4>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7fb ff25 	bl	80019ac <HAL_I2C_ErrorCallback>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	60bb      	str	r3, [r7, #8]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10e      	bne.n	8005b90 <I2C_ITError+0x208>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <I2C_ITError+0x208>
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d104      	bne.n	8005b90 <I2C_ITError+0x208>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <I2C_ITError+0x218>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b9e:	605a      	str	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba6:	73fb      	strb	r3, [r7, #15]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d113      	bne.n	8005bdc <I2C_ITError+0x254>
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	2b28      	cmp	r3, #40	; 0x28
 8005bb8:	d110      	bne.n	8005bdc <I2C_ITError+0x254>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a0a      	ldr	r2, [pc, #40]	; (8005be8 <I2C_ITError+0x260>)
 8005bbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fb fe5e 	bl	8001898 <HAL_I2C_ListenCpltCallback>
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	08005e8d 	.word	0x08005e8d
 8005be8:	ffff0000 	.word	0xffff0000

08005bec <I2C_MasterRequestWrite>:
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	607a      	str	r2, [r7, #4]
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	817b      	strh	r3, [r7, #10]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d006      	beq.n	8005c16 <I2C_MasterRequestWrite+0x2a>
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d003      	beq.n	8005c16 <I2C_MasterRequestWrite+0x2a>
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c14:	d108      	bne.n	8005c28 <I2C_MasterRequestWrite+0x3c>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	e00b      	b.n	8005c40 <I2C_MasterRequestWrite+0x54>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	2b12      	cmp	r3, #18
 8005c2e:	d107      	bne.n	8005c40 <I2C_MasterRequestWrite+0x54>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f9c5 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00d      	beq.n	8005c74 <I2C_MasterRequestWrite+0x88>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c66:	d103      	bne.n	8005c70 <I2C_MasterRequestWrite+0x84>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c6e:	641a      	str	r2, [r3, #64]	; 0x40
 8005c70:	2303      	movs	r3, #3
 8005c72:	e035      	b.n	8005ce0 <I2C_MasterRequestWrite+0xf4>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c7c:	d108      	bne.n	8005c90 <I2C_MasterRequestWrite+0xa4>
 8005c7e:	897b      	ldrh	r3, [r7, #10]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c8c:	611a      	str	r2, [r3, #16]
 8005c8e:	e01b      	b.n	8005cc8 <I2C_MasterRequestWrite+0xdc>
 8005c90:	897b      	ldrh	r3, [r7, #10]
 8005c92:	11db      	asrs	r3, r3, #7
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	f003 0306 	and.w	r3, r3, #6
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f063 030f 	orn	r3, r3, #15
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	611a      	str	r2, [r3, #16]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	490e      	ldr	r1, [pc, #56]	; (8005ce8 <I2C_MasterRequestWrite+0xfc>)
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f9eb 	bl	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <I2C_MasterRequestWrite+0xd2>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e010      	b.n	8005ce0 <I2C_MasterRequestWrite+0xf4>
 8005cbe:	897b      	ldrh	r3, [r7, #10]
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	611a      	str	r2, [r3, #16]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	4907      	ldr	r1, [pc, #28]	; (8005cec <I2C_MasterRequestWrite+0x100>)
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 f9db 	bl	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <I2C_MasterRequestWrite+0xf2>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <I2C_MasterRequestWrite+0xf4>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	00010008 	.word	0x00010008
 8005cec:	00010002 	.word	0x00010002

08005cf0 <I2C_MasterRequestRead>:
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	607a      	str	r2, [r7, #4]
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	817b      	strh	r3, [r7, #10]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d006      	beq.n	8005d2a <I2C_MasterRequestRead+0x3a>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d003      	beq.n	8005d2a <I2C_MasterRequestRead+0x3a>
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d28:	d108      	bne.n	8005d3c <I2C_MasterRequestRead+0x4c>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	e00b      	b.n	8005d54 <I2C_MasterRequestRead+0x64>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	2b11      	cmp	r3, #17
 8005d42:	d107      	bne.n	8005d54 <I2C_MasterRequestRead+0x64>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f93b 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00d      	beq.n	8005d88 <I2C_MasterRequestRead+0x98>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7a:	d103      	bne.n	8005d84 <I2C_MasterRequestRead+0x94>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40
 8005d84:	2303      	movs	r3, #3
 8005d86:	e079      	b.n	8005e7c <I2C_MasterRequestRead+0x18c>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d90:	d108      	bne.n	8005da4 <I2C_MasterRequestRead+0xb4>
 8005d92:	897b      	ldrh	r3, [r7, #10]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	f043 0301 	orr.w	r3, r3, #1
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	611a      	str	r2, [r3, #16]
 8005da2:	e05f      	b.n	8005e64 <I2C_MasterRequestRead+0x174>
 8005da4:	897b      	ldrh	r3, [r7, #10]
 8005da6:	11db      	asrs	r3, r3, #7
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	f003 0306 	and.w	r3, r3, #6
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f063 030f 	orn	r3, r3, #15
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	611a      	str	r2, [r3, #16]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	4930      	ldr	r1, [pc, #192]	; (8005e84 <I2C_MasterRequestRead+0x194>)
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f961 	bl	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <I2C_MasterRequestRead+0xe2>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e054      	b.n	8005e7c <I2C_MasterRequestRead+0x18c>
 8005dd2:	897b      	ldrh	r3, [r7, #10]
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	611a      	str	r2, [r3, #16]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	4929      	ldr	r1, [pc, #164]	; (8005e88 <I2C_MasterRequestRead+0x198>)
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f951 	bl	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <I2C_MasterRequestRead+0x102>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e044      	b.n	8005e7c <I2C_MasterRequestRead+0x18c>
 8005df2:	2300      	movs	r3, #0
 8005df4:	613b      	str	r3, [r7, #16]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	613b      	str	r3, [r7, #16]
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f8d9 	bl	8005fdc <I2C_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00d      	beq.n	8005e4c <I2C_MasterRequestRead+0x15c>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3e:	d103      	bne.n	8005e48 <I2C_MasterRequestRead+0x158>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e46:	641a      	str	r2, [r3, #64]	; 0x40
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e017      	b.n	8005e7c <I2C_MasterRequestRead+0x18c>
 8005e4c:	897b      	ldrh	r3, [r7, #10]
 8005e4e:	11db      	asrs	r3, r3, #7
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	f003 0306 	and.w	r3, r3, #6
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f063 030e 	orn	r3, r3, #14
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	611a      	str	r2, [r3, #16]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4907      	ldr	r1, [pc, #28]	; (8005e88 <I2C_MasterRequestRead+0x198>)
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 f90d 	bl	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <I2C_MasterRequestRead+0x18a>
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <I2C_MasterRequestRead+0x18c>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	00010008 	.word	0x00010008
 8005e88:	00010002 	.word	0x00010002

08005e8c <I2C_DMAAbort>:
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea4:	74fb      	strb	r3, [r7, #19]
 8005ea6:	4b4b      	ldr	r3, [pc, #300]	; (8005fd4 <I2C_DMAAbort+0x148>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	08db      	lsrs	r3, r3, #3
 8005eac:	4a4a      	ldr	r2, [pc, #296]	; (8005fd8 <I2C_DMAAbort+0x14c>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	0a1a      	lsrs	r2, r3, #8
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	00da      	lsls	r2, r3, #3
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <I2C_DMAAbort+0x48>
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f043 0220 	orr.w	r2, r3, #32
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	641a      	str	r2, [r3, #64]	; 0x40
 8005ed2:	e00a      	b.n	8005eea <I2C_DMAAbort+0x5e>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee8:	d0ea      	beq.n	8005ec0 <I2C_DMAAbort+0x34>
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <I2C_DMAAbort+0x6e>
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	63da      	str	r2, [r3, #60]	; 0x3c
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <I2C_DMAAbort+0x7e>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	2200      	movs	r2, #0
 8005f08:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <I2C_DMAAbort+0xa4>
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	651a      	str	r2, [r3, #80]	; 0x50
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <I2C_DMAAbort+0xb4>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	651a      	str	r2, [r3, #80]	; 0x50
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0201 	bic.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b60      	cmp	r3, #96	; 0x60
 8005f5a:	d10e      	bne.n	8005f7a <I2C_DMAAbort+0xee>
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40
 8005f72:	6978      	ldr	r0, [r7, #20]
 8005f74:	f7fe fcbf 	bl	80048f6 <HAL_I2C_AbortCpltCallback>
 8005f78:	e027      	b.n	8005fca <I2C_DMAAbort+0x13e>
 8005f7a:	7cfb      	ldrb	r3, [r7, #19]
 8005f7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f80:	2b28      	cmp	r3, #40	; 0x28
 8005f82:	d117      	bne.n	8005fb4 <I2C_DMAAbort+0x128>
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2228      	movs	r2, #40	; 0x28
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fb2:	e007      	b.n	8005fc4 <I2C_DMAAbort+0x138>
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fc4:	6978      	ldr	r0, [r7, #20]
 8005fc6:	f7fb fcf1 	bl	80019ac <HAL_I2C_ErrorCallback>
 8005fca:	bf00      	nop
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	2000009c 	.word	0x2000009c
 8005fd8:	14f8b589 	.word	0x14f8b589

08005fdc <I2C_WaitOnFlagUntilTimeout>:
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	603b      	str	r3, [r7, #0]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	71fb      	strb	r3, [r7, #7]
 8005fec:	e025      	b.n	800603a <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d021      	beq.n	800603a <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005ff6:	f7fc fd2d 	bl	8002a54 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d302      	bcc.n	800600c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d116      	bne.n	800603a <I2C_WaitOnFlagUntilTimeout+0x5e>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	631a      	str	r2, [r3, #48]	; 0x30
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f043 0220 	orr.w	r2, r3, #32
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	641a      	str	r2, [r3, #64]	; 0x40
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006036:	2301      	movs	r3, #1
 8006038:	e023      	b.n	8006082 <I2C_WaitOnFlagUntilTimeout+0xa6>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	0c1b      	lsrs	r3, r3, #16
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b01      	cmp	r3, #1
 8006042:	d10d      	bne.n	8006060 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	43da      	mvns	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4013      	ands	r3, r2
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	bf0c      	ite	eq
 8006056:	2301      	moveq	r3, #1
 8006058:	2300      	movne	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	e00c      	b.n	800607a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	43da      	mvns	r2, r3
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4013      	ands	r3, r2
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	bf0c      	ite	eq
 8006072:	2301      	moveq	r3, #1
 8006074:	2300      	movne	r3, #0
 8006076:	b2db      	uxtb	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	79fb      	ldrb	r3, [r7, #7]
 800607c:	429a      	cmp	r2, r3
 800607e:	d0b6      	beq.n	8005fee <I2C_WaitOnFlagUntilTimeout+0x12>
 8006080:	2300      	movs	r3, #0
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	e051      	b.n	800613e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a8:	d123      	bne.n	80060f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060c2:	615a      	str	r2, [r3, #20]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	631a      	str	r2, [r3, #48]	; 0x30
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f043 0204 	orr.w	r2, r3, #4
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	641a      	str	r2, [r3, #64]	; 0x40
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060ee:	2301      	movs	r3, #1
 80060f0:	e046      	b.n	8006180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d021      	beq.n	800613e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80060fa:	f7fc fcab 	bl	8002a54 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	429a      	cmp	r2, r3
 8006108:	d302      	bcc.n	8006110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d116      	bne.n	800613e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	631a      	str	r2, [r3, #48]	; 0x30
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	641a      	str	r2, [r3, #64]	; 0x40
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800613a:	2301      	movs	r3, #1
 800613c:	e020      	b.n	8006180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	0c1b      	lsrs	r3, r3, #16
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d10c      	bne.n	8006162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	43da      	mvns	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4013      	ands	r3, r2
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	bf14      	ite	ne
 800615a:	2301      	movne	r3, #1
 800615c:	2300      	moveq	r3, #0
 800615e:	b2db      	uxtb	r3, r3
 8006160:	e00b      	b.n	800617a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	43da      	mvns	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4013      	ands	r3, r2
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf14      	ite	ne
 8006174:	2301      	movne	r3, #1
 8006176:	2300      	moveq	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d18d      	bne.n	800609a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800617e:	2300      	movs	r3, #0
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <I2C_WaitOnTXEFlagUntilTimeout>:
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	e02d      	b.n	80061f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f900 	bl	800639c <I2C_IsAcknowledgeFailed>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e02d      	b.n	8006202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d021      	beq.n	80061f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80061ae:	f7fc fc51 	bl	8002a54 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d302      	bcc.n	80061c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d116      	bne.n	80061f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f043 0220 	orr.w	r2, r3, #32
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061ee:	2301      	movs	r3, #1
 80061f0:	e007      	b.n	8006202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fc:	2b80      	cmp	r3, #128	; 0x80
 80061fe:	d1ca      	bne.n	8006196 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8006200:	2300      	movs	r3, #0
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <I2C_WaitOnBTFFlagUntilTimeout>:
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	e02d      	b.n	8006274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f8bf 	bl	800639c <I2C_IsAcknowledgeFailed>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8006224:	2301      	movs	r3, #1
 8006226:	e02d      	b.n	8006284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622e:	d021      	beq.n	8006274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8006230:	f7fc fc10 	bl	8002a54 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	429a      	cmp	r2, r3
 800623e:	d302      	bcc.n	8006246 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d116      	bne.n	8006274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	f043 0220 	orr.w	r2, r3, #32
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	641a      	str	r2, [r3, #64]	; 0x40
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006270:	2301      	movs	r3, #1
 8006272:	e007      	b.n	8006284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b04      	cmp	r3, #4
 8006280:	d1ca      	bne.n	8006218 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8006282:	2300      	movs	r3, #0
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <I2C_WaitOnSTOPRequestThroughIT>:
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	08db      	lsrs	r3, r3, #3
 800629e:	4a13      	ldr	r2, [pc, #76]	; (80062ec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80062a0:	fba2 2303 	umull	r2, r3, r2, r3
 80062a4:	0a1a      	lsrs	r2, r3, #8
 80062a6:	4613      	mov	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d107      	bne.n	80062ca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f043 0220 	orr.w	r2, r3, #32
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40
 80062c6:	2301      	movs	r3, #1
 80062c8:	e008      	b.n	80062dc <I2C_WaitOnSTOPRequestThroughIT+0x50>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d8:	d0e9      	beq.n	80062ae <I2C_WaitOnSTOPRequestThroughIT+0x22>
 80062da:	2300      	movs	r3, #0
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	2000009c 	.word	0x2000009c
 80062ec:	14f8b589 	.word	0x14f8b589

080062f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	e042      	b.n	8006384 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b10      	cmp	r3, #16
 800630a:	d119      	bne.n	8006340 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f06f 0210 	mvn.w	r2, #16
 8006314:	615a      	str	r2, [r3, #20]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2220      	movs	r2, #32
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	641a      	str	r2, [r3, #64]	; 0x40
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800633c:	2301      	movs	r3, #1
 800633e:	e029      	b.n	8006394 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8006340:	f7fc fb88 	bl	8002a54 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	429a      	cmp	r2, r3
 800634e:	d302      	bcc.n	8006356 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d116      	bne.n	8006384 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	f043 0220 	orr.w	r2, r3, #32
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	641a      	str	r2, [r3, #64]	; 0x40
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006380:	2301      	movs	r3, #1
 8006382:	e007      	b.n	8006394 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638e:	2b40      	cmp	r3, #64	; 0x40
 8006390:	d1b5      	bne.n	80062fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8006392:	2300      	movs	r3, #0
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <I2C_IsAcknowledgeFailed>:
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b2:	d11b      	bne.n	80063ec <I2C_IsAcknowledgeFailed+0x50>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063bc:	615a      	str	r2, [r3, #20]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	631a      	str	r2, [r3, #48]	; 0x30
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	f043 0204 	orr.w	r2, r3, #4
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	641a      	str	r2, [r3, #64]	; 0x40
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <I2C_IsAcknowledgeFailed+0x52>
 80063ec:	2300      	movs	r3, #0
 80063ee:	4618      	mov	r0, r3
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <I2C_ConvertOtherXferOptions>:
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800640a:	d103      	bne.n	8006414 <I2C_ConvertOtherXferOptions+0x1a>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	62da      	str	r2, [r3, #44]	; 0x2c
 8006412:	e007      	b.n	8006424 <I2C_ConvertOtherXferOptions+0x2a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800641c:	d102      	bne.n	8006424 <I2C_ConvertOtherXferOptions+0x2a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2208      	movs	r2, #8
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_RCC_OscConfig>:
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_RCC_OscConfig+0x12>
 800643e:	2301      	movs	r3, #1
 8006440:	e267      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d075      	beq.n	800653a <HAL_RCC_OscConfig+0x10a>
 800644e:	4b88      	ldr	r3, [pc, #544]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 030c 	and.w	r3, r3, #12
 8006456:	2b04      	cmp	r3, #4
 8006458:	d00c      	beq.n	8006474 <HAL_RCC_OscConfig+0x44>
 800645a:	4b85      	ldr	r3, [pc, #532]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 030c 	and.w	r3, r3, #12
 8006462:	2b08      	cmp	r3, #8
 8006464:	d112      	bne.n	800648c <HAL_RCC_OscConfig+0x5c>
 8006466:	4b82      	ldr	r3, [pc, #520]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800646e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006472:	d10b      	bne.n	800648c <HAL_RCC_OscConfig+0x5c>
 8006474:	4b7e      	ldr	r3, [pc, #504]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d05b      	beq.n	8006538 <HAL_RCC_OscConfig+0x108>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d157      	bne.n	8006538 <HAL_RCC_OscConfig+0x108>
 8006488:	2301      	movs	r3, #1
 800648a:	e242      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006494:	d106      	bne.n	80064a4 <HAL_RCC_OscConfig+0x74>
 8006496:	4b76      	ldr	r3, [pc, #472]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a75      	ldr	r2, [pc, #468]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 800649c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	e01d      	b.n	80064e0 <HAL_RCC_OscConfig+0xb0>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064ac:	d10c      	bne.n	80064c8 <HAL_RCC_OscConfig+0x98>
 80064ae:	4b70      	ldr	r3, [pc, #448]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a6f      	ldr	r2, [pc, #444]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 80064b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	4b6d      	ldr	r3, [pc, #436]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a6c      	ldr	r2, [pc, #432]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 80064c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	e00b      	b.n	80064e0 <HAL_RCC_OscConfig+0xb0>
 80064c8:	4b69      	ldr	r3, [pc, #420]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a68      	ldr	r2, [pc, #416]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 80064ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	4b66      	ldr	r3, [pc, #408]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a65      	ldr	r2, [pc, #404]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 80064da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d013      	beq.n	8006510 <HAL_RCC_OscConfig+0xe0>
 80064e8:	f7fc fab4 	bl	8002a54 <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0xd2>
 80064f0:	f7fc fab0 	bl	8002a54 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b64      	cmp	r3, #100	; 0x64
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0xd2>
 80064fe:	2303      	movs	r3, #3
 8006500:	e207      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 8006502:	4b5b      	ldr	r3, [pc, #364]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0f0      	beq.n	80064f0 <HAL_RCC_OscConfig+0xc0>
 800650e:	e014      	b.n	800653a <HAL_RCC_OscConfig+0x10a>
 8006510:	f7fc faa0 	bl	8002a54 <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0xfa>
 8006518:	f7fc fa9c 	bl	8002a54 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b64      	cmp	r3, #100	; 0x64
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0xfa>
 8006526:	2303      	movs	r3, #3
 8006528:	e1f3      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 800652a:	4b51      	ldr	r3, [pc, #324]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <HAL_RCC_OscConfig+0xe8>
 8006536:	e000      	b.n	800653a <HAL_RCC_OscConfig+0x10a>
 8006538:	bf00      	nop
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d063      	beq.n	800660e <HAL_RCC_OscConfig+0x1de>
 8006546:	4b4a      	ldr	r3, [pc, #296]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 030c 	and.w	r3, r3, #12
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <HAL_RCC_OscConfig+0x13a>
 8006552:	4b47      	ldr	r3, [pc, #284]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 030c 	and.w	r3, r3, #12
 800655a:	2b08      	cmp	r3, #8
 800655c:	d11c      	bne.n	8006598 <HAL_RCC_OscConfig+0x168>
 800655e:	4b44      	ldr	r3, [pc, #272]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d116      	bne.n	8006598 <HAL_RCC_OscConfig+0x168>
 800656a:	4b41      	ldr	r3, [pc, #260]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d005      	beq.n	8006582 <HAL_RCC_OscConfig+0x152>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d001      	beq.n	8006582 <HAL_RCC_OscConfig+0x152>
 800657e:	2301      	movs	r3, #1
 8006580:	e1c7      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 8006582:	4b3b      	ldr	r3, [pc, #236]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	4937      	ldr	r1, [pc, #220]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 8006592:	4313      	orrs	r3, r2
 8006594:	600b      	str	r3, [r1, #0]
 8006596:	e03a      	b.n	800660e <HAL_RCC_OscConfig+0x1de>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d020      	beq.n	80065e2 <HAL_RCC_OscConfig+0x1b2>
 80065a0:	4b34      	ldr	r3, [pc, #208]	; (8006674 <HAL_RCC_OscConfig+0x244>)
 80065a2:	2201      	movs	r2, #1
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	f7fc fa55 	bl	8002a54 <HAL_GetTick>
 80065aa:	6138      	str	r0, [r7, #16]
 80065ac:	e008      	b.n	80065c0 <HAL_RCC_OscConfig+0x190>
 80065ae:	f7fc fa51 	bl	8002a54 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d901      	bls.n	80065c0 <HAL_RCC_OscConfig+0x190>
 80065bc:	2303      	movs	r3, #3
 80065be:	e1a8      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 80065c0:	4b2b      	ldr	r3, [pc, #172]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0f0      	beq.n	80065ae <HAL_RCC_OscConfig+0x17e>
 80065cc:	4b28      	ldr	r3, [pc, #160]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	4925      	ldr	r1, [pc, #148]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	600b      	str	r3, [r1, #0]
 80065e0:	e015      	b.n	800660e <HAL_RCC_OscConfig+0x1de>
 80065e2:	4b24      	ldr	r3, [pc, #144]	; (8006674 <HAL_RCC_OscConfig+0x244>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	f7fc fa34 	bl	8002a54 <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x1d2>
 80065f0:	f7fc fa30 	bl	8002a54 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x1d2>
 80065fe:	2303      	movs	r3, #3
 8006600:	e187      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 8006602:	4b1b      	ldr	r3, [pc, #108]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1f0      	bne.n	80065f0 <HAL_RCC_OscConfig+0x1c0>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d036      	beq.n	8006688 <HAL_RCC_OscConfig+0x258>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d016      	beq.n	8006650 <HAL_RCC_OscConfig+0x220>
 8006622:	4b15      	ldr	r3, [pc, #84]	; (8006678 <HAL_RCC_OscConfig+0x248>)
 8006624:	2201      	movs	r2, #1
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f7fc fa14 	bl	8002a54 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x212>
 8006630:	f7fc fa10 	bl	8002a54 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x212>
 800663e:	2303      	movs	r3, #3
 8006640:	e167      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 8006642:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <HAL_RCC_OscConfig+0x240>)
 8006644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0f0      	beq.n	8006630 <HAL_RCC_OscConfig+0x200>
 800664e:	e01b      	b.n	8006688 <HAL_RCC_OscConfig+0x258>
 8006650:	4b09      	ldr	r3, [pc, #36]	; (8006678 <HAL_RCC_OscConfig+0x248>)
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	f7fc f9fd 	bl	8002a54 <HAL_GetTick>
 800665a:	6138      	str	r0, [r7, #16]
 800665c:	e00e      	b.n	800667c <HAL_RCC_OscConfig+0x24c>
 800665e:	f7fc f9f9 	bl	8002a54 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d907      	bls.n	800667c <HAL_RCC_OscConfig+0x24c>
 800666c:	2303      	movs	r3, #3
 800666e:	e150      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 8006670:	40023800 	.word	0x40023800
 8006674:	42470000 	.word	0x42470000
 8006678:	42470e80 	.word	0x42470e80
 800667c:	4b88      	ldr	r3, [pc, #544]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 800667e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1ea      	bne.n	800665e <HAL_RCC_OscConfig+0x22e>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 8097 	beq.w	80067c4 <HAL_RCC_OscConfig+0x394>
 8006696:	2300      	movs	r3, #0
 8006698:	75fb      	strb	r3, [r7, #23]
 800669a:	4b81      	ldr	r3, [pc, #516]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10f      	bne.n	80066c6 <HAL_RCC_OscConfig+0x296>
 80066a6:	2300      	movs	r3, #0
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	4b7d      	ldr	r3, [pc, #500]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	4a7c      	ldr	r2, [pc, #496]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 80066b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b4:	6413      	str	r3, [r2, #64]	; 0x40
 80066b6:	4b7a      	ldr	r3, [pc, #488]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066be:	60bb      	str	r3, [r7, #8]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2301      	movs	r3, #1
 80066c4:	75fb      	strb	r3, [r7, #23]
 80066c6:	4b77      	ldr	r3, [pc, #476]	; (80068a4 <HAL_RCC_OscConfig+0x474>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d118      	bne.n	8006704 <HAL_RCC_OscConfig+0x2d4>
 80066d2:	4b74      	ldr	r3, [pc, #464]	; (80068a4 <HAL_RCC_OscConfig+0x474>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a73      	ldr	r2, [pc, #460]	; (80068a4 <HAL_RCC_OscConfig+0x474>)
 80066d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	f7fc f9b9 	bl	8002a54 <HAL_GetTick>
 80066e2:	6138      	str	r0, [r7, #16]
 80066e4:	e008      	b.n	80066f8 <HAL_RCC_OscConfig+0x2c8>
 80066e6:	f7fc f9b5 	bl	8002a54 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0x2c8>
 80066f4:	2303      	movs	r3, #3
 80066f6:	e10c      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 80066f8:	4b6a      	ldr	r3, [pc, #424]	; (80068a4 <HAL_RCC_OscConfig+0x474>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0f0      	beq.n	80066e6 <HAL_RCC_OscConfig+0x2b6>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d106      	bne.n	800671a <HAL_RCC_OscConfig+0x2ea>
 800670c:	4b64      	ldr	r3, [pc, #400]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 800670e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006710:	4a63      	ldr	r2, [pc, #396]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 8006712:	f043 0301 	orr.w	r3, r3, #1
 8006716:	6713      	str	r3, [r2, #112]	; 0x70
 8006718:	e01c      	b.n	8006754 <HAL_RCC_OscConfig+0x324>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2b05      	cmp	r3, #5
 8006720:	d10c      	bne.n	800673c <HAL_RCC_OscConfig+0x30c>
 8006722:	4b5f      	ldr	r3, [pc, #380]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	4a5e      	ldr	r2, [pc, #376]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 8006728:	f043 0304 	orr.w	r3, r3, #4
 800672c:	6713      	str	r3, [r2, #112]	; 0x70
 800672e:	4b5c      	ldr	r3, [pc, #368]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	4a5b      	ldr	r2, [pc, #364]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 8006734:	f043 0301 	orr.w	r3, r3, #1
 8006738:	6713      	str	r3, [r2, #112]	; 0x70
 800673a:	e00b      	b.n	8006754 <HAL_RCC_OscConfig+0x324>
 800673c:	4b58      	ldr	r3, [pc, #352]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 800673e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006740:	4a57      	ldr	r2, [pc, #348]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 8006742:	f023 0301 	bic.w	r3, r3, #1
 8006746:	6713      	str	r3, [r2, #112]	; 0x70
 8006748:	4b55      	ldr	r3, [pc, #340]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 800674a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674c:	4a54      	ldr	r2, [pc, #336]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 800674e:	f023 0304 	bic.w	r3, r3, #4
 8006752:	6713      	str	r3, [r2, #112]	; 0x70
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d015      	beq.n	8006788 <HAL_RCC_OscConfig+0x358>
 800675c:	f7fc f97a 	bl	8002a54 <HAL_GetTick>
 8006760:	6138      	str	r0, [r7, #16]
 8006762:	e00a      	b.n	800677a <HAL_RCC_OscConfig+0x34a>
 8006764:	f7fc f976 	bl	8002a54 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006772:	4293      	cmp	r3, r2
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x34a>
 8006776:	2303      	movs	r3, #3
 8006778:	e0cb      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 800677a:	4b49      	ldr	r3, [pc, #292]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 800677c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0ee      	beq.n	8006764 <HAL_RCC_OscConfig+0x334>
 8006786:	e014      	b.n	80067b2 <HAL_RCC_OscConfig+0x382>
 8006788:	f7fc f964 	bl	8002a54 <HAL_GetTick>
 800678c:	6138      	str	r0, [r7, #16]
 800678e:	e00a      	b.n	80067a6 <HAL_RCC_OscConfig+0x376>
 8006790:	f7fc f960 	bl	8002a54 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	f241 3288 	movw	r2, #5000	; 0x1388
 800679e:	4293      	cmp	r3, r2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x376>
 80067a2:	2303      	movs	r3, #3
 80067a4:	e0b5      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 80067a6:	4b3e      	ldr	r3, [pc, #248]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 80067a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1ee      	bne.n	8006790 <HAL_RCC_OscConfig+0x360>
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d105      	bne.n	80067c4 <HAL_RCC_OscConfig+0x394>
 80067b8:	4b39      	ldr	r3, [pc, #228]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	4a38      	ldr	r2, [pc, #224]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 80067be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c2:	6413      	str	r3, [r2, #64]	; 0x40
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 80a1 	beq.w	8006910 <HAL_RCC_OscConfig+0x4e0>
 80067ce:	4b34      	ldr	r3, [pc, #208]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 030c 	and.w	r3, r3, #12
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d05c      	beq.n	8006894 <HAL_RCC_OscConfig+0x464>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d141      	bne.n	8006866 <HAL_RCC_OscConfig+0x436>
 80067e2:	4b31      	ldr	r3, [pc, #196]	; (80068a8 <HAL_RCC_OscConfig+0x478>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	f7fc f934 	bl	8002a54 <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0x3d2>
 80067f0:	f7fc f930 	bl	8002a54 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x3d2>
 80067fe:	2303      	movs	r3, #3
 8006800:	e087      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 8006802:	4b27      	ldr	r3, [pc, #156]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f0      	bne.n	80067f0 <HAL_RCC_OscConfig+0x3c0>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	69da      	ldr	r2, [r3, #28]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	019b      	lsls	r3, r3, #6
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006824:	085b      	lsrs	r3, r3, #1
 8006826:	3b01      	subs	r3, #1
 8006828:	041b      	lsls	r3, r3, #16
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006830:	061b      	lsls	r3, r3, #24
 8006832:	491b      	ldr	r1, [pc, #108]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 8006834:	4313      	orrs	r3, r2
 8006836:	604b      	str	r3, [r1, #4]
 8006838:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <HAL_RCC_OscConfig+0x478>)
 800683a:	2201      	movs	r2, #1
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	f7fc f909 	bl	8002a54 <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]
 8006844:	e008      	b.n	8006858 <HAL_RCC_OscConfig+0x428>
 8006846:	f7fc f905 	bl	8002a54 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d901      	bls.n	8006858 <HAL_RCC_OscConfig+0x428>
 8006854:	2303      	movs	r3, #3
 8006856:	e05c      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 8006858:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0f0      	beq.n	8006846 <HAL_RCC_OscConfig+0x416>
 8006864:	e054      	b.n	8006910 <HAL_RCC_OscConfig+0x4e0>
 8006866:	4b10      	ldr	r3, [pc, #64]	; (80068a8 <HAL_RCC_OscConfig+0x478>)
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	f7fc f8f2 	bl	8002a54 <HAL_GetTick>
 8006870:	6138      	str	r0, [r7, #16]
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0x456>
 8006874:	f7fc f8ee 	bl	8002a54 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x456>
 8006882:	2303      	movs	r3, #3
 8006884:	e045      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 8006886:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <HAL_RCC_OscConfig+0x470>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1f0      	bne.n	8006874 <HAL_RCC_OscConfig+0x444>
 8006892:	e03d      	b.n	8006910 <HAL_RCC_OscConfig+0x4e0>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d107      	bne.n	80068ac <HAL_RCC_OscConfig+0x47c>
 800689c:	2301      	movs	r3, #1
 800689e:	e038      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 80068a0:	40023800 	.word	0x40023800
 80068a4:	40007000 	.word	0x40007000
 80068a8:	42470060 	.word	0x42470060
 80068ac:	4b1b      	ldr	r3, [pc, #108]	; (800691c <HAL_RCC_OscConfig+0x4ec>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d028      	beq.n	800690c <HAL_RCC_OscConfig+0x4dc>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d121      	bne.n	800690c <HAL_RCC_OscConfig+0x4dc>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d11a      	bne.n	800690c <HAL_RCC_OscConfig+0x4dc>
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068dc:	4013      	ands	r3, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068e2:	0192      	lsls	r2, r2, #6
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d111      	bne.n	800690c <HAL_RCC_OscConfig+0x4dc>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	085b      	lsrs	r3, r3, #1
 80068f4:	3b01      	subs	r3, #1
 80068f6:	041b      	lsls	r3, r3, #16
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d107      	bne.n	800690c <HAL_RCC_OscConfig+0x4dc>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	061b      	lsls	r3, r3, #24
 8006908:	429a      	cmp	r2, r3
 800690a:	d001      	beq.n	8006910 <HAL_RCC_OscConfig+0x4e0>
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <HAL_RCC_OscConfig+0x4e2>
 8006910:	2300      	movs	r3, #0
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	40023800 	.word	0x40023800

08006920 <HAL_RCC_ClockConfig>:
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <HAL_RCC_ClockConfig+0x14>
 8006930:	2301      	movs	r3, #1
 8006932:	e0cc      	b.n	8006ace <HAL_RCC_ClockConfig+0x1ae>
 8006934:	4b68      	ldr	r3, [pc, #416]	; (8006ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	429a      	cmp	r2, r3
 8006940:	d90c      	bls.n	800695c <HAL_RCC_ClockConfig+0x3c>
 8006942:	4b65      	ldr	r3, [pc, #404]	; (8006ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	4b63      	ldr	r3, [pc, #396]	; (8006ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d001      	beq.n	800695c <HAL_RCC_ClockConfig+0x3c>
 8006958:	2301      	movs	r3, #1
 800695a:	e0b8      	b.n	8006ace <HAL_RCC_ClockConfig+0x1ae>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d020      	beq.n	80069aa <HAL_RCC_ClockConfig+0x8a>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_RCC_ClockConfig+0x60>
 8006974:	4b59      	ldr	r3, [pc, #356]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	4a58      	ldr	r2, [pc, #352]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 800697a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800697e:	6093      	str	r3, [r2, #8]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <HAL_RCC_ClockConfig+0x78>
 800698c:	4b53      	ldr	r3, [pc, #332]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	4a52      	ldr	r2, [pc, #328]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 8006992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006996:	6093      	str	r3, [r2, #8]
 8006998:	4b50      	ldr	r3, [pc, #320]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	494d      	ldr	r1, [pc, #308]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	608b      	str	r3, [r1, #8]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d044      	beq.n	8006a40 <HAL_RCC_ClockConfig+0x120>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d107      	bne.n	80069ce <HAL_RCC_ClockConfig+0xae>
 80069be:	4b47      	ldr	r3, [pc, #284]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d119      	bne.n	80069fe <HAL_RCC_ClockConfig+0xde>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e07f      	b.n	8006ace <HAL_RCC_ClockConfig+0x1ae>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d003      	beq.n	80069de <HAL_RCC_ClockConfig+0xbe>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d107      	bne.n	80069ee <HAL_RCC_ClockConfig+0xce>
 80069de:	4b3f      	ldr	r3, [pc, #252]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d109      	bne.n	80069fe <HAL_RCC_ClockConfig+0xde>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e06f      	b.n	8006ace <HAL_RCC_ClockConfig+0x1ae>
 80069ee:	4b3b      	ldr	r3, [pc, #236]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_RCC_ClockConfig+0xde>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e067      	b.n	8006ace <HAL_RCC_ClockConfig+0x1ae>
 80069fe:	4b37      	ldr	r3, [pc, #220]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f023 0203 	bic.w	r2, r3, #3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	4934      	ldr	r1, [pc, #208]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	608b      	str	r3, [r1, #8]
 8006a10:	f7fc f820 	bl	8002a54 <HAL_GetTick>
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	e00a      	b.n	8006a2e <HAL_RCC_ClockConfig+0x10e>
 8006a18:	f7fc f81c 	bl	8002a54 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_ClockConfig+0x10e>
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e04f      	b.n	8006ace <HAL_RCC_ClockConfig+0x1ae>
 8006a2e:	4b2b      	ldr	r3, [pc, #172]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 020c 	and.w	r2, r3, #12
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d1eb      	bne.n	8006a18 <HAL_RCC_ClockConfig+0xf8>
 8006a40:	4b25      	ldr	r3, [pc, #148]	; (8006ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d20c      	bcs.n	8006a68 <HAL_RCC_ClockConfig+0x148>
 8006a4e:	4b22      	ldr	r3, [pc, #136]	; (8006ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	b2d2      	uxtb	r2, r2
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	4b20      	ldr	r3, [pc, #128]	; (8006ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d001      	beq.n	8006a68 <HAL_RCC_ClockConfig+0x148>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e032      	b.n	8006ace <HAL_RCC_ClockConfig+0x1ae>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d008      	beq.n	8006a86 <HAL_RCC_ClockConfig+0x166>
 8006a74:	4b19      	ldr	r3, [pc, #100]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	4916      	ldr	r1, [pc, #88]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	608b      	str	r3, [r1, #8]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0308 	and.w	r3, r3, #8
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d009      	beq.n	8006aa6 <HAL_RCC_ClockConfig+0x186>
 8006a92:	4b12      	ldr	r3, [pc, #72]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	490e      	ldr	r1, [pc, #56]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	608b      	str	r3, [r1, #8]
 8006aa6:	f000 f821 	bl	8006aec <HAL_RCC_GetSysClockFreq>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <HAL_RCC_ClockConfig+0x1bc>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	091b      	lsrs	r3, r3, #4
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	490a      	ldr	r1, [pc, #40]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8006ab8:	5ccb      	ldrb	r3, [r1, r3]
 8006aba:	fa22 f303 	lsr.w	r3, r2, r3
 8006abe:	4a09      	ldr	r2, [pc, #36]	; (8006ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fb ff80 	bl	80029cc <HAL_InitTick>
 8006acc:	2300      	movs	r3, #0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	40023c00 	.word	0x40023c00
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	0800b208 	.word	0x0800b208
 8006ae4:	2000009c 	.word	0x2000009c
 8006ae8:	200000a0 	.word	0x200000a0

08006aec <HAL_RCC_GetSysClockFreq>:
 8006aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006af0:	b090      	sub	sp, #64	; 0x40
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	2300      	movs	r3, #0
 8006af6:	637b      	str	r3, [r7, #52]	; 0x34
 8006af8:	2300      	movs	r3, #0
 8006afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006afc:	2300      	movs	r3, #0
 8006afe:	633b      	str	r3, [r7, #48]	; 0x30
 8006b00:	2300      	movs	r3, #0
 8006b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b04:	4b59      	ldr	r3, [pc, #356]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 030c 	and.w	r3, r3, #12
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d00d      	beq.n	8006b2c <HAL_RCC_GetSysClockFreq+0x40>
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	f200 80a1 	bhi.w	8006c58 <HAL_RCC_GetSysClockFreq+0x16c>
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <HAL_RCC_GetSysClockFreq+0x34>
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d003      	beq.n	8006b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b1e:	e09b      	b.n	8006c58 <HAL_RCC_GetSysClockFreq+0x16c>
 8006b20:	4b53      	ldr	r3, [pc, #332]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x184>)
 8006b22:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b24:	e09b      	b.n	8006c5e <HAL_RCC_GetSysClockFreq+0x172>
 8006b26:	4b53      	ldr	r3, [pc, #332]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8006b28:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b2a:	e098      	b.n	8006c5e <HAL_RCC_GetSysClockFreq+0x172>
 8006b2c:	4b4f      	ldr	r3, [pc, #316]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b34:	637b      	str	r3, [r7, #52]	; 0x34
 8006b36:	4b4d      	ldr	r3, [pc, #308]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d028      	beq.n	8006b94 <HAL_RCC_GetSysClockFreq+0xa8>
 8006b42:	4b4a      	ldr	r3, [pc, #296]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	099b      	lsrs	r3, r3, #6
 8006b48:	2200      	movs	r2, #0
 8006b4a:	623b      	str	r3, [r7, #32]
 8006b4c:	627a      	str	r2, [r7, #36]	; 0x24
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006b54:	2100      	movs	r1, #0
 8006b56:	4b47      	ldr	r3, [pc, #284]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8006b58:	fb03 f201 	mul.w	r2, r3, r1
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	fb00 f303 	mul.w	r3, r0, r3
 8006b62:	4413      	add	r3, r2
 8006b64:	4a43      	ldr	r2, [pc, #268]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8006b66:	fba0 1202 	umull	r1, r2, r0, r2
 8006b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b6c:	460a      	mov	r2, r1
 8006b6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b72:	4413      	add	r3, r2
 8006b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b78:	2200      	movs	r2, #0
 8006b7a:	61bb      	str	r3, [r7, #24]
 8006b7c:	61fa      	str	r2, [r7, #28]
 8006b7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006b86:	f7fa f887 	bl	8000c98 <__aeabi_uldivmod>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4613      	mov	r3, r2
 8006b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b92:	e053      	b.n	8006c3c <HAL_RCC_GetSysClockFreq+0x150>
 8006b94:	4b35      	ldr	r3, [pc, #212]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	099b      	lsrs	r3, r3, #6
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	613b      	str	r3, [r7, #16]
 8006b9e:	617a      	str	r2, [r7, #20]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006ba6:	f04f 0b00 	mov.w	fp, #0
 8006baa:	4652      	mov	r2, sl
 8006bac:	465b      	mov	r3, fp
 8006bae:	f04f 0000 	mov.w	r0, #0
 8006bb2:	f04f 0100 	mov.w	r1, #0
 8006bb6:	0159      	lsls	r1, r3, #5
 8006bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bbc:	0150      	lsls	r0, r2, #5
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	ebb2 080a 	subs.w	r8, r2, sl
 8006bc6:	eb63 090b 	sbc.w	r9, r3, fp
 8006bca:	f04f 0200 	mov.w	r2, #0
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006bd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006bda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006bde:	ebb2 0408 	subs.w	r4, r2, r8
 8006be2:	eb63 0509 	sbc.w	r5, r3, r9
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	00eb      	lsls	r3, r5, #3
 8006bf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bf4:	00e2      	lsls	r2, r4, #3
 8006bf6:	4614      	mov	r4, r2
 8006bf8:	461d      	mov	r5, r3
 8006bfa:	eb14 030a 	adds.w	r3, r4, sl
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	eb45 030b 	adc.w	r3, r5, fp
 8006c04:	607b      	str	r3, [r7, #4]
 8006c06:	f04f 0200 	mov.w	r2, #0
 8006c0a:	f04f 0300 	mov.w	r3, #0
 8006c0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c12:	4629      	mov	r1, r5
 8006c14:	028b      	lsls	r3, r1, #10
 8006c16:	4621      	mov	r1, r4
 8006c18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	028a      	lsls	r2, r1, #10
 8006c20:	4610      	mov	r0, r2
 8006c22:	4619      	mov	r1, r3
 8006c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c26:	2200      	movs	r2, #0
 8006c28:	60bb      	str	r3, [r7, #8]
 8006c2a:	60fa      	str	r2, [r7, #12]
 8006c2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c30:	f7fa f832 	bl	8000c98 <__aeabi_uldivmod>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4613      	mov	r3, r2
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c3c:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	0c1b      	lsrs	r3, r3, #16
 8006c42:	f003 0303 	and.w	r3, r3, #3
 8006c46:	3301      	adds	r3, #1
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c54:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c56:	e002      	b.n	8006c5e <HAL_RCC_GetSysClockFreq+0x172>
 8006c58:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x184>)
 8006c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c5c:	bf00      	nop
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	4618      	mov	r0, r3
 8006c62:	3740      	adds	r7, #64	; 0x40
 8006c64:	46bd      	mov	sp, r7
 8006c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c6a:	bf00      	nop
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	00f42400 	.word	0x00f42400
 8006c74:	017d7840 	.word	0x017d7840

08006c78 <HAL_RCC_GetHCLKFreq>:
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	4b03      	ldr	r3, [pc, #12]	; (8006c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4618      	mov	r0, r3
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	2000009c 	.word	0x2000009c

08006c90 <HAL_RCC_GetPCLK1Freq>:
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	f7ff fff0 	bl	8006c78 <HAL_RCC_GetHCLKFreq>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	0a9b      	lsrs	r3, r3, #10
 8006ca0:	f003 0307 	and.w	r3, r3, #7
 8006ca4:	4903      	ldr	r1, [pc, #12]	; (8006cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ca6:	5ccb      	ldrb	r3, [r1, r3]
 8006ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cac:	4618      	mov	r0, r3
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	0800b218 	.word	0x0800b218

08006cb8 <HAL_RCC_GetPCLK2Freq>:
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	f7ff ffdc 	bl	8006c78 <HAL_RCC_GetHCLKFreq>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	0b5b      	lsrs	r3, r3, #13
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	4903      	ldr	r1, [pc, #12]	; (8006cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cce:	5ccb      	ldrb	r3, [r1, r3]
 8006cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	0800b218 	.word	0x0800b218

08006ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e041      	b.n	8006d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fb fc66 	bl	80025d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f000 ff14 	bl	8007b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d001      	beq.n	8006d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e044      	b.n	8006e22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0201 	orr.w	r2, r2, #1
 8006dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1e      	ldr	r2, [pc, #120]	; (8006e30 <HAL_TIM_Base_Start_IT+0xb0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d018      	beq.n	8006dec <HAL_TIM_Base_Start_IT+0x6c>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc2:	d013      	beq.n	8006dec <HAL_TIM_Base_Start_IT+0x6c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a1a      	ldr	r2, [pc, #104]	; (8006e34 <HAL_TIM_Base_Start_IT+0xb4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00e      	beq.n	8006dec <HAL_TIM_Base_Start_IT+0x6c>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a19      	ldr	r2, [pc, #100]	; (8006e38 <HAL_TIM_Base_Start_IT+0xb8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d009      	beq.n	8006dec <HAL_TIM_Base_Start_IT+0x6c>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a17      	ldr	r2, [pc, #92]	; (8006e3c <HAL_TIM_Base_Start_IT+0xbc>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d004      	beq.n	8006dec <HAL_TIM_Base_Start_IT+0x6c>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <HAL_TIM_Base_Start_IT+0xc0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d111      	bne.n	8006e10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b06      	cmp	r3, #6
 8006dfc:	d010      	beq.n	8006e20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0201 	orr.w	r2, r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e0e:	e007      	b.n	8006e20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0201 	orr.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40010000 	.word	0x40010000
 8006e34:	40000400 	.word	0x40000400
 8006e38:	40000800 	.word	0x40000800
 8006e3c:	40000c00 	.word	0x40000c00
 8006e40:	40014000 	.word	0x40014000

08006e44 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0201 	bic.w	r2, r2, #1
 8006e5a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6a1a      	ldr	r2, [r3, #32]
 8006e62:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e66:	4013      	ands	r3, r2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10f      	bne.n	8006e8c <HAL_TIM_Base_Stop_IT+0x48>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6a1a      	ldr	r2, [r3, #32]
 8006e72:	f240 4344 	movw	r3, #1092	; 0x444
 8006e76:	4013      	ands	r3, r2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d107      	bne.n	8006e8c <HAL_TIM_Base_Stop_IT+0x48>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0201 	bic.w	r2, r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e041      	b.n	8006f38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d106      	bne.n	8006ece <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7fb fc0b 	bl	80026e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f000 fe33 	bl	8007b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d109      	bne.n	8006f64 <HAL_TIM_PWM_Start+0x24>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	bf14      	ite	ne
 8006f5c:	2301      	movne	r3, #1
 8006f5e:	2300      	moveq	r3, #0
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	e022      	b.n	8006faa <HAL_TIM_PWM_Start+0x6a>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d109      	bne.n	8006f7e <HAL_TIM_PWM_Start+0x3e>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	bf14      	ite	ne
 8006f76:	2301      	movne	r3, #1
 8006f78:	2300      	moveq	r3, #0
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	e015      	b.n	8006faa <HAL_TIM_PWM_Start+0x6a>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d109      	bne.n	8006f98 <HAL_TIM_PWM_Start+0x58>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	bf14      	ite	ne
 8006f90:	2301      	movne	r3, #1
 8006f92:	2300      	moveq	r3, #0
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	e008      	b.n	8006faa <HAL_TIM_PWM_Start+0x6a>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	bf14      	ite	ne
 8006fa4:	2301      	movne	r3, #1
 8006fa6:	2300      	moveq	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e068      	b.n	8007084 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d104      	bne.n	8006fc2 <HAL_TIM_PWM_Start+0x82>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fc0:	e013      	b.n	8006fea <HAL_TIM_PWM_Start+0xaa>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d104      	bne.n	8006fd2 <HAL_TIM_PWM_Start+0x92>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd0:	e00b      	b.n	8006fea <HAL_TIM_PWM_Start+0xaa>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d104      	bne.n	8006fe2 <HAL_TIM_PWM_Start+0xa2>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fe0:	e003      	b.n	8006fea <HAL_TIM_PWM_Start+0xaa>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 f9e5 	bl	80083c2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a23      	ldr	r2, [pc, #140]	; (800708c <HAL_TIM_PWM_Start+0x14c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d107      	bne.n	8007012 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007010:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a1d      	ldr	r2, [pc, #116]	; (800708c <HAL_TIM_PWM_Start+0x14c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d018      	beq.n	800704e <HAL_TIM_PWM_Start+0x10e>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007024:	d013      	beq.n	800704e <HAL_TIM_PWM_Start+0x10e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a19      	ldr	r2, [pc, #100]	; (8007090 <HAL_TIM_PWM_Start+0x150>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00e      	beq.n	800704e <HAL_TIM_PWM_Start+0x10e>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a17      	ldr	r2, [pc, #92]	; (8007094 <HAL_TIM_PWM_Start+0x154>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d009      	beq.n	800704e <HAL_TIM_PWM_Start+0x10e>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a16      	ldr	r2, [pc, #88]	; (8007098 <HAL_TIM_PWM_Start+0x158>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d004      	beq.n	800704e <HAL_TIM_PWM_Start+0x10e>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a14      	ldr	r2, [pc, #80]	; (800709c <HAL_TIM_PWM_Start+0x15c>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d111      	bne.n	8007072 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b06      	cmp	r3, #6
 800705e:	d010      	beq.n	8007082 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0201 	orr.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007070:	e007      	b.n	8007082 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f042 0201 	orr.w	r2, r2, #1
 8007080:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	40010000 	.word	0x40010000
 8007090:	40000400 	.word	0x40000400
 8007094:	40000800 	.word	0x40000800
 8007098:	40000c00 	.word	0x40000c00
 800709c:	40014000 	.word	0x40014000

080070a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f001 f985 	bl	80083c2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a29      	ldr	r2, [pc, #164]	; (8007164 <HAL_TIM_PWM_Stop+0xc4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d117      	bne.n	80070f2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6a1a      	ldr	r2, [r3, #32]
 80070c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80070cc:	4013      	ands	r3, r2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10f      	bne.n	80070f2 <HAL_TIM_PWM_Stop+0x52>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6a1a      	ldr	r2, [r3, #32]
 80070d8:	f240 4344 	movw	r3, #1092	; 0x444
 80070dc:	4013      	ands	r3, r2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d107      	bne.n	80070f2 <HAL_TIM_PWM_Stop+0x52>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6a1a      	ldr	r2, [r3, #32]
 80070f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80070fc:	4013      	ands	r3, r2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10f      	bne.n	8007122 <HAL_TIM_PWM_Stop+0x82>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6a1a      	ldr	r2, [r3, #32]
 8007108:	f240 4344 	movw	r3, #1092	; 0x444
 800710c:	4013      	ands	r3, r2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d107      	bne.n	8007122 <HAL_TIM_PWM_Stop+0x82>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0201 	bic.w	r2, r2, #1
 8007120:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d104      	bne.n	8007132 <HAL_TIM_PWM_Stop+0x92>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007130:	e013      	b.n	800715a <HAL_TIM_PWM_Stop+0xba>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b04      	cmp	r3, #4
 8007136:	d104      	bne.n	8007142 <HAL_TIM_PWM_Stop+0xa2>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007140:	e00b      	b.n	800715a <HAL_TIM_PWM_Stop+0xba>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b08      	cmp	r3, #8
 8007146:	d104      	bne.n	8007152 <HAL_TIM_PWM_Stop+0xb2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007150:	e003      	b.n	800715a <HAL_TIM_PWM_Stop+0xba>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40010000 	.word	0x40010000

08007168 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e041      	b.n	80071fe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fb faee 	bl	8002770 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	3304      	adds	r3, #4
 80071a4:	4619      	mov	r1, r3
 80071a6:	4610      	mov	r0, r2
 80071a8:	f000 fcd0 	bl	8007b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d104      	bne.n	8007226 <HAL_TIM_IC_Start_IT+0x1e>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007222:	b2db      	uxtb	r3, r3
 8007224:	e013      	b.n	800724e <HAL_TIM_IC_Start_IT+0x46>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b04      	cmp	r3, #4
 800722a:	d104      	bne.n	8007236 <HAL_TIM_IC_Start_IT+0x2e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007232:	b2db      	uxtb	r3, r3
 8007234:	e00b      	b.n	800724e <HAL_TIM_IC_Start_IT+0x46>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b08      	cmp	r3, #8
 800723a:	d104      	bne.n	8007246 <HAL_TIM_IC_Start_IT+0x3e>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007242:	b2db      	uxtb	r3, r3
 8007244:	e003      	b.n	800724e <HAL_TIM_IC_Start_IT+0x46>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800724c:	b2db      	uxtb	r3, r3
 800724e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d104      	bne.n	8007260 <HAL_TIM_IC_Start_IT+0x58>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800725c:	b2db      	uxtb	r3, r3
 800725e:	e013      	b.n	8007288 <HAL_TIM_IC_Start_IT+0x80>
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2b04      	cmp	r3, #4
 8007264:	d104      	bne.n	8007270 <HAL_TIM_IC_Start_IT+0x68>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800726c:	b2db      	uxtb	r3, r3
 800726e:	e00b      	b.n	8007288 <HAL_TIM_IC_Start_IT+0x80>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b08      	cmp	r3, #8
 8007274:	d104      	bne.n	8007280 <HAL_TIM_IC_Start_IT+0x78>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800727c:	b2db      	uxtb	r3, r3
 800727e:	e003      	b.n	8007288 <HAL_TIM_IC_Start_IT+0x80>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007286:	b2db      	uxtb	r3, r3
 8007288:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d102      	bne.n	8007296 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007290:	7b7b      	ldrb	r3, [r7, #13]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d001      	beq.n	800729a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e0c2      	b.n	8007420 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <HAL_TIM_IC_Start_IT+0xa2>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072a8:	e013      	b.n	80072d2 <HAL_TIM_IC_Start_IT+0xca>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d104      	bne.n	80072ba <HAL_TIM_IC_Start_IT+0xb2>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072b8:	e00b      	b.n	80072d2 <HAL_TIM_IC_Start_IT+0xca>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d104      	bne.n	80072ca <HAL_TIM_IC_Start_IT+0xc2>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072c8:	e003      	b.n	80072d2 <HAL_TIM_IC_Start_IT+0xca>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d104      	bne.n	80072e2 <HAL_TIM_IC_Start_IT+0xda>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072e0:	e013      	b.n	800730a <HAL_TIM_IC_Start_IT+0x102>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d104      	bne.n	80072f2 <HAL_TIM_IC_Start_IT+0xea>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072f0:	e00b      	b.n	800730a <HAL_TIM_IC_Start_IT+0x102>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d104      	bne.n	8007302 <HAL_TIM_IC_Start_IT+0xfa>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007300:	e003      	b.n	800730a <HAL_TIM_IC_Start_IT+0x102>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2202      	movs	r2, #2
 8007306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b0c      	cmp	r3, #12
 800730e:	d841      	bhi.n	8007394 <HAL_TIM_IC_Start_IT+0x18c>
 8007310:	a201      	add	r2, pc, #4	; (adr r2, 8007318 <HAL_TIM_IC_Start_IT+0x110>)
 8007312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007316:	bf00      	nop
 8007318:	0800734d 	.word	0x0800734d
 800731c:	08007395 	.word	0x08007395
 8007320:	08007395 	.word	0x08007395
 8007324:	08007395 	.word	0x08007395
 8007328:	0800735f 	.word	0x0800735f
 800732c:	08007395 	.word	0x08007395
 8007330:	08007395 	.word	0x08007395
 8007334:	08007395 	.word	0x08007395
 8007338:	08007371 	.word	0x08007371
 800733c:	08007395 	.word	0x08007395
 8007340:	08007395 	.word	0x08007395
 8007344:	08007395 	.word	0x08007395
 8007348:	08007383 	.word	0x08007383
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0202 	orr.w	r2, r2, #2
 800735a:	60da      	str	r2, [r3, #12]
      break;
 800735c:	e01d      	b.n	800739a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f042 0204 	orr.w	r2, r2, #4
 800736c:	60da      	str	r2, [r3, #12]
      break;
 800736e:	e014      	b.n	800739a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0208 	orr.w	r2, r2, #8
 800737e:	60da      	str	r2, [r3, #12]
      break;
 8007380:	e00b      	b.n	800739a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f042 0210 	orr.w	r2, r2, #16
 8007390:	60da      	str	r2, [r3, #12]
      break;
 8007392:	e002      	b.n	800739a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	73fb      	strb	r3, [r7, #15]
      break;
 8007398:	bf00      	nop
  }

  if (status == HAL_OK)
 800739a:	7bfb      	ldrb	r3, [r7, #15]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d13e      	bne.n	800741e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2201      	movs	r2, #1
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f001 f80a 	bl	80083c2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a1d      	ldr	r2, [pc, #116]	; (8007428 <HAL_TIM_IC_Start_IT+0x220>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d018      	beq.n	80073ea <HAL_TIM_IC_Start_IT+0x1e2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c0:	d013      	beq.n	80073ea <HAL_TIM_IC_Start_IT+0x1e2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a19      	ldr	r2, [pc, #100]	; (800742c <HAL_TIM_IC_Start_IT+0x224>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00e      	beq.n	80073ea <HAL_TIM_IC_Start_IT+0x1e2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a17      	ldr	r2, [pc, #92]	; (8007430 <HAL_TIM_IC_Start_IT+0x228>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d009      	beq.n	80073ea <HAL_TIM_IC_Start_IT+0x1e2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a16      	ldr	r2, [pc, #88]	; (8007434 <HAL_TIM_IC_Start_IT+0x22c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d004      	beq.n	80073ea <HAL_TIM_IC_Start_IT+0x1e2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a14      	ldr	r2, [pc, #80]	; (8007438 <HAL_TIM_IC_Start_IT+0x230>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d111      	bne.n	800740e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b06      	cmp	r3, #6
 80073fa:	d010      	beq.n	800741e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800740c:	e007      	b.n	800741e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0201 	orr.w	r2, r2, #1
 800741c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800741e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40010000 	.word	0x40010000
 800742c:	40000400 	.word	0x40000400
 8007430:	40000800 	.word	0x40000800
 8007434:	40000c00 	.word	0x40000c00
 8007438:	40014000 	.word	0x40014000

0800743c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	2b0c      	cmp	r3, #12
 800744e:	d841      	bhi.n	80074d4 <HAL_TIM_IC_Stop_IT+0x98>
 8007450:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <HAL_TIM_IC_Stop_IT+0x1c>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	0800748d 	.word	0x0800748d
 800745c:	080074d5 	.word	0x080074d5
 8007460:	080074d5 	.word	0x080074d5
 8007464:	080074d5 	.word	0x080074d5
 8007468:	0800749f 	.word	0x0800749f
 800746c:	080074d5 	.word	0x080074d5
 8007470:	080074d5 	.word	0x080074d5
 8007474:	080074d5 	.word	0x080074d5
 8007478:	080074b1 	.word	0x080074b1
 800747c:	080074d5 	.word	0x080074d5
 8007480:	080074d5 	.word	0x080074d5
 8007484:	080074d5 	.word	0x080074d5
 8007488:	080074c3 	.word	0x080074c3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0202 	bic.w	r2, r2, #2
 800749a:	60da      	str	r2, [r3, #12]
      break;
 800749c:	e01d      	b.n	80074da <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0204 	bic.w	r2, r2, #4
 80074ac:	60da      	str	r2, [r3, #12]
      break;
 80074ae:	e014      	b.n	80074da <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 0208 	bic.w	r2, r2, #8
 80074be:	60da      	str	r2, [r3, #12]
      break;
 80074c0:	e00b      	b.n	80074da <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68da      	ldr	r2, [r3, #12]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0210 	bic.w	r2, r2, #16
 80074d0:	60da      	str	r2, [r3, #12]
      break;
 80074d2:	e002      	b.n	80074da <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	73fb      	strb	r3, [r7, #15]
      break;
 80074d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d156      	bne.n	800758e <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2200      	movs	r2, #0
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 ff6a 	bl	80083c2 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6a1a      	ldr	r2, [r3, #32]
 80074f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80074f8:	4013      	ands	r3, r2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10f      	bne.n	800751e <HAL_TIM_IC_Stop_IT+0xe2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6a1a      	ldr	r2, [r3, #32]
 8007504:	f240 4344 	movw	r3, #1092	; 0x444
 8007508:	4013      	ands	r3, r2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d107      	bne.n	800751e <HAL_TIM_IC_Stop_IT+0xe2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0201 	bic.w	r2, r2, #1
 800751c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d104      	bne.n	800752e <HAL_TIM_IC_Stop_IT+0xf2>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800752c:	e013      	b.n	8007556 <HAL_TIM_IC_Stop_IT+0x11a>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b04      	cmp	r3, #4
 8007532:	d104      	bne.n	800753e <HAL_TIM_IC_Stop_IT+0x102>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800753c:	e00b      	b.n	8007556 <HAL_TIM_IC_Stop_IT+0x11a>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b08      	cmp	r3, #8
 8007542:	d104      	bne.n	800754e <HAL_TIM_IC_Stop_IT+0x112>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800754c:	e003      	b.n	8007556 <HAL_TIM_IC_Stop_IT+0x11a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d104      	bne.n	8007566 <HAL_TIM_IC_Stop_IT+0x12a>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007564:	e013      	b.n	800758e <HAL_TIM_IC_Stop_IT+0x152>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b04      	cmp	r3, #4
 800756a:	d104      	bne.n	8007576 <HAL_TIM_IC_Stop_IT+0x13a>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007574:	e00b      	b.n	800758e <HAL_TIM_IC_Stop_IT+0x152>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b08      	cmp	r3, #8
 800757a:	d104      	bne.n	8007586 <HAL_TIM_IC_Stop_IT+0x14a>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007584:	e003      	b.n	800758e <HAL_TIM_IC_Stop_IT+0x152>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d122      	bne.n	80075f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d11b      	bne.n	80075f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f06f 0202 	mvn.w	r2, #2
 80075c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	f003 0303 	and.w	r3, r3, #3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa98 	bl	8007b10 <HAL_TIM_IC_CaptureCallback>
 80075e0:	e005      	b.n	80075ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fa8a 	bl	8007afc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fa9b 	bl	8007b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	f003 0304 	and.w	r3, r3, #4
 80075fe:	2b04      	cmp	r3, #4
 8007600:	d122      	bne.n	8007648 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b04      	cmp	r3, #4
 800760e:	d11b      	bne.n	8007648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f06f 0204 	mvn.w	r2, #4
 8007618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2202      	movs	r2, #2
 800761e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa6e 	bl	8007b10 <HAL_TIM_IC_CaptureCallback>
 8007634:	e005      	b.n	8007642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fa60 	bl	8007afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fa71 	bl	8007b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	f003 0308 	and.w	r3, r3, #8
 8007652:	2b08      	cmp	r3, #8
 8007654:	d122      	bne.n	800769c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b08      	cmp	r3, #8
 8007662:	d11b      	bne.n	800769c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f06f 0208 	mvn.w	r2, #8
 800766c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2204      	movs	r2, #4
 8007672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fa44 	bl	8007b10 <HAL_TIM_IC_CaptureCallback>
 8007688:	e005      	b.n	8007696 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fa36 	bl	8007afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fa47 	bl	8007b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f003 0310 	and.w	r3, r3, #16
 80076a6:	2b10      	cmp	r3, #16
 80076a8:	d122      	bne.n	80076f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f003 0310 	and.w	r3, r3, #16
 80076b4:	2b10      	cmp	r3, #16
 80076b6:	d11b      	bne.n	80076f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f06f 0210 	mvn.w	r2, #16
 80076c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2208      	movs	r2, #8
 80076c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa1a 	bl	8007b10 <HAL_TIM_IC_CaptureCallback>
 80076dc:	e005      	b.n	80076ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa0c 	bl	8007afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fa1d 	bl	8007b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d10e      	bne.n	800771c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b01      	cmp	r3, #1
 800770a:	d107      	bne.n	800771c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f06f 0201 	mvn.w	r2, #1
 8007714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f9e6 	bl	8007ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007726:	2b80      	cmp	r3, #128	; 0x80
 8007728:	d10e      	bne.n	8007748 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007734:	2b80      	cmp	r3, #128	; 0x80
 8007736:	d107      	bne.n	8007748 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 f88e 	bl	8008864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007752:	2b40      	cmp	r3, #64	; 0x40
 8007754:	d10e      	bne.n	8007774 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007760:	2b40      	cmp	r3, #64	; 0x40
 8007762:	d107      	bne.n	8007774 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800776c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f9e2 	bl	8007b38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	f003 0320 	and.w	r3, r3, #32
 800777e:	2b20      	cmp	r3, #32
 8007780:	d10e      	bne.n	80077a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b20      	cmp	r3, #32
 800778e:	d107      	bne.n	80077a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f06f 0220 	mvn.w	r2, #32
 8007798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 f858 	bl	8008850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80077c2:	2302      	movs	r3, #2
 80077c4:	e088      	b.n	80078d8 <HAL_TIM_IC_ConfigChannel+0x130>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d11b      	bne.n	800780c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	6819      	ldr	r1, [r3, #0]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f000 fc50 	bl	8008088 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 020c 	bic.w	r2, r2, #12
 80077f6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6999      	ldr	r1, [r3, #24]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	619a      	str	r2, [r3, #24]
 800780a:	e060      	b.n	80078ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b04      	cmp	r3, #4
 8007810:	d11c      	bne.n	800784c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6818      	ldr	r0, [r3, #0]
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	6819      	ldr	r1, [r3, #0]
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f000 fcc8 	bl	80081b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	699a      	ldr	r2, [r3, #24]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007834:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6999      	ldr	r1, [r3, #24]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	021a      	lsls	r2, r3, #8
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	619a      	str	r2, [r3, #24]
 800784a:	e040      	b.n	80078ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b08      	cmp	r3, #8
 8007850:	d11b      	bne.n	800788a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6818      	ldr	r0, [r3, #0]
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	6819      	ldr	r1, [r3, #0]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f000 fd15 	bl	8008290 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69da      	ldr	r2, [r3, #28]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 020c 	bic.w	r2, r2, #12
 8007874:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69d9      	ldr	r1, [r3, #28]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	61da      	str	r2, [r3, #28]
 8007888:	e021      	b.n	80078ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b0c      	cmp	r3, #12
 800788e:	d11c      	bne.n	80078ca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6818      	ldr	r0, [r3, #0]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	6819      	ldr	r1, [r3, #0]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f000 fd32 	bl	8008308 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69da      	ldr	r2, [r3, #28]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80078b2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	69d9      	ldr	r1, [r3, #28]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	021a      	lsls	r2, r3, #8
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	61da      	str	r2, [r3, #28]
 80078c8:	e001      	b.n	80078ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d101      	bne.n	80078fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078fa:	2302      	movs	r3, #2
 80078fc:	e0ae      	b.n	8007a5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b0c      	cmp	r3, #12
 800790a:	f200 809f 	bhi.w	8007a4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800790e:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	08007949 	.word	0x08007949
 8007918:	08007a4d 	.word	0x08007a4d
 800791c:	08007a4d 	.word	0x08007a4d
 8007920:	08007a4d 	.word	0x08007a4d
 8007924:	08007989 	.word	0x08007989
 8007928:	08007a4d 	.word	0x08007a4d
 800792c:	08007a4d 	.word	0x08007a4d
 8007930:	08007a4d 	.word	0x08007a4d
 8007934:	080079cb 	.word	0x080079cb
 8007938:	08007a4d 	.word	0x08007a4d
 800793c:	08007a4d 	.word	0x08007a4d
 8007940:	08007a4d 	.word	0x08007a4d
 8007944:	08007a0b 	.word	0x08007a0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68b9      	ldr	r1, [r7, #8]
 800794e:	4618      	mov	r0, r3
 8007950:	f000 f97c 	bl	8007c4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f042 0208 	orr.w	r2, r2, #8
 8007962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	699a      	ldr	r2, [r3, #24]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0204 	bic.w	r2, r2, #4
 8007972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6999      	ldr	r1, [r3, #24]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	691a      	ldr	r2, [r3, #16]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	619a      	str	r2, [r3, #24]
      break;
 8007986:	e064      	b.n	8007a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68b9      	ldr	r1, [r7, #8]
 800798e:	4618      	mov	r0, r3
 8007990:	f000 f9c2 	bl	8007d18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	699a      	ldr	r2, [r3, #24]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699a      	ldr	r2, [r3, #24]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6999      	ldr	r1, [r3, #24]
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	021a      	lsls	r2, r3, #8
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	619a      	str	r2, [r3, #24]
      break;
 80079c8:	e043      	b.n	8007a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68b9      	ldr	r1, [r7, #8]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fa0d 	bl	8007df0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69da      	ldr	r2, [r3, #28]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f042 0208 	orr.w	r2, r2, #8
 80079e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69da      	ldr	r2, [r3, #28]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0204 	bic.w	r2, r2, #4
 80079f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69d9      	ldr	r1, [r3, #28]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	691a      	ldr	r2, [r3, #16]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	61da      	str	r2, [r3, #28]
      break;
 8007a08:	e023      	b.n	8007a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fa57 	bl	8007ec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	69da      	ldr	r2, [r3, #28]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	69da      	ldr	r2, [r3, #28]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69d9      	ldr	r1, [r3, #28]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	021a      	lsls	r2, r3, #8
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	61da      	str	r2, [r3, #28]
      break;
 8007a4a:	e002      	b.n	8007a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_TIM_SlaveConfigSynchro+0x18>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e031      	b.n	8007ae0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa68 	bl	8007f64 <TIM_SlaveTimer_SetConfig>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e018      	b.n	8007ae0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007abc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007acc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a34      	ldr	r2, [pc, #208]	; (8007c30 <TIM_Base_SetConfig+0xe4>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00f      	beq.n	8007b84 <TIM_Base_SetConfig+0x38>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b6a:	d00b      	beq.n	8007b84 <TIM_Base_SetConfig+0x38>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a31      	ldr	r2, [pc, #196]	; (8007c34 <TIM_Base_SetConfig+0xe8>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d007      	beq.n	8007b84 <TIM_Base_SetConfig+0x38>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a30      	ldr	r2, [pc, #192]	; (8007c38 <TIM_Base_SetConfig+0xec>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d003      	beq.n	8007b84 <TIM_Base_SetConfig+0x38>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a2f      	ldr	r2, [pc, #188]	; (8007c3c <TIM_Base_SetConfig+0xf0>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d108      	bne.n	8007b96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a25      	ldr	r2, [pc, #148]	; (8007c30 <TIM_Base_SetConfig+0xe4>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d01b      	beq.n	8007bd6 <TIM_Base_SetConfig+0x8a>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba4:	d017      	beq.n	8007bd6 <TIM_Base_SetConfig+0x8a>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a22      	ldr	r2, [pc, #136]	; (8007c34 <TIM_Base_SetConfig+0xe8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d013      	beq.n	8007bd6 <TIM_Base_SetConfig+0x8a>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a21      	ldr	r2, [pc, #132]	; (8007c38 <TIM_Base_SetConfig+0xec>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00f      	beq.n	8007bd6 <TIM_Base_SetConfig+0x8a>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a20      	ldr	r2, [pc, #128]	; (8007c3c <TIM_Base_SetConfig+0xf0>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d00b      	beq.n	8007bd6 <TIM_Base_SetConfig+0x8a>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a1f      	ldr	r2, [pc, #124]	; (8007c40 <TIM_Base_SetConfig+0xf4>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d007      	beq.n	8007bd6 <TIM_Base_SetConfig+0x8a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a1e      	ldr	r2, [pc, #120]	; (8007c44 <TIM_Base_SetConfig+0xf8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d003      	beq.n	8007bd6 <TIM_Base_SetConfig+0x8a>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a1d      	ldr	r2, [pc, #116]	; (8007c48 <TIM_Base_SetConfig+0xfc>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d108      	bne.n	8007be8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a08      	ldr	r2, [pc, #32]	; (8007c30 <TIM_Base_SetConfig+0xe4>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d103      	bne.n	8007c1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	691a      	ldr	r2, [r3, #16]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	615a      	str	r2, [r3, #20]
}
 8007c22:	bf00      	nop
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	40010000 	.word	0x40010000
 8007c34:	40000400 	.word	0x40000400
 8007c38:	40000800 	.word	0x40000800
 8007c3c:	40000c00 	.word	0x40000c00
 8007c40:	40014000 	.word	0x40014000
 8007c44:	40014400 	.word	0x40014400
 8007c48:	40014800 	.word	0x40014800

08007c4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	f023 0201 	bic.w	r2, r3, #1
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f023 0303 	bic.w	r3, r3, #3
 8007c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f023 0302 	bic.w	r3, r3, #2
 8007c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a1c      	ldr	r2, [pc, #112]	; (8007d14 <TIM_OC1_SetConfig+0xc8>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d10c      	bne.n	8007cc2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f023 0308 	bic.w	r3, r3, #8
 8007cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f023 0304 	bic.w	r3, r3, #4
 8007cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a13      	ldr	r2, [pc, #76]	; (8007d14 <TIM_OC1_SetConfig+0xc8>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d111      	bne.n	8007cee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	621a      	str	r2, [r3, #32]
}
 8007d08:	bf00      	nop
 8007d0a:	371c      	adds	r7, #28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	40010000 	.word	0x40010000

08007d18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f023 0210 	bic.w	r2, r3, #16
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f023 0320 	bic.w	r3, r3, #32
 8007d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	011b      	lsls	r3, r3, #4
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a1e      	ldr	r2, [pc, #120]	; (8007dec <TIM_OC2_SetConfig+0xd4>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d10d      	bne.n	8007d94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	011b      	lsls	r3, r3, #4
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a15      	ldr	r2, [pc, #84]	; (8007dec <TIM_OC2_SetConfig+0xd4>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d113      	bne.n	8007dc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	621a      	str	r2, [r3, #32]
}
 8007dde:	bf00      	nop
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	40010000 	.word	0x40010000

08007df0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0303 	bic.w	r3, r3, #3
 8007e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	021b      	lsls	r3, r3, #8
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a1d      	ldr	r2, [pc, #116]	; (8007ec0 <TIM_OC3_SetConfig+0xd0>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d10d      	bne.n	8007e6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	021b      	lsls	r3, r3, #8
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a14      	ldr	r2, [pc, #80]	; (8007ec0 <TIM_OC3_SetConfig+0xd0>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d113      	bne.n	8007e9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	011b      	lsls	r3, r3, #4
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	621a      	str	r2, [r3, #32]
}
 8007eb4:	bf00      	nop
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	40010000 	.word	0x40010000

08007ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	021b      	lsls	r3, r3, #8
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	031b      	lsls	r3, r3, #12
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a10      	ldr	r2, [pc, #64]	; (8007f60 <TIM_OC4_SetConfig+0x9c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d109      	bne.n	8007f38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	019b      	lsls	r3, r3, #6
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	621a      	str	r2, [r3, #32]
}
 8007f52:	bf00      	nop
 8007f54:	371c      	adds	r7, #28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	40010000 	.word	0x40010000

08007f64 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f80:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f023 0307 	bic.w	r3, r3, #7
 8007f92:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	2b70      	cmp	r3, #112	; 0x70
 8007fac:	d01a      	beq.n	8007fe4 <TIM_SlaveTimer_SetConfig+0x80>
 8007fae:	2b70      	cmp	r3, #112	; 0x70
 8007fb0:	d860      	bhi.n	8008074 <TIM_SlaveTimer_SetConfig+0x110>
 8007fb2:	2b60      	cmp	r3, #96	; 0x60
 8007fb4:	d054      	beq.n	8008060 <TIM_SlaveTimer_SetConfig+0xfc>
 8007fb6:	2b60      	cmp	r3, #96	; 0x60
 8007fb8:	d85c      	bhi.n	8008074 <TIM_SlaveTimer_SetConfig+0x110>
 8007fba:	2b50      	cmp	r3, #80	; 0x50
 8007fbc:	d046      	beq.n	800804c <TIM_SlaveTimer_SetConfig+0xe8>
 8007fbe:	2b50      	cmp	r3, #80	; 0x50
 8007fc0:	d858      	bhi.n	8008074 <TIM_SlaveTimer_SetConfig+0x110>
 8007fc2:	2b40      	cmp	r3, #64	; 0x40
 8007fc4:	d019      	beq.n	8007ffa <TIM_SlaveTimer_SetConfig+0x96>
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d854      	bhi.n	8008074 <TIM_SlaveTimer_SetConfig+0x110>
 8007fca:	2b30      	cmp	r3, #48	; 0x30
 8007fcc:	d055      	beq.n	800807a <TIM_SlaveTimer_SetConfig+0x116>
 8007fce:	2b30      	cmp	r3, #48	; 0x30
 8007fd0:	d850      	bhi.n	8008074 <TIM_SlaveTimer_SetConfig+0x110>
 8007fd2:	2b20      	cmp	r3, #32
 8007fd4:	d051      	beq.n	800807a <TIM_SlaveTimer_SetConfig+0x116>
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d84c      	bhi.n	8008074 <TIM_SlaveTimer_SetConfig+0x110>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d04d      	beq.n	800807a <TIM_SlaveTimer_SetConfig+0x116>
 8007fde:	2b10      	cmp	r3, #16
 8007fe0:	d04b      	beq.n	800807a <TIM_SlaveTimer_SetConfig+0x116>
 8007fe2:	e047      	b.n	8008074 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	68d9      	ldr	r1, [r3, #12]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	f000 f9c5 	bl	8008382 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007ff8:	e040      	b.n	800807c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b05      	cmp	r3, #5
 8008000:	d101      	bne.n	8008006 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e03b      	b.n	800807e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6a1b      	ldr	r3, [r3, #32]
 800800c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6a1a      	ldr	r2, [r3, #32]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0201 	bic.w	r2, r2, #1
 800801c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800802c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	4313      	orrs	r3, r2
 8008038:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	621a      	str	r2, [r3, #32]
      break;
 800804a:	e017      	b.n	800807c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6818      	ldr	r0, [r3, #0]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	6899      	ldr	r1, [r3, #8]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	461a      	mov	r2, r3
 800805a:	f000 f87d 	bl	8008158 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800805e:	e00d      	b.n	800807c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6818      	ldr	r0, [r3, #0]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	6899      	ldr	r1, [r3, #8]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	461a      	mov	r2, r3
 800806e:	f000 f8df 	bl	8008230 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008072:	e003      	b.n	800807c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	75fb      	strb	r3, [r7, #23]
      break;
 8008078:	e000      	b.n	800807c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800807a:	bf00      	nop
  }

  return status;
 800807c:	7dfb      	ldrb	r3, [r7, #23]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	f023 0201 	bic.w	r2, r3, #1
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4a24      	ldr	r2, [pc, #144]	; (8008144 <TIM_TI1_SetConfig+0xbc>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d013      	beq.n	80080de <TIM_TI1_SetConfig+0x56>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080bc:	d00f      	beq.n	80080de <TIM_TI1_SetConfig+0x56>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4a21      	ldr	r2, [pc, #132]	; (8008148 <TIM_TI1_SetConfig+0xc0>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00b      	beq.n	80080de <TIM_TI1_SetConfig+0x56>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4a20      	ldr	r2, [pc, #128]	; (800814c <TIM_TI1_SetConfig+0xc4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d007      	beq.n	80080de <TIM_TI1_SetConfig+0x56>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4a1f      	ldr	r2, [pc, #124]	; (8008150 <TIM_TI1_SetConfig+0xc8>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d003      	beq.n	80080de <TIM_TI1_SetConfig+0x56>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	4a1e      	ldr	r2, [pc, #120]	; (8008154 <TIM_TI1_SetConfig+0xcc>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d101      	bne.n	80080e2 <TIM_TI1_SetConfig+0x5a>
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <TIM_TI1_SetConfig+0x5c>
 80080e2:	2300      	movs	r3, #0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d008      	beq.n	80080fa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f023 0303 	bic.w	r3, r3, #3
 80080ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	617b      	str	r3, [r7, #20]
 80080f8:	e003      	b.n	8008102 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f043 0301 	orr.w	r3, r3, #1
 8008100:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	011b      	lsls	r3, r3, #4
 800810e:	b2db      	uxtb	r3, r3
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	4313      	orrs	r3, r2
 8008114:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f023 030a 	bic.w	r3, r3, #10
 800811c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f003 030a 	and.w	r3, r3, #10
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	621a      	str	r2, [r3, #32]
}
 8008136:	bf00      	nop
 8008138:	371c      	adds	r7, #28
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	40010000 	.word	0x40010000
 8008148:	40000400 	.word	0x40000400
 800814c:	40000800 	.word	0x40000800
 8008150:	40000c00 	.word	0x40000c00
 8008154:	40014000 	.word	0x40014000

08008158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	f023 0201 	bic.w	r2, r3, #1
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	4313      	orrs	r3, r2
 800818c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f023 030a 	bic.w	r3, r3, #10
 8008194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4313      	orrs	r3, r2
 800819c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	621a      	str	r2, [r3, #32]
}
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b087      	sub	sp, #28
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
 80081c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6a1b      	ldr	r3, [r3, #32]
 80081c8:	f023 0210 	bic.w	r2, r3, #16
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	021b      	lsls	r3, r3, #8
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	031b      	lsls	r3, r3, #12
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	4313      	orrs	r3, r2
 8008200:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008208:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	4313      	orrs	r3, r2
 8008216:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	621a      	str	r2, [r3, #32]
}
 8008224:	bf00      	nop
 8008226:	371c      	adds	r7, #28
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008230:	b480      	push	{r7}
 8008232:	b087      	sub	sp, #28
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	f023 0210 	bic.w	r2, r3, #16
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800825a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	031b      	lsls	r3, r3, #12
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	4313      	orrs	r3, r2
 8008264:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800826c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	011b      	lsls	r3, r3, #4
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	4313      	orrs	r3, r2
 8008276:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	621a      	str	r2, [r3, #32]
}
 8008284:	bf00      	nop
 8008286:	371c      	adds	r7, #28
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
 800829c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f023 0303 	bic.w	r3, r3, #3
 80082bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	011b      	lsls	r3, r3, #4
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80082e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	021b      	lsls	r3, r3, #8
 80082e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	621a      	str	r2, [r3, #32]
}
 80082fc:	bf00      	nop
 80082fe:	371c      	adds	r7, #28
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6a1b      	ldr	r3, [r3, #32]
 800832c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008334:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	4313      	orrs	r3, r2
 800833e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008346:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	031b      	lsls	r3, r3, #12
 800834c:	b29b      	uxth	r3, r3
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	4313      	orrs	r3, r2
 8008352:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800835a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	031b      	lsls	r3, r3, #12
 8008360:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	4313      	orrs	r3, r2
 8008368:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	621a      	str	r2, [r3, #32]
}
 8008376:	bf00      	nop
 8008378:	371c      	adds	r7, #28
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008382:	b480      	push	{r7}
 8008384:	b087      	sub	sp, #28
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	607a      	str	r2, [r7, #4]
 800838e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800839c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	021a      	lsls	r2, r3, #8
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	431a      	orrs	r2, r3
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	609a      	str	r2, [r3, #8]
}
 80083b6:	bf00      	nop
 80083b8:	371c      	adds	r7, #28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b087      	sub	sp, #28
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	f003 031f 	and.w	r3, r3, #31
 80083d4:	2201      	movs	r2, #1
 80083d6:	fa02 f303 	lsl.w	r3, r2, r3
 80083da:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a1a      	ldr	r2, [r3, #32]
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	43db      	mvns	r3, r3
 80083e4:	401a      	ands	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6a1a      	ldr	r2, [r3, #32]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	f003 031f 	and.w	r3, r3, #31
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	fa01 f303 	lsl.w	r3, r1, r3
 80083fa:	431a      	orrs	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	621a      	str	r2, [r3, #32]
}
 8008400:	bf00      	nop
 8008402:	371c      	adds	r7, #28
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08a      	sub	sp, #40	; 0x28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e09a      	b.n	8008556 <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b00      	cmp	r3, #0
 800842a:	d106      	bne.n	800843a <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7fa f907 	bl	8002648 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2202      	movs	r2, #2
 800843e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3304      	adds	r3, #4
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f7ff fb7d 	bl	8007b4c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	6819      	ldr	r1, [r3, #0]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	2203      	movs	r2, #3
 8008460:	f7ff fe12 	bl	8008088 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 020c 	bic.w	r2, r2, #12
 8008472:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6999      	ldr	r1, [r3, #24]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008494:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80084a4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084b4:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0207 	bic.w	r2, r2, #7
 80084c4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689a      	ldr	r2, [r3, #8]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f042 0204 	orr.w	r2, r2, #4
 80084d4:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80084d6:	2300      	movs	r3, #0
 80084d8:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80084da:	2300      	movs	r3, #0
 80084dc:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80084de:	2370      	movs	r3, #112	; 0x70
 80084e0:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80084e2:	2300      	movs	r3, #0
 80084e4:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80084e6:	2300      	movs	r3, #0
 80084e8:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80084ea:	2300      	movs	r3, #0
 80084ec:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f107 020c 	add.w	r2, r7, #12
 80084fc:	4611      	mov	r1, r2
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff fc0a 	bl	8007d18 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008512:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8008522:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3728      	adds	r7, #40	; 0x28
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800856e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008576:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800857e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008586:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d108      	bne.n	80085a0 <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d105      	bne.n	80085a0 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008594:	7b7b      	ldrb	r3, [r7, #13]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d102      	bne.n	80085a0 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800859a:	7b3b      	ldrb	r3, [r7, #12]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d001      	beq.n	80085a4 <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e04f      	b.n	8008644 <HAL_TIMEx_HallSensor_Start+0xe4>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2202      	movs	r2, #2
 80085c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2201      	movs	r2, #1
 80085ca:	2100      	movs	r1, #0
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7ff fef8 	bl	80083c2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a1d      	ldr	r2, [pc, #116]	; (800864c <HAL_TIMEx_HallSensor_Start+0xec>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d018      	beq.n	800860e <HAL_TIMEx_HallSensor_Start+0xae>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085e4:	d013      	beq.n	800860e <HAL_TIMEx_HallSensor_Start+0xae>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a19      	ldr	r2, [pc, #100]	; (8008650 <HAL_TIMEx_HallSensor_Start+0xf0>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d00e      	beq.n	800860e <HAL_TIMEx_HallSensor_Start+0xae>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a17      	ldr	r2, [pc, #92]	; (8008654 <HAL_TIMEx_HallSensor_Start+0xf4>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d009      	beq.n	800860e <HAL_TIMEx_HallSensor_Start+0xae>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a16      	ldr	r2, [pc, #88]	; (8008658 <HAL_TIMEx_HallSensor_Start+0xf8>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d004      	beq.n	800860e <HAL_TIMEx_HallSensor_Start+0xae>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a14      	ldr	r2, [pc, #80]	; (800865c <HAL_TIMEx_HallSensor_Start+0xfc>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d111      	bne.n	8008632 <HAL_TIMEx_HallSensor_Start+0xd2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f003 0307 	and.w	r3, r3, #7
 8008618:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b06      	cmp	r3, #6
 800861e:	d010      	beq.n	8008642 <HAL_TIMEx_HallSensor_Start+0xe2>
    {
      __HAL_TIM_ENABLE(htim);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f042 0201 	orr.w	r2, r2, #1
 800862e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008630:	e007      	b.n	8008642 <HAL_TIMEx_HallSensor_Start+0xe2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f042 0201 	orr.w	r2, r2, #1
 8008640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	40010000 	.word	0x40010000
 8008650:	40000400 	.word	0x40000400
 8008654:	40000800 	.word	0x40000800
 8008658:	40000c00 	.word	0x40000c00
 800865c:	40014000 	.word	0x40014000

08008660 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2200      	movs	r2, #0
 800866e:	2100      	movs	r1, #0
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff fea6 	bl	80083c2 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6a1a      	ldr	r2, [r3, #32]
 800867c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008680:	4013      	ands	r3, r2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10f      	bne.n	80086a6 <HAL_TIMEx_HallSensor_Stop+0x46>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6a1a      	ldr	r2, [r3, #32]
 800868c:	f240 4344 	movw	r3, #1092	; 0x444
 8008690:	4013      	ands	r3, r2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d107      	bne.n	80086a6 <HAL_TIMEx_HallSensor_Stop+0x46>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0201 	bic.w	r2, r2, #1
 80086a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d101      	bne.n	80086e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086e4:	2302      	movs	r3, #2
 80086e6:	e050      	b.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	4313      	orrs	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a1c      	ldr	r2, [pc, #112]	; (8008798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d018      	beq.n	800875e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008734:	d013      	beq.n	800875e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a18      	ldr	r2, [pc, #96]	; (800879c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d00e      	beq.n	800875e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a16      	ldr	r2, [pc, #88]	; (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d009      	beq.n	800875e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a15      	ldr	r2, [pc, #84]	; (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d004      	beq.n	800875e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a13      	ldr	r2, [pc, #76]	; (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d10c      	bne.n	8008778 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	4313      	orrs	r3, r2
 800876e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	40010000 	.word	0x40010000
 800879c:	40000400 	.word	0x40000400
 80087a0:	40000800 	.word	0x40000800
 80087a4:	40000c00 	.word	0x40000c00
 80087a8:	40014000 	.word	0x40014000

080087ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d101      	bne.n	80087c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80087c4:	2302      	movs	r3, #2
 80087c6:	e03d      	b.n	8008844 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4313      	orrs	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	4313      	orrs	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	69db      	ldr	r3, [r3, #28]
 800882e:	4313      	orrs	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <__cvt>:
 8008878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800887c:	ec55 4b10 	vmov	r4, r5, d0
 8008880:	2d00      	cmp	r5, #0
 8008882:	460e      	mov	r6, r1
 8008884:	4619      	mov	r1, r3
 8008886:	462b      	mov	r3, r5
 8008888:	bfbb      	ittet	lt
 800888a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800888e:	461d      	movlt	r5, r3
 8008890:	2300      	movge	r3, #0
 8008892:	232d      	movlt	r3, #45	; 0x2d
 8008894:	700b      	strb	r3, [r1, #0]
 8008896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008898:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800889c:	4691      	mov	r9, r2
 800889e:	f023 0820 	bic.w	r8, r3, #32
 80088a2:	bfbc      	itt	lt
 80088a4:	4622      	movlt	r2, r4
 80088a6:	4614      	movlt	r4, r2
 80088a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088ac:	d005      	beq.n	80088ba <__cvt+0x42>
 80088ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088b2:	d100      	bne.n	80088b6 <__cvt+0x3e>
 80088b4:	3601      	adds	r6, #1
 80088b6:	2102      	movs	r1, #2
 80088b8:	e000      	b.n	80088bc <__cvt+0x44>
 80088ba:	2103      	movs	r1, #3
 80088bc:	ab03      	add	r3, sp, #12
 80088be:	9301      	str	r3, [sp, #4]
 80088c0:	ab02      	add	r3, sp, #8
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	ec45 4b10 	vmov	d0, r4, r5
 80088c8:	4653      	mov	r3, sl
 80088ca:	4632      	mov	r2, r6
 80088cc:	f000 fe48 	bl	8009560 <_dtoa_r>
 80088d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088d4:	4607      	mov	r7, r0
 80088d6:	d102      	bne.n	80088de <__cvt+0x66>
 80088d8:	f019 0f01 	tst.w	r9, #1
 80088dc:	d022      	beq.n	8008924 <__cvt+0xac>
 80088de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088e2:	eb07 0906 	add.w	r9, r7, r6
 80088e6:	d110      	bne.n	800890a <__cvt+0x92>
 80088e8:	783b      	ldrb	r3, [r7, #0]
 80088ea:	2b30      	cmp	r3, #48	; 0x30
 80088ec:	d10a      	bne.n	8008904 <__cvt+0x8c>
 80088ee:	2200      	movs	r2, #0
 80088f0:	2300      	movs	r3, #0
 80088f2:	4620      	mov	r0, r4
 80088f4:	4629      	mov	r1, r5
 80088f6:	f7f8 f8ef 	bl	8000ad8 <__aeabi_dcmpeq>
 80088fa:	b918      	cbnz	r0, 8008904 <__cvt+0x8c>
 80088fc:	f1c6 0601 	rsb	r6, r6, #1
 8008900:	f8ca 6000 	str.w	r6, [sl]
 8008904:	f8da 3000 	ldr.w	r3, [sl]
 8008908:	4499      	add	r9, r3
 800890a:	2200      	movs	r2, #0
 800890c:	2300      	movs	r3, #0
 800890e:	4620      	mov	r0, r4
 8008910:	4629      	mov	r1, r5
 8008912:	f7f8 f8e1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008916:	b108      	cbz	r0, 800891c <__cvt+0xa4>
 8008918:	f8cd 900c 	str.w	r9, [sp, #12]
 800891c:	2230      	movs	r2, #48	; 0x30
 800891e:	9b03      	ldr	r3, [sp, #12]
 8008920:	454b      	cmp	r3, r9
 8008922:	d307      	bcc.n	8008934 <__cvt+0xbc>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008928:	1bdb      	subs	r3, r3, r7
 800892a:	4638      	mov	r0, r7
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	b004      	add	sp, #16
 8008930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008934:	1c59      	adds	r1, r3, #1
 8008936:	9103      	str	r1, [sp, #12]
 8008938:	701a      	strb	r2, [r3, #0]
 800893a:	e7f0      	b.n	800891e <__cvt+0xa6>

0800893c <__exponent>:
 800893c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800893e:	4603      	mov	r3, r0
 8008940:	2900      	cmp	r1, #0
 8008942:	bfb8      	it	lt
 8008944:	4249      	neglt	r1, r1
 8008946:	f803 2b02 	strb.w	r2, [r3], #2
 800894a:	bfb4      	ite	lt
 800894c:	222d      	movlt	r2, #45	; 0x2d
 800894e:	222b      	movge	r2, #43	; 0x2b
 8008950:	2909      	cmp	r1, #9
 8008952:	7042      	strb	r2, [r0, #1]
 8008954:	dd2a      	ble.n	80089ac <__exponent+0x70>
 8008956:	f10d 0207 	add.w	r2, sp, #7
 800895a:	4617      	mov	r7, r2
 800895c:	260a      	movs	r6, #10
 800895e:	4694      	mov	ip, r2
 8008960:	fb91 f5f6 	sdiv	r5, r1, r6
 8008964:	fb06 1415 	mls	r4, r6, r5, r1
 8008968:	3430      	adds	r4, #48	; 0x30
 800896a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800896e:	460c      	mov	r4, r1
 8008970:	2c63      	cmp	r4, #99	; 0x63
 8008972:	f102 32ff 	add.w	r2, r2, #4294967295
 8008976:	4629      	mov	r1, r5
 8008978:	dcf1      	bgt.n	800895e <__exponent+0x22>
 800897a:	3130      	adds	r1, #48	; 0x30
 800897c:	f1ac 0402 	sub.w	r4, ip, #2
 8008980:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008984:	1c41      	adds	r1, r0, #1
 8008986:	4622      	mov	r2, r4
 8008988:	42ba      	cmp	r2, r7
 800898a:	d30a      	bcc.n	80089a2 <__exponent+0x66>
 800898c:	f10d 0209 	add.w	r2, sp, #9
 8008990:	eba2 020c 	sub.w	r2, r2, ip
 8008994:	42bc      	cmp	r4, r7
 8008996:	bf88      	it	hi
 8008998:	2200      	movhi	r2, #0
 800899a:	4413      	add	r3, r2
 800899c:	1a18      	subs	r0, r3, r0
 800899e:	b003      	add	sp, #12
 80089a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80089a6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80089aa:	e7ed      	b.n	8008988 <__exponent+0x4c>
 80089ac:	2330      	movs	r3, #48	; 0x30
 80089ae:	3130      	adds	r1, #48	; 0x30
 80089b0:	7083      	strb	r3, [r0, #2]
 80089b2:	70c1      	strb	r1, [r0, #3]
 80089b4:	1d03      	adds	r3, r0, #4
 80089b6:	e7f1      	b.n	800899c <__exponent+0x60>

080089b8 <_printf_float>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	ed2d 8b02 	vpush	{d8}
 80089c0:	b08d      	sub	sp, #52	; 0x34
 80089c2:	460c      	mov	r4, r1
 80089c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80089c8:	4616      	mov	r6, r2
 80089ca:	461f      	mov	r7, r3
 80089cc:	4605      	mov	r5, r0
 80089ce:	f000 fcc7 	bl	8009360 <_localeconv_r>
 80089d2:	f8d0 a000 	ldr.w	sl, [r0]
 80089d6:	4650      	mov	r0, sl
 80089d8:	f7f7 fc52 	bl	8000280 <strlen>
 80089dc:	2300      	movs	r3, #0
 80089de:	930a      	str	r3, [sp, #40]	; 0x28
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	9305      	str	r3, [sp, #20]
 80089e4:	f8d8 3000 	ldr.w	r3, [r8]
 80089e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80089ec:	3307      	adds	r3, #7
 80089ee:	f023 0307 	bic.w	r3, r3, #7
 80089f2:	f103 0208 	add.w	r2, r3, #8
 80089f6:	f8c8 2000 	str.w	r2, [r8]
 80089fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a02:	9307      	str	r3, [sp, #28]
 8008a04:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a08:	ee08 0a10 	vmov	s16, r0
 8008a0c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008a10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a14:	4b9e      	ldr	r3, [pc, #632]	; (8008c90 <_printf_float+0x2d8>)
 8008a16:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1a:	f7f8 f88f 	bl	8000b3c <__aeabi_dcmpun>
 8008a1e:	bb88      	cbnz	r0, 8008a84 <_printf_float+0xcc>
 8008a20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a24:	4b9a      	ldr	r3, [pc, #616]	; (8008c90 <_printf_float+0x2d8>)
 8008a26:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2a:	f7f8 f869 	bl	8000b00 <__aeabi_dcmple>
 8008a2e:	bb48      	cbnz	r0, 8008a84 <_printf_float+0xcc>
 8008a30:	2200      	movs	r2, #0
 8008a32:	2300      	movs	r3, #0
 8008a34:	4640      	mov	r0, r8
 8008a36:	4649      	mov	r1, r9
 8008a38:	f7f8 f858 	bl	8000aec <__aeabi_dcmplt>
 8008a3c:	b110      	cbz	r0, 8008a44 <_printf_float+0x8c>
 8008a3e:	232d      	movs	r3, #45	; 0x2d
 8008a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a44:	4a93      	ldr	r2, [pc, #588]	; (8008c94 <_printf_float+0x2dc>)
 8008a46:	4b94      	ldr	r3, [pc, #592]	; (8008c98 <_printf_float+0x2e0>)
 8008a48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008a4c:	bf94      	ite	ls
 8008a4e:	4690      	movls	r8, r2
 8008a50:	4698      	movhi	r8, r3
 8008a52:	2303      	movs	r3, #3
 8008a54:	6123      	str	r3, [r4, #16]
 8008a56:	9b05      	ldr	r3, [sp, #20]
 8008a58:	f023 0304 	bic.w	r3, r3, #4
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	f04f 0900 	mov.w	r9, #0
 8008a62:	9700      	str	r7, [sp, #0]
 8008a64:	4633      	mov	r3, r6
 8008a66:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 f9da 	bl	8008e24 <_printf_common>
 8008a70:	3001      	adds	r0, #1
 8008a72:	f040 8090 	bne.w	8008b96 <_printf_float+0x1de>
 8008a76:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7a:	b00d      	add	sp, #52	; 0x34
 8008a7c:	ecbd 8b02 	vpop	{d8}
 8008a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a84:	4642      	mov	r2, r8
 8008a86:	464b      	mov	r3, r9
 8008a88:	4640      	mov	r0, r8
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	f7f8 f856 	bl	8000b3c <__aeabi_dcmpun>
 8008a90:	b140      	cbz	r0, 8008aa4 <_printf_float+0xec>
 8008a92:	464b      	mov	r3, r9
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	bfbc      	itt	lt
 8008a98:	232d      	movlt	r3, #45	; 0x2d
 8008a9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a9e:	4a7f      	ldr	r2, [pc, #508]	; (8008c9c <_printf_float+0x2e4>)
 8008aa0:	4b7f      	ldr	r3, [pc, #508]	; (8008ca0 <_printf_float+0x2e8>)
 8008aa2:	e7d1      	b.n	8008a48 <_printf_float+0x90>
 8008aa4:	6863      	ldr	r3, [r4, #4]
 8008aa6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008aaa:	9206      	str	r2, [sp, #24]
 8008aac:	1c5a      	adds	r2, r3, #1
 8008aae:	d13f      	bne.n	8008b30 <_printf_float+0x178>
 8008ab0:	2306      	movs	r3, #6
 8008ab2:	6063      	str	r3, [r4, #4]
 8008ab4:	9b05      	ldr	r3, [sp, #20]
 8008ab6:	6861      	ldr	r1, [r4, #4]
 8008ab8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008abc:	2300      	movs	r3, #0
 8008abe:	9303      	str	r3, [sp, #12]
 8008ac0:	ab0a      	add	r3, sp, #40	; 0x28
 8008ac2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008ac6:	ab09      	add	r3, sp, #36	; 0x24
 8008ac8:	ec49 8b10 	vmov	d0, r8, r9
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	6022      	str	r2, [r4, #0]
 8008ad0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	f7ff fecf 	bl	8008878 <__cvt>
 8008ada:	9b06      	ldr	r3, [sp, #24]
 8008adc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ade:	2b47      	cmp	r3, #71	; 0x47
 8008ae0:	4680      	mov	r8, r0
 8008ae2:	d108      	bne.n	8008af6 <_printf_float+0x13e>
 8008ae4:	1cc8      	adds	r0, r1, #3
 8008ae6:	db02      	blt.n	8008aee <_printf_float+0x136>
 8008ae8:	6863      	ldr	r3, [r4, #4]
 8008aea:	4299      	cmp	r1, r3
 8008aec:	dd41      	ble.n	8008b72 <_printf_float+0x1ba>
 8008aee:	f1ab 0302 	sub.w	r3, fp, #2
 8008af2:	fa5f fb83 	uxtb.w	fp, r3
 8008af6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008afa:	d820      	bhi.n	8008b3e <_printf_float+0x186>
 8008afc:	3901      	subs	r1, #1
 8008afe:	465a      	mov	r2, fp
 8008b00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b04:	9109      	str	r1, [sp, #36]	; 0x24
 8008b06:	f7ff ff19 	bl	800893c <__exponent>
 8008b0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b0c:	1813      	adds	r3, r2, r0
 8008b0e:	2a01      	cmp	r2, #1
 8008b10:	4681      	mov	r9, r0
 8008b12:	6123      	str	r3, [r4, #16]
 8008b14:	dc02      	bgt.n	8008b1c <_printf_float+0x164>
 8008b16:	6822      	ldr	r2, [r4, #0]
 8008b18:	07d2      	lsls	r2, r2, #31
 8008b1a:	d501      	bpl.n	8008b20 <_printf_float+0x168>
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	6123      	str	r3, [r4, #16]
 8008b20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d09c      	beq.n	8008a62 <_printf_float+0xaa>
 8008b28:	232d      	movs	r3, #45	; 0x2d
 8008b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b2e:	e798      	b.n	8008a62 <_printf_float+0xaa>
 8008b30:	9a06      	ldr	r2, [sp, #24]
 8008b32:	2a47      	cmp	r2, #71	; 0x47
 8008b34:	d1be      	bne.n	8008ab4 <_printf_float+0xfc>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1bc      	bne.n	8008ab4 <_printf_float+0xfc>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e7b9      	b.n	8008ab2 <_printf_float+0xfa>
 8008b3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b42:	d118      	bne.n	8008b76 <_printf_float+0x1be>
 8008b44:	2900      	cmp	r1, #0
 8008b46:	6863      	ldr	r3, [r4, #4]
 8008b48:	dd0b      	ble.n	8008b62 <_printf_float+0x1aa>
 8008b4a:	6121      	str	r1, [r4, #16]
 8008b4c:	b913      	cbnz	r3, 8008b54 <_printf_float+0x19c>
 8008b4e:	6822      	ldr	r2, [r4, #0]
 8008b50:	07d0      	lsls	r0, r2, #31
 8008b52:	d502      	bpl.n	8008b5a <_printf_float+0x1a2>
 8008b54:	3301      	adds	r3, #1
 8008b56:	440b      	add	r3, r1
 8008b58:	6123      	str	r3, [r4, #16]
 8008b5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b5c:	f04f 0900 	mov.w	r9, #0
 8008b60:	e7de      	b.n	8008b20 <_printf_float+0x168>
 8008b62:	b913      	cbnz	r3, 8008b6a <_printf_float+0x1b2>
 8008b64:	6822      	ldr	r2, [r4, #0]
 8008b66:	07d2      	lsls	r2, r2, #31
 8008b68:	d501      	bpl.n	8008b6e <_printf_float+0x1b6>
 8008b6a:	3302      	adds	r3, #2
 8008b6c:	e7f4      	b.n	8008b58 <_printf_float+0x1a0>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e7f2      	b.n	8008b58 <_printf_float+0x1a0>
 8008b72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b78:	4299      	cmp	r1, r3
 8008b7a:	db05      	blt.n	8008b88 <_printf_float+0x1d0>
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	6121      	str	r1, [r4, #16]
 8008b80:	07d8      	lsls	r0, r3, #31
 8008b82:	d5ea      	bpl.n	8008b5a <_printf_float+0x1a2>
 8008b84:	1c4b      	adds	r3, r1, #1
 8008b86:	e7e7      	b.n	8008b58 <_printf_float+0x1a0>
 8008b88:	2900      	cmp	r1, #0
 8008b8a:	bfd4      	ite	le
 8008b8c:	f1c1 0202 	rsble	r2, r1, #2
 8008b90:	2201      	movgt	r2, #1
 8008b92:	4413      	add	r3, r2
 8008b94:	e7e0      	b.n	8008b58 <_printf_float+0x1a0>
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	055a      	lsls	r2, r3, #21
 8008b9a:	d407      	bmi.n	8008bac <_printf_float+0x1f4>
 8008b9c:	6923      	ldr	r3, [r4, #16]
 8008b9e:	4642      	mov	r2, r8
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	47b8      	blx	r7
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	d12c      	bne.n	8008c04 <_printf_float+0x24c>
 8008baa:	e764      	b.n	8008a76 <_printf_float+0xbe>
 8008bac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008bb0:	f240 80e0 	bls.w	8008d74 <_printf_float+0x3bc>
 8008bb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bb8:	2200      	movs	r2, #0
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f7f7 ff8c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d034      	beq.n	8008c2e <_printf_float+0x276>
 8008bc4:	4a37      	ldr	r2, [pc, #220]	; (8008ca4 <_printf_float+0x2ec>)
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	4631      	mov	r1, r6
 8008bca:	4628      	mov	r0, r5
 8008bcc:	47b8      	blx	r7
 8008bce:	3001      	adds	r0, #1
 8008bd0:	f43f af51 	beq.w	8008a76 <_printf_float+0xbe>
 8008bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	db02      	blt.n	8008be2 <_printf_float+0x22a>
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	07d8      	lsls	r0, r3, #31
 8008be0:	d510      	bpl.n	8008c04 <_printf_float+0x24c>
 8008be2:	ee18 3a10 	vmov	r3, s16
 8008be6:	4652      	mov	r2, sl
 8008be8:	4631      	mov	r1, r6
 8008bea:	4628      	mov	r0, r5
 8008bec:	47b8      	blx	r7
 8008bee:	3001      	adds	r0, #1
 8008bf0:	f43f af41 	beq.w	8008a76 <_printf_float+0xbe>
 8008bf4:	f04f 0800 	mov.w	r8, #0
 8008bf8:	f104 091a 	add.w	r9, r4, #26
 8008bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	4543      	cmp	r3, r8
 8008c02:	dc09      	bgt.n	8008c18 <_printf_float+0x260>
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	079b      	lsls	r3, r3, #30
 8008c08:	f100 8107 	bmi.w	8008e1a <_printf_float+0x462>
 8008c0c:	68e0      	ldr	r0, [r4, #12]
 8008c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c10:	4298      	cmp	r0, r3
 8008c12:	bfb8      	it	lt
 8008c14:	4618      	movlt	r0, r3
 8008c16:	e730      	b.n	8008a7a <_printf_float+0xc2>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	464a      	mov	r2, r9
 8008c1c:	4631      	mov	r1, r6
 8008c1e:	4628      	mov	r0, r5
 8008c20:	47b8      	blx	r7
 8008c22:	3001      	adds	r0, #1
 8008c24:	f43f af27 	beq.w	8008a76 <_printf_float+0xbe>
 8008c28:	f108 0801 	add.w	r8, r8, #1
 8008c2c:	e7e6      	b.n	8008bfc <_printf_float+0x244>
 8008c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	dc39      	bgt.n	8008ca8 <_printf_float+0x2f0>
 8008c34:	4a1b      	ldr	r2, [pc, #108]	; (8008ca4 <_printf_float+0x2ec>)
 8008c36:	2301      	movs	r3, #1
 8008c38:	4631      	mov	r1, r6
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	47b8      	blx	r7
 8008c3e:	3001      	adds	r0, #1
 8008c40:	f43f af19 	beq.w	8008a76 <_printf_float+0xbe>
 8008c44:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	d102      	bne.n	8008c52 <_printf_float+0x29a>
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	07d9      	lsls	r1, r3, #31
 8008c50:	d5d8      	bpl.n	8008c04 <_printf_float+0x24c>
 8008c52:	ee18 3a10 	vmov	r3, s16
 8008c56:	4652      	mov	r2, sl
 8008c58:	4631      	mov	r1, r6
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	47b8      	blx	r7
 8008c5e:	3001      	adds	r0, #1
 8008c60:	f43f af09 	beq.w	8008a76 <_printf_float+0xbe>
 8008c64:	f04f 0900 	mov.w	r9, #0
 8008c68:	f104 0a1a 	add.w	sl, r4, #26
 8008c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6e:	425b      	negs	r3, r3
 8008c70:	454b      	cmp	r3, r9
 8008c72:	dc01      	bgt.n	8008c78 <_printf_float+0x2c0>
 8008c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c76:	e792      	b.n	8008b9e <_printf_float+0x1e6>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	4652      	mov	r2, sl
 8008c7c:	4631      	mov	r1, r6
 8008c7e:	4628      	mov	r0, r5
 8008c80:	47b8      	blx	r7
 8008c82:	3001      	adds	r0, #1
 8008c84:	f43f aef7 	beq.w	8008a76 <_printf_float+0xbe>
 8008c88:	f109 0901 	add.w	r9, r9, #1
 8008c8c:	e7ee      	b.n	8008c6c <_printf_float+0x2b4>
 8008c8e:	bf00      	nop
 8008c90:	7fefffff 	.word	0x7fefffff
 8008c94:	0800b220 	.word	0x0800b220
 8008c98:	0800b224 	.word	0x0800b224
 8008c9c:	0800b228 	.word	0x0800b228
 8008ca0:	0800b22c 	.word	0x0800b22c
 8008ca4:	0800b230 	.word	0x0800b230
 8008ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008caa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cac:	429a      	cmp	r2, r3
 8008cae:	bfa8      	it	ge
 8008cb0:	461a      	movge	r2, r3
 8008cb2:	2a00      	cmp	r2, #0
 8008cb4:	4691      	mov	r9, r2
 8008cb6:	dc37      	bgt.n	8008d28 <_printf_float+0x370>
 8008cb8:	f04f 0b00 	mov.w	fp, #0
 8008cbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cc0:	f104 021a 	add.w	r2, r4, #26
 8008cc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cc6:	9305      	str	r3, [sp, #20]
 8008cc8:	eba3 0309 	sub.w	r3, r3, r9
 8008ccc:	455b      	cmp	r3, fp
 8008cce:	dc33      	bgt.n	8008d38 <_printf_float+0x380>
 8008cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	db3b      	blt.n	8008d50 <_printf_float+0x398>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	07da      	lsls	r2, r3, #31
 8008cdc:	d438      	bmi.n	8008d50 <_printf_float+0x398>
 8008cde:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008ce2:	eba2 0903 	sub.w	r9, r2, r3
 8008ce6:	9b05      	ldr	r3, [sp, #20]
 8008ce8:	1ad2      	subs	r2, r2, r3
 8008cea:	4591      	cmp	r9, r2
 8008cec:	bfa8      	it	ge
 8008cee:	4691      	movge	r9, r2
 8008cf0:	f1b9 0f00 	cmp.w	r9, #0
 8008cf4:	dc35      	bgt.n	8008d62 <_printf_float+0x3aa>
 8008cf6:	f04f 0800 	mov.w	r8, #0
 8008cfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cfe:	f104 0a1a 	add.w	sl, r4, #26
 8008d02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d06:	1a9b      	subs	r3, r3, r2
 8008d08:	eba3 0309 	sub.w	r3, r3, r9
 8008d0c:	4543      	cmp	r3, r8
 8008d0e:	f77f af79 	ble.w	8008c04 <_printf_float+0x24c>
 8008d12:	2301      	movs	r3, #1
 8008d14:	4652      	mov	r2, sl
 8008d16:	4631      	mov	r1, r6
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b8      	blx	r7
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	f43f aeaa 	beq.w	8008a76 <_printf_float+0xbe>
 8008d22:	f108 0801 	add.w	r8, r8, #1
 8008d26:	e7ec      	b.n	8008d02 <_printf_float+0x34a>
 8008d28:	4613      	mov	r3, r2
 8008d2a:	4631      	mov	r1, r6
 8008d2c:	4642      	mov	r2, r8
 8008d2e:	4628      	mov	r0, r5
 8008d30:	47b8      	blx	r7
 8008d32:	3001      	adds	r0, #1
 8008d34:	d1c0      	bne.n	8008cb8 <_printf_float+0x300>
 8008d36:	e69e      	b.n	8008a76 <_printf_float+0xbe>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	9205      	str	r2, [sp, #20]
 8008d40:	47b8      	blx	r7
 8008d42:	3001      	adds	r0, #1
 8008d44:	f43f ae97 	beq.w	8008a76 <_printf_float+0xbe>
 8008d48:	9a05      	ldr	r2, [sp, #20]
 8008d4a:	f10b 0b01 	add.w	fp, fp, #1
 8008d4e:	e7b9      	b.n	8008cc4 <_printf_float+0x30c>
 8008d50:	ee18 3a10 	vmov	r3, s16
 8008d54:	4652      	mov	r2, sl
 8008d56:	4631      	mov	r1, r6
 8008d58:	4628      	mov	r0, r5
 8008d5a:	47b8      	blx	r7
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	d1be      	bne.n	8008cde <_printf_float+0x326>
 8008d60:	e689      	b.n	8008a76 <_printf_float+0xbe>
 8008d62:	9a05      	ldr	r2, [sp, #20]
 8008d64:	464b      	mov	r3, r9
 8008d66:	4442      	add	r2, r8
 8008d68:	4631      	mov	r1, r6
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	47b8      	blx	r7
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d1c1      	bne.n	8008cf6 <_printf_float+0x33e>
 8008d72:	e680      	b.n	8008a76 <_printf_float+0xbe>
 8008d74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d76:	2a01      	cmp	r2, #1
 8008d78:	dc01      	bgt.n	8008d7e <_printf_float+0x3c6>
 8008d7a:	07db      	lsls	r3, r3, #31
 8008d7c:	d53a      	bpl.n	8008df4 <_printf_float+0x43c>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	4642      	mov	r2, r8
 8008d82:	4631      	mov	r1, r6
 8008d84:	4628      	mov	r0, r5
 8008d86:	47b8      	blx	r7
 8008d88:	3001      	adds	r0, #1
 8008d8a:	f43f ae74 	beq.w	8008a76 <_printf_float+0xbe>
 8008d8e:	ee18 3a10 	vmov	r3, s16
 8008d92:	4652      	mov	r2, sl
 8008d94:	4631      	mov	r1, r6
 8008d96:	4628      	mov	r0, r5
 8008d98:	47b8      	blx	r7
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	f43f ae6b 	beq.w	8008a76 <_printf_float+0xbe>
 8008da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008da4:	2200      	movs	r2, #0
 8008da6:	2300      	movs	r3, #0
 8008da8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008dac:	f7f7 fe94 	bl	8000ad8 <__aeabi_dcmpeq>
 8008db0:	b9d8      	cbnz	r0, 8008dea <_printf_float+0x432>
 8008db2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008db6:	f108 0201 	add.w	r2, r8, #1
 8008dba:	4631      	mov	r1, r6
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	47b8      	blx	r7
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d10e      	bne.n	8008de2 <_printf_float+0x42a>
 8008dc4:	e657      	b.n	8008a76 <_printf_float+0xbe>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4652      	mov	r2, sl
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b8      	blx	r7
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	f43f ae50 	beq.w	8008a76 <_printf_float+0xbe>
 8008dd6:	f108 0801 	add.w	r8, r8, #1
 8008dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	4543      	cmp	r3, r8
 8008de0:	dcf1      	bgt.n	8008dc6 <_printf_float+0x40e>
 8008de2:	464b      	mov	r3, r9
 8008de4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008de8:	e6da      	b.n	8008ba0 <_printf_float+0x1e8>
 8008dea:	f04f 0800 	mov.w	r8, #0
 8008dee:	f104 0a1a 	add.w	sl, r4, #26
 8008df2:	e7f2      	b.n	8008dda <_printf_float+0x422>
 8008df4:	2301      	movs	r3, #1
 8008df6:	4642      	mov	r2, r8
 8008df8:	e7df      	b.n	8008dba <_printf_float+0x402>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	464a      	mov	r2, r9
 8008dfe:	4631      	mov	r1, r6
 8008e00:	4628      	mov	r0, r5
 8008e02:	47b8      	blx	r7
 8008e04:	3001      	adds	r0, #1
 8008e06:	f43f ae36 	beq.w	8008a76 <_printf_float+0xbe>
 8008e0a:	f108 0801 	add.w	r8, r8, #1
 8008e0e:	68e3      	ldr	r3, [r4, #12]
 8008e10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e12:	1a5b      	subs	r3, r3, r1
 8008e14:	4543      	cmp	r3, r8
 8008e16:	dcf0      	bgt.n	8008dfa <_printf_float+0x442>
 8008e18:	e6f8      	b.n	8008c0c <_printf_float+0x254>
 8008e1a:	f04f 0800 	mov.w	r8, #0
 8008e1e:	f104 0919 	add.w	r9, r4, #25
 8008e22:	e7f4      	b.n	8008e0e <_printf_float+0x456>

08008e24 <_printf_common>:
 8008e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	4616      	mov	r6, r2
 8008e2a:	4699      	mov	r9, r3
 8008e2c:	688a      	ldr	r2, [r1, #8]
 8008e2e:	690b      	ldr	r3, [r1, #16]
 8008e30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e34:	4293      	cmp	r3, r2
 8008e36:	bfb8      	it	lt
 8008e38:	4613      	movlt	r3, r2
 8008e3a:	6033      	str	r3, [r6, #0]
 8008e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e40:	4607      	mov	r7, r0
 8008e42:	460c      	mov	r4, r1
 8008e44:	b10a      	cbz	r2, 8008e4a <_printf_common+0x26>
 8008e46:	3301      	adds	r3, #1
 8008e48:	6033      	str	r3, [r6, #0]
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	0699      	lsls	r1, r3, #26
 8008e4e:	bf42      	ittt	mi
 8008e50:	6833      	ldrmi	r3, [r6, #0]
 8008e52:	3302      	addmi	r3, #2
 8008e54:	6033      	strmi	r3, [r6, #0]
 8008e56:	6825      	ldr	r5, [r4, #0]
 8008e58:	f015 0506 	ands.w	r5, r5, #6
 8008e5c:	d106      	bne.n	8008e6c <_printf_common+0x48>
 8008e5e:	f104 0a19 	add.w	sl, r4, #25
 8008e62:	68e3      	ldr	r3, [r4, #12]
 8008e64:	6832      	ldr	r2, [r6, #0]
 8008e66:	1a9b      	subs	r3, r3, r2
 8008e68:	42ab      	cmp	r3, r5
 8008e6a:	dc26      	bgt.n	8008eba <_printf_common+0x96>
 8008e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e70:	1e13      	subs	r3, r2, #0
 8008e72:	6822      	ldr	r2, [r4, #0]
 8008e74:	bf18      	it	ne
 8008e76:	2301      	movne	r3, #1
 8008e78:	0692      	lsls	r2, r2, #26
 8008e7a:	d42b      	bmi.n	8008ed4 <_printf_common+0xb0>
 8008e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e80:	4649      	mov	r1, r9
 8008e82:	4638      	mov	r0, r7
 8008e84:	47c0      	blx	r8
 8008e86:	3001      	adds	r0, #1
 8008e88:	d01e      	beq.n	8008ec8 <_printf_common+0xa4>
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	6922      	ldr	r2, [r4, #16]
 8008e8e:	f003 0306 	and.w	r3, r3, #6
 8008e92:	2b04      	cmp	r3, #4
 8008e94:	bf02      	ittt	eq
 8008e96:	68e5      	ldreq	r5, [r4, #12]
 8008e98:	6833      	ldreq	r3, [r6, #0]
 8008e9a:	1aed      	subeq	r5, r5, r3
 8008e9c:	68a3      	ldr	r3, [r4, #8]
 8008e9e:	bf0c      	ite	eq
 8008ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ea4:	2500      	movne	r5, #0
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	bfc4      	itt	gt
 8008eaa:	1a9b      	subgt	r3, r3, r2
 8008eac:	18ed      	addgt	r5, r5, r3
 8008eae:	2600      	movs	r6, #0
 8008eb0:	341a      	adds	r4, #26
 8008eb2:	42b5      	cmp	r5, r6
 8008eb4:	d11a      	bne.n	8008eec <_printf_common+0xc8>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	e008      	b.n	8008ecc <_printf_common+0xa8>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	4652      	mov	r2, sl
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	47c0      	blx	r8
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d103      	bne.n	8008ed0 <_printf_common+0xac>
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed0:	3501      	adds	r5, #1
 8008ed2:	e7c6      	b.n	8008e62 <_printf_common+0x3e>
 8008ed4:	18e1      	adds	r1, r4, r3
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	2030      	movs	r0, #48	; 0x30
 8008eda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ede:	4422      	add	r2, r4
 8008ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ee8:	3302      	adds	r3, #2
 8008eea:	e7c7      	b.n	8008e7c <_printf_common+0x58>
 8008eec:	2301      	movs	r3, #1
 8008eee:	4622      	mov	r2, r4
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	47c0      	blx	r8
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	d0e6      	beq.n	8008ec8 <_printf_common+0xa4>
 8008efa:	3601      	adds	r6, #1
 8008efc:	e7d9      	b.n	8008eb2 <_printf_common+0x8e>
	...

08008f00 <_printf_i>:
 8008f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f04:	7e0f      	ldrb	r7, [r1, #24]
 8008f06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f08:	2f78      	cmp	r7, #120	; 0x78
 8008f0a:	4691      	mov	r9, r2
 8008f0c:	4680      	mov	r8, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	469a      	mov	sl, r3
 8008f12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f16:	d807      	bhi.n	8008f28 <_printf_i+0x28>
 8008f18:	2f62      	cmp	r7, #98	; 0x62
 8008f1a:	d80a      	bhi.n	8008f32 <_printf_i+0x32>
 8008f1c:	2f00      	cmp	r7, #0
 8008f1e:	f000 80d4 	beq.w	80090ca <_printf_i+0x1ca>
 8008f22:	2f58      	cmp	r7, #88	; 0x58
 8008f24:	f000 80c0 	beq.w	80090a8 <_printf_i+0x1a8>
 8008f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f30:	e03a      	b.n	8008fa8 <_printf_i+0xa8>
 8008f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f36:	2b15      	cmp	r3, #21
 8008f38:	d8f6      	bhi.n	8008f28 <_printf_i+0x28>
 8008f3a:	a101      	add	r1, pc, #4	; (adr r1, 8008f40 <_printf_i+0x40>)
 8008f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f40:	08008f99 	.word	0x08008f99
 8008f44:	08008fad 	.word	0x08008fad
 8008f48:	08008f29 	.word	0x08008f29
 8008f4c:	08008f29 	.word	0x08008f29
 8008f50:	08008f29 	.word	0x08008f29
 8008f54:	08008f29 	.word	0x08008f29
 8008f58:	08008fad 	.word	0x08008fad
 8008f5c:	08008f29 	.word	0x08008f29
 8008f60:	08008f29 	.word	0x08008f29
 8008f64:	08008f29 	.word	0x08008f29
 8008f68:	08008f29 	.word	0x08008f29
 8008f6c:	080090b1 	.word	0x080090b1
 8008f70:	08008fd9 	.word	0x08008fd9
 8008f74:	0800906b 	.word	0x0800906b
 8008f78:	08008f29 	.word	0x08008f29
 8008f7c:	08008f29 	.word	0x08008f29
 8008f80:	080090d3 	.word	0x080090d3
 8008f84:	08008f29 	.word	0x08008f29
 8008f88:	08008fd9 	.word	0x08008fd9
 8008f8c:	08008f29 	.word	0x08008f29
 8008f90:	08008f29 	.word	0x08008f29
 8008f94:	08009073 	.word	0x08009073
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	1d1a      	adds	r2, r3, #4
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	602a      	str	r2, [r5, #0]
 8008fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e09f      	b.n	80090ec <_printf_i+0x1ec>
 8008fac:	6820      	ldr	r0, [r4, #0]
 8008fae:	682b      	ldr	r3, [r5, #0]
 8008fb0:	0607      	lsls	r7, r0, #24
 8008fb2:	f103 0104 	add.w	r1, r3, #4
 8008fb6:	6029      	str	r1, [r5, #0]
 8008fb8:	d501      	bpl.n	8008fbe <_printf_i+0xbe>
 8008fba:	681e      	ldr	r6, [r3, #0]
 8008fbc:	e003      	b.n	8008fc6 <_printf_i+0xc6>
 8008fbe:	0646      	lsls	r6, r0, #25
 8008fc0:	d5fb      	bpl.n	8008fba <_printf_i+0xba>
 8008fc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008fc6:	2e00      	cmp	r6, #0
 8008fc8:	da03      	bge.n	8008fd2 <_printf_i+0xd2>
 8008fca:	232d      	movs	r3, #45	; 0x2d
 8008fcc:	4276      	negs	r6, r6
 8008fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fd2:	485a      	ldr	r0, [pc, #360]	; (800913c <_printf_i+0x23c>)
 8008fd4:	230a      	movs	r3, #10
 8008fd6:	e012      	b.n	8008ffe <_printf_i+0xfe>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	6820      	ldr	r0, [r4, #0]
 8008fdc:	1d19      	adds	r1, r3, #4
 8008fde:	6029      	str	r1, [r5, #0]
 8008fe0:	0605      	lsls	r5, r0, #24
 8008fe2:	d501      	bpl.n	8008fe8 <_printf_i+0xe8>
 8008fe4:	681e      	ldr	r6, [r3, #0]
 8008fe6:	e002      	b.n	8008fee <_printf_i+0xee>
 8008fe8:	0641      	lsls	r1, r0, #25
 8008fea:	d5fb      	bpl.n	8008fe4 <_printf_i+0xe4>
 8008fec:	881e      	ldrh	r6, [r3, #0]
 8008fee:	4853      	ldr	r0, [pc, #332]	; (800913c <_printf_i+0x23c>)
 8008ff0:	2f6f      	cmp	r7, #111	; 0x6f
 8008ff2:	bf0c      	ite	eq
 8008ff4:	2308      	moveq	r3, #8
 8008ff6:	230a      	movne	r3, #10
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ffe:	6865      	ldr	r5, [r4, #4]
 8009000:	60a5      	str	r5, [r4, #8]
 8009002:	2d00      	cmp	r5, #0
 8009004:	bfa2      	ittt	ge
 8009006:	6821      	ldrge	r1, [r4, #0]
 8009008:	f021 0104 	bicge.w	r1, r1, #4
 800900c:	6021      	strge	r1, [r4, #0]
 800900e:	b90e      	cbnz	r6, 8009014 <_printf_i+0x114>
 8009010:	2d00      	cmp	r5, #0
 8009012:	d04b      	beq.n	80090ac <_printf_i+0x1ac>
 8009014:	4615      	mov	r5, r2
 8009016:	fbb6 f1f3 	udiv	r1, r6, r3
 800901a:	fb03 6711 	mls	r7, r3, r1, r6
 800901e:	5dc7      	ldrb	r7, [r0, r7]
 8009020:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009024:	4637      	mov	r7, r6
 8009026:	42bb      	cmp	r3, r7
 8009028:	460e      	mov	r6, r1
 800902a:	d9f4      	bls.n	8009016 <_printf_i+0x116>
 800902c:	2b08      	cmp	r3, #8
 800902e:	d10b      	bne.n	8009048 <_printf_i+0x148>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	07de      	lsls	r6, r3, #31
 8009034:	d508      	bpl.n	8009048 <_printf_i+0x148>
 8009036:	6923      	ldr	r3, [r4, #16]
 8009038:	6861      	ldr	r1, [r4, #4]
 800903a:	4299      	cmp	r1, r3
 800903c:	bfde      	ittt	le
 800903e:	2330      	movle	r3, #48	; 0x30
 8009040:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009044:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009048:	1b52      	subs	r2, r2, r5
 800904a:	6122      	str	r2, [r4, #16]
 800904c:	f8cd a000 	str.w	sl, [sp]
 8009050:	464b      	mov	r3, r9
 8009052:	aa03      	add	r2, sp, #12
 8009054:	4621      	mov	r1, r4
 8009056:	4640      	mov	r0, r8
 8009058:	f7ff fee4 	bl	8008e24 <_printf_common>
 800905c:	3001      	adds	r0, #1
 800905e:	d14a      	bne.n	80090f6 <_printf_i+0x1f6>
 8009060:	f04f 30ff 	mov.w	r0, #4294967295
 8009064:	b004      	add	sp, #16
 8009066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	f043 0320 	orr.w	r3, r3, #32
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	4833      	ldr	r0, [pc, #204]	; (8009140 <_printf_i+0x240>)
 8009074:	2778      	movs	r7, #120	; 0x78
 8009076:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	6829      	ldr	r1, [r5, #0]
 800907e:	061f      	lsls	r7, r3, #24
 8009080:	f851 6b04 	ldr.w	r6, [r1], #4
 8009084:	d402      	bmi.n	800908c <_printf_i+0x18c>
 8009086:	065f      	lsls	r7, r3, #25
 8009088:	bf48      	it	mi
 800908a:	b2b6      	uxthmi	r6, r6
 800908c:	07df      	lsls	r7, r3, #31
 800908e:	bf48      	it	mi
 8009090:	f043 0320 	orrmi.w	r3, r3, #32
 8009094:	6029      	str	r1, [r5, #0]
 8009096:	bf48      	it	mi
 8009098:	6023      	strmi	r3, [r4, #0]
 800909a:	b91e      	cbnz	r6, 80090a4 <_printf_i+0x1a4>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	f023 0320 	bic.w	r3, r3, #32
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	2310      	movs	r3, #16
 80090a6:	e7a7      	b.n	8008ff8 <_printf_i+0xf8>
 80090a8:	4824      	ldr	r0, [pc, #144]	; (800913c <_printf_i+0x23c>)
 80090aa:	e7e4      	b.n	8009076 <_printf_i+0x176>
 80090ac:	4615      	mov	r5, r2
 80090ae:	e7bd      	b.n	800902c <_printf_i+0x12c>
 80090b0:	682b      	ldr	r3, [r5, #0]
 80090b2:	6826      	ldr	r6, [r4, #0]
 80090b4:	6961      	ldr	r1, [r4, #20]
 80090b6:	1d18      	adds	r0, r3, #4
 80090b8:	6028      	str	r0, [r5, #0]
 80090ba:	0635      	lsls	r5, r6, #24
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	d501      	bpl.n	80090c4 <_printf_i+0x1c4>
 80090c0:	6019      	str	r1, [r3, #0]
 80090c2:	e002      	b.n	80090ca <_printf_i+0x1ca>
 80090c4:	0670      	lsls	r0, r6, #25
 80090c6:	d5fb      	bpl.n	80090c0 <_printf_i+0x1c0>
 80090c8:	8019      	strh	r1, [r3, #0]
 80090ca:	2300      	movs	r3, #0
 80090cc:	6123      	str	r3, [r4, #16]
 80090ce:	4615      	mov	r5, r2
 80090d0:	e7bc      	b.n	800904c <_printf_i+0x14c>
 80090d2:	682b      	ldr	r3, [r5, #0]
 80090d4:	1d1a      	adds	r2, r3, #4
 80090d6:	602a      	str	r2, [r5, #0]
 80090d8:	681d      	ldr	r5, [r3, #0]
 80090da:	6862      	ldr	r2, [r4, #4]
 80090dc:	2100      	movs	r1, #0
 80090de:	4628      	mov	r0, r5
 80090e0:	f7f7 f87e 	bl	80001e0 <memchr>
 80090e4:	b108      	cbz	r0, 80090ea <_printf_i+0x1ea>
 80090e6:	1b40      	subs	r0, r0, r5
 80090e8:	6060      	str	r0, [r4, #4]
 80090ea:	6863      	ldr	r3, [r4, #4]
 80090ec:	6123      	str	r3, [r4, #16]
 80090ee:	2300      	movs	r3, #0
 80090f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090f4:	e7aa      	b.n	800904c <_printf_i+0x14c>
 80090f6:	6923      	ldr	r3, [r4, #16]
 80090f8:	462a      	mov	r2, r5
 80090fa:	4649      	mov	r1, r9
 80090fc:	4640      	mov	r0, r8
 80090fe:	47d0      	blx	sl
 8009100:	3001      	adds	r0, #1
 8009102:	d0ad      	beq.n	8009060 <_printf_i+0x160>
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	079b      	lsls	r3, r3, #30
 8009108:	d413      	bmi.n	8009132 <_printf_i+0x232>
 800910a:	68e0      	ldr	r0, [r4, #12]
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	4298      	cmp	r0, r3
 8009110:	bfb8      	it	lt
 8009112:	4618      	movlt	r0, r3
 8009114:	e7a6      	b.n	8009064 <_printf_i+0x164>
 8009116:	2301      	movs	r3, #1
 8009118:	4632      	mov	r2, r6
 800911a:	4649      	mov	r1, r9
 800911c:	4640      	mov	r0, r8
 800911e:	47d0      	blx	sl
 8009120:	3001      	adds	r0, #1
 8009122:	d09d      	beq.n	8009060 <_printf_i+0x160>
 8009124:	3501      	adds	r5, #1
 8009126:	68e3      	ldr	r3, [r4, #12]
 8009128:	9903      	ldr	r1, [sp, #12]
 800912a:	1a5b      	subs	r3, r3, r1
 800912c:	42ab      	cmp	r3, r5
 800912e:	dcf2      	bgt.n	8009116 <_printf_i+0x216>
 8009130:	e7eb      	b.n	800910a <_printf_i+0x20a>
 8009132:	2500      	movs	r5, #0
 8009134:	f104 0619 	add.w	r6, r4, #25
 8009138:	e7f5      	b.n	8009126 <_printf_i+0x226>
 800913a:	bf00      	nop
 800913c:	0800b232 	.word	0x0800b232
 8009140:	0800b243 	.word	0x0800b243

08009144 <std>:
 8009144:	2300      	movs	r3, #0
 8009146:	b510      	push	{r4, lr}
 8009148:	4604      	mov	r4, r0
 800914a:	e9c0 3300 	strd	r3, r3, [r0]
 800914e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009152:	6083      	str	r3, [r0, #8]
 8009154:	8181      	strh	r1, [r0, #12]
 8009156:	6643      	str	r3, [r0, #100]	; 0x64
 8009158:	81c2      	strh	r2, [r0, #14]
 800915a:	6183      	str	r3, [r0, #24]
 800915c:	4619      	mov	r1, r3
 800915e:	2208      	movs	r2, #8
 8009160:	305c      	adds	r0, #92	; 0x5c
 8009162:	f000 f8f4 	bl	800934e <memset>
 8009166:	4b0d      	ldr	r3, [pc, #52]	; (800919c <std+0x58>)
 8009168:	6263      	str	r3, [r4, #36]	; 0x24
 800916a:	4b0d      	ldr	r3, [pc, #52]	; (80091a0 <std+0x5c>)
 800916c:	62a3      	str	r3, [r4, #40]	; 0x28
 800916e:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <std+0x60>)
 8009170:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009172:	4b0d      	ldr	r3, [pc, #52]	; (80091a8 <std+0x64>)
 8009174:	6323      	str	r3, [r4, #48]	; 0x30
 8009176:	4b0d      	ldr	r3, [pc, #52]	; (80091ac <std+0x68>)
 8009178:	6224      	str	r4, [r4, #32]
 800917a:	429c      	cmp	r4, r3
 800917c:	d006      	beq.n	800918c <std+0x48>
 800917e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009182:	4294      	cmp	r4, r2
 8009184:	d002      	beq.n	800918c <std+0x48>
 8009186:	33d0      	adds	r3, #208	; 0xd0
 8009188:	429c      	cmp	r4, r3
 800918a:	d105      	bne.n	8009198 <std+0x54>
 800918c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009194:	f000 b958 	b.w	8009448 <__retarget_lock_init_recursive>
 8009198:	bd10      	pop	{r4, pc}
 800919a:	bf00      	nop
 800919c:	080092c9 	.word	0x080092c9
 80091a0:	080092eb 	.word	0x080092eb
 80091a4:	08009323 	.word	0x08009323
 80091a8:	08009347 	.word	0x08009347
 80091ac:	20000670 	.word	0x20000670

080091b0 <stdio_exit_handler>:
 80091b0:	4a02      	ldr	r2, [pc, #8]	; (80091bc <stdio_exit_handler+0xc>)
 80091b2:	4903      	ldr	r1, [pc, #12]	; (80091c0 <stdio_exit_handler+0x10>)
 80091b4:	4803      	ldr	r0, [pc, #12]	; (80091c4 <stdio_exit_handler+0x14>)
 80091b6:	f000 b869 	b.w	800928c <_fwalk_sglue>
 80091ba:	bf00      	nop
 80091bc:	200000a8 	.word	0x200000a8
 80091c0:	0800ab49 	.word	0x0800ab49
 80091c4:	200000b4 	.word	0x200000b4

080091c8 <cleanup_stdio>:
 80091c8:	6841      	ldr	r1, [r0, #4]
 80091ca:	4b0c      	ldr	r3, [pc, #48]	; (80091fc <cleanup_stdio+0x34>)
 80091cc:	4299      	cmp	r1, r3
 80091ce:	b510      	push	{r4, lr}
 80091d0:	4604      	mov	r4, r0
 80091d2:	d001      	beq.n	80091d8 <cleanup_stdio+0x10>
 80091d4:	f001 fcb8 	bl	800ab48 <_fflush_r>
 80091d8:	68a1      	ldr	r1, [r4, #8]
 80091da:	4b09      	ldr	r3, [pc, #36]	; (8009200 <cleanup_stdio+0x38>)
 80091dc:	4299      	cmp	r1, r3
 80091de:	d002      	beq.n	80091e6 <cleanup_stdio+0x1e>
 80091e0:	4620      	mov	r0, r4
 80091e2:	f001 fcb1 	bl	800ab48 <_fflush_r>
 80091e6:	68e1      	ldr	r1, [r4, #12]
 80091e8:	4b06      	ldr	r3, [pc, #24]	; (8009204 <cleanup_stdio+0x3c>)
 80091ea:	4299      	cmp	r1, r3
 80091ec:	d004      	beq.n	80091f8 <cleanup_stdio+0x30>
 80091ee:	4620      	mov	r0, r4
 80091f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f4:	f001 bca8 	b.w	800ab48 <_fflush_r>
 80091f8:	bd10      	pop	{r4, pc}
 80091fa:	bf00      	nop
 80091fc:	20000670 	.word	0x20000670
 8009200:	200006d8 	.word	0x200006d8
 8009204:	20000740 	.word	0x20000740

08009208 <global_stdio_init.part.0>:
 8009208:	b510      	push	{r4, lr}
 800920a:	4b0b      	ldr	r3, [pc, #44]	; (8009238 <global_stdio_init.part.0+0x30>)
 800920c:	4c0b      	ldr	r4, [pc, #44]	; (800923c <global_stdio_init.part.0+0x34>)
 800920e:	4a0c      	ldr	r2, [pc, #48]	; (8009240 <global_stdio_init.part.0+0x38>)
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	4620      	mov	r0, r4
 8009214:	2200      	movs	r2, #0
 8009216:	2104      	movs	r1, #4
 8009218:	f7ff ff94 	bl	8009144 <std>
 800921c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009220:	2201      	movs	r2, #1
 8009222:	2109      	movs	r1, #9
 8009224:	f7ff ff8e 	bl	8009144 <std>
 8009228:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800922c:	2202      	movs	r2, #2
 800922e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009232:	2112      	movs	r1, #18
 8009234:	f7ff bf86 	b.w	8009144 <std>
 8009238:	200007a8 	.word	0x200007a8
 800923c:	20000670 	.word	0x20000670
 8009240:	080091b1 	.word	0x080091b1

08009244 <__sfp_lock_acquire>:
 8009244:	4801      	ldr	r0, [pc, #4]	; (800924c <__sfp_lock_acquire+0x8>)
 8009246:	f000 b900 	b.w	800944a <__retarget_lock_acquire_recursive>
 800924a:	bf00      	nop
 800924c:	200007b1 	.word	0x200007b1

08009250 <__sfp_lock_release>:
 8009250:	4801      	ldr	r0, [pc, #4]	; (8009258 <__sfp_lock_release+0x8>)
 8009252:	f000 b8fb 	b.w	800944c <__retarget_lock_release_recursive>
 8009256:	bf00      	nop
 8009258:	200007b1 	.word	0x200007b1

0800925c <__sinit>:
 800925c:	b510      	push	{r4, lr}
 800925e:	4604      	mov	r4, r0
 8009260:	f7ff fff0 	bl	8009244 <__sfp_lock_acquire>
 8009264:	6a23      	ldr	r3, [r4, #32]
 8009266:	b11b      	cbz	r3, 8009270 <__sinit+0x14>
 8009268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800926c:	f7ff bff0 	b.w	8009250 <__sfp_lock_release>
 8009270:	4b04      	ldr	r3, [pc, #16]	; (8009284 <__sinit+0x28>)
 8009272:	6223      	str	r3, [r4, #32]
 8009274:	4b04      	ldr	r3, [pc, #16]	; (8009288 <__sinit+0x2c>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1f5      	bne.n	8009268 <__sinit+0xc>
 800927c:	f7ff ffc4 	bl	8009208 <global_stdio_init.part.0>
 8009280:	e7f2      	b.n	8009268 <__sinit+0xc>
 8009282:	bf00      	nop
 8009284:	080091c9 	.word	0x080091c9
 8009288:	200007a8 	.word	0x200007a8

0800928c <_fwalk_sglue>:
 800928c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009290:	4607      	mov	r7, r0
 8009292:	4688      	mov	r8, r1
 8009294:	4614      	mov	r4, r2
 8009296:	2600      	movs	r6, #0
 8009298:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800929c:	f1b9 0901 	subs.w	r9, r9, #1
 80092a0:	d505      	bpl.n	80092ae <_fwalk_sglue+0x22>
 80092a2:	6824      	ldr	r4, [r4, #0]
 80092a4:	2c00      	cmp	r4, #0
 80092a6:	d1f7      	bne.n	8009298 <_fwalk_sglue+0xc>
 80092a8:	4630      	mov	r0, r6
 80092aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ae:	89ab      	ldrh	r3, [r5, #12]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d907      	bls.n	80092c4 <_fwalk_sglue+0x38>
 80092b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092b8:	3301      	adds	r3, #1
 80092ba:	d003      	beq.n	80092c4 <_fwalk_sglue+0x38>
 80092bc:	4629      	mov	r1, r5
 80092be:	4638      	mov	r0, r7
 80092c0:	47c0      	blx	r8
 80092c2:	4306      	orrs	r6, r0
 80092c4:	3568      	adds	r5, #104	; 0x68
 80092c6:	e7e9      	b.n	800929c <_fwalk_sglue+0x10>

080092c8 <__sread>:
 80092c8:	b510      	push	{r4, lr}
 80092ca:	460c      	mov	r4, r1
 80092cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d0:	f000 f86c 	bl	80093ac <_read_r>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	bfab      	itete	ge
 80092d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092da:	89a3      	ldrhlt	r3, [r4, #12]
 80092dc:	181b      	addge	r3, r3, r0
 80092de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092e2:	bfac      	ite	ge
 80092e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80092e6:	81a3      	strhlt	r3, [r4, #12]
 80092e8:	bd10      	pop	{r4, pc}

080092ea <__swrite>:
 80092ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ee:	461f      	mov	r7, r3
 80092f0:	898b      	ldrh	r3, [r1, #12]
 80092f2:	05db      	lsls	r3, r3, #23
 80092f4:	4605      	mov	r5, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	4616      	mov	r6, r2
 80092fa:	d505      	bpl.n	8009308 <__swrite+0x1e>
 80092fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009300:	2302      	movs	r3, #2
 8009302:	2200      	movs	r2, #0
 8009304:	f000 f840 	bl	8009388 <_lseek_r>
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800930e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009312:	81a3      	strh	r3, [r4, #12]
 8009314:	4632      	mov	r2, r6
 8009316:	463b      	mov	r3, r7
 8009318:	4628      	mov	r0, r5
 800931a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800931e:	f000 b857 	b.w	80093d0 <_write_r>

08009322 <__sseek>:
 8009322:	b510      	push	{r4, lr}
 8009324:	460c      	mov	r4, r1
 8009326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800932a:	f000 f82d 	bl	8009388 <_lseek_r>
 800932e:	1c43      	adds	r3, r0, #1
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	bf15      	itete	ne
 8009334:	6560      	strne	r0, [r4, #84]	; 0x54
 8009336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800933a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800933e:	81a3      	strheq	r3, [r4, #12]
 8009340:	bf18      	it	ne
 8009342:	81a3      	strhne	r3, [r4, #12]
 8009344:	bd10      	pop	{r4, pc}

08009346 <__sclose>:
 8009346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800934a:	f000 b80d 	b.w	8009368 <_close_r>

0800934e <memset>:
 800934e:	4402      	add	r2, r0
 8009350:	4603      	mov	r3, r0
 8009352:	4293      	cmp	r3, r2
 8009354:	d100      	bne.n	8009358 <memset+0xa>
 8009356:	4770      	bx	lr
 8009358:	f803 1b01 	strb.w	r1, [r3], #1
 800935c:	e7f9      	b.n	8009352 <memset+0x4>
	...

08009360 <_localeconv_r>:
 8009360:	4800      	ldr	r0, [pc, #0]	; (8009364 <_localeconv_r+0x4>)
 8009362:	4770      	bx	lr
 8009364:	200001f4 	.word	0x200001f4

08009368 <_close_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4d06      	ldr	r5, [pc, #24]	; (8009384 <_close_r+0x1c>)
 800936c:	2300      	movs	r3, #0
 800936e:	4604      	mov	r4, r0
 8009370:	4608      	mov	r0, r1
 8009372:	602b      	str	r3, [r5, #0]
 8009374:	f7f8 fe6d 	bl	8002052 <_close>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_close_r+0x1a>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_close_r+0x1a>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	200007ac 	.word	0x200007ac

08009388 <_lseek_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d07      	ldr	r5, [pc, #28]	; (80093a8 <_lseek_r+0x20>)
 800938c:	4604      	mov	r4, r0
 800938e:	4608      	mov	r0, r1
 8009390:	4611      	mov	r1, r2
 8009392:	2200      	movs	r2, #0
 8009394:	602a      	str	r2, [r5, #0]
 8009396:	461a      	mov	r2, r3
 8009398:	f7f8 fe82 	bl	80020a0 <_lseek>
 800939c:	1c43      	adds	r3, r0, #1
 800939e:	d102      	bne.n	80093a6 <_lseek_r+0x1e>
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	b103      	cbz	r3, 80093a6 <_lseek_r+0x1e>
 80093a4:	6023      	str	r3, [r4, #0]
 80093a6:	bd38      	pop	{r3, r4, r5, pc}
 80093a8:	200007ac 	.word	0x200007ac

080093ac <_read_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	4d07      	ldr	r5, [pc, #28]	; (80093cc <_read_r+0x20>)
 80093b0:	4604      	mov	r4, r0
 80093b2:	4608      	mov	r0, r1
 80093b4:	4611      	mov	r1, r2
 80093b6:	2200      	movs	r2, #0
 80093b8:	602a      	str	r2, [r5, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	f7f8 fe10 	bl	8001fe0 <_read>
 80093c0:	1c43      	adds	r3, r0, #1
 80093c2:	d102      	bne.n	80093ca <_read_r+0x1e>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	b103      	cbz	r3, 80093ca <_read_r+0x1e>
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	bd38      	pop	{r3, r4, r5, pc}
 80093cc:	200007ac 	.word	0x200007ac

080093d0 <_write_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	4d07      	ldr	r5, [pc, #28]	; (80093f0 <_write_r+0x20>)
 80093d4:	4604      	mov	r4, r0
 80093d6:	4608      	mov	r0, r1
 80093d8:	4611      	mov	r1, r2
 80093da:	2200      	movs	r2, #0
 80093dc:	602a      	str	r2, [r5, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	f7f8 fe1b 	bl	800201a <_write>
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	d102      	bne.n	80093ee <_write_r+0x1e>
 80093e8:	682b      	ldr	r3, [r5, #0]
 80093ea:	b103      	cbz	r3, 80093ee <_write_r+0x1e>
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	bd38      	pop	{r3, r4, r5, pc}
 80093f0:	200007ac 	.word	0x200007ac

080093f4 <__errno>:
 80093f4:	4b01      	ldr	r3, [pc, #4]	; (80093fc <__errno+0x8>)
 80093f6:	6818      	ldr	r0, [r3, #0]
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	20000100 	.word	0x20000100

08009400 <__libc_init_array>:
 8009400:	b570      	push	{r4, r5, r6, lr}
 8009402:	4d0d      	ldr	r5, [pc, #52]	; (8009438 <__libc_init_array+0x38>)
 8009404:	4c0d      	ldr	r4, [pc, #52]	; (800943c <__libc_init_array+0x3c>)
 8009406:	1b64      	subs	r4, r4, r5
 8009408:	10a4      	asrs	r4, r4, #2
 800940a:	2600      	movs	r6, #0
 800940c:	42a6      	cmp	r6, r4
 800940e:	d109      	bne.n	8009424 <__libc_init_array+0x24>
 8009410:	4d0b      	ldr	r5, [pc, #44]	; (8009440 <__libc_init_array+0x40>)
 8009412:	4c0c      	ldr	r4, [pc, #48]	; (8009444 <__libc_init_array+0x44>)
 8009414:	f001 feec 	bl	800b1f0 <_init>
 8009418:	1b64      	subs	r4, r4, r5
 800941a:	10a4      	asrs	r4, r4, #2
 800941c:	2600      	movs	r6, #0
 800941e:	42a6      	cmp	r6, r4
 8009420:	d105      	bne.n	800942e <__libc_init_array+0x2e>
 8009422:	bd70      	pop	{r4, r5, r6, pc}
 8009424:	f855 3b04 	ldr.w	r3, [r5], #4
 8009428:	4798      	blx	r3
 800942a:	3601      	adds	r6, #1
 800942c:	e7ee      	b.n	800940c <__libc_init_array+0xc>
 800942e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009432:	4798      	blx	r3
 8009434:	3601      	adds	r6, #1
 8009436:	e7f2      	b.n	800941e <__libc_init_array+0x1e>
 8009438:	0800b59c 	.word	0x0800b59c
 800943c:	0800b59c 	.word	0x0800b59c
 8009440:	0800b59c 	.word	0x0800b59c
 8009444:	0800b5a0 	.word	0x0800b5a0

08009448 <__retarget_lock_init_recursive>:
 8009448:	4770      	bx	lr

0800944a <__retarget_lock_acquire_recursive>:
 800944a:	4770      	bx	lr

0800944c <__retarget_lock_release_recursive>:
 800944c:	4770      	bx	lr

0800944e <quorem>:
 800944e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009452:	6903      	ldr	r3, [r0, #16]
 8009454:	690c      	ldr	r4, [r1, #16]
 8009456:	42a3      	cmp	r3, r4
 8009458:	4607      	mov	r7, r0
 800945a:	db7e      	blt.n	800955a <quorem+0x10c>
 800945c:	3c01      	subs	r4, #1
 800945e:	f101 0814 	add.w	r8, r1, #20
 8009462:	f100 0514 	add.w	r5, r0, #20
 8009466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800946a:	9301      	str	r3, [sp, #4]
 800946c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009470:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009474:	3301      	adds	r3, #1
 8009476:	429a      	cmp	r2, r3
 8009478:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800947c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009480:	fbb2 f6f3 	udiv	r6, r2, r3
 8009484:	d331      	bcc.n	80094ea <quorem+0x9c>
 8009486:	f04f 0e00 	mov.w	lr, #0
 800948a:	4640      	mov	r0, r8
 800948c:	46ac      	mov	ip, r5
 800948e:	46f2      	mov	sl, lr
 8009490:	f850 2b04 	ldr.w	r2, [r0], #4
 8009494:	b293      	uxth	r3, r2
 8009496:	fb06 e303 	mla	r3, r6, r3, lr
 800949a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800949e:	0c1a      	lsrs	r2, r3, #16
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	ebaa 0303 	sub.w	r3, sl, r3
 80094a6:	f8dc a000 	ldr.w	sl, [ip]
 80094aa:	fa13 f38a 	uxtah	r3, r3, sl
 80094ae:	fb06 220e 	mla	r2, r6, lr, r2
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	9b00      	ldr	r3, [sp, #0]
 80094b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80094ba:	b292      	uxth	r2, r2
 80094bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80094c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80094c8:	4581      	cmp	r9, r0
 80094ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094ce:	f84c 3b04 	str.w	r3, [ip], #4
 80094d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80094d6:	d2db      	bcs.n	8009490 <quorem+0x42>
 80094d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80094dc:	b92b      	cbnz	r3, 80094ea <quorem+0x9c>
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	3b04      	subs	r3, #4
 80094e2:	429d      	cmp	r5, r3
 80094e4:	461a      	mov	r2, r3
 80094e6:	d32c      	bcc.n	8009542 <quorem+0xf4>
 80094e8:	613c      	str	r4, [r7, #16]
 80094ea:	4638      	mov	r0, r7
 80094ec:	f001 f9a6 	bl	800a83c <__mcmp>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	db22      	blt.n	800953a <quorem+0xec>
 80094f4:	3601      	adds	r6, #1
 80094f6:	4629      	mov	r1, r5
 80094f8:	2000      	movs	r0, #0
 80094fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80094fe:	f8d1 c000 	ldr.w	ip, [r1]
 8009502:	b293      	uxth	r3, r2
 8009504:	1ac3      	subs	r3, r0, r3
 8009506:	0c12      	lsrs	r2, r2, #16
 8009508:	fa13 f38c 	uxtah	r3, r3, ip
 800950c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009514:	b29b      	uxth	r3, r3
 8009516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800951a:	45c1      	cmp	r9, r8
 800951c:	f841 3b04 	str.w	r3, [r1], #4
 8009520:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009524:	d2e9      	bcs.n	80094fa <quorem+0xac>
 8009526:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800952a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800952e:	b922      	cbnz	r2, 800953a <quorem+0xec>
 8009530:	3b04      	subs	r3, #4
 8009532:	429d      	cmp	r5, r3
 8009534:	461a      	mov	r2, r3
 8009536:	d30a      	bcc.n	800954e <quorem+0x100>
 8009538:	613c      	str	r4, [r7, #16]
 800953a:	4630      	mov	r0, r6
 800953c:	b003      	add	sp, #12
 800953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009542:	6812      	ldr	r2, [r2, #0]
 8009544:	3b04      	subs	r3, #4
 8009546:	2a00      	cmp	r2, #0
 8009548:	d1ce      	bne.n	80094e8 <quorem+0x9a>
 800954a:	3c01      	subs	r4, #1
 800954c:	e7c9      	b.n	80094e2 <quorem+0x94>
 800954e:	6812      	ldr	r2, [r2, #0]
 8009550:	3b04      	subs	r3, #4
 8009552:	2a00      	cmp	r2, #0
 8009554:	d1f0      	bne.n	8009538 <quorem+0xea>
 8009556:	3c01      	subs	r4, #1
 8009558:	e7eb      	b.n	8009532 <quorem+0xe4>
 800955a:	2000      	movs	r0, #0
 800955c:	e7ee      	b.n	800953c <quorem+0xee>
	...

08009560 <_dtoa_r>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	ed2d 8b04 	vpush	{d8-d9}
 8009568:	69c5      	ldr	r5, [r0, #28]
 800956a:	b093      	sub	sp, #76	; 0x4c
 800956c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009570:	ec57 6b10 	vmov	r6, r7, d0
 8009574:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009578:	9107      	str	r1, [sp, #28]
 800957a:	4604      	mov	r4, r0
 800957c:	920a      	str	r2, [sp, #40]	; 0x28
 800957e:	930d      	str	r3, [sp, #52]	; 0x34
 8009580:	b975      	cbnz	r5, 80095a0 <_dtoa_r+0x40>
 8009582:	2010      	movs	r0, #16
 8009584:	f000 fe2a 	bl	800a1dc <malloc>
 8009588:	4602      	mov	r2, r0
 800958a:	61e0      	str	r0, [r4, #28]
 800958c:	b920      	cbnz	r0, 8009598 <_dtoa_r+0x38>
 800958e:	4bae      	ldr	r3, [pc, #696]	; (8009848 <_dtoa_r+0x2e8>)
 8009590:	21ef      	movs	r1, #239	; 0xef
 8009592:	48ae      	ldr	r0, [pc, #696]	; (800984c <_dtoa_r+0x2ec>)
 8009594:	f001 fb1e 	bl	800abd4 <__assert_func>
 8009598:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800959c:	6005      	str	r5, [r0, #0]
 800959e:	60c5      	str	r5, [r0, #12]
 80095a0:	69e3      	ldr	r3, [r4, #28]
 80095a2:	6819      	ldr	r1, [r3, #0]
 80095a4:	b151      	cbz	r1, 80095bc <_dtoa_r+0x5c>
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	604a      	str	r2, [r1, #4]
 80095aa:	2301      	movs	r3, #1
 80095ac:	4093      	lsls	r3, r2
 80095ae:	608b      	str	r3, [r1, #8]
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 ff07 	bl	800a3c4 <_Bfree>
 80095b6:	69e3      	ldr	r3, [r4, #28]
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	1e3b      	subs	r3, r7, #0
 80095be:	bfbb      	ittet	lt
 80095c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80095c4:	9303      	strlt	r3, [sp, #12]
 80095c6:	2300      	movge	r3, #0
 80095c8:	2201      	movlt	r2, #1
 80095ca:	bfac      	ite	ge
 80095cc:	f8c8 3000 	strge.w	r3, [r8]
 80095d0:	f8c8 2000 	strlt.w	r2, [r8]
 80095d4:	4b9e      	ldr	r3, [pc, #632]	; (8009850 <_dtoa_r+0x2f0>)
 80095d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80095da:	ea33 0308 	bics.w	r3, r3, r8
 80095de:	d11b      	bne.n	8009618 <_dtoa_r+0xb8>
 80095e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80095ec:	4333      	orrs	r3, r6
 80095ee:	f000 8593 	beq.w	800a118 <_dtoa_r+0xbb8>
 80095f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095f4:	b963      	cbnz	r3, 8009610 <_dtoa_r+0xb0>
 80095f6:	4b97      	ldr	r3, [pc, #604]	; (8009854 <_dtoa_r+0x2f4>)
 80095f8:	e027      	b.n	800964a <_dtoa_r+0xea>
 80095fa:	4b97      	ldr	r3, [pc, #604]	; (8009858 <_dtoa_r+0x2f8>)
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	3308      	adds	r3, #8
 8009600:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009602:	6013      	str	r3, [r2, #0]
 8009604:	9800      	ldr	r0, [sp, #0]
 8009606:	b013      	add	sp, #76	; 0x4c
 8009608:	ecbd 8b04 	vpop	{d8-d9}
 800960c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009610:	4b90      	ldr	r3, [pc, #576]	; (8009854 <_dtoa_r+0x2f4>)
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	3303      	adds	r3, #3
 8009616:	e7f3      	b.n	8009600 <_dtoa_r+0xa0>
 8009618:	ed9d 7b02 	vldr	d7, [sp, #8]
 800961c:	2200      	movs	r2, #0
 800961e:	ec51 0b17 	vmov	r0, r1, d7
 8009622:	eeb0 8a47 	vmov.f32	s16, s14
 8009626:	eef0 8a67 	vmov.f32	s17, s15
 800962a:	2300      	movs	r3, #0
 800962c:	f7f7 fa54 	bl	8000ad8 <__aeabi_dcmpeq>
 8009630:	4681      	mov	r9, r0
 8009632:	b160      	cbz	r0, 800964e <_dtoa_r+0xee>
 8009634:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009636:	2301      	movs	r3, #1
 8009638:	6013      	str	r3, [r2, #0]
 800963a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 8568 	beq.w	800a112 <_dtoa_r+0xbb2>
 8009642:	4b86      	ldr	r3, [pc, #536]	; (800985c <_dtoa_r+0x2fc>)
 8009644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	3b01      	subs	r3, #1
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	e7da      	b.n	8009604 <_dtoa_r+0xa4>
 800964e:	aa10      	add	r2, sp, #64	; 0x40
 8009650:	a911      	add	r1, sp, #68	; 0x44
 8009652:	4620      	mov	r0, r4
 8009654:	eeb0 0a48 	vmov.f32	s0, s16
 8009658:	eef0 0a68 	vmov.f32	s1, s17
 800965c:	f001 f994 	bl	800a988 <__d2b>
 8009660:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009664:	4682      	mov	sl, r0
 8009666:	2d00      	cmp	r5, #0
 8009668:	d07f      	beq.n	800976a <_dtoa_r+0x20a>
 800966a:	ee18 3a90 	vmov	r3, s17
 800966e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009672:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009676:	ec51 0b18 	vmov	r0, r1, d8
 800967a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800967e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009682:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009686:	4619      	mov	r1, r3
 8009688:	2200      	movs	r2, #0
 800968a:	4b75      	ldr	r3, [pc, #468]	; (8009860 <_dtoa_r+0x300>)
 800968c:	f7f6 fe04 	bl	8000298 <__aeabi_dsub>
 8009690:	a367      	add	r3, pc, #412	; (adr r3, 8009830 <_dtoa_r+0x2d0>)
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	f7f6 ffb7 	bl	8000608 <__aeabi_dmul>
 800969a:	a367      	add	r3, pc, #412	; (adr r3, 8009838 <_dtoa_r+0x2d8>)
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	f7f6 fdfc 	bl	800029c <__adddf3>
 80096a4:	4606      	mov	r6, r0
 80096a6:	4628      	mov	r0, r5
 80096a8:	460f      	mov	r7, r1
 80096aa:	f7f6 ff43 	bl	8000534 <__aeabi_i2d>
 80096ae:	a364      	add	r3, pc, #400	; (adr r3, 8009840 <_dtoa_r+0x2e0>)
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	f7f6 ffa8 	bl	8000608 <__aeabi_dmul>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4630      	mov	r0, r6
 80096be:	4639      	mov	r1, r7
 80096c0:	f7f6 fdec 	bl	800029c <__adddf3>
 80096c4:	4606      	mov	r6, r0
 80096c6:	460f      	mov	r7, r1
 80096c8:	f7f7 fa4e 	bl	8000b68 <__aeabi_d2iz>
 80096cc:	2200      	movs	r2, #0
 80096ce:	4683      	mov	fp, r0
 80096d0:	2300      	movs	r3, #0
 80096d2:	4630      	mov	r0, r6
 80096d4:	4639      	mov	r1, r7
 80096d6:	f7f7 fa09 	bl	8000aec <__aeabi_dcmplt>
 80096da:	b148      	cbz	r0, 80096f0 <_dtoa_r+0x190>
 80096dc:	4658      	mov	r0, fp
 80096de:	f7f6 ff29 	bl	8000534 <__aeabi_i2d>
 80096e2:	4632      	mov	r2, r6
 80096e4:	463b      	mov	r3, r7
 80096e6:	f7f7 f9f7 	bl	8000ad8 <__aeabi_dcmpeq>
 80096ea:	b908      	cbnz	r0, 80096f0 <_dtoa_r+0x190>
 80096ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80096f0:	f1bb 0f16 	cmp.w	fp, #22
 80096f4:	d857      	bhi.n	80097a6 <_dtoa_r+0x246>
 80096f6:	4b5b      	ldr	r3, [pc, #364]	; (8009864 <_dtoa_r+0x304>)
 80096f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009700:	ec51 0b18 	vmov	r0, r1, d8
 8009704:	f7f7 f9f2 	bl	8000aec <__aeabi_dcmplt>
 8009708:	2800      	cmp	r0, #0
 800970a:	d04e      	beq.n	80097aa <_dtoa_r+0x24a>
 800970c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009710:	2300      	movs	r3, #0
 8009712:	930c      	str	r3, [sp, #48]	; 0x30
 8009714:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009716:	1b5b      	subs	r3, r3, r5
 8009718:	1e5a      	subs	r2, r3, #1
 800971a:	bf45      	ittet	mi
 800971c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009720:	9305      	strmi	r3, [sp, #20]
 8009722:	2300      	movpl	r3, #0
 8009724:	2300      	movmi	r3, #0
 8009726:	9206      	str	r2, [sp, #24]
 8009728:	bf54      	ite	pl
 800972a:	9305      	strpl	r3, [sp, #20]
 800972c:	9306      	strmi	r3, [sp, #24]
 800972e:	f1bb 0f00 	cmp.w	fp, #0
 8009732:	db3c      	blt.n	80097ae <_dtoa_r+0x24e>
 8009734:	9b06      	ldr	r3, [sp, #24]
 8009736:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800973a:	445b      	add	r3, fp
 800973c:	9306      	str	r3, [sp, #24]
 800973e:	2300      	movs	r3, #0
 8009740:	9308      	str	r3, [sp, #32]
 8009742:	9b07      	ldr	r3, [sp, #28]
 8009744:	2b09      	cmp	r3, #9
 8009746:	d868      	bhi.n	800981a <_dtoa_r+0x2ba>
 8009748:	2b05      	cmp	r3, #5
 800974a:	bfc4      	itt	gt
 800974c:	3b04      	subgt	r3, #4
 800974e:	9307      	strgt	r3, [sp, #28]
 8009750:	9b07      	ldr	r3, [sp, #28]
 8009752:	f1a3 0302 	sub.w	r3, r3, #2
 8009756:	bfcc      	ite	gt
 8009758:	2500      	movgt	r5, #0
 800975a:	2501      	movle	r5, #1
 800975c:	2b03      	cmp	r3, #3
 800975e:	f200 8085 	bhi.w	800986c <_dtoa_r+0x30c>
 8009762:	e8df f003 	tbb	[pc, r3]
 8009766:	3b2e      	.short	0x3b2e
 8009768:	5839      	.short	0x5839
 800976a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800976e:	441d      	add	r5, r3
 8009770:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009774:	2b20      	cmp	r3, #32
 8009776:	bfc1      	itttt	gt
 8009778:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800977c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009780:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009784:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009788:	bfd6      	itet	le
 800978a:	f1c3 0320 	rsble	r3, r3, #32
 800978e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009792:	fa06 f003 	lslle.w	r0, r6, r3
 8009796:	f7f6 febd 	bl	8000514 <__aeabi_ui2d>
 800979a:	2201      	movs	r2, #1
 800979c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80097a0:	3d01      	subs	r5, #1
 80097a2:	920e      	str	r2, [sp, #56]	; 0x38
 80097a4:	e76f      	b.n	8009686 <_dtoa_r+0x126>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e7b3      	b.n	8009712 <_dtoa_r+0x1b2>
 80097aa:	900c      	str	r0, [sp, #48]	; 0x30
 80097ac:	e7b2      	b.n	8009714 <_dtoa_r+0x1b4>
 80097ae:	9b05      	ldr	r3, [sp, #20]
 80097b0:	eba3 030b 	sub.w	r3, r3, fp
 80097b4:	9305      	str	r3, [sp, #20]
 80097b6:	f1cb 0300 	rsb	r3, fp, #0
 80097ba:	9308      	str	r3, [sp, #32]
 80097bc:	2300      	movs	r3, #0
 80097be:	930b      	str	r3, [sp, #44]	; 0x2c
 80097c0:	e7bf      	b.n	8009742 <_dtoa_r+0x1e2>
 80097c2:	2300      	movs	r3, #0
 80097c4:	9309      	str	r3, [sp, #36]	; 0x24
 80097c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	dc52      	bgt.n	8009872 <_dtoa_r+0x312>
 80097cc:	2301      	movs	r3, #1
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	9304      	str	r3, [sp, #16]
 80097d2:	461a      	mov	r2, r3
 80097d4:	920a      	str	r2, [sp, #40]	; 0x28
 80097d6:	e00b      	b.n	80097f0 <_dtoa_r+0x290>
 80097d8:	2301      	movs	r3, #1
 80097da:	e7f3      	b.n	80097c4 <_dtoa_r+0x264>
 80097dc:	2300      	movs	r3, #0
 80097de:	9309      	str	r3, [sp, #36]	; 0x24
 80097e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097e2:	445b      	add	r3, fp
 80097e4:	9301      	str	r3, [sp, #4]
 80097e6:	3301      	adds	r3, #1
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	bfb8      	it	lt
 80097ee:	2301      	movlt	r3, #1
 80097f0:	69e0      	ldr	r0, [r4, #28]
 80097f2:	2100      	movs	r1, #0
 80097f4:	2204      	movs	r2, #4
 80097f6:	f102 0614 	add.w	r6, r2, #20
 80097fa:	429e      	cmp	r6, r3
 80097fc:	d93d      	bls.n	800987a <_dtoa_r+0x31a>
 80097fe:	6041      	str	r1, [r0, #4]
 8009800:	4620      	mov	r0, r4
 8009802:	f000 fd9f 	bl	800a344 <_Balloc>
 8009806:	9000      	str	r0, [sp, #0]
 8009808:	2800      	cmp	r0, #0
 800980a:	d139      	bne.n	8009880 <_dtoa_r+0x320>
 800980c:	4b16      	ldr	r3, [pc, #88]	; (8009868 <_dtoa_r+0x308>)
 800980e:	4602      	mov	r2, r0
 8009810:	f240 11af 	movw	r1, #431	; 0x1af
 8009814:	e6bd      	b.n	8009592 <_dtoa_r+0x32>
 8009816:	2301      	movs	r3, #1
 8009818:	e7e1      	b.n	80097de <_dtoa_r+0x27e>
 800981a:	2501      	movs	r5, #1
 800981c:	2300      	movs	r3, #0
 800981e:	9307      	str	r3, [sp, #28]
 8009820:	9509      	str	r5, [sp, #36]	; 0x24
 8009822:	f04f 33ff 	mov.w	r3, #4294967295
 8009826:	9301      	str	r3, [sp, #4]
 8009828:	9304      	str	r3, [sp, #16]
 800982a:	2200      	movs	r2, #0
 800982c:	2312      	movs	r3, #18
 800982e:	e7d1      	b.n	80097d4 <_dtoa_r+0x274>
 8009830:	636f4361 	.word	0x636f4361
 8009834:	3fd287a7 	.word	0x3fd287a7
 8009838:	8b60c8b3 	.word	0x8b60c8b3
 800983c:	3fc68a28 	.word	0x3fc68a28
 8009840:	509f79fb 	.word	0x509f79fb
 8009844:	3fd34413 	.word	0x3fd34413
 8009848:	0800b261 	.word	0x0800b261
 800984c:	0800b278 	.word	0x0800b278
 8009850:	7ff00000 	.word	0x7ff00000
 8009854:	0800b25d 	.word	0x0800b25d
 8009858:	0800b254 	.word	0x0800b254
 800985c:	0800b231 	.word	0x0800b231
 8009860:	3ff80000 	.word	0x3ff80000
 8009864:	0800b368 	.word	0x0800b368
 8009868:	0800b2d0 	.word	0x0800b2d0
 800986c:	2301      	movs	r3, #1
 800986e:	9309      	str	r3, [sp, #36]	; 0x24
 8009870:	e7d7      	b.n	8009822 <_dtoa_r+0x2c2>
 8009872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	9304      	str	r3, [sp, #16]
 8009878:	e7ba      	b.n	80097f0 <_dtoa_r+0x290>
 800987a:	3101      	adds	r1, #1
 800987c:	0052      	lsls	r2, r2, #1
 800987e:	e7ba      	b.n	80097f6 <_dtoa_r+0x296>
 8009880:	69e3      	ldr	r3, [r4, #28]
 8009882:	9a00      	ldr	r2, [sp, #0]
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	9b04      	ldr	r3, [sp, #16]
 8009888:	2b0e      	cmp	r3, #14
 800988a:	f200 80a8 	bhi.w	80099de <_dtoa_r+0x47e>
 800988e:	2d00      	cmp	r5, #0
 8009890:	f000 80a5 	beq.w	80099de <_dtoa_r+0x47e>
 8009894:	f1bb 0f00 	cmp.w	fp, #0
 8009898:	dd38      	ble.n	800990c <_dtoa_r+0x3ac>
 800989a:	4bc0      	ldr	r3, [pc, #768]	; (8009b9c <_dtoa_r+0x63c>)
 800989c:	f00b 020f 	and.w	r2, fp, #15
 80098a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80098a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80098ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80098b0:	d019      	beq.n	80098e6 <_dtoa_r+0x386>
 80098b2:	4bbb      	ldr	r3, [pc, #748]	; (8009ba0 <_dtoa_r+0x640>)
 80098b4:	ec51 0b18 	vmov	r0, r1, d8
 80098b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098bc:	f7f6 ffce 	bl	800085c <__aeabi_ddiv>
 80098c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098c4:	f008 080f 	and.w	r8, r8, #15
 80098c8:	2503      	movs	r5, #3
 80098ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009ba0 <_dtoa_r+0x640>
 80098ce:	f1b8 0f00 	cmp.w	r8, #0
 80098d2:	d10a      	bne.n	80098ea <_dtoa_r+0x38a>
 80098d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098d8:	4632      	mov	r2, r6
 80098da:	463b      	mov	r3, r7
 80098dc:	f7f6 ffbe 	bl	800085c <__aeabi_ddiv>
 80098e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098e4:	e02b      	b.n	800993e <_dtoa_r+0x3de>
 80098e6:	2502      	movs	r5, #2
 80098e8:	e7ef      	b.n	80098ca <_dtoa_r+0x36a>
 80098ea:	f018 0f01 	tst.w	r8, #1
 80098ee:	d008      	beq.n	8009902 <_dtoa_r+0x3a2>
 80098f0:	4630      	mov	r0, r6
 80098f2:	4639      	mov	r1, r7
 80098f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80098f8:	f7f6 fe86 	bl	8000608 <__aeabi_dmul>
 80098fc:	3501      	adds	r5, #1
 80098fe:	4606      	mov	r6, r0
 8009900:	460f      	mov	r7, r1
 8009902:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009906:	f109 0908 	add.w	r9, r9, #8
 800990a:	e7e0      	b.n	80098ce <_dtoa_r+0x36e>
 800990c:	f000 809f 	beq.w	8009a4e <_dtoa_r+0x4ee>
 8009910:	f1cb 0600 	rsb	r6, fp, #0
 8009914:	4ba1      	ldr	r3, [pc, #644]	; (8009b9c <_dtoa_r+0x63c>)
 8009916:	4fa2      	ldr	r7, [pc, #648]	; (8009ba0 <_dtoa_r+0x640>)
 8009918:	f006 020f 	and.w	r2, r6, #15
 800991c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009924:	ec51 0b18 	vmov	r0, r1, d8
 8009928:	f7f6 fe6e 	bl	8000608 <__aeabi_dmul>
 800992c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009930:	1136      	asrs	r6, r6, #4
 8009932:	2300      	movs	r3, #0
 8009934:	2502      	movs	r5, #2
 8009936:	2e00      	cmp	r6, #0
 8009938:	d17e      	bne.n	8009a38 <_dtoa_r+0x4d8>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1d0      	bne.n	80098e0 <_dtoa_r+0x380>
 800993e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009940:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 8084 	beq.w	8009a52 <_dtoa_r+0x4f2>
 800994a:	4b96      	ldr	r3, [pc, #600]	; (8009ba4 <_dtoa_r+0x644>)
 800994c:	2200      	movs	r2, #0
 800994e:	4640      	mov	r0, r8
 8009950:	4649      	mov	r1, r9
 8009952:	f7f7 f8cb 	bl	8000aec <__aeabi_dcmplt>
 8009956:	2800      	cmp	r0, #0
 8009958:	d07b      	beq.n	8009a52 <_dtoa_r+0x4f2>
 800995a:	9b04      	ldr	r3, [sp, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d078      	beq.n	8009a52 <_dtoa_r+0x4f2>
 8009960:	9b01      	ldr	r3, [sp, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	dd39      	ble.n	80099da <_dtoa_r+0x47a>
 8009966:	4b90      	ldr	r3, [pc, #576]	; (8009ba8 <_dtoa_r+0x648>)
 8009968:	2200      	movs	r2, #0
 800996a:	4640      	mov	r0, r8
 800996c:	4649      	mov	r1, r9
 800996e:	f7f6 fe4b 	bl	8000608 <__aeabi_dmul>
 8009972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009976:	9e01      	ldr	r6, [sp, #4]
 8009978:	f10b 37ff 	add.w	r7, fp, #4294967295
 800997c:	3501      	adds	r5, #1
 800997e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009982:	4628      	mov	r0, r5
 8009984:	f7f6 fdd6 	bl	8000534 <__aeabi_i2d>
 8009988:	4642      	mov	r2, r8
 800998a:	464b      	mov	r3, r9
 800998c:	f7f6 fe3c 	bl	8000608 <__aeabi_dmul>
 8009990:	4b86      	ldr	r3, [pc, #536]	; (8009bac <_dtoa_r+0x64c>)
 8009992:	2200      	movs	r2, #0
 8009994:	f7f6 fc82 	bl	800029c <__adddf3>
 8009998:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800999c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099a0:	9303      	str	r3, [sp, #12]
 80099a2:	2e00      	cmp	r6, #0
 80099a4:	d158      	bne.n	8009a58 <_dtoa_r+0x4f8>
 80099a6:	4b82      	ldr	r3, [pc, #520]	; (8009bb0 <_dtoa_r+0x650>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	4640      	mov	r0, r8
 80099ac:	4649      	mov	r1, r9
 80099ae:	f7f6 fc73 	bl	8000298 <__aeabi_dsub>
 80099b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099b6:	4680      	mov	r8, r0
 80099b8:	4689      	mov	r9, r1
 80099ba:	f7f7 f8b5 	bl	8000b28 <__aeabi_dcmpgt>
 80099be:	2800      	cmp	r0, #0
 80099c0:	f040 8296 	bne.w	8009ef0 <_dtoa_r+0x990>
 80099c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80099c8:	4640      	mov	r0, r8
 80099ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099ce:	4649      	mov	r1, r9
 80099d0:	f7f7 f88c 	bl	8000aec <__aeabi_dcmplt>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f040 8289 	bne.w	8009eec <_dtoa_r+0x98c>
 80099da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80099de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f2c0 814e 	blt.w	8009c82 <_dtoa_r+0x722>
 80099e6:	f1bb 0f0e 	cmp.w	fp, #14
 80099ea:	f300 814a 	bgt.w	8009c82 <_dtoa_r+0x722>
 80099ee:	4b6b      	ldr	r3, [pc, #428]	; (8009b9c <_dtoa_r+0x63c>)
 80099f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f280 80dc 	bge.w	8009bb8 <_dtoa_r+0x658>
 8009a00:	9b04      	ldr	r3, [sp, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f300 80d8 	bgt.w	8009bb8 <_dtoa_r+0x658>
 8009a08:	f040 826f 	bne.w	8009eea <_dtoa_r+0x98a>
 8009a0c:	4b68      	ldr	r3, [pc, #416]	; (8009bb0 <_dtoa_r+0x650>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	4640      	mov	r0, r8
 8009a12:	4649      	mov	r1, r9
 8009a14:	f7f6 fdf8 	bl	8000608 <__aeabi_dmul>
 8009a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a1c:	f7f7 f87a 	bl	8000b14 <__aeabi_dcmpge>
 8009a20:	9e04      	ldr	r6, [sp, #16]
 8009a22:	4637      	mov	r7, r6
 8009a24:	2800      	cmp	r0, #0
 8009a26:	f040 8245 	bne.w	8009eb4 <_dtoa_r+0x954>
 8009a2a:	9d00      	ldr	r5, [sp, #0]
 8009a2c:	2331      	movs	r3, #49	; 0x31
 8009a2e:	f805 3b01 	strb.w	r3, [r5], #1
 8009a32:	f10b 0b01 	add.w	fp, fp, #1
 8009a36:	e241      	b.n	8009ebc <_dtoa_r+0x95c>
 8009a38:	07f2      	lsls	r2, r6, #31
 8009a3a:	d505      	bpl.n	8009a48 <_dtoa_r+0x4e8>
 8009a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a40:	f7f6 fde2 	bl	8000608 <__aeabi_dmul>
 8009a44:	3501      	adds	r5, #1
 8009a46:	2301      	movs	r3, #1
 8009a48:	1076      	asrs	r6, r6, #1
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	e773      	b.n	8009936 <_dtoa_r+0x3d6>
 8009a4e:	2502      	movs	r5, #2
 8009a50:	e775      	b.n	800993e <_dtoa_r+0x3de>
 8009a52:	9e04      	ldr	r6, [sp, #16]
 8009a54:	465f      	mov	r7, fp
 8009a56:	e792      	b.n	800997e <_dtoa_r+0x41e>
 8009a58:	9900      	ldr	r1, [sp, #0]
 8009a5a:	4b50      	ldr	r3, [pc, #320]	; (8009b9c <_dtoa_r+0x63c>)
 8009a5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a60:	4431      	add	r1, r6
 8009a62:	9102      	str	r1, [sp, #8]
 8009a64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a66:	eeb0 9a47 	vmov.f32	s18, s14
 8009a6a:	eef0 9a67 	vmov.f32	s19, s15
 8009a6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a76:	2900      	cmp	r1, #0
 8009a78:	d044      	beq.n	8009b04 <_dtoa_r+0x5a4>
 8009a7a:	494e      	ldr	r1, [pc, #312]	; (8009bb4 <_dtoa_r+0x654>)
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	f7f6 feed 	bl	800085c <__aeabi_ddiv>
 8009a82:	ec53 2b19 	vmov	r2, r3, d9
 8009a86:	f7f6 fc07 	bl	8000298 <__aeabi_dsub>
 8009a8a:	9d00      	ldr	r5, [sp, #0]
 8009a8c:	ec41 0b19 	vmov	d9, r0, r1
 8009a90:	4649      	mov	r1, r9
 8009a92:	4640      	mov	r0, r8
 8009a94:	f7f7 f868 	bl	8000b68 <__aeabi_d2iz>
 8009a98:	4606      	mov	r6, r0
 8009a9a:	f7f6 fd4b 	bl	8000534 <__aeabi_i2d>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4640      	mov	r0, r8
 8009aa4:	4649      	mov	r1, r9
 8009aa6:	f7f6 fbf7 	bl	8000298 <__aeabi_dsub>
 8009aaa:	3630      	adds	r6, #48	; 0x30
 8009aac:	f805 6b01 	strb.w	r6, [r5], #1
 8009ab0:	ec53 2b19 	vmov	r2, r3, d9
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	4689      	mov	r9, r1
 8009ab8:	f7f7 f818 	bl	8000aec <__aeabi_dcmplt>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	d164      	bne.n	8009b8a <_dtoa_r+0x62a>
 8009ac0:	4642      	mov	r2, r8
 8009ac2:	464b      	mov	r3, r9
 8009ac4:	4937      	ldr	r1, [pc, #220]	; (8009ba4 <_dtoa_r+0x644>)
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	f7f6 fbe6 	bl	8000298 <__aeabi_dsub>
 8009acc:	ec53 2b19 	vmov	r2, r3, d9
 8009ad0:	f7f7 f80c 	bl	8000aec <__aeabi_dcmplt>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	f040 80b6 	bne.w	8009c46 <_dtoa_r+0x6e6>
 8009ada:	9b02      	ldr	r3, [sp, #8]
 8009adc:	429d      	cmp	r5, r3
 8009ade:	f43f af7c 	beq.w	80099da <_dtoa_r+0x47a>
 8009ae2:	4b31      	ldr	r3, [pc, #196]	; (8009ba8 <_dtoa_r+0x648>)
 8009ae4:	ec51 0b19 	vmov	r0, r1, d9
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f7f6 fd8d 	bl	8000608 <__aeabi_dmul>
 8009aee:	4b2e      	ldr	r3, [pc, #184]	; (8009ba8 <_dtoa_r+0x648>)
 8009af0:	ec41 0b19 	vmov	d9, r0, r1
 8009af4:	2200      	movs	r2, #0
 8009af6:	4640      	mov	r0, r8
 8009af8:	4649      	mov	r1, r9
 8009afa:	f7f6 fd85 	bl	8000608 <__aeabi_dmul>
 8009afe:	4680      	mov	r8, r0
 8009b00:	4689      	mov	r9, r1
 8009b02:	e7c5      	b.n	8009a90 <_dtoa_r+0x530>
 8009b04:	ec51 0b17 	vmov	r0, r1, d7
 8009b08:	f7f6 fd7e 	bl	8000608 <__aeabi_dmul>
 8009b0c:	9b02      	ldr	r3, [sp, #8]
 8009b0e:	9d00      	ldr	r5, [sp, #0]
 8009b10:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b12:	ec41 0b19 	vmov	d9, r0, r1
 8009b16:	4649      	mov	r1, r9
 8009b18:	4640      	mov	r0, r8
 8009b1a:	f7f7 f825 	bl	8000b68 <__aeabi_d2iz>
 8009b1e:	4606      	mov	r6, r0
 8009b20:	f7f6 fd08 	bl	8000534 <__aeabi_i2d>
 8009b24:	3630      	adds	r6, #48	; 0x30
 8009b26:	4602      	mov	r2, r0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	4649      	mov	r1, r9
 8009b2e:	f7f6 fbb3 	bl	8000298 <__aeabi_dsub>
 8009b32:	f805 6b01 	strb.w	r6, [r5], #1
 8009b36:	9b02      	ldr	r3, [sp, #8]
 8009b38:	429d      	cmp	r5, r3
 8009b3a:	4680      	mov	r8, r0
 8009b3c:	4689      	mov	r9, r1
 8009b3e:	f04f 0200 	mov.w	r2, #0
 8009b42:	d124      	bne.n	8009b8e <_dtoa_r+0x62e>
 8009b44:	4b1b      	ldr	r3, [pc, #108]	; (8009bb4 <_dtoa_r+0x654>)
 8009b46:	ec51 0b19 	vmov	r0, r1, d9
 8009b4a:	f7f6 fba7 	bl	800029c <__adddf3>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	460b      	mov	r3, r1
 8009b52:	4640      	mov	r0, r8
 8009b54:	4649      	mov	r1, r9
 8009b56:	f7f6 ffe7 	bl	8000b28 <__aeabi_dcmpgt>
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d173      	bne.n	8009c46 <_dtoa_r+0x6e6>
 8009b5e:	ec53 2b19 	vmov	r2, r3, d9
 8009b62:	4914      	ldr	r1, [pc, #80]	; (8009bb4 <_dtoa_r+0x654>)
 8009b64:	2000      	movs	r0, #0
 8009b66:	f7f6 fb97 	bl	8000298 <__aeabi_dsub>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4640      	mov	r0, r8
 8009b70:	4649      	mov	r1, r9
 8009b72:	f7f6 ffbb 	bl	8000aec <__aeabi_dcmplt>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	f43f af2f 	beq.w	80099da <_dtoa_r+0x47a>
 8009b7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b7e:	1e6b      	subs	r3, r5, #1
 8009b80:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b86:	2b30      	cmp	r3, #48	; 0x30
 8009b88:	d0f8      	beq.n	8009b7c <_dtoa_r+0x61c>
 8009b8a:	46bb      	mov	fp, r7
 8009b8c:	e04a      	b.n	8009c24 <_dtoa_r+0x6c4>
 8009b8e:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <_dtoa_r+0x648>)
 8009b90:	f7f6 fd3a 	bl	8000608 <__aeabi_dmul>
 8009b94:	4680      	mov	r8, r0
 8009b96:	4689      	mov	r9, r1
 8009b98:	e7bd      	b.n	8009b16 <_dtoa_r+0x5b6>
 8009b9a:	bf00      	nop
 8009b9c:	0800b368 	.word	0x0800b368
 8009ba0:	0800b340 	.word	0x0800b340
 8009ba4:	3ff00000 	.word	0x3ff00000
 8009ba8:	40240000 	.word	0x40240000
 8009bac:	401c0000 	.word	0x401c0000
 8009bb0:	40140000 	.word	0x40140000
 8009bb4:	3fe00000 	.word	0x3fe00000
 8009bb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009bbc:	9d00      	ldr	r5, [sp, #0]
 8009bbe:	4642      	mov	r2, r8
 8009bc0:	464b      	mov	r3, r9
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	4639      	mov	r1, r7
 8009bc6:	f7f6 fe49 	bl	800085c <__aeabi_ddiv>
 8009bca:	f7f6 ffcd 	bl	8000b68 <__aeabi_d2iz>
 8009bce:	9001      	str	r0, [sp, #4]
 8009bd0:	f7f6 fcb0 	bl	8000534 <__aeabi_i2d>
 8009bd4:	4642      	mov	r2, r8
 8009bd6:	464b      	mov	r3, r9
 8009bd8:	f7f6 fd16 	bl	8000608 <__aeabi_dmul>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4630      	mov	r0, r6
 8009be2:	4639      	mov	r1, r7
 8009be4:	f7f6 fb58 	bl	8000298 <__aeabi_dsub>
 8009be8:	9e01      	ldr	r6, [sp, #4]
 8009bea:	9f04      	ldr	r7, [sp, #16]
 8009bec:	3630      	adds	r6, #48	; 0x30
 8009bee:	f805 6b01 	strb.w	r6, [r5], #1
 8009bf2:	9e00      	ldr	r6, [sp, #0]
 8009bf4:	1bae      	subs	r6, r5, r6
 8009bf6:	42b7      	cmp	r7, r6
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	d134      	bne.n	8009c68 <_dtoa_r+0x708>
 8009bfe:	f7f6 fb4d 	bl	800029c <__adddf3>
 8009c02:	4642      	mov	r2, r8
 8009c04:	464b      	mov	r3, r9
 8009c06:	4606      	mov	r6, r0
 8009c08:	460f      	mov	r7, r1
 8009c0a:	f7f6 ff8d 	bl	8000b28 <__aeabi_dcmpgt>
 8009c0e:	b9c8      	cbnz	r0, 8009c44 <_dtoa_r+0x6e4>
 8009c10:	4642      	mov	r2, r8
 8009c12:	464b      	mov	r3, r9
 8009c14:	4630      	mov	r0, r6
 8009c16:	4639      	mov	r1, r7
 8009c18:	f7f6 ff5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c1c:	b110      	cbz	r0, 8009c24 <_dtoa_r+0x6c4>
 8009c1e:	9b01      	ldr	r3, [sp, #4]
 8009c20:	07db      	lsls	r3, r3, #31
 8009c22:	d40f      	bmi.n	8009c44 <_dtoa_r+0x6e4>
 8009c24:	4651      	mov	r1, sl
 8009c26:	4620      	mov	r0, r4
 8009c28:	f000 fbcc 	bl	800a3c4 <_Bfree>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c30:	702b      	strb	r3, [r5, #0]
 8009c32:	f10b 0301 	add.w	r3, fp, #1
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f43f ace2 	beq.w	8009604 <_dtoa_r+0xa4>
 8009c40:	601d      	str	r5, [r3, #0]
 8009c42:	e4df      	b.n	8009604 <_dtoa_r+0xa4>
 8009c44:	465f      	mov	r7, fp
 8009c46:	462b      	mov	r3, r5
 8009c48:	461d      	mov	r5, r3
 8009c4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c4e:	2a39      	cmp	r2, #57	; 0x39
 8009c50:	d106      	bne.n	8009c60 <_dtoa_r+0x700>
 8009c52:	9a00      	ldr	r2, [sp, #0]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d1f7      	bne.n	8009c48 <_dtoa_r+0x6e8>
 8009c58:	9900      	ldr	r1, [sp, #0]
 8009c5a:	2230      	movs	r2, #48	; 0x30
 8009c5c:	3701      	adds	r7, #1
 8009c5e:	700a      	strb	r2, [r1, #0]
 8009c60:	781a      	ldrb	r2, [r3, #0]
 8009c62:	3201      	adds	r2, #1
 8009c64:	701a      	strb	r2, [r3, #0]
 8009c66:	e790      	b.n	8009b8a <_dtoa_r+0x62a>
 8009c68:	4ba3      	ldr	r3, [pc, #652]	; (8009ef8 <_dtoa_r+0x998>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f7f6 fccc 	bl	8000608 <__aeabi_dmul>
 8009c70:	2200      	movs	r2, #0
 8009c72:	2300      	movs	r3, #0
 8009c74:	4606      	mov	r6, r0
 8009c76:	460f      	mov	r7, r1
 8009c78:	f7f6 ff2e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d09e      	beq.n	8009bbe <_dtoa_r+0x65e>
 8009c80:	e7d0      	b.n	8009c24 <_dtoa_r+0x6c4>
 8009c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c84:	2a00      	cmp	r2, #0
 8009c86:	f000 80ca 	beq.w	8009e1e <_dtoa_r+0x8be>
 8009c8a:	9a07      	ldr	r2, [sp, #28]
 8009c8c:	2a01      	cmp	r2, #1
 8009c8e:	f300 80ad 	bgt.w	8009dec <_dtoa_r+0x88c>
 8009c92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c94:	2a00      	cmp	r2, #0
 8009c96:	f000 80a5 	beq.w	8009de4 <_dtoa_r+0x884>
 8009c9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c9e:	9e08      	ldr	r6, [sp, #32]
 8009ca0:	9d05      	ldr	r5, [sp, #20]
 8009ca2:	9a05      	ldr	r2, [sp, #20]
 8009ca4:	441a      	add	r2, r3
 8009ca6:	9205      	str	r2, [sp, #20]
 8009ca8:	9a06      	ldr	r2, [sp, #24]
 8009caa:	2101      	movs	r1, #1
 8009cac:	441a      	add	r2, r3
 8009cae:	4620      	mov	r0, r4
 8009cb0:	9206      	str	r2, [sp, #24]
 8009cb2:	f000 fc3d 	bl	800a530 <__i2b>
 8009cb6:	4607      	mov	r7, r0
 8009cb8:	b165      	cbz	r5, 8009cd4 <_dtoa_r+0x774>
 8009cba:	9b06      	ldr	r3, [sp, #24]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	dd09      	ble.n	8009cd4 <_dtoa_r+0x774>
 8009cc0:	42ab      	cmp	r3, r5
 8009cc2:	9a05      	ldr	r2, [sp, #20]
 8009cc4:	bfa8      	it	ge
 8009cc6:	462b      	movge	r3, r5
 8009cc8:	1ad2      	subs	r2, r2, r3
 8009cca:	9205      	str	r2, [sp, #20]
 8009ccc:	9a06      	ldr	r2, [sp, #24]
 8009cce:	1aed      	subs	r5, r5, r3
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	9306      	str	r3, [sp, #24]
 8009cd4:	9b08      	ldr	r3, [sp, #32]
 8009cd6:	b1f3      	cbz	r3, 8009d16 <_dtoa_r+0x7b6>
 8009cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 80a3 	beq.w	8009e26 <_dtoa_r+0x8c6>
 8009ce0:	2e00      	cmp	r6, #0
 8009ce2:	dd10      	ble.n	8009d06 <_dtoa_r+0x7a6>
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	4632      	mov	r2, r6
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f000 fce1 	bl	800a6b0 <__pow5mult>
 8009cee:	4652      	mov	r2, sl
 8009cf0:	4601      	mov	r1, r0
 8009cf2:	4607      	mov	r7, r0
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 fc31 	bl	800a55c <__multiply>
 8009cfa:	4651      	mov	r1, sl
 8009cfc:	4680      	mov	r8, r0
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f000 fb60 	bl	800a3c4 <_Bfree>
 8009d04:	46c2      	mov	sl, r8
 8009d06:	9b08      	ldr	r3, [sp, #32]
 8009d08:	1b9a      	subs	r2, r3, r6
 8009d0a:	d004      	beq.n	8009d16 <_dtoa_r+0x7b6>
 8009d0c:	4651      	mov	r1, sl
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f000 fcce 	bl	800a6b0 <__pow5mult>
 8009d14:	4682      	mov	sl, r0
 8009d16:	2101      	movs	r1, #1
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f000 fc09 	bl	800a530 <__i2b>
 8009d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	4606      	mov	r6, r0
 8009d24:	f340 8081 	ble.w	8009e2a <_dtoa_r+0x8ca>
 8009d28:	461a      	mov	r2, r3
 8009d2a:	4601      	mov	r1, r0
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f000 fcbf 	bl	800a6b0 <__pow5mult>
 8009d32:	9b07      	ldr	r3, [sp, #28]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	4606      	mov	r6, r0
 8009d38:	dd7a      	ble.n	8009e30 <_dtoa_r+0x8d0>
 8009d3a:	f04f 0800 	mov.w	r8, #0
 8009d3e:	6933      	ldr	r3, [r6, #16]
 8009d40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d44:	6918      	ldr	r0, [r3, #16]
 8009d46:	f000 fba5 	bl	800a494 <__hi0bits>
 8009d4a:	f1c0 0020 	rsb	r0, r0, #32
 8009d4e:	9b06      	ldr	r3, [sp, #24]
 8009d50:	4418      	add	r0, r3
 8009d52:	f010 001f 	ands.w	r0, r0, #31
 8009d56:	f000 8094 	beq.w	8009e82 <_dtoa_r+0x922>
 8009d5a:	f1c0 0320 	rsb	r3, r0, #32
 8009d5e:	2b04      	cmp	r3, #4
 8009d60:	f340 8085 	ble.w	8009e6e <_dtoa_r+0x90e>
 8009d64:	9b05      	ldr	r3, [sp, #20]
 8009d66:	f1c0 001c 	rsb	r0, r0, #28
 8009d6a:	4403      	add	r3, r0
 8009d6c:	9305      	str	r3, [sp, #20]
 8009d6e:	9b06      	ldr	r3, [sp, #24]
 8009d70:	4403      	add	r3, r0
 8009d72:	4405      	add	r5, r0
 8009d74:	9306      	str	r3, [sp, #24]
 8009d76:	9b05      	ldr	r3, [sp, #20]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	dd05      	ble.n	8009d88 <_dtoa_r+0x828>
 8009d7c:	4651      	mov	r1, sl
 8009d7e:	461a      	mov	r2, r3
 8009d80:	4620      	mov	r0, r4
 8009d82:	f000 fcef 	bl	800a764 <__lshift>
 8009d86:	4682      	mov	sl, r0
 8009d88:	9b06      	ldr	r3, [sp, #24]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	dd05      	ble.n	8009d9a <_dtoa_r+0x83a>
 8009d8e:	4631      	mov	r1, r6
 8009d90:	461a      	mov	r2, r3
 8009d92:	4620      	mov	r0, r4
 8009d94:	f000 fce6 	bl	800a764 <__lshift>
 8009d98:	4606      	mov	r6, r0
 8009d9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d072      	beq.n	8009e86 <_dtoa_r+0x926>
 8009da0:	4631      	mov	r1, r6
 8009da2:	4650      	mov	r0, sl
 8009da4:	f000 fd4a 	bl	800a83c <__mcmp>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	da6c      	bge.n	8009e86 <_dtoa_r+0x926>
 8009dac:	2300      	movs	r3, #0
 8009dae:	4651      	mov	r1, sl
 8009db0:	220a      	movs	r2, #10
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 fb28 	bl	800a408 <__multadd>
 8009db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009dbe:	4682      	mov	sl, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f000 81b0 	beq.w	800a126 <_dtoa_r+0xbc6>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	4639      	mov	r1, r7
 8009dca:	220a      	movs	r2, #10
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 fb1b 	bl	800a408 <__multadd>
 8009dd2:	9b01      	ldr	r3, [sp, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	4607      	mov	r7, r0
 8009dd8:	f300 8096 	bgt.w	8009f08 <_dtoa_r+0x9a8>
 8009ddc:	9b07      	ldr	r3, [sp, #28]
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	dc59      	bgt.n	8009e96 <_dtoa_r+0x936>
 8009de2:	e091      	b.n	8009f08 <_dtoa_r+0x9a8>
 8009de4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009de6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009dea:	e758      	b.n	8009c9e <_dtoa_r+0x73e>
 8009dec:	9b04      	ldr	r3, [sp, #16]
 8009dee:	1e5e      	subs	r6, r3, #1
 8009df0:	9b08      	ldr	r3, [sp, #32]
 8009df2:	42b3      	cmp	r3, r6
 8009df4:	bfbf      	itttt	lt
 8009df6:	9b08      	ldrlt	r3, [sp, #32]
 8009df8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009dfa:	9608      	strlt	r6, [sp, #32]
 8009dfc:	1af3      	sublt	r3, r6, r3
 8009dfe:	bfb4      	ite	lt
 8009e00:	18d2      	addlt	r2, r2, r3
 8009e02:	1b9e      	subge	r6, r3, r6
 8009e04:	9b04      	ldr	r3, [sp, #16]
 8009e06:	bfbc      	itt	lt
 8009e08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009e0a:	2600      	movlt	r6, #0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	bfb7      	itett	lt
 8009e10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009e14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009e18:	1a9d      	sublt	r5, r3, r2
 8009e1a:	2300      	movlt	r3, #0
 8009e1c:	e741      	b.n	8009ca2 <_dtoa_r+0x742>
 8009e1e:	9e08      	ldr	r6, [sp, #32]
 8009e20:	9d05      	ldr	r5, [sp, #20]
 8009e22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e24:	e748      	b.n	8009cb8 <_dtoa_r+0x758>
 8009e26:	9a08      	ldr	r2, [sp, #32]
 8009e28:	e770      	b.n	8009d0c <_dtoa_r+0x7ac>
 8009e2a:	9b07      	ldr	r3, [sp, #28]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	dc19      	bgt.n	8009e64 <_dtoa_r+0x904>
 8009e30:	9b02      	ldr	r3, [sp, #8]
 8009e32:	b9bb      	cbnz	r3, 8009e64 <_dtoa_r+0x904>
 8009e34:	9b03      	ldr	r3, [sp, #12]
 8009e36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e3a:	b99b      	cbnz	r3, 8009e64 <_dtoa_r+0x904>
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e42:	0d1b      	lsrs	r3, r3, #20
 8009e44:	051b      	lsls	r3, r3, #20
 8009e46:	b183      	cbz	r3, 8009e6a <_dtoa_r+0x90a>
 8009e48:	9b05      	ldr	r3, [sp, #20]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	9305      	str	r3, [sp, #20]
 8009e4e:	9b06      	ldr	r3, [sp, #24]
 8009e50:	3301      	adds	r3, #1
 8009e52:	9306      	str	r3, [sp, #24]
 8009e54:	f04f 0801 	mov.w	r8, #1
 8009e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f47f af6f 	bne.w	8009d3e <_dtoa_r+0x7de>
 8009e60:	2001      	movs	r0, #1
 8009e62:	e774      	b.n	8009d4e <_dtoa_r+0x7ee>
 8009e64:	f04f 0800 	mov.w	r8, #0
 8009e68:	e7f6      	b.n	8009e58 <_dtoa_r+0x8f8>
 8009e6a:	4698      	mov	r8, r3
 8009e6c:	e7f4      	b.n	8009e58 <_dtoa_r+0x8f8>
 8009e6e:	d082      	beq.n	8009d76 <_dtoa_r+0x816>
 8009e70:	9a05      	ldr	r2, [sp, #20]
 8009e72:	331c      	adds	r3, #28
 8009e74:	441a      	add	r2, r3
 8009e76:	9205      	str	r2, [sp, #20]
 8009e78:	9a06      	ldr	r2, [sp, #24]
 8009e7a:	441a      	add	r2, r3
 8009e7c:	441d      	add	r5, r3
 8009e7e:	9206      	str	r2, [sp, #24]
 8009e80:	e779      	b.n	8009d76 <_dtoa_r+0x816>
 8009e82:	4603      	mov	r3, r0
 8009e84:	e7f4      	b.n	8009e70 <_dtoa_r+0x910>
 8009e86:	9b04      	ldr	r3, [sp, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	dc37      	bgt.n	8009efc <_dtoa_r+0x99c>
 8009e8c:	9b07      	ldr	r3, [sp, #28]
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	dd34      	ble.n	8009efc <_dtoa_r+0x99c>
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	9b01      	ldr	r3, [sp, #4]
 8009e98:	b963      	cbnz	r3, 8009eb4 <_dtoa_r+0x954>
 8009e9a:	4631      	mov	r1, r6
 8009e9c:	2205      	movs	r2, #5
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f000 fab2 	bl	800a408 <__multadd>
 8009ea4:	4601      	mov	r1, r0
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	4650      	mov	r0, sl
 8009eaa:	f000 fcc7 	bl	800a83c <__mcmp>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	f73f adbb 	bgt.w	8009a2a <_dtoa_r+0x4ca>
 8009eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb6:	9d00      	ldr	r5, [sp, #0]
 8009eb8:	ea6f 0b03 	mvn.w	fp, r3
 8009ebc:	f04f 0800 	mov.w	r8, #0
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f000 fa7e 	bl	800a3c4 <_Bfree>
 8009ec8:	2f00      	cmp	r7, #0
 8009eca:	f43f aeab 	beq.w	8009c24 <_dtoa_r+0x6c4>
 8009ece:	f1b8 0f00 	cmp.w	r8, #0
 8009ed2:	d005      	beq.n	8009ee0 <_dtoa_r+0x980>
 8009ed4:	45b8      	cmp	r8, r7
 8009ed6:	d003      	beq.n	8009ee0 <_dtoa_r+0x980>
 8009ed8:	4641      	mov	r1, r8
 8009eda:	4620      	mov	r0, r4
 8009edc:	f000 fa72 	bl	800a3c4 <_Bfree>
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f000 fa6e 	bl	800a3c4 <_Bfree>
 8009ee8:	e69c      	b.n	8009c24 <_dtoa_r+0x6c4>
 8009eea:	2600      	movs	r6, #0
 8009eec:	4637      	mov	r7, r6
 8009eee:	e7e1      	b.n	8009eb4 <_dtoa_r+0x954>
 8009ef0:	46bb      	mov	fp, r7
 8009ef2:	4637      	mov	r7, r6
 8009ef4:	e599      	b.n	8009a2a <_dtoa_r+0x4ca>
 8009ef6:	bf00      	nop
 8009ef8:	40240000 	.word	0x40240000
 8009efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f000 80c8 	beq.w	800a094 <_dtoa_r+0xb34>
 8009f04:	9b04      	ldr	r3, [sp, #16]
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	2d00      	cmp	r5, #0
 8009f0a:	dd05      	ble.n	8009f18 <_dtoa_r+0x9b8>
 8009f0c:	4639      	mov	r1, r7
 8009f0e:	462a      	mov	r2, r5
 8009f10:	4620      	mov	r0, r4
 8009f12:	f000 fc27 	bl	800a764 <__lshift>
 8009f16:	4607      	mov	r7, r0
 8009f18:	f1b8 0f00 	cmp.w	r8, #0
 8009f1c:	d05b      	beq.n	8009fd6 <_dtoa_r+0xa76>
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	4620      	mov	r0, r4
 8009f22:	f000 fa0f 	bl	800a344 <_Balloc>
 8009f26:	4605      	mov	r5, r0
 8009f28:	b928      	cbnz	r0, 8009f36 <_dtoa_r+0x9d6>
 8009f2a:	4b83      	ldr	r3, [pc, #524]	; (800a138 <_dtoa_r+0xbd8>)
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009f32:	f7ff bb2e 	b.w	8009592 <_dtoa_r+0x32>
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	3202      	adds	r2, #2
 8009f3a:	0092      	lsls	r2, r2, #2
 8009f3c:	f107 010c 	add.w	r1, r7, #12
 8009f40:	300c      	adds	r0, #12
 8009f42:	f000 fe39 	bl	800abb8 <memcpy>
 8009f46:	2201      	movs	r2, #1
 8009f48:	4629      	mov	r1, r5
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f000 fc0a 	bl	800a764 <__lshift>
 8009f50:	9b00      	ldr	r3, [sp, #0]
 8009f52:	3301      	adds	r3, #1
 8009f54:	9304      	str	r3, [sp, #16]
 8009f56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	9308      	str	r3, [sp, #32]
 8009f5e:	9b02      	ldr	r3, [sp, #8]
 8009f60:	f003 0301 	and.w	r3, r3, #1
 8009f64:	46b8      	mov	r8, r7
 8009f66:	9306      	str	r3, [sp, #24]
 8009f68:	4607      	mov	r7, r0
 8009f6a:	9b04      	ldr	r3, [sp, #16]
 8009f6c:	4631      	mov	r1, r6
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	4650      	mov	r0, sl
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	f7ff fa6b 	bl	800944e <quorem>
 8009f78:	4641      	mov	r1, r8
 8009f7a:	9002      	str	r0, [sp, #8]
 8009f7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f80:	4650      	mov	r0, sl
 8009f82:	f000 fc5b 	bl	800a83c <__mcmp>
 8009f86:	463a      	mov	r2, r7
 8009f88:	9005      	str	r0, [sp, #20]
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f000 fc71 	bl	800a874 <__mdiff>
 8009f92:	68c2      	ldr	r2, [r0, #12]
 8009f94:	4605      	mov	r5, r0
 8009f96:	bb02      	cbnz	r2, 8009fda <_dtoa_r+0xa7a>
 8009f98:	4601      	mov	r1, r0
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	f000 fc4e 	bl	800a83c <__mcmp>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	4629      	mov	r1, r5
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	9209      	str	r2, [sp, #36]	; 0x24
 8009fa8:	f000 fa0c 	bl	800a3c4 <_Bfree>
 8009fac:	9b07      	ldr	r3, [sp, #28]
 8009fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fb0:	9d04      	ldr	r5, [sp, #16]
 8009fb2:	ea43 0102 	orr.w	r1, r3, r2
 8009fb6:	9b06      	ldr	r3, [sp, #24]
 8009fb8:	4319      	orrs	r1, r3
 8009fba:	d110      	bne.n	8009fde <_dtoa_r+0xa7e>
 8009fbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009fc0:	d029      	beq.n	800a016 <_dtoa_r+0xab6>
 8009fc2:	9b05      	ldr	r3, [sp, #20]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	dd02      	ble.n	8009fce <_dtoa_r+0xa6e>
 8009fc8:	9b02      	ldr	r3, [sp, #8]
 8009fca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009fce:	9b01      	ldr	r3, [sp, #4]
 8009fd0:	f883 9000 	strb.w	r9, [r3]
 8009fd4:	e774      	b.n	8009ec0 <_dtoa_r+0x960>
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	e7ba      	b.n	8009f50 <_dtoa_r+0x9f0>
 8009fda:	2201      	movs	r2, #1
 8009fdc:	e7e1      	b.n	8009fa2 <_dtoa_r+0xa42>
 8009fde:	9b05      	ldr	r3, [sp, #20]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	db04      	blt.n	8009fee <_dtoa_r+0xa8e>
 8009fe4:	9907      	ldr	r1, [sp, #28]
 8009fe6:	430b      	orrs	r3, r1
 8009fe8:	9906      	ldr	r1, [sp, #24]
 8009fea:	430b      	orrs	r3, r1
 8009fec:	d120      	bne.n	800a030 <_dtoa_r+0xad0>
 8009fee:	2a00      	cmp	r2, #0
 8009ff0:	dded      	ble.n	8009fce <_dtoa_r+0xa6e>
 8009ff2:	4651      	mov	r1, sl
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f000 fbb4 	bl	800a764 <__lshift>
 8009ffc:	4631      	mov	r1, r6
 8009ffe:	4682      	mov	sl, r0
 800a000:	f000 fc1c 	bl	800a83c <__mcmp>
 800a004:	2800      	cmp	r0, #0
 800a006:	dc03      	bgt.n	800a010 <_dtoa_r+0xab0>
 800a008:	d1e1      	bne.n	8009fce <_dtoa_r+0xa6e>
 800a00a:	f019 0f01 	tst.w	r9, #1
 800a00e:	d0de      	beq.n	8009fce <_dtoa_r+0xa6e>
 800a010:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a014:	d1d8      	bne.n	8009fc8 <_dtoa_r+0xa68>
 800a016:	9a01      	ldr	r2, [sp, #4]
 800a018:	2339      	movs	r3, #57	; 0x39
 800a01a:	7013      	strb	r3, [r2, #0]
 800a01c:	462b      	mov	r3, r5
 800a01e:	461d      	mov	r5, r3
 800a020:	3b01      	subs	r3, #1
 800a022:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a026:	2a39      	cmp	r2, #57	; 0x39
 800a028:	d06c      	beq.n	800a104 <_dtoa_r+0xba4>
 800a02a:	3201      	adds	r2, #1
 800a02c:	701a      	strb	r2, [r3, #0]
 800a02e:	e747      	b.n	8009ec0 <_dtoa_r+0x960>
 800a030:	2a00      	cmp	r2, #0
 800a032:	dd07      	ble.n	800a044 <_dtoa_r+0xae4>
 800a034:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a038:	d0ed      	beq.n	800a016 <_dtoa_r+0xab6>
 800a03a:	9a01      	ldr	r2, [sp, #4]
 800a03c:	f109 0301 	add.w	r3, r9, #1
 800a040:	7013      	strb	r3, [r2, #0]
 800a042:	e73d      	b.n	8009ec0 <_dtoa_r+0x960>
 800a044:	9b04      	ldr	r3, [sp, #16]
 800a046:	9a08      	ldr	r2, [sp, #32]
 800a048:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d043      	beq.n	800a0d8 <_dtoa_r+0xb78>
 800a050:	4651      	mov	r1, sl
 800a052:	2300      	movs	r3, #0
 800a054:	220a      	movs	r2, #10
 800a056:	4620      	mov	r0, r4
 800a058:	f000 f9d6 	bl	800a408 <__multadd>
 800a05c:	45b8      	cmp	r8, r7
 800a05e:	4682      	mov	sl, r0
 800a060:	f04f 0300 	mov.w	r3, #0
 800a064:	f04f 020a 	mov.w	r2, #10
 800a068:	4641      	mov	r1, r8
 800a06a:	4620      	mov	r0, r4
 800a06c:	d107      	bne.n	800a07e <_dtoa_r+0xb1e>
 800a06e:	f000 f9cb 	bl	800a408 <__multadd>
 800a072:	4680      	mov	r8, r0
 800a074:	4607      	mov	r7, r0
 800a076:	9b04      	ldr	r3, [sp, #16]
 800a078:	3301      	adds	r3, #1
 800a07a:	9304      	str	r3, [sp, #16]
 800a07c:	e775      	b.n	8009f6a <_dtoa_r+0xa0a>
 800a07e:	f000 f9c3 	bl	800a408 <__multadd>
 800a082:	4639      	mov	r1, r7
 800a084:	4680      	mov	r8, r0
 800a086:	2300      	movs	r3, #0
 800a088:	220a      	movs	r2, #10
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 f9bc 	bl	800a408 <__multadd>
 800a090:	4607      	mov	r7, r0
 800a092:	e7f0      	b.n	800a076 <_dtoa_r+0xb16>
 800a094:	9b04      	ldr	r3, [sp, #16]
 800a096:	9301      	str	r3, [sp, #4]
 800a098:	9d00      	ldr	r5, [sp, #0]
 800a09a:	4631      	mov	r1, r6
 800a09c:	4650      	mov	r0, sl
 800a09e:	f7ff f9d6 	bl	800944e <quorem>
 800a0a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a0a6:	9b00      	ldr	r3, [sp, #0]
 800a0a8:	f805 9b01 	strb.w	r9, [r5], #1
 800a0ac:	1aea      	subs	r2, r5, r3
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	dd07      	ble.n	800a0c4 <_dtoa_r+0xb64>
 800a0b4:	4651      	mov	r1, sl
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	220a      	movs	r2, #10
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 f9a4 	bl	800a408 <__multadd>
 800a0c0:	4682      	mov	sl, r0
 800a0c2:	e7ea      	b.n	800a09a <_dtoa_r+0xb3a>
 800a0c4:	9b01      	ldr	r3, [sp, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	bfc8      	it	gt
 800a0ca:	461d      	movgt	r5, r3
 800a0cc:	9b00      	ldr	r3, [sp, #0]
 800a0ce:	bfd8      	it	le
 800a0d0:	2501      	movle	r5, #1
 800a0d2:	441d      	add	r5, r3
 800a0d4:	f04f 0800 	mov.w	r8, #0
 800a0d8:	4651      	mov	r1, sl
 800a0da:	2201      	movs	r2, #1
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f000 fb41 	bl	800a764 <__lshift>
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	4682      	mov	sl, r0
 800a0e6:	f000 fba9 	bl	800a83c <__mcmp>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	dc96      	bgt.n	800a01c <_dtoa_r+0xabc>
 800a0ee:	d102      	bne.n	800a0f6 <_dtoa_r+0xb96>
 800a0f0:	f019 0f01 	tst.w	r9, #1
 800a0f4:	d192      	bne.n	800a01c <_dtoa_r+0xabc>
 800a0f6:	462b      	mov	r3, r5
 800a0f8:	461d      	mov	r5, r3
 800a0fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0fe:	2a30      	cmp	r2, #48	; 0x30
 800a100:	d0fa      	beq.n	800a0f8 <_dtoa_r+0xb98>
 800a102:	e6dd      	b.n	8009ec0 <_dtoa_r+0x960>
 800a104:	9a00      	ldr	r2, [sp, #0]
 800a106:	429a      	cmp	r2, r3
 800a108:	d189      	bne.n	800a01e <_dtoa_r+0xabe>
 800a10a:	f10b 0b01 	add.w	fp, fp, #1
 800a10e:	2331      	movs	r3, #49	; 0x31
 800a110:	e796      	b.n	800a040 <_dtoa_r+0xae0>
 800a112:	4b0a      	ldr	r3, [pc, #40]	; (800a13c <_dtoa_r+0xbdc>)
 800a114:	f7ff ba99 	b.w	800964a <_dtoa_r+0xea>
 800a118:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f47f aa6d 	bne.w	80095fa <_dtoa_r+0x9a>
 800a120:	4b07      	ldr	r3, [pc, #28]	; (800a140 <_dtoa_r+0xbe0>)
 800a122:	f7ff ba92 	b.w	800964a <_dtoa_r+0xea>
 800a126:	9b01      	ldr	r3, [sp, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	dcb5      	bgt.n	800a098 <_dtoa_r+0xb38>
 800a12c:	9b07      	ldr	r3, [sp, #28]
 800a12e:	2b02      	cmp	r3, #2
 800a130:	f73f aeb1 	bgt.w	8009e96 <_dtoa_r+0x936>
 800a134:	e7b0      	b.n	800a098 <_dtoa_r+0xb38>
 800a136:	bf00      	nop
 800a138:	0800b2d0 	.word	0x0800b2d0
 800a13c:	0800b230 	.word	0x0800b230
 800a140:	0800b254 	.word	0x0800b254

0800a144 <_free_r>:
 800a144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a146:	2900      	cmp	r1, #0
 800a148:	d044      	beq.n	800a1d4 <_free_r+0x90>
 800a14a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a14e:	9001      	str	r0, [sp, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	f1a1 0404 	sub.w	r4, r1, #4
 800a156:	bfb8      	it	lt
 800a158:	18e4      	addlt	r4, r4, r3
 800a15a:	f000 f8e7 	bl	800a32c <__malloc_lock>
 800a15e:	4a1e      	ldr	r2, [pc, #120]	; (800a1d8 <_free_r+0x94>)
 800a160:	9801      	ldr	r0, [sp, #4]
 800a162:	6813      	ldr	r3, [r2, #0]
 800a164:	b933      	cbnz	r3, 800a174 <_free_r+0x30>
 800a166:	6063      	str	r3, [r4, #4]
 800a168:	6014      	str	r4, [r2, #0]
 800a16a:	b003      	add	sp, #12
 800a16c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a170:	f000 b8e2 	b.w	800a338 <__malloc_unlock>
 800a174:	42a3      	cmp	r3, r4
 800a176:	d908      	bls.n	800a18a <_free_r+0x46>
 800a178:	6825      	ldr	r5, [r4, #0]
 800a17a:	1961      	adds	r1, r4, r5
 800a17c:	428b      	cmp	r3, r1
 800a17e:	bf01      	itttt	eq
 800a180:	6819      	ldreq	r1, [r3, #0]
 800a182:	685b      	ldreq	r3, [r3, #4]
 800a184:	1949      	addeq	r1, r1, r5
 800a186:	6021      	streq	r1, [r4, #0]
 800a188:	e7ed      	b.n	800a166 <_free_r+0x22>
 800a18a:	461a      	mov	r2, r3
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	b10b      	cbz	r3, 800a194 <_free_r+0x50>
 800a190:	42a3      	cmp	r3, r4
 800a192:	d9fa      	bls.n	800a18a <_free_r+0x46>
 800a194:	6811      	ldr	r1, [r2, #0]
 800a196:	1855      	adds	r5, r2, r1
 800a198:	42a5      	cmp	r5, r4
 800a19a:	d10b      	bne.n	800a1b4 <_free_r+0x70>
 800a19c:	6824      	ldr	r4, [r4, #0]
 800a19e:	4421      	add	r1, r4
 800a1a0:	1854      	adds	r4, r2, r1
 800a1a2:	42a3      	cmp	r3, r4
 800a1a4:	6011      	str	r1, [r2, #0]
 800a1a6:	d1e0      	bne.n	800a16a <_free_r+0x26>
 800a1a8:	681c      	ldr	r4, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	6053      	str	r3, [r2, #4]
 800a1ae:	440c      	add	r4, r1
 800a1b0:	6014      	str	r4, [r2, #0]
 800a1b2:	e7da      	b.n	800a16a <_free_r+0x26>
 800a1b4:	d902      	bls.n	800a1bc <_free_r+0x78>
 800a1b6:	230c      	movs	r3, #12
 800a1b8:	6003      	str	r3, [r0, #0]
 800a1ba:	e7d6      	b.n	800a16a <_free_r+0x26>
 800a1bc:	6825      	ldr	r5, [r4, #0]
 800a1be:	1961      	adds	r1, r4, r5
 800a1c0:	428b      	cmp	r3, r1
 800a1c2:	bf04      	itt	eq
 800a1c4:	6819      	ldreq	r1, [r3, #0]
 800a1c6:	685b      	ldreq	r3, [r3, #4]
 800a1c8:	6063      	str	r3, [r4, #4]
 800a1ca:	bf04      	itt	eq
 800a1cc:	1949      	addeq	r1, r1, r5
 800a1ce:	6021      	streq	r1, [r4, #0]
 800a1d0:	6054      	str	r4, [r2, #4]
 800a1d2:	e7ca      	b.n	800a16a <_free_r+0x26>
 800a1d4:	b003      	add	sp, #12
 800a1d6:	bd30      	pop	{r4, r5, pc}
 800a1d8:	200007b4 	.word	0x200007b4

0800a1dc <malloc>:
 800a1dc:	4b02      	ldr	r3, [pc, #8]	; (800a1e8 <malloc+0xc>)
 800a1de:	4601      	mov	r1, r0
 800a1e0:	6818      	ldr	r0, [r3, #0]
 800a1e2:	f000 b823 	b.w	800a22c <_malloc_r>
 800a1e6:	bf00      	nop
 800a1e8:	20000100 	.word	0x20000100

0800a1ec <sbrk_aligned>:
 800a1ec:	b570      	push	{r4, r5, r6, lr}
 800a1ee:	4e0e      	ldr	r6, [pc, #56]	; (800a228 <sbrk_aligned+0x3c>)
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	6831      	ldr	r1, [r6, #0]
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	b911      	cbnz	r1, 800a1fe <sbrk_aligned+0x12>
 800a1f8:	f000 fcce 	bl	800ab98 <_sbrk_r>
 800a1fc:	6030      	str	r0, [r6, #0]
 800a1fe:	4621      	mov	r1, r4
 800a200:	4628      	mov	r0, r5
 800a202:	f000 fcc9 	bl	800ab98 <_sbrk_r>
 800a206:	1c43      	adds	r3, r0, #1
 800a208:	d00a      	beq.n	800a220 <sbrk_aligned+0x34>
 800a20a:	1cc4      	adds	r4, r0, #3
 800a20c:	f024 0403 	bic.w	r4, r4, #3
 800a210:	42a0      	cmp	r0, r4
 800a212:	d007      	beq.n	800a224 <sbrk_aligned+0x38>
 800a214:	1a21      	subs	r1, r4, r0
 800a216:	4628      	mov	r0, r5
 800a218:	f000 fcbe 	bl	800ab98 <_sbrk_r>
 800a21c:	3001      	adds	r0, #1
 800a21e:	d101      	bne.n	800a224 <sbrk_aligned+0x38>
 800a220:	f04f 34ff 	mov.w	r4, #4294967295
 800a224:	4620      	mov	r0, r4
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	200007b8 	.word	0x200007b8

0800a22c <_malloc_r>:
 800a22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a230:	1ccd      	adds	r5, r1, #3
 800a232:	f025 0503 	bic.w	r5, r5, #3
 800a236:	3508      	adds	r5, #8
 800a238:	2d0c      	cmp	r5, #12
 800a23a:	bf38      	it	cc
 800a23c:	250c      	movcc	r5, #12
 800a23e:	2d00      	cmp	r5, #0
 800a240:	4607      	mov	r7, r0
 800a242:	db01      	blt.n	800a248 <_malloc_r+0x1c>
 800a244:	42a9      	cmp	r1, r5
 800a246:	d905      	bls.n	800a254 <_malloc_r+0x28>
 800a248:	230c      	movs	r3, #12
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	2600      	movs	r6, #0
 800a24e:	4630      	mov	r0, r6
 800a250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a254:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a328 <_malloc_r+0xfc>
 800a258:	f000 f868 	bl	800a32c <__malloc_lock>
 800a25c:	f8d8 3000 	ldr.w	r3, [r8]
 800a260:	461c      	mov	r4, r3
 800a262:	bb5c      	cbnz	r4, 800a2bc <_malloc_r+0x90>
 800a264:	4629      	mov	r1, r5
 800a266:	4638      	mov	r0, r7
 800a268:	f7ff ffc0 	bl	800a1ec <sbrk_aligned>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	4604      	mov	r4, r0
 800a270:	d155      	bne.n	800a31e <_malloc_r+0xf2>
 800a272:	f8d8 4000 	ldr.w	r4, [r8]
 800a276:	4626      	mov	r6, r4
 800a278:	2e00      	cmp	r6, #0
 800a27a:	d145      	bne.n	800a308 <_malloc_r+0xdc>
 800a27c:	2c00      	cmp	r4, #0
 800a27e:	d048      	beq.n	800a312 <_malloc_r+0xe6>
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	4631      	mov	r1, r6
 800a284:	4638      	mov	r0, r7
 800a286:	eb04 0903 	add.w	r9, r4, r3
 800a28a:	f000 fc85 	bl	800ab98 <_sbrk_r>
 800a28e:	4581      	cmp	r9, r0
 800a290:	d13f      	bne.n	800a312 <_malloc_r+0xe6>
 800a292:	6821      	ldr	r1, [r4, #0]
 800a294:	1a6d      	subs	r5, r5, r1
 800a296:	4629      	mov	r1, r5
 800a298:	4638      	mov	r0, r7
 800a29a:	f7ff ffa7 	bl	800a1ec <sbrk_aligned>
 800a29e:	3001      	adds	r0, #1
 800a2a0:	d037      	beq.n	800a312 <_malloc_r+0xe6>
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	442b      	add	r3, r5
 800a2a6:	6023      	str	r3, [r4, #0]
 800a2a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d038      	beq.n	800a322 <_malloc_r+0xf6>
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	42a2      	cmp	r2, r4
 800a2b4:	d12b      	bne.n	800a30e <_malloc_r+0xe2>
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	605a      	str	r2, [r3, #4]
 800a2ba:	e00f      	b.n	800a2dc <_malloc_r+0xb0>
 800a2bc:	6822      	ldr	r2, [r4, #0]
 800a2be:	1b52      	subs	r2, r2, r5
 800a2c0:	d41f      	bmi.n	800a302 <_malloc_r+0xd6>
 800a2c2:	2a0b      	cmp	r2, #11
 800a2c4:	d917      	bls.n	800a2f6 <_malloc_r+0xca>
 800a2c6:	1961      	adds	r1, r4, r5
 800a2c8:	42a3      	cmp	r3, r4
 800a2ca:	6025      	str	r5, [r4, #0]
 800a2cc:	bf18      	it	ne
 800a2ce:	6059      	strne	r1, [r3, #4]
 800a2d0:	6863      	ldr	r3, [r4, #4]
 800a2d2:	bf08      	it	eq
 800a2d4:	f8c8 1000 	streq.w	r1, [r8]
 800a2d8:	5162      	str	r2, [r4, r5]
 800a2da:	604b      	str	r3, [r1, #4]
 800a2dc:	4638      	mov	r0, r7
 800a2de:	f104 060b 	add.w	r6, r4, #11
 800a2e2:	f000 f829 	bl	800a338 <__malloc_unlock>
 800a2e6:	f026 0607 	bic.w	r6, r6, #7
 800a2ea:	1d23      	adds	r3, r4, #4
 800a2ec:	1af2      	subs	r2, r6, r3
 800a2ee:	d0ae      	beq.n	800a24e <_malloc_r+0x22>
 800a2f0:	1b9b      	subs	r3, r3, r6
 800a2f2:	50a3      	str	r3, [r4, r2]
 800a2f4:	e7ab      	b.n	800a24e <_malloc_r+0x22>
 800a2f6:	42a3      	cmp	r3, r4
 800a2f8:	6862      	ldr	r2, [r4, #4]
 800a2fa:	d1dd      	bne.n	800a2b8 <_malloc_r+0x8c>
 800a2fc:	f8c8 2000 	str.w	r2, [r8]
 800a300:	e7ec      	b.n	800a2dc <_malloc_r+0xb0>
 800a302:	4623      	mov	r3, r4
 800a304:	6864      	ldr	r4, [r4, #4]
 800a306:	e7ac      	b.n	800a262 <_malloc_r+0x36>
 800a308:	4634      	mov	r4, r6
 800a30a:	6876      	ldr	r6, [r6, #4]
 800a30c:	e7b4      	b.n	800a278 <_malloc_r+0x4c>
 800a30e:	4613      	mov	r3, r2
 800a310:	e7cc      	b.n	800a2ac <_malloc_r+0x80>
 800a312:	230c      	movs	r3, #12
 800a314:	603b      	str	r3, [r7, #0]
 800a316:	4638      	mov	r0, r7
 800a318:	f000 f80e 	bl	800a338 <__malloc_unlock>
 800a31c:	e797      	b.n	800a24e <_malloc_r+0x22>
 800a31e:	6025      	str	r5, [r4, #0]
 800a320:	e7dc      	b.n	800a2dc <_malloc_r+0xb0>
 800a322:	605b      	str	r3, [r3, #4]
 800a324:	deff      	udf	#255	; 0xff
 800a326:	bf00      	nop
 800a328:	200007b4 	.word	0x200007b4

0800a32c <__malloc_lock>:
 800a32c:	4801      	ldr	r0, [pc, #4]	; (800a334 <__malloc_lock+0x8>)
 800a32e:	f7ff b88c 	b.w	800944a <__retarget_lock_acquire_recursive>
 800a332:	bf00      	nop
 800a334:	200007b0 	.word	0x200007b0

0800a338 <__malloc_unlock>:
 800a338:	4801      	ldr	r0, [pc, #4]	; (800a340 <__malloc_unlock+0x8>)
 800a33a:	f7ff b887 	b.w	800944c <__retarget_lock_release_recursive>
 800a33e:	bf00      	nop
 800a340:	200007b0 	.word	0x200007b0

0800a344 <_Balloc>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	69c6      	ldr	r6, [r0, #28]
 800a348:	4604      	mov	r4, r0
 800a34a:	460d      	mov	r5, r1
 800a34c:	b976      	cbnz	r6, 800a36c <_Balloc+0x28>
 800a34e:	2010      	movs	r0, #16
 800a350:	f7ff ff44 	bl	800a1dc <malloc>
 800a354:	4602      	mov	r2, r0
 800a356:	61e0      	str	r0, [r4, #28]
 800a358:	b920      	cbnz	r0, 800a364 <_Balloc+0x20>
 800a35a:	4b18      	ldr	r3, [pc, #96]	; (800a3bc <_Balloc+0x78>)
 800a35c:	4818      	ldr	r0, [pc, #96]	; (800a3c0 <_Balloc+0x7c>)
 800a35e:	216b      	movs	r1, #107	; 0x6b
 800a360:	f000 fc38 	bl	800abd4 <__assert_func>
 800a364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a368:	6006      	str	r6, [r0, #0]
 800a36a:	60c6      	str	r6, [r0, #12]
 800a36c:	69e6      	ldr	r6, [r4, #28]
 800a36e:	68f3      	ldr	r3, [r6, #12]
 800a370:	b183      	cbz	r3, 800a394 <_Balloc+0x50>
 800a372:	69e3      	ldr	r3, [r4, #28]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a37a:	b9b8      	cbnz	r0, 800a3ac <_Balloc+0x68>
 800a37c:	2101      	movs	r1, #1
 800a37e:	fa01 f605 	lsl.w	r6, r1, r5
 800a382:	1d72      	adds	r2, r6, #5
 800a384:	0092      	lsls	r2, r2, #2
 800a386:	4620      	mov	r0, r4
 800a388:	f000 fc42 	bl	800ac10 <_calloc_r>
 800a38c:	b160      	cbz	r0, 800a3a8 <_Balloc+0x64>
 800a38e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a392:	e00e      	b.n	800a3b2 <_Balloc+0x6e>
 800a394:	2221      	movs	r2, #33	; 0x21
 800a396:	2104      	movs	r1, #4
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 fc39 	bl	800ac10 <_calloc_r>
 800a39e:	69e3      	ldr	r3, [r4, #28]
 800a3a0:	60f0      	str	r0, [r6, #12]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1e4      	bne.n	800a372 <_Balloc+0x2e>
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	bd70      	pop	{r4, r5, r6, pc}
 800a3ac:	6802      	ldr	r2, [r0, #0]
 800a3ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3b8:	e7f7      	b.n	800a3aa <_Balloc+0x66>
 800a3ba:	bf00      	nop
 800a3bc:	0800b261 	.word	0x0800b261
 800a3c0:	0800b2e1 	.word	0x0800b2e1

0800a3c4 <_Bfree>:
 800a3c4:	b570      	push	{r4, r5, r6, lr}
 800a3c6:	69c6      	ldr	r6, [r0, #28]
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	b976      	cbnz	r6, 800a3ec <_Bfree+0x28>
 800a3ce:	2010      	movs	r0, #16
 800a3d0:	f7ff ff04 	bl	800a1dc <malloc>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	61e8      	str	r0, [r5, #28]
 800a3d8:	b920      	cbnz	r0, 800a3e4 <_Bfree+0x20>
 800a3da:	4b09      	ldr	r3, [pc, #36]	; (800a400 <_Bfree+0x3c>)
 800a3dc:	4809      	ldr	r0, [pc, #36]	; (800a404 <_Bfree+0x40>)
 800a3de:	218f      	movs	r1, #143	; 0x8f
 800a3e0:	f000 fbf8 	bl	800abd4 <__assert_func>
 800a3e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3e8:	6006      	str	r6, [r0, #0]
 800a3ea:	60c6      	str	r6, [r0, #12]
 800a3ec:	b13c      	cbz	r4, 800a3fe <_Bfree+0x3a>
 800a3ee:	69eb      	ldr	r3, [r5, #28]
 800a3f0:	6862      	ldr	r2, [r4, #4]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3f8:	6021      	str	r1, [r4, #0]
 800a3fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3fe:	bd70      	pop	{r4, r5, r6, pc}
 800a400:	0800b261 	.word	0x0800b261
 800a404:	0800b2e1 	.word	0x0800b2e1

0800a408 <__multadd>:
 800a408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40c:	690d      	ldr	r5, [r1, #16]
 800a40e:	4607      	mov	r7, r0
 800a410:	460c      	mov	r4, r1
 800a412:	461e      	mov	r6, r3
 800a414:	f101 0c14 	add.w	ip, r1, #20
 800a418:	2000      	movs	r0, #0
 800a41a:	f8dc 3000 	ldr.w	r3, [ip]
 800a41e:	b299      	uxth	r1, r3
 800a420:	fb02 6101 	mla	r1, r2, r1, r6
 800a424:	0c1e      	lsrs	r6, r3, #16
 800a426:	0c0b      	lsrs	r3, r1, #16
 800a428:	fb02 3306 	mla	r3, r2, r6, r3
 800a42c:	b289      	uxth	r1, r1
 800a42e:	3001      	adds	r0, #1
 800a430:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a434:	4285      	cmp	r5, r0
 800a436:	f84c 1b04 	str.w	r1, [ip], #4
 800a43a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a43e:	dcec      	bgt.n	800a41a <__multadd+0x12>
 800a440:	b30e      	cbz	r6, 800a486 <__multadd+0x7e>
 800a442:	68a3      	ldr	r3, [r4, #8]
 800a444:	42ab      	cmp	r3, r5
 800a446:	dc19      	bgt.n	800a47c <__multadd+0x74>
 800a448:	6861      	ldr	r1, [r4, #4]
 800a44a:	4638      	mov	r0, r7
 800a44c:	3101      	adds	r1, #1
 800a44e:	f7ff ff79 	bl	800a344 <_Balloc>
 800a452:	4680      	mov	r8, r0
 800a454:	b928      	cbnz	r0, 800a462 <__multadd+0x5a>
 800a456:	4602      	mov	r2, r0
 800a458:	4b0c      	ldr	r3, [pc, #48]	; (800a48c <__multadd+0x84>)
 800a45a:	480d      	ldr	r0, [pc, #52]	; (800a490 <__multadd+0x88>)
 800a45c:	21ba      	movs	r1, #186	; 0xba
 800a45e:	f000 fbb9 	bl	800abd4 <__assert_func>
 800a462:	6922      	ldr	r2, [r4, #16]
 800a464:	3202      	adds	r2, #2
 800a466:	f104 010c 	add.w	r1, r4, #12
 800a46a:	0092      	lsls	r2, r2, #2
 800a46c:	300c      	adds	r0, #12
 800a46e:	f000 fba3 	bl	800abb8 <memcpy>
 800a472:	4621      	mov	r1, r4
 800a474:	4638      	mov	r0, r7
 800a476:	f7ff ffa5 	bl	800a3c4 <_Bfree>
 800a47a:	4644      	mov	r4, r8
 800a47c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a480:	3501      	adds	r5, #1
 800a482:	615e      	str	r6, [r3, #20]
 800a484:	6125      	str	r5, [r4, #16]
 800a486:	4620      	mov	r0, r4
 800a488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a48c:	0800b2d0 	.word	0x0800b2d0
 800a490:	0800b2e1 	.word	0x0800b2e1

0800a494 <__hi0bits>:
 800a494:	0c03      	lsrs	r3, r0, #16
 800a496:	041b      	lsls	r3, r3, #16
 800a498:	b9d3      	cbnz	r3, 800a4d0 <__hi0bits+0x3c>
 800a49a:	0400      	lsls	r0, r0, #16
 800a49c:	2310      	movs	r3, #16
 800a49e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a4a2:	bf04      	itt	eq
 800a4a4:	0200      	lsleq	r0, r0, #8
 800a4a6:	3308      	addeq	r3, #8
 800a4a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a4ac:	bf04      	itt	eq
 800a4ae:	0100      	lsleq	r0, r0, #4
 800a4b0:	3304      	addeq	r3, #4
 800a4b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a4b6:	bf04      	itt	eq
 800a4b8:	0080      	lsleq	r0, r0, #2
 800a4ba:	3302      	addeq	r3, #2
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	db05      	blt.n	800a4cc <__hi0bits+0x38>
 800a4c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a4c4:	f103 0301 	add.w	r3, r3, #1
 800a4c8:	bf08      	it	eq
 800a4ca:	2320      	moveq	r3, #32
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	4770      	bx	lr
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	e7e4      	b.n	800a49e <__hi0bits+0xa>

0800a4d4 <__lo0bits>:
 800a4d4:	6803      	ldr	r3, [r0, #0]
 800a4d6:	f013 0207 	ands.w	r2, r3, #7
 800a4da:	d00c      	beq.n	800a4f6 <__lo0bits+0x22>
 800a4dc:	07d9      	lsls	r1, r3, #31
 800a4de:	d422      	bmi.n	800a526 <__lo0bits+0x52>
 800a4e0:	079a      	lsls	r2, r3, #30
 800a4e2:	bf49      	itett	mi
 800a4e4:	085b      	lsrmi	r3, r3, #1
 800a4e6:	089b      	lsrpl	r3, r3, #2
 800a4e8:	6003      	strmi	r3, [r0, #0]
 800a4ea:	2201      	movmi	r2, #1
 800a4ec:	bf5c      	itt	pl
 800a4ee:	6003      	strpl	r3, [r0, #0]
 800a4f0:	2202      	movpl	r2, #2
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	4770      	bx	lr
 800a4f6:	b299      	uxth	r1, r3
 800a4f8:	b909      	cbnz	r1, 800a4fe <__lo0bits+0x2a>
 800a4fa:	0c1b      	lsrs	r3, r3, #16
 800a4fc:	2210      	movs	r2, #16
 800a4fe:	b2d9      	uxtb	r1, r3
 800a500:	b909      	cbnz	r1, 800a506 <__lo0bits+0x32>
 800a502:	3208      	adds	r2, #8
 800a504:	0a1b      	lsrs	r3, r3, #8
 800a506:	0719      	lsls	r1, r3, #28
 800a508:	bf04      	itt	eq
 800a50a:	091b      	lsreq	r3, r3, #4
 800a50c:	3204      	addeq	r2, #4
 800a50e:	0799      	lsls	r1, r3, #30
 800a510:	bf04      	itt	eq
 800a512:	089b      	lsreq	r3, r3, #2
 800a514:	3202      	addeq	r2, #2
 800a516:	07d9      	lsls	r1, r3, #31
 800a518:	d403      	bmi.n	800a522 <__lo0bits+0x4e>
 800a51a:	085b      	lsrs	r3, r3, #1
 800a51c:	f102 0201 	add.w	r2, r2, #1
 800a520:	d003      	beq.n	800a52a <__lo0bits+0x56>
 800a522:	6003      	str	r3, [r0, #0]
 800a524:	e7e5      	b.n	800a4f2 <__lo0bits+0x1e>
 800a526:	2200      	movs	r2, #0
 800a528:	e7e3      	b.n	800a4f2 <__lo0bits+0x1e>
 800a52a:	2220      	movs	r2, #32
 800a52c:	e7e1      	b.n	800a4f2 <__lo0bits+0x1e>
	...

0800a530 <__i2b>:
 800a530:	b510      	push	{r4, lr}
 800a532:	460c      	mov	r4, r1
 800a534:	2101      	movs	r1, #1
 800a536:	f7ff ff05 	bl	800a344 <_Balloc>
 800a53a:	4602      	mov	r2, r0
 800a53c:	b928      	cbnz	r0, 800a54a <__i2b+0x1a>
 800a53e:	4b05      	ldr	r3, [pc, #20]	; (800a554 <__i2b+0x24>)
 800a540:	4805      	ldr	r0, [pc, #20]	; (800a558 <__i2b+0x28>)
 800a542:	f240 1145 	movw	r1, #325	; 0x145
 800a546:	f000 fb45 	bl	800abd4 <__assert_func>
 800a54a:	2301      	movs	r3, #1
 800a54c:	6144      	str	r4, [r0, #20]
 800a54e:	6103      	str	r3, [r0, #16]
 800a550:	bd10      	pop	{r4, pc}
 800a552:	bf00      	nop
 800a554:	0800b2d0 	.word	0x0800b2d0
 800a558:	0800b2e1 	.word	0x0800b2e1

0800a55c <__multiply>:
 800a55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a560:	4691      	mov	r9, r2
 800a562:	690a      	ldr	r2, [r1, #16]
 800a564:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a568:	429a      	cmp	r2, r3
 800a56a:	bfb8      	it	lt
 800a56c:	460b      	movlt	r3, r1
 800a56e:	460c      	mov	r4, r1
 800a570:	bfbc      	itt	lt
 800a572:	464c      	movlt	r4, r9
 800a574:	4699      	movlt	r9, r3
 800a576:	6927      	ldr	r7, [r4, #16]
 800a578:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a57c:	68a3      	ldr	r3, [r4, #8]
 800a57e:	6861      	ldr	r1, [r4, #4]
 800a580:	eb07 060a 	add.w	r6, r7, sl
 800a584:	42b3      	cmp	r3, r6
 800a586:	b085      	sub	sp, #20
 800a588:	bfb8      	it	lt
 800a58a:	3101      	addlt	r1, #1
 800a58c:	f7ff feda 	bl	800a344 <_Balloc>
 800a590:	b930      	cbnz	r0, 800a5a0 <__multiply+0x44>
 800a592:	4602      	mov	r2, r0
 800a594:	4b44      	ldr	r3, [pc, #272]	; (800a6a8 <__multiply+0x14c>)
 800a596:	4845      	ldr	r0, [pc, #276]	; (800a6ac <__multiply+0x150>)
 800a598:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a59c:	f000 fb1a 	bl	800abd4 <__assert_func>
 800a5a0:	f100 0514 	add.w	r5, r0, #20
 800a5a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5a8:	462b      	mov	r3, r5
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	4543      	cmp	r3, r8
 800a5ae:	d321      	bcc.n	800a5f4 <__multiply+0x98>
 800a5b0:	f104 0314 	add.w	r3, r4, #20
 800a5b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5b8:	f109 0314 	add.w	r3, r9, #20
 800a5bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a5c0:	9202      	str	r2, [sp, #8]
 800a5c2:	1b3a      	subs	r2, r7, r4
 800a5c4:	3a15      	subs	r2, #21
 800a5c6:	f022 0203 	bic.w	r2, r2, #3
 800a5ca:	3204      	adds	r2, #4
 800a5cc:	f104 0115 	add.w	r1, r4, #21
 800a5d0:	428f      	cmp	r7, r1
 800a5d2:	bf38      	it	cc
 800a5d4:	2204      	movcc	r2, #4
 800a5d6:	9201      	str	r2, [sp, #4]
 800a5d8:	9a02      	ldr	r2, [sp, #8]
 800a5da:	9303      	str	r3, [sp, #12]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d80c      	bhi.n	800a5fa <__multiply+0x9e>
 800a5e0:	2e00      	cmp	r6, #0
 800a5e2:	dd03      	ble.n	800a5ec <__multiply+0x90>
 800a5e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d05b      	beq.n	800a6a4 <__multiply+0x148>
 800a5ec:	6106      	str	r6, [r0, #16]
 800a5ee:	b005      	add	sp, #20
 800a5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f4:	f843 2b04 	str.w	r2, [r3], #4
 800a5f8:	e7d8      	b.n	800a5ac <__multiply+0x50>
 800a5fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800a5fe:	f1ba 0f00 	cmp.w	sl, #0
 800a602:	d024      	beq.n	800a64e <__multiply+0xf2>
 800a604:	f104 0e14 	add.w	lr, r4, #20
 800a608:	46a9      	mov	r9, r5
 800a60a:	f04f 0c00 	mov.w	ip, #0
 800a60e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a612:	f8d9 1000 	ldr.w	r1, [r9]
 800a616:	fa1f fb82 	uxth.w	fp, r2
 800a61a:	b289      	uxth	r1, r1
 800a61c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a620:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a624:	f8d9 2000 	ldr.w	r2, [r9]
 800a628:	4461      	add	r1, ip
 800a62a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a62e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a632:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a636:	b289      	uxth	r1, r1
 800a638:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a63c:	4577      	cmp	r7, lr
 800a63e:	f849 1b04 	str.w	r1, [r9], #4
 800a642:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a646:	d8e2      	bhi.n	800a60e <__multiply+0xb2>
 800a648:	9a01      	ldr	r2, [sp, #4]
 800a64a:	f845 c002 	str.w	ip, [r5, r2]
 800a64e:	9a03      	ldr	r2, [sp, #12]
 800a650:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a654:	3304      	adds	r3, #4
 800a656:	f1b9 0f00 	cmp.w	r9, #0
 800a65a:	d021      	beq.n	800a6a0 <__multiply+0x144>
 800a65c:	6829      	ldr	r1, [r5, #0]
 800a65e:	f104 0c14 	add.w	ip, r4, #20
 800a662:	46ae      	mov	lr, r5
 800a664:	f04f 0a00 	mov.w	sl, #0
 800a668:	f8bc b000 	ldrh.w	fp, [ip]
 800a66c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a670:	fb09 220b 	mla	r2, r9, fp, r2
 800a674:	4452      	add	r2, sl
 800a676:	b289      	uxth	r1, r1
 800a678:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a67c:	f84e 1b04 	str.w	r1, [lr], #4
 800a680:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a684:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a688:	f8be 1000 	ldrh.w	r1, [lr]
 800a68c:	fb09 110a 	mla	r1, r9, sl, r1
 800a690:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a694:	4567      	cmp	r7, ip
 800a696:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a69a:	d8e5      	bhi.n	800a668 <__multiply+0x10c>
 800a69c:	9a01      	ldr	r2, [sp, #4]
 800a69e:	50a9      	str	r1, [r5, r2]
 800a6a0:	3504      	adds	r5, #4
 800a6a2:	e799      	b.n	800a5d8 <__multiply+0x7c>
 800a6a4:	3e01      	subs	r6, #1
 800a6a6:	e79b      	b.n	800a5e0 <__multiply+0x84>
 800a6a8:	0800b2d0 	.word	0x0800b2d0
 800a6ac:	0800b2e1 	.word	0x0800b2e1

0800a6b0 <__pow5mult>:
 800a6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6b4:	4615      	mov	r5, r2
 800a6b6:	f012 0203 	ands.w	r2, r2, #3
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	460f      	mov	r7, r1
 800a6be:	d007      	beq.n	800a6d0 <__pow5mult+0x20>
 800a6c0:	4c25      	ldr	r4, [pc, #148]	; (800a758 <__pow5mult+0xa8>)
 800a6c2:	3a01      	subs	r2, #1
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6ca:	f7ff fe9d 	bl	800a408 <__multadd>
 800a6ce:	4607      	mov	r7, r0
 800a6d0:	10ad      	asrs	r5, r5, #2
 800a6d2:	d03d      	beq.n	800a750 <__pow5mult+0xa0>
 800a6d4:	69f4      	ldr	r4, [r6, #28]
 800a6d6:	b97c      	cbnz	r4, 800a6f8 <__pow5mult+0x48>
 800a6d8:	2010      	movs	r0, #16
 800a6da:	f7ff fd7f 	bl	800a1dc <malloc>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	61f0      	str	r0, [r6, #28]
 800a6e2:	b928      	cbnz	r0, 800a6f0 <__pow5mult+0x40>
 800a6e4:	4b1d      	ldr	r3, [pc, #116]	; (800a75c <__pow5mult+0xac>)
 800a6e6:	481e      	ldr	r0, [pc, #120]	; (800a760 <__pow5mult+0xb0>)
 800a6e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a6ec:	f000 fa72 	bl	800abd4 <__assert_func>
 800a6f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6f4:	6004      	str	r4, [r0, #0]
 800a6f6:	60c4      	str	r4, [r0, #12]
 800a6f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a6fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a700:	b94c      	cbnz	r4, 800a716 <__pow5mult+0x66>
 800a702:	f240 2171 	movw	r1, #625	; 0x271
 800a706:	4630      	mov	r0, r6
 800a708:	f7ff ff12 	bl	800a530 <__i2b>
 800a70c:	2300      	movs	r3, #0
 800a70e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a712:	4604      	mov	r4, r0
 800a714:	6003      	str	r3, [r0, #0]
 800a716:	f04f 0900 	mov.w	r9, #0
 800a71a:	07eb      	lsls	r3, r5, #31
 800a71c:	d50a      	bpl.n	800a734 <__pow5mult+0x84>
 800a71e:	4639      	mov	r1, r7
 800a720:	4622      	mov	r2, r4
 800a722:	4630      	mov	r0, r6
 800a724:	f7ff ff1a 	bl	800a55c <__multiply>
 800a728:	4639      	mov	r1, r7
 800a72a:	4680      	mov	r8, r0
 800a72c:	4630      	mov	r0, r6
 800a72e:	f7ff fe49 	bl	800a3c4 <_Bfree>
 800a732:	4647      	mov	r7, r8
 800a734:	106d      	asrs	r5, r5, #1
 800a736:	d00b      	beq.n	800a750 <__pow5mult+0xa0>
 800a738:	6820      	ldr	r0, [r4, #0]
 800a73a:	b938      	cbnz	r0, 800a74c <__pow5mult+0x9c>
 800a73c:	4622      	mov	r2, r4
 800a73e:	4621      	mov	r1, r4
 800a740:	4630      	mov	r0, r6
 800a742:	f7ff ff0b 	bl	800a55c <__multiply>
 800a746:	6020      	str	r0, [r4, #0]
 800a748:	f8c0 9000 	str.w	r9, [r0]
 800a74c:	4604      	mov	r4, r0
 800a74e:	e7e4      	b.n	800a71a <__pow5mult+0x6a>
 800a750:	4638      	mov	r0, r7
 800a752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a756:	bf00      	nop
 800a758:	0800b430 	.word	0x0800b430
 800a75c:	0800b261 	.word	0x0800b261
 800a760:	0800b2e1 	.word	0x0800b2e1

0800a764 <__lshift>:
 800a764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a768:	460c      	mov	r4, r1
 800a76a:	6849      	ldr	r1, [r1, #4]
 800a76c:	6923      	ldr	r3, [r4, #16]
 800a76e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a772:	68a3      	ldr	r3, [r4, #8]
 800a774:	4607      	mov	r7, r0
 800a776:	4691      	mov	r9, r2
 800a778:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a77c:	f108 0601 	add.w	r6, r8, #1
 800a780:	42b3      	cmp	r3, r6
 800a782:	db0b      	blt.n	800a79c <__lshift+0x38>
 800a784:	4638      	mov	r0, r7
 800a786:	f7ff fddd 	bl	800a344 <_Balloc>
 800a78a:	4605      	mov	r5, r0
 800a78c:	b948      	cbnz	r0, 800a7a2 <__lshift+0x3e>
 800a78e:	4602      	mov	r2, r0
 800a790:	4b28      	ldr	r3, [pc, #160]	; (800a834 <__lshift+0xd0>)
 800a792:	4829      	ldr	r0, [pc, #164]	; (800a838 <__lshift+0xd4>)
 800a794:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a798:	f000 fa1c 	bl	800abd4 <__assert_func>
 800a79c:	3101      	adds	r1, #1
 800a79e:	005b      	lsls	r3, r3, #1
 800a7a0:	e7ee      	b.n	800a780 <__lshift+0x1c>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	f100 0114 	add.w	r1, r0, #20
 800a7a8:	f100 0210 	add.w	r2, r0, #16
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	4553      	cmp	r3, sl
 800a7b0:	db33      	blt.n	800a81a <__lshift+0xb6>
 800a7b2:	6920      	ldr	r0, [r4, #16]
 800a7b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7b8:	f104 0314 	add.w	r3, r4, #20
 800a7bc:	f019 091f 	ands.w	r9, r9, #31
 800a7c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7c8:	d02b      	beq.n	800a822 <__lshift+0xbe>
 800a7ca:	f1c9 0e20 	rsb	lr, r9, #32
 800a7ce:	468a      	mov	sl, r1
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	6818      	ldr	r0, [r3, #0]
 800a7d4:	fa00 f009 	lsl.w	r0, r0, r9
 800a7d8:	4310      	orrs	r0, r2
 800a7da:	f84a 0b04 	str.w	r0, [sl], #4
 800a7de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7e2:	459c      	cmp	ip, r3
 800a7e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a7e8:	d8f3      	bhi.n	800a7d2 <__lshift+0x6e>
 800a7ea:	ebac 0304 	sub.w	r3, ip, r4
 800a7ee:	3b15      	subs	r3, #21
 800a7f0:	f023 0303 	bic.w	r3, r3, #3
 800a7f4:	3304      	adds	r3, #4
 800a7f6:	f104 0015 	add.w	r0, r4, #21
 800a7fa:	4584      	cmp	ip, r0
 800a7fc:	bf38      	it	cc
 800a7fe:	2304      	movcc	r3, #4
 800a800:	50ca      	str	r2, [r1, r3]
 800a802:	b10a      	cbz	r2, 800a808 <__lshift+0xa4>
 800a804:	f108 0602 	add.w	r6, r8, #2
 800a808:	3e01      	subs	r6, #1
 800a80a:	4638      	mov	r0, r7
 800a80c:	612e      	str	r6, [r5, #16]
 800a80e:	4621      	mov	r1, r4
 800a810:	f7ff fdd8 	bl	800a3c4 <_Bfree>
 800a814:	4628      	mov	r0, r5
 800a816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a81e:	3301      	adds	r3, #1
 800a820:	e7c5      	b.n	800a7ae <__lshift+0x4a>
 800a822:	3904      	subs	r1, #4
 800a824:	f853 2b04 	ldr.w	r2, [r3], #4
 800a828:	f841 2f04 	str.w	r2, [r1, #4]!
 800a82c:	459c      	cmp	ip, r3
 800a82e:	d8f9      	bhi.n	800a824 <__lshift+0xc0>
 800a830:	e7ea      	b.n	800a808 <__lshift+0xa4>
 800a832:	bf00      	nop
 800a834:	0800b2d0 	.word	0x0800b2d0
 800a838:	0800b2e1 	.word	0x0800b2e1

0800a83c <__mcmp>:
 800a83c:	b530      	push	{r4, r5, lr}
 800a83e:	6902      	ldr	r2, [r0, #16]
 800a840:	690c      	ldr	r4, [r1, #16]
 800a842:	1b12      	subs	r2, r2, r4
 800a844:	d10e      	bne.n	800a864 <__mcmp+0x28>
 800a846:	f100 0314 	add.w	r3, r0, #20
 800a84a:	3114      	adds	r1, #20
 800a84c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a850:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a854:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a858:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a85c:	42a5      	cmp	r5, r4
 800a85e:	d003      	beq.n	800a868 <__mcmp+0x2c>
 800a860:	d305      	bcc.n	800a86e <__mcmp+0x32>
 800a862:	2201      	movs	r2, #1
 800a864:	4610      	mov	r0, r2
 800a866:	bd30      	pop	{r4, r5, pc}
 800a868:	4283      	cmp	r3, r0
 800a86a:	d3f3      	bcc.n	800a854 <__mcmp+0x18>
 800a86c:	e7fa      	b.n	800a864 <__mcmp+0x28>
 800a86e:	f04f 32ff 	mov.w	r2, #4294967295
 800a872:	e7f7      	b.n	800a864 <__mcmp+0x28>

0800a874 <__mdiff>:
 800a874:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a878:	460c      	mov	r4, r1
 800a87a:	4606      	mov	r6, r0
 800a87c:	4611      	mov	r1, r2
 800a87e:	4620      	mov	r0, r4
 800a880:	4690      	mov	r8, r2
 800a882:	f7ff ffdb 	bl	800a83c <__mcmp>
 800a886:	1e05      	subs	r5, r0, #0
 800a888:	d110      	bne.n	800a8ac <__mdiff+0x38>
 800a88a:	4629      	mov	r1, r5
 800a88c:	4630      	mov	r0, r6
 800a88e:	f7ff fd59 	bl	800a344 <_Balloc>
 800a892:	b930      	cbnz	r0, 800a8a2 <__mdiff+0x2e>
 800a894:	4b3a      	ldr	r3, [pc, #232]	; (800a980 <__mdiff+0x10c>)
 800a896:	4602      	mov	r2, r0
 800a898:	f240 2137 	movw	r1, #567	; 0x237
 800a89c:	4839      	ldr	r0, [pc, #228]	; (800a984 <__mdiff+0x110>)
 800a89e:	f000 f999 	bl	800abd4 <__assert_func>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ac:	bfa4      	itt	ge
 800a8ae:	4643      	movge	r3, r8
 800a8b0:	46a0      	movge	r8, r4
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a8b8:	bfa6      	itte	ge
 800a8ba:	461c      	movge	r4, r3
 800a8bc:	2500      	movge	r5, #0
 800a8be:	2501      	movlt	r5, #1
 800a8c0:	f7ff fd40 	bl	800a344 <_Balloc>
 800a8c4:	b920      	cbnz	r0, 800a8d0 <__mdiff+0x5c>
 800a8c6:	4b2e      	ldr	r3, [pc, #184]	; (800a980 <__mdiff+0x10c>)
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	f240 2145 	movw	r1, #581	; 0x245
 800a8ce:	e7e5      	b.n	800a89c <__mdiff+0x28>
 800a8d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a8d4:	6926      	ldr	r6, [r4, #16]
 800a8d6:	60c5      	str	r5, [r0, #12]
 800a8d8:	f104 0914 	add.w	r9, r4, #20
 800a8dc:	f108 0514 	add.w	r5, r8, #20
 800a8e0:	f100 0e14 	add.w	lr, r0, #20
 800a8e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a8e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a8ec:	f108 0210 	add.w	r2, r8, #16
 800a8f0:	46f2      	mov	sl, lr
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a8fc:	fa11 f88b 	uxtah	r8, r1, fp
 800a900:	b299      	uxth	r1, r3
 800a902:	0c1b      	lsrs	r3, r3, #16
 800a904:	eba8 0801 	sub.w	r8, r8, r1
 800a908:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a90c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a910:	fa1f f888 	uxth.w	r8, r8
 800a914:	1419      	asrs	r1, r3, #16
 800a916:	454e      	cmp	r6, r9
 800a918:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a91c:	f84a 3b04 	str.w	r3, [sl], #4
 800a920:	d8e8      	bhi.n	800a8f4 <__mdiff+0x80>
 800a922:	1b33      	subs	r3, r6, r4
 800a924:	3b15      	subs	r3, #21
 800a926:	f023 0303 	bic.w	r3, r3, #3
 800a92a:	3304      	adds	r3, #4
 800a92c:	3415      	adds	r4, #21
 800a92e:	42a6      	cmp	r6, r4
 800a930:	bf38      	it	cc
 800a932:	2304      	movcc	r3, #4
 800a934:	441d      	add	r5, r3
 800a936:	4473      	add	r3, lr
 800a938:	469e      	mov	lr, r3
 800a93a:	462e      	mov	r6, r5
 800a93c:	4566      	cmp	r6, ip
 800a93e:	d30e      	bcc.n	800a95e <__mdiff+0xea>
 800a940:	f10c 0203 	add.w	r2, ip, #3
 800a944:	1b52      	subs	r2, r2, r5
 800a946:	f022 0203 	bic.w	r2, r2, #3
 800a94a:	3d03      	subs	r5, #3
 800a94c:	45ac      	cmp	ip, r5
 800a94e:	bf38      	it	cc
 800a950:	2200      	movcc	r2, #0
 800a952:	4413      	add	r3, r2
 800a954:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a958:	b17a      	cbz	r2, 800a97a <__mdiff+0x106>
 800a95a:	6107      	str	r7, [r0, #16]
 800a95c:	e7a4      	b.n	800a8a8 <__mdiff+0x34>
 800a95e:	f856 8b04 	ldr.w	r8, [r6], #4
 800a962:	fa11 f288 	uxtah	r2, r1, r8
 800a966:	1414      	asrs	r4, r2, #16
 800a968:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a96c:	b292      	uxth	r2, r2
 800a96e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a972:	f84e 2b04 	str.w	r2, [lr], #4
 800a976:	1421      	asrs	r1, r4, #16
 800a978:	e7e0      	b.n	800a93c <__mdiff+0xc8>
 800a97a:	3f01      	subs	r7, #1
 800a97c:	e7ea      	b.n	800a954 <__mdiff+0xe0>
 800a97e:	bf00      	nop
 800a980:	0800b2d0 	.word	0x0800b2d0
 800a984:	0800b2e1 	.word	0x0800b2e1

0800a988 <__d2b>:
 800a988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a98c:	460f      	mov	r7, r1
 800a98e:	2101      	movs	r1, #1
 800a990:	ec59 8b10 	vmov	r8, r9, d0
 800a994:	4616      	mov	r6, r2
 800a996:	f7ff fcd5 	bl	800a344 <_Balloc>
 800a99a:	4604      	mov	r4, r0
 800a99c:	b930      	cbnz	r0, 800a9ac <__d2b+0x24>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	4b24      	ldr	r3, [pc, #144]	; (800aa34 <__d2b+0xac>)
 800a9a2:	4825      	ldr	r0, [pc, #148]	; (800aa38 <__d2b+0xb0>)
 800a9a4:	f240 310f 	movw	r1, #783	; 0x30f
 800a9a8:	f000 f914 	bl	800abd4 <__assert_func>
 800a9ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9b4:	bb2d      	cbnz	r5, 800aa02 <__d2b+0x7a>
 800a9b6:	9301      	str	r3, [sp, #4]
 800a9b8:	f1b8 0300 	subs.w	r3, r8, #0
 800a9bc:	d026      	beq.n	800aa0c <__d2b+0x84>
 800a9be:	4668      	mov	r0, sp
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	f7ff fd87 	bl	800a4d4 <__lo0bits>
 800a9c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a9ca:	b1e8      	cbz	r0, 800aa08 <__d2b+0x80>
 800a9cc:	f1c0 0320 	rsb	r3, r0, #32
 800a9d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d4:	430b      	orrs	r3, r1
 800a9d6:	40c2      	lsrs	r2, r0
 800a9d8:	6163      	str	r3, [r4, #20]
 800a9da:	9201      	str	r2, [sp, #4]
 800a9dc:	9b01      	ldr	r3, [sp, #4]
 800a9de:	61a3      	str	r3, [r4, #24]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	bf14      	ite	ne
 800a9e4:	2202      	movne	r2, #2
 800a9e6:	2201      	moveq	r2, #1
 800a9e8:	6122      	str	r2, [r4, #16]
 800a9ea:	b1bd      	cbz	r5, 800aa1c <__d2b+0x94>
 800a9ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a9f0:	4405      	add	r5, r0
 800a9f2:	603d      	str	r5, [r7, #0]
 800a9f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a9f8:	6030      	str	r0, [r6, #0]
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	b003      	add	sp, #12
 800a9fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa06:	e7d6      	b.n	800a9b6 <__d2b+0x2e>
 800aa08:	6161      	str	r1, [r4, #20]
 800aa0a:	e7e7      	b.n	800a9dc <__d2b+0x54>
 800aa0c:	a801      	add	r0, sp, #4
 800aa0e:	f7ff fd61 	bl	800a4d4 <__lo0bits>
 800aa12:	9b01      	ldr	r3, [sp, #4]
 800aa14:	6163      	str	r3, [r4, #20]
 800aa16:	3020      	adds	r0, #32
 800aa18:	2201      	movs	r2, #1
 800aa1a:	e7e5      	b.n	800a9e8 <__d2b+0x60>
 800aa1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa24:	6038      	str	r0, [r7, #0]
 800aa26:	6918      	ldr	r0, [r3, #16]
 800aa28:	f7ff fd34 	bl	800a494 <__hi0bits>
 800aa2c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa30:	e7e2      	b.n	800a9f8 <__d2b+0x70>
 800aa32:	bf00      	nop
 800aa34:	0800b2d0 	.word	0x0800b2d0
 800aa38:	0800b2e1 	.word	0x0800b2e1

0800aa3c <__sflush_r>:
 800aa3c:	898a      	ldrh	r2, [r1, #12]
 800aa3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa42:	4605      	mov	r5, r0
 800aa44:	0710      	lsls	r0, r2, #28
 800aa46:	460c      	mov	r4, r1
 800aa48:	d458      	bmi.n	800aafc <__sflush_r+0xc0>
 800aa4a:	684b      	ldr	r3, [r1, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	dc05      	bgt.n	800aa5c <__sflush_r+0x20>
 800aa50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	dc02      	bgt.n	800aa5c <__sflush_r+0x20>
 800aa56:	2000      	movs	r0, #0
 800aa58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa5e:	2e00      	cmp	r6, #0
 800aa60:	d0f9      	beq.n	800aa56 <__sflush_r+0x1a>
 800aa62:	2300      	movs	r3, #0
 800aa64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa68:	682f      	ldr	r7, [r5, #0]
 800aa6a:	6a21      	ldr	r1, [r4, #32]
 800aa6c:	602b      	str	r3, [r5, #0]
 800aa6e:	d032      	beq.n	800aad6 <__sflush_r+0x9a>
 800aa70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa72:	89a3      	ldrh	r3, [r4, #12]
 800aa74:	075a      	lsls	r2, r3, #29
 800aa76:	d505      	bpl.n	800aa84 <__sflush_r+0x48>
 800aa78:	6863      	ldr	r3, [r4, #4]
 800aa7a:	1ac0      	subs	r0, r0, r3
 800aa7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa7e:	b10b      	cbz	r3, 800aa84 <__sflush_r+0x48>
 800aa80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa82:	1ac0      	subs	r0, r0, r3
 800aa84:	2300      	movs	r3, #0
 800aa86:	4602      	mov	r2, r0
 800aa88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa8a:	6a21      	ldr	r1, [r4, #32]
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	47b0      	blx	r6
 800aa90:	1c43      	adds	r3, r0, #1
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	d106      	bne.n	800aaa4 <__sflush_r+0x68>
 800aa96:	6829      	ldr	r1, [r5, #0]
 800aa98:	291d      	cmp	r1, #29
 800aa9a:	d82b      	bhi.n	800aaf4 <__sflush_r+0xb8>
 800aa9c:	4a29      	ldr	r2, [pc, #164]	; (800ab44 <__sflush_r+0x108>)
 800aa9e:	410a      	asrs	r2, r1
 800aaa0:	07d6      	lsls	r6, r2, #31
 800aaa2:	d427      	bmi.n	800aaf4 <__sflush_r+0xb8>
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	6062      	str	r2, [r4, #4]
 800aaa8:	04d9      	lsls	r1, r3, #19
 800aaaa:	6922      	ldr	r2, [r4, #16]
 800aaac:	6022      	str	r2, [r4, #0]
 800aaae:	d504      	bpl.n	800aaba <__sflush_r+0x7e>
 800aab0:	1c42      	adds	r2, r0, #1
 800aab2:	d101      	bne.n	800aab8 <__sflush_r+0x7c>
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	b903      	cbnz	r3, 800aaba <__sflush_r+0x7e>
 800aab8:	6560      	str	r0, [r4, #84]	; 0x54
 800aaba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aabc:	602f      	str	r7, [r5, #0]
 800aabe:	2900      	cmp	r1, #0
 800aac0:	d0c9      	beq.n	800aa56 <__sflush_r+0x1a>
 800aac2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aac6:	4299      	cmp	r1, r3
 800aac8:	d002      	beq.n	800aad0 <__sflush_r+0x94>
 800aaca:	4628      	mov	r0, r5
 800aacc:	f7ff fb3a 	bl	800a144 <_free_r>
 800aad0:	2000      	movs	r0, #0
 800aad2:	6360      	str	r0, [r4, #52]	; 0x34
 800aad4:	e7c0      	b.n	800aa58 <__sflush_r+0x1c>
 800aad6:	2301      	movs	r3, #1
 800aad8:	4628      	mov	r0, r5
 800aada:	47b0      	blx	r6
 800aadc:	1c41      	adds	r1, r0, #1
 800aade:	d1c8      	bne.n	800aa72 <__sflush_r+0x36>
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0c5      	beq.n	800aa72 <__sflush_r+0x36>
 800aae6:	2b1d      	cmp	r3, #29
 800aae8:	d001      	beq.n	800aaee <__sflush_r+0xb2>
 800aaea:	2b16      	cmp	r3, #22
 800aaec:	d101      	bne.n	800aaf2 <__sflush_r+0xb6>
 800aaee:	602f      	str	r7, [r5, #0]
 800aaf0:	e7b1      	b.n	800aa56 <__sflush_r+0x1a>
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaf8:	81a3      	strh	r3, [r4, #12]
 800aafa:	e7ad      	b.n	800aa58 <__sflush_r+0x1c>
 800aafc:	690f      	ldr	r7, [r1, #16]
 800aafe:	2f00      	cmp	r7, #0
 800ab00:	d0a9      	beq.n	800aa56 <__sflush_r+0x1a>
 800ab02:	0793      	lsls	r3, r2, #30
 800ab04:	680e      	ldr	r6, [r1, #0]
 800ab06:	bf08      	it	eq
 800ab08:	694b      	ldreq	r3, [r1, #20]
 800ab0a:	600f      	str	r7, [r1, #0]
 800ab0c:	bf18      	it	ne
 800ab0e:	2300      	movne	r3, #0
 800ab10:	eba6 0807 	sub.w	r8, r6, r7
 800ab14:	608b      	str	r3, [r1, #8]
 800ab16:	f1b8 0f00 	cmp.w	r8, #0
 800ab1a:	dd9c      	ble.n	800aa56 <__sflush_r+0x1a>
 800ab1c:	6a21      	ldr	r1, [r4, #32]
 800ab1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab20:	4643      	mov	r3, r8
 800ab22:	463a      	mov	r2, r7
 800ab24:	4628      	mov	r0, r5
 800ab26:	47b0      	blx	r6
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	dc06      	bgt.n	800ab3a <__sflush_r+0xfe>
 800ab2c:	89a3      	ldrh	r3, [r4, #12]
 800ab2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab32:	81a3      	strh	r3, [r4, #12]
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	e78e      	b.n	800aa58 <__sflush_r+0x1c>
 800ab3a:	4407      	add	r7, r0
 800ab3c:	eba8 0800 	sub.w	r8, r8, r0
 800ab40:	e7e9      	b.n	800ab16 <__sflush_r+0xda>
 800ab42:	bf00      	nop
 800ab44:	dfbffffe 	.word	0xdfbffffe

0800ab48 <_fflush_r>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	690b      	ldr	r3, [r1, #16]
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	460c      	mov	r4, r1
 800ab50:	b913      	cbnz	r3, 800ab58 <_fflush_r+0x10>
 800ab52:	2500      	movs	r5, #0
 800ab54:	4628      	mov	r0, r5
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	b118      	cbz	r0, 800ab62 <_fflush_r+0x1a>
 800ab5a:	6a03      	ldr	r3, [r0, #32]
 800ab5c:	b90b      	cbnz	r3, 800ab62 <_fflush_r+0x1a>
 800ab5e:	f7fe fb7d 	bl	800925c <__sinit>
 800ab62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d0f3      	beq.n	800ab52 <_fflush_r+0xa>
 800ab6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab6c:	07d0      	lsls	r0, r2, #31
 800ab6e:	d404      	bmi.n	800ab7a <_fflush_r+0x32>
 800ab70:	0599      	lsls	r1, r3, #22
 800ab72:	d402      	bmi.n	800ab7a <_fflush_r+0x32>
 800ab74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab76:	f7fe fc68 	bl	800944a <__retarget_lock_acquire_recursive>
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	4621      	mov	r1, r4
 800ab7e:	f7ff ff5d 	bl	800aa3c <__sflush_r>
 800ab82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab84:	07da      	lsls	r2, r3, #31
 800ab86:	4605      	mov	r5, r0
 800ab88:	d4e4      	bmi.n	800ab54 <_fflush_r+0xc>
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	059b      	lsls	r3, r3, #22
 800ab8e:	d4e1      	bmi.n	800ab54 <_fflush_r+0xc>
 800ab90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab92:	f7fe fc5b 	bl	800944c <__retarget_lock_release_recursive>
 800ab96:	e7dd      	b.n	800ab54 <_fflush_r+0xc>

0800ab98 <_sbrk_r>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	4d06      	ldr	r5, [pc, #24]	; (800abb4 <_sbrk_r+0x1c>)
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	4604      	mov	r4, r0
 800aba0:	4608      	mov	r0, r1
 800aba2:	602b      	str	r3, [r5, #0]
 800aba4:	f7f7 fa8a 	bl	80020bc <_sbrk>
 800aba8:	1c43      	adds	r3, r0, #1
 800abaa:	d102      	bne.n	800abb2 <_sbrk_r+0x1a>
 800abac:	682b      	ldr	r3, [r5, #0]
 800abae:	b103      	cbz	r3, 800abb2 <_sbrk_r+0x1a>
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	bd38      	pop	{r3, r4, r5, pc}
 800abb4:	200007ac 	.word	0x200007ac

0800abb8 <memcpy>:
 800abb8:	440a      	add	r2, r1
 800abba:	4291      	cmp	r1, r2
 800abbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800abc0:	d100      	bne.n	800abc4 <memcpy+0xc>
 800abc2:	4770      	bx	lr
 800abc4:	b510      	push	{r4, lr}
 800abc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abce:	4291      	cmp	r1, r2
 800abd0:	d1f9      	bne.n	800abc6 <memcpy+0xe>
 800abd2:	bd10      	pop	{r4, pc}

0800abd4 <__assert_func>:
 800abd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abd6:	4614      	mov	r4, r2
 800abd8:	461a      	mov	r2, r3
 800abda:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <__assert_func+0x2c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4605      	mov	r5, r0
 800abe0:	68d8      	ldr	r0, [r3, #12]
 800abe2:	b14c      	cbz	r4, 800abf8 <__assert_func+0x24>
 800abe4:	4b07      	ldr	r3, [pc, #28]	; (800ac04 <__assert_func+0x30>)
 800abe6:	9100      	str	r1, [sp, #0]
 800abe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abec:	4906      	ldr	r1, [pc, #24]	; (800ac08 <__assert_func+0x34>)
 800abee:	462b      	mov	r3, r5
 800abf0:	f000 f844 	bl	800ac7c <fiprintf>
 800abf4:	f000 f854 	bl	800aca0 <abort>
 800abf8:	4b04      	ldr	r3, [pc, #16]	; (800ac0c <__assert_func+0x38>)
 800abfa:	461c      	mov	r4, r3
 800abfc:	e7f3      	b.n	800abe6 <__assert_func+0x12>
 800abfe:	bf00      	nop
 800ac00:	20000100 	.word	0x20000100
 800ac04:	0800b446 	.word	0x0800b446
 800ac08:	0800b453 	.word	0x0800b453
 800ac0c:	0800b481 	.word	0x0800b481

0800ac10 <_calloc_r>:
 800ac10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac12:	fba1 2402 	umull	r2, r4, r1, r2
 800ac16:	b94c      	cbnz	r4, 800ac2c <_calloc_r+0x1c>
 800ac18:	4611      	mov	r1, r2
 800ac1a:	9201      	str	r2, [sp, #4]
 800ac1c:	f7ff fb06 	bl	800a22c <_malloc_r>
 800ac20:	9a01      	ldr	r2, [sp, #4]
 800ac22:	4605      	mov	r5, r0
 800ac24:	b930      	cbnz	r0, 800ac34 <_calloc_r+0x24>
 800ac26:	4628      	mov	r0, r5
 800ac28:	b003      	add	sp, #12
 800ac2a:	bd30      	pop	{r4, r5, pc}
 800ac2c:	220c      	movs	r2, #12
 800ac2e:	6002      	str	r2, [r0, #0]
 800ac30:	2500      	movs	r5, #0
 800ac32:	e7f8      	b.n	800ac26 <_calloc_r+0x16>
 800ac34:	4621      	mov	r1, r4
 800ac36:	f7fe fb8a 	bl	800934e <memset>
 800ac3a:	e7f4      	b.n	800ac26 <_calloc_r+0x16>

0800ac3c <__ascii_mbtowc>:
 800ac3c:	b082      	sub	sp, #8
 800ac3e:	b901      	cbnz	r1, 800ac42 <__ascii_mbtowc+0x6>
 800ac40:	a901      	add	r1, sp, #4
 800ac42:	b142      	cbz	r2, 800ac56 <__ascii_mbtowc+0x1a>
 800ac44:	b14b      	cbz	r3, 800ac5a <__ascii_mbtowc+0x1e>
 800ac46:	7813      	ldrb	r3, [r2, #0]
 800ac48:	600b      	str	r3, [r1, #0]
 800ac4a:	7812      	ldrb	r2, [r2, #0]
 800ac4c:	1e10      	subs	r0, r2, #0
 800ac4e:	bf18      	it	ne
 800ac50:	2001      	movne	r0, #1
 800ac52:	b002      	add	sp, #8
 800ac54:	4770      	bx	lr
 800ac56:	4610      	mov	r0, r2
 800ac58:	e7fb      	b.n	800ac52 <__ascii_mbtowc+0x16>
 800ac5a:	f06f 0001 	mvn.w	r0, #1
 800ac5e:	e7f8      	b.n	800ac52 <__ascii_mbtowc+0x16>

0800ac60 <__ascii_wctomb>:
 800ac60:	b149      	cbz	r1, 800ac76 <__ascii_wctomb+0x16>
 800ac62:	2aff      	cmp	r2, #255	; 0xff
 800ac64:	bf85      	ittet	hi
 800ac66:	238a      	movhi	r3, #138	; 0x8a
 800ac68:	6003      	strhi	r3, [r0, #0]
 800ac6a:	700a      	strbls	r2, [r1, #0]
 800ac6c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac70:	bf98      	it	ls
 800ac72:	2001      	movls	r0, #1
 800ac74:	4770      	bx	lr
 800ac76:	4608      	mov	r0, r1
 800ac78:	4770      	bx	lr
	...

0800ac7c <fiprintf>:
 800ac7c:	b40e      	push	{r1, r2, r3}
 800ac7e:	b503      	push	{r0, r1, lr}
 800ac80:	4601      	mov	r1, r0
 800ac82:	ab03      	add	r3, sp, #12
 800ac84:	4805      	ldr	r0, [pc, #20]	; (800ac9c <fiprintf+0x20>)
 800ac86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac8a:	6800      	ldr	r0, [r0, #0]
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	f000 f837 	bl	800ad00 <_vfiprintf_r>
 800ac92:	b002      	add	sp, #8
 800ac94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac98:	b003      	add	sp, #12
 800ac9a:	4770      	bx	lr
 800ac9c:	20000100 	.word	0x20000100

0800aca0 <abort>:
 800aca0:	b508      	push	{r3, lr}
 800aca2:	2006      	movs	r0, #6
 800aca4:	f000 fa04 	bl	800b0b0 <raise>
 800aca8:	2001      	movs	r0, #1
 800acaa:	f7f7 f98f 	bl	8001fcc <_exit>

0800acae <__sfputc_r>:
 800acae:	6893      	ldr	r3, [r2, #8]
 800acb0:	3b01      	subs	r3, #1
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	b410      	push	{r4}
 800acb6:	6093      	str	r3, [r2, #8]
 800acb8:	da08      	bge.n	800accc <__sfputc_r+0x1e>
 800acba:	6994      	ldr	r4, [r2, #24]
 800acbc:	42a3      	cmp	r3, r4
 800acbe:	db01      	blt.n	800acc4 <__sfputc_r+0x16>
 800acc0:	290a      	cmp	r1, #10
 800acc2:	d103      	bne.n	800accc <__sfputc_r+0x1e>
 800acc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acc8:	f000 b934 	b.w	800af34 <__swbuf_r>
 800accc:	6813      	ldr	r3, [r2, #0]
 800acce:	1c58      	adds	r0, r3, #1
 800acd0:	6010      	str	r0, [r2, #0]
 800acd2:	7019      	strb	r1, [r3, #0]
 800acd4:	4608      	mov	r0, r1
 800acd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <__sfputs_r>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	4606      	mov	r6, r0
 800ace0:	460f      	mov	r7, r1
 800ace2:	4614      	mov	r4, r2
 800ace4:	18d5      	adds	r5, r2, r3
 800ace6:	42ac      	cmp	r4, r5
 800ace8:	d101      	bne.n	800acee <__sfputs_r+0x12>
 800acea:	2000      	movs	r0, #0
 800acec:	e007      	b.n	800acfe <__sfputs_r+0x22>
 800acee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf2:	463a      	mov	r2, r7
 800acf4:	4630      	mov	r0, r6
 800acf6:	f7ff ffda 	bl	800acae <__sfputc_r>
 800acfa:	1c43      	adds	r3, r0, #1
 800acfc:	d1f3      	bne.n	800ace6 <__sfputs_r+0xa>
 800acfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad00 <_vfiprintf_r>:
 800ad00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad04:	460d      	mov	r5, r1
 800ad06:	b09d      	sub	sp, #116	; 0x74
 800ad08:	4614      	mov	r4, r2
 800ad0a:	4698      	mov	r8, r3
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	b118      	cbz	r0, 800ad18 <_vfiprintf_r+0x18>
 800ad10:	6a03      	ldr	r3, [r0, #32]
 800ad12:	b90b      	cbnz	r3, 800ad18 <_vfiprintf_r+0x18>
 800ad14:	f7fe faa2 	bl	800925c <__sinit>
 800ad18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad1a:	07d9      	lsls	r1, r3, #31
 800ad1c:	d405      	bmi.n	800ad2a <_vfiprintf_r+0x2a>
 800ad1e:	89ab      	ldrh	r3, [r5, #12]
 800ad20:	059a      	lsls	r2, r3, #22
 800ad22:	d402      	bmi.n	800ad2a <_vfiprintf_r+0x2a>
 800ad24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad26:	f7fe fb90 	bl	800944a <__retarget_lock_acquire_recursive>
 800ad2a:	89ab      	ldrh	r3, [r5, #12]
 800ad2c:	071b      	lsls	r3, r3, #28
 800ad2e:	d501      	bpl.n	800ad34 <_vfiprintf_r+0x34>
 800ad30:	692b      	ldr	r3, [r5, #16]
 800ad32:	b99b      	cbnz	r3, 800ad5c <_vfiprintf_r+0x5c>
 800ad34:	4629      	mov	r1, r5
 800ad36:	4630      	mov	r0, r6
 800ad38:	f000 f93a 	bl	800afb0 <__swsetup_r>
 800ad3c:	b170      	cbz	r0, 800ad5c <_vfiprintf_r+0x5c>
 800ad3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad40:	07dc      	lsls	r4, r3, #31
 800ad42:	d504      	bpl.n	800ad4e <_vfiprintf_r+0x4e>
 800ad44:	f04f 30ff 	mov.w	r0, #4294967295
 800ad48:	b01d      	add	sp, #116	; 0x74
 800ad4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4e:	89ab      	ldrh	r3, [r5, #12]
 800ad50:	0598      	lsls	r0, r3, #22
 800ad52:	d4f7      	bmi.n	800ad44 <_vfiprintf_r+0x44>
 800ad54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad56:	f7fe fb79 	bl	800944c <__retarget_lock_release_recursive>
 800ad5a:	e7f3      	b.n	800ad44 <_vfiprintf_r+0x44>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad60:	2320      	movs	r3, #32
 800ad62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad66:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad6a:	2330      	movs	r3, #48	; 0x30
 800ad6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800af20 <_vfiprintf_r+0x220>
 800ad70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad74:	f04f 0901 	mov.w	r9, #1
 800ad78:	4623      	mov	r3, r4
 800ad7a:	469a      	mov	sl, r3
 800ad7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad80:	b10a      	cbz	r2, 800ad86 <_vfiprintf_r+0x86>
 800ad82:	2a25      	cmp	r2, #37	; 0x25
 800ad84:	d1f9      	bne.n	800ad7a <_vfiprintf_r+0x7a>
 800ad86:	ebba 0b04 	subs.w	fp, sl, r4
 800ad8a:	d00b      	beq.n	800ada4 <_vfiprintf_r+0xa4>
 800ad8c:	465b      	mov	r3, fp
 800ad8e:	4622      	mov	r2, r4
 800ad90:	4629      	mov	r1, r5
 800ad92:	4630      	mov	r0, r6
 800ad94:	f7ff ffa2 	bl	800acdc <__sfputs_r>
 800ad98:	3001      	adds	r0, #1
 800ad9a:	f000 80a9 	beq.w	800aef0 <_vfiprintf_r+0x1f0>
 800ad9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ada0:	445a      	add	r2, fp
 800ada2:	9209      	str	r2, [sp, #36]	; 0x24
 800ada4:	f89a 3000 	ldrb.w	r3, [sl]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 80a1 	beq.w	800aef0 <_vfiprintf_r+0x1f0>
 800adae:	2300      	movs	r3, #0
 800adb0:	f04f 32ff 	mov.w	r2, #4294967295
 800adb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adb8:	f10a 0a01 	add.w	sl, sl, #1
 800adbc:	9304      	str	r3, [sp, #16]
 800adbe:	9307      	str	r3, [sp, #28]
 800adc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adc4:	931a      	str	r3, [sp, #104]	; 0x68
 800adc6:	4654      	mov	r4, sl
 800adc8:	2205      	movs	r2, #5
 800adca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adce:	4854      	ldr	r0, [pc, #336]	; (800af20 <_vfiprintf_r+0x220>)
 800add0:	f7f5 fa06 	bl	80001e0 <memchr>
 800add4:	9a04      	ldr	r2, [sp, #16]
 800add6:	b9d8      	cbnz	r0, 800ae10 <_vfiprintf_r+0x110>
 800add8:	06d1      	lsls	r1, r2, #27
 800adda:	bf44      	itt	mi
 800addc:	2320      	movmi	r3, #32
 800adde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ade2:	0713      	lsls	r3, r2, #28
 800ade4:	bf44      	itt	mi
 800ade6:	232b      	movmi	r3, #43	; 0x2b
 800ade8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adec:	f89a 3000 	ldrb.w	r3, [sl]
 800adf0:	2b2a      	cmp	r3, #42	; 0x2a
 800adf2:	d015      	beq.n	800ae20 <_vfiprintf_r+0x120>
 800adf4:	9a07      	ldr	r2, [sp, #28]
 800adf6:	4654      	mov	r4, sl
 800adf8:	2000      	movs	r0, #0
 800adfa:	f04f 0c0a 	mov.w	ip, #10
 800adfe:	4621      	mov	r1, r4
 800ae00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae04:	3b30      	subs	r3, #48	; 0x30
 800ae06:	2b09      	cmp	r3, #9
 800ae08:	d94d      	bls.n	800aea6 <_vfiprintf_r+0x1a6>
 800ae0a:	b1b0      	cbz	r0, 800ae3a <_vfiprintf_r+0x13a>
 800ae0c:	9207      	str	r2, [sp, #28]
 800ae0e:	e014      	b.n	800ae3a <_vfiprintf_r+0x13a>
 800ae10:	eba0 0308 	sub.w	r3, r0, r8
 800ae14:	fa09 f303 	lsl.w	r3, r9, r3
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	9304      	str	r3, [sp, #16]
 800ae1c:	46a2      	mov	sl, r4
 800ae1e:	e7d2      	b.n	800adc6 <_vfiprintf_r+0xc6>
 800ae20:	9b03      	ldr	r3, [sp, #12]
 800ae22:	1d19      	adds	r1, r3, #4
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	9103      	str	r1, [sp, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	bfbb      	ittet	lt
 800ae2c:	425b      	neglt	r3, r3
 800ae2e:	f042 0202 	orrlt.w	r2, r2, #2
 800ae32:	9307      	strge	r3, [sp, #28]
 800ae34:	9307      	strlt	r3, [sp, #28]
 800ae36:	bfb8      	it	lt
 800ae38:	9204      	strlt	r2, [sp, #16]
 800ae3a:	7823      	ldrb	r3, [r4, #0]
 800ae3c:	2b2e      	cmp	r3, #46	; 0x2e
 800ae3e:	d10c      	bne.n	800ae5a <_vfiprintf_r+0x15a>
 800ae40:	7863      	ldrb	r3, [r4, #1]
 800ae42:	2b2a      	cmp	r3, #42	; 0x2a
 800ae44:	d134      	bne.n	800aeb0 <_vfiprintf_r+0x1b0>
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	1d1a      	adds	r2, r3, #4
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	9203      	str	r2, [sp, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	bfb8      	it	lt
 800ae52:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae56:	3402      	adds	r4, #2
 800ae58:	9305      	str	r3, [sp, #20]
 800ae5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800af30 <_vfiprintf_r+0x230>
 800ae5e:	7821      	ldrb	r1, [r4, #0]
 800ae60:	2203      	movs	r2, #3
 800ae62:	4650      	mov	r0, sl
 800ae64:	f7f5 f9bc 	bl	80001e0 <memchr>
 800ae68:	b138      	cbz	r0, 800ae7a <_vfiprintf_r+0x17a>
 800ae6a:	9b04      	ldr	r3, [sp, #16]
 800ae6c:	eba0 000a 	sub.w	r0, r0, sl
 800ae70:	2240      	movs	r2, #64	; 0x40
 800ae72:	4082      	lsls	r2, r0
 800ae74:	4313      	orrs	r3, r2
 800ae76:	3401      	adds	r4, #1
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae7e:	4829      	ldr	r0, [pc, #164]	; (800af24 <_vfiprintf_r+0x224>)
 800ae80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae84:	2206      	movs	r2, #6
 800ae86:	f7f5 f9ab 	bl	80001e0 <memchr>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	d03f      	beq.n	800af0e <_vfiprintf_r+0x20e>
 800ae8e:	4b26      	ldr	r3, [pc, #152]	; (800af28 <_vfiprintf_r+0x228>)
 800ae90:	bb1b      	cbnz	r3, 800aeda <_vfiprintf_r+0x1da>
 800ae92:	9b03      	ldr	r3, [sp, #12]
 800ae94:	3307      	adds	r3, #7
 800ae96:	f023 0307 	bic.w	r3, r3, #7
 800ae9a:	3308      	adds	r3, #8
 800ae9c:	9303      	str	r3, [sp, #12]
 800ae9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea0:	443b      	add	r3, r7
 800aea2:	9309      	str	r3, [sp, #36]	; 0x24
 800aea4:	e768      	b.n	800ad78 <_vfiprintf_r+0x78>
 800aea6:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeaa:	460c      	mov	r4, r1
 800aeac:	2001      	movs	r0, #1
 800aeae:	e7a6      	b.n	800adfe <_vfiprintf_r+0xfe>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	3401      	adds	r4, #1
 800aeb4:	9305      	str	r3, [sp, #20]
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	f04f 0c0a 	mov.w	ip, #10
 800aebc:	4620      	mov	r0, r4
 800aebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aec2:	3a30      	subs	r2, #48	; 0x30
 800aec4:	2a09      	cmp	r2, #9
 800aec6:	d903      	bls.n	800aed0 <_vfiprintf_r+0x1d0>
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d0c6      	beq.n	800ae5a <_vfiprintf_r+0x15a>
 800aecc:	9105      	str	r1, [sp, #20]
 800aece:	e7c4      	b.n	800ae5a <_vfiprintf_r+0x15a>
 800aed0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aed4:	4604      	mov	r4, r0
 800aed6:	2301      	movs	r3, #1
 800aed8:	e7f0      	b.n	800aebc <_vfiprintf_r+0x1bc>
 800aeda:	ab03      	add	r3, sp, #12
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	462a      	mov	r2, r5
 800aee0:	4b12      	ldr	r3, [pc, #72]	; (800af2c <_vfiprintf_r+0x22c>)
 800aee2:	a904      	add	r1, sp, #16
 800aee4:	4630      	mov	r0, r6
 800aee6:	f7fd fd67 	bl	80089b8 <_printf_float>
 800aeea:	4607      	mov	r7, r0
 800aeec:	1c78      	adds	r0, r7, #1
 800aeee:	d1d6      	bne.n	800ae9e <_vfiprintf_r+0x19e>
 800aef0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aef2:	07d9      	lsls	r1, r3, #31
 800aef4:	d405      	bmi.n	800af02 <_vfiprintf_r+0x202>
 800aef6:	89ab      	ldrh	r3, [r5, #12]
 800aef8:	059a      	lsls	r2, r3, #22
 800aefa:	d402      	bmi.n	800af02 <_vfiprintf_r+0x202>
 800aefc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aefe:	f7fe faa5 	bl	800944c <__retarget_lock_release_recursive>
 800af02:	89ab      	ldrh	r3, [r5, #12]
 800af04:	065b      	lsls	r3, r3, #25
 800af06:	f53f af1d 	bmi.w	800ad44 <_vfiprintf_r+0x44>
 800af0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af0c:	e71c      	b.n	800ad48 <_vfiprintf_r+0x48>
 800af0e:	ab03      	add	r3, sp, #12
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	462a      	mov	r2, r5
 800af14:	4b05      	ldr	r3, [pc, #20]	; (800af2c <_vfiprintf_r+0x22c>)
 800af16:	a904      	add	r1, sp, #16
 800af18:	4630      	mov	r0, r6
 800af1a:	f7fd fff1 	bl	8008f00 <_printf_i>
 800af1e:	e7e4      	b.n	800aeea <_vfiprintf_r+0x1ea>
 800af20:	0800b583 	.word	0x0800b583
 800af24:	0800b58d 	.word	0x0800b58d
 800af28:	080089b9 	.word	0x080089b9
 800af2c:	0800acdd 	.word	0x0800acdd
 800af30:	0800b589 	.word	0x0800b589

0800af34 <__swbuf_r>:
 800af34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af36:	460e      	mov	r6, r1
 800af38:	4614      	mov	r4, r2
 800af3a:	4605      	mov	r5, r0
 800af3c:	b118      	cbz	r0, 800af46 <__swbuf_r+0x12>
 800af3e:	6a03      	ldr	r3, [r0, #32]
 800af40:	b90b      	cbnz	r3, 800af46 <__swbuf_r+0x12>
 800af42:	f7fe f98b 	bl	800925c <__sinit>
 800af46:	69a3      	ldr	r3, [r4, #24]
 800af48:	60a3      	str	r3, [r4, #8]
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	071a      	lsls	r2, r3, #28
 800af4e:	d525      	bpl.n	800af9c <__swbuf_r+0x68>
 800af50:	6923      	ldr	r3, [r4, #16]
 800af52:	b31b      	cbz	r3, 800af9c <__swbuf_r+0x68>
 800af54:	6823      	ldr	r3, [r4, #0]
 800af56:	6922      	ldr	r2, [r4, #16]
 800af58:	1a98      	subs	r0, r3, r2
 800af5a:	6963      	ldr	r3, [r4, #20]
 800af5c:	b2f6      	uxtb	r6, r6
 800af5e:	4283      	cmp	r3, r0
 800af60:	4637      	mov	r7, r6
 800af62:	dc04      	bgt.n	800af6e <__swbuf_r+0x3a>
 800af64:	4621      	mov	r1, r4
 800af66:	4628      	mov	r0, r5
 800af68:	f7ff fdee 	bl	800ab48 <_fflush_r>
 800af6c:	b9e0      	cbnz	r0, 800afa8 <__swbuf_r+0x74>
 800af6e:	68a3      	ldr	r3, [r4, #8]
 800af70:	3b01      	subs	r3, #1
 800af72:	60a3      	str	r3, [r4, #8]
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	1c5a      	adds	r2, r3, #1
 800af78:	6022      	str	r2, [r4, #0]
 800af7a:	701e      	strb	r6, [r3, #0]
 800af7c:	6962      	ldr	r2, [r4, #20]
 800af7e:	1c43      	adds	r3, r0, #1
 800af80:	429a      	cmp	r2, r3
 800af82:	d004      	beq.n	800af8e <__swbuf_r+0x5a>
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	07db      	lsls	r3, r3, #31
 800af88:	d506      	bpl.n	800af98 <__swbuf_r+0x64>
 800af8a:	2e0a      	cmp	r6, #10
 800af8c:	d104      	bne.n	800af98 <__swbuf_r+0x64>
 800af8e:	4621      	mov	r1, r4
 800af90:	4628      	mov	r0, r5
 800af92:	f7ff fdd9 	bl	800ab48 <_fflush_r>
 800af96:	b938      	cbnz	r0, 800afa8 <__swbuf_r+0x74>
 800af98:	4638      	mov	r0, r7
 800af9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af9c:	4621      	mov	r1, r4
 800af9e:	4628      	mov	r0, r5
 800afa0:	f000 f806 	bl	800afb0 <__swsetup_r>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d0d5      	beq.n	800af54 <__swbuf_r+0x20>
 800afa8:	f04f 37ff 	mov.w	r7, #4294967295
 800afac:	e7f4      	b.n	800af98 <__swbuf_r+0x64>
	...

0800afb0 <__swsetup_r>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4b2a      	ldr	r3, [pc, #168]	; (800b05c <__swsetup_r+0xac>)
 800afb4:	4605      	mov	r5, r0
 800afb6:	6818      	ldr	r0, [r3, #0]
 800afb8:	460c      	mov	r4, r1
 800afba:	b118      	cbz	r0, 800afc4 <__swsetup_r+0x14>
 800afbc:	6a03      	ldr	r3, [r0, #32]
 800afbe:	b90b      	cbnz	r3, 800afc4 <__swsetup_r+0x14>
 800afc0:	f7fe f94c 	bl	800925c <__sinit>
 800afc4:	89a3      	ldrh	r3, [r4, #12]
 800afc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afca:	0718      	lsls	r0, r3, #28
 800afcc:	d422      	bmi.n	800b014 <__swsetup_r+0x64>
 800afce:	06d9      	lsls	r1, r3, #27
 800afd0:	d407      	bmi.n	800afe2 <__swsetup_r+0x32>
 800afd2:	2309      	movs	r3, #9
 800afd4:	602b      	str	r3, [r5, #0]
 800afd6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800afda:	81a3      	strh	r3, [r4, #12]
 800afdc:	f04f 30ff 	mov.w	r0, #4294967295
 800afe0:	e034      	b.n	800b04c <__swsetup_r+0x9c>
 800afe2:	0758      	lsls	r0, r3, #29
 800afe4:	d512      	bpl.n	800b00c <__swsetup_r+0x5c>
 800afe6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afe8:	b141      	cbz	r1, 800affc <__swsetup_r+0x4c>
 800afea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afee:	4299      	cmp	r1, r3
 800aff0:	d002      	beq.n	800aff8 <__swsetup_r+0x48>
 800aff2:	4628      	mov	r0, r5
 800aff4:	f7ff f8a6 	bl	800a144 <_free_r>
 800aff8:	2300      	movs	r3, #0
 800affa:	6363      	str	r3, [r4, #52]	; 0x34
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	2300      	movs	r3, #0
 800b006:	6063      	str	r3, [r4, #4]
 800b008:	6923      	ldr	r3, [r4, #16]
 800b00a:	6023      	str	r3, [r4, #0]
 800b00c:	89a3      	ldrh	r3, [r4, #12]
 800b00e:	f043 0308 	orr.w	r3, r3, #8
 800b012:	81a3      	strh	r3, [r4, #12]
 800b014:	6923      	ldr	r3, [r4, #16]
 800b016:	b94b      	cbnz	r3, 800b02c <__swsetup_r+0x7c>
 800b018:	89a3      	ldrh	r3, [r4, #12]
 800b01a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b01e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b022:	d003      	beq.n	800b02c <__swsetup_r+0x7c>
 800b024:	4621      	mov	r1, r4
 800b026:	4628      	mov	r0, r5
 800b028:	f000 f884 	bl	800b134 <__smakebuf_r>
 800b02c:	89a0      	ldrh	r0, [r4, #12]
 800b02e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b032:	f010 0301 	ands.w	r3, r0, #1
 800b036:	d00a      	beq.n	800b04e <__swsetup_r+0x9e>
 800b038:	2300      	movs	r3, #0
 800b03a:	60a3      	str	r3, [r4, #8]
 800b03c:	6963      	ldr	r3, [r4, #20]
 800b03e:	425b      	negs	r3, r3
 800b040:	61a3      	str	r3, [r4, #24]
 800b042:	6923      	ldr	r3, [r4, #16]
 800b044:	b943      	cbnz	r3, 800b058 <__swsetup_r+0xa8>
 800b046:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b04a:	d1c4      	bne.n	800afd6 <__swsetup_r+0x26>
 800b04c:	bd38      	pop	{r3, r4, r5, pc}
 800b04e:	0781      	lsls	r1, r0, #30
 800b050:	bf58      	it	pl
 800b052:	6963      	ldrpl	r3, [r4, #20]
 800b054:	60a3      	str	r3, [r4, #8]
 800b056:	e7f4      	b.n	800b042 <__swsetup_r+0x92>
 800b058:	2000      	movs	r0, #0
 800b05a:	e7f7      	b.n	800b04c <__swsetup_r+0x9c>
 800b05c:	20000100 	.word	0x20000100

0800b060 <_raise_r>:
 800b060:	291f      	cmp	r1, #31
 800b062:	b538      	push	{r3, r4, r5, lr}
 800b064:	4604      	mov	r4, r0
 800b066:	460d      	mov	r5, r1
 800b068:	d904      	bls.n	800b074 <_raise_r+0x14>
 800b06a:	2316      	movs	r3, #22
 800b06c:	6003      	str	r3, [r0, #0]
 800b06e:	f04f 30ff 	mov.w	r0, #4294967295
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b076:	b112      	cbz	r2, 800b07e <_raise_r+0x1e>
 800b078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b07c:	b94b      	cbnz	r3, 800b092 <_raise_r+0x32>
 800b07e:	4620      	mov	r0, r4
 800b080:	f000 f830 	bl	800b0e4 <_getpid_r>
 800b084:	462a      	mov	r2, r5
 800b086:	4601      	mov	r1, r0
 800b088:	4620      	mov	r0, r4
 800b08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b08e:	f000 b817 	b.w	800b0c0 <_kill_r>
 800b092:	2b01      	cmp	r3, #1
 800b094:	d00a      	beq.n	800b0ac <_raise_r+0x4c>
 800b096:	1c59      	adds	r1, r3, #1
 800b098:	d103      	bne.n	800b0a2 <_raise_r+0x42>
 800b09a:	2316      	movs	r3, #22
 800b09c:	6003      	str	r3, [r0, #0]
 800b09e:	2001      	movs	r0, #1
 800b0a0:	e7e7      	b.n	800b072 <_raise_r+0x12>
 800b0a2:	2400      	movs	r4, #0
 800b0a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	4798      	blx	r3
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	e7e0      	b.n	800b072 <_raise_r+0x12>

0800b0b0 <raise>:
 800b0b0:	4b02      	ldr	r3, [pc, #8]	; (800b0bc <raise+0xc>)
 800b0b2:	4601      	mov	r1, r0
 800b0b4:	6818      	ldr	r0, [r3, #0]
 800b0b6:	f7ff bfd3 	b.w	800b060 <_raise_r>
 800b0ba:	bf00      	nop
 800b0bc:	20000100 	.word	0x20000100

0800b0c0 <_kill_r>:
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	4d07      	ldr	r5, [pc, #28]	; (800b0e0 <_kill_r+0x20>)
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	4608      	mov	r0, r1
 800b0ca:	4611      	mov	r1, r2
 800b0cc:	602b      	str	r3, [r5, #0]
 800b0ce:	f7f6 ff6d 	bl	8001fac <_kill>
 800b0d2:	1c43      	adds	r3, r0, #1
 800b0d4:	d102      	bne.n	800b0dc <_kill_r+0x1c>
 800b0d6:	682b      	ldr	r3, [r5, #0]
 800b0d8:	b103      	cbz	r3, 800b0dc <_kill_r+0x1c>
 800b0da:	6023      	str	r3, [r4, #0]
 800b0dc:	bd38      	pop	{r3, r4, r5, pc}
 800b0de:	bf00      	nop
 800b0e0:	200007ac 	.word	0x200007ac

0800b0e4 <_getpid_r>:
 800b0e4:	f7f6 bf5a 	b.w	8001f9c <_getpid>

0800b0e8 <__swhatbuf_r>:
 800b0e8:	b570      	push	{r4, r5, r6, lr}
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f0:	2900      	cmp	r1, #0
 800b0f2:	b096      	sub	sp, #88	; 0x58
 800b0f4:	4615      	mov	r5, r2
 800b0f6:	461e      	mov	r6, r3
 800b0f8:	da0d      	bge.n	800b116 <__swhatbuf_r+0x2e>
 800b0fa:	89a3      	ldrh	r3, [r4, #12]
 800b0fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b100:	f04f 0100 	mov.w	r1, #0
 800b104:	bf0c      	ite	eq
 800b106:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b10a:	2340      	movne	r3, #64	; 0x40
 800b10c:	2000      	movs	r0, #0
 800b10e:	6031      	str	r1, [r6, #0]
 800b110:	602b      	str	r3, [r5, #0]
 800b112:	b016      	add	sp, #88	; 0x58
 800b114:	bd70      	pop	{r4, r5, r6, pc}
 800b116:	466a      	mov	r2, sp
 800b118:	f000 f848 	bl	800b1ac <_fstat_r>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	dbec      	blt.n	800b0fa <__swhatbuf_r+0x12>
 800b120:	9901      	ldr	r1, [sp, #4]
 800b122:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b126:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b12a:	4259      	negs	r1, r3
 800b12c:	4159      	adcs	r1, r3
 800b12e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b132:	e7eb      	b.n	800b10c <__swhatbuf_r+0x24>

0800b134 <__smakebuf_r>:
 800b134:	898b      	ldrh	r3, [r1, #12]
 800b136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b138:	079d      	lsls	r5, r3, #30
 800b13a:	4606      	mov	r6, r0
 800b13c:	460c      	mov	r4, r1
 800b13e:	d507      	bpl.n	800b150 <__smakebuf_r+0x1c>
 800b140:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b144:	6023      	str	r3, [r4, #0]
 800b146:	6123      	str	r3, [r4, #16]
 800b148:	2301      	movs	r3, #1
 800b14a:	6163      	str	r3, [r4, #20]
 800b14c:	b002      	add	sp, #8
 800b14e:	bd70      	pop	{r4, r5, r6, pc}
 800b150:	ab01      	add	r3, sp, #4
 800b152:	466a      	mov	r2, sp
 800b154:	f7ff ffc8 	bl	800b0e8 <__swhatbuf_r>
 800b158:	9900      	ldr	r1, [sp, #0]
 800b15a:	4605      	mov	r5, r0
 800b15c:	4630      	mov	r0, r6
 800b15e:	f7ff f865 	bl	800a22c <_malloc_r>
 800b162:	b948      	cbnz	r0, 800b178 <__smakebuf_r+0x44>
 800b164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b168:	059a      	lsls	r2, r3, #22
 800b16a:	d4ef      	bmi.n	800b14c <__smakebuf_r+0x18>
 800b16c:	f023 0303 	bic.w	r3, r3, #3
 800b170:	f043 0302 	orr.w	r3, r3, #2
 800b174:	81a3      	strh	r3, [r4, #12]
 800b176:	e7e3      	b.n	800b140 <__smakebuf_r+0xc>
 800b178:	89a3      	ldrh	r3, [r4, #12]
 800b17a:	6020      	str	r0, [r4, #0]
 800b17c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b180:	81a3      	strh	r3, [r4, #12]
 800b182:	9b00      	ldr	r3, [sp, #0]
 800b184:	6163      	str	r3, [r4, #20]
 800b186:	9b01      	ldr	r3, [sp, #4]
 800b188:	6120      	str	r0, [r4, #16]
 800b18a:	b15b      	cbz	r3, 800b1a4 <__smakebuf_r+0x70>
 800b18c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b190:	4630      	mov	r0, r6
 800b192:	f000 f81d 	bl	800b1d0 <_isatty_r>
 800b196:	b128      	cbz	r0, 800b1a4 <__smakebuf_r+0x70>
 800b198:	89a3      	ldrh	r3, [r4, #12]
 800b19a:	f023 0303 	bic.w	r3, r3, #3
 800b19e:	f043 0301 	orr.w	r3, r3, #1
 800b1a2:	81a3      	strh	r3, [r4, #12]
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	431d      	orrs	r5, r3
 800b1a8:	81a5      	strh	r5, [r4, #12]
 800b1aa:	e7cf      	b.n	800b14c <__smakebuf_r+0x18>

0800b1ac <_fstat_r>:
 800b1ac:	b538      	push	{r3, r4, r5, lr}
 800b1ae:	4d07      	ldr	r5, [pc, #28]	; (800b1cc <_fstat_r+0x20>)
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	4608      	mov	r0, r1
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	602b      	str	r3, [r5, #0]
 800b1ba:	f7f6 ff56 	bl	800206a <_fstat>
 800b1be:	1c43      	adds	r3, r0, #1
 800b1c0:	d102      	bne.n	800b1c8 <_fstat_r+0x1c>
 800b1c2:	682b      	ldr	r3, [r5, #0]
 800b1c4:	b103      	cbz	r3, 800b1c8 <_fstat_r+0x1c>
 800b1c6:	6023      	str	r3, [r4, #0]
 800b1c8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ca:	bf00      	nop
 800b1cc:	200007ac 	.word	0x200007ac

0800b1d0 <_isatty_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	4d06      	ldr	r5, [pc, #24]	; (800b1ec <_isatty_r+0x1c>)
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	4608      	mov	r0, r1
 800b1da:	602b      	str	r3, [r5, #0]
 800b1dc:	f7f6 ff55 	bl	800208a <_isatty>
 800b1e0:	1c43      	adds	r3, r0, #1
 800b1e2:	d102      	bne.n	800b1ea <_isatty_r+0x1a>
 800b1e4:	682b      	ldr	r3, [r5, #0]
 800b1e6:	b103      	cbz	r3, 800b1ea <_isatty_r+0x1a>
 800b1e8:	6023      	str	r3, [r4, #0]
 800b1ea:	bd38      	pop	{r3, r4, r5, pc}
 800b1ec:	200007ac 	.word	0x200007ac

0800b1f0 <_init>:
 800b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f2:	bf00      	nop
 800b1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f6:	bc08      	pop	{r3}
 800b1f8:	469e      	mov	lr, r3
 800b1fa:	4770      	bx	lr

0800b1fc <_fini>:
 800b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fe:	bf00      	nop
 800b200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b202:	bc08      	pop	{r3}
 800b204:	469e      	mov	lr, r3
 800b206:	4770      	bx	lr
