
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009190  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08009330  08009330  00019330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096bc  080096bc  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  080096bc  080096bc  000196bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096c4  080096c4  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096c4  080096c4  000196c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096c8  080096c8  000196c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  080096cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  20000264  08009930  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  08009930  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d14a  00000000  00000000  000202d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f0b  00000000  00000000  0002d421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  0002f330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000afd  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001742b  00000000  00000000  00030c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000102bc  00000000  00000000  00048060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fd2a  00000000  00000000  0005831c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b7c  00000000  00000000  000e8048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000ecbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000264 	.word	0x20000264
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009318 	.word	0x08009318

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000268 	.word	0x20000268
 80001dc:	08009318 	.word	0x08009318

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <PrepareCommutation>:
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */



uint8_t PrepareCommutation (char Direction) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]

	// Read IDR for Hall Sensor status
	uint16_t Hall = (GPIOA->IDR & 0b111) - 1 + 6 * Direction;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <PrepareCommutation+0x7c>)
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	4619      	mov	r1, r3
 8000ed0:	0049      	lsls	r1, r1, #1
 8000ed2:	440b      	add	r3, r1
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	4413      	add	r3, r2
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	3b01      	subs	r3, #1
 8000ede:	81fb      	strh	r3, [r7, #14]

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8000ee0:	89fa      	ldrh	r2, [r7, #14]
 8000ee2:	4914      	ldr	r1, [pc, #80]	; (8000f34 <PrepareCommutation+0x80>)
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	440b      	add	r3, r1
 8000eee:	881a      	ldrh	r2, [r3, #0]
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <PrepareCommutation+0x84>)
 8000ef2:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 8000ef4:	89fa      	ldrh	r2, [r7, #14]
 8000ef6:	490f      	ldr	r1, [pc, #60]	; (8000f34 <PrepareCommutation+0x80>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	440b      	add	r3, r1
 8000f02:	3304      	adds	r3, #4
 8000f04:	881a      	ldrh	r2, [r3, #0]
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <PrepareCommutation+0x84>)
 8000f08:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 8000f0a:	89fa      	ldrh	r2, [r7, #14]
 8000f0c:	4909      	ldr	r1, [pc, #36]	; (8000f34 <PrepareCommutation+0x80>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	440b      	add	r3, r1
 8000f18:	3302      	adds	r3, #2
 8000f1a:	881a      	ldrh	r2, [r3, #0]
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <PrepareCommutation+0x84>)
 8000f1e:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8000f20:	2300      	movs	r3, #0

}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40020000 	.word	0x40020000
 8000f34:	20000000 	.word	0x20000000
 8000f38:	40010000 	.word	0x40010000

08000f3c <StartupSequence>:

uint8_t StartupSequence (char Direction) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]

	// Initialize some variables
	Fapb1tclk = HAL_RCC_GetPCLK1Freq() * 2;
 8000f46:	f003 ff2d 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4a53      	ldr	r2, [pc, #332]	; (800109c <StartupSequence+0x160>)
 8000f50:	6013      	str	r3, [r2, #0]
	Fapb2tclk = HAL_RCC_GetPCLK2Freq() * 2;
 8000f52:	f003 ff3b 	bl	8004dcc <HAL_RCC_GetPCLK2Freq>
 8000f56:	4603      	mov	r3, r0
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4a51      	ldr	r2, [pc, #324]	; (80010a0 <StartupSequence+0x164>)
 8000f5c:	6013      	str	r3, [r2, #0]
	RPMConst = (Fapb2tclk / (TIM9->PSC + 1)) * 2;
 8000f5e:	4b50      	ldr	r3, [pc, #320]	; (80010a0 <StartupSequence+0x164>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b50      	ldr	r3, [pc, #320]	; (80010a4 <StartupSequence+0x168>)
 8000f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f66:	3301      	adds	r3, #1
 8000f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4a4e      	ldr	r2, [pc, #312]	; (80010a8 <StartupSequence+0x16c>)
 8000f70:	6013      	str	r3, [r2, #0]

	// Set first commutation state according to Hall sensors
	if (PrepareCommutation (Direction + 6 * 2)) {
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	330c      	adds	r3, #12
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff9b 	bl	8000eb4 <PrepareCommutation>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <StartupSequence+0x4c>
		return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e084      	b.n	8001092 <StartupSequence+0x156>
	}

	// Start HallSensor timer
	HAL_TIMEx_HallSensor_Start (&htim2);
 8000f88:	4848      	ldr	r0, [pc, #288]	; (80010ac <StartupSequence+0x170>)
 8000f8a:	f005 fb7d 	bl	8006688 <HAL_TIMEx_HallSensor_Start>

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4847      	ldr	r0, [pc, #284]	; (80010b0 <StartupSequence+0x174>)
 8000f92:	f004 f869 	bl	8005068 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 8000f96:	2104      	movs	r1, #4
 8000f98:	4845      	ldr	r0, [pc, #276]	; (80010b0 <StartupSequence+0x174>)
 8000f9a:	f004 f865 	bl	8005068 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	4843      	ldr	r0, [pc, #268]	; (80010b0 <StartupSequence+0x174>)
 8000fa2:	f004 f861 	bl	8005068 <HAL_TIM_PWM_Start>

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 8000fa6:	4b43      	ldr	r3, [pc, #268]	; (80010b4 <StartupSequence+0x178>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	4a42      	ldr	r2, [pc, #264]	; (80010b4 <StartupSequence+0x178>)
 8000fac:	f023 0320 	bic.w	r3, r3, #32
 8000fb0:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <StartupSequence+0x178>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	4a3f      	ldr	r2, [pc, #252]	; (80010b4 <StartupSequence+0x178>)
 8000fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fbc:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8000fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fcc:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8000fce:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <StartupSequence+0x168>)
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	4a34      	ldr	r2, [pc, #208]	; (80010a4 <StartupSequence+0x168>)
 8000fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fd8:	60d3      	str	r3, [r2, #12]

	// Start Interrupts
	HAL_TIM_Base_Start_IT (&htim1);
 8000fda:	4835      	ldr	r0, [pc, #212]	; (80010b0 <StartupSequence+0x174>)
 8000fdc:	f003 ff5a 	bl	8004e94 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim2);
 8000fe0:	4832      	ldr	r0, [pc, #200]	; (80010ac <StartupSequence+0x170>)
 8000fe2:	f003 ff57 	bl	8004e94 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim9);
 8000fe6:	4834      	ldr	r0, [pc, #208]	; (80010b8 <StartupSequence+0x17c>)
 8000fe8:	f003 ff54 	bl	8004e94 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT (&htim9, TIM_CHANNEL_2);
 8000fec:	2104      	movs	r1, #4
 8000fee:	4832      	ldr	r0, [pc, #200]	; (80010b8 <StartupSequence+0x17c>)
 8000ff0:	f004 f99e 	bl	8005330 <HAL_TIM_IC_Start_IT>

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <StartupSequence+0x178>)
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <StartupSequence+0x178>)
 8000ffa:	f023 0320 	bic.w	r3, r3, #32
 8000ffe:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <StartupSequence+0x178>)
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <StartupSequence+0x178>)
 8001006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800100a:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 800100c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800101a:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <StartupSequence+0x168>)
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	4a20      	ldr	r2, [pc, #128]	; (80010a4 <StartupSequence+0x168>)
 8001022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001026:	6113      	str	r3, [r2, #16]

	// Enable interrupts
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <StartupSequence+0x178>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <StartupSequence+0x178>)
 800102e:	f043 0320 	orr.w	r3, r3, #32
 8001032:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 8001034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001042:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <StartupSequence+0x168>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <StartupSequence+0x168>)
 800104a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104e:	60d3      	str	r3, [r2, #12]

	// Write some registers
	TIM1->CR2  |= TIM_CR2_CCPC; 	// Set CCPC in CR2 to preload CCxE, CCxNE and OCxM bits
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <StartupSequence+0x178>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <StartupSequence+0x178>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6053      	str	r3, [r2, #4]
	TIM1->BDTR &= ~TIM_BDTR_DTG;	// Reset DTG bits
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <StartupSequence+0x178>)
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <StartupSequence+0x178>)
 8001062:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001066:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= 0x800A;			// Set dead-time to 100ns and make sure to enable MOE bit
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <StartupSequence+0x178>)
 800106a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106c:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <StartupSequence+0x178>)
 800106e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001072:	f043 030a 	orr.w	r3, r3, #10
 8001076:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <StartupSequence+0x178>)
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <StartupSequence+0x178>)
 800107e:	f043 0320 	orr.w	r3, r3, #32
 8001082:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <StartupSequence+0x178>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <StartupSequence+0x178>)
 800108a:	f043 0320 	orr.w	r3, r3, #32
 800108e:	60d3      	str	r3, [r2, #12]

	return HAL_OK;
 8001090:	2300      	movs	r3, #0

}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000420 	.word	0x20000420
 80010a0:	20000424 	.word	0x20000424
 80010a4:	40014000 	.word	0x40014000
 80010a8:	20000428 	.word	0x20000428
 80010ac:	20000370 	.word	0x20000370
 80010b0:	20000328 	.word	0x20000328
 80010b4:	40010000 	.word	0x40010000
 80010b8:	200003b8 	.word	0x200003b8

080010bc <StopSequence>:

uint8_t StopSequence(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

	// Stop HallSensor timer
	HAL_TIMEx_HallSensor_Stop (&htim2);
 80010c0:	4828      	ldr	r0, [pc, #160]	; (8001164 <StopSequence+0xa8>)
 80010c2:	f005 fb61 	bl	8006788 <HAL_TIMEx_HallSensor_Stop>

	// Disable all output channels
	TIM1->CCER  = 0x0000;
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <StopSequence+0xac>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = 0x0000;
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <StopSequence+0xac>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = 0x0000;
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <StopSequence+0xac>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]

	// Perform one last commutation event if not already disabled
	if ( (TIM1->DIER & TIM_DIER_COMIE) >= 1 ) { 		// If COMIE bit in DIER is set commutation events are still enabled
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <StopSequence+0xac>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f003 0320 	and.w	r3, r3, #32
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <StopSequence+0x34>

		TIM1->EGR |= TIM_EGR_COMG; 						// Trigger commutation event
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <StopSequence+0xac>)
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <StopSequence+0xac>)
 80010ea:	f043 0320 	orr.w	r3, r3, #32
 80010ee:	6153      	str	r3, [r2, #20]
		// while ( (TIM1->SR & TIM_SR_COMIF) >= 1 ); 	// Wait until commutation event has happened

	}

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <StopSequence+0xac>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <StopSequence+0xac>)
 80010f6:	f023 0320 	bic.w	r3, r3, #32
 80010fa:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <StopSequence+0xac>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4a19      	ldr	r2, [pc, #100]	; (8001168 <StopSequence+0xac>)
 8001102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001106:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8001108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001116:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <StopSequence+0xb0>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4a13      	ldr	r2, [pc, #76]	; (800116c <StopSequence+0xb0>)
 800111e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001122:	60d3      	str	r3, [r2, #12]

	// Stop interrupts
	HAL_TIM_Base_Stop_IT (&htim1);
 8001124:	4812      	ldr	r0, [pc, #72]	; (8001170 <StopSequence+0xb4>)
 8001126:	f003 ff17 	bl	8004f58 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim2);
 800112a:	480e      	ldr	r0, [pc, #56]	; (8001164 <StopSequence+0xa8>)
 800112c:	f003 ff14 	bl	8004f58 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim9);
 8001130:	4810      	ldr	r0, [pc, #64]	; (8001174 <StopSequence+0xb8>)
 8001132:	f003 ff11 	bl	8004f58 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT (&htim9, TIM_CHANNEL_2);
 8001136:	2104      	movs	r1, #4
 8001138:	480e      	ldr	r0, [pc, #56]	; (8001174 <StopSequence+0xb8>)
 800113a:	f004 fa13 	bl	8005564 <HAL_TIM_IC_Stop_IT>

	// Stop PWM Timers
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_1);
 800113e:	2100      	movs	r1, #0
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <StopSequence+0xb4>)
 8001142:	f004 f841 	bl	80051c8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_2);
 8001146:	2104      	movs	r1, #4
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <StopSequence+0xb4>)
 800114a:	f004 f83d 	bl	80051c8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_3);
 800114e:	2108      	movs	r1, #8
 8001150:	4807      	ldr	r0, [pc, #28]	; (8001170 <StopSequence+0xb4>)
 8001152:	f004 f839 	bl	80051c8 <HAL_TIM_PWM_Stop>

	Registers[RPMReg] = 0;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <StopSequence+0xbc>)
 8001158:	2200      	movs	r2, #0
 800115a:	80da      	strh	r2, [r3, #6]

	return HAL_OK;
 800115c:	2300      	movs	r3, #0

}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000370 	.word	0x20000370
 8001168:	40010000 	.word	0x40010000
 800116c:	40014000 	.word	0x40014000
 8001170:	20000328 	.word	0x20000328
 8001174:	200003b8 	.word	0x200003b8
 8001178:	20000400 	.word	0x20000400

0800117c <ChangePWM>:

uint8_t ChangePWM (void) {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0

	uint32_t PWM = (Registers[PWMReg] * TIM1->ARR) / 100; // Calculate required CCRx value
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <ChangePWM+0x6c>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <ChangePWM+0x70>)
 800118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <ChangePWM+0x74>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	607b      	str	r3, [r7, #4]

	if (PWM >= TIM1->ARR - 60) {
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <ChangePWM+0x70>)
 800119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119e:	3b3c      	subs	r3, #60	; 0x3c
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d303      	bcc.n	80011ae <ChangePWM+0x32>
		PWM = TIM1->ARR - 60;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <ChangePWM+0x70>)
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	3b3c      	subs	r3, #60	; 0x3c
 80011ac:	607b      	str	r3, [r7, #4]
	}

	TIM1->CR1 |= TIM_CR1_UDIS; 	// Disable Update Events
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <ChangePWM+0x70>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <ChangePWM+0x70>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = PWM;	  		// Set new PWM for channel 1
 80011ba:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <ChangePWM+0x70>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = PWM;	  		// Set new PWM for channel 2
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <ChangePWM+0x70>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = PWM;	  		// Set new PWM for channel 3
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <ChangePWM+0x70>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_UDIS; // Enable Update Events
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <ChangePWM+0x70>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a06      	ldr	r2, [pc, #24]	; (80011ec <ChangePWM+0x70>)
 80011d2:	f023 0302 	bic.w	r3, r3, #2
 80011d6:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 80011d8:	2300      	movs	r3, #0

}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000400 	.word	0x20000400
 80011ec:	40010000 	.word	0x40010000
 80011f0:	51eb851f 	.word	0x51eb851f

080011f4 <ProcessData>:

void ProcessData (void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

	StartReg = RxData[0]; 			// Start address of registers to be written
 80011fa:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <ProcessData+0xac>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <ProcessData+0xb0>)
 8001202:	601a      	str	r2, [r3, #0]
	NumReg = RxCount - 1; 			// Number of registers to be written
 8001204:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <ProcessData+0xb4>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3b01      	subs	r3, #1
 800120a:	4a28      	ldr	r2, [pc, #160]	; (80012ac <ProcessData+0xb8>)
 800120c:	6013      	str	r3, [r2, #0]
	EndReg = StartReg + NumReg - 1; // Last register to be written
 800120e:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <ProcessData+0xb0>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <ProcessData+0xb8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	3b01      	subs	r3, #1
 800121a:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <ProcessData+0xbc>)
 800121c:	6013      	str	r3, [r2, #0]

	// If the last register to be wriiten is larger than the size of the register call the error handler
	if (EndReg > RxSize) {
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <ProcessData+0xbc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b06      	cmp	r3, #6
 8001224:	dd01      	ble.n	800122a <ProcessData+0x36>
		Error_Handler();
 8001226:	f000 fba1 	bl	800196c <Error_Handler>
	}

	// Write data into the register using a for loop
	for (int i = 1; i < NumReg + 1; i++) {
 800122a:	2301      	movs	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	e00f      	b.n	8001250 <ProcessData+0x5c>
		Registers[StartReg++] = RxData[i + 1];
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3301      	adds	r3, #1
 8001234:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <ProcessData+0xac>)
 8001236:	5cd0      	ldrb	r0, [r2, r3]
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <ProcessData+0xb0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	4919      	ldr	r1, [pc, #100]	; (80012a4 <ProcessData+0xb0>)
 8001240:	600a      	str	r2, [r1, #0]
 8001242:	b281      	uxth	r1, r0
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <ProcessData+0xc0>)
 8001246:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 1; i < NumReg + 1; i++) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3301      	adds	r3, #1
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <ProcessData+0xb8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	429a      	cmp	r2, r3
 8001258:	ddea      	ble.n	8001230 <ProcessData+0x3c>
	}

	// If the PWM is higher than 0 but the motor is not turning then startup
	if ( Registers[PWMReg] > 0 && Registers[RPMReg] == 0) {
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <ProcessData+0xc0>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d009      	beq.n	8001276 <ProcessData+0x82>
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <ProcessData+0xc0>)
 8001264:	88db      	ldrh	r3, [r3, #6]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d105      	bne.n	8001276 <ProcessData+0x82>
		StartupSequence(Registers[DirReg]);
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <ProcessData+0xc0>)
 800126c:	885b      	ldrh	r3, [r3, #2]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe63 	bl	8000f3c <StartupSequence>
	}

	// If the PWM is 0 but the motor is still turning shutdown
	if ( Registers[PWMReg] == 0 && Registers[RPMReg] > 0 ) {
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <ProcessData+0xc0>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d105      	bne.n	800128a <ProcessData+0x96>
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <ProcessData+0xc0>)
 8001280:	88db      	ldrh	r3, [r3, #6]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <ProcessData+0x96>
		StopSequence();
 8001286:	f7ff ff19 	bl	80010bc <StopSequence>
	}

	// Call some functions
	ChangePWM(); 				// Update PWM values
 800128a:	f7ff ff77 	bl	800117c <ChangePWM>
	memset(RxData, 0, RxSize); 	// Empty the RxData array
 800128e:	2206      	movs	r2, #6
 8001290:	2100      	movs	r1, #0
 8001292:	4803      	ldr	r0, [pc, #12]	; (80012a0 <ProcessData+0xac>)
 8001294:	f006 f8ef 	bl	8007476 <memset>

}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000418 	.word	0x20000418
 80012a4:	20000408 	.word	0x20000408
 80012a8:	20000415 	.word	0x20000415
 80012ac:	2000040c 	.word	0x2000040c
 80012b0:	20000410 	.word	0x20000410
 80012b4:	20000400 	.word	0x20000400

080012b8 <HAL_I2C_ListenCpltCallback>:

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

	HAL_I2C_EnableListen_IT (hi2c);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f001 fc7f 	bl	8002bc4 <HAL_I2C_EnableListen_IT>

}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback (I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
 80012dc:	4613      	mov	r3, r2
 80012de:	803b      	strh	r3, [r7, #0]

	if ( TransferDirection == I2C_DIRECTION_TRANSMIT ) { // If the master wants to transmit the data
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d10d      	bne.n	8001302 <HAL_I2C_AddrCallback+0x32>

		RxCount = 0;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <HAL_I2C_AddrCallback+0x8c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_FIRST_FRAME);
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <HAL_I2C_AddrCallback+0x8c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_I2C_AddrCallback+0x90>)
 80012f4:	18d1      	adds	r1, r2, r3
 80012f6:	2301      	movs	r3, #1
 80012f8:	2201      	movs	r2, #1
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f001 fbef 	bl	8002ade <HAL_I2C_Slave_Seq_Receive_IT>
		StartReg = RxData[0];
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] >> 8), 1, I2C_FIRST_FRAME);
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] & 0xFF), 1, I2C_NEXT_FRAME);

	}
}
 8001300:	e028      	b.n	8001354 <HAL_I2C_AddrCallback+0x84>
		TxCount = 0;
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_I2C_AddrCallback+0x94>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
		StartReg = RxData[0];
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_I2C_AddrCallback+0x90>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_I2C_AddrCallback+0x98>)
 8001310:	601a      	str	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] >> 8), 1, I2C_FIRST_FRAME);
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <HAL_I2C_AddrCallback+0x94>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_I2C_AddrCallback+0x98>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4413      	add	r3, r2
 800131e:	4a13      	ldr	r2, [pc, #76]	; (800136c <HAL_I2C_AddrCallback+0x9c>)
 8001320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	b29b      	uxth	r3, r3
 8001328:	4619      	mov	r1, r3
 800132a:	2301      	movs	r3, #1
 800132c:	2201      	movs	r2, #1
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f001 fb62 	bl	80029f8 <HAL_I2C_Slave_Seq_Transmit_IT>
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] & 0xFF), 1, I2C_NEXT_FRAME);
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_I2C_AddrCallback+0x94>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_I2C_AddrCallback+0x98>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a0a      	ldr	r2, [pc, #40]	; (800136c <HAL_I2C_AddrCallback+0x9c>)
 8001342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	4619      	mov	r1, r3
 800134a:	2304      	movs	r3, #4
 800134c:	2201      	movs	r2, #1
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f001 fb52 	bl	80029f8 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000415 	.word	0x20000415
 8001360:	20000418 	.word	0x20000418
 8001364:	20000414 	.word	0x20000414
 8001368:	20000408 	.word	0x20000408
 800136c:	20000400 	.word	0x20000400

08001370 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback (I2C_HandleTypeDef *hi2c) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

	TxCount++;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_I2C_SlaveTxCpltCallback+0x60>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_I2C_SlaveTxCpltCallback+0x60>)
 8001382:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] >> 8), 1, I2C_NEXT_FRAME);
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_I2C_SlaveTxCpltCallback+0x60>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_I2C_SlaveTxCpltCallback+0x64>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 8001392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001396:	0a1b      	lsrs	r3, r3, #8
 8001398:	b29b      	uxth	r3, r3
 800139a:	4619      	mov	r1, r3
 800139c:	2304      	movs	r3, #4
 800139e:	2201      	movs	r2, #1
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f001 fb29 	bl	80029f8 <HAL_I2C_Slave_Seq_Transmit_IT>
	HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] & 0xFF), 1, I2C_NEXT_FRAME);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_I2C_SlaveTxCpltCallback+0x60>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_I2C_SlaveTxCpltCallback+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 80013b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4619      	mov	r1, r3
 80013bc:	2304      	movs	r3, #4
 80013be:	2201      	movs	r2, #1
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f001 fb19 	bl	80029f8 <HAL_I2C_Slave_Seq_Transmit_IT>

}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000414 	.word	0x20000414
 80013d4:	20000408 	.word	0x20000408
 80013d8:	20000400 	.word	0x20000400

080013dc <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef *hi2c) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

	RxCount++;
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80013ee:	701a      	strb	r2, [r3, #0]

	if ( RxCount < RxSize ) {
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d818      	bhi.n	800142a <HAL_I2C_SlaveRxCpltCallback+0x4e>

		if (RxCount == RxSize - 1) {
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b05      	cmp	r3, #5
 80013fe:	d10a      	bne.n	8001416 <HAL_I2C_SlaveRxCpltCallback+0x3a>
			HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_LAST_FRAME);
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001408:	18d1      	adds	r1, r2, r3
 800140a:	2320      	movs	r3, #32
 800140c:	2201      	movs	r2, #1
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f001 fb65 	bl	8002ade <HAL_I2C_Slave_Seq_Receive_IT>
 8001414:	e009      	b.n	800142a <HAL_I2C_SlaveRxCpltCallback+0x4e>
		} else {
			HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_NEXT_FRAME);
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800141e:	18d1      	adds	r1, r2, r3
 8001420:	2304      	movs	r3, #4
 8001422:	2201      	movs	r2, #1
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f001 fb5a 	bl	8002ade <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if ( RxCount == RxSize) {
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b06      	cmp	r3, #6
 8001430:	d101      	bne.n	8001436 <HAL_I2C_SlaveRxCpltCallback+0x5a>
		ProcessData();
 8001432:	f7ff fedf 	bl	80011f4 <ProcessData>
	}

}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000415 	.word	0x20000415
 8001444:	20000418 	.word	0x20000418

08001448 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback (I2C_HandleTypeDef *hi2c) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

	if ( HAL_I2C_GetError (hi2c) == 4) {
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f001 fe11 	bl	8003078 <HAL_I2C_GetError>
 8001456:	4603      	mov	r3, r0
 8001458:	2b04      	cmp	r3, #4
 800145a:	d111      	bne.n	8001480 <HAL_I2C_ErrorCallback+0x38>

		__HAL_I2C_CLEAR_FLAG (hi2c, I2C_FLAG_AF); 	// Clear AF flag
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001464:	615a      	str	r2, [r3, #20]

		if ( TxCount == 0) { 						// Error while recieving
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_I2C_ErrorCallback+0x48>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <HAL_I2C_ErrorCallback+0x2c>
			ProcessData();
 800146e:	f7ff fec1 	bl	80011f4 <ProcessData>
 8001472:	e005      	b.n	8001480 <HAL_I2C_ErrorCallback+0x38>
		} else { 									// Error while transmitting
			TxCount--;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_I2C_ErrorCallback+0x48>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3b01      	subs	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <HAL_I2C_ErrorCallback+0x48>)
 800147e:	701a      	strb	r2, [r3, #0]
		}

	}

	HAL_I2C_EnableListen_IT(hi2c);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f001 fb9f 	bl	8002bc4 <HAL_I2C_EnableListen_IT>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000414 	.word	0x20000414

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001498:	f000 fe32 	bl	8002100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149c:	f000 f812 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a0:	f000 fa1a 	bl	80018d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80014a4:	f000 f8d4 	bl	8001650 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014a8:	f000 f98c 	bl	80017c4 <MX_TIM2_Init>
  MX_TIM9_Init();
 80014ac:	f000 f9d4 	bl	8001858 <MX_TIM9_Init>
  MX_I2C1_Init();
 80014b0:	f000 f872 	bl	8001598 <MX_I2C1_Init>
  MX_I2C2_Init();
 80014b4:	f000 f89e 	bl	80015f4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	HAL_I2C_EnableListen_IT (&hi2c1);
 80014b8:	4801      	ldr	r0, [pc, #4]	; (80014c0 <main+0x2c>)
 80014ba:	f001 fb83 	bl	8002bc4 <HAL_I2C_EnableListen_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014be:	e7fe      	b.n	80014be <main+0x2a>
 80014c0:	20000280 	.word	0x20000280

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b094      	sub	sp, #80	; 0x50
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	2230      	movs	r2, #48	; 0x30
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 ffcf 	bl	8007476 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <SystemClock_Config+0xcc>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a27      	ldr	r2, [pc, #156]	; (8001590 <SystemClock_Config+0xcc>)
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <SystemClock_Config+0xcc>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <SystemClock_Config+0xd0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a21      	ldr	r2, [pc, #132]	; (8001594 <SystemClock_Config+0xd0>)
 800150e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <SystemClock_Config+0xd0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001520:	2301      	movs	r3, #1
 8001522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001534:	2319      	movs	r3, #25
 8001536:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001538:	23c0      	movs	r3, #192	; 0xc0
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153c:	2302      	movs	r3, #2
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001540:	2304      	movs	r3, #4
 8001542:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	4618      	mov	r0, r3
 800154a:	f002 fffb 	bl	8004544 <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001554:	f000 fa0a 	bl	800196c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	230f      	movs	r3, #15
 800155a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155c:	2302      	movs	r3, #2
 800155e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2103      	movs	r1, #3
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fa5c 	bl	8004a34 <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001582:	f000 f9f3 	bl	800196c <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	3750      	adds	r7, #80	; 0x50
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40007000 	.word	0x40007000

08001598 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_I2C1_Init+0x50>)
 800159e:	4a13      	ldr	r2, [pc, #76]	; (80015ec <MX_I2C1_Init+0x54>)
 80015a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <MX_I2C1_Init+0x58>)
 80015a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015b0:	2220      	movs	r2, #32
 80015b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015d6:	f001 f8cb 	bl	8002770 <HAL_I2C_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015e0:	f000 f9c4 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000280 	.word	0x20000280
 80015ec:	40005400 	.word	0x40005400
 80015f0:	000186a0 	.word	0x000186a0

080015f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_I2C2_Init+0x50>)
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <MX_I2C2_Init+0x54>)
 80015fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_I2C2_Init+0x50>)
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <MX_I2C2_Init+0x58>)
 8001602:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_I2C2_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_I2C2_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_I2C2_Init+0x50>)
 8001612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001616:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <MX_I2C2_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_I2C2_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <MX_I2C2_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_I2C2_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_I2C2_Init+0x50>)
 8001632:	f001 f89d 	bl	8002770 <HAL_I2C_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800163c:	f000 f996 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200002d4 	.word	0x200002d4
 8001648:	40005800 	.word	0x40005800
 800164c:	000186a0 	.word	0x000186a0

08001650 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b096      	sub	sp, #88	; 0x58
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001656:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001666:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001684:	463b      	mov	r3, r7
 8001686:	2220      	movs	r2, #32
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f005 fef3 	bl	8007476 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001690:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <MX_TIM1_Init+0x16c>)
 8001692:	4a4b      	ldr	r2, [pc, #300]	; (80017c0 <MX_TIM1_Init+0x170>)
 8001694:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001696:	4b49      	ldr	r3, [pc, #292]	; (80017bc <MX_TIM1_Init+0x16c>)
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b47      	ldr	r3, [pc, #284]	; (80017bc <MX_TIM1_Init+0x16c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 80016a2:	4b46      	ldr	r3, [pc, #280]	; (80017bc <MX_TIM1_Init+0x16c>)
 80016a4:	f240 727f 	movw	r2, #1919	; 0x77f
 80016a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016aa:	4b44      	ldr	r3, [pc, #272]	; (80017bc <MX_TIM1_Init+0x16c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016b0:	4b42      	ldr	r3, [pc, #264]	; (80017bc <MX_TIM1_Init+0x16c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <MX_TIM1_Init+0x16c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016bc:	483f      	ldr	r0, [pc, #252]	; (80017bc <MX_TIM1_Init+0x16c>)
 80016be:	f003 fb99 	bl	8004df4 <HAL_TIM_Base_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016c8:	f000 f950 	bl	800196c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016cc:	483b      	ldr	r0, [pc, #236]	; (80017bc <MX_TIM1_Init+0x16c>)
 80016ce:	f003 fc72 	bl	8004fb6 <HAL_TIM_PWM_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80016d8:	f000 f948 	bl	800196c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80016dc:	2304      	movs	r3, #4
 80016de:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80016e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016e8:	4619      	mov	r1, r3
 80016ea:	4834      	ldr	r0, [pc, #208]	; (80017bc <MX_TIM1_Init+0x16c>)
 80016ec:	f004 fa4e 	bl	8005b8c <HAL_TIM_SlaveConfigSynchro>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80016f6:	f000 f939 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001702:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001706:	4619      	mov	r1, r3
 8001708:	482c      	ldr	r0, [pc, #176]	; (80017bc <MX_TIM1_Init+0x16c>)
 800170a:	f005 f875 	bl	80067f8 <HAL_TIMEx_MasterConfigSynchronization>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001714:	f000 f92a 	bl	800196c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001718:	2360      	movs	r3, #96	; 0x60
 800171a:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001734:	f107 0320 	add.w	r3, r7, #32
 8001738:	2200      	movs	r2, #0
 800173a:	4619      	mov	r1, r3
 800173c:	481f      	ldr	r0, [pc, #124]	; (80017bc <MX_TIM1_Init+0x16c>)
 800173e:	f004 f963 	bl	8005a08 <HAL_TIM_PWM_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001748:	f000 f910 	bl	800196c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800174c:	f107 0320 	add.w	r3, r7, #32
 8001750:	2204      	movs	r2, #4
 8001752:	4619      	mov	r1, r3
 8001754:	4819      	ldr	r0, [pc, #100]	; (80017bc <MX_TIM1_Init+0x16c>)
 8001756:	f004 f957 	bl	8005a08 <HAL_TIM_PWM_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001760:	f000 f904 	bl	800196c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001764:	f107 0320 	add.w	r3, r7, #32
 8001768:	2208      	movs	r2, #8
 800176a:	4619      	mov	r1, r3
 800176c:	4813      	ldr	r0, [pc, #76]	; (80017bc <MX_TIM1_Init+0x16c>)
 800176e:	f004 f94b 	bl	8005a08 <HAL_TIM_PWM_ConfigChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001778:	f000 f8f8 	bl	800196c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001794:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800179a:	463b      	mov	r3, r7
 800179c:	4619      	mov	r1, r3
 800179e:	4807      	ldr	r0, [pc, #28]	; (80017bc <MX_TIM1_Init+0x16c>)
 80017a0:	f005 f898 	bl	80068d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 80017aa:	f000 f8df 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <MX_TIM1_Init+0x16c>)
 80017b0:	f000 fa74 	bl	8001c9c <HAL_TIM_MspPostInit>

}
 80017b4:	bf00      	nop
 80017b6:	3758      	adds	r7, #88	; 0x58
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000328 	.word	0x20000328
 80017c0:	40010000 	.word	0x40010000

080017c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	463b      	mov	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <MX_TIM2_Init+0x90>)
 80017e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_TIM2_Init+0x90>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_TIM2_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <MX_TIM2_Init+0x90>)
 80017f6:	f04f 32ff 	mov.w	r2, #4294967295
 80017fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <MX_TIM2_Init+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <MX_TIM2_Init+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	4619      	mov	r1, r3
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <MX_TIM2_Init+0x90>)
 8001820:	f004 fe88 	bl	8006534 <HAL_TIMEx_HallSensor_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800182a:	f000 f89f 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800182e:	2350      	movs	r3, #80	; 0x50
 8001830:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001836:	463b      	mov	r3, r7
 8001838:	4619      	mov	r1, r3
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <MX_TIM2_Init+0x90>)
 800183c:	f004 ffdc 	bl	80067f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001846:	f000 f891 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000370 	.word	0x20000370

08001858 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800185e:	463b      	mov	r3, r7
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <MX_TIM9_Init+0x78>)
 800186c:	4a19      	ldr	r2, [pc, #100]	; (80018d4 <MX_TIM9_Init+0x7c>)
 800186e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1499;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_TIM9_Init+0x78>)
 8001872:	f240 52db 	movw	r2, #1499	; 0x5db
 8001876:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_TIM9_Init+0x78>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 63999;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_TIM9_Init+0x78>)
 8001880:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001884:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_TIM9_Init+0x78>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <MX_TIM9_Init+0x78>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8001892:	480f      	ldr	r0, [pc, #60]	; (80018d0 <MX_TIM9_Init+0x78>)
 8001894:	f003 fcfc 	bl	8005290 <HAL_TIM_IC_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800189e:	f000 f865 	bl	800196c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018a6:	2301      	movs	r3, #1
 80018a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80018b2:	463b      	mov	r3, r7
 80018b4:	2204      	movs	r2, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_TIM9_Init+0x78>)
 80018ba:	f004 f809 	bl	80058d0 <HAL_TIM_IC_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 80018c4:	f000 f852 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200003b8 	.word	0x200003b8
 80018d4:	40014000 	.word	0x40014000

080018d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <MX_GPIO_Init+0x8c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a1b      	ldr	r2, [pc, #108]	; (8001964 <MX_GPIO_Init+0x8c>)
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_GPIO_Init+0x8c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_GPIO_Init+0x8c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a14      	ldr	r2, [pc, #80]	; (8001964 <MX_GPIO_Init+0x8c>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <MX_GPIO_Init+0x8c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_GPIO_Init+0x8c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <MX_GPIO_Init+0x8c>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <MX_GPIO_Init+0x8c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001942:	2304      	movs	r3, #4
 8001944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001946:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800194a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	4619      	mov	r1, r3
 8001956:	4804      	ldr	r0, [pc, #16]	; (8001968 <MX_GPIO_Init+0x90>)
 8001958:	f000 fd86 	bl	8002468 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800195c:	bf00      	nop
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	40020400 	.word	0x40020400

0800196c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001970:	b672      	cpsid	i
}
 8001972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001974:	e7fe      	b.n	8001974 <Error_Handler+0x8>
	...

08001978 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_MspInit+0x4c>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_MspInit+0x4c>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198c:	6453      	str	r3, [r2, #68]	; 0x44
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_MspInit+0x4c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_MspInit+0x4c>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_MspInit+0x4c>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_MspInit+0x4c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08c      	sub	sp, #48	; 0x30
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a42      	ldr	r2, [pc, #264]	; (8001af0 <HAL_I2C_MspInit+0x128>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d13c      	bne.n	8001a64 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	4b41      	ldr	r3, [pc, #260]	; (8001af4 <HAL_I2C_MspInit+0x12c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a40      	ldr	r2, [pc, #256]	; (8001af4 <HAL_I2C_MspInit+0x12c>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b3e      	ldr	r3, [pc, #248]	; (8001af4 <HAL_I2C_MspInit+0x12c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a06:	23c0      	movs	r3, #192	; 0xc0
 8001a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0a:	2312      	movs	r3, #18
 8001a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a16:	2304      	movs	r3, #4
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4835      	ldr	r0, [pc, #212]	; (8001af8 <HAL_I2C_MspInit+0x130>)
 8001a22:	f000 fd21 	bl	8002468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <HAL_I2C_MspInit+0x12c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a31      	ldr	r2, [pc, #196]	; (8001af4 <HAL_I2C_MspInit+0x12c>)
 8001a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_I2C_MspInit+0x12c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	201f      	movs	r0, #31
 8001a48:	f000 fca7 	bl	800239a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a4c:	201f      	movs	r0, #31
 8001a4e:	f000 fcc0 	bl	80023d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2020      	movs	r0, #32
 8001a58:	f000 fc9f 	bl	800239a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a5c:	2020      	movs	r0, #32
 8001a5e:	f000 fcb8 	bl	80023d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a62:	e041      	b.n	8001ae8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a24      	ldr	r2, [pc, #144]	; (8001afc <HAL_I2C_MspInit+0x134>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d13c      	bne.n	8001ae8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_I2C_MspInit+0x12c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a1f      	ldr	r2, [pc, #124]	; (8001af4 <HAL_I2C_MspInit+0x12c>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <HAL_I2C_MspInit+0x12c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a90:	2312      	movs	r3, #18
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4814      	ldr	r0, [pc, #80]	; (8001af8 <HAL_I2C_MspInit+0x130>)
 8001aa8:	f000 fcde 	bl	8002468 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001aac:	2308      	movs	r3, #8
 8001aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab0:	2312      	movs	r3, #18
 8001ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001abc:	2309      	movs	r3, #9
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480c      	ldr	r0, [pc, #48]	; (8001af8 <HAL_I2C_MspInit+0x130>)
 8001ac8:	f000 fcce 	bl	8002468 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_I2C_MspInit+0x12c>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <HAL_I2C_MspInit+0x12c>)
 8001ad6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ada:	6413      	str	r3, [r2, #64]	; 0x40
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_I2C_MspInit+0x12c>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3730      	adds	r7, #48	; 0x30
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40005400 	.word	0x40005400
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40005800 	.word	0x40005800

08001b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <HAL_TIM_Base_MspInit+0x58>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d11d      	bne.n	8001b4e <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_TIM_Base_MspInit+0x5c>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_TIM_Base_MspInit+0x5c>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6453      	str	r3, [r2, #68]	; 0x44
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_TIM_Base_MspInit+0x5c>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	2018      	movs	r0, #24
 8001b34:	f000 fc31 	bl	800239a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b38:	2018      	movs	r0, #24
 8001b3a:	f000 fc4a 	bl	80023d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	201a      	movs	r0, #26
 8001b44:	f000 fc29 	bl	800239a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b48:	201a      	movs	r0, #26
 8001b4a:	f000 fc42 	bl	80023d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	40023800 	.word	0x40023800

08001b60 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b80:	d133      	bne.n	8001bea <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001bba:	2307      	movs	r3, #7
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4808      	ldr	r0, [pc, #32]	; (8001bf8 <HAL_TIMEx_HallSensor_MspInit+0x98>)
 8001bd6:	f000 fc47 	bl	8002468 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	201c      	movs	r0, #28
 8001be0:	f000 fbdb 	bl	800239a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001be4:	201c      	movs	r0, #28
 8001be6:	f000 fbf4 	bl	80023d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bea:	bf00      	nop
 8001bec:	3728      	adds	r7, #40	; 0x28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM9)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <HAL_TIM_IC_MspInit+0x94>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d133      	bne.n	8001c86 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <HAL_TIM_IC_MspInit+0x98>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <HAL_TIM_IC_MspInit+0x98>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <HAL_TIM_IC_MspInit+0x98>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_TIM_IC_MspInit+0x98>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <HAL_TIM_IC_MspInit+0x98>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_TIM_IC_MspInit+0x98>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PA3     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c56:	2308      	movs	r3, #8
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001c66:	2303      	movs	r3, #3
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4809      	ldr	r0, [pc, #36]	; (8001c98 <HAL_TIM_IC_MspInit+0x9c>)
 8001c72:	f000 fbf9 	bl	8002468 <HAL_GPIO_Init>

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2018      	movs	r0, #24
 8001c7c:	f000 fb8d 	bl	800239a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001c80:	2018      	movs	r0, #24
 8001c82:	f000 fba6 	bl	80023d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001c86:	bf00      	nop
 8001c88:	3728      	adds	r7, #40	; 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40014000 	.word	0x40014000
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020000 	.word	0x40020000

08001c9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a22      	ldr	r2, [pc, #136]	; (8001d44 <HAL_TIM_MspPostInit+0xa8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d13d      	bne.n	8001d3a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <HAL_TIM_MspPostInit+0xac>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <HAL_TIM_MspPostInit+0xac>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_TIM_MspPostInit+0xac>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_TIM_MspPostInit+0xac>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_TIM_MspPostInit+0xac>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_TIM_MspPostInit+0xac>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001cf6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	480e      	ldr	r0, [pc, #56]	; (8001d4c <HAL_TIM_MspPostInit+0xb0>)
 8001d14:	f000 fba8 	bl	8002468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d18:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	4806      	ldr	r0, [pc, #24]	; (8001d50 <HAL_TIM_MspPostInit+0xb4>)
 8001d36:	f000 fb97 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40010000 	.word	0x40010000
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020000 	.word	0x40020000

08001d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <NMI_Handler+0x4>

08001d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <HardFault_Handler+0x4>

08001d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <MemManage_Handler+0x4>

08001d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6a:	e7fe      	b.n	8001d6a <BusFault_Handler+0x4>

08001d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <UsageFault_Handler+0x4>

08001d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da0:	f000 fa00 	bl	80021a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	if ( (TIM9->SR & TIM_SR_CC2IF) >= 1) { // If the CC2IF is set it means a input capture has happened
 8001dac:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <TIM1_BRK_TIM9_IRQHandler+0xac>)
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d038      	beq.n	8001e2a <TIM1_BRK_TIM9_IRQHandler+0x82>

		Total -= RPM[i];
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a27      	ldr	r2, [pc, #156]	; (8001e5c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8001dbe:	7812      	ldrb	r2, [r2, #0]
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001dc4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 8001dcc:	6013      	str	r3, [r2, #0]
		RPM[i] = RPMConst / (TIM9->CCR2);
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <TIM1_BRK_TIM9_IRQHandler+0xac>)
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd6:	fbb2 f1f3 	udiv	r1, r2, r3
 8001dda:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	b289      	uxth	r1, r1
 8001de2:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001de4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Total += RPM[i];
 8001de8:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001df0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a16      	ldr	r2, [pc, #88]	; (8001e58 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 8001dfe:	6013      	str	r3, [r2, #0]

		i++;
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8001e0a:	701a      	strb	r2, [r3, #0]

		if ( i > AvgSize ) {
			i = 0;
		}

		Registers[RPMReg] = Total / AvgSize;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001e16:	80da      	strh	r2, [r3, #6]

		//Registers[RPMReg] = RPMConst / (TIM9->CCR2);

		// If maximum RPM is exceeded -> shutdown
		if ( Registers[RPMReg] > MaximumRPM ) {
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001e1a:	88db      	ldrh	r3, [r3, #6]
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d90e      	bls.n	8001e42 <TIM1_BRK_TIM9_IRQHandler+0x9a>
			StopSequence();
 8001e24:	f7ff f94a 	bl	80010bc <StopSequence>
 8001e28:	e00b      	b.n	8001e42 <TIM1_BRK_TIM9_IRQHandler+0x9a>
		}
	} else {
		Registers[RPMReg] = 0; // If the CC2IF was not set it means the timer has overflowed and the motor is thus stationary
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	80da      	strh	r2, [r3, #6]
		Total = 0;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
		memset(RPM, 0, AvgSize * 2);
 8001e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4808      	ldr	r0, [pc, #32]	; (8001e60 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001e3e:	f005 fb1a 	bl	8007476 <memset>
	}


  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e42:	480a      	ldr	r0, [pc, #40]	; (8001e6c <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001e44:	f003 fc3c 	bl	80056c0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <TIM1_BRK_TIM9_IRQHandler+0xc8>)
 8001e4a:	f003 fc39 	bl	80056c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40014000 	.word	0x40014000
 8001e58:	2000042c 	.word	0x2000042c
 8001e5c:	20000630 	.word	0x20000630
 8001e60:	20000430 	.word	0x20000430
 8001e64:	20000428 	.word	0x20000428
 8001e68:	20000400 	.word	0x20000400
 8001e6c:	20000328 	.word	0x20000328
 8001e70:	200003b8 	.word	0x200003b8

08001e74 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	PrepareCommutation (Registers[DirReg]); // Set next Commutation states
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 8001e7a:	885b      	ldrh	r3, [r3, #2]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f818 	bl	8000eb4 <PrepareCommutation>

	TIM1->SR &= ~TIM_SR_COMIF; 				// Reset COMIF in SR register
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001e8a:	f023 0320 	bic.w	r3, r3, #32
 8001e8e:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e90:	4804      	ldr	r0, [pc, #16]	; (8001ea4 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 8001e92:	f003 fc15 	bl	80056c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000400 	.word	0x20000400
 8001ea0:	40010000 	.word	0x40010000
 8001ea4:	20000328 	.word	0x20000328

08001ea8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <TIM2_IRQHandler+0x20>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR
	TIM1->EGR |= TIM_EGR_COMG;
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <TIM2_IRQHandler+0x24>)
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <TIM2_IRQHandler+0x24>)
 8001eb8:	f043 0320 	orr.w	r3, r3, #32
 8001ebc:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ebe:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <TIM2_IRQHandler+0x28>)
 8001ec0:	f003 fbfe 	bl	80056c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	40010000 	.word	0x40010000
 8001ed0:	20000370 	.word	0x20000370

08001ed4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <I2C1_EV_IRQHandler+0x10>)
 8001eda:	f000 fea9 	bl	8002c30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000280 	.word	0x20000280

08001ee8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <I2C1_ER_IRQHandler+0x10>)
 8001eee:	f000 fff2 	bl	8002ed6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000280 	.word	0x20000280

08001efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return 1;
 8001f00:	2301      	movs	r3, #1
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_kill>:

int _kill(int pid, int sig)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f16:	f005 fb01 	bl	800751c <__errno>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2216      	movs	r2, #22
 8001f1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_exit>:

void _exit (int status)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ffe7 	bl	8001f0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f3e:	e7fe      	b.n	8001f3e <_exit+0x12>

08001f40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e00a      	b.n	8001f68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f52:	f3af 8000 	nop.w
 8001f56:	4601      	mov	r1, r0
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	60ba      	str	r2, [r7, #8]
 8001f5e:	b2ca      	uxtb	r2, r1
 8001f60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	dbf0      	blt.n	8001f52 <_read+0x12>
  }

  return len;
 8001f70:	687b      	ldr	r3, [r7, #4]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e009      	b.n	8001fa0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	60ba      	str	r2, [r7, #8]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	dbf1      	blt.n	8001f8c <_write+0x12>
  }
  return len;
 8001fa8:	687b      	ldr	r3, [r7, #4]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_close>:

int _close(int file)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fda:	605a      	str	r2, [r3, #4]
  return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <_isatty>:

int _isatty(int file)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002024:	4a14      	ldr	r2, [pc, #80]	; (8002078 <_sbrk+0x5c>)
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <_sbrk+0x60>)
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <_sbrk+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <_sbrk+0x64>)
 800203a:	4a12      	ldr	r2, [pc, #72]	; (8002084 <_sbrk+0x68>)
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	429a      	cmp	r2, r3
 800204a:	d207      	bcs.n	800205c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800204c:	f005 fa66 	bl	800751c <__errno>
 8002050:	4603      	mov	r3, r0
 8002052:	220c      	movs	r2, #12
 8002054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	e009      	b.n	8002070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <_sbrk+0x64>)
 800206c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20020000 	.word	0x20020000
 800207c:	00000400 	.word	0x00000400
 8002080:	20000634 	.word	0x20000634
 8002084:	20000788 	.word	0x20000788

08002088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <SystemInit+0x20>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <SystemInit+0x20>)
 8002094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <Reset_Handler>:
 80020ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e4 <LoopFillZerobss+0x12>
 80020b0:	480d      	ldr	r0, [pc, #52]	; (80020e8 <LoopFillZerobss+0x16>)
 80020b2:	490e      	ldr	r1, [pc, #56]	; (80020ec <LoopFillZerobss+0x1a>)
 80020b4:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <LoopFillZerobss+0x1e>)
 80020b6:	2300      	movs	r3, #0
 80020b8:	e002      	b.n	80020c0 <LoopCopyDataInit>

080020ba <CopyDataInit>:
 80020ba:	58d4      	ldr	r4, [r2, r3]
 80020bc:	50c4      	str	r4, [r0, r3]
 80020be:	3304      	adds	r3, #4

080020c0 <LoopCopyDataInit>:
 80020c0:	18c4      	adds	r4, r0, r3
 80020c2:	428c      	cmp	r4, r1
 80020c4:	d3f9      	bcc.n	80020ba <CopyDataInit>
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <LoopFillZerobss+0x22>)
 80020c8:	4c0b      	ldr	r4, [pc, #44]	; (80020f8 <LoopFillZerobss+0x26>)
 80020ca:	2300      	movs	r3, #0
 80020cc:	e001      	b.n	80020d2 <LoopFillZerobss>

080020ce <FillZerobss>:
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	3204      	adds	r2, #4

080020d2 <LoopFillZerobss>:
 80020d2:	42a2      	cmp	r2, r4
 80020d4:	d3fb      	bcc.n	80020ce <FillZerobss>
 80020d6:	f7ff ffd7 	bl	8002088 <SystemInit>
 80020da:	f005 fa25 	bl	8007528 <__libc_init_array>
 80020de:	f7ff f9d9 	bl	8001494 <main>
 80020e2:	4770      	bx	lr
 80020e4:	20020000 	.word	0x20020000
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000264 	.word	0x20000264
 80020f0:	080096cc 	.word	0x080096cc
 80020f4:	20000264 	.word	0x20000264
 80020f8:	20000788 	.word	0x20000788

080020fc <ADC_IRQHandler>:
 80020fc:	e7fe      	b.n	80020fc <ADC_IRQHandler>
	...

08002100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <HAL_Init+0x40>)
 800210a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_Init+0x40>)
 8002116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <HAL_Init+0x40>)
 8002122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002128:	2003      	movs	r0, #3
 800212a:	f000 f92b 	bl	8002384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800212e:	200f      	movs	r0, #15
 8002130:	f000 f808 	bl	8002144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002134:	f7ff fc20 	bl	8001978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023c00 	.word	0x40023c00

08002144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_InitTick+0x54>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_InitTick+0x58>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215a:	fbb3 f3f1 	udiv	r3, r3, r1
 800215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f943 	bl	80023ee <HAL_SYSTICK_Config>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e00e      	b.n	8002190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b0f      	cmp	r3, #15
 8002176:	d80a      	bhi.n	800218e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002178:	2200      	movs	r2, #0
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f000 f90b 	bl	800239a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <HAL_InitTick+0x5c>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	e000      	b.n	8002190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000090 	.word	0x20000090
 800219c:	20000098 	.word	0x20000098
 80021a0:	20000094 	.word	0x20000094

080021a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_IncTick+0x20>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_IncTick+0x24>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_IncTick+0x24>)
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000098 	.word	0x20000098
 80021c8:	20000638 	.word	0x20000638

080021cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_GetTick+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000638 	.word	0x20000638

080021e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002200:	4013      	ands	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800220c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002216:	4a04      	ldr	r2, [pc, #16]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60d3      	str	r3, [r2, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <__NVIC_GetPriorityGrouping+0x18>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 0307 	and.w	r3, r3, #7
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	2b00      	cmp	r3, #0
 8002258:	db0b      	blt.n	8002272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	4907      	ldr	r1, [pc, #28]	; (8002280 <__NVIC_EnableIRQ+0x38>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2001      	movs	r0, #1
 800226a:	fa00 f202 	lsl.w	r2, r0, r2
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000e100 	.word	0xe000e100

08002284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	db0a      	blt.n	80022ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	490c      	ldr	r1, [pc, #48]	; (80022d0 <__NVIC_SetPriority+0x4c>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	440b      	add	r3, r1
 80022a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ac:	e00a      	b.n	80022c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4908      	ldr	r1, [pc, #32]	; (80022d4 <__NVIC_SetPriority+0x50>)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	3b04      	subs	r3, #4
 80022bc:	0112      	lsls	r2, r2, #4
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	440b      	add	r3, r1
 80022c2:	761a      	strb	r2, [r3, #24]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f1c3 0307 	rsb	r3, r3, #7
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	bf28      	it	cs
 80022f6:	2304      	movcs	r3, #4
 80022f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d902      	bls.n	8002308 <NVIC_EncodePriority+0x30>
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3b03      	subs	r3, #3
 8002306:	e000      	b.n	800230a <NVIC_EncodePriority+0x32>
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	f04f 32ff 	mov.w	r2, #4294967295
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	401a      	ands	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	43d9      	mvns	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	4313      	orrs	r3, r2
         );
}
 8002332:	4618      	mov	r0, r3
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002350:	d301      	bcc.n	8002356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002352:	2301      	movs	r3, #1
 8002354:	e00f      	b.n	8002376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <SysTick_Config+0x40>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235e:	210f      	movs	r1, #15
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f7ff ff8e 	bl	8002284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <SysTick_Config+0x40>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <SysTick_Config+0x40>)
 8002370:	2207      	movs	r2, #7
 8002372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	e000e010 	.word	0xe000e010

08002384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff29 	bl	80021e4 <__NVIC_SetPriorityGrouping>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ac:	f7ff ff3e 	bl	800222c <__NVIC_GetPriorityGrouping>
 80023b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f7ff ff8e 	bl	80022d8 <NVIC_EncodePriority>
 80023bc:	4602      	mov	r2, r0
 80023be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff5d 	bl	8002284 <__NVIC_SetPriority>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff31 	bl	8002248 <__NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffa2 	bl	8002340 <SysTick_Config>
 80023fc:	4603      	mov	r3, r0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d004      	beq.n	8002424 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2280      	movs	r2, #128	; 0x80
 800241e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e00c      	b.n	800243e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2205      	movs	r2, #5
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0201 	bic.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002458:	b2db      	uxtb	r3, r3
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	e159      	b.n	8002738 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002484:	2201      	movs	r2, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	f040 8148 	bne.w	8002732 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d005      	beq.n	80024ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d130      	bne.n	800251c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f0:	2201      	movs	r2, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 0201 	and.w	r2, r3, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b03      	cmp	r3, #3
 8002526:	d017      	beq.n	8002558 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d123      	bne.n	80025ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	08da      	lsrs	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3208      	adds	r2, #8
 800256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	69b9      	ldr	r1, [r7, #24]
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a2 	beq.w	8002732 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b57      	ldr	r3, [pc, #348]	; (8002750 <HAL_GPIO_Init+0x2e8>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	4a56      	ldr	r2, [pc, #344]	; (8002750 <HAL_GPIO_Init+0x2e8>)
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fc:	6453      	str	r3, [r2, #68]	; 0x44
 80025fe:	4b54      	ldr	r3, [pc, #336]	; (8002750 <HAL_GPIO_Init+0x2e8>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800260a:	4a52      	ldr	r2, [pc, #328]	; (8002754 <HAL_GPIO_Init+0x2ec>)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	3302      	adds	r3, #2
 8002612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	220f      	movs	r2, #15
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a49      	ldr	r2, [pc, #292]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d019      	beq.n	800266a <HAL_GPIO_Init+0x202>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a48      	ldr	r2, [pc, #288]	; (800275c <HAL_GPIO_Init+0x2f4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_GPIO_Init+0x1fe>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a47      	ldr	r2, [pc, #284]	; (8002760 <HAL_GPIO_Init+0x2f8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00d      	beq.n	8002662 <HAL_GPIO_Init+0x1fa>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a46      	ldr	r2, [pc, #280]	; (8002764 <HAL_GPIO_Init+0x2fc>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <HAL_GPIO_Init+0x1f6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a45      	ldr	r2, [pc, #276]	; (8002768 <HAL_GPIO_Init+0x300>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <HAL_GPIO_Init+0x1f2>
 8002656:	2304      	movs	r3, #4
 8002658:	e008      	b.n	800266c <HAL_GPIO_Init+0x204>
 800265a:	2307      	movs	r3, #7
 800265c:	e006      	b.n	800266c <HAL_GPIO_Init+0x204>
 800265e:	2303      	movs	r3, #3
 8002660:	e004      	b.n	800266c <HAL_GPIO_Init+0x204>
 8002662:	2302      	movs	r3, #2
 8002664:	e002      	b.n	800266c <HAL_GPIO_Init+0x204>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_GPIO_Init+0x204>
 800266a:	2300      	movs	r3, #0
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	f002 0203 	and.w	r2, r2, #3
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	4093      	lsls	r3, r2
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800267c:	4935      	ldr	r1, [pc, #212]	; (8002754 <HAL_GPIO_Init+0x2ec>)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <HAL_GPIO_Init+0x304>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ae:	4a2f      	ldr	r2, [pc, #188]	; (800276c <HAL_GPIO_Init+0x304>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b4:	4b2d      	ldr	r3, [pc, #180]	; (800276c <HAL_GPIO_Init+0x304>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d8:	4a24      	ldr	r2, [pc, #144]	; (800276c <HAL_GPIO_Init+0x304>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026de:	4b23      	ldr	r3, [pc, #140]	; (800276c <HAL_GPIO_Init+0x304>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002702:	4a1a      	ldr	r2, [pc, #104]	; (800276c <HAL_GPIO_Init+0x304>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_GPIO_Init+0x304>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800272c:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_GPIO_Init+0x304>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3301      	adds	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	f67f aea2 	bls.w	8002484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	40013800 	.word	0x40013800
 8002758:	40020000 	.word	0x40020000
 800275c:	40020400 	.word	0x40020400
 8002760:	40020800 	.word	0x40020800
 8002764:	40020c00 	.word	0x40020c00
 8002768:	40021000 	.word	0x40021000
 800276c:	40013c00 	.word	0x40013c00

08002770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e12b      	b.n	80029da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff f916 	bl	80019c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	; 0x24
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027d4:	f002 fae6 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 80027d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a81      	ldr	r2, [pc, #516]	; (80029e4 <HAL_I2C_Init+0x274>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d807      	bhi.n	80027f4 <HAL_I2C_Init+0x84>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a80      	ldr	r2, [pc, #512]	; (80029e8 <HAL_I2C_Init+0x278>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	bf94      	ite	ls
 80027ec:	2301      	movls	r3, #1
 80027ee:	2300      	movhi	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e006      	b.n	8002802 <HAL_I2C_Init+0x92>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4a7d      	ldr	r2, [pc, #500]	; (80029ec <HAL_I2C_Init+0x27c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	bf94      	ite	ls
 80027fc:	2301      	movls	r3, #1
 80027fe:	2300      	movhi	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0e7      	b.n	80029da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a78      	ldr	r2, [pc, #480]	; (80029f0 <HAL_I2C_Init+0x280>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0c9b      	lsrs	r3, r3, #18
 8002814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a6a      	ldr	r2, [pc, #424]	; (80029e4 <HAL_I2C_Init+0x274>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d802      	bhi.n	8002844 <HAL_I2C_Init+0xd4>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3301      	adds	r3, #1
 8002842:	e009      	b.n	8002858 <HAL_I2C_Init+0xe8>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	4a69      	ldr	r2, [pc, #420]	; (80029f4 <HAL_I2C_Init+0x284>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	099b      	lsrs	r3, r3, #6
 8002856:	3301      	adds	r3, #1
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800286a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	495c      	ldr	r1, [pc, #368]	; (80029e4 <HAL_I2C_Init+0x274>)
 8002874:	428b      	cmp	r3, r1
 8002876:	d819      	bhi.n	80028ac <HAL_I2C_Init+0x13c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1e59      	subs	r1, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fbb1 f3f3 	udiv	r3, r1, r3
 8002886:	1c59      	adds	r1, r3, #1
 8002888:	f640 73fc 	movw	r3, #4092	; 0xffc
 800288c:	400b      	ands	r3, r1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_I2C_Init+0x138>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e59      	subs	r1, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a6:	e051      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e04f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d111      	bne.n	80028d8 <HAL_I2C_Init+0x168>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	440b      	add	r3, r1
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e012      	b.n	80028fe <HAL_I2C_Init+0x18e>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Init+0x196>
 8002902:	2301      	movs	r3, #1
 8002904:	e022      	b.n	800294c <HAL_I2C_Init+0x1dc>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10e      	bne.n	800292c <HAL_I2C_Init+0x1bc>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1e58      	subs	r0, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	460b      	mov	r3, r1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	440b      	add	r3, r1
 800291c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292a:	e00f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e58      	subs	r0, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	0099      	lsls	r1, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002942:	3301      	adds	r3, #1
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	6809      	ldr	r1, [r1, #0]
 8002950:	4313      	orrs	r3, r2
 8002952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800297a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6911      	ldr	r1, [r2, #16]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68d2      	ldr	r2, [r2, #12]
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	000186a0 	.word	0x000186a0
 80029e8:	001e847f 	.word	0x001e847f
 80029ec:	003d08ff 	.word	0x003d08ff
 80029f0:	431bde83 	.word	0x431bde83
 80029f4:	10624dd3 	.word	0x10624dd3

080029f8 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a14:	2b28      	cmp	r3, #40	; 0x28
 8002a16:	d15b      	bne.n	8002ad0 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e054      	b.n	8002ad2 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e04d      	b.n	8002ad2 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d007      	beq.n	8002a5c <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2229      	movs	r2, #41	; 0x29
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002aca:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e000      	b.n	8002ad2 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002ad0:	2302      	movs	r3, #2
  }
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b087      	sub	sp, #28
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	4613      	mov	r3, r2
 8002aec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002afa:	2b28      	cmp	r3, #40	; 0x28
 8002afc:	d15b      	bne.n	8002bb6 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e054      	b.n	8002bb8 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e04d      	b.n	8002bb8 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d007      	beq.n	8002b42 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b50:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	222a      	movs	r2, #42	; 0x2a
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	88fa      	ldrh	r2, [r7, #6]
 8002b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002bb0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e000      	b.n	8002bb8 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002bb6:	2302      	movs	r3, #2
  }
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d124      	bne.n	8002c22 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2228      	movs	r2, #40	; 0x28
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d007      	beq.n	8002bfe <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c0c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002c1c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e000      	b.n	8002c24 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002c22:	2302      	movs	r3, #2
  }
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b10      	cmp	r3, #16
 8002c5e:	d003      	beq.n	8002c68 <HAL_I2C_EV_IRQHandler+0x38>
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	f040 80b1 	bne.w	8002dca <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10d      	bne.n	8002c9e <HAL_I2C_EV_IRQHandler+0x6e>
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c88:	d003      	beq.n	8002c92 <HAL_I2C_EV_IRQHandler+0x62>
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c90:	d101      	bne.n	8002c96 <HAL_I2C_EV_IRQHandler+0x66>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_I2C_EV_IRQHandler+0x68>
 8002c96:	2300      	movs	r3, #0
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	f000 8114 	beq.w	8002ec6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00b      	beq.n	8002cc0 <HAL_I2C_EV_IRQHandler+0x90>
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d006      	beq.n	8002cc0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f001 fc2a 	bl	800450c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fd34 	bl	8003726 <I2C_Master_SB>
 8002cbe:	e083      	b.n	8002dc8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <HAL_I2C_EV_IRQHandler+0xac>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fdac 	bl	8003832 <I2C_Master_ADD10>
 8002cda:	e075      	b.n	8002dc8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_I2C_EV_IRQHandler+0xc8>
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fdc8 	bl	8003886 <I2C_Master_ADDR>
 8002cf6:	e067      	b.n	8002dc8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d036      	beq.n	8002d70 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d10:	f000 80db 	beq.w	8002eca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00d      	beq.n	8002d3a <HAL_I2C_EV_IRQHandler+0x10a>
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_I2C_EV_IRQHandler+0x10a>
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d103      	bne.n	8002d3a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f9ac 	bl	8003090 <I2C_MasterTransmit_TXE>
 8002d38:	e046      	b.n	8002dc8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80c2 	beq.w	8002eca <HAL_I2C_EV_IRQHandler+0x29a>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80bc 	beq.w	8002eca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d52:	7bbb      	ldrb	r3, [r7, #14]
 8002d54:	2b21      	cmp	r3, #33	; 0x21
 8002d56:	d103      	bne.n	8002d60 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fa35 	bl	80031c8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d5e:	e0b4      	b.n	8002eca <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	f040 80b1 	bne.w	8002eca <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 faa3 	bl	80032b4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d6e:	e0ac      	b.n	8002eca <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7e:	f000 80a4 	beq.w	8002eca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00d      	beq.n	8002da8 <HAL_I2C_EV_IRQHandler+0x178>
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_I2C_EV_IRQHandler+0x178>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d103      	bne.n	8002da8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fb1b 	bl	80033dc <I2C_MasterReceive_RXNE>
 8002da6:	e00f      	b.n	8002dc8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 808b 	beq.w	8002eca <HAL_I2C_EV_IRQHandler+0x29a>
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8085 	beq.w	8002eca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fbc6 	bl	8003552 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dc6:	e080      	b.n	8002eca <HAL_I2C_EV_IRQHandler+0x29a>
 8002dc8:	e07f      	b.n	8002eca <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d004      	beq.n	8002ddc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	e007      	b.n	8002dec <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d011      	beq.n	8002e1a <HAL_I2C_EV_IRQHandler+0x1ea>
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00c      	beq.n	8002e1a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002e10:	69b9      	ldr	r1, [r7, #24]
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 ff86 	bl	8003d24 <I2C_Slave_ADDR>
 8002e18:	e05a      	b.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_I2C_EV_IRQHandler+0x206>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 ffc0 	bl	8003db4 <I2C_Slave_STOPF>
 8002e34:	e04c      	b.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e36:	7bbb      	ldrb	r3, [r7, #14]
 8002e38:	2b21      	cmp	r3, #33	; 0x21
 8002e3a:	d002      	beq.n	8002e42 <HAL_I2C_EV_IRQHandler+0x212>
 8002e3c:	7bbb      	ldrb	r3, [r7, #14]
 8002e3e:	2b29      	cmp	r3, #41	; 0x29
 8002e40:	d120      	bne.n	8002e84 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00d      	beq.n	8002e68 <HAL_I2C_EV_IRQHandler+0x238>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <HAL_I2C_EV_IRQHandler+0x238>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fea1 	bl	8003ba8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e66:	e032      	b.n	8002ece <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d02d      	beq.n	8002ece <HAL_I2C_EV_IRQHandler+0x29e>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d028      	beq.n	8002ece <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fed0 	bl	8003c22 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e82:	e024      	b.n	8002ece <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00d      	beq.n	8002eaa <HAL_I2C_EV_IRQHandler+0x27a>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_I2C_EV_IRQHandler+0x27a>
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fede 	bl	8003c64 <I2C_SlaveReceive_RXNE>
 8002ea8:	e012      	b.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 ff0e 	bl	8003ce0 <I2C_SlaveReceive_BTF>
 8002ec4:	e004      	b.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ece:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b08a      	sub	sp, #40	; 0x28
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00d      	beq.n	8002f20 <HAL_I2C_ER_IRQHandler+0x4a>
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f1e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <HAL_I2C_ER_IRQHandler+0x70>
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	f043 0302 	orr.w	r3, r3, #2
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002f44:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d03e      	beq.n	8002fce <HAL_I2C_ER_IRQHandler+0xf8>
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d039      	beq.n	8002fce <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002f5a:	7efb      	ldrb	r3, [r7, #27]
 8002f5c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002f74:	7ebb      	ldrb	r3, [r7, #26]
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d112      	bne.n	8002fa0 <HAL_I2C_ER_IRQHandler+0xca>
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10f      	bne.n	8002fa0 <HAL_I2C_ER_IRQHandler+0xca>
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	2b21      	cmp	r3, #33	; 0x21
 8002f84:	d008      	beq.n	8002f98 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002f86:	7cfb      	ldrb	r3, [r7, #19]
 8002f88:	2b29      	cmp	r3, #41	; 0x29
 8002f8a:	d005      	beq.n	8002f98 <HAL_I2C_ER_IRQHandler+0xc2>
 8002f8c:	7cfb      	ldrb	r3, [r7, #19]
 8002f8e:	2b28      	cmp	r3, #40	; 0x28
 8002f90:	d106      	bne.n	8002fa0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b21      	cmp	r3, #33	; 0x21
 8002f96:	d103      	bne.n	8002fa0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f001 f83b 	bl	8004014 <I2C_Slave_AF>
 8002f9e:	e016      	b.n	8002fce <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fa8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	f043 0304 	orr.w	r3, r3, #4
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fb2:	7efb      	ldrb	r3, [r7, #27]
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d002      	beq.n	8002fbe <HAL_I2C_ER_IRQHandler+0xe8>
 8002fb8:	7efb      	ldrb	r3, [r7, #27]
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d107      	bne.n	8002fce <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fcc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_I2C_ER_IRQHandler+0x11e>
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	f043 0308 	orr.w	r3, r3, #8
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002ff2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f001 f874 	bl	80040f4 <I2C_ITError>
  }
}
 800300c:	bf00      	nop
 800300e:	3728      	adds	r7, #40	; 0x28
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d150      	bne.n	8003158 <I2C_MasterTransmit_TXE+0xc8>
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b21      	cmp	r3, #33	; 0x21
 80030ba:	d14d      	bne.n	8003158 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d01d      	beq.n	80030fe <I2C_MasterTransmit_TXE+0x6e>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d01a      	beq.n	80030fe <I2C_MasterTransmit_TXE+0x6e>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030ce:	d016      	beq.n	80030fe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030de:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2211      	movs	r2, #17
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ff8c 	bl	8003014 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030fc:	e060      	b.n	80031c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800310c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d107      	bne.n	8003148 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff7b 	bl	800303c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003146:	e03b      	b.n	80031c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff5f 	bl	8003014 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003156:	e033      	b.n	80031c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b21      	cmp	r3, #33	; 0x21
 800315c:	d005      	beq.n	800316a <I2C_MasterTransmit_TXE+0xda>
 800315e:	7bbb      	ldrb	r3, [r7, #14]
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d12d      	bne.n	80031c0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b22      	cmp	r3, #34	; 0x22
 8003168:	d12a      	bne.n	80031c0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d108      	bne.n	8003186 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003182:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003184:	e01c      	b.n	80031c0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d103      	bne.n	800319a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f88e 	bl	80032b4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003198:	e012      	b.n	80031c0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	781a      	ldrb	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031be:	e7ff      	b.n	80031c0 <I2C_MasterTransmit_TXE+0x130>
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b21      	cmp	r3, #33	; 0x21
 80031e0:	d164      	bne.n	80032ac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d012      	beq.n	8003212 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	781a      	ldrb	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003210:	e04c      	b.n	80032ac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d01d      	beq.n	8003254 <I2C_MasterTransmit_BTF+0x8c>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b20      	cmp	r3, #32
 800321c:	d01a      	beq.n	8003254 <I2C_MasterTransmit_BTF+0x8c>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003224:	d016      	beq.n	8003254 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003234:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2211      	movs	r2, #17
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff fee1 	bl	8003014 <HAL_I2C_MasterTxCpltCallback>
}
 8003252:	e02b      	b.n	80032ac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003262:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003272:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b40      	cmp	r3, #64	; 0x40
 800328c:	d107      	bne.n	800329e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff fed0 	bl	800303c <HAL_I2C_MemTxCpltCallback>
}
 800329c:	e006      	b.n	80032ac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff feb4 	bl	8003014 <HAL_I2C_MasterTxCpltCallback>
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d11d      	bne.n	8003308 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d10b      	bne.n	80032ec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e4:	1c9a      	adds	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80032ea:	e073      	b.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	121b      	asrs	r3, r3, #8
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003306:	e065      	b.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330c:	2b01      	cmp	r3, #1
 800330e:	d10b      	bne.n	8003328 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003314:	b2da      	uxtb	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003326:	e055      	b.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332c:	2b02      	cmp	r3, #2
 800332e:	d151      	bne.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b22      	cmp	r3, #34	; 0x22
 8003334:	d10d      	bne.n	8003352 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003344:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003350:	e040      	b.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d015      	beq.n	8003388 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b21      	cmp	r3, #33	; 0x21
 8003360:	d112      	bne.n	8003388 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	781a      	ldrb	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003386:	e025      	b.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d120      	bne.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	2b21      	cmp	r3, #33	; 0x21
 8003396:	d11d      	bne.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033a6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff fe34 	bl	800303c <HAL_I2C_MemTxCpltCallback>
}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b22      	cmp	r3, #34	; 0x22
 80033ee:	f040 80ac 	bne.w	800354a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d921      	bls.n	8003444 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b03      	cmp	r3, #3
 800342e:	f040 808c 	bne.w	800354a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003440:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003442:	e082      	b.n	800354a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	2b02      	cmp	r3, #2
 800344a:	d075      	beq.n	8003538 <I2C_MasterReceive_RXNE+0x15c>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d002      	beq.n	8003458 <I2C_MasterReceive_RXNE+0x7c>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d16f      	bne.n	8003538 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f001 f825 	bl	80044a8 <I2C_WaitOnSTOPRequestThroughIT>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d142      	bne.n	80034ea <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003472:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003482:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d10a      	bne.n	80034d4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff fdbf 	bl	8003050 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034d2:	e03a      	b.n	800354a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2212      	movs	r2, #18
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff fda0 	bl	8003028 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034e8:	e02f      	b.n	800354a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034f8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fd ff89 	bl	8001448 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003536:	e008      	b.n	800354a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003546:	605a      	str	r2, [r3, #4]
}
 8003548:	e7ff      	b.n	800354a <I2C_MasterReceive_RXNE+0x16e>
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b04      	cmp	r3, #4
 8003568:	d11b      	bne.n	80035a2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003578:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80035a0:	e0bd      	b.n	800371e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d129      	bne.n	8003600 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ba:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d00a      	beq.n	80035d8 <I2C_MasterReceive_BTF+0x86>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d007      	beq.n	80035d8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035fe:	e08e      	b.n	800371e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d176      	bne.n	80036f8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d002      	beq.n	8003616 <I2C_MasterReceive_BTF+0xc4>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b10      	cmp	r3, #16
 8003614:	d108      	bne.n	8003628 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	e019      	b.n	800365c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b04      	cmp	r3, #4
 800362c:	d002      	beq.n	8003634 <I2C_MasterReceive_BTF+0xe2>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d108      	bne.n	8003646 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e00a      	b.n	800365c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b10      	cmp	r3, #16
 800364a:	d007      	beq.n	800365c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036b6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d10a      	bne.n	80036e2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff fcb8 	bl	8003050 <HAL_I2C_MemRxCpltCallback>
}
 80036e0:	e01d      	b.n	800371e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2212      	movs	r2, #18
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff fc99 	bl	8003028 <HAL_I2C_MasterRxCpltCallback>
}
 80036f6:	e012      	b.n	800371e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d117      	bne.n	800376a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	b2db      	uxtb	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003752:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003754:	e067      	b.n	8003826 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	b2da      	uxtb	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	611a      	str	r2, [r3, #16]
}
 8003768:	e05d      	b.n	8003826 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003772:	d133      	bne.n	80037dc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b21      	cmp	r3, #33	; 0x21
 800377e:	d109      	bne.n	8003794 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	b2db      	uxtb	r3, r3
 8003786:	461a      	mov	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003790:	611a      	str	r2, [r3, #16]
 8003792:	e008      	b.n	80037a6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d004      	beq.n	80037b8 <I2C_Master_SB+0x92>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d108      	bne.n	80037ca <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d032      	beq.n	8003826 <I2C_Master_SB+0x100>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d02d      	beq.n	8003826 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d8:	605a      	str	r2, [r3, #4]
}
 80037da:	e024      	b.n	8003826 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10e      	bne.n	8003802 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	11db      	asrs	r3, r3, #7
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f003 0306 	and.w	r3, r3, #6
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f063 030f 	orn	r3, r3, #15
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]
}
 8003800:	e011      	b.n	8003826 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003806:	2b01      	cmp	r3, #1
 8003808:	d10d      	bne.n	8003826 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	b29b      	uxth	r3, r3
 8003810:	11db      	asrs	r3, r3, #7
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f003 0306 	and.w	r3, r3, #6
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f063 030e 	orn	r3, r3, #14
 800381e:	b2da      	uxtb	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	611a      	str	r2, [r3, #16]
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	b2da      	uxtb	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384a:	2b00      	cmp	r3, #0
 800384c:	d004      	beq.n	8003858 <I2C_Master_ADD10+0x26>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d108      	bne.n	800386a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00c      	beq.n	800387a <I2C_Master_ADD10+0x48>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003878:	605a      	str	r2, [r3, #4]
  }
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003886:	b480      	push	{r7}
 8003888:	b091      	sub	sp, #68	; 0x44
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003894:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b22      	cmp	r3, #34	; 0x22
 80038ae:	f040 8169 	bne.w	8003b84 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <I2C_Master_ADDR+0x54>
 80038ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038be:	2b40      	cmp	r3, #64	; 0x40
 80038c0:	d10b      	bne.n	80038da <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c2:	2300      	movs	r3, #0
 80038c4:	633b      	str	r3, [r7, #48]	; 0x30
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	633b      	str	r3, [r7, #48]	; 0x30
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	e160      	b.n	8003b9c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d11d      	bne.n	800391e <I2C_Master_ADDR+0x98>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038ea:	d118      	bne.n	800391e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ec:	2300      	movs	r3, #0
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003910:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	651a      	str	r2, [r3, #80]	; 0x50
 800391c:	e13e      	b.n	8003b9c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d113      	bne.n	8003950 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003928:	2300      	movs	r3, #0
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	62bb      	str	r3, [r7, #40]	; 0x28
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e115      	b.n	8003b7c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	f040 808a 	bne.w	8003a70 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003962:	d137      	bne.n	80039d4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003972:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003982:	d113      	bne.n	80039ac <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003992:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003994:	2300      	movs	r3, #0
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	e0e7      	b.n	8003b7c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ac:	2300      	movs	r3, #0
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	623b      	str	r3, [r7, #32]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	623b      	str	r3, [r7, #32]
 80039c0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e0d3      	b.n	8003b7c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d02e      	beq.n	8003a38 <I2C_Master_ADDR+0x1b2>
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d02b      	beq.n	8003a38 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80039e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e2:	2b12      	cmp	r3, #18
 80039e4:	d102      	bne.n	80039ec <I2C_Master_ADDR+0x166>
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d125      	bne.n	8003a38 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d00e      	beq.n	8003a10 <I2C_Master_ADDR+0x18a>
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d00b      	beq.n	8003a10 <I2C_Master_ADDR+0x18a>
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	2b10      	cmp	r3, #16
 80039fc:	d008      	beq.n	8003a10 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	e007      	b.n	8003a20 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a1e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	e0a1      	b.n	8003b7c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a46:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e085      	b.n	8003b7c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d14d      	bne.n	8003b16 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d016      	beq.n	8003aae <I2C_Master_ADDR+0x228>
 8003a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d013      	beq.n	8003aae <I2C_Master_ADDR+0x228>
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	2b10      	cmp	r3, #16
 8003a8a:	d010      	beq.n	8003aae <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	e007      	b.n	8003abe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003abc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003acc:	d117      	bne.n	8003afe <I2C_Master_ADDR+0x278>
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ad4:	d00b      	beq.n	8003aee <I2C_Master_ADDR+0x268>
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d008      	beq.n	8003aee <I2C_Master_ADDR+0x268>
 8003adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d005      	beq.n	8003aee <I2C_Master_ADDR+0x268>
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d002      	beq.n	8003aee <I2C_Master_ADDR+0x268>
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d107      	bne.n	8003afe <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003afc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	e032      	b.n	8003b7c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b24:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b34:	d117      	bne.n	8003b66 <I2C_Master_ADDR+0x2e0>
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b3c:	d00b      	beq.n	8003b56 <I2C_Master_ADDR+0x2d0>
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d008      	beq.n	8003b56 <I2C_Master_ADDR+0x2d0>
 8003b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d005      	beq.n	8003b56 <I2C_Master_ADDR+0x2d0>
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d002      	beq.n	8003b56 <I2C_Master_ADDR+0x2d0>
 8003b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d107      	bne.n	8003b66 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b64:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003b82:	e00b      	b.n	8003b9c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
}
 8003b9a:	e7ff      	b.n	8003b9c <I2C_Master_ADDR+0x316>
 8003b9c:	bf00      	nop
 8003b9e:	3744      	adds	r7, #68	; 0x44
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d02b      	beq.n	8003c1a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	781a      	ldrb	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d114      	bne.n	8003c1a <I2C_SlaveTransmit_TXE+0x72>
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	2b29      	cmp	r3, #41	; 0x29
 8003bf4:	d111      	bne.n	8003c1a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c04:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2221      	movs	r2, #33	; 0x21
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2228      	movs	r2, #40	; 0x28
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7fd fbab 	bl	8001370 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d011      	beq.n	8003c58 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	781a      	ldrb	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d02c      	beq.n	8003cd8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d114      	bne.n	8003cd8 <I2C_SlaveReceive_RXNE+0x74>
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb2:	d111      	bne.n	8003cd8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2222      	movs	r2, #34	; 0x22
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2228      	movs	r2, #40	; 0x28
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fd fb82 	bl	80013dc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d012      	beq.n	8003d18 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d3e:	2b28      	cmp	r3, #40	; 0x28
 8003d40:	d125      	bne.n	8003d8e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d50:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	81bb      	strh	r3, [r7, #12]
 8003d70:	e002      	b.n	8003d78 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d80:	89ba      	ldrh	r2, [r7, #12]
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd faa2 	bl	80012d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d8c:	e00e      	b.n	8003dac <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dd2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e00:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e10:	d172      	bne.n	8003ef8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	2b22      	cmp	r3, #34	; 0x22
 8003e16:	d002      	beq.n	8003e1e <I2C_Slave_STOPF+0x6a>
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e1c:	d135      	bne.n	8003e8a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f043 0204 	orr.w	r2, r3, #4
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe faf7 	bl	800244a <HAL_DMA_GetState>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d049      	beq.n	8003ef6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	4a69      	ldr	r2, [pc, #420]	; (800400c <I2C_Slave_STOPF+0x258>)
 8003e68:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe fac9 	bl	8002406 <HAL_DMA_Abort_IT>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d03d      	beq.n	8003ef6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e84:	4610      	mov	r0, r2
 8003e86:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e88:	e035      	b.n	8003ef6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f043 0204 	orr.w	r2, r3, #4
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ebc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe fac1 	bl	800244a <HAL_DMA_GetState>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d014      	beq.n	8003ef8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed2:	4a4e      	ldr	r2, [pc, #312]	; (800400c <I2C_Slave_STOPF+0x258>)
 8003ed4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fa93 	bl	8002406 <HAL_DMA_Abort_IT>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d008      	beq.n	8003ef8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4798      	blx	r3
 8003ef4:	e000      	b.n	8003ef8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ef6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d03e      	beq.n	8003f80 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d112      	bne.n	8003f36 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b40      	cmp	r3, #64	; 0x40
 8003f42:	d112      	bne.n	8003f6a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	f043 0204 	orr.w	r2, r3, #4
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f8b3 	bl	80040f4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f8e:	e039      	b.n	8004004 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b2a      	cmp	r3, #42	; 0x2a
 8003f94:	d109      	bne.n	8003faa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2228      	movs	r2, #40	; 0x28
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fd fa19 	bl	80013dc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b28      	cmp	r3, #40	; 0x28
 8003fb4:	d111      	bne.n	8003fda <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a15      	ldr	r2, [pc, #84]	; (8004010 <I2C_Slave_STOPF+0x25c>)
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fd f970 	bl	80012b8 <HAL_I2C_ListenCpltCallback>
}
 8003fd8:	e014      	b.n	8004004 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	2b22      	cmp	r3, #34	; 0x22
 8003fe0:	d002      	beq.n	8003fe8 <I2C_Slave_STOPF+0x234>
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	2b22      	cmp	r3, #34	; 0x22
 8003fe6:	d10d      	bne.n	8004004 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd f9ec 	bl	80013dc <HAL_I2C_SlaveRxCpltCallback>
}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	08004359 	.word	0x08004359
 8004010:	ffff0000 	.word	0xffff0000

08004014 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004022:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d002      	beq.n	8004036 <I2C_Slave_AF+0x22>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b20      	cmp	r3, #32
 8004034:	d129      	bne.n	800408a <I2C_Slave_AF+0x76>
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	2b28      	cmp	r3, #40	; 0x28
 800403a:	d126      	bne.n	800408a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a2c      	ldr	r2, [pc, #176]	; (80040f0 <I2C_Slave_AF+0xdc>)
 8004040:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004050:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800405a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fd f918 	bl	80012b8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004088:	e02e      	b.n	80040e8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	2b21      	cmp	r3, #33	; 0x21
 800408e:	d126      	bne.n	80040de <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a17      	ldr	r2, [pc, #92]	; (80040f0 <I2C_Slave_AF+0xdc>)
 8004094:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2221      	movs	r2, #33	; 0x21
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040ba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040c4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fd f94a 	bl	8001370 <HAL_I2C_SlaveTxCpltCallback>
}
 80040dc:	e004      	b.n	80040e8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040e6:	615a      	str	r2, [r3, #20]
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	ffff0000 	.word	0xffff0000

080040f4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004102:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800410a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800410c:	7bbb      	ldrb	r3, [r7, #14]
 800410e:	2b10      	cmp	r3, #16
 8004110:	d002      	beq.n	8004118 <I2C_ITError+0x24>
 8004112:	7bbb      	ldrb	r3, [r7, #14]
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	d10a      	bne.n	800412e <I2C_ITError+0x3a>
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	2b22      	cmp	r3, #34	; 0x22
 800411c:	d107      	bne.n	800412e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800412c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004134:	2b28      	cmp	r3, #40	; 0x28
 8004136:	d107      	bne.n	8004148 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2228      	movs	r2, #40	; 0x28
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004146:	e015      	b.n	8004174 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004156:	d00a      	beq.n	800416e <I2C_ITError+0x7a>
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b60      	cmp	r3, #96	; 0x60
 800415c:	d007      	beq.n	800416e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800417e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004182:	d162      	bne.n	800424a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004192:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d020      	beq.n	80041e4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a6:	4a6a      	ldr	r2, [pc, #424]	; (8004350 <I2C_ITError+0x25c>)
 80041a8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fe f929 	bl	8002406 <HAL_DMA_Abort_IT>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8089 	beq.w	80042ce <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041de:	4610      	mov	r0, r2
 80041e0:	4798      	blx	r3
 80041e2:	e074      	b.n	80042ce <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	4a59      	ldr	r2, [pc, #356]	; (8004350 <I2C_ITError+0x25c>)
 80041ea:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fe f908 	bl	8002406 <HAL_DMA_Abort_IT>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d068      	beq.n	80042ce <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004206:	2b40      	cmp	r3, #64	; 0x40
 8004208:	d10b      	bne.n	8004222 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004244:	4610      	mov	r0, r2
 8004246:	4798      	blx	r3
 8004248:	e041      	b.n	80042ce <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b60      	cmp	r3, #96	; 0x60
 8004254:	d125      	bne.n	80042a2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426e:	2b40      	cmp	r3, #64	; 0x40
 8004270:	d10b      	bne.n	800428a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fe fee2 	bl	8003064 <HAL_I2C_AbortCpltCallback>
 80042a0:	e015      	b.n	80042ce <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ac:	2b40      	cmp	r3, #64	; 0x40
 80042ae:	d10b      	bne.n	80042c8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7fd f8bd 	bl	8001448 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10e      	bne.n	80042fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d104      	bne.n	80042fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d007      	beq.n	800430c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800430a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004312:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b04      	cmp	r3, #4
 800431e:	d113      	bne.n	8004348 <I2C_ITError+0x254>
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	2b28      	cmp	r3, #40	; 0x28
 8004324:	d110      	bne.n	8004348 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a0a      	ldr	r2, [pc, #40]	; (8004354 <I2C_ITError+0x260>)
 800432a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fc ffb8 	bl	80012b8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	08004359 	.word	0x08004359
 8004354:	ffff0000 	.word	0xffff0000

08004358 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004370:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004372:	4b4b      	ldr	r3, [pc, #300]	; (80044a0 <I2C_DMAAbort+0x148>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	08db      	lsrs	r3, r3, #3
 8004378:	4a4a      	ldr	r2, [pc, #296]	; (80044a4 <I2C_DMAAbort+0x14c>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	0a1a      	lsrs	r2, r3, #8
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	00da      	lsls	r2, r3, #3
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f043 0220 	orr.w	r2, r3, #32
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800439e:	e00a      	b.n	80043b6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b4:	d0ea      	beq.n	800438c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c2:	2200      	movs	r2, #0
 80043c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	2200      	movs	r2, #0
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2200      	movs	r2, #0
 80043ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	2200      	movs	r2, #0
 80043fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	2200      	movs	r2, #0
 800440a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0201 	bic.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b60      	cmp	r3, #96	; 0x60
 8004426:	d10e      	bne.n	8004446 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2200      	movs	r2, #0
 800443c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800443e:	6978      	ldr	r0, [r7, #20]
 8004440:	f7fe fe10 	bl	8003064 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004444:	e027      	b.n	8004496 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800444c:	2b28      	cmp	r3, #40	; 0x28
 800444e:	d117      	bne.n	8004480 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800446e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2200      	movs	r2, #0
 8004474:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2228      	movs	r2, #40	; 0x28
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800447e:	e007      	b.n	8004490 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004490:	6978      	ldr	r0, [r7, #20]
 8004492:	f7fc ffd9 	bl	8001448 <HAL_I2C_ErrorCallback>
}
 8004496:	bf00      	nop
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000090 	.word	0x20000090
 80044a4:	14f8b589 	.word	0x14f8b589

080044a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80044b4:	4b13      	ldr	r3, [pc, #76]	; (8004504 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	08db      	lsrs	r3, r3, #3
 80044ba:	4a13      	ldr	r2, [pc, #76]	; (8004508 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80044bc:	fba2 2303 	umull	r2, r3, r2, r3
 80044c0:	0a1a      	lsrs	r2, r3, #8
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d107      	bne.n	80044e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f043 0220 	orr.w	r2, r3, #32
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e008      	b.n	80044f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f4:	d0e9      	beq.n	80044ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	20000090 	.word	0x20000090
 8004508:	14f8b589 	.word	0x14f8b589

0800450c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800451c:	d103      	bne.n	8004526 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004524:	e007      	b.n	8004536 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800452e:	d102      	bne.n	8004536 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2208      	movs	r2, #8
 8004534:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
	...

08004544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e267      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d075      	beq.n	800464e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004562:	4b88      	ldr	r3, [pc, #544]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b04      	cmp	r3, #4
 800456c:	d00c      	beq.n	8004588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800456e:	4b85      	ldr	r3, [pc, #532]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004576:	2b08      	cmp	r3, #8
 8004578:	d112      	bne.n	80045a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457a:	4b82      	ldr	r3, [pc, #520]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004586:	d10b      	bne.n	80045a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004588:	4b7e      	ldr	r3, [pc, #504]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d05b      	beq.n	800464c <HAL_RCC_OscConfig+0x108>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d157      	bne.n	800464c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e242      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a8:	d106      	bne.n	80045b8 <HAL_RCC_OscConfig+0x74>
 80045aa:	4b76      	ldr	r3, [pc, #472]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a75      	ldr	r2, [pc, #468]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	e01d      	b.n	80045f4 <HAL_RCC_OscConfig+0xb0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c0:	d10c      	bne.n	80045dc <HAL_RCC_OscConfig+0x98>
 80045c2:	4b70      	ldr	r3, [pc, #448]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a6f      	ldr	r2, [pc, #444]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	4b6d      	ldr	r3, [pc, #436]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a6c      	ldr	r2, [pc, #432]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e00b      	b.n	80045f4 <HAL_RCC_OscConfig+0xb0>
 80045dc:	4b69      	ldr	r3, [pc, #420]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a68      	ldr	r2, [pc, #416]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	4b66      	ldr	r3, [pc, #408]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a65      	ldr	r2, [pc, #404]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d013      	beq.n	8004624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7fd fde6 	bl	80021cc <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004604:	f7fd fde2 	bl	80021cc <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b64      	cmp	r3, #100	; 0x64
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e207      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	4b5b      	ldr	r3, [pc, #364]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0xc0>
 8004622:	e014      	b.n	800464e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fd fdd2 	bl	80021cc <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800462c:	f7fd fdce 	bl	80021cc <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b64      	cmp	r3, #100	; 0x64
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e1f3      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463e:	4b51      	ldr	r3, [pc, #324]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0xe8>
 800464a:	e000      	b.n	800464e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800464c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d063      	beq.n	8004722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800465a:	4b4a      	ldr	r3, [pc, #296]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004666:	4b47      	ldr	r3, [pc, #284]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800466e:	2b08      	cmp	r3, #8
 8004670:	d11c      	bne.n	80046ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004672:	4b44      	ldr	r3, [pc, #272]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d116      	bne.n	80046ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467e:	4b41      	ldr	r3, [pc, #260]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_RCC_OscConfig+0x152>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d001      	beq.n	8004696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e1c7      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004696:	4b3b      	ldr	r3, [pc, #236]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4937      	ldr	r1, [pc, #220]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046aa:	e03a      	b.n	8004722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d020      	beq.n	80046f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b4:	4b34      	ldr	r3, [pc, #208]	; (8004788 <HAL_RCC_OscConfig+0x244>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7fd fd87 	bl	80021cc <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c2:	f7fd fd83 	bl	80021cc <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e1a8      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e0:	4b28      	ldr	r3, [pc, #160]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	4925      	ldr	r1, [pc, #148]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	600b      	str	r3, [r1, #0]
 80046f4:	e015      	b.n	8004722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f6:	4b24      	ldr	r3, [pc, #144]	; (8004788 <HAL_RCC_OscConfig+0x244>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fd fd66 	bl	80021cc <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004704:	f7fd fd62 	bl	80021cc <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e187      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004716:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d036      	beq.n	800479c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d016      	beq.n	8004764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004736:	4b15      	ldr	r3, [pc, #84]	; (800478c <HAL_RCC_OscConfig+0x248>)
 8004738:	2201      	movs	r2, #1
 800473a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fd fd46 	bl	80021cc <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004744:	f7fd fd42 	bl	80021cc <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e167      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HAL_RCC_OscConfig+0x240>)
 8004758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x200>
 8004762:	e01b      	b.n	800479c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004764:	4b09      	ldr	r3, [pc, #36]	; (800478c <HAL_RCC_OscConfig+0x248>)
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476a:	f7fd fd2f 	bl	80021cc <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004770:	e00e      	b.n	8004790 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004772:	f7fd fd2b 	bl	80021cc <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d907      	bls.n	8004790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e150      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
 8004784:	40023800 	.word	0x40023800
 8004788:	42470000 	.word	0x42470000
 800478c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004790:	4b88      	ldr	r3, [pc, #544]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ea      	bne.n	8004772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8097 	beq.w	80048d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ae:	4b81      	ldr	r3, [pc, #516]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	4b7d      	ldr	r3, [pc, #500]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	4a7c      	ldr	r2, [pc, #496]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ca:	4b7a      	ldr	r3, [pc, #488]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d6:	2301      	movs	r3, #1
 80047d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047da:	4b77      	ldr	r3, [pc, #476]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d118      	bne.n	8004818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047e6:	4b74      	ldr	r3, [pc, #464]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a73      	ldr	r2, [pc, #460]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f2:	f7fd fceb 	bl	80021cc <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fa:	f7fd fce7 	bl	80021cc <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e10c      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	4b6a      	ldr	r3, [pc, #424]	; (80049b8 <HAL_RCC_OscConfig+0x474>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d106      	bne.n	800482e <HAL_RCC_OscConfig+0x2ea>
 8004820:	4b64      	ldr	r3, [pc, #400]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	4a63      	ldr	r2, [pc, #396]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	; 0x70
 800482c:	e01c      	b.n	8004868 <HAL_RCC_OscConfig+0x324>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b05      	cmp	r3, #5
 8004834:	d10c      	bne.n	8004850 <HAL_RCC_OscConfig+0x30c>
 8004836:	4b5f      	ldr	r3, [pc, #380]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	4a5e      	ldr	r2, [pc, #376]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800483c:	f043 0304 	orr.w	r3, r3, #4
 8004840:	6713      	str	r3, [r2, #112]	; 0x70
 8004842:	4b5c      	ldr	r3, [pc, #368]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	4a5b      	ldr	r2, [pc, #364]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	6713      	str	r3, [r2, #112]	; 0x70
 800484e:	e00b      	b.n	8004868 <HAL_RCC_OscConfig+0x324>
 8004850:	4b58      	ldr	r3, [pc, #352]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	4a57      	ldr	r2, [pc, #348]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004856:	f023 0301 	bic.w	r3, r3, #1
 800485a:	6713      	str	r3, [r2, #112]	; 0x70
 800485c:	4b55      	ldr	r3, [pc, #340]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	4a54      	ldr	r2, [pc, #336]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004862:	f023 0304 	bic.w	r3, r3, #4
 8004866:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d015      	beq.n	800489c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7fd fcac 	bl	80021cc <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004876:	e00a      	b.n	800488e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004878:	f7fd fca8 	bl	80021cc <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	; 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0cb      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488e:	4b49      	ldr	r3, [pc, #292]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ee      	beq.n	8004878 <HAL_RCC_OscConfig+0x334>
 800489a:	e014      	b.n	80048c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800489c:	f7fd fc96 	bl	80021cc <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a4:	f7fd fc92 	bl	80021cc <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e0b5      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ba:	4b3e      	ldr	r3, [pc, #248]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1ee      	bne.n	80048a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d105      	bne.n	80048d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048cc:	4b39      	ldr	r3, [pc, #228]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	4a38      	ldr	r2, [pc, #224]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80a1 	beq.w	8004a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048e2:	4b34      	ldr	r3, [pc, #208]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d05c      	beq.n	80049a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d141      	bne.n	800497a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b31      	ldr	r3, [pc, #196]	; (80049bc <HAL_RCC_OscConfig+0x478>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fd fc66 	bl	80021cc <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004904:	f7fd fc62 	bl	80021cc <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e087      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	019b      	lsls	r3, r3, #6
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	3b01      	subs	r3, #1
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	061b      	lsls	r3, r3, #24
 8004946:	491b      	ldr	r1, [pc, #108]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004948:	4313      	orrs	r3, r2
 800494a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800494c:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <HAL_RCC_OscConfig+0x478>)
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004952:	f7fd fc3b 	bl	80021cc <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800495a:	f7fd fc37 	bl	80021cc <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e05c      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496c:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x416>
 8004978:	e054      	b.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497a:	4b10      	ldr	r3, [pc, #64]	; (80049bc <HAL_RCC_OscConfig+0x478>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fd fc24 	bl	80021cc <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004988:	f7fd fc20 	bl	80021cc <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e045      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_RCC_OscConfig+0x470>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x444>
 80049a6:	e03d      	b.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e038      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
 80049b4:	40023800 	.word	0x40023800
 80049b8:	40007000 	.word	0x40007000
 80049bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049c0:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <HAL_RCC_OscConfig+0x4ec>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d028      	beq.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d121      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d11a      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d111      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800

08004a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0cc      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a48:	4b68      	ldr	r3, [pc, #416]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d90c      	bls.n	8004a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b65      	ldr	r3, [pc, #404]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5e:	4b63      	ldr	r3, [pc, #396]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0b8      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d020      	beq.n	8004abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a88:	4b59      	ldr	r3, [pc, #356]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4a58      	ldr	r2, [pc, #352]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa0:	4b53      	ldr	r3, [pc, #332]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4a52      	ldr	r2, [pc, #328]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aac:	4b50      	ldr	r3, [pc, #320]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	494d      	ldr	r1, [pc, #308]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d044      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	4b47      	ldr	r3, [pc, #284]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d119      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e07f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d003      	beq.n	8004af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af2:	4b3f      	ldr	r3, [pc, #252]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e06f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b02:	4b3b      	ldr	r3, [pc, #236]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e067      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b12:	4b37      	ldr	r3, [pc, #220]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f023 0203 	bic.w	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4934      	ldr	r1, [pc, #208]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b24:	f7fd fb52 	bl	80021cc <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2c:	f7fd fb4e 	bl	80021cc <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e04f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b42:	4b2b      	ldr	r3, [pc, #172]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 020c 	and.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d1eb      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b54:	4b25      	ldr	r3, [pc, #148]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d20c      	bcs.n	8004b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b62:	4b22      	ldr	r3, [pc, #136]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b20      	ldr	r3, [pc, #128]	; (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e032      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b88:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4916      	ldr	r1, [pc, #88]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	490e      	ldr	r1, [pc, #56]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bba:	f000 f821 	bl	8004c00 <HAL_RCC_GetSysClockFreq>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	490a      	ldr	r1, [pc, #40]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004bcc:	5ccb      	ldrb	r3, [r1, r3]
 8004bce:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd2:	4a09      	ldr	r2, [pc, #36]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bd6:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCC_ClockConfig+0x1c8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fd fab2 	bl	8002144 <HAL_InitTick>

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40023c00 	.word	0x40023c00
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	08009330 	.word	0x08009330
 8004bf8:	20000090 	.word	0x20000090
 8004bfc:	20000094 	.word	0x20000094

08004c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c04:	b090      	sub	sp, #64	; 0x40
 8004c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c10:	2300      	movs	r3, #0
 8004c12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c18:	4b59      	ldr	r3, [pc, #356]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d00d      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x40>
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	f200 80a1 	bhi.w	8004d6c <HAL_RCC_GetSysClockFreq+0x16c>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x34>
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c32:	e09b      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c34:	4b53      	ldr	r3, [pc, #332]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004c38:	e09b      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c3a:	4b53      	ldr	r3, [pc, #332]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c3e:	e098      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c40:	4b4f      	ldr	r3, [pc, #316]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c4a:	4b4d      	ldr	r3, [pc, #308]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d028      	beq.n	8004ca8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c56:	4b4a      	ldr	r3, [pc, #296]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	099b      	lsrs	r3, r3, #6
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	623b      	str	r3, [r7, #32]
 8004c60:	627a      	str	r2, [r7, #36]	; 0x24
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4b47      	ldr	r3, [pc, #284]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c6c:	fb03 f201 	mul.w	r2, r3, r1
 8004c70:	2300      	movs	r3, #0
 8004c72:	fb00 f303 	mul.w	r3, r0, r3
 8004c76:	4413      	add	r3, r2
 8004c78:	4a43      	ldr	r2, [pc, #268]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c7a:	fba0 1202 	umull	r1, r2, r0, r2
 8004c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c80:	460a      	mov	r2, r1
 8004c82:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c86:	4413      	add	r3, r2
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	61bb      	str	r3, [r7, #24]
 8004c90:	61fa      	str	r2, [r7, #28]
 8004c92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c9a:	f7fb ff8d 	bl	8000bb8 <__aeabi_uldivmod>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca6:	e053      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca8:	4b35      	ldr	r3, [pc, #212]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	099b      	lsrs	r3, r3, #6
 8004cae:	2200      	movs	r2, #0
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	617a      	str	r2, [r7, #20]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cba:	f04f 0b00 	mov.w	fp, #0
 8004cbe:	4652      	mov	r2, sl
 8004cc0:	465b      	mov	r3, fp
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	0159      	lsls	r1, r3, #5
 8004ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd0:	0150      	lsls	r0, r2, #5
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	ebb2 080a 	subs.w	r8, r2, sl
 8004cda:	eb63 090b 	sbc.w	r9, r3, fp
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cf2:	ebb2 0408 	subs.w	r4, r2, r8
 8004cf6:	eb63 0509 	sbc.w	r5, r3, r9
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	00eb      	lsls	r3, r5, #3
 8004d04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d08:	00e2      	lsls	r2, r4, #3
 8004d0a:	4614      	mov	r4, r2
 8004d0c:	461d      	mov	r5, r3
 8004d0e:	eb14 030a 	adds.w	r3, r4, sl
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	eb45 030b 	adc.w	r3, r5, fp
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d26:	4629      	mov	r1, r5
 8004d28:	028b      	lsls	r3, r1, #10
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d30:	4621      	mov	r1, r4
 8004d32:	028a      	lsls	r2, r1, #10
 8004d34:	4610      	mov	r0, r2
 8004d36:	4619      	mov	r1, r3
 8004d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	60fa      	str	r2, [r7, #12]
 8004d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d44:	f7fb ff38 	bl	8000bb8 <__aeabi_uldivmod>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	0c1b      	lsrs	r3, r3, #16
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d6a:	e002      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3740      	adds	r7, #64	; 0x40
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800
 8004d84:	00f42400 	.word	0x00f42400
 8004d88:	017d7840 	.word	0x017d7840

08004d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d90:	4b03      	ldr	r3, [pc, #12]	; (8004da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d92:	681b      	ldr	r3, [r3, #0]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000090 	.word	0x20000090

08004da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004da8:	f7ff fff0 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	0a9b      	lsrs	r3, r3, #10
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	4903      	ldr	r1, [pc, #12]	; (8004dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dba:	5ccb      	ldrb	r3, [r1, r3]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	08009340 	.word	0x08009340

08004dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dd0:	f7ff ffdc 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	0b5b      	lsrs	r3, r3, #13
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4903      	ldr	r1, [pc, #12]	; (8004df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de2:	5ccb      	ldrb	r3, [r1, r3]
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40023800 	.word	0x40023800
 8004df0:	08009340 	.word	0x08009340

08004df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e041      	b.n	8004e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fc fe70 	bl	8001b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f000 ff1e 	bl	8005c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d001      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e044      	b.n	8004f36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1e      	ldr	r2, [pc, #120]	; (8004f44 <HAL_TIM_Base_Start_IT+0xb0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d018      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0x6c>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed6:	d013      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0x6c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a1a      	ldr	r2, [pc, #104]	; (8004f48 <HAL_TIM_Base_Start_IT+0xb4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00e      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0x6c>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a19      	ldr	r2, [pc, #100]	; (8004f4c <HAL_TIM_Base_Start_IT+0xb8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d009      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0x6c>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a17      	ldr	r2, [pc, #92]	; (8004f50 <HAL_TIM_Base_Start_IT+0xbc>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0x6c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a16      	ldr	r2, [pc, #88]	; (8004f54 <HAL_TIM_Base_Start_IT+0xc0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d111      	bne.n	8004f24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b06      	cmp	r3, #6
 8004f10:	d010      	beq.n	8004f34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0201 	orr.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f22:	e007      	b.n	8004f34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40010000 	.word	0x40010000
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40000800 	.word	0x40000800
 8004f50:	40000c00 	.word	0x40000c00
 8004f54:	40014000 	.word	0x40014000

08004f58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0201 	bic.w	r2, r2, #1
 8004f6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6a1a      	ldr	r2, [r3, #32]
 8004f76:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10f      	bne.n	8004fa0 <HAL_TIM_Base_Stop_IT+0x48>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6a1a      	ldr	r2, [r3, #32]
 8004f86:	f240 4344 	movw	r3, #1092	; 0x444
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d107      	bne.n	8004fa0 <HAL_TIM_Base_Stop_IT+0x48>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0201 	bic.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e041      	b.n	800504c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f839 	bl	8005054 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	f000 fe3d 	bl	8005c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d109      	bne.n	800508c <HAL_TIM_PWM_Start+0x24>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b01      	cmp	r3, #1
 8005082:	bf14      	ite	ne
 8005084:	2301      	movne	r3, #1
 8005086:	2300      	moveq	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	e022      	b.n	80050d2 <HAL_TIM_PWM_Start+0x6a>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b04      	cmp	r3, #4
 8005090:	d109      	bne.n	80050a6 <HAL_TIM_PWM_Start+0x3e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	bf14      	ite	ne
 800509e:	2301      	movne	r3, #1
 80050a0:	2300      	moveq	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	e015      	b.n	80050d2 <HAL_TIM_PWM_Start+0x6a>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d109      	bne.n	80050c0 <HAL_TIM_PWM_Start+0x58>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	bf14      	ite	ne
 80050b8:	2301      	movne	r3, #1
 80050ba:	2300      	moveq	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e008      	b.n	80050d2 <HAL_TIM_PWM_Start+0x6a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e068      	b.n	80051ac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <HAL_TIM_PWM_Start+0x82>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e8:	e013      	b.n	8005112 <HAL_TIM_PWM_Start+0xaa>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_PWM_Start+0x92>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f8:	e00b      	b.n	8005112 <HAL_TIM_PWM_Start+0xaa>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d104      	bne.n	800510a <HAL_TIM_PWM_Start+0xa2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005108:	e003      	b.n	8005112 <HAL_TIM_PWM_Start+0xaa>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2201      	movs	r2, #1
 8005118:	6839      	ldr	r1, [r7, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f001 f9e5 	bl	80064ea <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a23      	ldr	r2, [pc, #140]	; (80051b4 <HAL_TIM_PWM_Start+0x14c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d107      	bne.n	800513a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005138:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <HAL_TIM_PWM_Start+0x14c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d018      	beq.n	8005176 <HAL_TIM_PWM_Start+0x10e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514c:	d013      	beq.n	8005176 <HAL_TIM_PWM_Start+0x10e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a19      	ldr	r2, [pc, #100]	; (80051b8 <HAL_TIM_PWM_Start+0x150>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00e      	beq.n	8005176 <HAL_TIM_PWM_Start+0x10e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a17      	ldr	r2, [pc, #92]	; (80051bc <HAL_TIM_PWM_Start+0x154>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d009      	beq.n	8005176 <HAL_TIM_PWM_Start+0x10e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <HAL_TIM_PWM_Start+0x158>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <HAL_TIM_PWM_Start+0x10e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a14      	ldr	r2, [pc, #80]	; (80051c4 <HAL_TIM_PWM_Start+0x15c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d111      	bne.n	800519a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b06      	cmp	r3, #6
 8005186:	d010      	beq.n	80051aa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	e007      	b.n	80051aa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40010000 	.word	0x40010000
 80051b8:	40000400 	.word	0x40000400
 80051bc:	40000800 	.word	0x40000800
 80051c0:	40000c00 	.word	0x40000c00
 80051c4:	40014000 	.word	0x40014000

080051c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2200      	movs	r2, #0
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f001 f985 	bl	80064ea <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a29      	ldr	r2, [pc, #164]	; (800528c <HAL_TIM_PWM_Stop+0xc4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d117      	bne.n	800521a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6a1a      	ldr	r2, [r3, #32]
 80051f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10f      	bne.n	800521a <HAL_TIM_PWM_Stop+0x52>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6a1a      	ldr	r2, [r3, #32]
 8005200:	f240 4344 	movw	r3, #1092	; 0x444
 8005204:	4013      	ands	r3, r2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d107      	bne.n	800521a <HAL_TIM_PWM_Stop+0x52>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005218:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	f241 1311 	movw	r3, #4369	; 0x1111
 8005224:	4013      	ands	r3, r2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10f      	bne.n	800524a <HAL_TIM_PWM_Stop+0x82>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6a1a      	ldr	r2, [r3, #32]
 8005230:	f240 4344 	movw	r3, #1092	; 0x444
 8005234:	4013      	ands	r3, r2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d107      	bne.n	800524a <HAL_TIM_PWM_Stop+0x82>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0201 	bic.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <HAL_TIM_PWM_Stop+0x92>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005258:	e013      	b.n	8005282 <HAL_TIM_PWM_Stop+0xba>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b04      	cmp	r3, #4
 800525e:	d104      	bne.n	800526a <HAL_TIM_PWM_Stop+0xa2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005268:	e00b      	b.n	8005282 <HAL_TIM_PWM_Stop+0xba>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b08      	cmp	r3, #8
 800526e:	d104      	bne.n	800527a <HAL_TIM_PWM_Stop+0xb2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005278:	e003      	b.n	8005282 <HAL_TIM_PWM_Stop+0xba>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40010000 	.word	0x40010000

08005290 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e041      	b.n	8005326 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fc fca0 	bl	8001bfc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3304      	adds	r3, #4
 80052cc:	4619      	mov	r1, r3
 80052ce:	4610      	mov	r0, r2
 80052d0:	f000 fcd0 	bl	8005c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d104      	bne.n	800534e <HAL_TIM_IC_Start_IT+0x1e>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800534a:	b2db      	uxtb	r3, r3
 800534c:	e013      	b.n	8005376 <HAL_TIM_IC_Start_IT+0x46>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b04      	cmp	r3, #4
 8005352:	d104      	bne.n	800535e <HAL_TIM_IC_Start_IT+0x2e>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800535a:	b2db      	uxtb	r3, r3
 800535c:	e00b      	b.n	8005376 <HAL_TIM_IC_Start_IT+0x46>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b08      	cmp	r3, #8
 8005362:	d104      	bne.n	800536e <HAL_TIM_IC_Start_IT+0x3e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800536a:	b2db      	uxtb	r3, r3
 800536c:	e003      	b.n	8005376 <HAL_TIM_IC_Start_IT+0x46>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005374:	b2db      	uxtb	r3, r3
 8005376:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d104      	bne.n	8005388 <HAL_TIM_IC_Start_IT+0x58>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005384:	b2db      	uxtb	r3, r3
 8005386:	e013      	b.n	80053b0 <HAL_TIM_IC_Start_IT+0x80>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b04      	cmp	r3, #4
 800538c:	d104      	bne.n	8005398 <HAL_TIM_IC_Start_IT+0x68>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005394:	b2db      	uxtb	r3, r3
 8005396:	e00b      	b.n	80053b0 <HAL_TIM_IC_Start_IT+0x80>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b08      	cmp	r3, #8
 800539c:	d104      	bne.n	80053a8 <HAL_TIM_IC_Start_IT+0x78>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	e003      	b.n	80053b0 <HAL_TIM_IC_Start_IT+0x80>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80053b2:	7bbb      	ldrb	r3, [r7, #14]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d102      	bne.n	80053be <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80053b8:	7b7b      	ldrb	r3, [r7, #13]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d001      	beq.n	80053c2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e0c2      	b.n	8005548 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d104      	bne.n	80053d2 <HAL_TIM_IC_Start_IT+0xa2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d0:	e013      	b.n	80053fa <HAL_TIM_IC_Start_IT+0xca>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d104      	bne.n	80053e2 <HAL_TIM_IC_Start_IT+0xb2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053e0:	e00b      	b.n	80053fa <HAL_TIM_IC_Start_IT+0xca>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d104      	bne.n	80053f2 <HAL_TIM_IC_Start_IT+0xc2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053f0:	e003      	b.n	80053fa <HAL_TIM_IC_Start_IT+0xca>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d104      	bne.n	800540a <HAL_TIM_IC_Start_IT+0xda>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005408:	e013      	b.n	8005432 <HAL_TIM_IC_Start_IT+0x102>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b04      	cmp	r3, #4
 800540e:	d104      	bne.n	800541a <HAL_TIM_IC_Start_IT+0xea>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005418:	e00b      	b.n	8005432 <HAL_TIM_IC_Start_IT+0x102>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b08      	cmp	r3, #8
 800541e:	d104      	bne.n	800542a <HAL_TIM_IC_Start_IT+0xfa>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005428:	e003      	b.n	8005432 <HAL_TIM_IC_Start_IT+0x102>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2202      	movs	r2, #2
 800542e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b0c      	cmp	r3, #12
 8005436:	d841      	bhi.n	80054bc <HAL_TIM_IC_Start_IT+0x18c>
 8005438:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <HAL_TIM_IC_Start_IT+0x110>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	08005475 	.word	0x08005475
 8005444:	080054bd 	.word	0x080054bd
 8005448:	080054bd 	.word	0x080054bd
 800544c:	080054bd 	.word	0x080054bd
 8005450:	08005487 	.word	0x08005487
 8005454:	080054bd 	.word	0x080054bd
 8005458:	080054bd 	.word	0x080054bd
 800545c:	080054bd 	.word	0x080054bd
 8005460:	08005499 	.word	0x08005499
 8005464:	080054bd 	.word	0x080054bd
 8005468:	080054bd 	.word	0x080054bd
 800546c:	080054bd 	.word	0x080054bd
 8005470:	080054ab 	.word	0x080054ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0202 	orr.w	r2, r2, #2
 8005482:	60da      	str	r2, [r3, #12]
      break;
 8005484:	e01d      	b.n	80054c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0204 	orr.w	r2, r2, #4
 8005494:	60da      	str	r2, [r3, #12]
      break;
 8005496:	e014      	b.n	80054c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0208 	orr.w	r2, r2, #8
 80054a6:	60da      	str	r2, [r3, #12]
      break;
 80054a8:	e00b      	b.n	80054c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0210 	orr.w	r2, r2, #16
 80054b8:	60da      	str	r2, [r3, #12]
      break;
 80054ba:	e002      	b.n	80054c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	73fb      	strb	r3, [r7, #15]
      break;
 80054c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d13e      	bne.n	8005546 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2201      	movs	r2, #1
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 f80a 	bl	80064ea <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1d      	ldr	r2, [pc, #116]	; (8005550 <HAL_TIM_IC_Start_IT+0x220>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d018      	beq.n	8005512 <HAL_TIM_IC_Start_IT+0x1e2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e8:	d013      	beq.n	8005512 <HAL_TIM_IC_Start_IT+0x1e2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a19      	ldr	r2, [pc, #100]	; (8005554 <HAL_TIM_IC_Start_IT+0x224>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00e      	beq.n	8005512 <HAL_TIM_IC_Start_IT+0x1e2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a17      	ldr	r2, [pc, #92]	; (8005558 <HAL_TIM_IC_Start_IT+0x228>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d009      	beq.n	8005512 <HAL_TIM_IC_Start_IT+0x1e2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a16      	ldr	r2, [pc, #88]	; (800555c <HAL_TIM_IC_Start_IT+0x22c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_TIM_IC_Start_IT+0x1e2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a14      	ldr	r2, [pc, #80]	; (8005560 <HAL_TIM_IC_Start_IT+0x230>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d111      	bne.n	8005536 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b06      	cmp	r3, #6
 8005522:	d010      	beq.n	8005546 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005534:	e007      	b.n	8005546 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0201 	orr.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005546:	7bfb      	ldrb	r3, [r7, #15]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40010000 	.word	0x40010000
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40000c00 	.word	0x40000c00
 8005560:	40014000 	.word	0x40014000

08005564 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b0c      	cmp	r3, #12
 8005576:	d841      	bhi.n	80055fc <HAL_TIM_IC_Stop_IT+0x98>
 8005578:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <HAL_TIM_IC_Stop_IT+0x1c>)
 800557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557e:	bf00      	nop
 8005580:	080055b5 	.word	0x080055b5
 8005584:	080055fd 	.word	0x080055fd
 8005588:	080055fd 	.word	0x080055fd
 800558c:	080055fd 	.word	0x080055fd
 8005590:	080055c7 	.word	0x080055c7
 8005594:	080055fd 	.word	0x080055fd
 8005598:	080055fd 	.word	0x080055fd
 800559c:	080055fd 	.word	0x080055fd
 80055a0:	080055d9 	.word	0x080055d9
 80055a4:	080055fd 	.word	0x080055fd
 80055a8:	080055fd 	.word	0x080055fd
 80055ac:	080055fd 	.word	0x080055fd
 80055b0:	080055eb 	.word	0x080055eb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0202 	bic.w	r2, r2, #2
 80055c2:	60da      	str	r2, [r3, #12]
      break;
 80055c4:	e01d      	b.n	8005602 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0204 	bic.w	r2, r2, #4
 80055d4:	60da      	str	r2, [r3, #12]
      break;
 80055d6:	e014      	b.n	8005602 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0208 	bic.w	r2, r2, #8
 80055e6:	60da      	str	r2, [r3, #12]
      break;
 80055e8:	e00b      	b.n	8005602 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0210 	bic.w	r2, r2, #16
 80055f8:	60da      	str	r2, [r3, #12]
      break;
 80055fa:	e002      	b.n	8005602 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005600:	bf00      	nop
  }

  if (status == HAL_OK)
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d156      	bne.n	80056b6 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2200      	movs	r2, #0
 800560e:	6839      	ldr	r1, [r7, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f000 ff6a 	bl	80064ea <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6a1a      	ldr	r2, [r3, #32]
 800561c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005620:	4013      	ands	r3, r2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10f      	bne.n	8005646 <HAL_TIM_IC_Stop_IT+0xe2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6a1a      	ldr	r2, [r3, #32]
 800562c:	f240 4344 	movw	r3, #1092	; 0x444
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d107      	bne.n	8005646 <HAL_TIM_IC_Stop_IT+0xe2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0201 	bic.w	r2, r2, #1
 8005644:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <HAL_TIM_IC_Stop_IT+0xf2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005654:	e013      	b.n	800567e <HAL_TIM_IC_Stop_IT+0x11a>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b04      	cmp	r3, #4
 800565a:	d104      	bne.n	8005666 <HAL_TIM_IC_Stop_IT+0x102>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005664:	e00b      	b.n	800567e <HAL_TIM_IC_Stop_IT+0x11a>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d104      	bne.n	8005676 <HAL_TIM_IC_Stop_IT+0x112>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005674:	e003      	b.n	800567e <HAL_TIM_IC_Stop_IT+0x11a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d104      	bne.n	800568e <HAL_TIM_IC_Stop_IT+0x12a>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800568c:	e013      	b.n	80056b6 <HAL_TIM_IC_Stop_IT+0x152>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b04      	cmp	r3, #4
 8005692:	d104      	bne.n	800569e <HAL_TIM_IC_Stop_IT+0x13a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800569c:	e00b      	b.n	80056b6 <HAL_TIM_IC_Stop_IT+0x152>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d104      	bne.n	80056ae <HAL_TIM_IC_Stop_IT+0x14a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ac:	e003      	b.n	80056b6 <HAL_TIM_IC_Stop_IT+0x152>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d122      	bne.n	800571c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d11b      	bne.n	800571c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0202 	mvn.w	r2, #2
 80056ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fa98 	bl	8005c38 <HAL_TIM_IC_CaptureCallback>
 8005708:	e005      	b.n	8005716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fa8a 	bl	8005c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fa9b 	bl	8005c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b04      	cmp	r3, #4
 8005728:	d122      	bne.n	8005770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b04      	cmp	r3, #4
 8005736:	d11b      	bne.n	8005770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0204 	mvn.w	r2, #4
 8005740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2202      	movs	r2, #2
 8005746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fa6e 	bl	8005c38 <HAL_TIM_IC_CaptureCallback>
 800575c:	e005      	b.n	800576a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa60 	bl	8005c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fa71 	bl	8005c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b08      	cmp	r3, #8
 800577c:	d122      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b08      	cmp	r3, #8
 800578a:	d11b      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0208 	mvn.w	r2, #8
 8005794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2204      	movs	r2, #4
 800579a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fa44 	bl	8005c38 <HAL_TIM_IC_CaptureCallback>
 80057b0:	e005      	b.n	80057be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fa36 	bl	8005c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fa47 	bl	8005c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b10      	cmp	r3, #16
 80057d0:	d122      	bne.n	8005818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b10      	cmp	r3, #16
 80057de:	d11b      	bne.n	8005818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0210 	mvn.w	r2, #16
 80057e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2208      	movs	r2, #8
 80057ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fa1a 	bl	8005c38 <HAL_TIM_IC_CaptureCallback>
 8005804:	e005      	b.n	8005812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fa0c 	bl	8005c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fa1d 	bl	8005c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b01      	cmp	r3, #1
 8005824:	d10e      	bne.n	8005844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b01      	cmp	r3, #1
 8005832:	d107      	bne.n	8005844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0201 	mvn.w	r2, #1
 800583c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f9e6 	bl	8005c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584e:	2b80      	cmp	r3, #128	; 0x80
 8005850:	d10e      	bne.n	8005870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585c:	2b80      	cmp	r3, #128	; 0x80
 800585e:	d107      	bne.n	8005870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f001 f88e 	bl	800698c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587a:	2b40      	cmp	r3, #64	; 0x40
 800587c:	d10e      	bne.n	800589c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	d107      	bne.n	800589c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f9e2 	bl	8005c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d10e      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d107      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f06f 0220 	mvn.w	r2, #32
 80058c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 f858 	bl	8006978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058c8:	bf00      	nop
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_TIM_IC_ConfigChannel+0x1e>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e088      	b.n	8005a00 <HAL_TIM_IC_ConfigChannel+0x130>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d11b      	bne.n	8005934 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	6819      	ldr	r1, [r3, #0]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f000 fc50 	bl	80061b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 020c 	bic.w	r2, r2, #12
 800591e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6999      	ldr	r1, [r3, #24]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	619a      	str	r2, [r3, #24]
 8005932:	e060      	b.n	80059f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b04      	cmp	r3, #4
 8005938:	d11c      	bne.n	8005974 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6819      	ldr	r1, [r3, #0]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f000 fcc8 	bl	80062de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699a      	ldr	r2, [r3, #24]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800595c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6999      	ldr	r1, [r3, #24]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	021a      	lsls	r2, r3, #8
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	619a      	str	r2, [r3, #24]
 8005972:	e040      	b.n	80059f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b08      	cmp	r3, #8
 8005978:	d11b      	bne.n	80059b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6819      	ldr	r1, [r3, #0]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f000 fd15 	bl	80063b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 020c 	bic.w	r2, r2, #12
 800599c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69d9      	ldr	r1, [r3, #28]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	61da      	str	r2, [r3, #28]
 80059b0:	e021      	b.n	80059f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	d11c      	bne.n	80059f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6819      	ldr	r1, [r3, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f000 fd32 	bl	8006430 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69d9      	ldr	r1, [r3, #28]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	021a      	lsls	r2, r3, #8
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	61da      	str	r2, [r3, #28]
 80059f0:	e001      	b.n	80059f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e0ae      	b.n	8005b84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b0c      	cmp	r3, #12
 8005a32:	f200 809f 	bhi.w	8005b74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a36:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3c:	08005a71 	.word	0x08005a71
 8005a40:	08005b75 	.word	0x08005b75
 8005a44:	08005b75 	.word	0x08005b75
 8005a48:	08005b75 	.word	0x08005b75
 8005a4c:	08005ab1 	.word	0x08005ab1
 8005a50:	08005b75 	.word	0x08005b75
 8005a54:	08005b75 	.word	0x08005b75
 8005a58:	08005b75 	.word	0x08005b75
 8005a5c:	08005af3 	.word	0x08005af3
 8005a60:	08005b75 	.word	0x08005b75
 8005a64:	08005b75 	.word	0x08005b75
 8005a68:	08005b75 	.word	0x08005b75
 8005a6c:	08005b33 	.word	0x08005b33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 f97c 	bl	8005d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0208 	orr.w	r2, r2, #8
 8005a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0204 	bic.w	r2, r2, #4
 8005a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6999      	ldr	r1, [r3, #24]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	619a      	str	r2, [r3, #24]
      break;
 8005aae:	e064      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f9c2 	bl	8005e40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6999      	ldr	r1, [r3, #24]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	021a      	lsls	r2, r3, #8
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	619a      	str	r2, [r3, #24]
      break;
 8005af0:	e043      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fa0d 	bl	8005f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0208 	orr.w	r2, r2, #8
 8005b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0204 	bic.w	r2, r2, #4
 8005b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69d9      	ldr	r1, [r3, #28]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	61da      	str	r2, [r3, #28]
      break;
 8005b30:	e023      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fa57 	bl	8005fec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69d9      	ldr	r1, [r3, #28]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	021a      	lsls	r2, r3, #8
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	61da      	str	r2, [r3, #28]
      break;
 8005b72:	e002      	b.n	8005b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	75fb      	strb	r3, [r7, #23]
      break;
 8005b78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e031      	b.n	8005c08 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005bb4:	6839      	ldr	r1, [r7, #0]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fa68 	bl	800608c <TIM_SlaveTimer_SetConfig>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d009      	beq.n	8005bd6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e018      	b.n	8005c08 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005be4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bf4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a34      	ldr	r2, [pc, #208]	; (8005d58 <TIM_Base_SetConfig+0xe4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00f      	beq.n	8005cac <TIM_Base_SetConfig+0x38>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c92:	d00b      	beq.n	8005cac <TIM_Base_SetConfig+0x38>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a31      	ldr	r2, [pc, #196]	; (8005d5c <TIM_Base_SetConfig+0xe8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d007      	beq.n	8005cac <TIM_Base_SetConfig+0x38>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a30      	ldr	r2, [pc, #192]	; (8005d60 <TIM_Base_SetConfig+0xec>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_Base_SetConfig+0x38>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a2f      	ldr	r2, [pc, #188]	; (8005d64 <TIM_Base_SetConfig+0xf0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d108      	bne.n	8005cbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a25      	ldr	r2, [pc, #148]	; (8005d58 <TIM_Base_SetConfig+0xe4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d01b      	beq.n	8005cfe <TIM_Base_SetConfig+0x8a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ccc:	d017      	beq.n	8005cfe <TIM_Base_SetConfig+0x8a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a22      	ldr	r2, [pc, #136]	; (8005d5c <TIM_Base_SetConfig+0xe8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <TIM_Base_SetConfig+0x8a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a21      	ldr	r2, [pc, #132]	; (8005d60 <TIM_Base_SetConfig+0xec>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00f      	beq.n	8005cfe <TIM_Base_SetConfig+0x8a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a20      	ldr	r2, [pc, #128]	; (8005d64 <TIM_Base_SetConfig+0xf0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00b      	beq.n	8005cfe <TIM_Base_SetConfig+0x8a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <TIM_Base_SetConfig+0xf4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d007      	beq.n	8005cfe <TIM_Base_SetConfig+0x8a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a1e      	ldr	r2, [pc, #120]	; (8005d6c <TIM_Base_SetConfig+0xf8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d003      	beq.n	8005cfe <TIM_Base_SetConfig+0x8a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a1d      	ldr	r2, [pc, #116]	; (8005d70 <TIM_Base_SetConfig+0xfc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d108      	bne.n	8005d10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a08      	ldr	r2, [pc, #32]	; (8005d58 <TIM_Base_SetConfig+0xe4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d103      	bne.n	8005d44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	615a      	str	r2, [r3, #20]
}
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40010000 	.word	0x40010000
 8005d5c:	40000400 	.word	0x40000400
 8005d60:	40000800 	.word	0x40000800
 8005d64:	40000c00 	.word	0x40000c00
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800

08005d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f023 0201 	bic.w	r2, r3, #1
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0303 	bic.w	r3, r3, #3
 8005daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f023 0302 	bic.w	r3, r3, #2
 8005dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a1c      	ldr	r2, [pc, #112]	; (8005e3c <TIM_OC1_SetConfig+0xc8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10c      	bne.n	8005dea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f023 0308 	bic.w	r3, r3, #8
 8005dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f023 0304 	bic.w	r3, r3, #4
 8005de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a13      	ldr	r2, [pc, #76]	; (8005e3c <TIM_OC1_SetConfig+0xc8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d111      	bne.n	8005e16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	621a      	str	r2, [r3, #32]
}
 8005e30:	bf00      	nop
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	40010000 	.word	0x40010000

08005e40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f023 0210 	bic.w	r2, r3, #16
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f023 0320 	bic.w	r3, r3, #32
 8005e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a1e      	ldr	r2, [pc, #120]	; (8005f14 <TIM_OC2_SetConfig+0xd4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d10d      	bne.n	8005ebc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a15      	ldr	r2, [pc, #84]	; (8005f14 <TIM_OC2_SetConfig+0xd4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d113      	bne.n	8005eec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40010000 	.word	0x40010000

08005f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0303 	bic.w	r3, r3, #3
 8005f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	021b      	lsls	r3, r3, #8
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a1d      	ldr	r2, [pc, #116]	; (8005fe8 <TIM_OC3_SetConfig+0xd0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d10d      	bne.n	8005f92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	021b      	lsls	r3, r3, #8
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a14      	ldr	r2, [pc, #80]	; (8005fe8 <TIM_OC3_SetConfig+0xd0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d113      	bne.n	8005fc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	621a      	str	r2, [r3, #32]
}
 8005fdc:	bf00      	nop
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	40010000 	.word	0x40010000

08005fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	021b      	lsls	r3, r3, #8
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	031b      	lsls	r3, r3, #12
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a10      	ldr	r2, [pc, #64]	; (8006088 <TIM_OC4_SetConfig+0x9c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d109      	bne.n	8006060 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006052:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	019b      	lsls	r3, r3, #6
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	621a      	str	r2, [r3, #32]
}
 800607a:	bf00      	nop
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40010000 	.word	0x40010000

0800608c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f023 0307 	bic.w	r3, r3, #7
 80060ba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b70      	cmp	r3, #112	; 0x70
 80060d4:	d01a      	beq.n	800610c <TIM_SlaveTimer_SetConfig+0x80>
 80060d6:	2b70      	cmp	r3, #112	; 0x70
 80060d8:	d860      	bhi.n	800619c <TIM_SlaveTimer_SetConfig+0x110>
 80060da:	2b60      	cmp	r3, #96	; 0x60
 80060dc:	d054      	beq.n	8006188 <TIM_SlaveTimer_SetConfig+0xfc>
 80060de:	2b60      	cmp	r3, #96	; 0x60
 80060e0:	d85c      	bhi.n	800619c <TIM_SlaveTimer_SetConfig+0x110>
 80060e2:	2b50      	cmp	r3, #80	; 0x50
 80060e4:	d046      	beq.n	8006174 <TIM_SlaveTimer_SetConfig+0xe8>
 80060e6:	2b50      	cmp	r3, #80	; 0x50
 80060e8:	d858      	bhi.n	800619c <TIM_SlaveTimer_SetConfig+0x110>
 80060ea:	2b40      	cmp	r3, #64	; 0x40
 80060ec:	d019      	beq.n	8006122 <TIM_SlaveTimer_SetConfig+0x96>
 80060ee:	2b40      	cmp	r3, #64	; 0x40
 80060f0:	d854      	bhi.n	800619c <TIM_SlaveTimer_SetConfig+0x110>
 80060f2:	2b30      	cmp	r3, #48	; 0x30
 80060f4:	d055      	beq.n	80061a2 <TIM_SlaveTimer_SetConfig+0x116>
 80060f6:	2b30      	cmp	r3, #48	; 0x30
 80060f8:	d850      	bhi.n	800619c <TIM_SlaveTimer_SetConfig+0x110>
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	d051      	beq.n	80061a2 <TIM_SlaveTimer_SetConfig+0x116>
 80060fe:	2b20      	cmp	r3, #32
 8006100:	d84c      	bhi.n	800619c <TIM_SlaveTimer_SetConfig+0x110>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d04d      	beq.n	80061a2 <TIM_SlaveTimer_SetConfig+0x116>
 8006106:	2b10      	cmp	r3, #16
 8006108:	d04b      	beq.n	80061a2 <TIM_SlaveTimer_SetConfig+0x116>
 800610a:	e047      	b.n	800619c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68d9      	ldr	r1, [r3, #12]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	f000 f9c5 	bl	80064aa <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006120:	e040      	b.n	80061a4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b05      	cmp	r3, #5
 8006128:	d101      	bne.n	800612e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e03b      	b.n	80061a6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a1a      	ldr	r2, [r3, #32]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0201 	bic.w	r2, r2, #1
 8006144:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006154:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	4313      	orrs	r3, r2
 8006160:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	621a      	str	r2, [r3, #32]
      break;
 8006172:	e017      	b.n	80061a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	6899      	ldr	r1, [r3, #8]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	461a      	mov	r2, r3
 8006182:	f000 f87d 	bl	8006280 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006186:	e00d      	b.n	80061a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	6899      	ldr	r1, [r3, #8]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	461a      	mov	r2, r3
 8006196:	f000 f8df 	bl	8006358 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800619a:	e003      	b.n	80061a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	75fb      	strb	r3, [r7, #23]
      break;
 80061a0:	e000      	b.n	80061a4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80061a2:	bf00      	nop
  }

  return status;
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	f023 0201 	bic.w	r2, r3, #1
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4a24      	ldr	r2, [pc, #144]	; (800626c <TIM_TI1_SetConfig+0xbc>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d013      	beq.n	8006206 <TIM_TI1_SetConfig+0x56>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e4:	d00f      	beq.n	8006206 <TIM_TI1_SetConfig+0x56>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4a21      	ldr	r2, [pc, #132]	; (8006270 <TIM_TI1_SetConfig+0xc0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00b      	beq.n	8006206 <TIM_TI1_SetConfig+0x56>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a20      	ldr	r2, [pc, #128]	; (8006274 <TIM_TI1_SetConfig+0xc4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d007      	beq.n	8006206 <TIM_TI1_SetConfig+0x56>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <TIM_TI1_SetConfig+0xc8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d003      	beq.n	8006206 <TIM_TI1_SetConfig+0x56>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4a1e      	ldr	r2, [pc, #120]	; (800627c <TIM_TI1_SetConfig+0xcc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d101      	bne.n	800620a <TIM_TI1_SetConfig+0x5a>
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <TIM_TI1_SetConfig+0x5c>
 800620a:	2300      	movs	r3, #0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d008      	beq.n	8006222 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	e003      	b.n	800622a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f043 0301 	orr.w	r3, r3, #1
 8006228:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006230:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	b2db      	uxtb	r3, r3
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f023 030a 	bic.w	r3, r3, #10
 8006244:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f003 030a 	and.w	r3, r3, #10
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40010000 	.word	0x40010000
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40014000 	.word	0x40014000

08006280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	f023 0201 	bic.w	r2, r3, #1
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f023 030a 	bic.w	r3, r3, #10
 80062bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	621a      	str	r2, [r3, #32]
}
 80062d2:	bf00      	nop
 80062d4:	371c      	adds	r7, #28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062de:	b480      	push	{r7}
 80062e0:	b087      	sub	sp, #28
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	60f8      	str	r0, [r7, #12]
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	607a      	str	r2, [r7, #4]
 80062ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	f023 0210 	bic.w	r2, r3, #16
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800630a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800631c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	031b      	lsls	r3, r3, #12
 8006322:	b29b      	uxth	r3, r3
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006330:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	621a      	str	r2, [r3, #32]
}
 800634c:	bf00      	nop
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	f023 0210 	bic.w	r2, r3, #16
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006382:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	031b      	lsls	r3, r3, #12
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006394:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	621a      	str	r2, [r3, #32]
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f023 0303 	bic.w	r3, r3, #3
 80063e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006408:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	621a      	str	r2, [r3, #32]
}
 8006424:	bf00      	nop
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800646e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	031b      	lsls	r3, r3, #12
 8006474:	b29b      	uxth	r3, r3
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006482:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	031b      	lsls	r3, r3, #12
 8006488:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4313      	orrs	r3, r2
 8006490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	621a      	str	r2, [r3, #32]
}
 800649e:	bf00      	nop
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b087      	sub	sp, #28
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	607a      	str	r2, [r7, #4]
 80064b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	021a      	lsls	r2, r3, #8
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	431a      	orrs	r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	609a      	str	r2, [r3, #8]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b087      	sub	sp, #28
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f003 031f 	and.w	r3, r3, #31
 80064fc:	2201      	movs	r2, #1
 80064fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006502:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a1a      	ldr	r2, [r3, #32]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	43db      	mvns	r3, r3
 800650c:	401a      	ands	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f003 031f 	and.w	r3, r3, #31
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	fa01 f303 	lsl.w	r3, r1, r3
 8006522:	431a      	orrs	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	621a      	str	r2, [r3, #32]
}
 8006528:	bf00      	nop
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08a      	sub	sp, #40	; 0x28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e09a      	b.n	800667e <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d106      	bne.n	8006562 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7fb faff 	bl	8001b60 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2202      	movs	r2, #2
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f7ff fb7d 	bl	8005c74 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	6819      	ldr	r1, [r3, #0]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	2203      	movs	r2, #3
 8006588:	f7ff fe12 	bl	80061b0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 020c 	bic.w	r2, r2, #12
 800659a:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6999      	ldr	r1, [r3, #24]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065bc:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80065cc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065dc:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0207 	bic.w	r2, r2, #7
 80065ec:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0204 	orr.w	r2, r2, #4
 80065fc:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80065fe:	2300      	movs	r3, #0
 8006600:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006602:	2300      	movs	r3, #0
 8006604:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006606:	2370      	movs	r3, #112	; 0x70
 8006608:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800660a:	2300      	movs	r3, #0
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800660e:	2300      	movs	r3, #0
 8006610:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006612:	2300      	movs	r3, #0
 8006614:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f107 020c 	add.w	r2, r7, #12
 8006624:	4611      	mov	r1, r2
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff fc0a 	bl	8005e40 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800663a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800664a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3728      	adds	r7, #40	; 0x28
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006696:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800669e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066a6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066ae:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d108      	bne.n	80066c8 <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d105      	bne.n	80066c8 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066bc:	7b7b      	ldrb	r3, [r7, #13]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d102      	bne.n	80066c8 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066c2:	7b3b      	ldrb	r3, [r7, #12]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d001      	beq.n	80066cc <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e04f      	b.n	800676c <HAL_TIMEx_HallSensor_Start+0xe4>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2202      	movs	r2, #2
 80066d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2201      	movs	r2, #1
 80066f2:	2100      	movs	r1, #0
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7ff fef8 	bl	80064ea <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1d      	ldr	r2, [pc, #116]	; (8006774 <HAL_TIMEx_HallSensor_Start+0xec>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d018      	beq.n	8006736 <HAL_TIMEx_HallSensor_Start+0xae>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800670c:	d013      	beq.n	8006736 <HAL_TIMEx_HallSensor_Start+0xae>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a19      	ldr	r2, [pc, #100]	; (8006778 <HAL_TIMEx_HallSensor_Start+0xf0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00e      	beq.n	8006736 <HAL_TIMEx_HallSensor_Start+0xae>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a17      	ldr	r2, [pc, #92]	; (800677c <HAL_TIMEx_HallSensor_Start+0xf4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d009      	beq.n	8006736 <HAL_TIMEx_HallSensor_Start+0xae>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a16      	ldr	r2, [pc, #88]	; (8006780 <HAL_TIMEx_HallSensor_Start+0xf8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d004      	beq.n	8006736 <HAL_TIMEx_HallSensor_Start+0xae>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a14      	ldr	r2, [pc, #80]	; (8006784 <HAL_TIMEx_HallSensor_Start+0xfc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d111      	bne.n	800675a <HAL_TIMEx_HallSensor_Start+0xd2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b06      	cmp	r3, #6
 8006746:	d010      	beq.n	800676a <HAL_TIMEx_HallSensor_Start+0xe2>
    {
      __HAL_TIM_ENABLE(htim);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0201 	orr.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006758:	e007      	b.n	800676a <HAL_TIMEx_HallSensor_Start+0xe2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f042 0201 	orr.w	r2, r2, #1
 8006768:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	40010000 	.word	0x40010000
 8006778:	40000400 	.word	0x40000400
 800677c:	40000800 	.word	0x40000800
 8006780:	40000c00 	.word	0x40000c00
 8006784:	40014000 	.word	0x40014000

08006788 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2200      	movs	r2, #0
 8006796:	2100      	movs	r1, #0
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff fea6 	bl	80064ea <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6a1a      	ldr	r2, [r3, #32]
 80067a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80067a8:	4013      	ands	r3, r2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10f      	bne.n	80067ce <HAL_TIMEx_HallSensor_Stop+0x46>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6a1a      	ldr	r2, [r3, #32]
 80067b4:	f240 4344 	movw	r3, #1092	; 0x444
 80067b8:	4013      	ands	r3, r2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d107      	bne.n	80067ce <HAL_TIMEx_HallSensor_Stop+0x46>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0201 	bic.w	r2, r2, #1
 80067cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800680c:	2302      	movs	r3, #2
 800680e:	e050      	b.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a1c      	ldr	r2, [pc, #112]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d018      	beq.n	8006886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685c:	d013      	beq.n	8006886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a18      	ldr	r2, [pc, #96]	; (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00e      	beq.n	8006886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a16      	ldr	r2, [pc, #88]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d009      	beq.n	8006886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a15      	ldr	r2, [pc, #84]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d004      	beq.n	8006886 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a13      	ldr	r2, [pc, #76]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d10c      	bne.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800688c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	4313      	orrs	r3, r2
 8006896:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40010000 	.word	0x40010000
 80068c4:	40000400 	.word	0x40000400
 80068c8:	40000800 	.word	0x40000800
 80068cc:	40000c00 	.word	0x40000c00
 80068d0:	40014000 	.word	0x40014000

080068d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e03d      	b.n	800696c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	4313      	orrs	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <__cvt>:
 80069a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069a4:	ec55 4b10 	vmov	r4, r5, d0
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	460e      	mov	r6, r1
 80069ac:	4619      	mov	r1, r3
 80069ae:	462b      	mov	r3, r5
 80069b0:	bfbb      	ittet	lt
 80069b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80069b6:	461d      	movlt	r5, r3
 80069b8:	2300      	movge	r3, #0
 80069ba:	232d      	movlt	r3, #45	; 0x2d
 80069bc:	700b      	strb	r3, [r1, #0]
 80069be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069c4:	4691      	mov	r9, r2
 80069c6:	f023 0820 	bic.w	r8, r3, #32
 80069ca:	bfbc      	itt	lt
 80069cc:	4622      	movlt	r2, r4
 80069ce:	4614      	movlt	r4, r2
 80069d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069d4:	d005      	beq.n	80069e2 <__cvt+0x42>
 80069d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069da:	d100      	bne.n	80069de <__cvt+0x3e>
 80069dc:	3601      	adds	r6, #1
 80069de:	2102      	movs	r1, #2
 80069e0:	e000      	b.n	80069e4 <__cvt+0x44>
 80069e2:	2103      	movs	r1, #3
 80069e4:	ab03      	add	r3, sp, #12
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	ab02      	add	r3, sp, #8
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	ec45 4b10 	vmov	d0, r4, r5
 80069f0:	4653      	mov	r3, sl
 80069f2:	4632      	mov	r2, r6
 80069f4:	f000 fe48 	bl	8007688 <_dtoa_r>
 80069f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80069fc:	4607      	mov	r7, r0
 80069fe:	d102      	bne.n	8006a06 <__cvt+0x66>
 8006a00:	f019 0f01 	tst.w	r9, #1
 8006a04:	d022      	beq.n	8006a4c <__cvt+0xac>
 8006a06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a0a:	eb07 0906 	add.w	r9, r7, r6
 8006a0e:	d110      	bne.n	8006a32 <__cvt+0x92>
 8006a10:	783b      	ldrb	r3, [r7, #0]
 8006a12:	2b30      	cmp	r3, #48	; 0x30
 8006a14:	d10a      	bne.n	8006a2c <__cvt+0x8c>
 8006a16:	2200      	movs	r2, #0
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	f7fa f85b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a22:	b918      	cbnz	r0, 8006a2c <__cvt+0x8c>
 8006a24:	f1c6 0601 	rsb	r6, r6, #1
 8006a28:	f8ca 6000 	str.w	r6, [sl]
 8006a2c:	f8da 3000 	ldr.w	r3, [sl]
 8006a30:	4499      	add	r9, r3
 8006a32:	2200      	movs	r2, #0
 8006a34:	2300      	movs	r3, #0
 8006a36:	4620      	mov	r0, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7fa f84d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a3e:	b108      	cbz	r0, 8006a44 <__cvt+0xa4>
 8006a40:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a44:	2230      	movs	r2, #48	; 0x30
 8006a46:	9b03      	ldr	r3, [sp, #12]
 8006a48:	454b      	cmp	r3, r9
 8006a4a:	d307      	bcc.n	8006a5c <__cvt+0xbc>
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a50:	1bdb      	subs	r3, r3, r7
 8006a52:	4638      	mov	r0, r7
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	b004      	add	sp, #16
 8006a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5c:	1c59      	adds	r1, r3, #1
 8006a5e:	9103      	str	r1, [sp, #12]
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	e7f0      	b.n	8006a46 <__cvt+0xa6>

08006a64 <__exponent>:
 8006a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a66:	4603      	mov	r3, r0
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	bfb8      	it	lt
 8006a6c:	4249      	neglt	r1, r1
 8006a6e:	f803 2b02 	strb.w	r2, [r3], #2
 8006a72:	bfb4      	ite	lt
 8006a74:	222d      	movlt	r2, #45	; 0x2d
 8006a76:	222b      	movge	r2, #43	; 0x2b
 8006a78:	2909      	cmp	r1, #9
 8006a7a:	7042      	strb	r2, [r0, #1]
 8006a7c:	dd2a      	ble.n	8006ad4 <__exponent+0x70>
 8006a7e:	f10d 0207 	add.w	r2, sp, #7
 8006a82:	4617      	mov	r7, r2
 8006a84:	260a      	movs	r6, #10
 8006a86:	4694      	mov	ip, r2
 8006a88:	fb91 f5f6 	sdiv	r5, r1, r6
 8006a8c:	fb06 1415 	mls	r4, r6, r5, r1
 8006a90:	3430      	adds	r4, #48	; 0x30
 8006a92:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006a96:	460c      	mov	r4, r1
 8006a98:	2c63      	cmp	r4, #99	; 0x63
 8006a9a:	f102 32ff 	add.w	r2, r2, #4294967295
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	dcf1      	bgt.n	8006a86 <__exponent+0x22>
 8006aa2:	3130      	adds	r1, #48	; 0x30
 8006aa4:	f1ac 0402 	sub.w	r4, ip, #2
 8006aa8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006aac:	1c41      	adds	r1, r0, #1
 8006aae:	4622      	mov	r2, r4
 8006ab0:	42ba      	cmp	r2, r7
 8006ab2:	d30a      	bcc.n	8006aca <__exponent+0x66>
 8006ab4:	f10d 0209 	add.w	r2, sp, #9
 8006ab8:	eba2 020c 	sub.w	r2, r2, ip
 8006abc:	42bc      	cmp	r4, r7
 8006abe:	bf88      	it	hi
 8006ac0:	2200      	movhi	r2, #0
 8006ac2:	4413      	add	r3, r2
 8006ac4:	1a18      	subs	r0, r3, r0
 8006ac6:	b003      	add	sp, #12
 8006ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aca:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006ace:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006ad2:	e7ed      	b.n	8006ab0 <__exponent+0x4c>
 8006ad4:	2330      	movs	r3, #48	; 0x30
 8006ad6:	3130      	adds	r1, #48	; 0x30
 8006ad8:	7083      	strb	r3, [r0, #2]
 8006ada:	70c1      	strb	r1, [r0, #3]
 8006adc:	1d03      	adds	r3, r0, #4
 8006ade:	e7f1      	b.n	8006ac4 <__exponent+0x60>

08006ae0 <_printf_float>:
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	ed2d 8b02 	vpush	{d8}
 8006ae8:	b08d      	sub	sp, #52	; 0x34
 8006aea:	460c      	mov	r4, r1
 8006aec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006af0:	4616      	mov	r6, r2
 8006af2:	461f      	mov	r7, r3
 8006af4:	4605      	mov	r5, r0
 8006af6:	f000 fcc7 	bl	8007488 <_localeconv_r>
 8006afa:	f8d0 a000 	ldr.w	sl, [r0]
 8006afe:	4650      	mov	r0, sl
 8006b00:	f7f9 fbbe 	bl	8000280 <strlen>
 8006b04:	2300      	movs	r3, #0
 8006b06:	930a      	str	r3, [sp, #40]	; 0x28
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	9305      	str	r3, [sp, #20]
 8006b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b14:	3307      	adds	r3, #7
 8006b16:	f023 0307 	bic.w	r3, r3, #7
 8006b1a:	f103 0208 	add.w	r2, r3, #8
 8006b1e:	f8c8 2000 	str.w	r2, [r8]
 8006b22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b2a:	9307      	str	r3, [sp, #28]
 8006b2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b30:	ee08 0a10 	vmov	s16, r0
 8006b34:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006b38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b3c:	4b9e      	ldr	r3, [pc, #632]	; (8006db8 <_printf_float+0x2d8>)
 8006b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b42:	f7f9 fffb 	bl	8000b3c <__aeabi_dcmpun>
 8006b46:	bb88      	cbnz	r0, 8006bac <_printf_float+0xcc>
 8006b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b4c:	4b9a      	ldr	r3, [pc, #616]	; (8006db8 <_printf_float+0x2d8>)
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b52:	f7f9 ffd5 	bl	8000b00 <__aeabi_dcmple>
 8006b56:	bb48      	cbnz	r0, 8006bac <_printf_float+0xcc>
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	4649      	mov	r1, r9
 8006b60:	f7f9 ffc4 	bl	8000aec <__aeabi_dcmplt>
 8006b64:	b110      	cbz	r0, 8006b6c <_printf_float+0x8c>
 8006b66:	232d      	movs	r3, #45	; 0x2d
 8006b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b6c:	4a93      	ldr	r2, [pc, #588]	; (8006dbc <_printf_float+0x2dc>)
 8006b6e:	4b94      	ldr	r3, [pc, #592]	; (8006dc0 <_printf_float+0x2e0>)
 8006b70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b74:	bf94      	ite	ls
 8006b76:	4690      	movls	r8, r2
 8006b78:	4698      	movhi	r8, r3
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	6123      	str	r3, [r4, #16]
 8006b7e:	9b05      	ldr	r3, [sp, #20]
 8006b80:	f023 0304 	bic.w	r3, r3, #4
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	f04f 0900 	mov.w	r9, #0
 8006b8a:	9700      	str	r7, [sp, #0]
 8006b8c:	4633      	mov	r3, r6
 8006b8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b90:	4621      	mov	r1, r4
 8006b92:	4628      	mov	r0, r5
 8006b94:	f000 f9da 	bl	8006f4c <_printf_common>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	f040 8090 	bne.w	8006cbe <_printf_float+0x1de>
 8006b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba2:	b00d      	add	sp, #52	; 0x34
 8006ba4:	ecbd 8b02 	vpop	{d8}
 8006ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bac:	4642      	mov	r2, r8
 8006bae:	464b      	mov	r3, r9
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	f7f9 ffc2 	bl	8000b3c <__aeabi_dcmpun>
 8006bb8:	b140      	cbz	r0, 8006bcc <_printf_float+0xec>
 8006bba:	464b      	mov	r3, r9
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	bfbc      	itt	lt
 8006bc0:	232d      	movlt	r3, #45	; 0x2d
 8006bc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006bc6:	4a7f      	ldr	r2, [pc, #508]	; (8006dc4 <_printf_float+0x2e4>)
 8006bc8:	4b7f      	ldr	r3, [pc, #508]	; (8006dc8 <_printf_float+0x2e8>)
 8006bca:	e7d1      	b.n	8006b70 <_printf_float+0x90>
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006bd2:	9206      	str	r2, [sp, #24]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	d13f      	bne.n	8006c58 <_printf_float+0x178>
 8006bd8:	2306      	movs	r3, #6
 8006bda:	6063      	str	r3, [r4, #4]
 8006bdc:	9b05      	ldr	r3, [sp, #20]
 8006bde:	6861      	ldr	r1, [r4, #4]
 8006be0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006be4:	2300      	movs	r3, #0
 8006be6:	9303      	str	r3, [sp, #12]
 8006be8:	ab0a      	add	r3, sp, #40	; 0x28
 8006bea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006bee:	ab09      	add	r3, sp, #36	; 0x24
 8006bf0:	ec49 8b10 	vmov	d0, r8, r9
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	6022      	str	r2, [r4, #0]
 8006bf8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f7ff fecf 	bl	80069a0 <__cvt>
 8006c02:	9b06      	ldr	r3, [sp, #24]
 8006c04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c06:	2b47      	cmp	r3, #71	; 0x47
 8006c08:	4680      	mov	r8, r0
 8006c0a:	d108      	bne.n	8006c1e <_printf_float+0x13e>
 8006c0c:	1cc8      	adds	r0, r1, #3
 8006c0e:	db02      	blt.n	8006c16 <_printf_float+0x136>
 8006c10:	6863      	ldr	r3, [r4, #4]
 8006c12:	4299      	cmp	r1, r3
 8006c14:	dd41      	ble.n	8006c9a <_printf_float+0x1ba>
 8006c16:	f1ab 0302 	sub.w	r3, fp, #2
 8006c1a:	fa5f fb83 	uxtb.w	fp, r3
 8006c1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c22:	d820      	bhi.n	8006c66 <_printf_float+0x186>
 8006c24:	3901      	subs	r1, #1
 8006c26:	465a      	mov	r2, fp
 8006c28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c2c:	9109      	str	r1, [sp, #36]	; 0x24
 8006c2e:	f7ff ff19 	bl	8006a64 <__exponent>
 8006c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c34:	1813      	adds	r3, r2, r0
 8006c36:	2a01      	cmp	r2, #1
 8006c38:	4681      	mov	r9, r0
 8006c3a:	6123      	str	r3, [r4, #16]
 8006c3c:	dc02      	bgt.n	8006c44 <_printf_float+0x164>
 8006c3e:	6822      	ldr	r2, [r4, #0]
 8006c40:	07d2      	lsls	r2, r2, #31
 8006c42:	d501      	bpl.n	8006c48 <_printf_float+0x168>
 8006c44:	3301      	adds	r3, #1
 8006c46:	6123      	str	r3, [r4, #16]
 8006c48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d09c      	beq.n	8006b8a <_printf_float+0xaa>
 8006c50:	232d      	movs	r3, #45	; 0x2d
 8006c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c56:	e798      	b.n	8006b8a <_printf_float+0xaa>
 8006c58:	9a06      	ldr	r2, [sp, #24]
 8006c5a:	2a47      	cmp	r2, #71	; 0x47
 8006c5c:	d1be      	bne.n	8006bdc <_printf_float+0xfc>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1bc      	bne.n	8006bdc <_printf_float+0xfc>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e7b9      	b.n	8006bda <_printf_float+0xfa>
 8006c66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c6a:	d118      	bne.n	8006c9e <_printf_float+0x1be>
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	6863      	ldr	r3, [r4, #4]
 8006c70:	dd0b      	ble.n	8006c8a <_printf_float+0x1aa>
 8006c72:	6121      	str	r1, [r4, #16]
 8006c74:	b913      	cbnz	r3, 8006c7c <_printf_float+0x19c>
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	07d0      	lsls	r0, r2, #31
 8006c7a:	d502      	bpl.n	8006c82 <_printf_float+0x1a2>
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	440b      	add	r3, r1
 8006c80:	6123      	str	r3, [r4, #16]
 8006c82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c84:	f04f 0900 	mov.w	r9, #0
 8006c88:	e7de      	b.n	8006c48 <_printf_float+0x168>
 8006c8a:	b913      	cbnz	r3, 8006c92 <_printf_float+0x1b2>
 8006c8c:	6822      	ldr	r2, [r4, #0]
 8006c8e:	07d2      	lsls	r2, r2, #31
 8006c90:	d501      	bpl.n	8006c96 <_printf_float+0x1b6>
 8006c92:	3302      	adds	r3, #2
 8006c94:	e7f4      	b.n	8006c80 <_printf_float+0x1a0>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e7f2      	b.n	8006c80 <_printf_float+0x1a0>
 8006c9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca0:	4299      	cmp	r1, r3
 8006ca2:	db05      	blt.n	8006cb0 <_printf_float+0x1d0>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	6121      	str	r1, [r4, #16]
 8006ca8:	07d8      	lsls	r0, r3, #31
 8006caa:	d5ea      	bpl.n	8006c82 <_printf_float+0x1a2>
 8006cac:	1c4b      	adds	r3, r1, #1
 8006cae:	e7e7      	b.n	8006c80 <_printf_float+0x1a0>
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	bfd4      	ite	le
 8006cb4:	f1c1 0202 	rsble	r2, r1, #2
 8006cb8:	2201      	movgt	r2, #1
 8006cba:	4413      	add	r3, r2
 8006cbc:	e7e0      	b.n	8006c80 <_printf_float+0x1a0>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	055a      	lsls	r2, r3, #21
 8006cc2:	d407      	bmi.n	8006cd4 <_printf_float+0x1f4>
 8006cc4:	6923      	ldr	r3, [r4, #16]
 8006cc6:	4642      	mov	r2, r8
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d12c      	bne.n	8006d2c <_printf_float+0x24c>
 8006cd2:	e764      	b.n	8006b9e <_printf_float+0xbe>
 8006cd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cd8:	f240 80e0 	bls.w	8006e9c <_printf_float+0x3bc>
 8006cdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f7f9 fef8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d034      	beq.n	8006d56 <_printf_float+0x276>
 8006cec:	4a37      	ldr	r2, [pc, #220]	; (8006dcc <_printf_float+0x2ec>)
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	47b8      	blx	r7
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	f43f af51 	beq.w	8006b9e <_printf_float+0xbe>
 8006cfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d00:	429a      	cmp	r2, r3
 8006d02:	db02      	blt.n	8006d0a <_printf_float+0x22a>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	07d8      	lsls	r0, r3, #31
 8006d08:	d510      	bpl.n	8006d2c <_printf_float+0x24c>
 8006d0a:	ee18 3a10 	vmov	r3, s16
 8006d0e:	4652      	mov	r2, sl
 8006d10:	4631      	mov	r1, r6
 8006d12:	4628      	mov	r0, r5
 8006d14:	47b8      	blx	r7
 8006d16:	3001      	adds	r0, #1
 8006d18:	f43f af41 	beq.w	8006b9e <_printf_float+0xbe>
 8006d1c:	f04f 0800 	mov.w	r8, #0
 8006d20:	f104 091a 	add.w	r9, r4, #26
 8006d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d26:	3b01      	subs	r3, #1
 8006d28:	4543      	cmp	r3, r8
 8006d2a:	dc09      	bgt.n	8006d40 <_printf_float+0x260>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	079b      	lsls	r3, r3, #30
 8006d30:	f100 8107 	bmi.w	8006f42 <_printf_float+0x462>
 8006d34:	68e0      	ldr	r0, [r4, #12]
 8006d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d38:	4298      	cmp	r0, r3
 8006d3a:	bfb8      	it	lt
 8006d3c:	4618      	movlt	r0, r3
 8006d3e:	e730      	b.n	8006ba2 <_printf_float+0xc2>
 8006d40:	2301      	movs	r3, #1
 8006d42:	464a      	mov	r2, r9
 8006d44:	4631      	mov	r1, r6
 8006d46:	4628      	mov	r0, r5
 8006d48:	47b8      	blx	r7
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	f43f af27 	beq.w	8006b9e <_printf_float+0xbe>
 8006d50:	f108 0801 	add.w	r8, r8, #1
 8006d54:	e7e6      	b.n	8006d24 <_printf_float+0x244>
 8006d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dc39      	bgt.n	8006dd0 <_printf_float+0x2f0>
 8006d5c:	4a1b      	ldr	r2, [pc, #108]	; (8006dcc <_printf_float+0x2ec>)
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	f43f af19 	beq.w	8006b9e <_printf_float+0xbe>
 8006d6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d70:	4313      	orrs	r3, r2
 8006d72:	d102      	bne.n	8006d7a <_printf_float+0x29a>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	07d9      	lsls	r1, r3, #31
 8006d78:	d5d8      	bpl.n	8006d2c <_printf_float+0x24c>
 8006d7a:	ee18 3a10 	vmov	r3, s16
 8006d7e:	4652      	mov	r2, sl
 8006d80:	4631      	mov	r1, r6
 8006d82:	4628      	mov	r0, r5
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	f43f af09 	beq.w	8006b9e <_printf_float+0xbe>
 8006d8c:	f04f 0900 	mov.w	r9, #0
 8006d90:	f104 0a1a 	add.w	sl, r4, #26
 8006d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d96:	425b      	negs	r3, r3
 8006d98:	454b      	cmp	r3, r9
 8006d9a:	dc01      	bgt.n	8006da0 <_printf_float+0x2c0>
 8006d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d9e:	e792      	b.n	8006cc6 <_printf_float+0x1e6>
 8006da0:	2301      	movs	r3, #1
 8006da2:	4652      	mov	r2, sl
 8006da4:	4631      	mov	r1, r6
 8006da6:	4628      	mov	r0, r5
 8006da8:	47b8      	blx	r7
 8006daa:	3001      	adds	r0, #1
 8006dac:	f43f aef7 	beq.w	8006b9e <_printf_float+0xbe>
 8006db0:	f109 0901 	add.w	r9, r9, #1
 8006db4:	e7ee      	b.n	8006d94 <_printf_float+0x2b4>
 8006db6:	bf00      	nop
 8006db8:	7fefffff 	.word	0x7fefffff
 8006dbc:	08009348 	.word	0x08009348
 8006dc0:	0800934c 	.word	0x0800934c
 8006dc4:	08009350 	.word	0x08009350
 8006dc8:	08009354 	.word	0x08009354
 8006dcc:	08009358 	.word	0x08009358
 8006dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	bfa8      	it	ge
 8006dd8:	461a      	movge	r2, r3
 8006dda:	2a00      	cmp	r2, #0
 8006ddc:	4691      	mov	r9, r2
 8006dde:	dc37      	bgt.n	8006e50 <_printf_float+0x370>
 8006de0:	f04f 0b00 	mov.w	fp, #0
 8006de4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006de8:	f104 021a 	add.w	r2, r4, #26
 8006dec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dee:	9305      	str	r3, [sp, #20]
 8006df0:	eba3 0309 	sub.w	r3, r3, r9
 8006df4:	455b      	cmp	r3, fp
 8006df6:	dc33      	bgt.n	8006e60 <_printf_float+0x380>
 8006df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	db3b      	blt.n	8006e78 <_printf_float+0x398>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	07da      	lsls	r2, r3, #31
 8006e04:	d438      	bmi.n	8006e78 <_printf_float+0x398>
 8006e06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006e0a:	eba2 0903 	sub.w	r9, r2, r3
 8006e0e:	9b05      	ldr	r3, [sp, #20]
 8006e10:	1ad2      	subs	r2, r2, r3
 8006e12:	4591      	cmp	r9, r2
 8006e14:	bfa8      	it	ge
 8006e16:	4691      	movge	r9, r2
 8006e18:	f1b9 0f00 	cmp.w	r9, #0
 8006e1c:	dc35      	bgt.n	8006e8a <_printf_float+0x3aa>
 8006e1e:	f04f 0800 	mov.w	r8, #0
 8006e22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e26:	f104 0a1a 	add.w	sl, r4, #26
 8006e2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	eba3 0309 	sub.w	r3, r3, r9
 8006e34:	4543      	cmp	r3, r8
 8006e36:	f77f af79 	ble.w	8006d2c <_printf_float+0x24c>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4652      	mov	r2, sl
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	47b8      	blx	r7
 8006e44:	3001      	adds	r0, #1
 8006e46:	f43f aeaa 	beq.w	8006b9e <_printf_float+0xbe>
 8006e4a:	f108 0801 	add.w	r8, r8, #1
 8006e4e:	e7ec      	b.n	8006e2a <_printf_float+0x34a>
 8006e50:	4613      	mov	r3, r2
 8006e52:	4631      	mov	r1, r6
 8006e54:	4642      	mov	r2, r8
 8006e56:	4628      	mov	r0, r5
 8006e58:	47b8      	blx	r7
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	d1c0      	bne.n	8006de0 <_printf_float+0x300>
 8006e5e:	e69e      	b.n	8006b9e <_printf_float+0xbe>
 8006e60:	2301      	movs	r3, #1
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	9205      	str	r2, [sp, #20]
 8006e68:	47b8      	blx	r7
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	f43f ae97 	beq.w	8006b9e <_printf_float+0xbe>
 8006e70:	9a05      	ldr	r2, [sp, #20]
 8006e72:	f10b 0b01 	add.w	fp, fp, #1
 8006e76:	e7b9      	b.n	8006dec <_printf_float+0x30c>
 8006e78:	ee18 3a10 	vmov	r3, s16
 8006e7c:	4652      	mov	r2, sl
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	d1be      	bne.n	8006e06 <_printf_float+0x326>
 8006e88:	e689      	b.n	8006b9e <_printf_float+0xbe>
 8006e8a:	9a05      	ldr	r2, [sp, #20]
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	4442      	add	r2, r8
 8006e90:	4631      	mov	r1, r6
 8006e92:	4628      	mov	r0, r5
 8006e94:	47b8      	blx	r7
 8006e96:	3001      	adds	r0, #1
 8006e98:	d1c1      	bne.n	8006e1e <_printf_float+0x33e>
 8006e9a:	e680      	b.n	8006b9e <_printf_float+0xbe>
 8006e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e9e:	2a01      	cmp	r2, #1
 8006ea0:	dc01      	bgt.n	8006ea6 <_printf_float+0x3c6>
 8006ea2:	07db      	lsls	r3, r3, #31
 8006ea4:	d53a      	bpl.n	8006f1c <_printf_float+0x43c>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f43f ae74 	beq.w	8006b9e <_printf_float+0xbe>
 8006eb6:	ee18 3a10 	vmov	r3, s16
 8006eba:	4652      	mov	r2, sl
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f43f ae6b 	beq.w	8006b9e <_printf_float+0xbe>
 8006ec8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006ed4:	f7f9 fe00 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ed8:	b9d8      	cbnz	r0, 8006f12 <_printf_float+0x432>
 8006eda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006ede:	f108 0201 	add.w	r2, r8, #1
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d10e      	bne.n	8006f0a <_printf_float+0x42a>
 8006eec:	e657      	b.n	8006b9e <_printf_float+0xbe>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4652      	mov	r2, sl
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b8      	blx	r7
 8006ef8:	3001      	adds	r0, #1
 8006efa:	f43f ae50 	beq.w	8006b9e <_printf_float+0xbe>
 8006efe:	f108 0801 	add.w	r8, r8, #1
 8006f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f04:	3b01      	subs	r3, #1
 8006f06:	4543      	cmp	r3, r8
 8006f08:	dcf1      	bgt.n	8006eee <_printf_float+0x40e>
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f10:	e6da      	b.n	8006cc8 <_printf_float+0x1e8>
 8006f12:	f04f 0800 	mov.w	r8, #0
 8006f16:	f104 0a1a 	add.w	sl, r4, #26
 8006f1a:	e7f2      	b.n	8006f02 <_printf_float+0x422>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4642      	mov	r2, r8
 8006f20:	e7df      	b.n	8006ee2 <_printf_float+0x402>
 8006f22:	2301      	movs	r3, #1
 8006f24:	464a      	mov	r2, r9
 8006f26:	4631      	mov	r1, r6
 8006f28:	4628      	mov	r0, r5
 8006f2a:	47b8      	blx	r7
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	f43f ae36 	beq.w	8006b9e <_printf_float+0xbe>
 8006f32:	f108 0801 	add.w	r8, r8, #1
 8006f36:	68e3      	ldr	r3, [r4, #12]
 8006f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f3a:	1a5b      	subs	r3, r3, r1
 8006f3c:	4543      	cmp	r3, r8
 8006f3e:	dcf0      	bgt.n	8006f22 <_printf_float+0x442>
 8006f40:	e6f8      	b.n	8006d34 <_printf_float+0x254>
 8006f42:	f04f 0800 	mov.w	r8, #0
 8006f46:	f104 0919 	add.w	r9, r4, #25
 8006f4a:	e7f4      	b.n	8006f36 <_printf_float+0x456>

08006f4c <_printf_common>:
 8006f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f50:	4616      	mov	r6, r2
 8006f52:	4699      	mov	r9, r3
 8006f54:	688a      	ldr	r2, [r1, #8]
 8006f56:	690b      	ldr	r3, [r1, #16]
 8006f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	bfb8      	it	lt
 8006f60:	4613      	movlt	r3, r2
 8006f62:	6033      	str	r3, [r6, #0]
 8006f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f68:	4607      	mov	r7, r0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	b10a      	cbz	r2, 8006f72 <_printf_common+0x26>
 8006f6e:	3301      	adds	r3, #1
 8006f70:	6033      	str	r3, [r6, #0]
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	0699      	lsls	r1, r3, #26
 8006f76:	bf42      	ittt	mi
 8006f78:	6833      	ldrmi	r3, [r6, #0]
 8006f7a:	3302      	addmi	r3, #2
 8006f7c:	6033      	strmi	r3, [r6, #0]
 8006f7e:	6825      	ldr	r5, [r4, #0]
 8006f80:	f015 0506 	ands.w	r5, r5, #6
 8006f84:	d106      	bne.n	8006f94 <_printf_common+0x48>
 8006f86:	f104 0a19 	add.w	sl, r4, #25
 8006f8a:	68e3      	ldr	r3, [r4, #12]
 8006f8c:	6832      	ldr	r2, [r6, #0]
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	42ab      	cmp	r3, r5
 8006f92:	dc26      	bgt.n	8006fe2 <_printf_common+0x96>
 8006f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f98:	1e13      	subs	r3, r2, #0
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	bf18      	it	ne
 8006f9e:	2301      	movne	r3, #1
 8006fa0:	0692      	lsls	r2, r2, #26
 8006fa2:	d42b      	bmi.n	8006ffc <_printf_common+0xb0>
 8006fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fa8:	4649      	mov	r1, r9
 8006faa:	4638      	mov	r0, r7
 8006fac:	47c0      	blx	r8
 8006fae:	3001      	adds	r0, #1
 8006fb0:	d01e      	beq.n	8006ff0 <_printf_common+0xa4>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	6922      	ldr	r2, [r4, #16]
 8006fb6:	f003 0306 	and.w	r3, r3, #6
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	bf02      	ittt	eq
 8006fbe:	68e5      	ldreq	r5, [r4, #12]
 8006fc0:	6833      	ldreq	r3, [r6, #0]
 8006fc2:	1aed      	subeq	r5, r5, r3
 8006fc4:	68a3      	ldr	r3, [r4, #8]
 8006fc6:	bf0c      	ite	eq
 8006fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fcc:	2500      	movne	r5, #0
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	bfc4      	itt	gt
 8006fd2:	1a9b      	subgt	r3, r3, r2
 8006fd4:	18ed      	addgt	r5, r5, r3
 8006fd6:	2600      	movs	r6, #0
 8006fd8:	341a      	adds	r4, #26
 8006fda:	42b5      	cmp	r5, r6
 8006fdc:	d11a      	bne.n	8007014 <_printf_common+0xc8>
 8006fde:	2000      	movs	r0, #0
 8006fe0:	e008      	b.n	8006ff4 <_printf_common+0xa8>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	4652      	mov	r2, sl
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	4638      	mov	r0, r7
 8006fea:	47c0      	blx	r8
 8006fec:	3001      	adds	r0, #1
 8006fee:	d103      	bne.n	8006ff8 <_printf_common+0xac>
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff8:	3501      	adds	r5, #1
 8006ffa:	e7c6      	b.n	8006f8a <_printf_common+0x3e>
 8006ffc:	18e1      	adds	r1, r4, r3
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	2030      	movs	r0, #48	; 0x30
 8007002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007006:	4422      	add	r2, r4
 8007008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800700c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007010:	3302      	adds	r3, #2
 8007012:	e7c7      	b.n	8006fa4 <_printf_common+0x58>
 8007014:	2301      	movs	r3, #1
 8007016:	4622      	mov	r2, r4
 8007018:	4649      	mov	r1, r9
 800701a:	4638      	mov	r0, r7
 800701c:	47c0      	blx	r8
 800701e:	3001      	adds	r0, #1
 8007020:	d0e6      	beq.n	8006ff0 <_printf_common+0xa4>
 8007022:	3601      	adds	r6, #1
 8007024:	e7d9      	b.n	8006fda <_printf_common+0x8e>
	...

08007028 <_printf_i>:
 8007028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800702c:	7e0f      	ldrb	r7, [r1, #24]
 800702e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007030:	2f78      	cmp	r7, #120	; 0x78
 8007032:	4691      	mov	r9, r2
 8007034:	4680      	mov	r8, r0
 8007036:	460c      	mov	r4, r1
 8007038:	469a      	mov	sl, r3
 800703a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800703e:	d807      	bhi.n	8007050 <_printf_i+0x28>
 8007040:	2f62      	cmp	r7, #98	; 0x62
 8007042:	d80a      	bhi.n	800705a <_printf_i+0x32>
 8007044:	2f00      	cmp	r7, #0
 8007046:	f000 80d4 	beq.w	80071f2 <_printf_i+0x1ca>
 800704a:	2f58      	cmp	r7, #88	; 0x58
 800704c:	f000 80c0 	beq.w	80071d0 <_printf_i+0x1a8>
 8007050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007058:	e03a      	b.n	80070d0 <_printf_i+0xa8>
 800705a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800705e:	2b15      	cmp	r3, #21
 8007060:	d8f6      	bhi.n	8007050 <_printf_i+0x28>
 8007062:	a101      	add	r1, pc, #4	; (adr r1, 8007068 <_printf_i+0x40>)
 8007064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007068:	080070c1 	.word	0x080070c1
 800706c:	080070d5 	.word	0x080070d5
 8007070:	08007051 	.word	0x08007051
 8007074:	08007051 	.word	0x08007051
 8007078:	08007051 	.word	0x08007051
 800707c:	08007051 	.word	0x08007051
 8007080:	080070d5 	.word	0x080070d5
 8007084:	08007051 	.word	0x08007051
 8007088:	08007051 	.word	0x08007051
 800708c:	08007051 	.word	0x08007051
 8007090:	08007051 	.word	0x08007051
 8007094:	080071d9 	.word	0x080071d9
 8007098:	08007101 	.word	0x08007101
 800709c:	08007193 	.word	0x08007193
 80070a0:	08007051 	.word	0x08007051
 80070a4:	08007051 	.word	0x08007051
 80070a8:	080071fb 	.word	0x080071fb
 80070ac:	08007051 	.word	0x08007051
 80070b0:	08007101 	.word	0x08007101
 80070b4:	08007051 	.word	0x08007051
 80070b8:	08007051 	.word	0x08007051
 80070bc:	0800719b 	.word	0x0800719b
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	1d1a      	adds	r2, r3, #4
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	602a      	str	r2, [r5, #0]
 80070c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070d0:	2301      	movs	r3, #1
 80070d2:	e09f      	b.n	8007214 <_printf_i+0x1ec>
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	682b      	ldr	r3, [r5, #0]
 80070d8:	0607      	lsls	r7, r0, #24
 80070da:	f103 0104 	add.w	r1, r3, #4
 80070de:	6029      	str	r1, [r5, #0]
 80070e0:	d501      	bpl.n	80070e6 <_printf_i+0xbe>
 80070e2:	681e      	ldr	r6, [r3, #0]
 80070e4:	e003      	b.n	80070ee <_printf_i+0xc6>
 80070e6:	0646      	lsls	r6, r0, #25
 80070e8:	d5fb      	bpl.n	80070e2 <_printf_i+0xba>
 80070ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80070ee:	2e00      	cmp	r6, #0
 80070f0:	da03      	bge.n	80070fa <_printf_i+0xd2>
 80070f2:	232d      	movs	r3, #45	; 0x2d
 80070f4:	4276      	negs	r6, r6
 80070f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070fa:	485a      	ldr	r0, [pc, #360]	; (8007264 <_printf_i+0x23c>)
 80070fc:	230a      	movs	r3, #10
 80070fe:	e012      	b.n	8007126 <_printf_i+0xfe>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	6820      	ldr	r0, [r4, #0]
 8007104:	1d19      	adds	r1, r3, #4
 8007106:	6029      	str	r1, [r5, #0]
 8007108:	0605      	lsls	r5, r0, #24
 800710a:	d501      	bpl.n	8007110 <_printf_i+0xe8>
 800710c:	681e      	ldr	r6, [r3, #0]
 800710e:	e002      	b.n	8007116 <_printf_i+0xee>
 8007110:	0641      	lsls	r1, r0, #25
 8007112:	d5fb      	bpl.n	800710c <_printf_i+0xe4>
 8007114:	881e      	ldrh	r6, [r3, #0]
 8007116:	4853      	ldr	r0, [pc, #332]	; (8007264 <_printf_i+0x23c>)
 8007118:	2f6f      	cmp	r7, #111	; 0x6f
 800711a:	bf0c      	ite	eq
 800711c:	2308      	moveq	r3, #8
 800711e:	230a      	movne	r3, #10
 8007120:	2100      	movs	r1, #0
 8007122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007126:	6865      	ldr	r5, [r4, #4]
 8007128:	60a5      	str	r5, [r4, #8]
 800712a:	2d00      	cmp	r5, #0
 800712c:	bfa2      	ittt	ge
 800712e:	6821      	ldrge	r1, [r4, #0]
 8007130:	f021 0104 	bicge.w	r1, r1, #4
 8007134:	6021      	strge	r1, [r4, #0]
 8007136:	b90e      	cbnz	r6, 800713c <_printf_i+0x114>
 8007138:	2d00      	cmp	r5, #0
 800713a:	d04b      	beq.n	80071d4 <_printf_i+0x1ac>
 800713c:	4615      	mov	r5, r2
 800713e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007142:	fb03 6711 	mls	r7, r3, r1, r6
 8007146:	5dc7      	ldrb	r7, [r0, r7]
 8007148:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800714c:	4637      	mov	r7, r6
 800714e:	42bb      	cmp	r3, r7
 8007150:	460e      	mov	r6, r1
 8007152:	d9f4      	bls.n	800713e <_printf_i+0x116>
 8007154:	2b08      	cmp	r3, #8
 8007156:	d10b      	bne.n	8007170 <_printf_i+0x148>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	07de      	lsls	r6, r3, #31
 800715c:	d508      	bpl.n	8007170 <_printf_i+0x148>
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	6861      	ldr	r1, [r4, #4]
 8007162:	4299      	cmp	r1, r3
 8007164:	bfde      	ittt	le
 8007166:	2330      	movle	r3, #48	; 0x30
 8007168:	f805 3c01 	strble.w	r3, [r5, #-1]
 800716c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007170:	1b52      	subs	r2, r2, r5
 8007172:	6122      	str	r2, [r4, #16]
 8007174:	f8cd a000 	str.w	sl, [sp]
 8007178:	464b      	mov	r3, r9
 800717a:	aa03      	add	r2, sp, #12
 800717c:	4621      	mov	r1, r4
 800717e:	4640      	mov	r0, r8
 8007180:	f7ff fee4 	bl	8006f4c <_printf_common>
 8007184:	3001      	adds	r0, #1
 8007186:	d14a      	bne.n	800721e <_printf_i+0x1f6>
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	b004      	add	sp, #16
 800718e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	f043 0320 	orr.w	r3, r3, #32
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	4833      	ldr	r0, [pc, #204]	; (8007268 <_printf_i+0x240>)
 800719c:	2778      	movs	r7, #120	; 0x78
 800719e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	6829      	ldr	r1, [r5, #0]
 80071a6:	061f      	lsls	r7, r3, #24
 80071a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80071ac:	d402      	bmi.n	80071b4 <_printf_i+0x18c>
 80071ae:	065f      	lsls	r7, r3, #25
 80071b0:	bf48      	it	mi
 80071b2:	b2b6      	uxthmi	r6, r6
 80071b4:	07df      	lsls	r7, r3, #31
 80071b6:	bf48      	it	mi
 80071b8:	f043 0320 	orrmi.w	r3, r3, #32
 80071bc:	6029      	str	r1, [r5, #0]
 80071be:	bf48      	it	mi
 80071c0:	6023      	strmi	r3, [r4, #0]
 80071c2:	b91e      	cbnz	r6, 80071cc <_printf_i+0x1a4>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	f023 0320 	bic.w	r3, r3, #32
 80071ca:	6023      	str	r3, [r4, #0]
 80071cc:	2310      	movs	r3, #16
 80071ce:	e7a7      	b.n	8007120 <_printf_i+0xf8>
 80071d0:	4824      	ldr	r0, [pc, #144]	; (8007264 <_printf_i+0x23c>)
 80071d2:	e7e4      	b.n	800719e <_printf_i+0x176>
 80071d4:	4615      	mov	r5, r2
 80071d6:	e7bd      	b.n	8007154 <_printf_i+0x12c>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	6826      	ldr	r6, [r4, #0]
 80071dc:	6961      	ldr	r1, [r4, #20]
 80071de:	1d18      	adds	r0, r3, #4
 80071e0:	6028      	str	r0, [r5, #0]
 80071e2:	0635      	lsls	r5, r6, #24
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	d501      	bpl.n	80071ec <_printf_i+0x1c4>
 80071e8:	6019      	str	r1, [r3, #0]
 80071ea:	e002      	b.n	80071f2 <_printf_i+0x1ca>
 80071ec:	0670      	lsls	r0, r6, #25
 80071ee:	d5fb      	bpl.n	80071e8 <_printf_i+0x1c0>
 80071f0:	8019      	strh	r1, [r3, #0]
 80071f2:	2300      	movs	r3, #0
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	4615      	mov	r5, r2
 80071f8:	e7bc      	b.n	8007174 <_printf_i+0x14c>
 80071fa:	682b      	ldr	r3, [r5, #0]
 80071fc:	1d1a      	adds	r2, r3, #4
 80071fe:	602a      	str	r2, [r5, #0]
 8007200:	681d      	ldr	r5, [r3, #0]
 8007202:	6862      	ldr	r2, [r4, #4]
 8007204:	2100      	movs	r1, #0
 8007206:	4628      	mov	r0, r5
 8007208:	f7f8 ffea 	bl	80001e0 <memchr>
 800720c:	b108      	cbz	r0, 8007212 <_printf_i+0x1ea>
 800720e:	1b40      	subs	r0, r0, r5
 8007210:	6060      	str	r0, [r4, #4]
 8007212:	6863      	ldr	r3, [r4, #4]
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	2300      	movs	r3, #0
 8007218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800721c:	e7aa      	b.n	8007174 <_printf_i+0x14c>
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	462a      	mov	r2, r5
 8007222:	4649      	mov	r1, r9
 8007224:	4640      	mov	r0, r8
 8007226:	47d0      	blx	sl
 8007228:	3001      	adds	r0, #1
 800722a:	d0ad      	beq.n	8007188 <_printf_i+0x160>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	079b      	lsls	r3, r3, #30
 8007230:	d413      	bmi.n	800725a <_printf_i+0x232>
 8007232:	68e0      	ldr	r0, [r4, #12]
 8007234:	9b03      	ldr	r3, [sp, #12]
 8007236:	4298      	cmp	r0, r3
 8007238:	bfb8      	it	lt
 800723a:	4618      	movlt	r0, r3
 800723c:	e7a6      	b.n	800718c <_printf_i+0x164>
 800723e:	2301      	movs	r3, #1
 8007240:	4632      	mov	r2, r6
 8007242:	4649      	mov	r1, r9
 8007244:	4640      	mov	r0, r8
 8007246:	47d0      	blx	sl
 8007248:	3001      	adds	r0, #1
 800724a:	d09d      	beq.n	8007188 <_printf_i+0x160>
 800724c:	3501      	adds	r5, #1
 800724e:	68e3      	ldr	r3, [r4, #12]
 8007250:	9903      	ldr	r1, [sp, #12]
 8007252:	1a5b      	subs	r3, r3, r1
 8007254:	42ab      	cmp	r3, r5
 8007256:	dcf2      	bgt.n	800723e <_printf_i+0x216>
 8007258:	e7eb      	b.n	8007232 <_printf_i+0x20a>
 800725a:	2500      	movs	r5, #0
 800725c:	f104 0619 	add.w	r6, r4, #25
 8007260:	e7f5      	b.n	800724e <_printf_i+0x226>
 8007262:	bf00      	nop
 8007264:	0800935a 	.word	0x0800935a
 8007268:	0800936b 	.word	0x0800936b

0800726c <std>:
 800726c:	2300      	movs	r3, #0
 800726e:	b510      	push	{r4, lr}
 8007270:	4604      	mov	r4, r0
 8007272:	e9c0 3300 	strd	r3, r3, [r0]
 8007276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800727a:	6083      	str	r3, [r0, #8]
 800727c:	8181      	strh	r1, [r0, #12]
 800727e:	6643      	str	r3, [r0, #100]	; 0x64
 8007280:	81c2      	strh	r2, [r0, #14]
 8007282:	6183      	str	r3, [r0, #24]
 8007284:	4619      	mov	r1, r3
 8007286:	2208      	movs	r2, #8
 8007288:	305c      	adds	r0, #92	; 0x5c
 800728a:	f000 f8f4 	bl	8007476 <memset>
 800728e:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <std+0x58>)
 8007290:	6263      	str	r3, [r4, #36]	; 0x24
 8007292:	4b0d      	ldr	r3, [pc, #52]	; (80072c8 <std+0x5c>)
 8007294:	62a3      	str	r3, [r4, #40]	; 0x28
 8007296:	4b0d      	ldr	r3, [pc, #52]	; (80072cc <std+0x60>)
 8007298:	62e3      	str	r3, [r4, #44]	; 0x2c
 800729a:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <std+0x64>)
 800729c:	6323      	str	r3, [r4, #48]	; 0x30
 800729e:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <std+0x68>)
 80072a0:	6224      	str	r4, [r4, #32]
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d006      	beq.n	80072b4 <std+0x48>
 80072a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80072aa:	4294      	cmp	r4, r2
 80072ac:	d002      	beq.n	80072b4 <std+0x48>
 80072ae:	33d0      	adds	r3, #208	; 0xd0
 80072b0:	429c      	cmp	r4, r3
 80072b2:	d105      	bne.n	80072c0 <std+0x54>
 80072b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072bc:	f000 b958 	b.w	8007570 <__retarget_lock_init_recursive>
 80072c0:	bd10      	pop	{r4, pc}
 80072c2:	bf00      	nop
 80072c4:	080073f1 	.word	0x080073f1
 80072c8:	08007413 	.word	0x08007413
 80072cc:	0800744b 	.word	0x0800744b
 80072d0:	0800746f 	.word	0x0800746f
 80072d4:	2000063c 	.word	0x2000063c

080072d8 <stdio_exit_handler>:
 80072d8:	4a02      	ldr	r2, [pc, #8]	; (80072e4 <stdio_exit_handler+0xc>)
 80072da:	4903      	ldr	r1, [pc, #12]	; (80072e8 <stdio_exit_handler+0x10>)
 80072dc:	4803      	ldr	r0, [pc, #12]	; (80072ec <stdio_exit_handler+0x14>)
 80072de:	f000 b869 	b.w	80073b4 <_fwalk_sglue>
 80072e2:	bf00      	nop
 80072e4:	2000009c 	.word	0x2000009c
 80072e8:	08008c71 	.word	0x08008c71
 80072ec:	200000a8 	.word	0x200000a8

080072f0 <cleanup_stdio>:
 80072f0:	6841      	ldr	r1, [r0, #4]
 80072f2:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <cleanup_stdio+0x34>)
 80072f4:	4299      	cmp	r1, r3
 80072f6:	b510      	push	{r4, lr}
 80072f8:	4604      	mov	r4, r0
 80072fa:	d001      	beq.n	8007300 <cleanup_stdio+0x10>
 80072fc:	f001 fcb8 	bl	8008c70 <_fflush_r>
 8007300:	68a1      	ldr	r1, [r4, #8]
 8007302:	4b09      	ldr	r3, [pc, #36]	; (8007328 <cleanup_stdio+0x38>)
 8007304:	4299      	cmp	r1, r3
 8007306:	d002      	beq.n	800730e <cleanup_stdio+0x1e>
 8007308:	4620      	mov	r0, r4
 800730a:	f001 fcb1 	bl	8008c70 <_fflush_r>
 800730e:	68e1      	ldr	r1, [r4, #12]
 8007310:	4b06      	ldr	r3, [pc, #24]	; (800732c <cleanup_stdio+0x3c>)
 8007312:	4299      	cmp	r1, r3
 8007314:	d004      	beq.n	8007320 <cleanup_stdio+0x30>
 8007316:	4620      	mov	r0, r4
 8007318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800731c:	f001 bca8 	b.w	8008c70 <_fflush_r>
 8007320:	bd10      	pop	{r4, pc}
 8007322:	bf00      	nop
 8007324:	2000063c 	.word	0x2000063c
 8007328:	200006a4 	.word	0x200006a4
 800732c:	2000070c 	.word	0x2000070c

08007330 <global_stdio_init.part.0>:
 8007330:	b510      	push	{r4, lr}
 8007332:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <global_stdio_init.part.0+0x30>)
 8007334:	4c0b      	ldr	r4, [pc, #44]	; (8007364 <global_stdio_init.part.0+0x34>)
 8007336:	4a0c      	ldr	r2, [pc, #48]	; (8007368 <global_stdio_init.part.0+0x38>)
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	4620      	mov	r0, r4
 800733c:	2200      	movs	r2, #0
 800733e:	2104      	movs	r1, #4
 8007340:	f7ff ff94 	bl	800726c <std>
 8007344:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007348:	2201      	movs	r2, #1
 800734a:	2109      	movs	r1, #9
 800734c:	f7ff ff8e 	bl	800726c <std>
 8007350:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007354:	2202      	movs	r2, #2
 8007356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800735a:	2112      	movs	r1, #18
 800735c:	f7ff bf86 	b.w	800726c <std>
 8007360:	20000774 	.word	0x20000774
 8007364:	2000063c 	.word	0x2000063c
 8007368:	080072d9 	.word	0x080072d9

0800736c <__sfp_lock_acquire>:
 800736c:	4801      	ldr	r0, [pc, #4]	; (8007374 <__sfp_lock_acquire+0x8>)
 800736e:	f000 b900 	b.w	8007572 <__retarget_lock_acquire_recursive>
 8007372:	bf00      	nop
 8007374:	2000077d 	.word	0x2000077d

08007378 <__sfp_lock_release>:
 8007378:	4801      	ldr	r0, [pc, #4]	; (8007380 <__sfp_lock_release+0x8>)
 800737a:	f000 b8fb 	b.w	8007574 <__retarget_lock_release_recursive>
 800737e:	bf00      	nop
 8007380:	2000077d 	.word	0x2000077d

08007384 <__sinit>:
 8007384:	b510      	push	{r4, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	f7ff fff0 	bl	800736c <__sfp_lock_acquire>
 800738c:	6a23      	ldr	r3, [r4, #32]
 800738e:	b11b      	cbz	r3, 8007398 <__sinit+0x14>
 8007390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007394:	f7ff bff0 	b.w	8007378 <__sfp_lock_release>
 8007398:	4b04      	ldr	r3, [pc, #16]	; (80073ac <__sinit+0x28>)
 800739a:	6223      	str	r3, [r4, #32]
 800739c:	4b04      	ldr	r3, [pc, #16]	; (80073b0 <__sinit+0x2c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f5      	bne.n	8007390 <__sinit+0xc>
 80073a4:	f7ff ffc4 	bl	8007330 <global_stdio_init.part.0>
 80073a8:	e7f2      	b.n	8007390 <__sinit+0xc>
 80073aa:	bf00      	nop
 80073ac:	080072f1 	.word	0x080072f1
 80073b0:	20000774 	.word	0x20000774

080073b4 <_fwalk_sglue>:
 80073b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b8:	4607      	mov	r7, r0
 80073ba:	4688      	mov	r8, r1
 80073bc:	4614      	mov	r4, r2
 80073be:	2600      	movs	r6, #0
 80073c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073c4:	f1b9 0901 	subs.w	r9, r9, #1
 80073c8:	d505      	bpl.n	80073d6 <_fwalk_sglue+0x22>
 80073ca:	6824      	ldr	r4, [r4, #0]
 80073cc:	2c00      	cmp	r4, #0
 80073ce:	d1f7      	bne.n	80073c0 <_fwalk_sglue+0xc>
 80073d0:	4630      	mov	r0, r6
 80073d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d907      	bls.n	80073ec <_fwalk_sglue+0x38>
 80073dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073e0:	3301      	adds	r3, #1
 80073e2:	d003      	beq.n	80073ec <_fwalk_sglue+0x38>
 80073e4:	4629      	mov	r1, r5
 80073e6:	4638      	mov	r0, r7
 80073e8:	47c0      	blx	r8
 80073ea:	4306      	orrs	r6, r0
 80073ec:	3568      	adds	r5, #104	; 0x68
 80073ee:	e7e9      	b.n	80073c4 <_fwalk_sglue+0x10>

080073f0 <__sread>:
 80073f0:	b510      	push	{r4, lr}
 80073f2:	460c      	mov	r4, r1
 80073f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f8:	f000 f86c 	bl	80074d4 <_read_r>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	bfab      	itete	ge
 8007400:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007402:	89a3      	ldrhlt	r3, [r4, #12]
 8007404:	181b      	addge	r3, r3, r0
 8007406:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800740a:	bfac      	ite	ge
 800740c:	6563      	strge	r3, [r4, #84]	; 0x54
 800740e:	81a3      	strhlt	r3, [r4, #12]
 8007410:	bd10      	pop	{r4, pc}

08007412 <__swrite>:
 8007412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007416:	461f      	mov	r7, r3
 8007418:	898b      	ldrh	r3, [r1, #12]
 800741a:	05db      	lsls	r3, r3, #23
 800741c:	4605      	mov	r5, r0
 800741e:	460c      	mov	r4, r1
 8007420:	4616      	mov	r6, r2
 8007422:	d505      	bpl.n	8007430 <__swrite+0x1e>
 8007424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007428:	2302      	movs	r3, #2
 800742a:	2200      	movs	r2, #0
 800742c:	f000 f840 	bl	80074b0 <_lseek_r>
 8007430:	89a3      	ldrh	r3, [r4, #12]
 8007432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800743a:	81a3      	strh	r3, [r4, #12]
 800743c:	4632      	mov	r2, r6
 800743e:	463b      	mov	r3, r7
 8007440:	4628      	mov	r0, r5
 8007442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007446:	f000 b857 	b.w	80074f8 <_write_r>

0800744a <__sseek>:
 800744a:	b510      	push	{r4, lr}
 800744c:	460c      	mov	r4, r1
 800744e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007452:	f000 f82d 	bl	80074b0 <_lseek_r>
 8007456:	1c43      	adds	r3, r0, #1
 8007458:	89a3      	ldrh	r3, [r4, #12]
 800745a:	bf15      	itete	ne
 800745c:	6560      	strne	r0, [r4, #84]	; 0x54
 800745e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007462:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007466:	81a3      	strheq	r3, [r4, #12]
 8007468:	bf18      	it	ne
 800746a:	81a3      	strhne	r3, [r4, #12]
 800746c:	bd10      	pop	{r4, pc}

0800746e <__sclose>:
 800746e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007472:	f000 b80d 	b.w	8007490 <_close_r>

08007476 <memset>:
 8007476:	4402      	add	r2, r0
 8007478:	4603      	mov	r3, r0
 800747a:	4293      	cmp	r3, r2
 800747c:	d100      	bne.n	8007480 <memset+0xa>
 800747e:	4770      	bx	lr
 8007480:	f803 1b01 	strb.w	r1, [r3], #1
 8007484:	e7f9      	b.n	800747a <memset+0x4>
	...

08007488 <_localeconv_r>:
 8007488:	4800      	ldr	r0, [pc, #0]	; (800748c <_localeconv_r+0x4>)
 800748a:	4770      	bx	lr
 800748c:	200001e8 	.word	0x200001e8

08007490 <_close_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4d06      	ldr	r5, [pc, #24]	; (80074ac <_close_r+0x1c>)
 8007494:	2300      	movs	r3, #0
 8007496:	4604      	mov	r4, r0
 8007498:	4608      	mov	r0, r1
 800749a:	602b      	str	r3, [r5, #0]
 800749c:	f7fa fd89 	bl	8001fb2 <_close>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d102      	bne.n	80074aa <_close_r+0x1a>
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	b103      	cbz	r3, 80074aa <_close_r+0x1a>
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	20000778 	.word	0x20000778

080074b0 <_lseek_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d07      	ldr	r5, [pc, #28]	; (80074d0 <_lseek_r+0x20>)
 80074b4:	4604      	mov	r4, r0
 80074b6:	4608      	mov	r0, r1
 80074b8:	4611      	mov	r1, r2
 80074ba:	2200      	movs	r2, #0
 80074bc:	602a      	str	r2, [r5, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	f7fa fd9e 	bl	8002000 <_lseek>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_lseek_r+0x1e>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_lseek_r+0x1e>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	20000778 	.word	0x20000778

080074d4 <_read_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4d07      	ldr	r5, [pc, #28]	; (80074f4 <_read_r+0x20>)
 80074d8:	4604      	mov	r4, r0
 80074da:	4608      	mov	r0, r1
 80074dc:	4611      	mov	r1, r2
 80074de:	2200      	movs	r2, #0
 80074e0:	602a      	str	r2, [r5, #0]
 80074e2:	461a      	mov	r2, r3
 80074e4:	f7fa fd2c 	bl	8001f40 <_read>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_read_r+0x1e>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_read_r+0x1e>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	20000778 	.word	0x20000778

080074f8 <_write_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4d07      	ldr	r5, [pc, #28]	; (8007518 <_write_r+0x20>)
 80074fc:	4604      	mov	r4, r0
 80074fe:	4608      	mov	r0, r1
 8007500:	4611      	mov	r1, r2
 8007502:	2200      	movs	r2, #0
 8007504:	602a      	str	r2, [r5, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	f7fa fd37 	bl	8001f7a <_write>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d102      	bne.n	8007516 <_write_r+0x1e>
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	b103      	cbz	r3, 8007516 <_write_r+0x1e>
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	bd38      	pop	{r3, r4, r5, pc}
 8007518:	20000778 	.word	0x20000778

0800751c <__errno>:
 800751c:	4b01      	ldr	r3, [pc, #4]	; (8007524 <__errno+0x8>)
 800751e:	6818      	ldr	r0, [r3, #0]
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	200000f4 	.word	0x200000f4

08007528 <__libc_init_array>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	4d0d      	ldr	r5, [pc, #52]	; (8007560 <__libc_init_array+0x38>)
 800752c:	4c0d      	ldr	r4, [pc, #52]	; (8007564 <__libc_init_array+0x3c>)
 800752e:	1b64      	subs	r4, r4, r5
 8007530:	10a4      	asrs	r4, r4, #2
 8007532:	2600      	movs	r6, #0
 8007534:	42a6      	cmp	r6, r4
 8007536:	d109      	bne.n	800754c <__libc_init_array+0x24>
 8007538:	4d0b      	ldr	r5, [pc, #44]	; (8007568 <__libc_init_array+0x40>)
 800753a:	4c0c      	ldr	r4, [pc, #48]	; (800756c <__libc_init_array+0x44>)
 800753c:	f001 feec 	bl	8009318 <_init>
 8007540:	1b64      	subs	r4, r4, r5
 8007542:	10a4      	asrs	r4, r4, #2
 8007544:	2600      	movs	r6, #0
 8007546:	42a6      	cmp	r6, r4
 8007548:	d105      	bne.n	8007556 <__libc_init_array+0x2e>
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007550:	4798      	blx	r3
 8007552:	3601      	adds	r6, #1
 8007554:	e7ee      	b.n	8007534 <__libc_init_array+0xc>
 8007556:	f855 3b04 	ldr.w	r3, [r5], #4
 800755a:	4798      	blx	r3
 800755c:	3601      	adds	r6, #1
 800755e:	e7f2      	b.n	8007546 <__libc_init_array+0x1e>
 8007560:	080096c4 	.word	0x080096c4
 8007564:	080096c4 	.word	0x080096c4
 8007568:	080096c4 	.word	0x080096c4
 800756c:	080096c8 	.word	0x080096c8

08007570 <__retarget_lock_init_recursive>:
 8007570:	4770      	bx	lr

08007572 <__retarget_lock_acquire_recursive>:
 8007572:	4770      	bx	lr

08007574 <__retarget_lock_release_recursive>:
 8007574:	4770      	bx	lr

08007576 <quorem>:
 8007576:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757a:	6903      	ldr	r3, [r0, #16]
 800757c:	690c      	ldr	r4, [r1, #16]
 800757e:	42a3      	cmp	r3, r4
 8007580:	4607      	mov	r7, r0
 8007582:	db7e      	blt.n	8007682 <quorem+0x10c>
 8007584:	3c01      	subs	r4, #1
 8007586:	f101 0814 	add.w	r8, r1, #20
 800758a:	f100 0514 	add.w	r5, r0, #20
 800758e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007592:	9301      	str	r3, [sp, #4]
 8007594:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800759c:	3301      	adds	r3, #1
 800759e:	429a      	cmp	r2, r3
 80075a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80075ac:	d331      	bcc.n	8007612 <quorem+0x9c>
 80075ae:	f04f 0e00 	mov.w	lr, #0
 80075b2:	4640      	mov	r0, r8
 80075b4:	46ac      	mov	ip, r5
 80075b6:	46f2      	mov	sl, lr
 80075b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80075bc:	b293      	uxth	r3, r2
 80075be:	fb06 e303 	mla	r3, r6, r3, lr
 80075c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075c6:	0c1a      	lsrs	r2, r3, #16
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	ebaa 0303 	sub.w	r3, sl, r3
 80075ce:	f8dc a000 	ldr.w	sl, [ip]
 80075d2:	fa13 f38a 	uxtah	r3, r3, sl
 80075d6:	fb06 220e 	mla	r2, r6, lr, r2
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	9b00      	ldr	r3, [sp, #0]
 80075de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075e2:	b292      	uxth	r2, r2
 80075e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80075e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80075f0:	4581      	cmp	r9, r0
 80075f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075f6:	f84c 3b04 	str.w	r3, [ip], #4
 80075fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80075fe:	d2db      	bcs.n	80075b8 <quorem+0x42>
 8007600:	f855 300b 	ldr.w	r3, [r5, fp]
 8007604:	b92b      	cbnz	r3, 8007612 <quorem+0x9c>
 8007606:	9b01      	ldr	r3, [sp, #4]
 8007608:	3b04      	subs	r3, #4
 800760a:	429d      	cmp	r5, r3
 800760c:	461a      	mov	r2, r3
 800760e:	d32c      	bcc.n	800766a <quorem+0xf4>
 8007610:	613c      	str	r4, [r7, #16]
 8007612:	4638      	mov	r0, r7
 8007614:	f001 f9a6 	bl	8008964 <__mcmp>
 8007618:	2800      	cmp	r0, #0
 800761a:	db22      	blt.n	8007662 <quorem+0xec>
 800761c:	3601      	adds	r6, #1
 800761e:	4629      	mov	r1, r5
 8007620:	2000      	movs	r0, #0
 8007622:	f858 2b04 	ldr.w	r2, [r8], #4
 8007626:	f8d1 c000 	ldr.w	ip, [r1]
 800762a:	b293      	uxth	r3, r2
 800762c:	1ac3      	subs	r3, r0, r3
 800762e:	0c12      	lsrs	r2, r2, #16
 8007630:	fa13 f38c 	uxtah	r3, r3, ip
 8007634:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007638:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800763c:	b29b      	uxth	r3, r3
 800763e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007642:	45c1      	cmp	r9, r8
 8007644:	f841 3b04 	str.w	r3, [r1], #4
 8007648:	ea4f 4022 	mov.w	r0, r2, asr #16
 800764c:	d2e9      	bcs.n	8007622 <quorem+0xac>
 800764e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007652:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007656:	b922      	cbnz	r2, 8007662 <quorem+0xec>
 8007658:	3b04      	subs	r3, #4
 800765a:	429d      	cmp	r5, r3
 800765c:	461a      	mov	r2, r3
 800765e:	d30a      	bcc.n	8007676 <quorem+0x100>
 8007660:	613c      	str	r4, [r7, #16]
 8007662:	4630      	mov	r0, r6
 8007664:	b003      	add	sp, #12
 8007666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766a:	6812      	ldr	r2, [r2, #0]
 800766c:	3b04      	subs	r3, #4
 800766e:	2a00      	cmp	r2, #0
 8007670:	d1ce      	bne.n	8007610 <quorem+0x9a>
 8007672:	3c01      	subs	r4, #1
 8007674:	e7c9      	b.n	800760a <quorem+0x94>
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	3b04      	subs	r3, #4
 800767a:	2a00      	cmp	r2, #0
 800767c:	d1f0      	bne.n	8007660 <quorem+0xea>
 800767e:	3c01      	subs	r4, #1
 8007680:	e7eb      	b.n	800765a <quorem+0xe4>
 8007682:	2000      	movs	r0, #0
 8007684:	e7ee      	b.n	8007664 <quorem+0xee>
	...

08007688 <_dtoa_r>:
 8007688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768c:	ed2d 8b04 	vpush	{d8-d9}
 8007690:	69c5      	ldr	r5, [r0, #28]
 8007692:	b093      	sub	sp, #76	; 0x4c
 8007694:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007698:	ec57 6b10 	vmov	r6, r7, d0
 800769c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076a0:	9107      	str	r1, [sp, #28]
 80076a2:	4604      	mov	r4, r0
 80076a4:	920a      	str	r2, [sp, #40]	; 0x28
 80076a6:	930d      	str	r3, [sp, #52]	; 0x34
 80076a8:	b975      	cbnz	r5, 80076c8 <_dtoa_r+0x40>
 80076aa:	2010      	movs	r0, #16
 80076ac:	f000 fe2a 	bl	8008304 <malloc>
 80076b0:	4602      	mov	r2, r0
 80076b2:	61e0      	str	r0, [r4, #28]
 80076b4:	b920      	cbnz	r0, 80076c0 <_dtoa_r+0x38>
 80076b6:	4bae      	ldr	r3, [pc, #696]	; (8007970 <_dtoa_r+0x2e8>)
 80076b8:	21ef      	movs	r1, #239	; 0xef
 80076ba:	48ae      	ldr	r0, [pc, #696]	; (8007974 <_dtoa_r+0x2ec>)
 80076bc:	f001 fb1e 	bl	8008cfc <__assert_func>
 80076c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076c4:	6005      	str	r5, [r0, #0]
 80076c6:	60c5      	str	r5, [r0, #12]
 80076c8:	69e3      	ldr	r3, [r4, #28]
 80076ca:	6819      	ldr	r1, [r3, #0]
 80076cc:	b151      	cbz	r1, 80076e4 <_dtoa_r+0x5c>
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	604a      	str	r2, [r1, #4]
 80076d2:	2301      	movs	r3, #1
 80076d4:	4093      	lsls	r3, r2
 80076d6:	608b      	str	r3, [r1, #8]
 80076d8:	4620      	mov	r0, r4
 80076da:	f000 ff07 	bl	80084ec <_Bfree>
 80076de:	69e3      	ldr	r3, [r4, #28]
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	1e3b      	subs	r3, r7, #0
 80076e6:	bfbb      	ittet	lt
 80076e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076ec:	9303      	strlt	r3, [sp, #12]
 80076ee:	2300      	movge	r3, #0
 80076f0:	2201      	movlt	r2, #1
 80076f2:	bfac      	ite	ge
 80076f4:	f8c8 3000 	strge.w	r3, [r8]
 80076f8:	f8c8 2000 	strlt.w	r2, [r8]
 80076fc:	4b9e      	ldr	r3, [pc, #632]	; (8007978 <_dtoa_r+0x2f0>)
 80076fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007702:	ea33 0308 	bics.w	r3, r3, r8
 8007706:	d11b      	bne.n	8007740 <_dtoa_r+0xb8>
 8007708:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800770a:	f242 730f 	movw	r3, #9999	; 0x270f
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007714:	4333      	orrs	r3, r6
 8007716:	f000 8593 	beq.w	8008240 <_dtoa_r+0xbb8>
 800771a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800771c:	b963      	cbnz	r3, 8007738 <_dtoa_r+0xb0>
 800771e:	4b97      	ldr	r3, [pc, #604]	; (800797c <_dtoa_r+0x2f4>)
 8007720:	e027      	b.n	8007772 <_dtoa_r+0xea>
 8007722:	4b97      	ldr	r3, [pc, #604]	; (8007980 <_dtoa_r+0x2f8>)
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	3308      	adds	r3, #8
 8007728:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	9800      	ldr	r0, [sp, #0]
 800772e:	b013      	add	sp, #76	; 0x4c
 8007730:	ecbd 8b04 	vpop	{d8-d9}
 8007734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007738:	4b90      	ldr	r3, [pc, #576]	; (800797c <_dtoa_r+0x2f4>)
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	3303      	adds	r3, #3
 800773e:	e7f3      	b.n	8007728 <_dtoa_r+0xa0>
 8007740:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007744:	2200      	movs	r2, #0
 8007746:	ec51 0b17 	vmov	r0, r1, d7
 800774a:	eeb0 8a47 	vmov.f32	s16, s14
 800774e:	eef0 8a67 	vmov.f32	s17, s15
 8007752:	2300      	movs	r3, #0
 8007754:	f7f9 f9c0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007758:	4681      	mov	r9, r0
 800775a:	b160      	cbz	r0, 8007776 <_dtoa_r+0xee>
 800775c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800775e:	2301      	movs	r3, #1
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 8568 	beq.w	800823a <_dtoa_r+0xbb2>
 800776a:	4b86      	ldr	r3, [pc, #536]	; (8007984 <_dtoa_r+0x2fc>)
 800776c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	3b01      	subs	r3, #1
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	e7da      	b.n	800772c <_dtoa_r+0xa4>
 8007776:	aa10      	add	r2, sp, #64	; 0x40
 8007778:	a911      	add	r1, sp, #68	; 0x44
 800777a:	4620      	mov	r0, r4
 800777c:	eeb0 0a48 	vmov.f32	s0, s16
 8007780:	eef0 0a68 	vmov.f32	s1, s17
 8007784:	f001 f994 	bl	8008ab0 <__d2b>
 8007788:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800778c:	4682      	mov	sl, r0
 800778e:	2d00      	cmp	r5, #0
 8007790:	d07f      	beq.n	8007892 <_dtoa_r+0x20a>
 8007792:	ee18 3a90 	vmov	r3, s17
 8007796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800779a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800779e:	ec51 0b18 	vmov	r0, r1, d8
 80077a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80077a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80077ae:	4619      	mov	r1, r3
 80077b0:	2200      	movs	r2, #0
 80077b2:	4b75      	ldr	r3, [pc, #468]	; (8007988 <_dtoa_r+0x300>)
 80077b4:	f7f8 fd70 	bl	8000298 <__aeabi_dsub>
 80077b8:	a367      	add	r3, pc, #412	; (adr r3, 8007958 <_dtoa_r+0x2d0>)
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f7f8 ff23 	bl	8000608 <__aeabi_dmul>
 80077c2:	a367      	add	r3, pc, #412	; (adr r3, 8007960 <_dtoa_r+0x2d8>)
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	f7f8 fd68 	bl	800029c <__adddf3>
 80077cc:	4606      	mov	r6, r0
 80077ce:	4628      	mov	r0, r5
 80077d0:	460f      	mov	r7, r1
 80077d2:	f7f8 feaf 	bl	8000534 <__aeabi_i2d>
 80077d6:	a364      	add	r3, pc, #400	; (adr r3, 8007968 <_dtoa_r+0x2e0>)
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	f7f8 ff14 	bl	8000608 <__aeabi_dmul>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4630      	mov	r0, r6
 80077e6:	4639      	mov	r1, r7
 80077e8:	f7f8 fd58 	bl	800029c <__adddf3>
 80077ec:	4606      	mov	r6, r0
 80077ee:	460f      	mov	r7, r1
 80077f0:	f7f9 f9ba 	bl	8000b68 <__aeabi_d2iz>
 80077f4:	2200      	movs	r2, #0
 80077f6:	4683      	mov	fp, r0
 80077f8:	2300      	movs	r3, #0
 80077fa:	4630      	mov	r0, r6
 80077fc:	4639      	mov	r1, r7
 80077fe:	f7f9 f975 	bl	8000aec <__aeabi_dcmplt>
 8007802:	b148      	cbz	r0, 8007818 <_dtoa_r+0x190>
 8007804:	4658      	mov	r0, fp
 8007806:	f7f8 fe95 	bl	8000534 <__aeabi_i2d>
 800780a:	4632      	mov	r2, r6
 800780c:	463b      	mov	r3, r7
 800780e:	f7f9 f963 	bl	8000ad8 <__aeabi_dcmpeq>
 8007812:	b908      	cbnz	r0, 8007818 <_dtoa_r+0x190>
 8007814:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007818:	f1bb 0f16 	cmp.w	fp, #22
 800781c:	d857      	bhi.n	80078ce <_dtoa_r+0x246>
 800781e:	4b5b      	ldr	r3, [pc, #364]	; (800798c <_dtoa_r+0x304>)
 8007820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	ec51 0b18 	vmov	r0, r1, d8
 800782c:	f7f9 f95e 	bl	8000aec <__aeabi_dcmplt>
 8007830:	2800      	cmp	r0, #0
 8007832:	d04e      	beq.n	80078d2 <_dtoa_r+0x24a>
 8007834:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007838:	2300      	movs	r3, #0
 800783a:	930c      	str	r3, [sp, #48]	; 0x30
 800783c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800783e:	1b5b      	subs	r3, r3, r5
 8007840:	1e5a      	subs	r2, r3, #1
 8007842:	bf45      	ittet	mi
 8007844:	f1c3 0301 	rsbmi	r3, r3, #1
 8007848:	9305      	strmi	r3, [sp, #20]
 800784a:	2300      	movpl	r3, #0
 800784c:	2300      	movmi	r3, #0
 800784e:	9206      	str	r2, [sp, #24]
 8007850:	bf54      	ite	pl
 8007852:	9305      	strpl	r3, [sp, #20]
 8007854:	9306      	strmi	r3, [sp, #24]
 8007856:	f1bb 0f00 	cmp.w	fp, #0
 800785a:	db3c      	blt.n	80078d6 <_dtoa_r+0x24e>
 800785c:	9b06      	ldr	r3, [sp, #24]
 800785e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007862:	445b      	add	r3, fp
 8007864:	9306      	str	r3, [sp, #24]
 8007866:	2300      	movs	r3, #0
 8007868:	9308      	str	r3, [sp, #32]
 800786a:	9b07      	ldr	r3, [sp, #28]
 800786c:	2b09      	cmp	r3, #9
 800786e:	d868      	bhi.n	8007942 <_dtoa_r+0x2ba>
 8007870:	2b05      	cmp	r3, #5
 8007872:	bfc4      	itt	gt
 8007874:	3b04      	subgt	r3, #4
 8007876:	9307      	strgt	r3, [sp, #28]
 8007878:	9b07      	ldr	r3, [sp, #28]
 800787a:	f1a3 0302 	sub.w	r3, r3, #2
 800787e:	bfcc      	ite	gt
 8007880:	2500      	movgt	r5, #0
 8007882:	2501      	movle	r5, #1
 8007884:	2b03      	cmp	r3, #3
 8007886:	f200 8085 	bhi.w	8007994 <_dtoa_r+0x30c>
 800788a:	e8df f003 	tbb	[pc, r3]
 800788e:	3b2e      	.short	0x3b2e
 8007890:	5839      	.short	0x5839
 8007892:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007896:	441d      	add	r5, r3
 8007898:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800789c:	2b20      	cmp	r3, #32
 800789e:	bfc1      	itttt	gt
 80078a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80078a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80078ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80078b0:	bfd6      	itet	le
 80078b2:	f1c3 0320 	rsble	r3, r3, #32
 80078b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80078ba:	fa06 f003 	lslle.w	r0, r6, r3
 80078be:	f7f8 fe29 	bl	8000514 <__aeabi_ui2d>
 80078c2:	2201      	movs	r2, #1
 80078c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80078c8:	3d01      	subs	r5, #1
 80078ca:	920e      	str	r2, [sp, #56]	; 0x38
 80078cc:	e76f      	b.n	80077ae <_dtoa_r+0x126>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e7b3      	b.n	800783a <_dtoa_r+0x1b2>
 80078d2:	900c      	str	r0, [sp, #48]	; 0x30
 80078d4:	e7b2      	b.n	800783c <_dtoa_r+0x1b4>
 80078d6:	9b05      	ldr	r3, [sp, #20]
 80078d8:	eba3 030b 	sub.w	r3, r3, fp
 80078dc:	9305      	str	r3, [sp, #20]
 80078de:	f1cb 0300 	rsb	r3, fp, #0
 80078e2:	9308      	str	r3, [sp, #32]
 80078e4:	2300      	movs	r3, #0
 80078e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80078e8:	e7bf      	b.n	800786a <_dtoa_r+0x1e2>
 80078ea:	2300      	movs	r3, #0
 80078ec:	9309      	str	r3, [sp, #36]	; 0x24
 80078ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	dc52      	bgt.n	800799a <_dtoa_r+0x312>
 80078f4:	2301      	movs	r3, #1
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	9304      	str	r3, [sp, #16]
 80078fa:	461a      	mov	r2, r3
 80078fc:	920a      	str	r2, [sp, #40]	; 0x28
 80078fe:	e00b      	b.n	8007918 <_dtoa_r+0x290>
 8007900:	2301      	movs	r3, #1
 8007902:	e7f3      	b.n	80078ec <_dtoa_r+0x264>
 8007904:	2300      	movs	r3, #0
 8007906:	9309      	str	r3, [sp, #36]	; 0x24
 8007908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800790a:	445b      	add	r3, fp
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	3301      	adds	r3, #1
 8007910:	2b01      	cmp	r3, #1
 8007912:	9304      	str	r3, [sp, #16]
 8007914:	bfb8      	it	lt
 8007916:	2301      	movlt	r3, #1
 8007918:	69e0      	ldr	r0, [r4, #28]
 800791a:	2100      	movs	r1, #0
 800791c:	2204      	movs	r2, #4
 800791e:	f102 0614 	add.w	r6, r2, #20
 8007922:	429e      	cmp	r6, r3
 8007924:	d93d      	bls.n	80079a2 <_dtoa_r+0x31a>
 8007926:	6041      	str	r1, [r0, #4]
 8007928:	4620      	mov	r0, r4
 800792a:	f000 fd9f 	bl	800846c <_Balloc>
 800792e:	9000      	str	r0, [sp, #0]
 8007930:	2800      	cmp	r0, #0
 8007932:	d139      	bne.n	80079a8 <_dtoa_r+0x320>
 8007934:	4b16      	ldr	r3, [pc, #88]	; (8007990 <_dtoa_r+0x308>)
 8007936:	4602      	mov	r2, r0
 8007938:	f240 11af 	movw	r1, #431	; 0x1af
 800793c:	e6bd      	b.n	80076ba <_dtoa_r+0x32>
 800793e:	2301      	movs	r3, #1
 8007940:	e7e1      	b.n	8007906 <_dtoa_r+0x27e>
 8007942:	2501      	movs	r5, #1
 8007944:	2300      	movs	r3, #0
 8007946:	9307      	str	r3, [sp, #28]
 8007948:	9509      	str	r5, [sp, #36]	; 0x24
 800794a:	f04f 33ff 	mov.w	r3, #4294967295
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	9304      	str	r3, [sp, #16]
 8007952:	2200      	movs	r2, #0
 8007954:	2312      	movs	r3, #18
 8007956:	e7d1      	b.n	80078fc <_dtoa_r+0x274>
 8007958:	636f4361 	.word	0x636f4361
 800795c:	3fd287a7 	.word	0x3fd287a7
 8007960:	8b60c8b3 	.word	0x8b60c8b3
 8007964:	3fc68a28 	.word	0x3fc68a28
 8007968:	509f79fb 	.word	0x509f79fb
 800796c:	3fd34413 	.word	0x3fd34413
 8007970:	08009389 	.word	0x08009389
 8007974:	080093a0 	.word	0x080093a0
 8007978:	7ff00000 	.word	0x7ff00000
 800797c:	08009385 	.word	0x08009385
 8007980:	0800937c 	.word	0x0800937c
 8007984:	08009359 	.word	0x08009359
 8007988:	3ff80000 	.word	0x3ff80000
 800798c:	08009490 	.word	0x08009490
 8007990:	080093f8 	.word	0x080093f8
 8007994:	2301      	movs	r3, #1
 8007996:	9309      	str	r3, [sp, #36]	; 0x24
 8007998:	e7d7      	b.n	800794a <_dtoa_r+0x2c2>
 800799a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	9304      	str	r3, [sp, #16]
 80079a0:	e7ba      	b.n	8007918 <_dtoa_r+0x290>
 80079a2:	3101      	adds	r1, #1
 80079a4:	0052      	lsls	r2, r2, #1
 80079a6:	e7ba      	b.n	800791e <_dtoa_r+0x296>
 80079a8:	69e3      	ldr	r3, [r4, #28]
 80079aa:	9a00      	ldr	r2, [sp, #0]
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	2b0e      	cmp	r3, #14
 80079b2:	f200 80a8 	bhi.w	8007b06 <_dtoa_r+0x47e>
 80079b6:	2d00      	cmp	r5, #0
 80079b8:	f000 80a5 	beq.w	8007b06 <_dtoa_r+0x47e>
 80079bc:	f1bb 0f00 	cmp.w	fp, #0
 80079c0:	dd38      	ble.n	8007a34 <_dtoa_r+0x3ac>
 80079c2:	4bc0      	ldr	r3, [pc, #768]	; (8007cc4 <_dtoa_r+0x63c>)
 80079c4:	f00b 020f 	and.w	r2, fp, #15
 80079c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80079d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80079d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80079d8:	d019      	beq.n	8007a0e <_dtoa_r+0x386>
 80079da:	4bbb      	ldr	r3, [pc, #748]	; (8007cc8 <_dtoa_r+0x640>)
 80079dc:	ec51 0b18 	vmov	r0, r1, d8
 80079e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079e4:	f7f8 ff3a 	bl	800085c <__aeabi_ddiv>
 80079e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079ec:	f008 080f 	and.w	r8, r8, #15
 80079f0:	2503      	movs	r5, #3
 80079f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007cc8 <_dtoa_r+0x640>
 80079f6:	f1b8 0f00 	cmp.w	r8, #0
 80079fa:	d10a      	bne.n	8007a12 <_dtoa_r+0x38a>
 80079fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a00:	4632      	mov	r2, r6
 8007a02:	463b      	mov	r3, r7
 8007a04:	f7f8 ff2a 	bl	800085c <__aeabi_ddiv>
 8007a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a0c:	e02b      	b.n	8007a66 <_dtoa_r+0x3de>
 8007a0e:	2502      	movs	r5, #2
 8007a10:	e7ef      	b.n	80079f2 <_dtoa_r+0x36a>
 8007a12:	f018 0f01 	tst.w	r8, #1
 8007a16:	d008      	beq.n	8007a2a <_dtoa_r+0x3a2>
 8007a18:	4630      	mov	r0, r6
 8007a1a:	4639      	mov	r1, r7
 8007a1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a20:	f7f8 fdf2 	bl	8000608 <__aeabi_dmul>
 8007a24:	3501      	adds	r5, #1
 8007a26:	4606      	mov	r6, r0
 8007a28:	460f      	mov	r7, r1
 8007a2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a2e:	f109 0908 	add.w	r9, r9, #8
 8007a32:	e7e0      	b.n	80079f6 <_dtoa_r+0x36e>
 8007a34:	f000 809f 	beq.w	8007b76 <_dtoa_r+0x4ee>
 8007a38:	f1cb 0600 	rsb	r6, fp, #0
 8007a3c:	4ba1      	ldr	r3, [pc, #644]	; (8007cc4 <_dtoa_r+0x63c>)
 8007a3e:	4fa2      	ldr	r7, [pc, #648]	; (8007cc8 <_dtoa_r+0x640>)
 8007a40:	f006 020f 	and.w	r2, r6, #15
 8007a44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	ec51 0b18 	vmov	r0, r1, d8
 8007a50:	f7f8 fdda 	bl	8000608 <__aeabi_dmul>
 8007a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a58:	1136      	asrs	r6, r6, #4
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2502      	movs	r5, #2
 8007a5e:	2e00      	cmp	r6, #0
 8007a60:	d17e      	bne.n	8007b60 <_dtoa_r+0x4d8>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1d0      	bne.n	8007a08 <_dtoa_r+0x380>
 8007a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 8084 	beq.w	8007b7a <_dtoa_r+0x4f2>
 8007a72:	4b96      	ldr	r3, [pc, #600]	; (8007ccc <_dtoa_r+0x644>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	4640      	mov	r0, r8
 8007a78:	4649      	mov	r1, r9
 8007a7a:	f7f9 f837 	bl	8000aec <__aeabi_dcmplt>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d07b      	beq.n	8007b7a <_dtoa_r+0x4f2>
 8007a82:	9b04      	ldr	r3, [sp, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d078      	beq.n	8007b7a <_dtoa_r+0x4f2>
 8007a88:	9b01      	ldr	r3, [sp, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	dd39      	ble.n	8007b02 <_dtoa_r+0x47a>
 8007a8e:	4b90      	ldr	r3, [pc, #576]	; (8007cd0 <_dtoa_r+0x648>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	4640      	mov	r0, r8
 8007a94:	4649      	mov	r1, r9
 8007a96:	f7f8 fdb7 	bl	8000608 <__aeabi_dmul>
 8007a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a9e:	9e01      	ldr	r6, [sp, #4]
 8007aa0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007aa4:	3501      	adds	r5, #1
 8007aa6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f7f8 fd42 	bl	8000534 <__aeabi_i2d>
 8007ab0:	4642      	mov	r2, r8
 8007ab2:	464b      	mov	r3, r9
 8007ab4:	f7f8 fda8 	bl	8000608 <__aeabi_dmul>
 8007ab8:	4b86      	ldr	r3, [pc, #536]	; (8007cd4 <_dtoa_r+0x64c>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	f7f8 fbee 	bl	800029c <__adddf3>
 8007ac0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac8:	9303      	str	r3, [sp, #12]
 8007aca:	2e00      	cmp	r6, #0
 8007acc:	d158      	bne.n	8007b80 <_dtoa_r+0x4f8>
 8007ace:	4b82      	ldr	r3, [pc, #520]	; (8007cd8 <_dtoa_r+0x650>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	f7f8 fbdf 	bl	8000298 <__aeabi_dsub>
 8007ada:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ade:	4680      	mov	r8, r0
 8007ae0:	4689      	mov	r9, r1
 8007ae2:	f7f9 f821 	bl	8000b28 <__aeabi_dcmpgt>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	f040 8296 	bne.w	8008018 <_dtoa_r+0x990>
 8007aec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007af0:	4640      	mov	r0, r8
 8007af2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007af6:	4649      	mov	r1, r9
 8007af8:	f7f8 fff8 	bl	8000aec <__aeabi_dcmplt>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	f040 8289 	bne.w	8008014 <_dtoa_r+0x98c>
 8007b02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007b06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f2c0 814e 	blt.w	8007daa <_dtoa_r+0x722>
 8007b0e:	f1bb 0f0e 	cmp.w	fp, #14
 8007b12:	f300 814a 	bgt.w	8007daa <_dtoa_r+0x722>
 8007b16:	4b6b      	ldr	r3, [pc, #428]	; (8007cc4 <_dtoa_r+0x63c>)
 8007b18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f280 80dc 	bge.w	8007ce0 <_dtoa_r+0x658>
 8007b28:	9b04      	ldr	r3, [sp, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f300 80d8 	bgt.w	8007ce0 <_dtoa_r+0x658>
 8007b30:	f040 826f 	bne.w	8008012 <_dtoa_r+0x98a>
 8007b34:	4b68      	ldr	r3, [pc, #416]	; (8007cd8 <_dtoa_r+0x650>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	4640      	mov	r0, r8
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	f7f8 fd64 	bl	8000608 <__aeabi_dmul>
 8007b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b44:	f7f8 ffe6 	bl	8000b14 <__aeabi_dcmpge>
 8007b48:	9e04      	ldr	r6, [sp, #16]
 8007b4a:	4637      	mov	r7, r6
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	f040 8245 	bne.w	8007fdc <_dtoa_r+0x954>
 8007b52:	9d00      	ldr	r5, [sp, #0]
 8007b54:	2331      	movs	r3, #49	; 0x31
 8007b56:	f805 3b01 	strb.w	r3, [r5], #1
 8007b5a:	f10b 0b01 	add.w	fp, fp, #1
 8007b5e:	e241      	b.n	8007fe4 <_dtoa_r+0x95c>
 8007b60:	07f2      	lsls	r2, r6, #31
 8007b62:	d505      	bpl.n	8007b70 <_dtoa_r+0x4e8>
 8007b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b68:	f7f8 fd4e 	bl	8000608 <__aeabi_dmul>
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	2301      	movs	r3, #1
 8007b70:	1076      	asrs	r6, r6, #1
 8007b72:	3708      	adds	r7, #8
 8007b74:	e773      	b.n	8007a5e <_dtoa_r+0x3d6>
 8007b76:	2502      	movs	r5, #2
 8007b78:	e775      	b.n	8007a66 <_dtoa_r+0x3de>
 8007b7a:	9e04      	ldr	r6, [sp, #16]
 8007b7c:	465f      	mov	r7, fp
 8007b7e:	e792      	b.n	8007aa6 <_dtoa_r+0x41e>
 8007b80:	9900      	ldr	r1, [sp, #0]
 8007b82:	4b50      	ldr	r3, [pc, #320]	; (8007cc4 <_dtoa_r+0x63c>)
 8007b84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b88:	4431      	add	r1, r6
 8007b8a:	9102      	str	r1, [sp, #8]
 8007b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b8e:	eeb0 9a47 	vmov.f32	s18, s14
 8007b92:	eef0 9a67 	vmov.f32	s19, s15
 8007b96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b9e:	2900      	cmp	r1, #0
 8007ba0:	d044      	beq.n	8007c2c <_dtoa_r+0x5a4>
 8007ba2:	494e      	ldr	r1, [pc, #312]	; (8007cdc <_dtoa_r+0x654>)
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	f7f8 fe59 	bl	800085c <__aeabi_ddiv>
 8007baa:	ec53 2b19 	vmov	r2, r3, d9
 8007bae:	f7f8 fb73 	bl	8000298 <__aeabi_dsub>
 8007bb2:	9d00      	ldr	r5, [sp, #0]
 8007bb4:	ec41 0b19 	vmov	d9, r0, r1
 8007bb8:	4649      	mov	r1, r9
 8007bba:	4640      	mov	r0, r8
 8007bbc:	f7f8 ffd4 	bl	8000b68 <__aeabi_d2iz>
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	f7f8 fcb7 	bl	8000534 <__aeabi_i2d>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4640      	mov	r0, r8
 8007bcc:	4649      	mov	r1, r9
 8007bce:	f7f8 fb63 	bl	8000298 <__aeabi_dsub>
 8007bd2:	3630      	adds	r6, #48	; 0x30
 8007bd4:	f805 6b01 	strb.w	r6, [r5], #1
 8007bd8:	ec53 2b19 	vmov	r2, r3, d9
 8007bdc:	4680      	mov	r8, r0
 8007bde:	4689      	mov	r9, r1
 8007be0:	f7f8 ff84 	bl	8000aec <__aeabi_dcmplt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d164      	bne.n	8007cb2 <_dtoa_r+0x62a>
 8007be8:	4642      	mov	r2, r8
 8007bea:	464b      	mov	r3, r9
 8007bec:	4937      	ldr	r1, [pc, #220]	; (8007ccc <_dtoa_r+0x644>)
 8007bee:	2000      	movs	r0, #0
 8007bf0:	f7f8 fb52 	bl	8000298 <__aeabi_dsub>
 8007bf4:	ec53 2b19 	vmov	r2, r3, d9
 8007bf8:	f7f8 ff78 	bl	8000aec <__aeabi_dcmplt>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f040 80b6 	bne.w	8007d6e <_dtoa_r+0x6e6>
 8007c02:	9b02      	ldr	r3, [sp, #8]
 8007c04:	429d      	cmp	r5, r3
 8007c06:	f43f af7c 	beq.w	8007b02 <_dtoa_r+0x47a>
 8007c0a:	4b31      	ldr	r3, [pc, #196]	; (8007cd0 <_dtoa_r+0x648>)
 8007c0c:	ec51 0b19 	vmov	r0, r1, d9
 8007c10:	2200      	movs	r2, #0
 8007c12:	f7f8 fcf9 	bl	8000608 <__aeabi_dmul>
 8007c16:	4b2e      	ldr	r3, [pc, #184]	; (8007cd0 <_dtoa_r+0x648>)
 8007c18:	ec41 0b19 	vmov	d9, r0, r1
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	4640      	mov	r0, r8
 8007c20:	4649      	mov	r1, r9
 8007c22:	f7f8 fcf1 	bl	8000608 <__aeabi_dmul>
 8007c26:	4680      	mov	r8, r0
 8007c28:	4689      	mov	r9, r1
 8007c2a:	e7c5      	b.n	8007bb8 <_dtoa_r+0x530>
 8007c2c:	ec51 0b17 	vmov	r0, r1, d7
 8007c30:	f7f8 fcea 	bl	8000608 <__aeabi_dmul>
 8007c34:	9b02      	ldr	r3, [sp, #8]
 8007c36:	9d00      	ldr	r5, [sp, #0]
 8007c38:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c3a:	ec41 0b19 	vmov	d9, r0, r1
 8007c3e:	4649      	mov	r1, r9
 8007c40:	4640      	mov	r0, r8
 8007c42:	f7f8 ff91 	bl	8000b68 <__aeabi_d2iz>
 8007c46:	4606      	mov	r6, r0
 8007c48:	f7f8 fc74 	bl	8000534 <__aeabi_i2d>
 8007c4c:	3630      	adds	r6, #48	; 0x30
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4640      	mov	r0, r8
 8007c54:	4649      	mov	r1, r9
 8007c56:	f7f8 fb1f 	bl	8000298 <__aeabi_dsub>
 8007c5a:	f805 6b01 	strb.w	r6, [r5], #1
 8007c5e:	9b02      	ldr	r3, [sp, #8]
 8007c60:	429d      	cmp	r5, r3
 8007c62:	4680      	mov	r8, r0
 8007c64:	4689      	mov	r9, r1
 8007c66:	f04f 0200 	mov.w	r2, #0
 8007c6a:	d124      	bne.n	8007cb6 <_dtoa_r+0x62e>
 8007c6c:	4b1b      	ldr	r3, [pc, #108]	; (8007cdc <_dtoa_r+0x654>)
 8007c6e:	ec51 0b19 	vmov	r0, r1, d9
 8007c72:	f7f8 fb13 	bl	800029c <__adddf3>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	f7f8 ff53 	bl	8000b28 <__aeabi_dcmpgt>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d173      	bne.n	8007d6e <_dtoa_r+0x6e6>
 8007c86:	ec53 2b19 	vmov	r2, r3, d9
 8007c8a:	4914      	ldr	r1, [pc, #80]	; (8007cdc <_dtoa_r+0x654>)
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	f7f8 fb03 	bl	8000298 <__aeabi_dsub>
 8007c92:	4602      	mov	r2, r0
 8007c94:	460b      	mov	r3, r1
 8007c96:	4640      	mov	r0, r8
 8007c98:	4649      	mov	r1, r9
 8007c9a:	f7f8 ff27 	bl	8000aec <__aeabi_dcmplt>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f43f af2f 	beq.w	8007b02 <_dtoa_r+0x47a>
 8007ca4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ca6:	1e6b      	subs	r3, r5, #1
 8007ca8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007caa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cae:	2b30      	cmp	r3, #48	; 0x30
 8007cb0:	d0f8      	beq.n	8007ca4 <_dtoa_r+0x61c>
 8007cb2:	46bb      	mov	fp, r7
 8007cb4:	e04a      	b.n	8007d4c <_dtoa_r+0x6c4>
 8007cb6:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <_dtoa_r+0x648>)
 8007cb8:	f7f8 fca6 	bl	8000608 <__aeabi_dmul>
 8007cbc:	4680      	mov	r8, r0
 8007cbe:	4689      	mov	r9, r1
 8007cc0:	e7bd      	b.n	8007c3e <_dtoa_r+0x5b6>
 8007cc2:	bf00      	nop
 8007cc4:	08009490 	.word	0x08009490
 8007cc8:	08009468 	.word	0x08009468
 8007ccc:	3ff00000 	.word	0x3ff00000
 8007cd0:	40240000 	.word	0x40240000
 8007cd4:	401c0000 	.word	0x401c0000
 8007cd8:	40140000 	.word	0x40140000
 8007cdc:	3fe00000 	.word	0x3fe00000
 8007ce0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ce4:	9d00      	ldr	r5, [sp, #0]
 8007ce6:	4642      	mov	r2, r8
 8007ce8:	464b      	mov	r3, r9
 8007cea:	4630      	mov	r0, r6
 8007cec:	4639      	mov	r1, r7
 8007cee:	f7f8 fdb5 	bl	800085c <__aeabi_ddiv>
 8007cf2:	f7f8 ff39 	bl	8000b68 <__aeabi_d2iz>
 8007cf6:	9001      	str	r0, [sp, #4]
 8007cf8:	f7f8 fc1c 	bl	8000534 <__aeabi_i2d>
 8007cfc:	4642      	mov	r2, r8
 8007cfe:	464b      	mov	r3, r9
 8007d00:	f7f8 fc82 	bl	8000608 <__aeabi_dmul>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4630      	mov	r0, r6
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	f7f8 fac4 	bl	8000298 <__aeabi_dsub>
 8007d10:	9e01      	ldr	r6, [sp, #4]
 8007d12:	9f04      	ldr	r7, [sp, #16]
 8007d14:	3630      	adds	r6, #48	; 0x30
 8007d16:	f805 6b01 	strb.w	r6, [r5], #1
 8007d1a:	9e00      	ldr	r6, [sp, #0]
 8007d1c:	1bae      	subs	r6, r5, r6
 8007d1e:	42b7      	cmp	r7, r6
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	d134      	bne.n	8007d90 <_dtoa_r+0x708>
 8007d26:	f7f8 fab9 	bl	800029c <__adddf3>
 8007d2a:	4642      	mov	r2, r8
 8007d2c:	464b      	mov	r3, r9
 8007d2e:	4606      	mov	r6, r0
 8007d30:	460f      	mov	r7, r1
 8007d32:	f7f8 fef9 	bl	8000b28 <__aeabi_dcmpgt>
 8007d36:	b9c8      	cbnz	r0, 8007d6c <_dtoa_r+0x6e4>
 8007d38:	4642      	mov	r2, r8
 8007d3a:	464b      	mov	r3, r9
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	4639      	mov	r1, r7
 8007d40:	f7f8 feca 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d44:	b110      	cbz	r0, 8007d4c <_dtoa_r+0x6c4>
 8007d46:	9b01      	ldr	r3, [sp, #4]
 8007d48:	07db      	lsls	r3, r3, #31
 8007d4a:	d40f      	bmi.n	8007d6c <_dtoa_r+0x6e4>
 8007d4c:	4651      	mov	r1, sl
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 fbcc 	bl	80084ec <_Bfree>
 8007d54:	2300      	movs	r3, #0
 8007d56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d58:	702b      	strb	r3, [r5, #0]
 8007d5a:	f10b 0301 	add.w	r3, fp, #1
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f43f ace2 	beq.w	800772c <_dtoa_r+0xa4>
 8007d68:	601d      	str	r5, [r3, #0]
 8007d6a:	e4df      	b.n	800772c <_dtoa_r+0xa4>
 8007d6c:	465f      	mov	r7, fp
 8007d6e:	462b      	mov	r3, r5
 8007d70:	461d      	mov	r5, r3
 8007d72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d76:	2a39      	cmp	r2, #57	; 0x39
 8007d78:	d106      	bne.n	8007d88 <_dtoa_r+0x700>
 8007d7a:	9a00      	ldr	r2, [sp, #0]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d1f7      	bne.n	8007d70 <_dtoa_r+0x6e8>
 8007d80:	9900      	ldr	r1, [sp, #0]
 8007d82:	2230      	movs	r2, #48	; 0x30
 8007d84:	3701      	adds	r7, #1
 8007d86:	700a      	strb	r2, [r1, #0]
 8007d88:	781a      	ldrb	r2, [r3, #0]
 8007d8a:	3201      	adds	r2, #1
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	e790      	b.n	8007cb2 <_dtoa_r+0x62a>
 8007d90:	4ba3      	ldr	r3, [pc, #652]	; (8008020 <_dtoa_r+0x998>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	f7f8 fc38 	bl	8000608 <__aeabi_dmul>
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	460f      	mov	r7, r1
 8007da0:	f7f8 fe9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d09e      	beq.n	8007ce6 <_dtoa_r+0x65e>
 8007da8:	e7d0      	b.n	8007d4c <_dtoa_r+0x6c4>
 8007daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dac:	2a00      	cmp	r2, #0
 8007dae:	f000 80ca 	beq.w	8007f46 <_dtoa_r+0x8be>
 8007db2:	9a07      	ldr	r2, [sp, #28]
 8007db4:	2a01      	cmp	r2, #1
 8007db6:	f300 80ad 	bgt.w	8007f14 <_dtoa_r+0x88c>
 8007dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dbc:	2a00      	cmp	r2, #0
 8007dbe:	f000 80a5 	beq.w	8007f0c <_dtoa_r+0x884>
 8007dc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007dc6:	9e08      	ldr	r6, [sp, #32]
 8007dc8:	9d05      	ldr	r5, [sp, #20]
 8007dca:	9a05      	ldr	r2, [sp, #20]
 8007dcc:	441a      	add	r2, r3
 8007dce:	9205      	str	r2, [sp, #20]
 8007dd0:	9a06      	ldr	r2, [sp, #24]
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	441a      	add	r2, r3
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	9206      	str	r2, [sp, #24]
 8007dda:	f000 fc3d 	bl	8008658 <__i2b>
 8007dde:	4607      	mov	r7, r0
 8007de0:	b165      	cbz	r5, 8007dfc <_dtoa_r+0x774>
 8007de2:	9b06      	ldr	r3, [sp, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dd09      	ble.n	8007dfc <_dtoa_r+0x774>
 8007de8:	42ab      	cmp	r3, r5
 8007dea:	9a05      	ldr	r2, [sp, #20]
 8007dec:	bfa8      	it	ge
 8007dee:	462b      	movge	r3, r5
 8007df0:	1ad2      	subs	r2, r2, r3
 8007df2:	9205      	str	r2, [sp, #20]
 8007df4:	9a06      	ldr	r2, [sp, #24]
 8007df6:	1aed      	subs	r5, r5, r3
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	9306      	str	r3, [sp, #24]
 8007dfc:	9b08      	ldr	r3, [sp, #32]
 8007dfe:	b1f3      	cbz	r3, 8007e3e <_dtoa_r+0x7b6>
 8007e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80a3 	beq.w	8007f4e <_dtoa_r+0x8c6>
 8007e08:	2e00      	cmp	r6, #0
 8007e0a:	dd10      	ble.n	8007e2e <_dtoa_r+0x7a6>
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	4632      	mov	r2, r6
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 fce1 	bl	80087d8 <__pow5mult>
 8007e16:	4652      	mov	r2, sl
 8007e18:	4601      	mov	r1, r0
 8007e1a:	4607      	mov	r7, r0
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f000 fc31 	bl	8008684 <__multiply>
 8007e22:	4651      	mov	r1, sl
 8007e24:	4680      	mov	r8, r0
 8007e26:	4620      	mov	r0, r4
 8007e28:	f000 fb60 	bl	80084ec <_Bfree>
 8007e2c:	46c2      	mov	sl, r8
 8007e2e:	9b08      	ldr	r3, [sp, #32]
 8007e30:	1b9a      	subs	r2, r3, r6
 8007e32:	d004      	beq.n	8007e3e <_dtoa_r+0x7b6>
 8007e34:	4651      	mov	r1, sl
 8007e36:	4620      	mov	r0, r4
 8007e38:	f000 fcce 	bl	80087d8 <__pow5mult>
 8007e3c:	4682      	mov	sl, r0
 8007e3e:	2101      	movs	r1, #1
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 fc09 	bl	8008658 <__i2b>
 8007e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	f340 8081 	ble.w	8007f52 <_dtoa_r+0x8ca>
 8007e50:	461a      	mov	r2, r3
 8007e52:	4601      	mov	r1, r0
 8007e54:	4620      	mov	r0, r4
 8007e56:	f000 fcbf 	bl	80087d8 <__pow5mult>
 8007e5a:	9b07      	ldr	r3, [sp, #28]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	4606      	mov	r6, r0
 8007e60:	dd7a      	ble.n	8007f58 <_dtoa_r+0x8d0>
 8007e62:	f04f 0800 	mov.w	r8, #0
 8007e66:	6933      	ldr	r3, [r6, #16]
 8007e68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e6c:	6918      	ldr	r0, [r3, #16]
 8007e6e:	f000 fba5 	bl	80085bc <__hi0bits>
 8007e72:	f1c0 0020 	rsb	r0, r0, #32
 8007e76:	9b06      	ldr	r3, [sp, #24]
 8007e78:	4418      	add	r0, r3
 8007e7a:	f010 001f 	ands.w	r0, r0, #31
 8007e7e:	f000 8094 	beq.w	8007faa <_dtoa_r+0x922>
 8007e82:	f1c0 0320 	rsb	r3, r0, #32
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	f340 8085 	ble.w	8007f96 <_dtoa_r+0x90e>
 8007e8c:	9b05      	ldr	r3, [sp, #20]
 8007e8e:	f1c0 001c 	rsb	r0, r0, #28
 8007e92:	4403      	add	r3, r0
 8007e94:	9305      	str	r3, [sp, #20]
 8007e96:	9b06      	ldr	r3, [sp, #24]
 8007e98:	4403      	add	r3, r0
 8007e9a:	4405      	add	r5, r0
 8007e9c:	9306      	str	r3, [sp, #24]
 8007e9e:	9b05      	ldr	r3, [sp, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	dd05      	ble.n	8007eb0 <_dtoa_r+0x828>
 8007ea4:	4651      	mov	r1, sl
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 fcef 	bl	800888c <__lshift>
 8007eae:	4682      	mov	sl, r0
 8007eb0:	9b06      	ldr	r3, [sp, #24]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	dd05      	ble.n	8007ec2 <_dtoa_r+0x83a>
 8007eb6:	4631      	mov	r1, r6
 8007eb8:	461a      	mov	r2, r3
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f000 fce6 	bl	800888c <__lshift>
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d072      	beq.n	8007fae <_dtoa_r+0x926>
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4650      	mov	r0, sl
 8007ecc:	f000 fd4a 	bl	8008964 <__mcmp>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	da6c      	bge.n	8007fae <_dtoa_r+0x926>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4651      	mov	r1, sl
 8007ed8:	220a      	movs	r2, #10
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 fb28 	bl	8008530 <__multadd>
 8007ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ee6:	4682      	mov	sl, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 81b0 	beq.w	800824e <_dtoa_r+0xbc6>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	220a      	movs	r2, #10
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f000 fb1b 	bl	8008530 <__multadd>
 8007efa:	9b01      	ldr	r3, [sp, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	4607      	mov	r7, r0
 8007f00:	f300 8096 	bgt.w	8008030 <_dtoa_r+0x9a8>
 8007f04:	9b07      	ldr	r3, [sp, #28]
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	dc59      	bgt.n	8007fbe <_dtoa_r+0x936>
 8007f0a:	e091      	b.n	8008030 <_dtoa_r+0x9a8>
 8007f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f12:	e758      	b.n	8007dc6 <_dtoa_r+0x73e>
 8007f14:	9b04      	ldr	r3, [sp, #16]
 8007f16:	1e5e      	subs	r6, r3, #1
 8007f18:	9b08      	ldr	r3, [sp, #32]
 8007f1a:	42b3      	cmp	r3, r6
 8007f1c:	bfbf      	itttt	lt
 8007f1e:	9b08      	ldrlt	r3, [sp, #32]
 8007f20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007f22:	9608      	strlt	r6, [sp, #32]
 8007f24:	1af3      	sublt	r3, r6, r3
 8007f26:	bfb4      	ite	lt
 8007f28:	18d2      	addlt	r2, r2, r3
 8007f2a:	1b9e      	subge	r6, r3, r6
 8007f2c:	9b04      	ldr	r3, [sp, #16]
 8007f2e:	bfbc      	itt	lt
 8007f30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007f32:	2600      	movlt	r6, #0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	bfb7      	itett	lt
 8007f38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007f3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007f40:	1a9d      	sublt	r5, r3, r2
 8007f42:	2300      	movlt	r3, #0
 8007f44:	e741      	b.n	8007dca <_dtoa_r+0x742>
 8007f46:	9e08      	ldr	r6, [sp, #32]
 8007f48:	9d05      	ldr	r5, [sp, #20]
 8007f4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007f4c:	e748      	b.n	8007de0 <_dtoa_r+0x758>
 8007f4e:	9a08      	ldr	r2, [sp, #32]
 8007f50:	e770      	b.n	8007e34 <_dtoa_r+0x7ac>
 8007f52:	9b07      	ldr	r3, [sp, #28]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	dc19      	bgt.n	8007f8c <_dtoa_r+0x904>
 8007f58:	9b02      	ldr	r3, [sp, #8]
 8007f5a:	b9bb      	cbnz	r3, 8007f8c <_dtoa_r+0x904>
 8007f5c:	9b03      	ldr	r3, [sp, #12]
 8007f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f62:	b99b      	cbnz	r3, 8007f8c <_dtoa_r+0x904>
 8007f64:	9b03      	ldr	r3, [sp, #12]
 8007f66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f6a:	0d1b      	lsrs	r3, r3, #20
 8007f6c:	051b      	lsls	r3, r3, #20
 8007f6e:	b183      	cbz	r3, 8007f92 <_dtoa_r+0x90a>
 8007f70:	9b05      	ldr	r3, [sp, #20]
 8007f72:	3301      	adds	r3, #1
 8007f74:	9305      	str	r3, [sp, #20]
 8007f76:	9b06      	ldr	r3, [sp, #24]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	9306      	str	r3, [sp, #24]
 8007f7c:	f04f 0801 	mov.w	r8, #1
 8007f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f47f af6f 	bne.w	8007e66 <_dtoa_r+0x7de>
 8007f88:	2001      	movs	r0, #1
 8007f8a:	e774      	b.n	8007e76 <_dtoa_r+0x7ee>
 8007f8c:	f04f 0800 	mov.w	r8, #0
 8007f90:	e7f6      	b.n	8007f80 <_dtoa_r+0x8f8>
 8007f92:	4698      	mov	r8, r3
 8007f94:	e7f4      	b.n	8007f80 <_dtoa_r+0x8f8>
 8007f96:	d082      	beq.n	8007e9e <_dtoa_r+0x816>
 8007f98:	9a05      	ldr	r2, [sp, #20]
 8007f9a:	331c      	adds	r3, #28
 8007f9c:	441a      	add	r2, r3
 8007f9e:	9205      	str	r2, [sp, #20]
 8007fa0:	9a06      	ldr	r2, [sp, #24]
 8007fa2:	441a      	add	r2, r3
 8007fa4:	441d      	add	r5, r3
 8007fa6:	9206      	str	r2, [sp, #24]
 8007fa8:	e779      	b.n	8007e9e <_dtoa_r+0x816>
 8007faa:	4603      	mov	r3, r0
 8007fac:	e7f4      	b.n	8007f98 <_dtoa_r+0x910>
 8007fae:	9b04      	ldr	r3, [sp, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	dc37      	bgt.n	8008024 <_dtoa_r+0x99c>
 8007fb4:	9b07      	ldr	r3, [sp, #28]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	dd34      	ble.n	8008024 <_dtoa_r+0x99c>
 8007fba:	9b04      	ldr	r3, [sp, #16]
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	9b01      	ldr	r3, [sp, #4]
 8007fc0:	b963      	cbnz	r3, 8007fdc <_dtoa_r+0x954>
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	2205      	movs	r2, #5
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f000 fab2 	bl	8008530 <__multadd>
 8007fcc:	4601      	mov	r1, r0
 8007fce:	4606      	mov	r6, r0
 8007fd0:	4650      	mov	r0, sl
 8007fd2:	f000 fcc7 	bl	8008964 <__mcmp>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	f73f adbb 	bgt.w	8007b52 <_dtoa_r+0x4ca>
 8007fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fde:	9d00      	ldr	r5, [sp, #0]
 8007fe0:	ea6f 0b03 	mvn.w	fp, r3
 8007fe4:	f04f 0800 	mov.w	r8, #0
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 fa7e 	bl	80084ec <_Bfree>
 8007ff0:	2f00      	cmp	r7, #0
 8007ff2:	f43f aeab 	beq.w	8007d4c <_dtoa_r+0x6c4>
 8007ff6:	f1b8 0f00 	cmp.w	r8, #0
 8007ffa:	d005      	beq.n	8008008 <_dtoa_r+0x980>
 8007ffc:	45b8      	cmp	r8, r7
 8007ffe:	d003      	beq.n	8008008 <_dtoa_r+0x980>
 8008000:	4641      	mov	r1, r8
 8008002:	4620      	mov	r0, r4
 8008004:	f000 fa72 	bl	80084ec <_Bfree>
 8008008:	4639      	mov	r1, r7
 800800a:	4620      	mov	r0, r4
 800800c:	f000 fa6e 	bl	80084ec <_Bfree>
 8008010:	e69c      	b.n	8007d4c <_dtoa_r+0x6c4>
 8008012:	2600      	movs	r6, #0
 8008014:	4637      	mov	r7, r6
 8008016:	e7e1      	b.n	8007fdc <_dtoa_r+0x954>
 8008018:	46bb      	mov	fp, r7
 800801a:	4637      	mov	r7, r6
 800801c:	e599      	b.n	8007b52 <_dtoa_r+0x4ca>
 800801e:	bf00      	nop
 8008020:	40240000 	.word	0x40240000
 8008024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 80c8 	beq.w	80081bc <_dtoa_r+0xb34>
 800802c:	9b04      	ldr	r3, [sp, #16]
 800802e:	9301      	str	r3, [sp, #4]
 8008030:	2d00      	cmp	r5, #0
 8008032:	dd05      	ble.n	8008040 <_dtoa_r+0x9b8>
 8008034:	4639      	mov	r1, r7
 8008036:	462a      	mov	r2, r5
 8008038:	4620      	mov	r0, r4
 800803a:	f000 fc27 	bl	800888c <__lshift>
 800803e:	4607      	mov	r7, r0
 8008040:	f1b8 0f00 	cmp.w	r8, #0
 8008044:	d05b      	beq.n	80080fe <_dtoa_r+0xa76>
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	4620      	mov	r0, r4
 800804a:	f000 fa0f 	bl	800846c <_Balloc>
 800804e:	4605      	mov	r5, r0
 8008050:	b928      	cbnz	r0, 800805e <_dtoa_r+0x9d6>
 8008052:	4b83      	ldr	r3, [pc, #524]	; (8008260 <_dtoa_r+0xbd8>)
 8008054:	4602      	mov	r2, r0
 8008056:	f240 21ef 	movw	r1, #751	; 0x2ef
 800805a:	f7ff bb2e 	b.w	80076ba <_dtoa_r+0x32>
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	3202      	adds	r2, #2
 8008062:	0092      	lsls	r2, r2, #2
 8008064:	f107 010c 	add.w	r1, r7, #12
 8008068:	300c      	adds	r0, #12
 800806a:	f000 fe39 	bl	8008ce0 <memcpy>
 800806e:	2201      	movs	r2, #1
 8008070:	4629      	mov	r1, r5
 8008072:	4620      	mov	r0, r4
 8008074:	f000 fc0a 	bl	800888c <__lshift>
 8008078:	9b00      	ldr	r3, [sp, #0]
 800807a:	3301      	adds	r3, #1
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008082:	4413      	add	r3, r2
 8008084:	9308      	str	r3, [sp, #32]
 8008086:	9b02      	ldr	r3, [sp, #8]
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	46b8      	mov	r8, r7
 800808e:	9306      	str	r3, [sp, #24]
 8008090:	4607      	mov	r7, r0
 8008092:	9b04      	ldr	r3, [sp, #16]
 8008094:	4631      	mov	r1, r6
 8008096:	3b01      	subs	r3, #1
 8008098:	4650      	mov	r0, sl
 800809a:	9301      	str	r3, [sp, #4]
 800809c:	f7ff fa6b 	bl	8007576 <quorem>
 80080a0:	4641      	mov	r1, r8
 80080a2:	9002      	str	r0, [sp, #8]
 80080a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80080a8:	4650      	mov	r0, sl
 80080aa:	f000 fc5b 	bl	8008964 <__mcmp>
 80080ae:	463a      	mov	r2, r7
 80080b0:	9005      	str	r0, [sp, #20]
 80080b2:	4631      	mov	r1, r6
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fc71 	bl	800899c <__mdiff>
 80080ba:	68c2      	ldr	r2, [r0, #12]
 80080bc:	4605      	mov	r5, r0
 80080be:	bb02      	cbnz	r2, 8008102 <_dtoa_r+0xa7a>
 80080c0:	4601      	mov	r1, r0
 80080c2:	4650      	mov	r0, sl
 80080c4:	f000 fc4e 	bl	8008964 <__mcmp>
 80080c8:	4602      	mov	r2, r0
 80080ca:	4629      	mov	r1, r5
 80080cc:	4620      	mov	r0, r4
 80080ce:	9209      	str	r2, [sp, #36]	; 0x24
 80080d0:	f000 fa0c 	bl	80084ec <_Bfree>
 80080d4:	9b07      	ldr	r3, [sp, #28]
 80080d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d8:	9d04      	ldr	r5, [sp, #16]
 80080da:	ea43 0102 	orr.w	r1, r3, r2
 80080de:	9b06      	ldr	r3, [sp, #24]
 80080e0:	4319      	orrs	r1, r3
 80080e2:	d110      	bne.n	8008106 <_dtoa_r+0xa7e>
 80080e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080e8:	d029      	beq.n	800813e <_dtoa_r+0xab6>
 80080ea:	9b05      	ldr	r3, [sp, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dd02      	ble.n	80080f6 <_dtoa_r+0xa6e>
 80080f0:	9b02      	ldr	r3, [sp, #8]
 80080f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80080f6:	9b01      	ldr	r3, [sp, #4]
 80080f8:	f883 9000 	strb.w	r9, [r3]
 80080fc:	e774      	b.n	8007fe8 <_dtoa_r+0x960>
 80080fe:	4638      	mov	r0, r7
 8008100:	e7ba      	b.n	8008078 <_dtoa_r+0x9f0>
 8008102:	2201      	movs	r2, #1
 8008104:	e7e1      	b.n	80080ca <_dtoa_r+0xa42>
 8008106:	9b05      	ldr	r3, [sp, #20]
 8008108:	2b00      	cmp	r3, #0
 800810a:	db04      	blt.n	8008116 <_dtoa_r+0xa8e>
 800810c:	9907      	ldr	r1, [sp, #28]
 800810e:	430b      	orrs	r3, r1
 8008110:	9906      	ldr	r1, [sp, #24]
 8008112:	430b      	orrs	r3, r1
 8008114:	d120      	bne.n	8008158 <_dtoa_r+0xad0>
 8008116:	2a00      	cmp	r2, #0
 8008118:	dded      	ble.n	80080f6 <_dtoa_r+0xa6e>
 800811a:	4651      	mov	r1, sl
 800811c:	2201      	movs	r2, #1
 800811e:	4620      	mov	r0, r4
 8008120:	f000 fbb4 	bl	800888c <__lshift>
 8008124:	4631      	mov	r1, r6
 8008126:	4682      	mov	sl, r0
 8008128:	f000 fc1c 	bl	8008964 <__mcmp>
 800812c:	2800      	cmp	r0, #0
 800812e:	dc03      	bgt.n	8008138 <_dtoa_r+0xab0>
 8008130:	d1e1      	bne.n	80080f6 <_dtoa_r+0xa6e>
 8008132:	f019 0f01 	tst.w	r9, #1
 8008136:	d0de      	beq.n	80080f6 <_dtoa_r+0xa6e>
 8008138:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800813c:	d1d8      	bne.n	80080f0 <_dtoa_r+0xa68>
 800813e:	9a01      	ldr	r2, [sp, #4]
 8008140:	2339      	movs	r3, #57	; 0x39
 8008142:	7013      	strb	r3, [r2, #0]
 8008144:	462b      	mov	r3, r5
 8008146:	461d      	mov	r5, r3
 8008148:	3b01      	subs	r3, #1
 800814a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800814e:	2a39      	cmp	r2, #57	; 0x39
 8008150:	d06c      	beq.n	800822c <_dtoa_r+0xba4>
 8008152:	3201      	adds	r2, #1
 8008154:	701a      	strb	r2, [r3, #0]
 8008156:	e747      	b.n	8007fe8 <_dtoa_r+0x960>
 8008158:	2a00      	cmp	r2, #0
 800815a:	dd07      	ble.n	800816c <_dtoa_r+0xae4>
 800815c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008160:	d0ed      	beq.n	800813e <_dtoa_r+0xab6>
 8008162:	9a01      	ldr	r2, [sp, #4]
 8008164:	f109 0301 	add.w	r3, r9, #1
 8008168:	7013      	strb	r3, [r2, #0]
 800816a:	e73d      	b.n	8007fe8 <_dtoa_r+0x960>
 800816c:	9b04      	ldr	r3, [sp, #16]
 800816e:	9a08      	ldr	r2, [sp, #32]
 8008170:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008174:	4293      	cmp	r3, r2
 8008176:	d043      	beq.n	8008200 <_dtoa_r+0xb78>
 8008178:	4651      	mov	r1, sl
 800817a:	2300      	movs	r3, #0
 800817c:	220a      	movs	r2, #10
 800817e:	4620      	mov	r0, r4
 8008180:	f000 f9d6 	bl	8008530 <__multadd>
 8008184:	45b8      	cmp	r8, r7
 8008186:	4682      	mov	sl, r0
 8008188:	f04f 0300 	mov.w	r3, #0
 800818c:	f04f 020a 	mov.w	r2, #10
 8008190:	4641      	mov	r1, r8
 8008192:	4620      	mov	r0, r4
 8008194:	d107      	bne.n	80081a6 <_dtoa_r+0xb1e>
 8008196:	f000 f9cb 	bl	8008530 <__multadd>
 800819a:	4680      	mov	r8, r0
 800819c:	4607      	mov	r7, r0
 800819e:	9b04      	ldr	r3, [sp, #16]
 80081a0:	3301      	adds	r3, #1
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	e775      	b.n	8008092 <_dtoa_r+0xa0a>
 80081a6:	f000 f9c3 	bl	8008530 <__multadd>
 80081aa:	4639      	mov	r1, r7
 80081ac:	4680      	mov	r8, r0
 80081ae:	2300      	movs	r3, #0
 80081b0:	220a      	movs	r2, #10
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 f9bc 	bl	8008530 <__multadd>
 80081b8:	4607      	mov	r7, r0
 80081ba:	e7f0      	b.n	800819e <_dtoa_r+0xb16>
 80081bc:	9b04      	ldr	r3, [sp, #16]
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	9d00      	ldr	r5, [sp, #0]
 80081c2:	4631      	mov	r1, r6
 80081c4:	4650      	mov	r0, sl
 80081c6:	f7ff f9d6 	bl	8007576 <quorem>
 80081ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80081ce:	9b00      	ldr	r3, [sp, #0]
 80081d0:	f805 9b01 	strb.w	r9, [r5], #1
 80081d4:	1aea      	subs	r2, r5, r3
 80081d6:	9b01      	ldr	r3, [sp, #4]
 80081d8:	4293      	cmp	r3, r2
 80081da:	dd07      	ble.n	80081ec <_dtoa_r+0xb64>
 80081dc:	4651      	mov	r1, sl
 80081de:	2300      	movs	r3, #0
 80081e0:	220a      	movs	r2, #10
 80081e2:	4620      	mov	r0, r4
 80081e4:	f000 f9a4 	bl	8008530 <__multadd>
 80081e8:	4682      	mov	sl, r0
 80081ea:	e7ea      	b.n	80081c2 <_dtoa_r+0xb3a>
 80081ec:	9b01      	ldr	r3, [sp, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	bfc8      	it	gt
 80081f2:	461d      	movgt	r5, r3
 80081f4:	9b00      	ldr	r3, [sp, #0]
 80081f6:	bfd8      	it	le
 80081f8:	2501      	movle	r5, #1
 80081fa:	441d      	add	r5, r3
 80081fc:	f04f 0800 	mov.w	r8, #0
 8008200:	4651      	mov	r1, sl
 8008202:	2201      	movs	r2, #1
 8008204:	4620      	mov	r0, r4
 8008206:	f000 fb41 	bl	800888c <__lshift>
 800820a:	4631      	mov	r1, r6
 800820c:	4682      	mov	sl, r0
 800820e:	f000 fba9 	bl	8008964 <__mcmp>
 8008212:	2800      	cmp	r0, #0
 8008214:	dc96      	bgt.n	8008144 <_dtoa_r+0xabc>
 8008216:	d102      	bne.n	800821e <_dtoa_r+0xb96>
 8008218:	f019 0f01 	tst.w	r9, #1
 800821c:	d192      	bne.n	8008144 <_dtoa_r+0xabc>
 800821e:	462b      	mov	r3, r5
 8008220:	461d      	mov	r5, r3
 8008222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008226:	2a30      	cmp	r2, #48	; 0x30
 8008228:	d0fa      	beq.n	8008220 <_dtoa_r+0xb98>
 800822a:	e6dd      	b.n	8007fe8 <_dtoa_r+0x960>
 800822c:	9a00      	ldr	r2, [sp, #0]
 800822e:	429a      	cmp	r2, r3
 8008230:	d189      	bne.n	8008146 <_dtoa_r+0xabe>
 8008232:	f10b 0b01 	add.w	fp, fp, #1
 8008236:	2331      	movs	r3, #49	; 0x31
 8008238:	e796      	b.n	8008168 <_dtoa_r+0xae0>
 800823a:	4b0a      	ldr	r3, [pc, #40]	; (8008264 <_dtoa_r+0xbdc>)
 800823c:	f7ff ba99 	b.w	8007772 <_dtoa_r+0xea>
 8008240:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008242:	2b00      	cmp	r3, #0
 8008244:	f47f aa6d 	bne.w	8007722 <_dtoa_r+0x9a>
 8008248:	4b07      	ldr	r3, [pc, #28]	; (8008268 <_dtoa_r+0xbe0>)
 800824a:	f7ff ba92 	b.w	8007772 <_dtoa_r+0xea>
 800824e:	9b01      	ldr	r3, [sp, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	dcb5      	bgt.n	80081c0 <_dtoa_r+0xb38>
 8008254:	9b07      	ldr	r3, [sp, #28]
 8008256:	2b02      	cmp	r3, #2
 8008258:	f73f aeb1 	bgt.w	8007fbe <_dtoa_r+0x936>
 800825c:	e7b0      	b.n	80081c0 <_dtoa_r+0xb38>
 800825e:	bf00      	nop
 8008260:	080093f8 	.word	0x080093f8
 8008264:	08009358 	.word	0x08009358
 8008268:	0800937c 	.word	0x0800937c

0800826c <_free_r>:
 800826c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800826e:	2900      	cmp	r1, #0
 8008270:	d044      	beq.n	80082fc <_free_r+0x90>
 8008272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008276:	9001      	str	r0, [sp, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	f1a1 0404 	sub.w	r4, r1, #4
 800827e:	bfb8      	it	lt
 8008280:	18e4      	addlt	r4, r4, r3
 8008282:	f000 f8e7 	bl	8008454 <__malloc_lock>
 8008286:	4a1e      	ldr	r2, [pc, #120]	; (8008300 <_free_r+0x94>)
 8008288:	9801      	ldr	r0, [sp, #4]
 800828a:	6813      	ldr	r3, [r2, #0]
 800828c:	b933      	cbnz	r3, 800829c <_free_r+0x30>
 800828e:	6063      	str	r3, [r4, #4]
 8008290:	6014      	str	r4, [r2, #0]
 8008292:	b003      	add	sp, #12
 8008294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008298:	f000 b8e2 	b.w	8008460 <__malloc_unlock>
 800829c:	42a3      	cmp	r3, r4
 800829e:	d908      	bls.n	80082b2 <_free_r+0x46>
 80082a0:	6825      	ldr	r5, [r4, #0]
 80082a2:	1961      	adds	r1, r4, r5
 80082a4:	428b      	cmp	r3, r1
 80082a6:	bf01      	itttt	eq
 80082a8:	6819      	ldreq	r1, [r3, #0]
 80082aa:	685b      	ldreq	r3, [r3, #4]
 80082ac:	1949      	addeq	r1, r1, r5
 80082ae:	6021      	streq	r1, [r4, #0]
 80082b0:	e7ed      	b.n	800828e <_free_r+0x22>
 80082b2:	461a      	mov	r2, r3
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	b10b      	cbz	r3, 80082bc <_free_r+0x50>
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	d9fa      	bls.n	80082b2 <_free_r+0x46>
 80082bc:	6811      	ldr	r1, [r2, #0]
 80082be:	1855      	adds	r5, r2, r1
 80082c0:	42a5      	cmp	r5, r4
 80082c2:	d10b      	bne.n	80082dc <_free_r+0x70>
 80082c4:	6824      	ldr	r4, [r4, #0]
 80082c6:	4421      	add	r1, r4
 80082c8:	1854      	adds	r4, r2, r1
 80082ca:	42a3      	cmp	r3, r4
 80082cc:	6011      	str	r1, [r2, #0]
 80082ce:	d1e0      	bne.n	8008292 <_free_r+0x26>
 80082d0:	681c      	ldr	r4, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	6053      	str	r3, [r2, #4]
 80082d6:	440c      	add	r4, r1
 80082d8:	6014      	str	r4, [r2, #0]
 80082da:	e7da      	b.n	8008292 <_free_r+0x26>
 80082dc:	d902      	bls.n	80082e4 <_free_r+0x78>
 80082de:	230c      	movs	r3, #12
 80082e0:	6003      	str	r3, [r0, #0]
 80082e2:	e7d6      	b.n	8008292 <_free_r+0x26>
 80082e4:	6825      	ldr	r5, [r4, #0]
 80082e6:	1961      	adds	r1, r4, r5
 80082e8:	428b      	cmp	r3, r1
 80082ea:	bf04      	itt	eq
 80082ec:	6819      	ldreq	r1, [r3, #0]
 80082ee:	685b      	ldreq	r3, [r3, #4]
 80082f0:	6063      	str	r3, [r4, #4]
 80082f2:	bf04      	itt	eq
 80082f4:	1949      	addeq	r1, r1, r5
 80082f6:	6021      	streq	r1, [r4, #0]
 80082f8:	6054      	str	r4, [r2, #4]
 80082fa:	e7ca      	b.n	8008292 <_free_r+0x26>
 80082fc:	b003      	add	sp, #12
 80082fe:	bd30      	pop	{r4, r5, pc}
 8008300:	20000780 	.word	0x20000780

08008304 <malloc>:
 8008304:	4b02      	ldr	r3, [pc, #8]	; (8008310 <malloc+0xc>)
 8008306:	4601      	mov	r1, r0
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	f000 b823 	b.w	8008354 <_malloc_r>
 800830e:	bf00      	nop
 8008310:	200000f4 	.word	0x200000f4

08008314 <sbrk_aligned>:
 8008314:	b570      	push	{r4, r5, r6, lr}
 8008316:	4e0e      	ldr	r6, [pc, #56]	; (8008350 <sbrk_aligned+0x3c>)
 8008318:	460c      	mov	r4, r1
 800831a:	6831      	ldr	r1, [r6, #0]
 800831c:	4605      	mov	r5, r0
 800831e:	b911      	cbnz	r1, 8008326 <sbrk_aligned+0x12>
 8008320:	f000 fcce 	bl	8008cc0 <_sbrk_r>
 8008324:	6030      	str	r0, [r6, #0]
 8008326:	4621      	mov	r1, r4
 8008328:	4628      	mov	r0, r5
 800832a:	f000 fcc9 	bl	8008cc0 <_sbrk_r>
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	d00a      	beq.n	8008348 <sbrk_aligned+0x34>
 8008332:	1cc4      	adds	r4, r0, #3
 8008334:	f024 0403 	bic.w	r4, r4, #3
 8008338:	42a0      	cmp	r0, r4
 800833a:	d007      	beq.n	800834c <sbrk_aligned+0x38>
 800833c:	1a21      	subs	r1, r4, r0
 800833e:	4628      	mov	r0, r5
 8008340:	f000 fcbe 	bl	8008cc0 <_sbrk_r>
 8008344:	3001      	adds	r0, #1
 8008346:	d101      	bne.n	800834c <sbrk_aligned+0x38>
 8008348:	f04f 34ff 	mov.w	r4, #4294967295
 800834c:	4620      	mov	r0, r4
 800834e:	bd70      	pop	{r4, r5, r6, pc}
 8008350:	20000784 	.word	0x20000784

08008354 <_malloc_r>:
 8008354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008358:	1ccd      	adds	r5, r1, #3
 800835a:	f025 0503 	bic.w	r5, r5, #3
 800835e:	3508      	adds	r5, #8
 8008360:	2d0c      	cmp	r5, #12
 8008362:	bf38      	it	cc
 8008364:	250c      	movcc	r5, #12
 8008366:	2d00      	cmp	r5, #0
 8008368:	4607      	mov	r7, r0
 800836a:	db01      	blt.n	8008370 <_malloc_r+0x1c>
 800836c:	42a9      	cmp	r1, r5
 800836e:	d905      	bls.n	800837c <_malloc_r+0x28>
 8008370:	230c      	movs	r3, #12
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	2600      	movs	r6, #0
 8008376:	4630      	mov	r0, r6
 8008378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800837c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008450 <_malloc_r+0xfc>
 8008380:	f000 f868 	bl	8008454 <__malloc_lock>
 8008384:	f8d8 3000 	ldr.w	r3, [r8]
 8008388:	461c      	mov	r4, r3
 800838a:	bb5c      	cbnz	r4, 80083e4 <_malloc_r+0x90>
 800838c:	4629      	mov	r1, r5
 800838e:	4638      	mov	r0, r7
 8008390:	f7ff ffc0 	bl	8008314 <sbrk_aligned>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	4604      	mov	r4, r0
 8008398:	d155      	bne.n	8008446 <_malloc_r+0xf2>
 800839a:	f8d8 4000 	ldr.w	r4, [r8]
 800839e:	4626      	mov	r6, r4
 80083a0:	2e00      	cmp	r6, #0
 80083a2:	d145      	bne.n	8008430 <_malloc_r+0xdc>
 80083a4:	2c00      	cmp	r4, #0
 80083a6:	d048      	beq.n	800843a <_malloc_r+0xe6>
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	4631      	mov	r1, r6
 80083ac:	4638      	mov	r0, r7
 80083ae:	eb04 0903 	add.w	r9, r4, r3
 80083b2:	f000 fc85 	bl	8008cc0 <_sbrk_r>
 80083b6:	4581      	cmp	r9, r0
 80083b8:	d13f      	bne.n	800843a <_malloc_r+0xe6>
 80083ba:	6821      	ldr	r1, [r4, #0]
 80083bc:	1a6d      	subs	r5, r5, r1
 80083be:	4629      	mov	r1, r5
 80083c0:	4638      	mov	r0, r7
 80083c2:	f7ff ffa7 	bl	8008314 <sbrk_aligned>
 80083c6:	3001      	adds	r0, #1
 80083c8:	d037      	beq.n	800843a <_malloc_r+0xe6>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	442b      	add	r3, r5
 80083ce:	6023      	str	r3, [r4, #0]
 80083d0:	f8d8 3000 	ldr.w	r3, [r8]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d038      	beq.n	800844a <_malloc_r+0xf6>
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	42a2      	cmp	r2, r4
 80083dc:	d12b      	bne.n	8008436 <_malloc_r+0xe2>
 80083de:	2200      	movs	r2, #0
 80083e0:	605a      	str	r2, [r3, #4]
 80083e2:	e00f      	b.n	8008404 <_malloc_r+0xb0>
 80083e4:	6822      	ldr	r2, [r4, #0]
 80083e6:	1b52      	subs	r2, r2, r5
 80083e8:	d41f      	bmi.n	800842a <_malloc_r+0xd6>
 80083ea:	2a0b      	cmp	r2, #11
 80083ec:	d917      	bls.n	800841e <_malloc_r+0xca>
 80083ee:	1961      	adds	r1, r4, r5
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	6025      	str	r5, [r4, #0]
 80083f4:	bf18      	it	ne
 80083f6:	6059      	strne	r1, [r3, #4]
 80083f8:	6863      	ldr	r3, [r4, #4]
 80083fa:	bf08      	it	eq
 80083fc:	f8c8 1000 	streq.w	r1, [r8]
 8008400:	5162      	str	r2, [r4, r5]
 8008402:	604b      	str	r3, [r1, #4]
 8008404:	4638      	mov	r0, r7
 8008406:	f104 060b 	add.w	r6, r4, #11
 800840a:	f000 f829 	bl	8008460 <__malloc_unlock>
 800840e:	f026 0607 	bic.w	r6, r6, #7
 8008412:	1d23      	adds	r3, r4, #4
 8008414:	1af2      	subs	r2, r6, r3
 8008416:	d0ae      	beq.n	8008376 <_malloc_r+0x22>
 8008418:	1b9b      	subs	r3, r3, r6
 800841a:	50a3      	str	r3, [r4, r2]
 800841c:	e7ab      	b.n	8008376 <_malloc_r+0x22>
 800841e:	42a3      	cmp	r3, r4
 8008420:	6862      	ldr	r2, [r4, #4]
 8008422:	d1dd      	bne.n	80083e0 <_malloc_r+0x8c>
 8008424:	f8c8 2000 	str.w	r2, [r8]
 8008428:	e7ec      	b.n	8008404 <_malloc_r+0xb0>
 800842a:	4623      	mov	r3, r4
 800842c:	6864      	ldr	r4, [r4, #4]
 800842e:	e7ac      	b.n	800838a <_malloc_r+0x36>
 8008430:	4634      	mov	r4, r6
 8008432:	6876      	ldr	r6, [r6, #4]
 8008434:	e7b4      	b.n	80083a0 <_malloc_r+0x4c>
 8008436:	4613      	mov	r3, r2
 8008438:	e7cc      	b.n	80083d4 <_malloc_r+0x80>
 800843a:	230c      	movs	r3, #12
 800843c:	603b      	str	r3, [r7, #0]
 800843e:	4638      	mov	r0, r7
 8008440:	f000 f80e 	bl	8008460 <__malloc_unlock>
 8008444:	e797      	b.n	8008376 <_malloc_r+0x22>
 8008446:	6025      	str	r5, [r4, #0]
 8008448:	e7dc      	b.n	8008404 <_malloc_r+0xb0>
 800844a:	605b      	str	r3, [r3, #4]
 800844c:	deff      	udf	#255	; 0xff
 800844e:	bf00      	nop
 8008450:	20000780 	.word	0x20000780

08008454 <__malloc_lock>:
 8008454:	4801      	ldr	r0, [pc, #4]	; (800845c <__malloc_lock+0x8>)
 8008456:	f7ff b88c 	b.w	8007572 <__retarget_lock_acquire_recursive>
 800845a:	bf00      	nop
 800845c:	2000077c 	.word	0x2000077c

08008460 <__malloc_unlock>:
 8008460:	4801      	ldr	r0, [pc, #4]	; (8008468 <__malloc_unlock+0x8>)
 8008462:	f7ff b887 	b.w	8007574 <__retarget_lock_release_recursive>
 8008466:	bf00      	nop
 8008468:	2000077c 	.word	0x2000077c

0800846c <_Balloc>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	69c6      	ldr	r6, [r0, #28]
 8008470:	4604      	mov	r4, r0
 8008472:	460d      	mov	r5, r1
 8008474:	b976      	cbnz	r6, 8008494 <_Balloc+0x28>
 8008476:	2010      	movs	r0, #16
 8008478:	f7ff ff44 	bl	8008304 <malloc>
 800847c:	4602      	mov	r2, r0
 800847e:	61e0      	str	r0, [r4, #28]
 8008480:	b920      	cbnz	r0, 800848c <_Balloc+0x20>
 8008482:	4b18      	ldr	r3, [pc, #96]	; (80084e4 <_Balloc+0x78>)
 8008484:	4818      	ldr	r0, [pc, #96]	; (80084e8 <_Balloc+0x7c>)
 8008486:	216b      	movs	r1, #107	; 0x6b
 8008488:	f000 fc38 	bl	8008cfc <__assert_func>
 800848c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008490:	6006      	str	r6, [r0, #0]
 8008492:	60c6      	str	r6, [r0, #12]
 8008494:	69e6      	ldr	r6, [r4, #28]
 8008496:	68f3      	ldr	r3, [r6, #12]
 8008498:	b183      	cbz	r3, 80084bc <_Balloc+0x50>
 800849a:	69e3      	ldr	r3, [r4, #28]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084a2:	b9b8      	cbnz	r0, 80084d4 <_Balloc+0x68>
 80084a4:	2101      	movs	r1, #1
 80084a6:	fa01 f605 	lsl.w	r6, r1, r5
 80084aa:	1d72      	adds	r2, r6, #5
 80084ac:	0092      	lsls	r2, r2, #2
 80084ae:	4620      	mov	r0, r4
 80084b0:	f000 fc42 	bl	8008d38 <_calloc_r>
 80084b4:	b160      	cbz	r0, 80084d0 <_Balloc+0x64>
 80084b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084ba:	e00e      	b.n	80084da <_Balloc+0x6e>
 80084bc:	2221      	movs	r2, #33	; 0x21
 80084be:	2104      	movs	r1, #4
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 fc39 	bl	8008d38 <_calloc_r>
 80084c6:	69e3      	ldr	r3, [r4, #28]
 80084c8:	60f0      	str	r0, [r6, #12]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e4      	bne.n	800849a <_Balloc+0x2e>
 80084d0:	2000      	movs	r0, #0
 80084d2:	bd70      	pop	{r4, r5, r6, pc}
 80084d4:	6802      	ldr	r2, [r0, #0]
 80084d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084da:	2300      	movs	r3, #0
 80084dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084e0:	e7f7      	b.n	80084d2 <_Balloc+0x66>
 80084e2:	bf00      	nop
 80084e4:	08009389 	.word	0x08009389
 80084e8:	08009409 	.word	0x08009409

080084ec <_Bfree>:
 80084ec:	b570      	push	{r4, r5, r6, lr}
 80084ee:	69c6      	ldr	r6, [r0, #28]
 80084f0:	4605      	mov	r5, r0
 80084f2:	460c      	mov	r4, r1
 80084f4:	b976      	cbnz	r6, 8008514 <_Bfree+0x28>
 80084f6:	2010      	movs	r0, #16
 80084f8:	f7ff ff04 	bl	8008304 <malloc>
 80084fc:	4602      	mov	r2, r0
 80084fe:	61e8      	str	r0, [r5, #28]
 8008500:	b920      	cbnz	r0, 800850c <_Bfree+0x20>
 8008502:	4b09      	ldr	r3, [pc, #36]	; (8008528 <_Bfree+0x3c>)
 8008504:	4809      	ldr	r0, [pc, #36]	; (800852c <_Bfree+0x40>)
 8008506:	218f      	movs	r1, #143	; 0x8f
 8008508:	f000 fbf8 	bl	8008cfc <__assert_func>
 800850c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008510:	6006      	str	r6, [r0, #0]
 8008512:	60c6      	str	r6, [r0, #12]
 8008514:	b13c      	cbz	r4, 8008526 <_Bfree+0x3a>
 8008516:	69eb      	ldr	r3, [r5, #28]
 8008518:	6862      	ldr	r2, [r4, #4]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008520:	6021      	str	r1, [r4, #0]
 8008522:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008526:	bd70      	pop	{r4, r5, r6, pc}
 8008528:	08009389 	.word	0x08009389
 800852c:	08009409 	.word	0x08009409

08008530 <__multadd>:
 8008530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008534:	690d      	ldr	r5, [r1, #16]
 8008536:	4607      	mov	r7, r0
 8008538:	460c      	mov	r4, r1
 800853a:	461e      	mov	r6, r3
 800853c:	f101 0c14 	add.w	ip, r1, #20
 8008540:	2000      	movs	r0, #0
 8008542:	f8dc 3000 	ldr.w	r3, [ip]
 8008546:	b299      	uxth	r1, r3
 8008548:	fb02 6101 	mla	r1, r2, r1, r6
 800854c:	0c1e      	lsrs	r6, r3, #16
 800854e:	0c0b      	lsrs	r3, r1, #16
 8008550:	fb02 3306 	mla	r3, r2, r6, r3
 8008554:	b289      	uxth	r1, r1
 8008556:	3001      	adds	r0, #1
 8008558:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800855c:	4285      	cmp	r5, r0
 800855e:	f84c 1b04 	str.w	r1, [ip], #4
 8008562:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008566:	dcec      	bgt.n	8008542 <__multadd+0x12>
 8008568:	b30e      	cbz	r6, 80085ae <__multadd+0x7e>
 800856a:	68a3      	ldr	r3, [r4, #8]
 800856c:	42ab      	cmp	r3, r5
 800856e:	dc19      	bgt.n	80085a4 <__multadd+0x74>
 8008570:	6861      	ldr	r1, [r4, #4]
 8008572:	4638      	mov	r0, r7
 8008574:	3101      	adds	r1, #1
 8008576:	f7ff ff79 	bl	800846c <_Balloc>
 800857a:	4680      	mov	r8, r0
 800857c:	b928      	cbnz	r0, 800858a <__multadd+0x5a>
 800857e:	4602      	mov	r2, r0
 8008580:	4b0c      	ldr	r3, [pc, #48]	; (80085b4 <__multadd+0x84>)
 8008582:	480d      	ldr	r0, [pc, #52]	; (80085b8 <__multadd+0x88>)
 8008584:	21ba      	movs	r1, #186	; 0xba
 8008586:	f000 fbb9 	bl	8008cfc <__assert_func>
 800858a:	6922      	ldr	r2, [r4, #16]
 800858c:	3202      	adds	r2, #2
 800858e:	f104 010c 	add.w	r1, r4, #12
 8008592:	0092      	lsls	r2, r2, #2
 8008594:	300c      	adds	r0, #12
 8008596:	f000 fba3 	bl	8008ce0 <memcpy>
 800859a:	4621      	mov	r1, r4
 800859c:	4638      	mov	r0, r7
 800859e:	f7ff ffa5 	bl	80084ec <_Bfree>
 80085a2:	4644      	mov	r4, r8
 80085a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085a8:	3501      	adds	r5, #1
 80085aa:	615e      	str	r6, [r3, #20]
 80085ac:	6125      	str	r5, [r4, #16]
 80085ae:	4620      	mov	r0, r4
 80085b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085b4:	080093f8 	.word	0x080093f8
 80085b8:	08009409 	.word	0x08009409

080085bc <__hi0bits>:
 80085bc:	0c03      	lsrs	r3, r0, #16
 80085be:	041b      	lsls	r3, r3, #16
 80085c0:	b9d3      	cbnz	r3, 80085f8 <__hi0bits+0x3c>
 80085c2:	0400      	lsls	r0, r0, #16
 80085c4:	2310      	movs	r3, #16
 80085c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80085ca:	bf04      	itt	eq
 80085cc:	0200      	lsleq	r0, r0, #8
 80085ce:	3308      	addeq	r3, #8
 80085d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80085d4:	bf04      	itt	eq
 80085d6:	0100      	lsleq	r0, r0, #4
 80085d8:	3304      	addeq	r3, #4
 80085da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80085de:	bf04      	itt	eq
 80085e0:	0080      	lsleq	r0, r0, #2
 80085e2:	3302      	addeq	r3, #2
 80085e4:	2800      	cmp	r0, #0
 80085e6:	db05      	blt.n	80085f4 <__hi0bits+0x38>
 80085e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80085ec:	f103 0301 	add.w	r3, r3, #1
 80085f0:	bf08      	it	eq
 80085f2:	2320      	moveq	r3, #32
 80085f4:	4618      	mov	r0, r3
 80085f6:	4770      	bx	lr
 80085f8:	2300      	movs	r3, #0
 80085fa:	e7e4      	b.n	80085c6 <__hi0bits+0xa>

080085fc <__lo0bits>:
 80085fc:	6803      	ldr	r3, [r0, #0]
 80085fe:	f013 0207 	ands.w	r2, r3, #7
 8008602:	d00c      	beq.n	800861e <__lo0bits+0x22>
 8008604:	07d9      	lsls	r1, r3, #31
 8008606:	d422      	bmi.n	800864e <__lo0bits+0x52>
 8008608:	079a      	lsls	r2, r3, #30
 800860a:	bf49      	itett	mi
 800860c:	085b      	lsrmi	r3, r3, #1
 800860e:	089b      	lsrpl	r3, r3, #2
 8008610:	6003      	strmi	r3, [r0, #0]
 8008612:	2201      	movmi	r2, #1
 8008614:	bf5c      	itt	pl
 8008616:	6003      	strpl	r3, [r0, #0]
 8008618:	2202      	movpl	r2, #2
 800861a:	4610      	mov	r0, r2
 800861c:	4770      	bx	lr
 800861e:	b299      	uxth	r1, r3
 8008620:	b909      	cbnz	r1, 8008626 <__lo0bits+0x2a>
 8008622:	0c1b      	lsrs	r3, r3, #16
 8008624:	2210      	movs	r2, #16
 8008626:	b2d9      	uxtb	r1, r3
 8008628:	b909      	cbnz	r1, 800862e <__lo0bits+0x32>
 800862a:	3208      	adds	r2, #8
 800862c:	0a1b      	lsrs	r3, r3, #8
 800862e:	0719      	lsls	r1, r3, #28
 8008630:	bf04      	itt	eq
 8008632:	091b      	lsreq	r3, r3, #4
 8008634:	3204      	addeq	r2, #4
 8008636:	0799      	lsls	r1, r3, #30
 8008638:	bf04      	itt	eq
 800863a:	089b      	lsreq	r3, r3, #2
 800863c:	3202      	addeq	r2, #2
 800863e:	07d9      	lsls	r1, r3, #31
 8008640:	d403      	bmi.n	800864a <__lo0bits+0x4e>
 8008642:	085b      	lsrs	r3, r3, #1
 8008644:	f102 0201 	add.w	r2, r2, #1
 8008648:	d003      	beq.n	8008652 <__lo0bits+0x56>
 800864a:	6003      	str	r3, [r0, #0]
 800864c:	e7e5      	b.n	800861a <__lo0bits+0x1e>
 800864e:	2200      	movs	r2, #0
 8008650:	e7e3      	b.n	800861a <__lo0bits+0x1e>
 8008652:	2220      	movs	r2, #32
 8008654:	e7e1      	b.n	800861a <__lo0bits+0x1e>
	...

08008658 <__i2b>:
 8008658:	b510      	push	{r4, lr}
 800865a:	460c      	mov	r4, r1
 800865c:	2101      	movs	r1, #1
 800865e:	f7ff ff05 	bl	800846c <_Balloc>
 8008662:	4602      	mov	r2, r0
 8008664:	b928      	cbnz	r0, 8008672 <__i2b+0x1a>
 8008666:	4b05      	ldr	r3, [pc, #20]	; (800867c <__i2b+0x24>)
 8008668:	4805      	ldr	r0, [pc, #20]	; (8008680 <__i2b+0x28>)
 800866a:	f240 1145 	movw	r1, #325	; 0x145
 800866e:	f000 fb45 	bl	8008cfc <__assert_func>
 8008672:	2301      	movs	r3, #1
 8008674:	6144      	str	r4, [r0, #20]
 8008676:	6103      	str	r3, [r0, #16]
 8008678:	bd10      	pop	{r4, pc}
 800867a:	bf00      	nop
 800867c:	080093f8 	.word	0x080093f8
 8008680:	08009409 	.word	0x08009409

08008684 <__multiply>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	4691      	mov	r9, r2
 800868a:	690a      	ldr	r2, [r1, #16]
 800868c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008690:	429a      	cmp	r2, r3
 8008692:	bfb8      	it	lt
 8008694:	460b      	movlt	r3, r1
 8008696:	460c      	mov	r4, r1
 8008698:	bfbc      	itt	lt
 800869a:	464c      	movlt	r4, r9
 800869c:	4699      	movlt	r9, r3
 800869e:	6927      	ldr	r7, [r4, #16]
 80086a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80086a4:	68a3      	ldr	r3, [r4, #8]
 80086a6:	6861      	ldr	r1, [r4, #4]
 80086a8:	eb07 060a 	add.w	r6, r7, sl
 80086ac:	42b3      	cmp	r3, r6
 80086ae:	b085      	sub	sp, #20
 80086b0:	bfb8      	it	lt
 80086b2:	3101      	addlt	r1, #1
 80086b4:	f7ff feda 	bl	800846c <_Balloc>
 80086b8:	b930      	cbnz	r0, 80086c8 <__multiply+0x44>
 80086ba:	4602      	mov	r2, r0
 80086bc:	4b44      	ldr	r3, [pc, #272]	; (80087d0 <__multiply+0x14c>)
 80086be:	4845      	ldr	r0, [pc, #276]	; (80087d4 <__multiply+0x150>)
 80086c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80086c4:	f000 fb1a 	bl	8008cfc <__assert_func>
 80086c8:	f100 0514 	add.w	r5, r0, #20
 80086cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086d0:	462b      	mov	r3, r5
 80086d2:	2200      	movs	r2, #0
 80086d4:	4543      	cmp	r3, r8
 80086d6:	d321      	bcc.n	800871c <__multiply+0x98>
 80086d8:	f104 0314 	add.w	r3, r4, #20
 80086dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086e0:	f109 0314 	add.w	r3, r9, #20
 80086e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086e8:	9202      	str	r2, [sp, #8]
 80086ea:	1b3a      	subs	r2, r7, r4
 80086ec:	3a15      	subs	r2, #21
 80086ee:	f022 0203 	bic.w	r2, r2, #3
 80086f2:	3204      	adds	r2, #4
 80086f4:	f104 0115 	add.w	r1, r4, #21
 80086f8:	428f      	cmp	r7, r1
 80086fa:	bf38      	it	cc
 80086fc:	2204      	movcc	r2, #4
 80086fe:	9201      	str	r2, [sp, #4]
 8008700:	9a02      	ldr	r2, [sp, #8]
 8008702:	9303      	str	r3, [sp, #12]
 8008704:	429a      	cmp	r2, r3
 8008706:	d80c      	bhi.n	8008722 <__multiply+0x9e>
 8008708:	2e00      	cmp	r6, #0
 800870a:	dd03      	ble.n	8008714 <__multiply+0x90>
 800870c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008710:	2b00      	cmp	r3, #0
 8008712:	d05b      	beq.n	80087cc <__multiply+0x148>
 8008714:	6106      	str	r6, [r0, #16]
 8008716:	b005      	add	sp, #20
 8008718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871c:	f843 2b04 	str.w	r2, [r3], #4
 8008720:	e7d8      	b.n	80086d4 <__multiply+0x50>
 8008722:	f8b3 a000 	ldrh.w	sl, [r3]
 8008726:	f1ba 0f00 	cmp.w	sl, #0
 800872a:	d024      	beq.n	8008776 <__multiply+0xf2>
 800872c:	f104 0e14 	add.w	lr, r4, #20
 8008730:	46a9      	mov	r9, r5
 8008732:	f04f 0c00 	mov.w	ip, #0
 8008736:	f85e 2b04 	ldr.w	r2, [lr], #4
 800873a:	f8d9 1000 	ldr.w	r1, [r9]
 800873e:	fa1f fb82 	uxth.w	fp, r2
 8008742:	b289      	uxth	r1, r1
 8008744:	fb0a 110b 	mla	r1, sl, fp, r1
 8008748:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800874c:	f8d9 2000 	ldr.w	r2, [r9]
 8008750:	4461      	add	r1, ip
 8008752:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008756:	fb0a c20b 	mla	r2, sl, fp, ip
 800875a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800875e:	b289      	uxth	r1, r1
 8008760:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008764:	4577      	cmp	r7, lr
 8008766:	f849 1b04 	str.w	r1, [r9], #4
 800876a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800876e:	d8e2      	bhi.n	8008736 <__multiply+0xb2>
 8008770:	9a01      	ldr	r2, [sp, #4]
 8008772:	f845 c002 	str.w	ip, [r5, r2]
 8008776:	9a03      	ldr	r2, [sp, #12]
 8008778:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800877c:	3304      	adds	r3, #4
 800877e:	f1b9 0f00 	cmp.w	r9, #0
 8008782:	d021      	beq.n	80087c8 <__multiply+0x144>
 8008784:	6829      	ldr	r1, [r5, #0]
 8008786:	f104 0c14 	add.w	ip, r4, #20
 800878a:	46ae      	mov	lr, r5
 800878c:	f04f 0a00 	mov.w	sl, #0
 8008790:	f8bc b000 	ldrh.w	fp, [ip]
 8008794:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008798:	fb09 220b 	mla	r2, r9, fp, r2
 800879c:	4452      	add	r2, sl
 800879e:	b289      	uxth	r1, r1
 80087a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087a4:	f84e 1b04 	str.w	r1, [lr], #4
 80087a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80087ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087b0:	f8be 1000 	ldrh.w	r1, [lr]
 80087b4:	fb09 110a 	mla	r1, r9, sl, r1
 80087b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80087bc:	4567      	cmp	r7, ip
 80087be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087c2:	d8e5      	bhi.n	8008790 <__multiply+0x10c>
 80087c4:	9a01      	ldr	r2, [sp, #4]
 80087c6:	50a9      	str	r1, [r5, r2]
 80087c8:	3504      	adds	r5, #4
 80087ca:	e799      	b.n	8008700 <__multiply+0x7c>
 80087cc:	3e01      	subs	r6, #1
 80087ce:	e79b      	b.n	8008708 <__multiply+0x84>
 80087d0:	080093f8 	.word	0x080093f8
 80087d4:	08009409 	.word	0x08009409

080087d8 <__pow5mult>:
 80087d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087dc:	4615      	mov	r5, r2
 80087de:	f012 0203 	ands.w	r2, r2, #3
 80087e2:	4606      	mov	r6, r0
 80087e4:	460f      	mov	r7, r1
 80087e6:	d007      	beq.n	80087f8 <__pow5mult+0x20>
 80087e8:	4c25      	ldr	r4, [pc, #148]	; (8008880 <__pow5mult+0xa8>)
 80087ea:	3a01      	subs	r2, #1
 80087ec:	2300      	movs	r3, #0
 80087ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087f2:	f7ff fe9d 	bl	8008530 <__multadd>
 80087f6:	4607      	mov	r7, r0
 80087f8:	10ad      	asrs	r5, r5, #2
 80087fa:	d03d      	beq.n	8008878 <__pow5mult+0xa0>
 80087fc:	69f4      	ldr	r4, [r6, #28]
 80087fe:	b97c      	cbnz	r4, 8008820 <__pow5mult+0x48>
 8008800:	2010      	movs	r0, #16
 8008802:	f7ff fd7f 	bl	8008304 <malloc>
 8008806:	4602      	mov	r2, r0
 8008808:	61f0      	str	r0, [r6, #28]
 800880a:	b928      	cbnz	r0, 8008818 <__pow5mult+0x40>
 800880c:	4b1d      	ldr	r3, [pc, #116]	; (8008884 <__pow5mult+0xac>)
 800880e:	481e      	ldr	r0, [pc, #120]	; (8008888 <__pow5mult+0xb0>)
 8008810:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008814:	f000 fa72 	bl	8008cfc <__assert_func>
 8008818:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800881c:	6004      	str	r4, [r0, #0]
 800881e:	60c4      	str	r4, [r0, #12]
 8008820:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008824:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008828:	b94c      	cbnz	r4, 800883e <__pow5mult+0x66>
 800882a:	f240 2171 	movw	r1, #625	; 0x271
 800882e:	4630      	mov	r0, r6
 8008830:	f7ff ff12 	bl	8008658 <__i2b>
 8008834:	2300      	movs	r3, #0
 8008836:	f8c8 0008 	str.w	r0, [r8, #8]
 800883a:	4604      	mov	r4, r0
 800883c:	6003      	str	r3, [r0, #0]
 800883e:	f04f 0900 	mov.w	r9, #0
 8008842:	07eb      	lsls	r3, r5, #31
 8008844:	d50a      	bpl.n	800885c <__pow5mult+0x84>
 8008846:	4639      	mov	r1, r7
 8008848:	4622      	mov	r2, r4
 800884a:	4630      	mov	r0, r6
 800884c:	f7ff ff1a 	bl	8008684 <__multiply>
 8008850:	4639      	mov	r1, r7
 8008852:	4680      	mov	r8, r0
 8008854:	4630      	mov	r0, r6
 8008856:	f7ff fe49 	bl	80084ec <_Bfree>
 800885a:	4647      	mov	r7, r8
 800885c:	106d      	asrs	r5, r5, #1
 800885e:	d00b      	beq.n	8008878 <__pow5mult+0xa0>
 8008860:	6820      	ldr	r0, [r4, #0]
 8008862:	b938      	cbnz	r0, 8008874 <__pow5mult+0x9c>
 8008864:	4622      	mov	r2, r4
 8008866:	4621      	mov	r1, r4
 8008868:	4630      	mov	r0, r6
 800886a:	f7ff ff0b 	bl	8008684 <__multiply>
 800886e:	6020      	str	r0, [r4, #0]
 8008870:	f8c0 9000 	str.w	r9, [r0]
 8008874:	4604      	mov	r4, r0
 8008876:	e7e4      	b.n	8008842 <__pow5mult+0x6a>
 8008878:	4638      	mov	r0, r7
 800887a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800887e:	bf00      	nop
 8008880:	08009558 	.word	0x08009558
 8008884:	08009389 	.word	0x08009389
 8008888:	08009409 	.word	0x08009409

0800888c <__lshift>:
 800888c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008890:	460c      	mov	r4, r1
 8008892:	6849      	ldr	r1, [r1, #4]
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800889a:	68a3      	ldr	r3, [r4, #8]
 800889c:	4607      	mov	r7, r0
 800889e:	4691      	mov	r9, r2
 80088a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088a4:	f108 0601 	add.w	r6, r8, #1
 80088a8:	42b3      	cmp	r3, r6
 80088aa:	db0b      	blt.n	80088c4 <__lshift+0x38>
 80088ac:	4638      	mov	r0, r7
 80088ae:	f7ff fddd 	bl	800846c <_Balloc>
 80088b2:	4605      	mov	r5, r0
 80088b4:	b948      	cbnz	r0, 80088ca <__lshift+0x3e>
 80088b6:	4602      	mov	r2, r0
 80088b8:	4b28      	ldr	r3, [pc, #160]	; (800895c <__lshift+0xd0>)
 80088ba:	4829      	ldr	r0, [pc, #164]	; (8008960 <__lshift+0xd4>)
 80088bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80088c0:	f000 fa1c 	bl	8008cfc <__assert_func>
 80088c4:	3101      	adds	r1, #1
 80088c6:	005b      	lsls	r3, r3, #1
 80088c8:	e7ee      	b.n	80088a8 <__lshift+0x1c>
 80088ca:	2300      	movs	r3, #0
 80088cc:	f100 0114 	add.w	r1, r0, #20
 80088d0:	f100 0210 	add.w	r2, r0, #16
 80088d4:	4618      	mov	r0, r3
 80088d6:	4553      	cmp	r3, sl
 80088d8:	db33      	blt.n	8008942 <__lshift+0xb6>
 80088da:	6920      	ldr	r0, [r4, #16]
 80088dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088e0:	f104 0314 	add.w	r3, r4, #20
 80088e4:	f019 091f 	ands.w	r9, r9, #31
 80088e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088f0:	d02b      	beq.n	800894a <__lshift+0xbe>
 80088f2:	f1c9 0e20 	rsb	lr, r9, #32
 80088f6:	468a      	mov	sl, r1
 80088f8:	2200      	movs	r2, #0
 80088fa:	6818      	ldr	r0, [r3, #0]
 80088fc:	fa00 f009 	lsl.w	r0, r0, r9
 8008900:	4310      	orrs	r0, r2
 8008902:	f84a 0b04 	str.w	r0, [sl], #4
 8008906:	f853 2b04 	ldr.w	r2, [r3], #4
 800890a:	459c      	cmp	ip, r3
 800890c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008910:	d8f3      	bhi.n	80088fa <__lshift+0x6e>
 8008912:	ebac 0304 	sub.w	r3, ip, r4
 8008916:	3b15      	subs	r3, #21
 8008918:	f023 0303 	bic.w	r3, r3, #3
 800891c:	3304      	adds	r3, #4
 800891e:	f104 0015 	add.w	r0, r4, #21
 8008922:	4584      	cmp	ip, r0
 8008924:	bf38      	it	cc
 8008926:	2304      	movcc	r3, #4
 8008928:	50ca      	str	r2, [r1, r3]
 800892a:	b10a      	cbz	r2, 8008930 <__lshift+0xa4>
 800892c:	f108 0602 	add.w	r6, r8, #2
 8008930:	3e01      	subs	r6, #1
 8008932:	4638      	mov	r0, r7
 8008934:	612e      	str	r6, [r5, #16]
 8008936:	4621      	mov	r1, r4
 8008938:	f7ff fdd8 	bl	80084ec <_Bfree>
 800893c:	4628      	mov	r0, r5
 800893e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008942:	f842 0f04 	str.w	r0, [r2, #4]!
 8008946:	3301      	adds	r3, #1
 8008948:	e7c5      	b.n	80088d6 <__lshift+0x4a>
 800894a:	3904      	subs	r1, #4
 800894c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008950:	f841 2f04 	str.w	r2, [r1, #4]!
 8008954:	459c      	cmp	ip, r3
 8008956:	d8f9      	bhi.n	800894c <__lshift+0xc0>
 8008958:	e7ea      	b.n	8008930 <__lshift+0xa4>
 800895a:	bf00      	nop
 800895c:	080093f8 	.word	0x080093f8
 8008960:	08009409 	.word	0x08009409

08008964 <__mcmp>:
 8008964:	b530      	push	{r4, r5, lr}
 8008966:	6902      	ldr	r2, [r0, #16]
 8008968:	690c      	ldr	r4, [r1, #16]
 800896a:	1b12      	subs	r2, r2, r4
 800896c:	d10e      	bne.n	800898c <__mcmp+0x28>
 800896e:	f100 0314 	add.w	r3, r0, #20
 8008972:	3114      	adds	r1, #20
 8008974:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008978:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800897c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008980:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008984:	42a5      	cmp	r5, r4
 8008986:	d003      	beq.n	8008990 <__mcmp+0x2c>
 8008988:	d305      	bcc.n	8008996 <__mcmp+0x32>
 800898a:	2201      	movs	r2, #1
 800898c:	4610      	mov	r0, r2
 800898e:	bd30      	pop	{r4, r5, pc}
 8008990:	4283      	cmp	r3, r0
 8008992:	d3f3      	bcc.n	800897c <__mcmp+0x18>
 8008994:	e7fa      	b.n	800898c <__mcmp+0x28>
 8008996:	f04f 32ff 	mov.w	r2, #4294967295
 800899a:	e7f7      	b.n	800898c <__mcmp+0x28>

0800899c <__mdiff>:
 800899c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	460c      	mov	r4, r1
 80089a2:	4606      	mov	r6, r0
 80089a4:	4611      	mov	r1, r2
 80089a6:	4620      	mov	r0, r4
 80089a8:	4690      	mov	r8, r2
 80089aa:	f7ff ffdb 	bl	8008964 <__mcmp>
 80089ae:	1e05      	subs	r5, r0, #0
 80089b0:	d110      	bne.n	80089d4 <__mdiff+0x38>
 80089b2:	4629      	mov	r1, r5
 80089b4:	4630      	mov	r0, r6
 80089b6:	f7ff fd59 	bl	800846c <_Balloc>
 80089ba:	b930      	cbnz	r0, 80089ca <__mdiff+0x2e>
 80089bc:	4b3a      	ldr	r3, [pc, #232]	; (8008aa8 <__mdiff+0x10c>)
 80089be:	4602      	mov	r2, r0
 80089c0:	f240 2137 	movw	r1, #567	; 0x237
 80089c4:	4839      	ldr	r0, [pc, #228]	; (8008aac <__mdiff+0x110>)
 80089c6:	f000 f999 	bl	8008cfc <__assert_func>
 80089ca:	2301      	movs	r3, #1
 80089cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d4:	bfa4      	itt	ge
 80089d6:	4643      	movge	r3, r8
 80089d8:	46a0      	movge	r8, r4
 80089da:	4630      	mov	r0, r6
 80089dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80089e0:	bfa6      	itte	ge
 80089e2:	461c      	movge	r4, r3
 80089e4:	2500      	movge	r5, #0
 80089e6:	2501      	movlt	r5, #1
 80089e8:	f7ff fd40 	bl	800846c <_Balloc>
 80089ec:	b920      	cbnz	r0, 80089f8 <__mdiff+0x5c>
 80089ee:	4b2e      	ldr	r3, [pc, #184]	; (8008aa8 <__mdiff+0x10c>)
 80089f0:	4602      	mov	r2, r0
 80089f2:	f240 2145 	movw	r1, #581	; 0x245
 80089f6:	e7e5      	b.n	80089c4 <__mdiff+0x28>
 80089f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80089fc:	6926      	ldr	r6, [r4, #16]
 80089fe:	60c5      	str	r5, [r0, #12]
 8008a00:	f104 0914 	add.w	r9, r4, #20
 8008a04:	f108 0514 	add.w	r5, r8, #20
 8008a08:	f100 0e14 	add.w	lr, r0, #20
 8008a0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a14:	f108 0210 	add.w	r2, r8, #16
 8008a18:	46f2      	mov	sl, lr
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a24:	fa11 f88b 	uxtah	r8, r1, fp
 8008a28:	b299      	uxth	r1, r3
 8008a2a:	0c1b      	lsrs	r3, r3, #16
 8008a2c:	eba8 0801 	sub.w	r8, r8, r1
 8008a30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a34:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a38:	fa1f f888 	uxth.w	r8, r8
 8008a3c:	1419      	asrs	r1, r3, #16
 8008a3e:	454e      	cmp	r6, r9
 8008a40:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a44:	f84a 3b04 	str.w	r3, [sl], #4
 8008a48:	d8e8      	bhi.n	8008a1c <__mdiff+0x80>
 8008a4a:	1b33      	subs	r3, r6, r4
 8008a4c:	3b15      	subs	r3, #21
 8008a4e:	f023 0303 	bic.w	r3, r3, #3
 8008a52:	3304      	adds	r3, #4
 8008a54:	3415      	adds	r4, #21
 8008a56:	42a6      	cmp	r6, r4
 8008a58:	bf38      	it	cc
 8008a5a:	2304      	movcc	r3, #4
 8008a5c:	441d      	add	r5, r3
 8008a5e:	4473      	add	r3, lr
 8008a60:	469e      	mov	lr, r3
 8008a62:	462e      	mov	r6, r5
 8008a64:	4566      	cmp	r6, ip
 8008a66:	d30e      	bcc.n	8008a86 <__mdiff+0xea>
 8008a68:	f10c 0203 	add.w	r2, ip, #3
 8008a6c:	1b52      	subs	r2, r2, r5
 8008a6e:	f022 0203 	bic.w	r2, r2, #3
 8008a72:	3d03      	subs	r5, #3
 8008a74:	45ac      	cmp	ip, r5
 8008a76:	bf38      	it	cc
 8008a78:	2200      	movcc	r2, #0
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008a80:	b17a      	cbz	r2, 8008aa2 <__mdiff+0x106>
 8008a82:	6107      	str	r7, [r0, #16]
 8008a84:	e7a4      	b.n	80089d0 <__mdiff+0x34>
 8008a86:	f856 8b04 	ldr.w	r8, [r6], #4
 8008a8a:	fa11 f288 	uxtah	r2, r1, r8
 8008a8e:	1414      	asrs	r4, r2, #16
 8008a90:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a94:	b292      	uxth	r2, r2
 8008a96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008a9a:	f84e 2b04 	str.w	r2, [lr], #4
 8008a9e:	1421      	asrs	r1, r4, #16
 8008aa0:	e7e0      	b.n	8008a64 <__mdiff+0xc8>
 8008aa2:	3f01      	subs	r7, #1
 8008aa4:	e7ea      	b.n	8008a7c <__mdiff+0xe0>
 8008aa6:	bf00      	nop
 8008aa8:	080093f8 	.word	0x080093f8
 8008aac:	08009409 	.word	0x08009409

08008ab0 <__d2b>:
 8008ab0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ab4:	460f      	mov	r7, r1
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	ec59 8b10 	vmov	r8, r9, d0
 8008abc:	4616      	mov	r6, r2
 8008abe:	f7ff fcd5 	bl	800846c <_Balloc>
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	b930      	cbnz	r0, 8008ad4 <__d2b+0x24>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	4b24      	ldr	r3, [pc, #144]	; (8008b5c <__d2b+0xac>)
 8008aca:	4825      	ldr	r0, [pc, #148]	; (8008b60 <__d2b+0xb0>)
 8008acc:	f240 310f 	movw	r1, #783	; 0x30f
 8008ad0:	f000 f914 	bl	8008cfc <__assert_func>
 8008ad4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008adc:	bb2d      	cbnz	r5, 8008b2a <__d2b+0x7a>
 8008ade:	9301      	str	r3, [sp, #4]
 8008ae0:	f1b8 0300 	subs.w	r3, r8, #0
 8008ae4:	d026      	beq.n	8008b34 <__d2b+0x84>
 8008ae6:	4668      	mov	r0, sp
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	f7ff fd87 	bl	80085fc <__lo0bits>
 8008aee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008af2:	b1e8      	cbz	r0, 8008b30 <__d2b+0x80>
 8008af4:	f1c0 0320 	rsb	r3, r0, #32
 8008af8:	fa02 f303 	lsl.w	r3, r2, r3
 8008afc:	430b      	orrs	r3, r1
 8008afe:	40c2      	lsrs	r2, r0
 8008b00:	6163      	str	r3, [r4, #20]
 8008b02:	9201      	str	r2, [sp, #4]
 8008b04:	9b01      	ldr	r3, [sp, #4]
 8008b06:	61a3      	str	r3, [r4, #24]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	bf14      	ite	ne
 8008b0c:	2202      	movne	r2, #2
 8008b0e:	2201      	moveq	r2, #1
 8008b10:	6122      	str	r2, [r4, #16]
 8008b12:	b1bd      	cbz	r5, 8008b44 <__d2b+0x94>
 8008b14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b18:	4405      	add	r5, r0
 8008b1a:	603d      	str	r5, [r7, #0]
 8008b1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b20:	6030      	str	r0, [r6, #0]
 8008b22:	4620      	mov	r0, r4
 8008b24:	b003      	add	sp, #12
 8008b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b2e:	e7d6      	b.n	8008ade <__d2b+0x2e>
 8008b30:	6161      	str	r1, [r4, #20]
 8008b32:	e7e7      	b.n	8008b04 <__d2b+0x54>
 8008b34:	a801      	add	r0, sp, #4
 8008b36:	f7ff fd61 	bl	80085fc <__lo0bits>
 8008b3a:	9b01      	ldr	r3, [sp, #4]
 8008b3c:	6163      	str	r3, [r4, #20]
 8008b3e:	3020      	adds	r0, #32
 8008b40:	2201      	movs	r2, #1
 8008b42:	e7e5      	b.n	8008b10 <__d2b+0x60>
 8008b44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b4c:	6038      	str	r0, [r7, #0]
 8008b4e:	6918      	ldr	r0, [r3, #16]
 8008b50:	f7ff fd34 	bl	80085bc <__hi0bits>
 8008b54:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b58:	e7e2      	b.n	8008b20 <__d2b+0x70>
 8008b5a:	bf00      	nop
 8008b5c:	080093f8 	.word	0x080093f8
 8008b60:	08009409 	.word	0x08009409

08008b64 <__sflush_r>:
 8008b64:	898a      	ldrh	r2, [r1, #12]
 8008b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	0710      	lsls	r0, r2, #28
 8008b6e:	460c      	mov	r4, r1
 8008b70:	d458      	bmi.n	8008c24 <__sflush_r+0xc0>
 8008b72:	684b      	ldr	r3, [r1, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dc05      	bgt.n	8008b84 <__sflush_r+0x20>
 8008b78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	dc02      	bgt.n	8008b84 <__sflush_r+0x20>
 8008b7e:	2000      	movs	r0, #0
 8008b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b86:	2e00      	cmp	r6, #0
 8008b88:	d0f9      	beq.n	8008b7e <__sflush_r+0x1a>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b90:	682f      	ldr	r7, [r5, #0]
 8008b92:	6a21      	ldr	r1, [r4, #32]
 8008b94:	602b      	str	r3, [r5, #0]
 8008b96:	d032      	beq.n	8008bfe <__sflush_r+0x9a>
 8008b98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	075a      	lsls	r2, r3, #29
 8008b9e:	d505      	bpl.n	8008bac <__sflush_r+0x48>
 8008ba0:	6863      	ldr	r3, [r4, #4]
 8008ba2:	1ac0      	subs	r0, r0, r3
 8008ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ba6:	b10b      	cbz	r3, 8008bac <__sflush_r+0x48>
 8008ba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008baa:	1ac0      	subs	r0, r0, r3
 8008bac:	2300      	movs	r3, #0
 8008bae:	4602      	mov	r2, r0
 8008bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bb2:	6a21      	ldr	r1, [r4, #32]
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	47b0      	blx	r6
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	89a3      	ldrh	r3, [r4, #12]
 8008bbc:	d106      	bne.n	8008bcc <__sflush_r+0x68>
 8008bbe:	6829      	ldr	r1, [r5, #0]
 8008bc0:	291d      	cmp	r1, #29
 8008bc2:	d82b      	bhi.n	8008c1c <__sflush_r+0xb8>
 8008bc4:	4a29      	ldr	r2, [pc, #164]	; (8008c6c <__sflush_r+0x108>)
 8008bc6:	410a      	asrs	r2, r1
 8008bc8:	07d6      	lsls	r6, r2, #31
 8008bca:	d427      	bmi.n	8008c1c <__sflush_r+0xb8>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	6062      	str	r2, [r4, #4]
 8008bd0:	04d9      	lsls	r1, r3, #19
 8008bd2:	6922      	ldr	r2, [r4, #16]
 8008bd4:	6022      	str	r2, [r4, #0]
 8008bd6:	d504      	bpl.n	8008be2 <__sflush_r+0x7e>
 8008bd8:	1c42      	adds	r2, r0, #1
 8008bda:	d101      	bne.n	8008be0 <__sflush_r+0x7c>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	b903      	cbnz	r3, 8008be2 <__sflush_r+0x7e>
 8008be0:	6560      	str	r0, [r4, #84]	; 0x54
 8008be2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008be4:	602f      	str	r7, [r5, #0]
 8008be6:	2900      	cmp	r1, #0
 8008be8:	d0c9      	beq.n	8008b7e <__sflush_r+0x1a>
 8008bea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bee:	4299      	cmp	r1, r3
 8008bf0:	d002      	beq.n	8008bf8 <__sflush_r+0x94>
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	f7ff fb3a 	bl	800826c <_free_r>
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	6360      	str	r0, [r4, #52]	; 0x34
 8008bfc:	e7c0      	b.n	8008b80 <__sflush_r+0x1c>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	4628      	mov	r0, r5
 8008c02:	47b0      	blx	r6
 8008c04:	1c41      	adds	r1, r0, #1
 8008c06:	d1c8      	bne.n	8008b9a <__sflush_r+0x36>
 8008c08:	682b      	ldr	r3, [r5, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0c5      	beq.n	8008b9a <__sflush_r+0x36>
 8008c0e:	2b1d      	cmp	r3, #29
 8008c10:	d001      	beq.n	8008c16 <__sflush_r+0xb2>
 8008c12:	2b16      	cmp	r3, #22
 8008c14:	d101      	bne.n	8008c1a <__sflush_r+0xb6>
 8008c16:	602f      	str	r7, [r5, #0]
 8008c18:	e7b1      	b.n	8008b7e <__sflush_r+0x1a>
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c20:	81a3      	strh	r3, [r4, #12]
 8008c22:	e7ad      	b.n	8008b80 <__sflush_r+0x1c>
 8008c24:	690f      	ldr	r7, [r1, #16]
 8008c26:	2f00      	cmp	r7, #0
 8008c28:	d0a9      	beq.n	8008b7e <__sflush_r+0x1a>
 8008c2a:	0793      	lsls	r3, r2, #30
 8008c2c:	680e      	ldr	r6, [r1, #0]
 8008c2e:	bf08      	it	eq
 8008c30:	694b      	ldreq	r3, [r1, #20]
 8008c32:	600f      	str	r7, [r1, #0]
 8008c34:	bf18      	it	ne
 8008c36:	2300      	movne	r3, #0
 8008c38:	eba6 0807 	sub.w	r8, r6, r7
 8008c3c:	608b      	str	r3, [r1, #8]
 8008c3e:	f1b8 0f00 	cmp.w	r8, #0
 8008c42:	dd9c      	ble.n	8008b7e <__sflush_r+0x1a>
 8008c44:	6a21      	ldr	r1, [r4, #32]
 8008c46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c48:	4643      	mov	r3, r8
 8008c4a:	463a      	mov	r2, r7
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	47b0      	blx	r6
 8008c50:	2800      	cmp	r0, #0
 8008c52:	dc06      	bgt.n	8008c62 <__sflush_r+0xfe>
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c5a:	81a3      	strh	r3, [r4, #12]
 8008c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c60:	e78e      	b.n	8008b80 <__sflush_r+0x1c>
 8008c62:	4407      	add	r7, r0
 8008c64:	eba8 0800 	sub.w	r8, r8, r0
 8008c68:	e7e9      	b.n	8008c3e <__sflush_r+0xda>
 8008c6a:	bf00      	nop
 8008c6c:	dfbffffe 	.word	0xdfbffffe

08008c70 <_fflush_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	690b      	ldr	r3, [r1, #16]
 8008c74:	4605      	mov	r5, r0
 8008c76:	460c      	mov	r4, r1
 8008c78:	b913      	cbnz	r3, 8008c80 <_fflush_r+0x10>
 8008c7a:	2500      	movs	r5, #0
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	b118      	cbz	r0, 8008c8a <_fflush_r+0x1a>
 8008c82:	6a03      	ldr	r3, [r0, #32]
 8008c84:	b90b      	cbnz	r3, 8008c8a <_fflush_r+0x1a>
 8008c86:	f7fe fb7d 	bl	8007384 <__sinit>
 8008c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0f3      	beq.n	8008c7a <_fflush_r+0xa>
 8008c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c94:	07d0      	lsls	r0, r2, #31
 8008c96:	d404      	bmi.n	8008ca2 <_fflush_r+0x32>
 8008c98:	0599      	lsls	r1, r3, #22
 8008c9a:	d402      	bmi.n	8008ca2 <_fflush_r+0x32>
 8008c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c9e:	f7fe fc68 	bl	8007572 <__retarget_lock_acquire_recursive>
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	f7ff ff5d 	bl	8008b64 <__sflush_r>
 8008caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cac:	07da      	lsls	r2, r3, #31
 8008cae:	4605      	mov	r5, r0
 8008cb0:	d4e4      	bmi.n	8008c7c <_fflush_r+0xc>
 8008cb2:	89a3      	ldrh	r3, [r4, #12]
 8008cb4:	059b      	lsls	r3, r3, #22
 8008cb6:	d4e1      	bmi.n	8008c7c <_fflush_r+0xc>
 8008cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cba:	f7fe fc5b 	bl	8007574 <__retarget_lock_release_recursive>
 8008cbe:	e7dd      	b.n	8008c7c <_fflush_r+0xc>

08008cc0 <_sbrk_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4d06      	ldr	r5, [pc, #24]	; (8008cdc <_sbrk_r+0x1c>)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	4608      	mov	r0, r1
 8008cca:	602b      	str	r3, [r5, #0]
 8008ccc:	f7f9 f9a6 	bl	800201c <_sbrk>
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	d102      	bne.n	8008cda <_sbrk_r+0x1a>
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	b103      	cbz	r3, 8008cda <_sbrk_r+0x1a>
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	bd38      	pop	{r3, r4, r5, pc}
 8008cdc:	20000778 	.word	0x20000778

08008ce0 <memcpy>:
 8008ce0:	440a      	add	r2, r1
 8008ce2:	4291      	cmp	r1, r2
 8008ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ce8:	d100      	bne.n	8008cec <memcpy+0xc>
 8008cea:	4770      	bx	lr
 8008cec:	b510      	push	{r4, lr}
 8008cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cf6:	4291      	cmp	r1, r2
 8008cf8:	d1f9      	bne.n	8008cee <memcpy+0xe>
 8008cfa:	bd10      	pop	{r4, pc}

08008cfc <__assert_func>:
 8008cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cfe:	4614      	mov	r4, r2
 8008d00:	461a      	mov	r2, r3
 8008d02:	4b09      	ldr	r3, [pc, #36]	; (8008d28 <__assert_func+0x2c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4605      	mov	r5, r0
 8008d08:	68d8      	ldr	r0, [r3, #12]
 8008d0a:	b14c      	cbz	r4, 8008d20 <__assert_func+0x24>
 8008d0c:	4b07      	ldr	r3, [pc, #28]	; (8008d2c <__assert_func+0x30>)
 8008d0e:	9100      	str	r1, [sp, #0]
 8008d10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d14:	4906      	ldr	r1, [pc, #24]	; (8008d30 <__assert_func+0x34>)
 8008d16:	462b      	mov	r3, r5
 8008d18:	f000 f844 	bl	8008da4 <fiprintf>
 8008d1c:	f000 f854 	bl	8008dc8 <abort>
 8008d20:	4b04      	ldr	r3, [pc, #16]	; (8008d34 <__assert_func+0x38>)
 8008d22:	461c      	mov	r4, r3
 8008d24:	e7f3      	b.n	8008d0e <__assert_func+0x12>
 8008d26:	bf00      	nop
 8008d28:	200000f4 	.word	0x200000f4
 8008d2c:	0800956e 	.word	0x0800956e
 8008d30:	0800957b 	.word	0x0800957b
 8008d34:	080095a9 	.word	0x080095a9

08008d38 <_calloc_r>:
 8008d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d3a:	fba1 2402 	umull	r2, r4, r1, r2
 8008d3e:	b94c      	cbnz	r4, 8008d54 <_calloc_r+0x1c>
 8008d40:	4611      	mov	r1, r2
 8008d42:	9201      	str	r2, [sp, #4]
 8008d44:	f7ff fb06 	bl	8008354 <_malloc_r>
 8008d48:	9a01      	ldr	r2, [sp, #4]
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	b930      	cbnz	r0, 8008d5c <_calloc_r+0x24>
 8008d4e:	4628      	mov	r0, r5
 8008d50:	b003      	add	sp, #12
 8008d52:	bd30      	pop	{r4, r5, pc}
 8008d54:	220c      	movs	r2, #12
 8008d56:	6002      	str	r2, [r0, #0]
 8008d58:	2500      	movs	r5, #0
 8008d5a:	e7f8      	b.n	8008d4e <_calloc_r+0x16>
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	f7fe fb8a 	bl	8007476 <memset>
 8008d62:	e7f4      	b.n	8008d4e <_calloc_r+0x16>

08008d64 <__ascii_mbtowc>:
 8008d64:	b082      	sub	sp, #8
 8008d66:	b901      	cbnz	r1, 8008d6a <__ascii_mbtowc+0x6>
 8008d68:	a901      	add	r1, sp, #4
 8008d6a:	b142      	cbz	r2, 8008d7e <__ascii_mbtowc+0x1a>
 8008d6c:	b14b      	cbz	r3, 8008d82 <__ascii_mbtowc+0x1e>
 8008d6e:	7813      	ldrb	r3, [r2, #0]
 8008d70:	600b      	str	r3, [r1, #0]
 8008d72:	7812      	ldrb	r2, [r2, #0]
 8008d74:	1e10      	subs	r0, r2, #0
 8008d76:	bf18      	it	ne
 8008d78:	2001      	movne	r0, #1
 8008d7a:	b002      	add	sp, #8
 8008d7c:	4770      	bx	lr
 8008d7e:	4610      	mov	r0, r2
 8008d80:	e7fb      	b.n	8008d7a <__ascii_mbtowc+0x16>
 8008d82:	f06f 0001 	mvn.w	r0, #1
 8008d86:	e7f8      	b.n	8008d7a <__ascii_mbtowc+0x16>

08008d88 <__ascii_wctomb>:
 8008d88:	b149      	cbz	r1, 8008d9e <__ascii_wctomb+0x16>
 8008d8a:	2aff      	cmp	r2, #255	; 0xff
 8008d8c:	bf85      	ittet	hi
 8008d8e:	238a      	movhi	r3, #138	; 0x8a
 8008d90:	6003      	strhi	r3, [r0, #0]
 8008d92:	700a      	strbls	r2, [r1, #0]
 8008d94:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d98:	bf98      	it	ls
 8008d9a:	2001      	movls	r0, #1
 8008d9c:	4770      	bx	lr
 8008d9e:	4608      	mov	r0, r1
 8008da0:	4770      	bx	lr
	...

08008da4 <fiprintf>:
 8008da4:	b40e      	push	{r1, r2, r3}
 8008da6:	b503      	push	{r0, r1, lr}
 8008da8:	4601      	mov	r1, r0
 8008daa:	ab03      	add	r3, sp, #12
 8008dac:	4805      	ldr	r0, [pc, #20]	; (8008dc4 <fiprintf+0x20>)
 8008dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008db2:	6800      	ldr	r0, [r0, #0]
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	f000 f837 	bl	8008e28 <_vfiprintf_r>
 8008dba:	b002      	add	sp, #8
 8008dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dc0:	b003      	add	sp, #12
 8008dc2:	4770      	bx	lr
 8008dc4:	200000f4 	.word	0x200000f4

08008dc8 <abort>:
 8008dc8:	b508      	push	{r3, lr}
 8008dca:	2006      	movs	r0, #6
 8008dcc:	f000 fa04 	bl	80091d8 <raise>
 8008dd0:	2001      	movs	r0, #1
 8008dd2:	f7f9 f8ab 	bl	8001f2c <_exit>

08008dd6 <__sfputc_r>:
 8008dd6:	6893      	ldr	r3, [r2, #8]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	b410      	push	{r4}
 8008dde:	6093      	str	r3, [r2, #8]
 8008de0:	da08      	bge.n	8008df4 <__sfputc_r+0x1e>
 8008de2:	6994      	ldr	r4, [r2, #24]
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	db01      	blt.n	8008dec <__sfputc_r+0x16>
 8008de8:	290a      	cmp	r1, #10
 8008dea:	d103      	bne.n	8008df4 <__sfputc_r+0x1e>
 8008dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008df0:	f000 b934 	b.w	800905c <__swbuf_r>
 8008df4:	6813      	ldr	r3, [r2, #0]
 8008df6:	1c58      	adds	r0, r3, #1
 8008df8:	6010      	str	r0, [r2, #0]
 8008dfa:	7019      	strb	r1, [r3, #0]
 8008dfc:	4608      	mov	r0, r1
 8008dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <__sfputs_r>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	4606      	mov	r6, r0
 8008e08:	460f      	mov	r7, r1
 8008e0a:	4614      	mov	r4, r2
 8008e0c:	18d5      	adds	r5, r2, r3
 8008e0e:	42ac      	cmp	r4, r5
 8008e10:	d101      	bne.n	8008e16 <__sfputs_r+0x12>
 8008e12:	2000      	movs	r0, #0
 8008e14:	e007      	b.n	8008e26 <__sfputs_r+0x22>
 8008e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1a:	463a      	mov	r2, r7
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f7ff ffda 	bl	8008dd6 <__sfputc_r>
 8008e22:	1c43      	adds	r3, r0, #1
 8008e24:	d1f3      	bne.n	8008e0e <__sfputs_r+0xa>
 8008e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e28 <_vfiprintf_r>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	460d      	mov	r5, r1
 8008e2e:	b09d      	sub	sp, #116	; 0x74
 8008e30:	4614      	mov	r4, r2
 8008e32:	4698      	mov	r8, r3
 8008e34:	4606      	mov	r6, r0
 8008e36:	b118      	cbz	r0, 8008e40 <_vfiprintf_r+0x18>
 8008e38:	6a03      	ldr	r3, [r0, #32]
 8008e3a:	b90b      	cbnz	r3, 8008e40 <_vfiprintf_r+0x18>
 8008e3c:	f7fe faa2 	bl	8007384 <__sinit>
 8008e40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e42:	07d9      	lsls	r1, r3, #31
 8008e44:	d405      	bmi.n	8008e52 <_vfiprintf_r+0x2a>
 8008e46:	89ab      	ldrh	r3, [r5, #12]
 8008e48:	059a      	lsls	r2, r3, #22
 8008e4a:	d402      	bmi.n	8008e52 <_vfiprintf_r+0x2a>
 8008e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e4e:	f7fe fb90 	bl	8007572 <__retarget_lock_acquire_recursive>
 8008e52:	89ab      	ldrh	r3, [r5, #12]
 8008e54:	071b      	lsls	r3, r3, #28
 8008e56:	d501      	bpl.n	8008e5c <_vfiprintf_r+0x34>
 8008e58:	692b      	ldr	r3, [r5, #16]
 8008e5a:	b99b      	cbnz	r3, 8008e84 <_vfiprintf_r+0x5c>
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	4630      	mov	r0, r6
 8008e60:	f000 f93a 	bl	80090d8 <__swsetup_r>
 8008e64:	b170      	cbz	r0, 8008e84 <_vfiprintf_r+0x5c>
 8008e66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e68:	07dc      	lsls	r4, r3, #31
 8008e6a:	d504      	bpl.n	8008e76 <_vfiprintf_r+0x4e>
 8008e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e70:	b01d      	add	sp, #116	; 0x74
 8008e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e76:	89ab      	ldrh	r3, [r5, #12]
 8008e78:	0598      	lsls	r0, r3, #22
 8008e7a:	d4f7      	bmi.n	8008e6c <_vfiprintf_r+0x44>
 8008e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e7e:	f7fe fb79 	bl	8007574 <__retarget_lock_release_recursive>
 8008e82:	e7f3      	b.n	8008e6c <_vfiprintf_r+0x44>
 8008e84:	2300      	movs	r3, #0
 8008e86:	9309      	str	r3, [sp, #36]	; 0x24
 8008e88:	2320      	movs	r3, #32
 8008e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e92:	2330      	movs	r3, #48	; 0x30
 8008e94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009048 <_vfiprintf_r+0x220>
 8008e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e9c:	f04f 0901 	mov.w	r9, #1
 8008ea0:	4623      	mov	r3, r4
 8008ea2:	469a      	mov	sl, r3
 8008ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ea8:	b10a      	cbz	r2, 8008eae <_vfiprintf_r+0x86>
 8008eaa:	2a25      	cmp	r2, #37	; 0x25
 8008eac:	d1f9      	bne.n	8008ea2 <_vfiprintf_r+0x7a>
 8008eae:	ebba 0b04 	subs.w	fp, sl, r4
 8008eb2:	d00b      	beq.n	8008ecc <_vfiprintf_r+0xa4>
 8008eb4:	465b      	mov	r3, fp
 8008eb6:	4622      	mov	r2, r4
 8008eb8:	4629      	mov	r1, r5
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f7ff ffa2 	bl	8008e04 <__sfputs_r>
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	f000 80a9 	beq.w	8009018 <_vfiprintf_r+0x1f0>
 8008ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ec8:	445a      	add	r2, fp
 8008eca:	9209      	str	r2, [sp, #36]	; 0x24
 8008ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 80a1 	beq.w	8009018 <_vfiprintf_r+0x1f0>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8008edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ee0:	f10a 0a01 	add.w	sl, sl, #1
 8008ee4:	9304      	str	r3, [sp, #16]
 8008ee6:	9307      	str	r3, [sp, #28]
 8008ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eec:	931a      	str	r3, [sp, #104]	; 0x68
 8008eee:	4654      	mov	r4, sl
 8008ef0:	2205      	movs	r2, #5
 8008ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef6:	4854      	ldr	r0, [pc, #336]	; (8009048 <_vfiprintf_r+0x220>)
 8008ef8:	f7f7 f972 	bl	80001e0 <memchr>
 8008efc:	9a04      	ldr	r2, [sp, #16]
 8008efe:	b9d8      	cbnz	r0, 8008f38 <_vfiprintf_r+0x110>
 8008f00:	06d1      	lsls	r1, r2, #27
 8008f02:	bf44      	itt	mi
 8008f04:	2320      	movmi	r3, #32
 8008f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f0a:	0713      	lsls	r3, r2, #28
 8008f0c:	bf44      	itt	mi
 8008f0e:	232b      	movmi	r3, #43	; 0x2b
 8008f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f14:	f89a 3000 	ldrb.w	r3, [sl]
 8008f18:	2b2a      	cmp	r3, #42	; 0x2a
 8008f1a:	d015      	beq.n	8008f48 <_vfiprintf_r+0x120>
 8008f1c:	9a07      	ldr	r2, [sp, #28]
 8008f1e:	4654      	mov	r4, sl
 8008f20:	2000      	movs	r0, #0
 8008f22:	f04f 0c0a 	mov.w	ip, #10
 8008f26:	4621      	mov	r1, r4
 8008f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f2c:	3b30      	subs	r3, #48	; 0x30
 8008f2e:	2b09      	cmp	r3, #9
 8008f30:	d94d      	bls.n	8008fce <_vfiprintf_r+0x1a6>
 8008f32:	b1b0      	cbz	r0, 8008f62 <_vfiprintf_r+0x13a>
 8008f34:	9207      	str	r2, [sp, #28]
 8008f36:	e014      	b.n	8008f62 <_vfiprintf_r+0x13a>
 8008f38:	eba0 0308 	sub.w	r3, r0, r8
 8008f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8008f40:	4313      	orrs	r3, r2
 8008f42:	9304      	str	r3, [sp, #16]
 8008f44:	46a2      	mov	sl, r4
 8008f46:	e7d2      	b.n	8008eee <_vfiprintf_r+0xc6>
 8008f48:	9b03      	ldr	r3, [sp, #12]
 8008f4a:	1d19      	adds	r1, r3, #4
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	9103      	str	r1, [sp, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	bfbb      	ittet	lt
 8008f54:	425b      	neglt	r3, r3
 8008f56:	f042 0202 	orrlt.w	r2, r2, #2
 8008f5a:	9307      	strge	r3, [sp, #28]
 8008f5c:	9307      	strlt	r3, [sp, #28]
 8008f5e:	bfb8      	it	lt
 8008f60:	9204      	strlt	r2, [sp, #16]
 8008f62:	7823      	ldrb	r3, [r4, #0]
 8008f64:	2b2e      	cmp	r3, #46	; 0x2e
 8008f66:	d10c      	bne.n	8008f82 <_vfiprintf_r+0x15a>
 8008f68:	7863      	ldrb	r3, [r4, #1]
 8008f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f6c:	d134      	bne.n	8008fd8 <_vfiprintf_r+0x1b0>
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	1d1a      	adds	r2, r3, #4
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	9203      	str	r2, [sp, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	bfb8      	it	lt
 8008f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f7e:	3402      	adds	r4, #2
 8008f80:	9305      	str	r3, [sp, #20]
 8008f82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009058 <_vfiprintf_r+0x230>
 8008f86:	7821      	ldrb	r1, [r4, #0]
 8008f88:	2203      	movs	r2, #3
 8008f8a:	4650      	mov	r0, sl
 8008f8c:	f7f7 f928 	bl	80001e0 <memchr>
 8008f90:	b138      	cbz	r0, 8008fa2 <_vfiprintf_r+0x17a>
 8008f92:	9b04      	ldr	r3, [sp, #16]
 8008f94:	eba0 000a 	sub.w	r0, r0, sl
 8008f98:	2240      	movs	r2, #64	; 0x40
 8008f9a:	4082      	lsls	r2, r0
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	3401      	adds	r4, #1
 8008fa0:	9304      	str	r3, [sp, #16]
 8008fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa6:	4829      	ldr	r0, [pc, #164]	; (800904c <_vfiprintf_r+0x224>)
 8008fa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fac:	2206      	movs	r2, #6
 8008fae:	f7f7 f917 	bl	80001e0 <memchr>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d03f      	beq.n	8009036 <_vfiprintf_r+0x20e>
 8008fb6:	4b26      	ldr	r3, [pc, #152]	; (8009050 <_vfiprintf_r+0x228>)
 8008fb8:	bb1b      	cbnz	r3, 8009002 <_vfiprintf_r+0x1da>
 8008fba:	9b03      	ldr	r3, [sp, #12]
 8008fbc:	3307      	adds	r3, #7
 8008fbe:	f023 0307 	bic.w	r3, r3, #7
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	9303      	str	r3, [sp, #12]
 8008fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc8:	443b      	add	r3, r7
 8008fca:	9309      	str	r3, [sp, #36]	; 0x24
 8008fcc:	e768      	b.n	8008ea0 <_vfiprintf_r+0x78>
 8008fce:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	2001      	movs	r0, #1
 8008fd6:	e7a6      	b.n	8008f26 <_vfiprintf_r+0xfe>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	3401      	adds	r4, #1
 8008fdc:	9305      	str	r3, [sp, #20]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	f04f 0c0a 	mov.w	ip, #10
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fea:	3a30      	subs	r2, #48	; 0x30
 8008fec:	2a09      	cmp	r2, #9
 8008fee:	d903      	bls.n	8008ff8 <_vfiprintf_r+0x1d0>
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d0c6      	beq.n	8008f82 <_vfiprintf_r+0x15a>
 8008ff4:	9105      	str	r1, [sp, #20]
 8008ff6:	e7c4      	b.n	8008f82 <_vfiprintf_r+0x15a>
 8008ff8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	2301      	movs	r3, #1
 8009000:	e7f0      	b.n	8008fe4 <_vfiprintf_r+0x1bc>
 8009002:	ab03      	add	r3, sp, #12
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	462a      	mov	r2, r5
 8009008:	4b12      	ldr	r3, [pc, #72]	; (8009054 <_vfiprintf_r+0x22c>)
 800900a:	a904      	add	r1, sp, #16
 800900c:	4630      	mov	r0, r6
 800900e:	f7fd fd67 	bl	8006ae0 <_printf_float>
 8009012:	4607      	mov	r7, r0
 8009014:	1c78      	adds	r0, r7, #1
 8009016:	d1d6      	bne.n	8008fc6 <_vfiprintf_r+0x19e>
 8009018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800901a:	07d9      	lsls	r1, r3, #31
 800901c:	d405      	bmi.n	800902a <_vfiprintf_r+0x202>
 800901e:	89ab      	ldrh	r3, [r5, #12]
 8009020:	059a      	lsls	r2, r3, #22
 8009022:	d402      	bmi.n	800902a <_vfiprintf_r+0x202>
 8009024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009026:	f7fe faa5 	bl	8007574 <__retarget_lock_release_recursive>
 800902a:	89ab      	ldrh	r3, [r5, #12]
 800902c:	065b      	lsls	r3, r3, #25
 800902e:	f53f af1d 	bmi.w	8008e6c <_vfiprintf_r+0x44>
 8009032:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009034:	e71c      	b.n	8008e70 <_vfiprintf_r+0x48>
 8009036:	ab03      	add	r3, sp, #12
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	462a      	mov	r2, r5
 800903c:	4b05      	ldr	r3, [pc, #20]	; (8009054 <_vfiprintf_r+0x22c>)
 800903e:	a904      	add	r1, sp, #16
 8009040:	4630      	mov	r0, r6
 8009042:	f7fd fff1 	bl	8007028 <_printf_i>
 8009046:	e7e4      	b.n	8009012 <_vfiprintf_r+0x1ea>
 8009048:	080096ab 	.word	0x080096ab
 800904c:	080096b5 	.word	0x080096b5
 8009050:	08006ae1 	.word	0x08006ae1
 8009054:	08008e05 	.word	0x08008e05
 8009058:	080096b1 	.word	0x080096b1

0800905c <__swbuf_r>:
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	460e      	mov	r6, r1
 8009060:	4614      	mov	r4, r2
 8009062:	4605      	mov	r5, r0
 8009064:	b118      	cbz	r0, 800906e <__swbuf_r+0x12>
 8009066:	6a03      	ldr	r3, [r0, #32]
 8009068:	b90b      	cbnz	r3, 800906e <__swbuf_r+0x12>
 800906a:	f7fe f98b 	bl	8007384 <__sinit>
 800906e:	69a3      	ldr	r3, [r4, #24]
 8009070:	60a3      	str	r3, [r4, #8]
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	071a      	lsls	r2, r3, #28
 8009076:	d525      	bpl.n	80090c4 <__swbuf_r+0x68>
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	b31b      	cbz	r3, 80090c4 <__swbuf_r+0x68>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	6922      	ldr	r2, [r4, #16]
 8009080:	1a98      	subs	r0, r3, r2
 8009082:	6963      	ldr	r3, [r4, #20]
 8009084:	b2f6      	uxtb	r6, r6
 8009086:	4283      	cmp	r3, r0
 8009088:	4637      	mov	r7, r6
 800908a:	dc04      	bgt.n	8009096 <__swbuf_r+0x3a>
 800908c:	4621      	mov	r1, r4
 800908e:	4628      	mov	r0, r5
 8009090:	f7ff fdee 	bl	8008c70 <_fflush_r>
 8009094:	b9e0      	cbnz	r0, 80090d0 <__swbuf_r+0x74>
 8009096:	68a3      	ldr	r3, [r4, #8]
 8009098:	3b01      	subs	r3, #1
 800909a:	60a3      	str	r3, [r4, #8]
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	6022      	str	r2, [r4, #0]
 80090a2:	701e      	strb	r6, [r3, #0]
 80090a4:	6962      	ldr	r2, [r4, #20]
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d004      	beq.n	80090b6 <__swbuf_r+0x5a>
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	07db      	lsls	r3, r3, #31
 80090b0:	d506      	bpl.n	80090c0 <__swbuf_r+0x64>
 80090b2:	2e0a      	cmp	r6, #10
 80090b4:	d104      	bne.n	80090c0 <__swbuf_r+0x64>
 80090b6:	4621      	mov	r1, r4
 80090b8:	4628      	mov	r0, r5
 80090ba:	f7ff fdd9 	bl	8008c70 <_fflush_r>
 80090be:	b938      	cbnz	r0, 80090d0 <__swbuf_r+0x74>
 80090c0:	4638      	mov	r0, r7
 80090c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c4:	4621      	mov	r1, r4
 80090c6:	4628      	mov	r0, r5
 80090c8:	f000 f806 	bl	80090d8 <__swsetup_r>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d0d5      	beq.n	800907c <__swbuf_r+0x20>
 80090d0:	f04f 37ff 	mov.w	r7, #4294967295
 80090d4:	e7f4      	b.n	80090c0 <__swbuf_r+0x64>
	...

080090d8 <__swsetup_r>:
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	4b2a      	ldr	r3, [pc, #168]	; (8009184 <__swsetup_r+0xac>)
 80090dc:	4605      	mov	r5, r0
 80090de:	6818      	ldr	r0, [r3, #0]
 80090e0:	460c      	mov	r4, r1
 80090e2:	b118      	cbz	r0, 80090ec <__swsetup_r+0x14>
 80090e4:	6a03      	ldr	r3, [r0, #32]
 80090e6:	b90b      	cbnz	r3, 80090ec <__swsetup_r+0x14>
 80090e8:	f7fe f94c 	bl	8007384 <__sinit>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090f2:	0718      	lsls	r0, r3, #28
 80090f4:	d422      	bmi.n	800913c <__swsetup_r+0x64>
 80090f6:	06d9      	lsls	r1, r3, #27
 80090f8:	d407      	bmi.n	800910a <__swsetup_r+0x32>
 80090fa:	2309      	movs	r3, #9
 80090fc:	602b      	str	r3, [r5, #0]
 80090fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009102:	81a3      	strh	r3, [r4, #12]
 8009104:	f04f 30ff 	mov.w	r0, #4294967295
 8009108:	e034      	b.n	8009174 <__swsetup_r+0x9c>
 800910a:	0758      	lsls	r0, r3, #29
 800910c:	d512      	bpl.n	8009134 <__swsetup_r+0x5c>
 800910e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009110:	b141      	cbz	r1, 8009124 <__swsetup_r+0x4c>
 8009112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009116:	4299      	cmp	r1, r3
 8009118:	d002      	beq.n	8009120 <__swsetup_r+0x48>
 800911a:	4628      	mov	r0, r5
 800911c:	f7ff f8a6 	bl	800826c <_free_r>
 8009120:	2300      	movs	r3, #0
 8009122:	6363      	str	r3, [r4, #52]	; 0x34
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	2300      	movs	r3, #0
 800912e:	6063      	str	r3, [r4, #4]
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	6023      	str	r3, [r4, #0]
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	f043 0308 	orr.w	r3, r3, #8
 800913a:	81a3      	strh	r3, [r4, #12]
 800913c:	6923      	ldr	r3, [r4, #16]
 800913e:	b94b      	cbnz	r3, 8009154 <__swsetup_r+0x7c>
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800914a:	d003      	beq.n	8009154 <__swsetup_r+0x7c>
 800914c:	4621      	mov	r1, r4
 800914e:	4628      	mov	r0, r5
 8009150:	f000 f884 	bl	800925c <__smakebuf_r>
 8009154:	89a0      	ldrh	r0, [r4, #12]
 8009156:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800915a:	f010 0301 	ands.w	r3, r0, #1
 800915e:	d00a      	beq.n	8009176 <__swsetup_r+0x9e>
 8009160:	2300      	movs	r3, #0
 8009162:	60a3      	str	r3, [r4, #8]
 8009164:	6963      	ldr	r3, [r4, #20]
 8009166:	425b      	negs	r3, r3
 8009168:	61a3      	str	r3, [r4, #24]
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	b943      	cbnz	r3, 8009180 <__swsetup_r+0xa8>
 800916e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009172:	d1c4      	bne.n	80090fe <__swsetup_r+0x26>
 8009174:	bd38      	pop	{r3, r4, r5, pc}
 8009176:	0781      	lsls	r1, r0, #30
 8009178:	bf58      	it	pl
 800917a:	6963      	ldrpl	r3, [r4, #20]
 800917c:	60a3      	str	r3, [r4, #8]
 800917e:	e7f4      	b.n	800916a <__swsetup_r+0x92>
 8009180:	2000      	movs	r0, #0
 8009182:	e7f7      	b.n	8009174 <__swsetup_r+0x9c>
 8009184:	200000f4 	.word	0x200000f4

08009188 <_raise_r>:
 8009188:	291f      	cmp	r1, #31
 800918a:	b538      	push	{r3, r4, r5, lr}
 800918c:	4604      	mov	r4, r0
 800918e:	460d      	mov	r5, r1
 8009190:	d904      	bls.n	800919c <_raise_r+0x14>
 8009192:	2316      	movs	r3, #22
 8009194:	6003      	str	r3, [r0, #0]
 8009196:	f04f 30ff 	mov.w	r0, #4294967295
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800919e:	b112      	cbz	r2, 80091a6 <_raise_r+0x1e>
 80091a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091a4:	b94b      	cbnz	r3, 80091ba <_raise_r+0x32>
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 f830 	bl	800920c <_getpid_r>
 80091ac:	462a      	mov	r2, r5
 80091ae:	4601      	mov	r1, r0
 80091b0:	4620      	mov	r0, r4
 80091b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091b6:	f000 b817 	b.w	80091e8 <_kill_r>
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d00a      	beq.n	80091d4 <_raise_r+0x4c>
 80091be:	1c59      	adds	r1, r3, #1
 80091c0:	d103      	bne.n	80091ca <_raise_r+0x42>
 80091c2:	2316      	movs	r3, #22
 80091c4:	6003      	str	r3, [r0, #0]
 80091c6:	2001      	movs	r0, #1
 80091c8:	e7e7      	b.n	800919a <_raise_r+0x12>
 80091ca:	2400      	movs	r4, #0
 80091cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80091d0:	4628      	mov	r0, r5
 80091d2:	4798      	blx	r3
 80091d4:	2000      	movs	r0, #0
 80091d6:	e7e0      	b.n	800919a <_raise_r+0x12>

080091d8 <raise>:
 80091d8:	4b02      	ldr	r3, [pc, #8]	; (80091e4 <raise+0xc>)
 80091da:	4601      	mov	r1, r0
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	f7ff bfd3 	b.w	8009188 <_raise_r>
 80091e2:	bf00      	nop
 80091e4:	200000f4 	.word	0x200000f4

080091e8 <_kill_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4d07      	ldr	r5, [pc, #28]	; (8009208 <_kill_r+0x20>)
 80091ec:	2300      	movs	r3, #0
 80091ee:	4604      	mov	r4, r0
 80091f0:	4608      	mov	r0, r1
 80091f2:	4611      	mov	r1, r2
 80091f4:	602b      	str	r3, [r5, #0]
 80091f6:	f7f8 fe89 	bl	8001f0c <_kill>
 80091fa:	1c43      	adds	r3, r0, #1
 80091fc:	d102      	bne.n	8009204 <_kill_r+0x1c>
 80091fe:	682b      	ldr	r3, [r5, #0]
 8009200:	b103      	cbz	r3, 8009204 <_kill_r+0x1c>
 8009202:	6023      	str	r3, [r4, #0]
 8009204:	bd38      	pop	{r3, r4, r5, pc}
 8009206:	bf00      	nop
 8009208:	20000778 	.word	0x20000778

0800920c <_getpid_r>:
 800920c:	f7f8 be76 	b.w	8001efc <_getpid>

08009210 <__swhatbuf_r>:
 8009210:	b570      	push	{r4, r5, r6, lr}
 8009212:	460c      	mov	r4, r1
 8009214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009218:	2900      	cmp	r1, #0
 800921a:	b096      	sub	sp, #88	; 0x58
 800921c:	4615      	mov	r5, r2
 800921e:	461e      	mov	r6, r3
 8009220:	da0d      	bge.n	800923e <__swhatbuf_r+0x2e>
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009228:	f04f 0100 	mov.w	r1, #0
 800922c:	bf0c      	ite	eq
 800922e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009232:	2340      	movne	r3, #64	; 0x40
 8009234:	2000      	movs	r0, #0
 8009236:	6031      	str	r1, [r6, #0]
 8009238:	602b      	str	r3, [r5, #0]
 800923a:	b016      	add	sp, #88	; 0x58
 800923c:	bd70      	pop	{r4, r5, r6, pc}
 800923e:	466a      	mov	r2, sp
 8009240:	f000 f848 	bl	80092d4 <_fstat_r>
 8009244:	2800      	cmp	r0, #0
 8009246:	dbec      	blt.n	8009222 <__swhatbuf_r+0x12>
 8009248:	9901      	ldr	r1, [sp, #4]
 800924a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800924e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009252:	4259      	negs	r1, r3
 8009254:	4159      	adcs	r1, r3
 8009256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800925a:	e7eb      	b.n	8009234 <__swhatbuf_r+0x24>

0800925c <__smakebuf_r>:
 800925c:	898b      	ldrh	r3, [r1, #12]
 800925e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009260:	079d      	lsls	r5, r3, #30
 8009262:	4606      	mov	r6, r0
 8009264:	460c      	mov	r4, r1
 8009266:	d507      	bpl.n	8009278 <__smakebuf_r+0x1c>
 8009268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	6123      	str	r3, [r4, #16]
 8009270:	2301      	movs	r3, #1
 8009272:	6163      	str	r3, [r4, #20]
 8009274:	b002      	add	sp, #8
 8009276:	bd70      	pop	{r4, r5, r6, pc}
 8009278:	ab01      	add	r3, sp, #4
 800927a:	466a      	mov	r2, sp
 800927c:	f7ff ffc8 	bl	8009210 <__swhatbuf_r>
 8009280:	9900      	ldr	r1, [sp, #0]
 8009282:	4605      	mov	r5, r0
 8009284:	4630      	mov	r0, r6
 8009286:	f7ff f865 	bl	8008354 <_malloc_r>
 800928a:	b948      	cbnz	r0, 80092a0 <__smakebuf_r+0x44>
 800928c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009290:	059a      	lsls	r2, r3, #22
 8009292:	d4ef      	bmi.n	8009274 <__smakebuf_r+0x18>
 8009294:	f023 0303 	bic.w	r3, r3, #3
 8009298:	f043 0302 	orr.w	r3, r3, #2
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	e7e3      	b.n	8009268 <__smakebuf_r+0xc>
 80092a0:	89a3      	ldrh	r3, [r4, #12]
 80092a2:	6020      	str	r0, [r4, #0]
 80092a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a8:	81a3      	strh	r3, [r4, #12]
 80092aa:	9b00      	ldr	r3, [sp, #0]
 80092ac:	6163      	str	r3, [r4, #20]
 80092ae:	9b01      	ldr	r3, [sp, #4]
 80092b0:	6120      	str	r0, [r4, #16]
 80092b2:	b15b      	cbz	r3, 80092cc <__smakebuf_r+0x70>
 80092b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b8:	4630      	mov	r0, r6
 80092ba:	f000 f81d 	bl	80092f8 <_isatty_r>
 80092be:	b128      	cbz	r0, 80092cc <__smakebuf_r+0x70>
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	f023 0303 	bic.w	r3, r3, #3
 80092c6:	f043 0301 	orr.w	r3, r3, #1
 80092ca:	81a3      	strh	r3, [r4, #12]
 80092cc:	89a3      	ldrh	r3, [r4, #12]
 80092ce:	431d      	orrs	r5, r3
 80092d0:	81a5      	strh	r5, [r4, #12]
 80092d2:	e7cf      	b.n	8009274 <__smakebuf_r+0x18>

080092d4 <_fstat_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d07      	ldr	r5, [pc, #28]	; (80092f4 <_fstat_r+0x20>)
 80092d8:	2300      	movs	r3, #0
 80092da:	4604      	mov	r4, r0
 80092dc:	4608      	mov	r0, r1
 80092de:	4611      	mov	r1, r2
 80092e0:	602b      	str	r3, [r5, #0]
 80092e2:	f7f8 fe72 	bl	8001fca <_fstat>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	d102      	bne.n	80092f0 <_fstat_r+0x1c>
 80092ea:	682b      	ldr	r3, [r5, #0]
 80092ec:	b103      	cbz	r3, 80092f0 <_fstat_r+0x1c>
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	bd38      	pop	{r3, r4, r5, pc}
 80092f2:	bf00      	nop
 80092f4:	20000778 	.word	0x20000778

080092f8 <_isatty_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d06      	ldr	r5, [pc, #24]	; (8009314 <_isatty_r+0x1c>)
 80092fc:	2300      	movs	r3, #0
 80092fe:	4604      	mov	r4, r0
 8009300:	4608      	mov	r0, r1
 8009302:	602b      	str	r3, [r5, #0]
 8009304:	f7f8 fe71 	bl	8001fea <_isatty>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d102      	bne.n	8009312 <_isatty_r+0x1a>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	b103      	cbz	r3, 8009312 <_isatty_r+0x1a>
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	20000778 	.word	0x20000778

08009318 <_init>:
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	bf00      	nop
 800931c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931e:	bc08      	pop	{r3}
 8009320:	469e      	mov	lr, r3
 8009322:	4770      	bx	lr

08009324 <_fini>:
 8009324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009326:	bf00      	nop
 8009328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932a:	bc08      	pop	{r3}
 800932c:	469e      	mov	lr, r3
 800932e:	4770      	bx	lr
