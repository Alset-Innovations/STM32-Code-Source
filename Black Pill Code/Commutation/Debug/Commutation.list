
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009730  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080098c8  080098c8  000198c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009928  08009928  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009928  08009928  00019928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009930  08009930  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009930  08009930  00019930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009934  08009934  00019934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e3c  200000fc  08009a34  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f38  08009a34  00021f38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b79a  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b71  00000000  00000000  0003b909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001870  00000000  00000000  0003f480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000131c  00000000  00000000  00040cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b136  00000000  00000000  0004200c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dab7  00000000  00000000  0005d142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a179f  00000000  00000000  0007abf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068d8  00000000  00000000  0011c398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00122c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080098b0 	.word	0x080098b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	080098b0 	.word	0x080098b0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fe50 	bl	800117c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f81c 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 fafc 	bl	8000adc <MX_GPIO_Init>
  MX_ADC1_Init();
 80004e4:	f000 f882 	bl	80005ec <MX_ADC1_Init>
  MX_TIM1_Init();
 80004e8:	f000 f936 	bl	8000758 <MX_TIM1_Init>
  MX_TIM9_Init();
 80004ec:	f000 fa8a 	bl	8000a04 <MX_TIM9_Init>
  MX_I2C2_Init();
 80004f0:	f000 f8ce 	bl	8000690 <MX_I2C2_Init>
  MX_SPI1_Init();
 80004f4:	f000 f8fa 	bl	80006ec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004f8:	f000 fac6 	bl	8000a88 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004fc:	f008 fcc2 	bl	8008e84 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000500:	f000 f9e4 	bl	80008cc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Write some registers
  TIM4->CR2 |= 0x0040; // Turn on XOR function.
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <main+0x40>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	4a02      	ldr	r2, [pc, #8]	; (8000514 <main+0x40>)
 800050a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800050e:	6053      	str	r3, [r2, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x3c>
 8000512:	bf00      	nop
 8000514:	40000800 	.word	0x40000800

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f009 f996 	bl	8009858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000588:	2319      	movs	r3, #25
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800058c:	23c0      	movs	r3, #192	; 0xc0
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f002 ff67 	bl	8003470 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a8:	f000 faf8 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80005be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2103      	movs	r1, #3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 f9c8 	bl	8003960 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005d6:	f000 fae1 	bl	8000b9c <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_ADC1_Init+0x98>)
 800062c:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_ADC1_Init+0xa0>)
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x98>)
 8000646:	2201      	movs	r2, #1
 8000648:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <MX_ADC1_Init+0x98>)
 800064c:	f000 fe2c 	bl	80012a8 <HAL_ADC_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000656:	f000 faa1 	bl	8000b9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800065a:	2304      	movs	r3, #4
 800065c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800065e:	2301      	movs	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_ADC1_Init+0x98>)
 800066c:	f000 fe60 	bl	8001330 <HAL_ADC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000676:	f000 fa91 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000118 	.word	0x20000118
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C2_Init+0x50>)
 8000696:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <MX_I2C2_Init+0x54>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_I2C2_Init+0x50>)
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_I2C2_Init+0x58>)
 800069e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C2_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_I2C2_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_I2C2_Init+0x50>)
 80006ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_I2C2_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_I2C2_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_I2C2_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_I2C2_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_I2C2_Init+0x50>)
 80006ce:	f001 fb0d 	bl	8001cec <HAL_I2C_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006d8:	f000 fa60 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000160 	.word	0x20000160
 80006e4:	40005800 	.word	0x40005800
 80006e8:	000186a0 	.word	0x000186a0

080006ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_SPI1_Init+0x64>)
 80006f2:	4a18      	ldr	r2, [pc, #96]	; (8000754 <MX_SPI1_Init+0x68>)
 80006f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_SPI1_Init+0x64>)
 80006f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_SPI1_Init+0x64>)
 8000718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_SPI1_Init+0x64>)
 8000738:	220a      	movs	r2, #10
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_SPI1_Init+0x64>)
 800073e:	f003 faef 	bl	8003d20 <HAL_SPI_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000748:	f000 fa28 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200001b4 	.word	0x200001b4
 8000754:	40013000 	.word	0x40013000

08000758 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b096      	sub	sp, #88	; 0x58
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800075e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
 8000788:	615a      	str	r2, [r3, #20]
 800078a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800078c:	463b      	mov	r3, r7
 800078e:	2220      	movs	r2, #32
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f009 f860 	bl	8009858 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000798:	4b4a      	ldr	r3, [pc, #296]	; (80008c4 <MX_TIM1_Init+0x16c>)
 800079a:	4a4b      	ldr	r2, [pc, #300]	; (80008c8 <MX_TIM1_Init+0x170>)
 800079c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800079e:	4b49      	ldr	r3, [pc, #292]	; (80008c4 <MX_TIM1_Init+0x16c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b47      	ldr	r3, [pc, #284]	; (80008c4 <MX_TIM1_Init+0x16c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007aa:	4b46      	ldr	r3, [pc, #280]	; (80008c4 <MX_TIM1_Init+0x16c>)
 80007ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b2:	4b44      	ldr	r3, [pc, #272]	; (80008c4 <MX_TIM1_Init+0x16c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b8:	4b42      	ldr	r3, [pc, #264]	; (80008c4 <MX_TIM1_Init+0x16c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007be:	4b41      	ldr	r3, [pc, #260]	; (80008c4 <MX_TIM1_Init+0x16c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007c4:	483f      	ldr	r0, [pc, #252]	; (80008c4 <MX_TIM1_Init+0x16c>)
 80007c6:	f003 fb34 	bl	8003e32 <HAL_TIM_Base_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007d0:	f000 f9e4 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007d4:	483b      	ldr	r0, [pc, #236]	; (80008c4 <MX_TIM1_Init+0x16c>)
 80007d6:	f003 fbca 	bl	8003f6e <HAL_TIM_PWM_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80007e0:	f000 f9dc 	bl	8000b9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80007e4:	2304      	movs	r3, #4
 80007e6:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80007e8:	2330      	movs	r3, #48	; 0x30
 80007ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007f0:	4619      	mov	r1, r3
 80007f2:	4834      	ldr	r0, [pc, #208]	; (80008c4 <MX_TIM1_Init+0x16c>)
 80007f4:	f003 ff30 	bl	8004658 <HAL_TIM_SlaveConfigSynchro>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80007fe:	f000 f9cd 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000802:	2300      	movs	r3, #0
 8000804:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800080a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800080e:	4619      	mov	r1, r3
 8000810:	482c      	ldr	r0, [pc, #176]	; (80008c4 <MX_TIM1_Init+0x16c>)
 8000812:	f004 fbd1 	bl	8004fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800081c:	f000 f9be 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000820:	2360      	movs	r3, #96	; 0x60
 8000822:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083c:	f107 0320 	add.w	r3, r7, #32
 8000840:	2200      	movs	r2, #0
 8000842:	4619      	mov	r1, r3
 8000844:	481f      	ldr	r0, [pc, #124]	; (80008c4 <MX_TIM1_Init+0x16c>)
 8000846:	f003 fe45 	bl	80044d4 <HAL_TIM_PWM_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000850:	f000 f9a4 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	2204      	movs	r2, #4
 800085a:	4619      	mov	r1, r3
 800085c:	4819      	ldr	r0, [pc, #100]	; (80008c4 <MX_TIM1_Init+0x16c>)
 800085e:	f003 fe39 	bl	80044d4 <HAL_TIM_PWM_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000868:	f000 f998 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800086c:	f107 0320 	add.w	r3, r7, #32
 8000870:	2208      	movs	r2, #8
 8000872:	4619      	mov	r1, r3
 8000874:	4813      	ldr	r0, [pc, #76]	; (80008c4 <MX_TIM1_Init+0x16c>)
 8000876:	f003 fe2d 	bl	80044d4 <HAL_TIM_PWM_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000880:	f000 f98c 	bl	8000b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <MX_TIM1_Init+0x16c>)
 80008a8:	f004 fbf4 	bl	8005094 <HAL_TIMEx_ConfigBreakDeadTime>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 80008b2:	f000 f973 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008b6:	4803      	ldr	r0, [pc, #12]	; (80008c4 <MX_TIM1_Init+0x16c>)
 80008b8:	f000 fb0c 	bl	8000ed4 <HAL_TIM_MspPostInit>

}
 80008bc:	bf00      	nop
 80008be:	3758      	adds	r7, #88	; 0x58
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000020c 	.word	0x2000020c
 80008c8:	40010000 	.word	0x40010000

080008cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b092      	sub	sp, #72	; 0x48
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]
 800090a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800090c:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <MX_TIM4_Init+0x130>)
 800090e:	4a3c      	ldr	r2, [pc, #240]	; (8000a00 <MX_TIM4_Init+0x134>)
 8000910:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 65535;
 8000912:	4b3a      	ldr	r3, [pc, #232]	; (80009fc <MX_TIM4_Init+0x130>)
 8000914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000918:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b38      	ldr	r3, [pc, #224]	; (80009fc <MX_TIM4_Init+0x130>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000920:	4b36      	ldr	r3, [pc, #216]	; (80009fc <MX_TIM4_Init+0x130>)
 8000922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000926:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b34      	ldr	r3, [pc, #208]	; (80009fc <MX_TIM4_Init+0x130>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b33      	ldr	r3, [pc, #204]	; (80009fc <MX_TIM4_Init+0x130>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000934:	4831      	ldr	r0, [pc, #196]	; (80009fc <MX_TIM4_Init+0x130>)
 8000936:	f003 fa7c 	bl	8003e32 <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000940:	f000 f92c 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000944:	482d      	ldr	r0, [pc, #180]	; (80009fc <MX_TIM4_Init+0x130>)
 8000946:	f003 fb6b 	bl	8004020 <HAL_TIM_IC_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000950:	f000 f924 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000954:	4829      	ldr	r0, [pc, #164]	; (80009fc <MX_TIM4_Init+0x130>)
 8000956:	f003 fb0a 	bl	8003f6e <HAL_TIM_PWM_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000960:	f000 f91c 	bl	8000b9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8000968:	2340      	movs	r3, #64	; 0x40
 800096a:	63bb      	str	r3, [r7, #56]	; 0x38
  sSlaveConfig.TriggerFilter = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000970:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000974:	4619      	mov	r1, r3
 8000976:	4821      	ldr	r0, [pc, #132]	; (80009fc <MX_TIM4_Init+0x130>)
 8000978:	f003 fe6e 	bl	8004658 <HAL_TIM_SlaveConfigSynchro>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM4_Init+0xba>
  {
    Error_Handler();
 8000982:	f000 f90b 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000986:	2370      	movs	r3, #112	; 0x70
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800098e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000992:	4619      	mov	r1, r3
 8000994:	4819      	ldr	r0, [pc, #100]	; (80009fc <MX_TIM4_Init+0x130>)
 8000996:	f004 fb0f 	bl	8004fb8 <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80009a0:	f000 f8fc 	bl	8000b9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 80009a8:	2303      	movs	r3, #3
 80009aa:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	2200      	movs	r2, #0
 80009ba:	4619      	mov	r1, r3
 80009bc:	480f      	ldr	r0, [pc, #60]	; (80009fc <MX_TIM4_Init+0x130>)
 80009be:	f003 fced 	bl	800439c <HAL_TIM_IC_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 80009c8:	f000 f8e8 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009cc:	2370      	movs	r3, #112	; 0x70
 80009ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009dc:	463b      	mov	r3, r7
 80009de:	220c      	movs	r2, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <MX_TIM4_Init+0x130>)
 80009e4:	f003 fd76 	bl	80044d4 <HAL_TIM_PWM_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM4_Init+0x126>
  {
    Error_Handler();
 80009ee:	f000 f8d5 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3748      	adds	r7, #72	; 0x48
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000254 	.word	0x20000254
 8000a00:	40000800 	.word	0x40000800

08000a04 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
 8000a18:	615a      	str	r2, [r3, #20]
 8000a1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_TIM9_Init+0x7c>)
 8000a1e:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <MX_TIM9_Init+0x80>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_TIM9_Init+0x7c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_TIM9_Init+0x7c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_TIM9_Init+0x7c>)
 8000a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a34:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_TIM9_Init+0x7c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_TIM9_Init+0x7c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8000a42:	480f      	ldr	r0, [pc, #60]	; (8000a80 <MX_TIM9_Init+0x7c>)
 8000a44:	f003 fa44 	bl	8003ed0 <HAL_TIM_OC_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8000a4e:	f000 f8a5 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_TIM9_Init+0x7c>)
 8000a6a:	f003 fc3b 	bl	80042e4 <HAL_TIM_OC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8000a74:	f000 f892 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000029c 	.word	0x2000029c
 8000a84:	40014000 	.word	0x40014000

08000a88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_USART1_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	f004 fb4e 	bl	8005160 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aca:	f000 f867 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200002e4 	.word	0x200002e4
 8000ad8:	40011000 	.word	0x40011000

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <MX_GPIO_Init+0xb8>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <MX_GPIO_Init+0xb8>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <MX_GPIO_Init+0xb8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <MX_GPIO_Init+0xb8>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <MX_GPIO_Init+0xb8>)
 8000b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_GPIO_Init+0xb8>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <MX_GPIO_Init+0xb8>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <MX_GPIO_Init+0xb8>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_GPIO_Init+0xb8>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_GPIO_Init+0xb8>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a11      	ldr	r2, [pc, #68]	; (8000b94 <MX_GPIO_Init+0xb8>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_GPIO_Init+0xb8>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <MX_GPIO_Init+0xbc>)
 8000b6a:	f001 f8a5 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b6e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_GPIO_Init+0xbc>)
 8000b88:	f000 ff12 	bl	80019b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020800 	.word	0x40020800

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <HAL_ADC_MspInit+0x7c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d127      	bne.n	8000c6a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_ADC_MspInit+0x80>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <HAL_ADC_MspInit+0x80>)
 8000c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <HAL_ADC_MspInit+0x80>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_ADC_MspInit+0x80>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <HAL_ADC_MspInit+0x80>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_ADC_MspInit+0x80>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c52:	2310      	movs	r3, #16
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c56:	2303      	movs	r3, #3
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_ADC_MspInit+0x84>)
 8000c66:	f000 fea3 	bl	80019b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40012000 	.word	0x40012000
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a22      	ldr	r2, [pc, #136]	; (8000d28 <HAL_I2C_MspInit+0xa8>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d13d      	bne.n	8000d1e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <HAL_I2C_MspInit+0xac>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a20      	ldr	r2, [pc, #128]	; (8000d2c <HAL_I2C_MspInit+0xac>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_I2C_MspInit+0xac>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc4:	2312      	movs	r3, #18
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4815      	ldr	r0, [pc, #84]	; (8000d30 <HAL_I2C_MspInit+0xb0>)
 8000cdc:	f000 fe68 	bl	80019b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce6:	2312      	movs	r3, #18
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000cf2:	2309      	movs	r3, #9
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <HAL_I2C_MspInit+0xb0>)
 8000cfe:	f000 fe57 	bl	80019b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_I2C_MspInit+0xac>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_I2C_MspInit+0xac>)
 8000d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_I2C_MspInit+0xac>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40005800 	.word	0x40005800
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400

08000d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12b      	bne.n	8000dae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d8e:	23e0      	movs	r3, #224	; 0xe0
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_SPI_MspInit+0x8c>)
 8000daa:	f000 fe01 	bl	80019b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40013000 	.word	0x40013000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a27      	ldr	r2, [pc, #156]	; (8000e80 <HAL_TIM_Base_MspInit+0xbc>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d116      	bne.n	8000e14 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <HAL_TIM_Base_MspInit+0xc0>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <HAL_TIM_Base_MspInit+0xc0>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <HAL_TIM_Base_MspInit+0xc0>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	201a      	movs	r0, #26
 8000e08:	f000 fd9b 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e0c:	201a      	movs	r0, #26
 8000e0e:	f000 fdb4 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e12:	e031      	b.n	8000e78 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM4)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <HAL_TIM_Base_MspInit+0xc4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d12c      	bne.n	8000e78 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_TIM_Base_MspInit+0xc0>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <HAL_TIM_Base_MspInit+0xc0>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_TIM_Base_MspInit+0xc0>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_TIM_Base_MspInit+0xc0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_TIM_Base_MspInit+0xc0>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_TIM_Base_MspInit+0xc0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e56:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	; (8000e8c <HAL_TIM_Base_MspInit+0xc8>)
 8000e74:	f000 fd9c 	bl	80019b0 <HAL_GPIO_Init>
}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40010000 	.word	0x40010000
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40000800 	.word	0x40000800
 8000e8c:	40020400 	.word	0x40020400

08000e90 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM9)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <HAL_TIM_OC_MspInit+0x3c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d10d      	bne.n	8000ebe <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_TIM_OC_MspInit+0x40>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <HAL_TIM_OC_MspInit+0x40>)
 8000eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_TIM_OC_MspInit+0x40>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40014000 	.word	0x40014000
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a22      	ldr	r2, [pc, #136]	; (8000f7c <HAL_TIM_MspPostInit+0xa8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d13d      	bne.n	8000f72 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <HAL_TIM_MspPostInit+0xac>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a20      	ldr	r2, [pc, #128]	; (8000f80 <HAL_TIM_MspPostInit+0xac>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <HAL_TIM_MspPostInit+0xac>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_TIM_MspPostInit+0xac>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_TIM_MspPostInit+0xac>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_TIM_MspPostInit+0xac>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8000f2e:	f242 0303 	movw	r3, #8195	; 0x2003
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480e      	ldr	r0, [pc, #56]	; (8000f84 <HAL_TIM_MspPostInit+0xb0>)
 8000f4c:	f000 fd30 	bl	80019b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f50:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4806      	ldr	r0, [pc, #24]	; (8000f88 <HAL_TIM_MspPostInit+0xb4>)
 8000f6e:	f000 fd1f 	bl	80019b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	; 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020000 	.word	0x40020000

08000f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a28      	ldr	r2, [pc, #160]	; (800104c <HAL_UART_MspInit+0xc0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d14a      	bne.n	8001044 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a26      	ldr	r2, [pc, #152]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000fb8:	f043 0310 	orr.w	r3, r3, #16
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a1f      	ldr	r2, [pc, #124]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001014:	2307      	movs	r3, #7
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <HAL_UART_MspInit+0xc8>)
 8001020:	f000 fcc6 	bl	80019b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001024:	2308      	movs	r3, #8
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001034:	2307      	movs	r3, #7
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <HAL_UART_MspInit+0xcc>)
 8001040:	f000 fcb6 	bl	80019b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40011000 	.word	0x40011000
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000
 8001058:	40020400 	.word	0x40020400

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f8ba 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	// Reset counter for interfacing timer.
	TIM4->CNT = 0x0000;
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <TIM1_TRG_COM_TIM11_IRQHandler+0x34>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24

	// Commutation.
	TIM1->CCR1 += 1;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 80010bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 80010c0:	3301      	adds	r3, #1
 80010c2:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 += 1;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 80010c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 80010ca:	3301      	adds	r3, #1
 80010cc:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 += 1;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 80010d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 80010d4:	3301      	adds	r3, #1
 80010d6:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <TIM1_TRG_COM_TIM11_IRQHandler+0x3c>)
 80010da:	f002 fffa 	bl	80040d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40000800 	.word	0x40000800
 80010e8:	40010000 	.word	0x40010000
 80010ec:	2000020c 	.word	0x2000020c

080010f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <OTG_FS_IRQHandler+0x10>)
 80010f6:	f001 f88d 	bl	8002214 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000180c 	.word	0x2000180c

08001104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <SystemInit+0x20>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <SystemInit+0x20>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <Reset_Handler>:
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001160 <LoopFillZerobss+0x12>
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <LoopFillZerobss+0x16>)
 800112e:	490e      	ldr	r1, [pc, #56]	; (8001168 <LoopFillZerobss+0x1a>)
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <LoopFillZerobss+0x1e>)
 8001132:	2300      	movs	r3, #0
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:
 8001136:	58d4      	ldr	r4, [r2, r3]
 8001138:	50c4      	str	r4, [r0, r3]
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:
 800113c:	18c4      	adds	r4, r0, r3
 800113e:	428c      	cmp	r4, r1
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <LoopFillZerobss+0x22>)
 8001144:	4c0b      	ldr	r4, [pc, #44]	; (8001174 <LoopFillZerobss+0x26>)
 8001146:	2300      	movs	r3, #0
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:
 800114e:	42a2      	cmp	r2, r4
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>
 8001152:	f7ff ffd7 	bl	8001104 <SystemInit>
 8001156:	f008 fb87 	bl	8009868 <__libc_init_array>
 800115a:	f7ff f9bb 	bl	80004d4 <main>
 800115e:	4770      	bx	lr
 8001160:	20020000 	.word	0x20020000
 8001164:	20000000 	.word	0x20000000
 8001168:	200000fc 	.word	0x200000fc
 800116c:	08009938 	.word	0x08009938
 8001170:	200000fc 	.word	0x200000fc
 8001174:	20001f38 	.word	0x20001f38

08001178 <ADC_IRQHandler>:
 8001178:	e7fe      	b.n	8001178 <ADC_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <HAL_Init+0x40>)
 8001186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_Init+0x40>)
 8001192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_Init+0x40>)
 800119e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 fbc1 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011aa:	200f      	movs	r0, #15
 80011ac:	f000 f808 	bl	80011c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b0:	f7ff fcfa 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023c00 	.word	0x40023c00

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x54>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_InitTick+0x58>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fbd9 	bl	8001996 <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00e      	b.n	800120c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d80a      	bhi.n	800120a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011fc:	f000 fba1 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001200:	4a06      	ldr	r2, [pc, #24]	; (800121c <HAL_InitTick+0x5c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	e000      	b.n	800120c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000000 	.word	0x20000000
 8001218:	20000008 	.word	0x20000008
 800121c:	20000004 	.word	0x20000004

08001220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008
 8001244:	20000328 	.word	0x20000328

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000328 	.word	0x20000328

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_Delay+0x44>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffde 	bl	8001248 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008

080012a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e033      	b.n	8001326 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fc96 	bl	8000bf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d118      	bne.n	8001318 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012ee:	f023 0302 	bic.w	r3, r3, #2
 80012f2:	f043 0202 	orr.w	r2, r3, #2
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f94a 	bl	8001594 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f023 0303 	bic.w	r3, r3, #3
 800130e:	f043 0201 	orr.w	r2, r3, #1
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
 8001316:	e001      	b.n	800131c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_ADC_ConfigChannel+0x1c>
 8001348:	2302      	movs	r3, #2
 800134a:	e113      	b.n	8001574 <HAL_ADC_ConfigChannel+0x244>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b09      	cmp	r3, #9
 800135a:	d925      	bls.n	80013a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68d9      	ldr	r1, [r3, #12]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	3b1e      	subs	r3, #30
 8001372:	2207      	movs	r2, #7
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43da      	mvns	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	400a      	ands	r2, r1
 8001380:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68d9      	ldr	r1, [r3, #12]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	4603      	mov	r3, r0
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4403      	add	r3, r0
 800139a:	3b1e      	subs	r3, #30
 800139c:	409a      	lsls	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	e022      	b.n	80013ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6919      	ldr	r1, [r3, #16]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	2207      	movs	r2, #7
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	400a      	ands	r2, r1
 80013ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6919      	ldr	r1, [r3, #16]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	4603      	mov	r3, r0
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4403      	add	r3, r0
 80013e4:	409a      	lsls	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d824      	bhi.n	8001440 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	3b05      	subs	r3, #5
 8001408:	221f      	movs	r2, #31
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	400a      	ands	r2, r1
 8001416:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	4618      	mov	r0, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b05      	subs	r3, #5
 8001432:	fa00 f203 	lsl.w	r2, r0, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
 800143e:	e04c      	b.n	80014da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b0c      	cmp	r3, #12
 8001446:	d824      	bhi.n	8001492 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	3b23      	subs	r3, #35	; 0x23
 800145a:	221f      	movs	r2, #31
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43da      	mvns	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	400a      	ands	r2, r1
 8001468:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	b29b      	uxth	r3, r3
 8001476:	4618      	mov	r0, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	3b23      	subs	r3, #35	; 0x23
 8001484:	fa00 f203 	lsl.w	r2, r0, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	631a      	str	r2, [r3, #48]	; 0x30
 8001490:	e023      	b.n	80014da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	3b41      	subs	r3, #65	; 0x41
 80014a4:	221f      	movs	r2, #31
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	400a      	ands	r2, r1
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	3b41      	subs	r3, #65	; 0x41
 80014ce:	fa00 f203 	lsl.w	r2, r0, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <HAL_ADC_ConfigChannel+0x250>)
 80014dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a28      	ldr	r2, [pc, #160]	; (8001584 <HAL_ADC_ConfigChannel+0x254>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d10f      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x1d8>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b12      	cmp	r3, #18
 80014ee:	d10b      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_ADC_ConfigChannel+0x254>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d12b      	bne.n	800156a <HAL_ADC_ConfigChannel+0x23a>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <HAL_ADC_ConfigChannel+0x258>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d003      	beq.n	8001524 <HAL_ADC_ConfigChannel+0x1f4>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b11      	cmp	r3, #17
 8001522:	d122      	bne.n	800156a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a11      	ldr	r2, [pc, #68]	; (8001588 <HAL_ADC_ConfigChannel+0x258>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d111      	bne.n	800156a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_ADC_ConfigChannel+0x25c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a11      	ldr	r2, [pc, #68]	; (8001590 <HAL_ADC_ConfigChannel+0x260>)
 800154c:	fba2 2303 	umull	r2, r3, r2, r3
 8001550:	0c9a      	lsrs	r2, r3, #18
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800155c:	e002      	b.n	8001564 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	3b01      	subs	r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f9      	bne.n	800155e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40012300 	.word	0x40012300
 8001584:	40012000 	.word	0x40012000
 8001588:	10000012 	.word	0x10000012
 800158c:	20000000 	.word	0x20000000
 8001590:	431bde83 	.word	0x431bde83

08001594 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800159c:	4b79      	ldr	r3, [pc, #484]	; (8001784 <ADC_Init+0x1f0>)
 800159e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	431a      	orrs	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	021a      	lsls	r2, r3, #8
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6859      	ldr	r1, [r3, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800160e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6899      	ldr	r1, [r3, #8]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	4a58      	ldr	r2, [pc, #352]	; (8001788 <ADC_Init+0x1f4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d022      	beq.n	8001672 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800163a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6899      	ldr	r1, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800165c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6899      	ldr	r1, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	e00f      	b.n	8001692 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001680:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001690:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0202 	bic.w	r2, r2, #2
 80016a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6899      	ldr	r1, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7e1b      	ldrb	r3, [r3, #24]
 80016ac:	005a      	lsls	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01b      	beq.n	80016f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6859      	ldr	r1, [r3, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	3b01      	subs	r3, #1
 80016ec:	035a      	lsls	r2, r3, #13
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	e007      	b.n	8001708 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001706:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	3b01      	subs	r3, #1
 8001724:	051a      	lsls	r2, r3, #20
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800173c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6899      	ldr	r1, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800174a:	025a      	lsls	r2, r3, #9
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6899      	ldr	r1, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	029a      	lsls	r2, r3, #10
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	609a      	str	r2, [r3, #8]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	40012300 	.word	0x40012300
 8001788:	0f000001 	.word	0x0f000001

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4907      	ldr	r1, [pc, #28]	; (8001828 <__NVIC_EnableIRQ+0x38>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff29 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff3e 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff31 	bl	80017f0 <__NVIC_EnableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffa2 	bl	80018e8 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	e159      	b.n	8001c80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 8148 	bne.w	8001c7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d005      	beq.n	8001a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d130      	bne.n	8001a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d017      	beq.n	8001aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d123      	bne.n	8001af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	69b9      	ldr	r1, [r7, #24]
 8001af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80a2 	beq.w	8001c7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b57      	ldr	r3, [pc, #348]	; (8001c98 <HAL_GPIO_Init+0x2e8>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4a56      	ldr	r2, [pc, #344]	; (8001c98 <HAL_GPIO_Init+0x2e8>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	; 0x44
 8001b46:	4b54      	ldr	r3, [pc, #336]	; (8001c98 <HAL_GPIO_Init+0x2e8>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b52:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <HAL_GPIO_Init+0x2ec>)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	220f      	movs	r2, #15
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a49      	ldr	r2, [pc, #292]	; (8001ca0 <HAL_GPIO_Init+0x2f0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d019      	beq.n	8001bb2 <HAL_GPIO_Init+0x202>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a48      	ldr	r2, [pc, #288]	; (8001ca4 <HAL_GPIO_Init+0x2f4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_GPIO_Init+0x1fe>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a47      	ldr	r2, [pc, #284]	; (8001ca8 <HAL_GPIO_Init+0x2f8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00d      	beq.n	8001baa <HAL_GPIO_Init+0x1fa>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a46      	ldr	r2, [pc, #280]	; (8001cac <HAL_GPIO_Init+0x2fc>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d007      	beq.n	8001ba6 <HAL_GPIO_Init+0x1f6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a45      	ldr	r2, [pc, #276]	; (8001cb0 <HAL_GPIO_Init+0x300>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d101      	bne.n	8001ba2 <HAL_GPIO_Init+0x1f2>
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	e008      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc4:	4935      	ldr	r1, [pc, #212]	; (8001c9c <HAL_GPIO_Init+0x2ec>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd2:	4b38      	ldr	r3, [pc, #224]	; (8001cb4 <HAL_GPIO_Init+0x304>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf6:	4a2f      	ldr	r2, [pc, #188]	; (8001cb4 <HAL_GPIO_Init+0x304>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_GPIO_Init+0x304>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c20:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c26:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4a:	4a1a      	ldr	r2, [pc, #104]	; (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c74:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	f67f aea2 	bls.w	80019cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40013c00 	.word	0x40013c00

08001cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cd4:	e003      	b.n	8001cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	619a      	str	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e12b      	b.n	8001f56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7fe ffb4 	bl	8000c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2224      	movs	r2, #36	; 0x24
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d50:	f001 ffbe 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8001d54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a81      	ldr	r2, [pc, #516]	; (8001f60 <HAL_I2C_Init+0x274>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d807      	bhi.n	8001d70 <HAL_I2C_Init+0x84>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <HAL_I2C_Init+0x278>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	bf94      	ite	ls
 8001d68:	2301      	movls	r3, #1
 8001d6a:	2300      	movhi	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	e006      	b.n	8001d7e <HAL_I2C_Init+0x92>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4a7d      	ldr	r2, [pc, #500]	; (8001f68 <HAL_I2C_Init+0x27c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	bf94      	ite	ls
 8001d78:	2301      	movls	r3, #1
 8001d7a:	2300      	movhi	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0e7      	b.n	8001f56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4a78      	ldr	r2, [pc, #480]	; (8001f6c <HAL_I2C_Init+0x280>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0c9b      	lsrs	r3, r3, #18
 8001d90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a6a      	ldr	r2, [pc, #424]	; (8001f60 <HAL_I2C_Init+0x274>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d802      	bhi.n	8001dc0 <HAL_I2C_Init+0xd4>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	e009      	b.n	8001dd4 <HAL_I2C_Init+0xe8>
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	4a69      	ldr	r2, [pc, #420]	; (8001f70 <HAL_I2C_Init+0x284>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001de6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	495c      	ldr	r1, [pc, #368]	; (8001f60 <HAL_I2C_Init+0x274>)
 8001df0:	428b      	cmp	r3, r1
 8001df2:	d819      	bhi.n	8001e28 <HAL_I2C_Init+0x13c>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1e59      	subs	r1, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e02:	1c59      	adds	r1, r3, #1
 8001e04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e08:	400b      	ands	r3, r1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <HAL_I2C_Init+0x138>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1e59      	subs	r1, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e22:	e051      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e24:	2304      	movs	r3, #4
 8001e26:	e04f      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d111      	bne.n	8001e54 <HAL_I2C_Init+0x168>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1e58      	subs	r0, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	440b      	add	r3, r1
 8001e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2301      	moveq	r3, #1
 8001e4e:	2300      	movne	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	e012      	b.n	8001e7a <HAL_I2C_Init+0x18e>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e58      	subs	r0, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	0099      	lsls	r1, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Init+0x196>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e022      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10e      	bne.n	8001ea8 <HAL_I2C_Init+0x1bc>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1e58      	subs	r0, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6859      	ldr	r1, [r3, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	440b      	add	r3, r1
 8001e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea6:	e00f      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	0099      	lsls	r1, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	6809      	ldr	r1, [r1, #0]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6911      	ldr	r1, [r2, #16]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68d2      	ldr	r2, [r2, #12]
 8001f02:	4311      	orrs	r1, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	000186a0 	.word	0x000186a0
 8001f64:	001e847f 	.word	0x001e847f
 8001f68:	003d08ff 	.word	0x003d08ff
 8001f6c:	431bde83 	.word	0x431bde83
 8001f70:	10624dd3 	.word	0x10624dd3

08001f74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f76:	b08f      	sub	sp, #60	; 0x3c
 8001f78:	af0a      	add	r7, sp, #40	; 0x28
 8001f7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e10f      	b.n	80021a6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d106      	bne.n	8001fa6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f007 f94f 	bl	8009244 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d102      	bne.n	8001fc0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 fca2 	bl	800590e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	687e      	ldr	r6, [r7, #4]
 8001fd2:	466d      	mov	r5, sp
 8001fd4:	f106 0410 	add.w	r4, r6, #16
 8001fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fe4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fe8:	1d33      	adds	r3, r6, #4
 8001fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fec:	6838      	ldr	r0, [r7, #0]
 8001fee:	f003 fb79 	bl	80056e4 <USB_CoreInit>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0d0      	b.n	80021a6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f003 fc90 	bl	8005930 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e04a      	b.n	80020ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	333d      	adds	r3, #61	; 0x3d
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	333c      	adds	r3, #60	; 0x3c
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	b298      	uxth	r0, r3
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	3344      	adds	r3, #68	; 0x44
 8002052:	4602      	mov	r2, r0
 8002054:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	3340      	adds	r3, #64	; 0x40
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	3348      	adds	r3, #72	; 0x48
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	334c      	adds	r3, #76	; 0x4c
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3354      	adds	r3, #84	; 0x54
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	3301      	adds	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d3af      	bcc.n	8002016 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
 80020ba:	e044      	b.n	8002146 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	3301      	adds	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	429a      	cmp	r2, r3
 800214e:	d3b5      	bcc.n	80020bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	687e      	ldr	r6, [r7, #4]
 8002158:	466d      	mov	r5, sp
 800215a:	f106 0410 	add.w	r4, r6, #16
 800215e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002166:	e894 0003 	ldmia.w	r4, {r0, r1}
 800216a:	e885 0003 	stmia.w	r5, {r0, r1}
 800216e:	1d33      	adds	r3, r6, #4
 8002170:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002172:	6838      	ldr	r0, [r7, #0]
 8002174:	f003 fc28 	bl	80059c8 <USB_DevInit>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e00d      	b.n	80021a6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f004 fd77 	bl	8006c92 <USB_DevDisconnect>

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_PCD_Start+0x1c>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e020      	b.n	800220c <HAL_PCD_Start+0x5e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d109      	bne.n	80021ee <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d005      	beq.n	80021ee <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 fb7a 	bl	80058ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f004 fd27 	bl	8006c50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b08d      	sub	sp, #52	; 0x34
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f004 fde5 	bl	8006dfa <USB_GetMode>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 848a 	bne.w	8002b4c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f004 fd49 	bl	8006cd4 <USB_ReadInterrupts>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 8480 	beq.w	8002b4a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f004 fd36 	bl	8006cd4 <USB_ReadInterrupts>
 8002268:	4603      	mov	r3, r0
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b02      	cmp	r3, #2
 8002270:	d107      	bne.n	8002282 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f002 0202 	and.w	r2, r2, #2
 8002280:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f004 fd24 	bl	8006cd4 <USB_ReadInterrupts>
 800228c:	4603      	mov	r3, r0
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b10      	cmp	r3, #16
 8002294:	d161      	bne.n	800235a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0210 	bic.w	r2, r2, #16
 80022a4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	f003 020f 	and.w	r2, r3, #15
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	3304      	adds	r3, #4
 80022c4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	0c5b      	lsrs	r3, r3, #17
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d124      	bne.n	800231c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022d8:	4013      	ands	r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d035      	beq.n	800234a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	6a38      	ldr	r0, [r7, #32]
 80022f2:	f004 fb5b 	bl	80069ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002302:	441a      	add	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	6a1a      	ldr	r2, [r3, #32]
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002314:	441a      	add	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	621a      	str	r2, [r3, #32]
 800231a:	e016      	b.n	800234a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	0c5b      	lsrs	r3, r3, #17
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	2b06      	cmp	r3, #6
 8002326:	d110      	bne.n	800234a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800232e:	2208      	movs	r2, #8
 8002330:	4619      	mov	r1, r3
 8002332:	6a38      	ldr	r0, [r7, #32]
 8002334:	f004 fb3a 	bl	80069ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002344:	441a      	add	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0210 	orr.w	r2, r2, #16
 8002358:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f004 fcb8 	bl	8006cd4 <USB_ReadInterrupts>
 8002364:	4603      	mov	r3, r0
 8002366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800236a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800236e:	f040 80a7 	bne.w	80024c0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f004 fcbd 	bl	8006cfa <USB_ReadDevAllOutEpInterrupt>
 8002380:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002382:	e099      	b.n	80024b8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 808e 	beq.w	80024ac <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f004 fce1 	bl	8006d62 <USB_ReadDevOutEPInterrupt>
 80023a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00c      	beq.n	80023c6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b8:	461a      	mov	r2, r3
 80023ba:	2301      	movs	r3, #1
 80023bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fec3 	bl	800314c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00c      	beq.n	80023ea <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023dc:	461a      	mov	r2, r3
 80023de:	2308      	movs	r3, #8
 80023e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 ff99 	bl	800331c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002400:	461a      	mov	r2, r3
 8002402:	2310      	movs	r3, #16
 8002404:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d030      	beq.n	8002472 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002418:	2b80      	cmp	r3, #128	; 0x80
 800241a:	d109      	bne.n	8002430 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800242a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	3304      	adds	r3, #4
 8002444:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	78db      	ldrb	r3, [r3, #3]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d108      	bne.n	8002460 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2200      	movs	r2, #0
 8002452:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	b2db      	uxtb	r3, r3
 8002458:	4619      	mov	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f006 ffee 	bl	800943c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246c:	461a      	mov	r2, r3
 800246e:	2302      	movs	r3, #2
 8002470:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	4413      	add	r3, r2
 8002484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002488:	461a      	mov	r2, r3
 800248a:	2320      	movs	r3, #32
 800248c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d009      	beq.n	80024ac <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a4:	461a      	mov	r2, r3
 80024a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	3301      	adds	r3, #1
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f47f af62 	bne.w	8002384 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f004 fc05 	bl	8006cd4 <USB_ReadInterrupts>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024d4:	f040 80db 	bne.w	800268e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f004 fc26 	bl	8006d2e <USB_ReadDevAllInEpInterrupt>
 80024e2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024e8:	e0cd      	b.n	8002686 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80c2 	beq.w	800267a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f004 fc4c 	bl	8006d9e <USB_ReadDevInEPInterrupt>
 8002506:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d057      	beq.n	80025c2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	2201      	movs	r2, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	43db      	mvns	r3, r3
 800252c:	69f9      	ldr	r1, [r7, #28]
 800252e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002532:	4013      	ands	r3, r2
 8002534:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	4413      	add	r3, r2
 800253e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002542:	461a      	mov	r2, r3
 8002544:	2301      	movs	r3, #1
 8002546:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d132      	bne.n	80025b6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	334c      	adds	r3, #76	; 0x4c
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4403      	add	r3, r0
 8002570:	3348      	adds	r3, #72	; 0x48
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4419      	add	r1, r3
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4403      	add	r3, r0
 8002584:	334c      	adds	r3, #76	; 0x4c
 8002586:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	2b00      	cmp	r3, #0
 800258c:	d113      	bne.n	80025b6 <HAL_PCD_IRQHandler+0x3a2>
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	3354      	adds	r3, #84	; 0x54
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d108      	bne.n	80025b6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025ae:	461a      	mov	r2, r3
 80025b0:	2101      	movs	r1, #1
 80025b2:	f004 fc53 	bl	8006e5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	4619      	mov	r1, r3
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f006 fec2 	bl	8009346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d8:	461a      	mov	r2, r3
 80025da:	2308      	movs	r3, #8
 80025dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025f4:	461a      	mov	r2, r3
 80025f6:	2310      	movs	r3, #16
 80025f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	4413      	add	r3, r2
 800260c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002610:	461a      	mov	r2, r3
 8002612:	2340      	movs	r3, #64	; 0x40
 8002614:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d023      	beq.n	8002668 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002622:	6a38      	ldr	r0, [r7, #32]
 8002624:	f003 fb34 	bl	8005c90 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	3338      	adds	r3, #56	; 0x38
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	3304      	adds	r3, #4
 800263a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	78db      	ldrb	r3, [r3, #3]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d108      	bne.n	8002656 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2200      	movs	r2, #0
 8002648:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	b2db      	uxtb	r3, r3
 800264e:	4619      	mov	r1, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f006 ff05 	bl	8009460 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002662:	461a      	mov	r2, r3
 8002664:	2302      	movs	r3, #2
 8002666:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002672:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fcdb 	bl	8003030 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	3301      	adds	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	085b      	lsrs	r3, r3, #1
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f af2e 	bne.w	80024ea <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f004 fb1e 	bl	8006cd4 <USB_ReadInterrupts>
 8002698:	4603      	mov	r3, r0
 800269a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800269e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026a2:	d122      	bne.n	80026ea <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d108      	bne.n	80026d4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026ca:	2100      	movs	r1, #0
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fec3 	bl	8003458 <HAL_PCDEx_LPM_Callback>
 80026d2:	e002      	b.n	80026da <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f006 fea3 	bl	8009420 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f004 faf0 	bl	8006cd4 <USB_ReadInterrupts>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026fe:	d112      	bne.n	8002726 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d102      	bne.n	8002716 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f006 fe5f 	bl	80093d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002724:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f004 fad2 	bl	8006cd4 <USB_ReadInterrupts>
 8002730:	4603      	mov	r3, r0
 8002732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273a:	f040 80b7 	bne.w	80028ac <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2110      	movs	r1, #16
 8002758:	4618      	mov	r0, r3
 800275a:	f003 fa99 	bl	8005c90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275e:	2300      	movs	r3, #0
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002762:	e046      	b.n	80027f2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	4413      	add	r3, r2
 800276c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002770:	461a      	mov	r2, r3
 8002772:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002776:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002788:	0151      	lsls	r1, r2, #5
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	440a      	add	r2, r1
 800278e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002792:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002796:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a4:	461a      	mov	r2, r3
 80027a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027aa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027bc:	0151      	lsls	r1, r2, #5
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	440a      	add	r2, r1
 80027c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027dc:	0151      	lsls	r1, r2, #5
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	440a      	add	r2, r1
 80027e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027ea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	3301      	adds	r3, #1
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d3b3      	bcc.n	8002764 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800280a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800280e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	2b00      	cmp	r3, #0
 8002816:	d016      	beq.n	8002846 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800281e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002828:	f043 030b 	orr.w	r3, r3, #11
 800282c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800283e:	f043 030b 	orr.w	r3, r3, #11
 8002842:	6453      	str	r3, [r2, #68]	; 0x44
 8002844:	e015      	b.n	8002872 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002858:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800285c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800286c:	f043 030b 	orr.w	r3, r3, #11
 8002870:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002880:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002884:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002896:	461a      	mov	r2, r3
 8002898:	f004 fae0 	bl	8006e5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f004 fa0f 	bl	8006cd4 <USB_ReadInterrupts>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c0:	d124      	bne.n	800290c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 faa5 	bl	8006e16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 fa5a 	bl	8005d8a <USB_GetDevSpeed>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681c      	ldr	r4, [r3, #0]
 80028e2:	f001 f9e9 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 80028e6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	4620      	mov	r0, r4
 80028f2:	f002 ff59 	bl	80057a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f006 fd4d 	bl	8009396 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800290a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f004 f9df 	bl	8006cd4 <USB_ReadInterrupts>
 8002916:	4603      	mov	r3, r0
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b08      	cmp	r3, #8
 800291e:	d10a      	bne.n	8002936 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f006 fd2a 	bl	800937a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f002 0208 	and.w	r2, r2, #8
 8002934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f004 f9ca 	bl	8006cd4 <USB_ReadInterrupts>
 8002940:	4603      	mov	r3, r0
 8002942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002946:	2b80      	cmp	r3, #128	; 0x80
 8002948:	d122      	bne.n	8002990 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002956:	2301      	movs	r3, #1
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
 800295a:	e014      	b.n	8002986 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d105      	bne.n	8002980 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4619      	mov	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fb27 	bl	8002fce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	3301      	adds	r3, #1
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298c:	429a      	cmp	r2, r3
 800298e:	d3e5      	bcc.n	800295c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f004 f99d 	bl	8006cd4 <USB_ReadInterrupts>
 800299a:	4603      	mov	r3, r0
 800299c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029a4:	d13b      	bne.n	8002a1e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a6:	2301      	movs	r3, #1
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
 80029aa:	e02b      	b.n	8002a04 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3340      	adds	r3, #64	; 0x40
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d115      	bne.n	80029fe <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	da12      	bge.n	80029fe <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	333f      	adds	r3, #63	; 0x3f
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	4619      	mov	r1, r3
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fae8 	bl	8002fce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	3301      	adds	r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d3ce      	bcc.n	80029ac <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 f956 	bl	8006cd4 <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a32:	d155      	bne.n	8002ae0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a34:	2301      	movs	r3, #1
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
 8002a38:	e045      	b.n	8002ac6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d12e      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da2b      	bge.n	8002ac0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a74:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d121      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002abc:	6053      	str	r3, [r2, #4]
            break;
 8002abe:	e007      	b.n	8002ad0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d3b4      	bcc.n	8002a3a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f004 f8f5 	bl	8006cd4 <USB_ReadInterrupts>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af4:	d10a      	bne.n	8002b0c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f006 fcc4 	bl	8009484 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 f8df 	bl	8006cd4 <USB_ReadInterrupts>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d115      	bne.n	8002b4c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f006 fcb4 	bl	80094a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6859      	ldr	r1, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	e000      	b.n	8002b4c <HAL_PCD_IRQHandler+0x938>
      return;
 8002b4a:	bf00      	nop
    }
  }
}
 8002b4c:	3734      	adds	r7, #52	; 0x34
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd90      	pop	{r4, r7, pc}

08002b52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_PCD_SetAddress+0x1a>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e013      	b.n	8002b94 <HAL_PCD_SetAddress+0x42>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 f83d 	bl	8006c04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	70fb      	strb	r3, [r7, #3]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	803b      	strh	r3, [r7, #0]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	da0f      	bge.n	8002be2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	f003 020f 	and.w	r2, r3, #15
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	3338      	adds	r3, #56	; 0x38
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	705a      	strb	r2, [r3, #1]
 8002be0:	e00f      	b.n	8002c02 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	f003 020f 	and.w	r2, r3, #15
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c0e:	883a      	ldrh	r2, [r7, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	78ba      	ldrb	r2, [r7, #2]
 8002c18:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	785b      	ldrb	r3, [r3, #1]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c2c:	78bb      	ldrb	r3, [r7, #2]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d102      	bne.n	8002c38 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_PCD_EP_Open+0xaa>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e00e      	b.n	8002c64 <HAL_PCD_EP_Open+0xc8>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68f9      	ldr	r1, [r7, #12]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 f8bd 	bl	8005dd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002c62:	7afb      	ldrb	r3, [r7, #11]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	da0f      	bge.n	8002ca0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	f003 020f 	and.w	r2, r3, #15
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	3338      	adds	r3, #56	; 0x38
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4413      	add	r3, r2
 8002c94:	3304      	adds	r3, #4
 8002c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	705a      	strb	r2, [r3, #1]
 8002c9e:	e00f      	b.n	8002cc0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	f003 020f 	and.w	r2, r3, #15
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_PCD_EP_Close+0x6e>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e00e      	b.n	8002cf8 <HAL_PCD_EP_Close+0x8c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68f9      	ldr	r1, [r7, #12]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 f8fb 	bl	8005ee4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d10:	7afb      	ldrb	r3, [r7, #11]
 8002d12:	f003 020f 	and.w	r2, r3, #15
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4413      	add	r3, r2
 8002d26:	3304      	adds	r3, #4
 8002d28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d42:	7afb      	ldrb	r3, [r7, #11]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d102      	bne.n	8002d5c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d5c:	7afb      	ldrb	r3, [r7, #11]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	6979      	ldr	r1, [r7, #20]
 8002d74:	f003 fbda 	bl	800652c <USB_EP0StartXfer>
 8002d78:	e008      	b.n	8002d8c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	6979      	ldr	r1, [r7, #20]
 8002d88:	f003 f988 	bl	800609c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	f003 020f 	and.w	r2, r3, #15
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002db8:	681b      	ldr	r3, [r3, #0]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b086      	sub	sp, #24
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd6:	7afb      	ldrb	r3, [r7, #11]
 8002dd8:	f003 020f 	and.w	r2, r3, #15
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	3338      	adds	r3, #56	; 0x38
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	3304      	adds	r3, #4
 8002dec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2201      	movs	r2, #1
 8002e04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e06:	7afb      	ldrb	r3, [r7, #11]
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e20:	7afb      	ldrb	r3, [r7, #11]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	6979      	ldr	r1, [r7, #20]
 8002e38:	f003 fb78 	bl	800652c <USB_EP0StartXfer>
 8002e3c:	e008      	b.n	8002e50 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	6979      	ldr	r1, [r7, #20]
 8002e4c:	f003 f926 	bl	800609c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	f003 020f 	and.w	r2, r3, #15
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d901      	bls.n	8002e78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e050      	b.n	8002f1a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da0f      	bge.n	8002ea0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 020f 	and.w	r2, r3, #15
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	3338      	adds	r3, #56	; 0x38
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	3304      	adds	r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	705a      	strb	r2, [r3, #1]
 8002e9e:	e00d      	b.n	8002ebc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_PCD_EP_SetStall+0x82>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e01e      	b.n	8002f1a <HAL_PCD_EP_SetStall+0xc0>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68f9      	ldr	r1, [r7, #12]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f003 fdb6 	bl	8006a5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	b2d9      	uxtb	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f003 ffa6 	bl	8006e5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	f003 020f 	and.w	r2, r3, #15
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d901      	bls.n	8002f40 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e042      	b.n	8002fc6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da0f      	bge.n	8002f68 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	3338      	adds	r3, #56	; 0x38
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	705a      	strb	r2, [r3, #1]
 8002f66:	e00f      	b.n	8002f88 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	f003 020f 	and.w	r2, r3, #15
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3304      	adds	r3, #4
 8002f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_PCD_EP_ClrStall+0x86>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e00e      	b.n	8002fc6 <HAL_PCD_EP_ClrStall+0xa4>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 fdbe 	bl	8006b38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	da0c      	bge.n	8002ffc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	f003 020f 	and.w	r2, r3, #15
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	3338      	adds	r3, #56	; 0x38
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e00c      	b.n	8003016 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	f003 020f 	and.w	r2, r3, #15
 8003002:	4613      	mov	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	3304      	adds	r3, #4
 8003014:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68f9      	ldr	r1, [r7, #12]
 800301c:	4618      	mov	r0, r3
 800301e:	f003 fbdd 	bl	80067dc <USB_EPStopXfer>
 8003022:	4603      	mov	r3, r0
 8003024:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003026:	7afb      	ldrb	r3, [r7, #11]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af02      	add	r7, sp, #8
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	3338      	adds	r3, #56	; 0x38
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	3304      	adds	r3, #4
 8003056:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a1a      	ldr	r2, [r3, #32]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	429a      	cmp	r2, r3
 8003062:	d901      	bls.n	8003068 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e06c      	b.n	8003142 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	429a      	cmp	r2, r3
 800307c:	d902      	bls.n	8003084 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	3303      	adds	r3, #3
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800308c:	e02b      	b.n	80030e6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d902      	bls.n	80030aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3303      	adds	r3, #3
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6919      	ldr	r1, [r3, #16]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	4603      	mov	r3, r0
 80030c8:	6978      	ldr	r0, [r7, #20]
 80030ca:	f003 fc31 	bl	8006930 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	441a      	add	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a1a      	ldr	r2, [r3, #32]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	441a      	add	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d809      	bhi.n	8003110 <PCD_WriteEmptyTxFifo+0xe0>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a1a      	ldr	r2, [r3, #32]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003104:	429a      	cmp	r2, r3
 8003106:	d203      	bcs.n	8003110 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1be      	bne.n	800308e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	699a      	ldr	r2, [r3, #24]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	429a      	cmp	r2, r3
 800311a:	d811      	bhi.n	8003140 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	2201      	movs	r2, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	43db      	mvns	r3, r3
 8003136:	6939      	ldr	r1, [r7, #16]
 8003138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800313c:	4013      	ands	r3, r2
 800313e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3720      	adds	r7, #32
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	333c      	adds	r3, #60	; 0x3c
 8003164:	3304      	adds	r3, #4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d17b      	bne.n	800327a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d015      	beq.n	80031b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	4a61      	ldr	r2, [pc, #388]	; (8003314 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	f240 80b9 	bls.w	8003308 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80b3 	beq.w	8003308 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ae:	461a      	mov	r2, r3
 80031b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031b4:	6093      	str	r3, [r2, #8]
 80031b6:	e0a7      	b.n	8003308 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ce:	461a      	mov	r2, r3
 80031d0:	2320      	movs	r3, #32
 80031d2:	6093      	str	r3, [r2, #8]
 80031d4:	e098      	b.n	8003308 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f040 8093 	bne.w	8003308 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4a4b      	ldr	r2, [pc, #300]	; (8003314 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d90f      	bls.n	800320a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003200:	461a      	mov	r2, r3
 8003202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003206:	6093      	str	r3, [r2, #8]
 8003208:	e07e      	b.n	8003308 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	3304      	adds	r3, #4
 800321e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	0159      	lsls	r1, r3, #5
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	440b      	add	r3, r1
 800322c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003236:	1ad2      	subs	r2, r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d114      	bne.n	800326c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003254:	461a      	mov	r2, r3
 8003256:	2101      	movs	r1, #1
 8003258:	f003 fe00 	bl	8006e5c <USB_EP0_OutStart>
 800325c:	e006      	b.n	800326c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	441a      	add	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f006 f84c 	bl	8009310 <HAL_PCD_DataOutStageCallback>
 8003278:	e046      	b.n	8003308 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	4a26      	ldr	r2, [pc, #152]	; (8003318 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d124      	bne.n	80032cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003298:	461a      	mov	r2, r3
 800329a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329e:	6093      	str	r3, [r2, #8]
 80032a0:	e032      	b.n	8003308 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b8:	461a      	mov	r2, r3
 80032ba:	2320      	movs	r3, #32
 80032bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	4619      	mov	r1, r3
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f006 f823 	bl	8009310 <HAL_PCD_DataOutStageCallback>
 80032ca:	e01d      	b.n	8003308 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d114      	bne.n	80032fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d108      	bne.n	80032fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032f4:	461a      	mov	r2, r3
 80032f6:	2100      	movs	r1, #0
 80032f8:	f003 fdb0 	bl	8006e5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	4619      	mov	r1, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f006 f804 	bl	8009310 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	4f54300a 	.word	0x4f54300a
 8003318:	4f54310a 	.word	0x4f54310a

0800331c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	333c      	adds	r3, #60	; 0x3c
 8003334:	3304      	adds	r3, #4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d90e      	bls.n	8003370 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003358:	2b00      	cmp	r3, #0
 800335a:	d009      	beq.n	8003370 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003368:	461a      	mov	r2, r3
 800336a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800336e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f005 ffbb 	bl	80092ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d90c      	bls.n	8003398 <PCD_EP_OutSetupPacket_int+0x7c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d108      	bne.n	8003398 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003390:	461a      	mov	r2, r3
 8003392:	2101      	movs	r1, #1
 8003394:	f003 fd62 	bl	8006e5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	4f54300a 	.word	0x4f54300a

080033a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	70fb      	strb	r3, [r7, #3]
 80033b4:	4613      	mov	r3, r2
 80033b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d107      	bne.n	80033d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033c6:	883b      	ldrh	r3, [r7, #0]
 80033c8:	0419      	lsls	r1, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	629a      	str	r2, [r3, #40]	; 0x28
 80033d4:	e028      	b.n	8003428 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	4413      	add	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e00d      	b.n	8003406 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	3340      	adds	r3, #64	; 0x40
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	4413      	add	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	3301      	adds	r3, #1
 8003404:	73fb      	strb	r3, [r7, #15]
 8003406:	7bfa      	ldrb	r2, [r7, #15]
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	3b01      	subs	r3, #1
 800340c:	429a      	cmp	r2, r3
 800340e:	d3ec      	bcc.n	80033ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003410:	883b      	ldrh	r3, [r7, #0]
 8003412:	0418      	lsls	r0, r3, #16
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6819      	ldr	r1, [r3, #0]
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	3b01      	subs	r3, #1
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	4302      	orrs	r2, r0
 8003420:	3340      	adds	r3, #64	; 0x40
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	460b      	mov	r3, r1
 8003440:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e267      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d075      	beq.n	800357a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800348e:	4b88      	ldr	r3, [pc, #544]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b04      	cmp	r3, #4
 8003498:	d00c      	beq.n	80034b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349a:	4b85      	ldr	r3, [pc, #532]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d112      	bne.n	80034cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a6:	4b82      	ldr	r3, [pc, #520]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b2:	d10b      	bne.n	80034cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	4b7e      	ldr	r3, [pc, #504]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d05b      	beq.n	8003578 <HAL_RCC_OscConfig+0x108>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d157      	bne.n	8003578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e242      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d4:	d106      	bne.n	80034e4 <HAL_RCC_OscConfig+0x74>
 80034d6:	4b76      	ldr	r3, [pc, #472]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a75      	ldr	r2, [pc, #468]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80034dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	e01d      	b.n	8003520 <HAL_RCC_OscConfig+0xb0>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x98>
 80034ee:	4b70      	ldr	r3, [pc, #448]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a6f      	ldr	r2, [pc, #444]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80034f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b6d      	ldr	r3, [pc, #436]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a6c      	ldr	r2, [pc, #432]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0xb0>
 8003508:	4b69      	ldr	r3, [pc, #420]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a68      	ldr	r2, [pc, #416]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 800350e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	4b66      	ldr	r3, [pc, #408]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a65      	ldr	r2, [pc, #404]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 800351a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d013      	beq.n	8003550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fd fe8e 	bl	8001248 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003530:	f7fd fe8a 	bl	8001248 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e207      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	4b5b      	ldr	r3, [pc, #364]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0xc0>
 800354e:	e014      	b.n	800357a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fd fe7a 	bl	8001248 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003558:	f7fd fe76 	bl	8001248 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	; 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e1f3      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356a:	4b51      	ldr	r3, [pc, #324]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0xe8>
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d063      	beq.n	800364e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003586:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003592:	4b47      	ldr	r3, [pc, #284]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800359a:	2b08      	cmp	r3, #8
 800359c:	d11c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359e:	4b44      	ldr	r3, [pc, #272]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d116      	bne.n	80035d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035aa:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_RCC_OscConfig+0x152>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e1c7      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c2:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4937      	ldr	r1, [pc, #220]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d6:	e03a      	b.n	800364e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d020      	beq.n	8003622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e0:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <HAL_RCC_OscConfig+0x244>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e6:	f7fd fe2f 	bl	8001248 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ee:	f7fd fe2b 	bl	8001248 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e1a8      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360c:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4925      	ldr	r1, [pc, #148]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
 8003620:	e015      	b.n	800364e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003622:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <HAL_RCC_OscConfig+0x244>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fd fe0e 	bl	8001248 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003630:	f7fd fe0a 	bl	8001248 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e187      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003642:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d036      	beq.n	80036c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d016      	beq.n	8003690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <HAL_RCC_OscConfig+0x248>)
 8003664:	2201      	movs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003668:	f7fd fdee 	bl	8001248 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003670:	f7fd fdea 	bl	8001248 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e167      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_OscConfig+0x240>)
 8003684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x200>
 800368e:	e01b      	b.n	80036c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_RCC_OscConfig+0x248>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003696:	f7fd fdd7 	bl	8001248 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800369c:	e00e      	b.n	80036bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800369e:	f7fd fdd3 	bl	8001248 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d907      	bls.n	80036bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e150      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
 80036b0:	40023800 	.word	0x40023800
 80036b4:	42470000 	.word	0x42470000
 80036b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036bc:	4b88      	ldr	r3, [pc, #544]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80036be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ea      	bne.n	800369e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8097 	beq.w	8003804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d6:	2300      	movs	r3, #0
 80036d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036da:	4b81      	ldr	r3, [pc, #516]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10f      	bne.n	8003706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	4b7d      	ldr	r3, [pc, #500]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	4a7c      	ldr	r2, [pc, #496]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80036f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f4:	6413      	str	r3, [r2, #64]	; 0x40
 80036f6:	4b7a      	ldr	r3, [pc, #488]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003706:	4b77      	ldr	r3, [pc, #476]	; (80038e4 <HAL_RCC_OscConfig+0x474>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d118      	bne.n	8003744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003712:	4b74      	ldr	r3, [pc, #464]	; (80038e4 <HAL_RCC_OscConfig+0x474>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a73      	ldr	r2, [pc, #460]	; (80038e4 <HAL_RCC_OscConfig+0x474>)
 8003718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371e:	f7fd fd93 	bl	8001248 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003726:	f7fd fd8f 	bl	8001248 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e10c      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003738:	4b6a      	ldr	r3, [pc, #424]	; (80038e4 <HAL_RCC_OscConfig+0x474>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d106      	bne.n	800375a <HAL_RCC_OscConfig+0x2ea>
 800374c:	4b64      	ldr	r3, [pc, #400]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003750:	4a63      	ldr	r2, [pc, #396]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	6713      	str	r3, [r2, #112]	; 0x70
 8003758:	e01c      	b.n	8003794 <HAL_RCC_OscConfig+0x324>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b05      	cmp	r3, #5
 8003760:	d10c      	bne.n	800377c <HAL_RCC_OscConfig+0x30c>
 8003762:	4b5f      	ldr	r3, [pc, #380]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	4a5e      	ldr	r2, [pc, #376]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003768:	f043 0304 	orr.w	r3, r3, #4
 800376c:	6713      	str	r3, [r2, #112]	; 0x70
 800376e:	4b5c      	ldr	r3, [pc, #368]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	4a5b      	ldr	r2, [pc, #364]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6713      	str	r3, [r2, #112]	; 0x70
 800377a:	e00b      	b.n	8003794 <HAL_RCC_OscConfig+0x324>
 800377c:	4b58      	ldr	r3, [pc, #352]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	4a57      	ldr	r2, [pc, #348]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	6713      	str	r3, [r2, #112]	; 0x70
 8003788:	4b55      	ldr	r3, [pc, #340]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	4a54      	ldr	r2, [pc, #336]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 800378e:	f023 0304 	bic.w	r3, r3, #4
 8003792:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d015      	beq.n	80037c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379c:	f7fd fd54 	bl	8001248 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a4:	f7fd fd50 	bl	8001248 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e0cb      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ba:	4b49      	ldr	r3, [pc, #292]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0ee      	beq.n	80037a4 <HAL_RCC_OscConfig+0x334>
 80037c6:	e014      	b.n	80037f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c8:	f7fd fd3e 	bl	8001248 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d0:	f7fd fd3a 	bl	8001248 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e0b5      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e6:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ee      	bne.n	80037d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d105      	bne.n	8003804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f8:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	4a38      	ldr	r2, [pc, #224]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80037fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003802:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80a1 	beq.w	8003950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800380e:	4b34      	ldr	r3, [pc, #208]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b08      	cmp	r3, #8
 8003818:	d05c      	beq.n	80038d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d141      	bne.n	80038a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003822:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <HAL_RCC_OscConfig+0x478>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7fd fd0e 	bl	8001248 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003830:	f7fd fd0a 	bl	8001248 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e087      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003842:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69da      	ldr	r2, [r3, #28]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	019b      	lsls	r3, r3, #6
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	3b01      	subs	r3, #1
 8003868:	041b      	lsls	r3, r3, #16
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	061b      	lsls	r3, r3, #24
 8003872:	491b      	ldr	r1, [pc, #108]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 8003874:	4313      	orrs	r3, r2
 8003876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003878:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_RCC_OscConfig+0x478>)
 800387a:	2201      	movs	r2, #1
 800387c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387e:	f7fd fce3 	bl	8001248 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003886:	f7fd fcdf 	bl	8001248 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e05c      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003898:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x416>
 80038a4:	e054      	b.n	8003950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_RCC_OscConfig+0x478>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fd fccc 	bl	8001248 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b4:	f7fd fcc8 	bl	8001248 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e045      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <HAL_RCC_OscConfig+0x470>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x444>
 80038d2:	e03d      	b.n	8003950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e038      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40007000 	.word	0x40007000
 80038e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038ec:	4b1b      	ldr	r3, [pc, #108]	; (800395c <HAL_RCC_OscConfig+0x4ec>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d028      	beq.n	800394c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d121      	bne.n	800394c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	429a      	cmp	r2, r3
 8003914:	d11a      	bne.n	800394c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800391c:	4013      	ands	r3, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003924:	4293      	cmp	r3, r2
 8003926:	d111      	bne.n	800394c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	085b      	lsrs	r3, r3, #1
 8003934:	3b01      	subs	r3, #1
 8003936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d107      	bne.n	800394c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800

08003960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0cc      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003974:	4b68      	ldr	r3, [pc, #416]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d90c      	bls.n	800399c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b65      	ldr	r3, [pc, #404]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b63      	ldr	r3, [pc, #396]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0b8      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d020      	beq.n	80039ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b4:	4b59      	ldr	r3, [pc, #356]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	4a58      	ldr	r2, [pc, #352]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039cc:	4b53      	ldr	r3, [pc, #332]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4a52      	ldr	r2, [pc, #328]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d8:	4b50      	ldr	r3, [pc, #320]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	494d      	ldr	r1, [pc, #308]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d044      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d107      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fe:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d119      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e07f      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d003      	beq.n	8003a1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1e:	4b3f      	ldr	r3, [pc, #252]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e06f      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2e:	4b3b      	ldr	r3, [pc, #236]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e067      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3e:	4b37      	ldr	r3, [pc, #220]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f023 0203 	bic.w	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	4934      	ldr	r1, [pc, #208]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a50:	f7fd fbfa 	bl	8001248 <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	e00a      	b.n	8003a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a58:	f7fd fbf6 	bl	8001248 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e04f      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	4b2b      	ldr	r3, [pc, #172]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 020c 	and.w	r2, r3, #12
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d1eb      	bne.n	8003a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a80:	4b25      	ldr	r3, [pc, #148]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d20c      	bcs.n	8003aa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8e:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e032      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab4:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4916      	ldr	r1, [pc, #88]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ad2:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	490e      	ldr	r1, [pc, #56]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ae6:	f000 f821 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003aea:	4602      	mov	r2, r0
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	490a      	ldr	r1, [pc, #40]	; (8003b20 <HAL_RCC_ClockConfig+0x1c0>)
 8003af8:	5ccb      	ldrb	r3, [r1, r3]
 8003afa:	fa22 f303 	lsr.w	r3, r2, r3
 8003afe:	4a09      	ldr	r2, [pc, #36]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <HAL_RCC_ClockConfig+0x1c8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fd fb5a 	bl	80011c0 <HAL_InitTick>

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40023c00 	.word	0x40023c00
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	08009910 	.word	0x08009910
 8003b24:	20000000 	.word	0x20000000
 8003b28:	20000004 	.word	0x20000004

08003b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b30:	b090      	sub	sp, #64	; 0x40
 8003b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	637b      	str	r3, [r7, #52]	; 0x34
 8003b38:	2300      	movs	r3, #0
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b44:	4b59      	ldr	r3, [pc, #356]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d00d      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x40>
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	f200 80a1 	bhi.w	8003c98 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0x34>
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b5e:	e09b      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b60:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b64:	e09b      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b66:	4b53      	ldr	r3, [pc, #332]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b6a:	e098      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b6c:	4b4f      	ldr	r3, [pc, #316]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b76:	4b4d      	ldr	r3, [pc, #308]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d028      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b82:	4b4a      	ldr	r3, [pc, #296]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	2200      	movs	r2, #0
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b94:	2100      	movs	r1, #0
 8003b96:	4b47      	ldr	r3, [pc, #284]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b98:	fb03 f201 	mul.w	r2, r3, r1
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4a43      	ldr	r2, [pc, #268]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ba6:	fba0 1202 	umull	r1, r2, r0, r2
 8003baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bac:	460a      	mov	r2, r1
 8003bae:	62ba      	str	r2, [r7, #40]	; 0x28
 8003bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb2:	4413      	add	r3, r2
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	2200      	movs	r2, #0
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	61fa      	str	r2, [r7, #28]
 8003bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003bc6:	f7fc fb07 	bl	80001d8 <__aeabi_uldivmod>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4613      	mov	r3, r2
 8003bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd2:	e053      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd4:	4b35      	ldr	r3, [pc, #212]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	099b      	lsrs	r3, r3, #6
 8003bda:	2200      	movs	r2, #0
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	617a      	str	r2, [r7, #20]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003be6:	f04f 0b00 	mov.w	fp, #0
 8003bea:	4652      	mov	r2, sl
 8003bec:	465b      	mov	r3, fp
 8003bee:	f04f 0000 	mov.w	r0, #0
 8003bf2:	f04f 0100 	mov.w	r1, #0
 8003bf6:	0159      	lsls	r1, r3, #5
 8003bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bfc:	0150      	lsls	r0, r2, #5
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	ebb2 080a 	subs.w	r8, r2, sl
 8003c06:	eb63 090b 	sbc.w	r9, r3, fp
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c1e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c22:	eb63 0509 	sbc.w	r5, r3, r9
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	00eb      	lsls	r3, r5, #3
 8003c30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c34:	00e2      	lsls	r2, r4, #3
 8003c36:	4614      	mov	r4, r2
 8003c38:	461d      	mov	r5, r3
 8003c3a:	eb14 030a 	adds.w	r3, r4, sl
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	eb45 030b 	adc.w	r3, r5, fp
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c52:	4629      	mov	r1, r5
 8003c54:	028b      	lsls	r3, r1, #10
 8003c56:	4621      	mov	r1, r4
 8003c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	028a      	lsls	r2, r1, #10
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c66:	2200      	movs	r2, #0
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	60fa      	str	r2, [r7, #12]
 8003c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c70:	f7fc fab2 	bl	80001d8 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4613      	mov	r3, r2
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	0c1b      	lsrs	r3, r3, #16
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	3301      	adds	r3, #1
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c96:	e002      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3740      	adds	r7, #64	; 0x40
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	00f42400 	.word	0x00f42400
 8003cb4:	017d7840 	.word	0x017d7840

08003cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cbc:	4b03      	ldr	r3, [pc, #12]	; (8003ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	20000000 	.word	0x20000000

08003cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cd4:	f7ff fff0 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	0a9b      	lsrs	r3, r3, #10
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4903      	ldr	r1, [pc, #12]	; (8003cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	08009920 	.word	0x08009920

08003cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cfc:	f7ff ffdc 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	0b5b      	lsrs	r3, r3, #13
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	4903      	ldr	r1, [pc, #12]	; (8003d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	08009920 	.word	0x08009920

08003d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e07b      	b.n	8003e2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d108      	bne.n	8003d4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d42:	d009      	beq.n	8003d58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	61da      	str	r2, [r3, #28]
 8003d4a:	e005      	b.n	8003d58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fc ffde 	bl	8000d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ddc:	ea42 0103 	orr.w	r1, r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	f003 0104 	and.w	r1, r3, #4
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	f003 0210 	and.w	r2, r3, #16
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e041      	b.n	8003ec8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7fc ffb3 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f000 fc65 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e041      	b.n	8003f66 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fc ffca 	bl	8000e90 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f000 fc16 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e041      	b.n	8004004 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d106      	bne.n	8003f9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f839 	bl	800400c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f000 fbc7 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e041      	b.n	80040b6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f839 	bl	80040be <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f000 fb6e 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b082      	sub	sp, #8
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d122      	bne.n	800412e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d11b      	bne.n	800412e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f06f 0202 	mvn.w	r2, #2
 80040fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 faf5 	bl	8004704 <HAL_TIM_IC_CaptureCallback>
 800411a:	e005      	b.n	8004128 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fae7 	bl	80046f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 faf8 	bl	8004718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b04      	cmp	r3, #4
 800413a:	d122      	bne.n	8004182 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b04      	cmp	r3, #4
 8004148:	d11b      	bne.n	8004182 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f06f 0204 	mvn.w	r2, #4
 8004152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 facb 	bl	8004704 <HAL_TIM_IC_CaptureCallback>
 800416e:	e005      	b.n	800417c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fabd 	bl	80046f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 face 	bl	8004718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b08      	cmp	r3, #8
 800418e:	d122      	bne.n	80041d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b08      	cmp	r3, #8
 800419c:	d11b      	bne.n	80041d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f06f 0208 	mvn.w	r2, #8
 80041a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2204      	movs	r2, #4
 80041ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 faa1 	bl	8004704 <HAL_TIM_IC_CaptureCallback>
 80041c2:	e005      	b.n	80041d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fa93 	bl	80046f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 faa4 	bl	8004718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d122      	bne.n	800422a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	2b10      	cmp	r3, #16
 80041f0:	d11b      	bne.n	800422a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f06f 0210 	mvn.w	r2, #16
 80041fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2208      	movs	r2, #8
 8004200:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fa77 	bl	8004704 <HAL_TIM_IC_CaptureCallback>
 8004216:	e005      	b.n	8004224 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fa69 	bl	80046f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fa7a 	bl	8004718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b01      	cmp	r3, #1
 8004236:	d10e      	bne.n	8004256 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b01      	cmp	r3, #1
 8004244:	d107      	bne.n	8004256 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f06f 0201 	mvn.w	r2, #1
 800424e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fa43 	bl	80046dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004260:	2b80      	cmp	r3, #128	; 0x80
 8004262:	d10e      	bne.n	8004282 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	2b80      	cmp	r3, #128	; 0x80
 8004270:	d107      	bne.n	8004282 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800427a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 ff65 	bl	800514c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b40      	cmp	r3, #64	; 0x40
 800428e:	d10e      	bne.n	80042ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429a:	2b40      	cmp	r3, #64	; 0x40
 800429c:	d107      	bne.n	80042ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fa3f 	bl	800472c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d10e      	bne.n	80042da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d107      	bne.n	80042da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f06f 0220 	mvn.w	r2, #32
 80042d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 ff2f 	bl	8005138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_TIM_OC_ConfigChannel+0x1e>
 80042fe:	2302      	movs	r3, #2
 8004300:	e048      	b.n	8004394 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b0c      	cmp	r3, #12
 800430e:	d839      	bhi.n	8004384 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	0800434d 	.word	0x0800434d
 800431c:	08004385 	.word	0x08004385
 8004320:	08004385 	.word	0x08004385
 8004324:	08004385 	.word	0x08004385
 8004328:	0800435b 	.word	0x0800435b
 800432c:	08004385 	.word	0x08004385
 8004330:	08004385 	.word	0x08004385
 8004334:	08004385 	.word	0x08004385
 8004338:	08004369 	.word	0x08004369
 800433c:	08004385 	.word	0x08004385
 8004340:	08004385 	.word	0x08004385
 8004344:	08004385 	.word	0x08004385
 8004348:	08004377 	.word	0x08004377
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fa74 	bl	8004840 <TIM_OC1_SetConfig>
      break;
 8004358:	e017      	b.n	800438a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68b9      	ldr	r1, [r7, #8]
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fad3 	bl	800490c <TIM_OC2_SetConfig>
      break;
 8004366:	e010      	b.n	800438a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68b9      	ldr	r1, [r7, #8]
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fb38 	bl	80049e4 <TIM_OC3_SetConfig>
      break;
 8004374:	e009      	b.n	800438a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fb9b 	bl	8004ab8 <TIM_OC4_SetConfig>
      break;
 8004382:	e002      	b.n	800438a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	75fb      	strb	r3, [r7, #23]
      break;
 8004388:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004392:	7dfb      	ldrb	r3, [r7, #23]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_TIM_IC_ConfigChannel+0x1e>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e088      	b.n	80044cc <HAL_TIM_IC_ConfigChannel+0x130>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d11b      	bne.n	8004400 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f000 fc50 	bl	8004c7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 020c 	bic.w	r2, r2, #12
 80043ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6999      	ldr	r1, [r3, #24]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	619a      	str	r2, [r3, #24]
 80043fe:	e060      	b.n	80044c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b04      	cmp	r3, #4
 8004404:	d11c      	bne.n	8004440 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	6819      	ldr	r1, [r3, #0]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f000 fcc8 	bl	8004daa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699a      	ldr	r2, [r3, #24]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004428:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6999      	ldr	r1, [r3, #24]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	021a      	lsls	r2, r3, #8
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	619a      	str	r2, [r3, #24]
 800443e:	e040      	b.n	80044c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b08      	cmp	r3, #8
 8004444:	d11b      	bne.n	800447e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6819      	ldr	r1, [r3, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f000 fd15 	bl	8004e84 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 020c 	bic.w	r2, r2, #12
 8004468:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69d9      	ldr	r1, [r3, #28]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	61da      	str	r2, [r3, #28]
 800447c:	e021      	b.n	80044c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b0c      	cmp	r3, #12
 8004482:	d11c      	bne.n	80044be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	6819      	ldr	r1, [r3, #0]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f000 fd32 	bl	8004efc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69d9      	ldr	r1, [r3, #28]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	021a      	lsls	r2, r3, #8
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	61da      	str	r2, [r3, #28]
 80044bc:	e001      	b.n	80044c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e0ae      	b.n	8004650 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b0c      	cmp	r3, #12
 80044fe:	f200 809f 	bhi.w	8004640 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004502:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004508:	0800453d 	.word	0x0800453d
 800450c:	08004641 	.word	0x08004641
 8004510:	08004641 	.word	0x08004641
 8004514:	08004641 	.word	0x08004641
 8004518:	0800457d 	.word	0x0800457d
 800451c:	08004641 	.word	0x08004641
 8004520:	08004641 	.word	0x08004641
 8004524:	08004641 	.word	0x08004641
 8004528:	080045bf 	.word	0x080045bf
 800452c:	08004641 	.word	0x08004641
 8004530:	08004641 	.word	0x08004641
 8004534:	08004641 	.word	0x08004641
 8004538:	080045ff 	.word	0x080045ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f97c 	bl	8004840 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0208 	orr.w	r2, r2, #8
 8004556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0204 	bic.w	r2, r2, #4
 8004566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6999      	ldr	r1, [r3, #24]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	619a      	str	r2, [r3, #24]
      break;
 800457a:	e064      	b.n	8004646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 f9c2 	bl	800490c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6999      	ldr	r1, [r3, #24]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	021a      	lsls	r2, r3, #8
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	619a      	str	r2, [r3, #24]
      break;
 80045bc:	e043      	b.n	8004646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fa0d 	bl	80049e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69da      	ldr	r2, [r3, #28]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0208 	orr.w	r2, r2, #8
 80045d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0204 	bic.w	r2, r2, #4
 80045e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69d9      	ldr	r1, [r3, #28]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	61da      	str	r2, [r3, #28]
      break;
 80045fc:	e023      	b.n	8004646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fa57 	bl	8004ab8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69d9      	ldr	r1, [r3, #28]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	021a      	lsls	r2, r3, #8
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	61da      	str	r2, [r3, #28]
      break;
 800463e:	e002      	b.n	8004646 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	75fb      	strb	r3, [r7, #23]
      break;
 8004644:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800464e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_TIM_SlaveConfigSynchro+0x18>
 800466c:	2302      	movs	r3, #2
 800466e:	e031      	b.n	80046d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004680:	6839      	ldr	r1, [r7, #0]
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fa68 	bl	8004b58 <TIM_SlaveTimer_SetConfig>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e018      	b.n	80046d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046c0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a34      	ldr	r2, [pc, #208]	; (8004824 <TIM_Base_SetConfig+0xe4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00f      	beq.n	8004778 <TIM_Base_SetConfig+0x38>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475e:	d00b      	beq.n	8004778 <TIM_Base_SetConfig+0x38>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a31      	ldr	r2, [pc, #196]	; (8004828 <TIM_Base_SetConfig+0xe8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d007      	beq.n	8004778 <TIM_Base_SetConfig+0x38>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a30      	ldr	r2, [pc, #192]	; (800482c <TIM_Base_SetConfig+0xec>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_Base_SetConfig+0x38>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a2f      	ldr	r2, [pc, #188]	; (8004830 <TIM_Base_SetConfig+0xf0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d108      	bne.n	800478a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a25      	ldr	r2, [pc, #148]	; (8004824 <TIM_Base_SetConfig+0xe4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d01b      	beq.n	80047ca <TIM_Base_SetConfig+0x8a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004798:	d017      	beq.n	80047ca <TIM_Base_SetConfig+0x8a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a22      	ldr	r2, [pc, #136]	; (8004828 <TIM_Base_SetConfig+0xe8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <TIM_Base_SetConfig+0x8a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a21      	ldr	r2, [pc, #132]	; (800482c <TIM_Base_SetConfig+0xec>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00f      	beq.n	80047ca <TIM_Base_SetConfig+0x8a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a20      	ldr	r2, [pc, #128]	; (8004830 <TIM_Base_SetConfig+0xf0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00b      	beq.n	80047ca <TIM_Base_SetConfig+0x8a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a1f      	ldr	r2, [pc, #124]	; (8004834 <TIM_Base_SetConfig+0xf4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d007      	beq.n	80047ca <TIM_Base_SetConfig+0x8a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a1e      	ldr	r2, [pc, #120]	; (8004838 <TIM_Base_SetConfig+0xf8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d003      	beq.n	80047ca <TIM_Base_SetConfig+0x8a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a1d      	ldr	r2, [pc, #116]	; (800483c <TIM_Base_SetConfig+0xfc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d108      	bne.n	80047dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a08      	ldr	r2, [pc, #32]	; (8004824 <TIM_Base_SetConfig+0xe4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d103      	bne.n	8004810 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	615a      	str	r2, [r3, #20]
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40010000 	.word	0x40010000
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	40014000 	.word	0x40014000
 8004838:	40014400 	.word	0x40014400
 800483c:	40014800 	.word	0x40014800

08004840 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f023 0201 	bic.w	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f023 0302 	bic.w	r3, r3, #2
 8004888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <TIM_OC1_SetConfig+0xc8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d10c      	bne.n	80048b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f023 0308 	bic.w	r3, r3, #8
 80048a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f023 0304 	bic.w	r3, r3, #4
 80048b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a13      	ldr	r2, [pc, #76]	; (8004908 <TIM_OC1_SetConfig+0xc8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d111      	bne.n	80048e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	621a      	str	r2, [r3, #32]
}
 80048fc:	bf00      	nop
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	40010000 	.word	0x40010000

0800490c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f023 0210 	bic.w	r2, r3, #16
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800493a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	021b      	lsls	r3, r3, #8
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f023 0320 	bic.w	r3, r3, #32
 8004956:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a1e      	ldr	r2, [pc, #120]	; (80049e0 <TIM_OC2_SetConfig+0xd4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d10d      	bne.n	8004988 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004986:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a15      	ldr	r2, [pc, #84]	; (80049e0 <TIM_OC2_SetConfig+0xd4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d113      	bne.n	80049b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800499e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000

080049e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0303 	bic.w	r3, r3, #3
 8004a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <TIM_OC3_SetConfig+0xd0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d10d      	bne.n	8004a5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a14      	ldr	r2, [pc, #80]	; (8004ab4 <TIM_OC3_SetConfig+0xd0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d113      	bne.n	8004a8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	621a      	str	r2, [r3, #32]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40010000 	.word	0x40010000

08004ab8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	031b      	lsls	r3, r3, #12
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a10      	ldr	r2, [pc, #64]	; (8004b54 <TIM_OC4_SetConfig+0x9c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d109      	bne.n	8004b2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	019b      	lsls	r3, r3, #6
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40010000 	.word	0x40010000

08004b58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b74:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f023 0307 	bic.w	r3, r3, #7
 8004b86:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b70      	cmp	r3, #112	; 0x70
 8004ba0:	d01a      	beq.n	8004bd8 <TIM_SlaveTimer_SetConfig+0x80>
 8004ba2:	2b70      	cmp	r3, #112	; 0x70
 8004ba4:	d860      	bhi.n	8004c68 <TIM_SlaveTimer_SetConfig+0x110>
 8004ba6:	2b60      	cmp	r3, #96	; 0x60
 8004ba8:	d054      	beq.n	8004c54 <TIM_SlaveTimer_SetConfig+0xfc>
 8004baa:	2b60      	cmp	r3, #96	; 0x60
 8004bac:	d85c      	bhi.n	8004c68 <TIM_SlaveTimer_SetConfig+0x110>
 8004bae:	2b50      	cmp	r3, #80	; 0x50
 8004bb0:	d046      	beq.n	8004c40 <TIM_SlaveTimer_SetConfig+0xe8>
 8004bb2:	2b50      	cmp	r3, #80	; 0x50
 8004bb4:	d858      	bhi.n	8004c68 <TIM_SlaveTimer_SetConfig+0x110>
 8004bb6:	2b40      	cmp	r3, #64	; 0x40
 8004bb8:	d019      	beq.n	8004bee <TIM_SlaveTimer_SetConfig+0x96>
 8004bba:	2b40      	cmp	r3, #64	; 0x40
 8004bbc:	d854      	bhi.n	8004c68 <TIM_SlaveTimer_SetConfig+0x110>
 8004bbe:	2b30      	cmp	r3, #48	; 0x30
 8004bc0:	d055      	beq.n	8004c6e <TIM_SlaveTimer_SetConfig+0x116>
 8004bc2:	2b30      	cmp	r3, #48	; 0x30
 8004bc4:	d850      	bhi.n	8004c68 <TIM_SlaveTimer_SetConfig+0x110>
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d051      	beq.n	8004c6e <TIM_SlaveTimer_SetConfig+0x116>
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d84c      	bhi.n	8004c68 <TIM_SlaveTimer_SetConfig+0x110>
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d04d      	beq.n	8004c6e <TIM_SlaveTimer_SetConfig+0x116>
 8004bd2:	2b10      	cmp	r3, #16
 8004bd4:	d04b      	beq.n	8004c6e <TIM_SlaveTimer_SetConfig+0x116>
 8004bd6:	e047      	b.n	8004c68 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	68d9      	ldr	r1, [r3, #12]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f000 f9c5 	bl	8004f76 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004bec:	e040      	b.n	8004c70 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b05      	cmp	r3, #5
 8004bf4:	d101      	bne.n	8004bfa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e03b      	b.n	8004c72 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6a1a      	ldr	r2, [r3, #32]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0201 	bic.w	r2, r2, #1
 8004c10:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c20:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	621a      	str	r2, [r3, #32]
      break;
 8004c3e:	e017      	b.n	8004c70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	6899      	ldr	r1, [r3, #8]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f000 f87d 	bl	8004d4c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004c52:	e00d      	b.n	8004c70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	6899      	ldr	r1, [r3, #8]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	461a      	mov	r2, r3
 8004c62:	f000 f8df 	bl	8004e24 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004c66:	e003      	b.n	8004c70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c6c:	e000      	b.n	8004c70 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004c6e:	bf00      	nop
  }

  return status;
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4a24      	ldr	r2, [pc, #144]	; (8004d38 <TIM_TI1_SetConfig+0xbc>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x56>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb0:	d00f      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x56>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a21      	ldr	r2, [pc, #132]	; (8004d3c <TIM_TI1_SetConfig+0xc0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00b      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x56>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a20      	ldr	r2, [pc, #128]	; (8004d40 <TIM_TI1_SetConfig+0xc4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x56>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a1f      	ldr	r2, [pc, #124]	; (8004d44 <TIM_TI1_SetConfig+0xc8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x56>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4a1e      	ldr	r2, [pc, #120]	; (8004d48 <TIM_TI1_SetConfig+0xcc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <TIM_TI1_SetConfig+0x5a>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <TIM_TI1_SetConfig+0x5c>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f023 0303 	bic.w	r3, r3, #3
 8004ce2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	e003      	b.n	8004cf6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f023 030a 	bic.w	r3, r3, #10
 8004d10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f003 030a 	and.w	r3, r3, #10
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40010000 	.word	0x40010000
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800
 8004d44:	40000c00 	.word	0x40000c00
 8004d48:	40014000 	.word	0x40014000

08004d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f023 0201 	bic.w	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f023 030a 	bic.w	r3, r3, #10
 8004d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	621a      	str	r2, [r3, #32]
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b087      	sub	sp, #28
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f023 0210 	bic.w	r2, r3, #16
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004de8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	031b      	lsls	r3, r3, #12
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dfc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	621a      	str	r2, [r3, #32]
}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f023 0210 	bic.w	r2, r3, #16
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	031b      	lsls	r3, r3, #12
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	621a      	str	r2, [r3, #32]
}
 8004e78:	bf00      	nop
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f023 0303 	bic.w	r3, r3, #3
 8004eb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ec0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ed4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	021b      	lsls	r3, r3, #8
 8004eda:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	621a      	str	r2, [r3, #32]
}
 8004ef0:	bf00      	nop
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	031b      	lsls	r3, r3, #12
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	031b      	lsls	r3, r3, #12
 8004f54:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	621a      	str	r2, [r3, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b087      	sub	sp, #28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	021a      	lsls	r2, r3, #8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	609a      	str	r2, [r3, #8]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
	...

08004fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e050      	b.n	8005072 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1c      	ldr	r2, [pc, #112]	; (8005080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d018      	beq.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501c:	d013      	beq.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a18      	ldr	r2, [pc, #96]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00e      	beq.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a16      	ldr	r2, [pc, #88]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d009      	beq.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a15      	ldr	r2, [pc, #84]	; (800508c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d004      	beq.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a13      	ldr	r2, [pc, #76]	; (8005090 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d10c      	bne.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800504c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	4313      	orrs	r3, r2
 8005056:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40010000 	.word	0x40010000
 8005084:	40000400 	.word	0x40000400
 8005088:	40000800 	.word	0x40000800
 800508c:	40000c00 	.word	0x40000c00
 8005090:	40014000 	.word	0x40014000

08005094 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e03d      	b.n	800512c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e03f      	b.n	80051f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fb ff00 	bl	8000f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2224      	movs	r2, #36	; 0x24
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f829 	bl	80051fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695a      	ldr	r2, [r3, #20]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005200:	b0c0      	sub	sp, #256	; 0x100
 8005202:	af00      	add	r7, sp, #0
 8005204:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005218:	68d9      	ldr	r1, [r3, #12]
 800521a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	ea40 0301 	orr.w	r3, r0, r1
 8005224:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	431a      	orrs	r2, r3
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	431a      	orrs	r2, r3
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005254:	f021 010c 	bic.w	r1, r1, #12
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005262:	430b      	orrs	r3, r1
 8005264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005276:	6999      	ldr	r1, [r3, #24]
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	ea40 0301 	orr.w	r3, r0, r1
 8005282:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b8f      	ldr	r3, [pc, #572]	; (80054c8 <UART_SetConfig+0x2cc>)
 800528c:	429a      	cmp	r2, r3
 800528e:	d005      	beq.n	800529c <UART_SetConfig+0xa0>
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b8d      	ldr	r3, [pc, #564]	; (80054cc <UART_SetConfig+0x2d0>)
 8005298:	429a      	cmp	r2, r3
 800529a:	d104      	bne.n	80052a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800529c:	f7fe fd2c 	bl	8003cf8 <HAL_RCC_GetPCLK2Freq>
 80052a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052a4:	e003      	b.n	80052ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052a6:	f7fe fd13 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 80052aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b8:	f040 810c 	bne.w	80054d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052ce:	4622      	mov	r2, r4
 80052d0:	462b      	mov	r3, r5
 80052d2:	1891      	adds	r1, r2, r2
 80052d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80052d6:	415b      	adcs	r3, r3
 80052d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052de:	4621      	mov	r1, r4
 80052e0:	eb12 0801 	adds.w	r8, r2, r1
 80052e4:	4629      	mov	r1, r5
 80052e6:	eb43 0901 	adc.w	r9, r3, r1
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052fe:	4690      	mov	r8, r2
 8005300:	4699      	mov	r9, r3
 8005302:	4623      	mov	r3, r4
 8005304:	eb18 0303 	adds.w	r3, r8, r3
 8005308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800530c:	462b      	mov	r3, r5
 800530e:	eb49 0303 	adc.w	r3, r9, r3
 8005312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005322:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005326:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800532a:	460b      	mov	r3, r1
 800532c:	18db      	adds	r3, r3, r3
 800532e:	653b      	str	r3, [r7, #80]	; 0x50
 8005330:	4613      	mov	r3, r2
 8005332:	eb42 0303 	adc.w	r3, r2, r3
 8005336:	657b      	str	r3, [r7, #84]	; 0x54
 8005338:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800533c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005340:	f7fa ff4a 	bl	80001d8 <__aeabi_uldivmod>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4b61      	ldr	r3, [pc, #388]	; (80054d0 <UART_SetConfig+0x2d4>)
 800534a:	fba3 2302 	umull	r2, r3, r3, r2
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	011c      	lsls	r4, r3, #4
 8005352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005356:	2200      	movs	r2, #0
 8005358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800535c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005360:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005364:	4642      	mov	r2, r8
 8005366:	464b      	mov	r3, r9
 8005368:	1891      	adds	r1, r2, r2
 800536a:	64b9      	str	r1, [r7, #72]	; 0x48
 800536c:	415b      	adcs	r3, r3
 800536e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005370:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005374:	4641      	mov	r1, r8
 8005376:	eb12 0a01 	adds.w	sl, r2, r1
 800537a:	4649      	mov	r1, r9
 800537c:	eb43 0b01 	adc.w	fp, r3, r1
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800538c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005394:	4692      	mov	sl, r2
 8005396:	469b      	mov	fp, r3
 8005398:	4643      	mov	r3, r8
 800539a:	eb1a 0303 	adds.w	r3, sl, r3
 800539e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053a2:	464b      	mov	r3, r9
 80053a4:	eb4b 0303 	adc.w	r3, fp, r3
 80053a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053c0:	460b      	mov	r3, r1
 80053c2:	18db      	adds	r3, r3, r3
 80053c4:	643b      	str	r3, [r7, #64]	; 0x40
 80053c6:	4613      	mov	r3, r2
 80053c8:	eb42 0303 	adc.w	r3, r2, r3
 80053cc:	647b      	str	r3, [r7, #68]	; 0x44
 80053ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053d6:	f7fa feff 	bl	80001d8 <__aeabi_uldivmod>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4611      	mov	r1, r2
 80053e0:	4b3b      	ldr	r3, [pc, #236]	; (80054d0 <UART_SetConfig+0x2d4>)
 80053e2:	fba3 2301 	umull	r2, r3, r3, r1
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	2264      	movs	r2, #100	; 0x64
 80053ea:	fb02 f303 	mul.w	r3, r2, r3
 80053ee:	1acb      	subs	r3, r1, r3
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053f6:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <UART_SetConfig+0x2d4>)
 80053f8:	fba3 2302 	umull	r2, r3, r3, r2
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005404:	441c      	add	r4, r3
 8005406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800540a:	2200      	movs	r2, #0
 800540c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005410:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005414:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005418:	4642      	mov	r2, r8
 800541a:	464b      	mov	r3, r9
 800541c:	1891      	adds	r1, r2, r2
 800541e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005420:	415b      	adcs	r3, r3
 8005422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005424:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005428:	4641      	mov	r1, r8
 800542a:	1851      	adds	r1, r2, r1
 800542c:	6339      	str	r1, [r7, #48]	; 0x30
 800542e:	4649      	mov	r1, r9
 8005430:	414b      	adcs	r3, r1
 8005432:	637b      	str	r3, [r7, #52]	; 0x34
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005440:	4659      	mov	r1, fp
 8005442:	00cb      	lsls	r3, r1, #3
 8005444:	4651      	mov	r1, sl
 8005446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800544a:	4651      	mov	r1, sl
 800544c:	00ca      	lsls	r2, r1, #3
 800544e:	4610      	mov	r0, r2
 8005450:	4619      	mov	r1, r3
 8005452:	4603      	mov	r3, r0
 8005454:	4642      	mov	r2, r8
 8005456:	189b      	adds	r3, r3, r2
 8005458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800545c:	464b      	mov	r3, r9
 800545e:	460a      	mov	r2, r1
 8005460:	eb42 0303 	adc.w	r3, r2, r3
 8005464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005474:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005478:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800547c:	460b      	mov	r3, r1
 800547e:	18db      	adds	r3, r3, r3
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28
 8005482:	4613      	mov	r3, r2
 8005484:	eb42 0303 	adc.w	r3, r2, r3
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800548a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800548e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005492:	f7fa fea1 	bl	80001d8 <__aeabi_uldivmod>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <UART_SetConfig+0x2d4>)
 800549c:	fba3 1302 	umull	r1, r3, r3, r2
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	2164      	movs	r1, #100	; 0x64
 80054a4:	fb01 f303 	mul.w	r3, r1, r3
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	3332      	adds	r3, #50	; 0x32
 80054ae:	4a08      	ldr	r2, [pc, #32]	; (80054d0 <UART_SetConfig+0x2d4>)
 80054b0:	fba2 2303 	umull	r2, r3, r2, r3
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	f003 0207 	and.w	r2, r3, #7
 80054ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4422      	add	r2, r4
 80054c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054c4:	e106      	b.n	80056d4 <UART_SetConfig+0x4d8>
 80054c6:	bf00      	nop
 80054c8:	40011000 	.word	0x40011000
 80054cc:	40011400 	.word	0x40011400
 80054d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d8:	2200      	movs	r2, #0
 80054da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054e6:	4642      	mov	r2, r8
 80054e8:	464b      	mov	r3, r9
 80054ea:	1891      	adds	r1, r2, r2
 80054ec:	6239      	str	r1, [r7, #32]
 80054ee:	415b      	adcs	r3, r3
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
 80054f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054f6:	4641      	mov	r1, r8
 80054f8:	1854      	adds	r4, r2, r1
 80054fa:	4649      	mov	r1, r9
 80054fc:	eb43 0501 	adc.w	r5, r3, r1
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	00eb      	lsls	r3, r5, #3
 800550a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800550e:	00e2      	lsls	r2, r4, #3
 8005510:	4614      	mov	r4, r2
 8005512:	461d      	mov	r5, r3
 8005514:	4643      	mov	r3, r8
 8005516:	18e3      	adds	r3, r4, r3
 8005518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800551c:	464b      	mov	r3, r9
 800551e:	eb45 0303 	adc.w	r3, r5, r3
 8005522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005532:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005542:	4629      	mov	r1, r5
 8005544:	008b      	lsls	r3, r1, #2
 8005546:	4621      	mov	r1, r4
 8005548:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800554c:	4621      	mov	r1, r4
 800554e:	008a      	lsls	r2, r1, #2
 8005550:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005554:	f7fa fe40 	bl	80001d8 <__aeabi_uldivmod>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4b60      	ldr	r3, [pc, #384]	; (80056e0 <UART_SetConfig+0x4e4>)
 800555e:	fba3 2302 	umull	r2, r3, r3, r2
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	011c      	lsls	r4, r3, #4
 8005566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556a:	2200      	movs	r2, #0
 800556c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005570:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005574:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	1891      	adds	r1, r2, r2
 800557e:	61b9      	str	r1, [r7, #24]
 8005580:	415b      	adcs	r3, r3
 8005582:	61fb      	str	r3, [r7, #28]
 8005584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005588:	4641      	mov	r1, r8
 800558a:	1851      	adds	r1, r2, r1
 800558c:	6139      	str	r1, [r7, #16]
 800558e:	4649      	mov	r1, r9
 8005590:	414b      	adcs	r3, r1
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055a0:	4659      	mov	r1, fp
 80055a2:	00cb      	lsls	r3, r1, #3
 80055a4:	4651      	mov	r1, sl
 80055a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055aa:	4651      	mov	r1, sl
 80055ac:	00ca      	lsls	r2, r1, #3
 80055ae:	4610      	mov	r0, r2
 80055b0:	4619      	mov	r1, r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	4642      	mov	r2, r8
 80055b6:	189b      	adds	r3, r3, r2
 80055b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055bc:	464b      	mov	r3, r9
 80055be:	460a      	mov	r2, r1
 80055c0:	eb42 0303 	adc.w	r3, r2, r3
 80055c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80055d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055e0:	4649      	mov	r1, r9
 80055e2:	008b      	lsls	r3, r1, #2
 80055e4:	4641      	mov	r1, r8
 80055e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ea:	4641      	mov	r1, r8
 80055ec:	008a      	lsls	r2, r1, #2
 80055ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055f2:	f7fa fdf1 	bl	80001d8 <__aeabi_uldivmod>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	4611      	mov	r1, r2
 80055fc:	4b38      	ldr	r3, [pc, #224]	; (80056e0 <UART_SetConfig+0x4e4>)
 80055fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	2264      	movs	r2, #100	; 0x64
 8005606:	fb02 f303 	mul.w	r3, r2, r3
 800560a:	1acb      	subs	r3, r1, r3
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	3332      	adds	r3, #50	; 0x32
 8005610:	4a33      	ldr	r2, [pc, #204]	; (80056e0 <UART_SetConfig+0x4e4>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800561c:	441c      	add	r4, r3
 800561e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005622:	2200      	movs	r2, #0
 8005624:	673b      	str	r3, [r7, #112]	; 0x70
 8005626:	677a      	str	r2, [r7, #116]	; 0x74
 8005628:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800562c:	4642      	mov	r2, r8
 800562e:	464b      	mov	r3, r9
 8005630:	1891      	adds	r1, r2, r2
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	415b      	adcs	r3, r3
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800563c:	4641      	mov	r1, r8
 800563e:	1851      	adds	r1, r2, r1
 8005640:	6039      	str	r1, [r7, #0]
 8005642:	4649      	mov	r1, r9
 8005644:	414b      	adcs	r3, r1
 8005646:	607b      	str	r3, [r7, #4]
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005654:	4659      	mov	r1, fp
 8005656:	00cb      	lsls	r3, r1, #3
 8005658:	4651      	mov	r1, sl
 800565a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800565e:	4651      	mov	r1, sl
 8005660:	00ca      	lsls	r2, r1, #3
 8005662:	4610      	mov	r0, r2
 8005664:	4619      	mov	r1, r3
 8005666:	4603      	mov	r3, r0
 8005668:	4642      	mov	r2, r8
 800566a:	189b      	adds	r3, r3, r2
 800566c:	66bb      	str	r3, [r7, #104]	; 0x68
 800566e:	464b      	mov	r3, r9
 8005670:	460a      	mov	r2, r1
 8005672:	eb42 0303 	adc.w	r3, r2, r3
 8005676:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	663b      	str	r3, [r7, #96]	; 0x60
 8005682:	667a      	str	r2, [r7, #100]	; 0x64
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005690:	4649      	mov	r1, r9
 8005692:	008b      	lsls	r3, r1, #2
 8005694:	4641      	mov	r1, r8
 8005696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800569a:	4641      	mov	r1, r8
 800569c:	008a      	lsls	r2, r1, #2
 800569e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056a2:	f7fa fd99 	bl	80001d8 <__aeabi_uldivmod>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <UART_SetConfig+0x4e4>)
 80056ac:	fba3 1302 	umull	r1, r3, r3, r2
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	2164      	movs	r1, #100	; 0x64
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	3332      	adds	r3, #50	; 0x32
 80056be:	4a08      	ldr	r2, [pc, #32]	; (80056e0 <UART_SetConfig+0x4e4>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	f003 020f 	and.w	r2, r3, #15
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4422      	add	r2, r4
 80056d2:	609a      	str	r2, [r3, #8]
}
 80056d4:	bf00      	nop
 80056d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056da:	46bd      	mov	sp, r7
 80056dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056e0:	51eb851f 	.word	0x51eb851f

080056e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056e4:	b084      	sub	sp, #16
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	f107 001c 	add.w	r0, r7, #28
 80056f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d122      	bne.n	8005742 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005726:	2b01      	cmp	r3, #1
 8005728:	d105      	bne.n	8005736 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 fbee 	bl	8006f18 <USB_CoreReset>
 800573c:	4603      	mov	r3, r0
 800573e:	73fb      	strb	r3, [r7, #15]
 8005740:	e01a      	b.n	8005778 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f001 fbe2 	bl	8006f18 <USB_CoreReset>
 8005754:	4603      	mov	r3, r0
 8005756:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	639a      	str	r2, [r3, #56]	; 0x38
 800576a:	e005      	b.n	8005778 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	2b01      	cmp	r3, #1
 800577c:	d10b      	bne.n	8005796 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f043 0206 	orr.w	r2, r3, #6
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f043 0220 	orr.w	r2, r3, #32
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005796:	7bfb      	ldrb	r3, [r7, #15]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057a2:	b004      	add	sp, #16
 80057a4:	4770      	bx	lr
	...

080057a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	4613      	mov	r3, r2
 80057b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d165      	bne.n	8005888 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4a41      	ldr	r2, [pc, #260]	; (80058c4 <USB_SetTurnaroundTime+0x11c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d906      	bls.n	80057d2 <USB_SetTurnaroundTime+0x2a>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4a40      	ldr	r2, [pc, #256]	; (80058c8 <USB_SetTurnaroundTime+0x120>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d202      	bcs.n	80057d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057cc:	230f      	movs	r3, #15
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	e062      	b.n	8005898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	4a3c      	ldr	r2, [pc, #240]	; (80058c8 <USB_SetTurnaroundTime+0x120>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d306      	bcc.n	80057e8 <USB_SetTurnaroundTime+0x40>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	4a3b      	ldr	r2, [pc, #236]	; (80058cc <USB_SetTurnaroundTime+0x124>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d202      	bcs.n	80057e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057e2:	230e      	movs	r3, #14
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	e057      	b.n	8005898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4a38      	ldr	r2, [pc, #224]	; (80058cc <USB_SetTurnaroundTime+0x124>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d306      	bcc.n	80057fe <USB_SetTurnaroundTime+0x56>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4a37      	ldr	r2, [pc, #220]	; (80058d0 <USB_SetTurnaroundTime+0x128>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d202      	bcs.n	80057fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057f8:	230d      	movs	r3, #13
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e04c      	b.n	8005898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	4a33      	ldr	r2, [pc, #204]	; (80058d0 <USB_SetTurnaroundTime+0x128>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d306      	bcc.n	8005814 <USB_SetTurnaroundTime+0x6c>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	4a32      	ldr	r2, [pc, #200]	; (80058d4 <USB_SetTurnaroundTime+0x12c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d802      	bhi.n	8005814 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800580e:	230c      	movs	r3, #12
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	e041      	b.n	8005898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4a2f      	ldr	r2, [pc, #188]	; (80058d4 <USB_SetTurnaroundTime+0x12c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d906      	bls.n	800582a <USB_SetTurnaroundTime+0x82>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4a2e      	ldr	r2, [pc, #184]	; (80058d8 <USB_SetTurnaroundTime+0x130>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d802      	bhi.n	800582a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005824:	230b      	movs	r3, #11
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	e036      	b.n	8005898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4a2a      	ldr	r2, [pc, #168]	; (80058d8 <USB_SetTurnaroundTime+0x130>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d906      	bls.n	8005840 <USB_SetTurnaroundTime+0x98>
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4a29      	ldr	r2, [pc, #164]	; (80058dc <USB_SetTurnaroundTime+0x134>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d802      	bhi.n	8005840 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800583a:	230a      	movs	r3, #10
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e02b      	b.n	8005898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4a26      	ldr	r2, [pc, #152]	; (80058dc <USB_SetTurnaroundTime+0x134>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d906      	bls.n	8005856 <USB_SetTurnaroundTime+0xae>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4a25      	ldr	r2, [pc, #148]	; (80058e0 <USB_SetTurnaroundTime+0x138>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d202      	bcs.n	8005856 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005850:	2309      	movs	r3, #9
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	e020      	b.n	8005898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	4a21      	ldr	r2, [pc, #132]	; (80058e0 <USB_SetTurnaroundTime+0x138>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d306      	bcc.n	800586c <USB_SetTurnaroundTime+0xc4>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4a20      	ldr	r2, [pc, #128]	; (80058e4 <USB_SetTurnaroundTime+0x13c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d802      	bhi.n	800586c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005866:	2308      	movs	r3, #8
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	e015      	b.n	8005898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4a1d      	ldr	r2, [pc, #116]	; (80058e4 <USB_SetTurnaroundTime+0x13c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d906      	bls.n	8005882 <USB_SetTurnaroundTime+0xda>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4a1c      	ldr	r2, [pc, #112]	; (80058e8 <USB_SetTurnaroundTime+0x140>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d202      	bcs.n	8005882 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800587c:	2307      	movs	r3, #7
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	e00a      	b.n	8005898 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005882:	2306      	movs	r3, #6
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	e007      	b.n	8005898 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005888:	79fb      	ldrb	r3, [r7, #7]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d102      	bne.n	8005894 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800588e:	2309      	movs	r3, #9
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	e001      	b.n	8005898 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005894:	2309      	movs	r3, #9
 8005896:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	029b      	lsls	r3, r3, #10
 80058ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	00d8acbf 	.word	0x00d8acbf
 80058c8:	00e4e1c0 	.word	0x00e4e1c0
 80058cc:	00f42400 	.word	0x00f42400
 80058d0:	01067380 	.word	0x01067380
 80058d4:	011a499f 	.word	0x011a499f
 80058d8:	01312cff 	.word	0x01312cff
 80058dc:	014ca43f 	.word	0x014ca43f
 80058e0:	016e3600 	.word	0x016e3600
 80058e4:	01a6ab1f 	.word	0x01a6ab1f
 80058e8:	01e84800 	.word	0x01e84800

080058ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f043 0201 	orr.w	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f023 0201 	bic.w	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d115      	bne.n	800597e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800595e:	2001      	movs	r0, #1
 8005960:	f7fb fc7e 	bl	8001260 <HAL_Delay>
      ms++;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3301      	adds	r3, #1
 8005968:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f001 fa45 	bl	8006dfa <USB_GetMode>
 8005970:	4603      	mov	r3, r0
 8005972:	2b01      	cmp	r3, #1
 8005974:	d01e      	beq.n	80059b4 <USB_SetCurrentMode+0x84>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b31      	cmp	r3, #49	; 0x31
 800597a:	d9f0      	bls.n	800595e <USB_SetCurrentMode+0x2e>
 800597c:	e01a      	b.n	80059b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800597e:	78fb      	ldrb	r3, [r7, #3]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d115      	bne.n	80059b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005990:	2001      	movs	r0, #1
 8005992:	f7fb fc65 	bl	8001260 <HAL_Delay>
      ms++;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3301      	adds	r3, #1
 800599a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f001 fa2c 	bl	8006dfa <USB_GetMode>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <USB_SetCurrentMode+0x84>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b31      	cmp	r3, #49	; 0x31
 80059ac:	d9f0      	bls.n	8005990 <USB_SetCurrentMode+0x60>
 80059ae:	e001      	b.n	80059b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e005      	b.n	80059c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b32      	cmp	r3, #50	; 0x32
 80059b8:	d101      	bne.n	80059be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059c8:	b084      	sub	sp, #16
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059e2:	2300      	movs	r3, #0
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	e009      	b.n	80059fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	3340      	adds	r3, #64	; 0x40
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	2200      	movs	r2, #0
 80059f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	3301      	adds	r3, #1
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	2b0e      	cmp	r3, #14
 8005a00:	d9f2      	bls.n	80059e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d11c      	bne.n	8005a42 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a16:	f043 0302 	orr.w	r3, r3, #2
 8005a1a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
 8005a40:	e00b      	b.n	8005a5a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a60:	461a      	mov	r2, r3
 8005a62:	2300      	movs	r3, #0
 8005a64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a74:	461a      	mov	r2, r3
 8005a76:	680b      	ldr	r3, [r1, #0]
 8005a78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d10c      	bne.n	8005a9a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a86:	2100      	movs	r1, #0
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f965 	bl	8005d58 <USB_SetDevSpeed>
 8005a8e:	e008      	b.n	8005aa2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a90:	2101      	movs	r1, #1
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f960 	bl	8005d58 <USB_SetDevSpeed>
 8005a98:	e003      	b.n	8005aa2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a9a:	2103      	movs	r1, #3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f95b 	bl	8005d58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aa2:	2110      	movs	r1, #16
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f8f3 	bl	8005c90 <USB_FlushTxFifo>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f91f 	bl	8005cf8 <USB_FlushRxFifo>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aca:	461a      	mov	r2, r3
 8005acc:	2300      	movs	r3, #0
 8005ace:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	2300      	movs	r3, #0
 8005ada:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	e043      	b.n	8005b76 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b04:	d118      	bne.n	8005b38 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	e013      	b.n	8005b4a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	e008      	b.n	8005b4a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	461a      	mov	r2, r3
 8005b46:	2300      	movs	r3, #0
 8005b48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b56:	461a      	mov	r2, r3
 8005b58:	2300      	movs	r3, #0
 8005b5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b68:	461a      	mov	r2, r3
 8005b6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	3301      	adds	r3, #1
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d3b7      	bcc.n	8005aee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b7e:	2300      	movs	r3, #0
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	e043      	b.n	8005c0c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b9a:	d118      	bne.n	8005bce <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10a      	bne.n	8005bb8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e013      	b.n	8005be0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	e008      	b.n	8005be0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bda:	461a      	mov	r2, r3
 8005bdc:	2300      	movs	r3, #0
 8005bde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bec:	461a      	mov	r2, r3
 8005bee:	2300      	movs	r3, #0
 8005bf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d3b7      	bcc.n	8005b84 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d105      	bne.n	8005c48 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	f043 0210 	orr.w	r2, r3, #16
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699a      	ldr	r2, [r3, #24]
 8005c4c:	4b0f      	ldr	r3, [pc, #60]	; (8005c8c <USB_DevInit+0x2c4>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	f043 0208 	orr.w	r2, r3, #8
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d107      	bne.n	8005c7c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c74:	f043 0304 	orr.w	r3, r3, #4
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c88:	b004      	add	sp, #16
 8005c8a:	4770      	bx	lr
 8005c8c:	803c3800 	.word	0x803c3800

08005c90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4a13      	ldr	r2, [pc, #76]	; (8005cf4 <USB_FlushTxFifo+0x64>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d901      	bls.n	8005cb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e01b      	b.n	8005ce8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	daf2      	bge.n	8005c9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	019b      	lsls	r3, r3, #6
 8005cc0:	f043 0220 	orr.w	r2, r3, #32
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a08      	ldr	r2, [pc, #32]	; (8005cf4 <USB_FlushTxFifo+0x64>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d901      	bls.n	8005cda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e006      	b.n	8005ce8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b20      	cmp	r3, #32
 8005ce4:	d0f0      	beq.n	8005cc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	00030d40 	.word	0x00030d40

08005cf8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3301      	adds	r3, #1
 8005d08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4a11      	ldr	r2, [pc, #68]	; (8005d54 <USB_FlushRxFifo+0x5c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d901      	bls.n	8005d16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e018      	b.n	8005d48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	daf2      	bge.n	8005d04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2210      	movs	r2, #16
 8005d26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4a08      	ldr	r2, [pc, #32]	; (8005d54 <USB_FlushRxFifo+0x5c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e006      	b.n	8005d48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f003 0310 	and.w	r3, r3, #16
 8005d42:	2b10      	cmp	r3, #16
 8005d44:	d0f0      	beq.n	8005d28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	00030d40 	.word	0x00030d40

08005d58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	68f9      	ldr	r1, [r7, #12]
 8005d74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b087      	sub	sp, #28
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 0306 	and.w	r3, r3, #6
 8005da2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d102      	bne.n	8005db0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005daa:	2300      	movs	r3, #0
 8005dac:	75fb      	strb	r3, [r7, #23]
 8005dae:	e00a      	b.n	8005dc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d002      	beq.n	8005dbc <USB_GetDevSpeed+0x32>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b06      	cmp	r3, #6
 8005dba:	d102      	bne.n	8005dc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	75fb      	strb	r3, [r7, #23]
 8005dc0:	e001      	b.n	8005dc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005dc2:	230f      	movs	r3, #15
 8005dc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	785b      	ldrb	r3, [r3, #1]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d13a      	bne.n	8005e66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df6:	69da      	ldr	r2, [r3, #28]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	2101      	movs	r1, #1
 8005e02:	fa01 f303 	lsl.w	r3, r1, r3
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	68f9      	ldr	r1, [r7, #12]
 8005e0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d155      	bne.n	8005ed4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	791b      	ldrb	r3, [r3, #4]
 8005e42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	059b      	lsls	r3, r3, #22
 8005e4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	e036      	b.n	8005ed4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6c:	69da      	ldr	r2, [r3, #28]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	2101      	movs	r1, #1
 8005e78:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e84:	4313      	orrs	r3, r2
 8005e86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11a      	bne.n	8005ed4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	791b      	ldrb	r3, [r3, #4]
 8005eb8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
	...

08005ee4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d161      	bne.n	8005fc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f16:	d11f      	bne.n	8005f58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	f003 030f 	and.w	r3, r3, #15
 8005f68:	2101      	movs	r1, #1
 8005f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	43db      	mvns	r3, r3
 8005f72:	68f9      	ldr	r1, [r7, #12]
 8005f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f78:	4013      	ands	r3, r2
 8005f7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f003 030f 	and.w	r3, r3, #15
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	0159      	lsls	r1, r3, #5
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	440b      	add	r3, r1
 8005fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4b35      	ldr	r3, [pc, #212]	; (8006094 <USB_DeactivateEndpoint+0x1b0>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	600b      	str	r3, [r1, #0]
 8005fc2:	e060      	b.n	8006086 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fda:	d11f      	bne.n	800601c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ffa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	440a      	add	r2, r1
 8006012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006016:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800601a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	2101      	movs	r1, #1
 800602e:	fa01 f303 	lsl.w	r3, r1, r3
 8006032:	041b      	lsls	r3, r3, #16
 8006034:	43db      	mvns	r3, r3
 8006036:	68f9      	ldr	r1, [r7, #12]
 8006038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800603c:	4013      	ands	r3, r2
 800603e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	f003 030f 	and.w	r3, r3, #15
 8006050:	2101      	movs	r1, #1
 8006052:	fa01 f303 	lsl.w	r3, r1, r3
 8006056:	041b      	lsls	r3, r3, #16
 8006058:	43db      	mvns	r3, r3
 800605a:	68f9      	ldr	r1, [r7, #12]
 800605c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006060:	4013      	ands	r3, r2
 8006062:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	0159      	lsls	r1, r3, #5
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	440b      	add	r3, r1
 800607a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607e:	4619      	mov	r1, r3
 8006080:	4b05      	ldr	r3, [pc, #20]	; (8006098 <USB_DeactivateEndpoint+0x1b4>)
 8006082:	4013      	ands	r3, r2
 8006084:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	ec337800 	.word	0xec337800
 8006098:	eff37800 	.word	0xeff37800

0800609c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08a      	sub	sp, #40	; 0x28
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	4613      	mov	r3, r2
 80060a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	f040 815c 	bne.w	8006376 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d132      	bne.n	800612c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	0151      	lsls	r1, r2, #5
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	440a      	add	r2, r1
 8006100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006104:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006108:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	0151      	lsls	r1, r2, #5
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	440a      	add	r2, r1
 8006120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006124:	0cdb      	lsrs	r3, r3, #19
 8006126:	04db      	lsls	r3, r3, #19
 8006128:	6113      	str	r3, [r2, #16]
 800612a:	e074      	b.n	8006216 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006146:	0cdb      	lsrs	r3, r3, #19
 8006148:	04db      	lsls	r3, r3, #19
 800614a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	440a      	add	r2, r1
 8006162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006166:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800616a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800616e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	6999      	ldr	r1, [r3, #24]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	440b      	add	r3, r1
 8006188:	1e59      	subs	r1, r3, #1
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006192:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006194:	4b9d      	ldr	r3, [pc, #628]	; (800640c <USB_EPStartXfer+0x370>)
 8006196:	400b      	ands	r3, r1
 8006198:	69b9      	ldr	r1, [r7, #24]
 800619a:	0148      	lsls	r0, r1, #5
 800619c:	69f9      	ldr	r1, [r7, #28]
 800619e:	4401      	add	r1, r0
 80061a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061a4:	4313      	orrs	r3, r2
 80061a6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b4:	691a      	ldr	r2, [r3, #16]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061be:	69b9      	ldr	r1, [r7, #24]
 80061c0:	0148      	lsls	r0, r1, #5
 80061c2:	69f9      	ldr	r1, [r7, #28]
 80061c4:	4401      	add	r1, r0
 80061c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061ca:	4313      	orrs	r3, r2
 80061cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	791b      	ldrb	r3, [r3, #4]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d11f      	bne.n	8006216 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80061f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	0151      	lsls	r1, r2, #5
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	440a      	add	r2, r1
 800620c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006210:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006214:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d14b      	bne.n	80062b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d009      	beq.n	8006238 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006230:	461a      	mov	r2, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	791b      	ldrb	r3, [r3, #4]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d128      	bne.n	8006292 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624c:	2b00      	cmp	r3, #0
 800624e:	d110      	bne.n	8006272 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	0151      	lsls	r1, r2, #5
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	440a      	add	r2, r1
 8006266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	e00f      	b.n	8006292 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006290:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	0151      	lsls	r1, r2, #5
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	440a      	add	r2, r1
 80062a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	e133      	b.n	800651c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	0151      	lsls	r1, r2, #5
 80062c6:	69fa      	ldr	r2, [r7, #28]
 80062c8:	440a      	add	r2, r1
 80062ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	791b      	ldrb	r3, [r3, #4]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d015      	beq.n	8006308 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 811b 	beq.w	800651c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	2101      	movs	r1, #1
 80062f8:	fa01 f303 	lsl.w	r3, r1, r3
 80062fc:	69f9      	ldr	r1, [r7, #28]
 80062fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006302:	4313      	orrs	r3, r2
 8006304:	634b      	str	r3, [r1, #52]	; 0x34
 8006306:	e109      	b.n	800651c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006314:	2b00      	cmp	r3, #0
 8006316:	d110      	bne.n	800633a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	0151      	lsls	r1, r2, #5
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	440a      	add	r2, r1
 800632e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	e00f      	b.n	800635a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006358:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	6919      	ldr	r1, [r3, #16]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	781a      	ldrb	r2, [r3, #0]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	b298      	uxth	r0, r3
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	4603      	mov	r3, r0
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fade 	bl	8006930 <USB_WritePacket>
 8006374:	e0d2      	b.n	800651c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	0151      	lsls	r1, r2, #5
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	440a      	add	r2, r1
 800638c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006390:	0cdb      	lsrs	r3, r3, #19
 8006392:	04db      	lsls	r3, r3, #19
 8006394:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d126      	bne.n	8006410 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ce:	691a      	ldr	r2, [r3, #16]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063d8:	69b9      	ldr	r1, [r7, #24]
 80063da:	0148      	lsls	r0, r1, #5
 80063dc:	69f9      	ldr	r1, [r7, #28]
 80063de:	4401      	add	r1, r0
 80063e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063e4:	4313      	orrs	r3, r2
 80063e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006402:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006406:	6113      	str	r3, [r2, #16]
 8006408:	e03a      	b.n	8006480 <USB_EPStartXfer+0x3e4>
 800640a:	bf00      	nop
 800640c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	699a      	ldr	r2, [r3, #24]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	4413      	add	r3, r2
 800641a:	1e5a      	subs	r2, r3, #1
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	fbb2 f3f3 	udiv	r3, r2, r3
 8006424:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	8afa      	ldrh	r2, [r7, #22]
 800642c:	fb03 f202 	mul.w	r2, r3, r2
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006440:	691a      	ldr	r2, [r3, #16]
 8006442:	8afb      	ldrh	r3, [r7, #22]
 8006444:	04d9      	lsls	r1, r3, #19
 8006446:	4b38      	ldr	r3, [pc, #224]	; (8006528 <USB_EPStartXfer+0x48c>)
 8006448:	400b      	ands	r3, r1
 800644a:	69b9      	ldr	r1, [r7, #24]
 800644c:	0148      	lsls	r0, r1, #5
 800644e:	69f9      	ldr	r1, [r7, #28]
 8006450:	4401      	add	r1, r0
 8006452:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006456:	4313      	orrs	r3, r2
 8006458:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006470:	69b9      	ldr	r1, [r7, #24]
 8006472:	0148      	lsls	r0, r1, #5
 8006474:	69f9      	ldr	r1, [r7, #28]
 8006476:	4401      	add	r1, r0
 8006478:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800647c:	4313      	orrs	r3, r2
 800647e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d10d      	bne.n	80064a2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	6919      	ldr	r1, [r3, #16]
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	4413      	add	r3, r2
 800649a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649e:	460a      	mov	r2, r1
 80064a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	791b      	ldrb	r3, [r3, #4]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d128      	bne.n	80064fc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d110      	bne.n	80064dc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e00f      	b.n	80064fc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	440a      	add	r2, r1
 8006512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006516:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800651a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3720      	adds	r7, #32
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	1ff80000 	.word	0x1ff80000

0800652c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	4613      	mov	r3, r2
 8006538:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b01      	cmp	r3, #1
 800654a:	f040 80ce 	bne.w	80066ea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d132      	bne.n	80065bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	440a      	add	r2, r1
 800656c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006570:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006574:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006578:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006598:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b4:	0cdb      	lsrs	r3, r3, #19
 80065b6:	04db      	lsls	r3, r3, #19
 80065b8:	6113      	str	r3, [r2, #16]
 80065ba:	e04e      	b.n	800665a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d6:	0cdb      	lsrs	r3, r3, #19
 80065d8:	04db      	lsls	r3, r3, #19
 80065da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	699a      	ldr	r2, [r3, #24]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	429a      	cmp	r2, r3
 800660a:	d903      	bls.n	8006614 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	440a      	add	r2, r1
 800662a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800662e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006632:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006640:	691a      	ldr	r2, [r3, #16]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800664a:	6939      	ldr	r1, [r7, #16]
 800664c:	0148      	lsls	r0, r1, #5
 800664e:	6979      	ldr	r1, [r7, #20]
 8006650:	4401      	add	r1, r0
 8006652:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006656:	4313      	orrs	r3, r2
 8006658:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d11e      	bne.n	800669e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d009      	beq.n	800667c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006674:	461a      	mov	r2, r3
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	440a      	add	r2, r1
 8006692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	e097      	b.n	80067ce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 8083 	beq.w	80067ce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	2101      	movs	r1, #1
 80066da:	fa01 f303 	lsl.w	r3, r1, r3
 80066de:	6979      	ldr	r1, [r7, #20]
 80066e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066e4:	4313      	orrs	r3, r2
 80066e6:	634b      	str	r3, [r1, #52]	; 0x34
 80066e8:	e071      	b.n	80067ce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006704:	0cdb      	lsrs	r3, r3, #19
 8006706:	04db      	lsls	r3, r3, #19
 8006708:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	0151      	lsls	r1, r2, #5
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	440a      	add	r2, r1
 8006720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006724:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006728:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800672c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	0151      	lsls	r1, r2, #5
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	440a      	add	r2, r1
 800675c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006764:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006772:	691a      	ldr	r2, [r3, #16]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800677c:	6939      	ldr	r1, [r7, #16]
 800677e:	0148      	lsls	r0, r1, #5
 8006780:	6979      	ldr	r1, [r7, #20]
 8006782:	4401      	add	r1, r0
 8006784:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006788:	4313      	orrs	r3, r2
 800678a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d10d      	bne.n	80067ae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d009      	beq.n	80067ae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	6919      	ldr	r1, [r3, #16]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067aa:	460a      	mov	r2, r1
 80067ac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	371c      	adds	r7, #28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d14a      	bne.n	8006890 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800680e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006812:	f040 8086 	bne.w	8006922 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	7812      	ldrb	r2, [r2, #0]
 800682a:	0151      	lsls	r1, r2, #5
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	440a      	add	r2, r1
 8006830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006834:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006838:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	7812      	ldrb	r2, [r2, #0]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	440a      	add	r2, r1
 8006854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800685c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3301      	adds	r3, #1
 8006862:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f242 7210 	movw	r2, #10000	; 0x2710
 800686a:	4293      	cmp	r3, r2
 800686c:	d902      	bls.n	8006874 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	75fb      	strb	r3, [r7, #23]
          break;
 8006872:	e056      	b.n	8006922 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800688c:	d0e7      	beq.n	800685e <USB_EPStopXfer+0x82>
 800688e:	e048      	b.n	8006922 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068a8:	d13b      	bne.n	8006922 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	7812      	ldrb	r2, [r2, #0]
 80068be:	0151      	lsls	r1, r2, #5
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	440a      	add	r2, r1
 80068c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	7812      	ldrb	r2, [r2, #0]
 80068e2:	0151      	lsls	r1, r2, #5
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	440a      	add	r2, r1
 80068e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3301      	adds	r3, #1
 80068f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80068fe:	4293      	cmp	r3, r2
 8006900:	d902      	bls.n	8006908 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	75fb      	strb	r3, [r7, #23]
          break;
 8006906:	e00c      	b.n	8006922 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800691c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006920:	d0e7      	beq.n	80068f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
}
 8006924:	4618      	mov	r0, r3
 8006926:	371c      	adds	r7, #28
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006930:	b480      	push	{r7}
 8006932:	b089      	sub	sp, #36	; 0x24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	4611      	mov	r1, r2
 800693c:	461a      	mov	r2, r3
 800693e:	460b      	mov	r3, r1
 8006940:	71fb      	strb	r3, [r7, #7]
 8006942:	4613      	mov	r3, r2
 8006944:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800694e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006952:	2b00      	cmp	r3, #0
 8006954:	d123      	bne.n	800699e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006956:	88bb      	ldrh	r3, [r7, #4]
 8006958:	3303      	adds	r3, #3
 800695a:	089b      	lsrs	r3, r3, #2
 800695c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800695e:	2300      	movs	r3, #0
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	e018      	b.n	8006996 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	031a      	lsls	r2, r3, #12
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	4413      	add	r3, r2
 800696c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006970:	461a      	mov	r2, r3
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	3301      	adds	r3, #1
 800697c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	3301      	adds	r3, #1
 8006982:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	3301      	adds	r3, #1
 8006988:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	3301      	adds	r3, #1
 800698e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	3301      	adds	r3, #1
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	429a      	cmp	r2, r3
 800699c:	d3e2      	bcc.n	8006964 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3724      	adds	r7, #36	; 0x24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b08b      	sub	sp, #44	; 0x2c
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	4613      	mov	r3, r2
 80069b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	089b      	lsrs	r3, r3, #2
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80069d2:	2300      	movs	r3, #0
 80069d4:	623b      	str	r3, [r7, #32]
 80069d6:	e014      	b.n	8006a02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	3301      	adds	r3, #1
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	3301      	adds	r3, #1
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	3301      	adds	r3, #1
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	3301      	adds	r3, #1
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	3301      	adds	r3, #1
 8006a00:	623b      	str	r3, [r7, #32]
 8006a02:	6a3a      	ldr	r2, [r7, #32]
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d3e6      	bcc.n	80069d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a0a:	8bfb      	ldrh	r3, [r7, #30]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01e      	beq.n	8006a4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f107 0310 	add.w	r3, r7, #16
 8006a20:	6812      	ldr	r2, [r2, #0]
 8006a22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	701a      	strb	r2, [r3, #0]
      i++;
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	3301      	adds	r3, #1
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006a42:	8bfb      	ldrh	r3, [r7, #30]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a48:	8bfb      	ldrh	r3, [r7, #30]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1ea      	bne.n	8006a24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	372c      	adds	r7, #44	; 0x2c
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d12c      	bne.n	8006ad2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	db12      	blt.n	8006ab0 <USB_EPSetStall+0x54>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00f      	beq.n	8006ab0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	0151      	lsls	r1, r2, #5
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	440a      	add	r2, r1
 8006aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006aae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	e02b      	b.n	8006b2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	db12      	blt.n	8006b0a <USB_EPSetStall+0xae>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00f      	beq.n	8006b0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	0151      	lsls	r1, r2, #5
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	440a      	add	r2, r1
 8006b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	0151      	lsls	r1, r2, #5
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	440a      	add	r2, r1
 8006b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	785b      	ldrb	r3, [r3, #1]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d128      	bne.n	8006ba6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	0151      	lsls	r1, r2, #5
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	440a      	add	r2, r1
 8006b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	791b      	ldrb	r3, [r3, #4]
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d003      	beq.n	8006b84 <USB_EPClearStall+0x4c>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	791b      	ldrb	r3, [r3, #4]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d138      	bne.n	8006bf6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	0151      	lsls	r1, r2, #5
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	440a      	add	r2, r1
 8006b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	e027      	b.n	8006bf6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	0151      	lsls	r1, r2, #5
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	440a      	add	r2, r1
 8006bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	791b      	ldrb	r3, [r3, #4]
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d003      	beq.n	8006bd6 <USB_EPClearStall+0x9e>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	791b      	ldrb	r3, [r3, #4]
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d10f      	bne.n	8006bf6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c26:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006c38:	68f9      	ldr	r1, [r7, #12]
 8006c3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c6a:	f023 0303 	bic.w	r3, r3, #3
 8006c6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c7e:	f023 0302 	bic.w	r3, r3, #2
 8006c82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b085      	sub	sp, #20
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cac:	f023 0303 	bic.w	r3, r3, #3
 8006cb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cc0:	f043 0302 	orr.w	r3, r3, #2
 8006cc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006cec:	68fb      	ldr	r3, [r7, #12]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b085      	sub	sp, #20
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	0c1b      	lsrs	r3, r3, #16
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b085      	sub	sp, #20
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	b29b      	uxth	r3, r3
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b085      	sub	sp, #20
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d72:	78fb      	ldrb	r3, [r7, #3]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d90:	68bb      	ldr	r3, [r7, #8]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b087      	sub	sp, #28
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	460b      	mov	r3, r1
 8006da8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	f003 030f 	and.w	r3, r3, #15
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	fa22 f303 	lsr.w	r3, r2, r3
 8006dce:	01db      	lsls	r3, r3, #7
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006dd8:	78fb      	ldrb	r3, [r7, #3]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4013      	ands	r3, r2
 8006dea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006dec:	68bb      	ldr	r3, [r7, #8]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	f003 0301 	and.w	r3, r3, #1
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b085      	sub	sp, #20
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e34:	f023 0307 	bic.w	r3, r3, #7
 8006e38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	460b      	mov	r3, r1
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	333c      	adds	r3, #60	; 0x3c
 8006e72:	3304      	adds	r3, #4
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	4a26      	ldr	r2, [pc, #152]	; (8006f14 <USB_EP0_OutStart+0xb8>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d90a      	bls.n	8006e96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e90:	d101      	bne.n	8006e96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	e037      	b.n	8006f06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006eb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ec4:	f043 0318 	orr.w	r3, r3, #24
 8006ec8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006edc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ede:	7afb      	ldrb	r3, [r7, #11]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d10f      	bne.n	8006f04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eea:	461a      	mov	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006efe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	4f54300a 	.word	0x4f54300a

08006f18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3301      	adds	r3, #1
 8006f28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4a13      	ldr	r2, [pc, #76]	; (8006f7c <USB_CoreReset+0x64>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d901      	bls.n	8006f36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e01b      	b.n	8006f6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	daf2      	bge.n	8006f24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f043 0201 	orr.w	r2, r3, #1
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3301      	adds	r3, #1
 8006f52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4a09      	ldr	r2, [pc, #36]	; (8006f7c <USB_CoreReset+0x64>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d901      	bls.n	8006f60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e006      	b.n	8006f6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d0f0      	beq.n	8006f4e <USB_CoreReset+0x36>

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	00030d40 	.word	0x00030d40

08006f80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006f90:	f002 fc1e 	bl	80097d0 <USBD_static_malloc>
 8006f94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d109      	bne.n	8006fb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	32b0      	adds	r2, #176	; 0xb0
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006fac:	2302      	movs	r3, #2
 8006fae:	e0d4      	b.n	800715a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006fb0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f002 fc4e 	bl	8009858 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	32b0      	adds	r2, #176	; 0xb0
 8006fc6:	68f9      	ldr	r1, [r7, #12]
 8006fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	32b0      	adds	r2, #176	; 0xb0
 8006fd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	7c1b      	ldrb	r3, [r3, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d138      	bne.n	800705a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fe8:	4b5e      	ldr	r3, [pc, #376]	; (8007164 <USBD_CDC_Init+0x1e4>)
 8006fea:	7819      	ldrb	r1, [r3, #0]
 8006fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f002 fac9 	bl	800958a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ff8:	4b5a      	ldr	r3, [pc, #360]	; (8007164 <USBD_CDC_Init+0x1e4>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f003 020f 	and.w	r2, r3, #15
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	3324      	adds	r3, #36	; 0x24
 800700e:	2201      	movs	r2, #1
 8007010:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007012:	4b55      	ldr	r3, [pc, #340]	; (8007168 <USBD_CDC_Init+0x1e8>)
 8007014:	7819      	ldrb	r1, [r3, #0]
 8007016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800701a:	2202      	movs	r2, #2
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f002 fab4 	bl	800958a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007022:	4b51      	ldr	r3, [pc, #324]	; (8007168 <USBD_CDC_Init+0x1e8>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	f003 020f 	and.w	r2, r3, #15
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4613      	mov	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	440b      	add	r3, r1
 8007036:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800703a:	2201      	movs	r2, #1
 800703c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800703e:	4b4b      	ldr	r3, [pc, #300]	; (800716c <USBD_CDC_Init+0x1ec>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	f003 020f 	and.w	r2, r3, #15
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	440b      	add	r3, r1
 8007052:	3326      	adds	r3, #38	; 0x26
 8007054:	2210      	movs	r2, #16
 8007056:	801a      	strh	r2, [r3, #0]
 8007058:	e035      	b.n	80070c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800705a:	4b42      	ldr	r3, [pc, #264]	; (8007164 <USBD_CDC_Init+0x1e4>)
 800705c:	7819      	ldrb	r1, [r3, #0]
 800705e:	2340      	movs	r3, #64	; 0x40
 8007060:	2202      	movs	r2, #2
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f002 fa91 	bl	800958a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007068:	4b3e      	ldr	r3, [pc, #248]	; (8007164 <USBD_CDC_Init+0x1e4>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	f003 020f 	and.w	r2, r3, #15
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	440b      	add	r3, r1
 800707c:	3324      	adds	r3, #36	; 0x24
 800707e:	2201      	movs	r2, #1
 8007080:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007082:	4b39      	ldr	r3, [pc, #228]	; (8007168 <USBD_CDC_Init+0x1e8>)
 8007084:	7819      	ldrb	r1, [r3, #0]
 8007086:	2340      	movs	r3, #64	; 0x40
 8007088:	2202      	movs	r2, #2
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f002 fa7d 	bl	800958a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007090:	4b35      	ldr	r3, [pc, #212]	; (8007168 <USBD_CDC_Init+0x1e8>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	f003 020f 	and.w	r2, r3, #15
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070a8:	2201      	movs	r2, #1
 80070aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80070ac:	4b2f      	ldr	r3, [pc, #188]	; (800716c <USBD_CDC_Init+0x1ec>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	f003 020f 	and.w	r2, r3, #15
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	3326      	adds	r3, #38	; 0x26
 80070c2:	2210      	movs	r2, #16
 80070c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80070c6:	4b29      	ldr	r3, [pc, #164]	; (800716c <USBD_CDC_Init+0x1ec>)
 80070c8:	7819      	ldrb	r1, [r3, #0]
 80070ca:	2308      	movs	r3, #8
 80070cc:	2203      	movs	r2, #3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f002 fa5b 	bl	800958a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80070d4:	4b25      	ldr	r3, [pc, #148]	; (800716c <USBD_CDC_Init+0x1ec>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f003 020f 	and.w	r2, r3, #15
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	3324      	adds	r3, #36	; 0x24
 80070ea:	2201      	movs	r2, #1
 80070ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	33b0      	adds	r3, #176	; 0xb0
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007124:	2302      	movs	r3, #2
 8007126:	e018      	b.n	800715a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	7c1b      	ldrb	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10a      	bne.n	8007146 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007130:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <USBD_CDC_Init+0x1e8>)
 8007132:	7819      	ldrb	r1, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800713a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f002 fb12 	bl	8009768 <USBD_LL_PrepareReceive>
 8007144:	e008      	b.n	8007158 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007146:	4b08      	ldr	r3, [pc, #32]	; (8007168 <USBD_CDC_Init+0x1e8>)
 8007148:	7819      	ldrb	r1, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007150:	2340      	movs	r3, #64	; 0x40
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f002 fb08 	bl	8009768 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20000093 	.word	0x20000093
 8007168:	20000094 	.word	0x20000094
 800716c:	20000095 	.word	0x20000095

08007170 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800717c:	4b3a      	ldr	r3, [pc, #232]	; (8007268 <USBD_CDC_DeInit+0xf8>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f002 fa27 	bl	80095d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007188:	4b37      	ldr	r3, [pc, #220]	; (8007268 <USBD_CDC_DeInit+0xf8>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	f003 020f 	and.w	r2, r3, #15
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	3324      	adds	r3, #36	; 0x24
 800719e:	2200      	movs	r2, #0
 80071a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80071a2:	4b32      	ldr	r3, [pc, #200]	; (800726c <USBD_CDC_DeInit+0xfc>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f002 fa14 	bl	80095d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80071ae:	4b2f      	ldr	r3, [pc, #188]	; (800726c <USBD_CDC_DeInit+0xfc>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	f003 020f 	and.w	r2, r3, #15
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	4613      	mov	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	440b      	add	r3, r1
 80071c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071c6:	2200      	movs	r2, #0
 80071c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80071ca:	4b29      	ldr	r3, [pc, #164]	; (8007270 <USBD_CDC_DeInit+0x100>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f002 fa00 	bl	80095d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80071d6:	4b26      	ldr	r3, [pc, #152]	; (8007270 <USBD_CDC_DeInit+0x100>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	f003 020f 	and.w	r2, r3, #15
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	440b      	add	r3, r1
 80071ea:	3324      	adds	r3, #36	; 0x24
 80071ec:	2200      	movs	r2, #0
 80071ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80071f0:	4b1f      	ldr	r3, [pc, #124]	; (8007270 <USBD_CDC_DeInit+0x100>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	f003 020f 	and.w	r2, r3, #15
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	3326      	adds	r3, #38	; 0x26
 8007206:	2200      	movs	r2, #0
 8007208:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	32b0      	adds	r2, #176	; 0xb0
 8007214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01f      	beq.n	800725c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	33b0      	adds	r3, #176	; 0xb0
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	32b0      	adds	r2, #176	; 0xb0
 800723a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723e:	4618      	mov	r0, r3
 8007240:	f002 fad4 	bl	80097ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	32b0      	adds	r2, #176	; 0xb0
 800724e:	2100      	movs	r1, #0
 8007250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20000093 	.word	0x20000093
 800726c:	20000094 	.word	0x20000094
 8007270:	20000095 	.word	0x20000095

08007274 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	32b0      	adds	r2, #176	; 0xb0
 8007288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e0bf      	b.n	8007424 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d050      	beq.n	8007352 <USBD_CDC_Setup+0xde>
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	f040 80af 	bne.w	8007414 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	88db      	ldrh	r3, [r3, #6]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d03a      	beq.n	8007334 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	b25b      	sxtb	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	da1b      	bge.n	8007300 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	33b0      	adds	r3, #176	; 0xb0
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80072de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	88d2      	ldrh	r2, [r2, #6]
 80072e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	88db      	ldrh	r3, [r3, #6]
 80072ea:	2b07      	cmp	r3, #7
 80072ec:	bf28      	it	cs
 80072ee:	2307      	movcs	r3, #7
 80072f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	89fa      	ldrh	r2, [r7, #14]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 fd43 	bl	8008d84 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80072fe:	e090      	b.n	8007422 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	785a      	ldrb	r2, [r3, #1]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	88db      	ldrh	r3, [r3, #6]
 800730e:	2b3f      	cmp	r3, #63	; 0x3f
 8007310:	d803      	bhi.n	800731a <USBD_CDC_Setup+0xa6>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	88db      	ldrh	r3, [r3, #6]
 8007316:	b2da      	uxtb	r2, r3
 8007318:	e000      	b.n	800731c <USBD_CDC_Setup+0xa8>
 800731a:	2240      	movs	r2, #64	; 0x40
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007322:	6939      	ldr	r1, [r7, #16]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800732a:	461a      	mov	r2, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 fd55 	bl	8008ddc <USBD_CtlPrepareRx>
      break;
 8007332:	e076      	b.n	8007422 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	33b0      	adds	r3, #176	; 0xb0
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	7850      	ldrb	r0, [r2, #1]
 800734a:	2200      	movs	r2, #0
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	4798      	blx	r3
      break;
 8007350:	e067      	b.n	8007422 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	2b0b      	cmp	r3, #11
 8007358:	d851      	bhi.n	80073fe <USBD_CDC_Setup+0x18a>
 800735a:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <USBD_CDC_Setup+0xec>)
 800735c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007360:	08007391 	.word	0x08007391
 8007364:	0800740d 	.word	0x0800740d
 8007368:	080073ff 	.word	0x080073ff
 800736c:	080073ff 	.word	0x080073ff
 8007370:	080073ff 	.word	0x080073ff
 8007374:	080073ff 	.word	0x080073ff
 8007378:	080073ff 	.word	0x080073ff
 800737c:	080073ff 	.word	0x080073ff
 8007380:	080073ff 	.word	0x080073ff
 8007384:	080073ff 	.word	0x080073ff
 8007388:	080073bb 	.word	0x080073bb
 800738c:	080073e5 	.word	0x080073e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b03      	cmp	r3, #3
 800739a:	d107      	bne.n	80073ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800739c:	f107 030a 	add.w	r3, r7, #10
 80073a0:	2202      	movs	r2, #2
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 fced 	bl	8008d84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073aa:	e032      	b.n	8007412 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 fc77 	bl	8008ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 80073b4:	2303      	movs	r3, #3
 80073b6:	75fb      	strb	r3, [r7, #23]
          break;
 80073b8:	e02b      	b.n	8007412 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d107      	bne.n	80073d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073c6:	f107 030d 	add.w	r3, r7, #13
 80073ca:	2201      	movs	r2, #1
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f001 fcd8 	bl	8008d84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073d4:	e01d      	b.n	8007412 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 fc62 	bl	8008ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 80073de:	2303      	movs	r3, #3
 80073e0:	75fb      	strb	r3, [r7, #23]
          break;
 80073e2:	e016      	b.n	8007412 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d00f      	beq.n	8007410 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f001 fc55 	bl	8008ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 80073f8:	2303      	movs	r3, #3
 80073fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80073fc:	e008      	b.n	8007410 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 fc4e 	bl	8008ca2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007406:	2303      	movs	r3, #3
 8007408:	75fb      	strb	r3, [r7, #23]
          break;
 800740a:	e002      	b.n	8007412 <USBD_CDC_Setup+0x19e>
          break;
 800740c:	bf00      	nop
 800740e:	e008      	b.n	8007422 <USBD_CDC_Setup+0x1ae>
          break;
 8007410:	bf00      	nop
      }
      break;
 8007412:	e006      	b.n	8007422 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 fc43 	bl	8008ca2 <USBD_CtlError>
      ret = USBD_FAIL;
 800741c:	2303      	movs	r3, #3
 800741e:	75fb      	strb	r3, [r7, #23]
      break;
 8007420:	bf00      	nop
  }

  return (uint8_t)ret;
 8007422:	7dfb      	ldrb	r3, [r7, #23]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800743e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	32b0      	adds	r2, #176	; 0xb0
 800744a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007452:	2303      	movs	r3, #3
 8007454:	e065      	b.n	8007522 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	32b0      	adds	r2, #176	; 0xb0
 8007460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007464:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007466:	78fb      	ldrb	r3, [r7, #3]
 8007468:	f003 020f 	and.w	r2, r3, #15
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	440b      	add	r3, r1
 8007478:	3318      	adds	r3, #24
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d02f      	beq.n	80074e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	f003 020f 	and.w	r2, r3, #15
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	3318      	adds	r3, #24
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	78fb      	ldrb	r3, [r7, #3]
 8007498:	f003 010f 	and.w	r1, r3, #15
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	460b      	mov	r3, r1
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	440b      	add	r3, r1
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4403      	add	r3, r0
 80074a8:	3348      	adds	r3, #72	; 0x48
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d112      	bne.n	80074e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	f003 020f 	and.w	r2, r3, #15
 80074c0:	6879      	ldr	r1, [r7, #4]
 80074c2:	4613      	mov	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	440b      	add	r3, r1
 80074cc:	3318      	adds	r3, #24
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074d2:	78f9      	ldrb	r1, [r7, #3]
 80074d4:	2300      	movs	r3, #0
 80074d6:	2200      	movs	r2, #0
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f002 f924 	bl	8009726 <USBD_LL_Transmit>
 80074de:	e01f      	b.n	8007520 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	33b0      	adds	r3, #176	; 0xb0
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d010      	beq.n	8007520 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	33b0      	adds	r3, #176	; 0xb0
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800751c:	78fa      	ldrb	r2, [r7, #3]
 800751e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	460b      	mov	r3, r1
 8007534:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	32b0      	adds	r2, #176	; 0xb0
 8007540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007544:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	32b0      	adds	r2, #176	; 0xb0
 8007550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007558:	2303      	movs	r3, #3
 800755a:	e01a      	b.n	8007592 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800755c:	78fb      	ldrb	r3, [r7, #3]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f002 f922 	bl	80097aa <USBD_LL_GetRxDataSize>
 8007566:	4602      	mov	r2, r0
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	33b0      	adds	r3, #176	; 0xb0
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800758c:	4611      	mov	r1, r2
 800758e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	32b0      	adds	r2, #176	; 0xb0
 80075ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e025      	b.n	8007608 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	33b0      	adds	r3, #176	; 0xb0
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d01a      	beq.n	8007606 <USBD_CDC_EP0_RxReady+0x6c>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80075d6:	2bff      	cmp	r3, #255	; 0xff
 80075d8:	d015      	beq.n	8007606 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	33b0      	adds	r3, #176	; 0xb0
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80075f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80075fa:	b292      	uxth	r2, r2
 80075fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	22ff      	movs	r2, #255	; 0xff
 8007602:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007618:	2182      	movs	r1, #130	; 0x82
 800761a:	4818      	ldr	r0, [pc, #96]	; (800767c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800761c:	f000 fd09 	bl	8008032 <USBD_GetEpDesc>
 8007620:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007622:	2101      	movs	r1, #1
 8007624:	4815      	ldr	r0, [pc, #84]	; (800767c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007626:	f000 fd04 	bl	8008032 <USBD_GetEpDesc>
 800762a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800762c:	2181      	movs	r1, #129	; 0x81
 800762e:	4813      	ldr	r0, [pc, #76]	; (800767c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007630:	f000 fcff 	bl	8008032 <USBD_GetEpDesc>
 8007634:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	2210      	movs	r2, #16
 8007640:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d006      	beq.n	8007656 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	2200      	movs	r2, #0
 800764c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007650:	711a      	strb	r2, [r3, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d006      	beq.n	800766a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007664:	711a      	strb	r2, [r3, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2243      	movs	r2, #67	; 0x43
 800766e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007670:	4b02      	ldr	r3, [pc, #8]	; (800767c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20000050 	.word	0x20000050

08007680 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007688:	2182      	movs	r1, #130	; 0x82
 800768a:	4818      	ldr	r0, [pc, #96]	; (80076ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800768c:	f000 fcd1 	bl	8008032 <USBD_GetEpDesc>
 8007690:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007692:	2101      	movs	r1, #1
 8007694:	4815      	ldr	r0, [pc, #84]	; (80076ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007696:	f000 fccc 	bl	8008032 <USBD_GetEpDesc>
 800769a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800769c:	2181      	movs	r1, #129	; 0x81
 800769e:	4813      	ldr	r0, [pc, #76]	; (80076ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 80076a0:	f000 fcc7 	bl	8008032 <USBD_GetEpDesc>
 80076a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2210      	movs	r2, #16
 80076b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d006      	beq.n	80076c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	2200      	movs	r2, #0
 80076bc:	711a      	strb	r2, [r3, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f042 0202 	orr.w	r2, r2, #2
 80076c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d006      	beq.n	80076da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	711a      	strb	r2, [r3, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f042 0202 	orr.w	r2, r2, #2
 80076d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2243      	movs	r2, #67	; 0x43
 80076de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80076e0:	4b02      	ldr	r3, [pc, #8]	; (80076ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	20000050 	.word	0x20000050

080076f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076f8:	2182      	movs	r1, #130	; 0x82
 80076fa:	4818      	ldr	r0, [pc, #96]	; (800775c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80076fc:	f000 fc99 	bl	8008032 <USBD_GetEpDesc>
 8007700:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007702:	2101      	movs	r1, #1
 8007704:	4815      	ldr	r0, [pc, #84]	; (800775c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007706:	f000 fc94 	bl	8008032 <USBD_GetEpDesc>
 800770a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800770c:	2181      	movs	r1, #129	; 0x81
 800770e:	4813      	ldr	r0, [pc, #76]	; (800775c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007710:	f000 fc8f 	bl	8008032 <USBD_GetEpDesc>
 8007714:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2210      	movs	r2, #16
 8007720:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d006      	beq.n	8007736 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	2200      	movs	r2, #0
 800772c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007730:	711a      	strb	r2, [r3, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d006      	beq.n	800774a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007744:	711a      	strb	r2, [r3, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2243      	movs	r2, #67	; 0x43
 800774e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007750:	4b02      	ldr	r3, [pc, #8]	; (800775c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007752:	4618      	mov	r0, r3
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	20000050 	.word	0x20000050

08007760 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	220a      	movs	r2, #10
 800776c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800776e:	4b03      	ldr	r3, [pc, #12]	; (800777c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	2000000c 	.word	0x2000000c

08007780 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007790:	2303      	movs	r3, #3
 8007792:	e009      	b.n	80077a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	33b0      	adds	r3, #176	; 0xb0
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	32b0      	adds	r2, #176	; 0xb0
 80077ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ce:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e008      	b.n	80077ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	371c      	adds	r7, #28
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	32b0      	adds	r2, #176	; 0xb0
 800780c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007810:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007818:	2303      	movs	r3, #3
 800781a:	e004      	b.n	8007826 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
	...

08007834 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	32b0      	adds	r2, #176	; 0xb0
 8007846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	32b0      	adds	r2, #176	; 0xb0
 8007856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800785e:	2303      	movs	r3, #3
 8007860:	e018      	b.n	8007894 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7c1b      	ldrb	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800786a:	4b0c      	ldr	r3, [pc, #48]	; (800789c <USBD_CDC_ReceivePacket+0x68>)
 800786c:	7819      	ldrb	r1, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 ff75 	bl	8009768 <USBD_LL_PrepareReceive>
 800787e:	e008      	b.n	8007892 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007880:	4b06      	ldr	r3, [pc, #24]	; (800789c <USBD_CDC_ReceivePacket+0x68>)
 8007882:	7819      	ldrb	r1, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800788a:	2340      	movs	r3, #64	; 0x40
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 ff6b 	bl	8009768 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	20000094 	.word	0x20000094

080078a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	4613      	mov	r3, r2
 80078ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e01f      	b.n	80078f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	79fa      	ldrb	r2, [r7, #7]
 80078ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f001 fde5 	bl	80094bc <USBD_LL_Init>
 80078f2:	4603      	mov	r3, r0
 80078f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007914:	2303      	movs	r3, #3
 8007916:	e025      	b.n	8007964 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	32ae      	adds	r2, #174	; 0xae
 800792a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00f      	beq.n	8007954 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	32ae      	adds	r2, #174	; 0xae
 800793e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	f107 020e 	add.w	r2, r7, #14
 8007948:	4610      	mov	r0, r2
 800794a:	4798      	blx	r3
 800794c:	4602      	mov	r2, r0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800795a:	1c5a      	adds	r2, r3, #1
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 fded 	bl	8009554 <USBD_LL_Start>
 800797a:	4603      	mov	r3, r0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800798c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b084      	sub	sp, #16
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	460b      	mov	r3, r1
 80079a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d009      	beq.n	80079c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	78fa      	ldrb	r2, [r7, #3]
 80079be:	4611      	mov	r1, r2
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	4798      	blx	r3
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	78fa      	ldrb	r2, [r7, #3]
 80079ec:	4611      	mov	r1, r2
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	4798      	blx	r3
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80079f8:	2303      	movs	r3, #3
 80079fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 f908 	bl	8008c2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a3a:	f003 031f 	and.w	r3, r3, #31
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d01a      	beq.n	8007a78 <USBD_LL_SetupStage+0x72>
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d822      	bhi.n	8007a8c <USBD_LL_SetupStage+0x86>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <USBD_LL_SetupStage+0x4a>
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d00a      	beq.n	8007a64 <USBD_LL_SetupStage+0x5e>
 8007a4e:	e01d      	b.n	8007a8c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fb5f 	bl	800811c <USBD_StdDevReq>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	73fb      	strb	r3, [r7, #15]
      break;
 8007a62:	e020      	b.n	8007aa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fbc7 	bl	8008200 <USBD_StdItfReq>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73fb      	strb	r3, [r7, #15]
      break;
 8007a76:	e016      	b.n	8007aa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fc29 	bl	80082d8 <USBD_StdEPReq>
 8007a86:	4603      	mov	r3, r0
 8007a88:	73fb      	strb	r3, [r7, #15]
      break;
 8007a8a:	e00c      	b.n	8007aa6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 fdba 	bl	8009614 <USBD_LL_StallEP>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa4:	bf00      	nop
  }

  return ret;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	607a      	str	r2, [r7, #4]
 8007abc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007ac2:	7afb      	ldrb	r3, [r7, #11]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d16e      	bne.n	8007ba6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ace:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	f040 8098 	bne.w	8007c0c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d913      	bls.n	8007b10 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	689a      	ldr	r2, [r3, #8]
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	1ad2      	subs	r2, r2, r3
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	4293      	cmp	r3, r2
 8007b00:	bf28      	it	cs
 8007b02:	4613      	movcs	r3, r2
 8007b04:	461a      	mov	r2, r3
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f001 f984 	bl	8008e16 <USBD_CtlContinueRx>
 8007b0e:	e07d      	b.n	8007c0c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b16:	f003 031f 	and.w	r3, r3, #31
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d014      	beq.n	8007b48 <USBD_LL_DataOutStage+0x98>
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d81d      	bhi.n	8007b5e <USBD_LL_DataOutStage+0xae>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <USBD_LL_DataOutStage+0x7c>
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d003      	beq.n	8007b32 <USBD_LL_DataOutStage+0x82>
 8007b2a:	e018      	b.n	8007b5e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	75bb      	strb	r3, [r7, #22]
            break;
 8007b30:	e018      	b.n	8007b64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 fa5e 	bl	8007ffe <USBD_CoreFindIF>
 8007b42:	4603      	mov	r3, r0
 8007b44:	75bb      	strb	r3, [r7, #22]
            break;
 8007b46:	e00d      	b.n	8007b64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	4619      	mov	r1, r3
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 fa60 	bl	8008018 <USBD_CoreFindEP>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	75bb      	strb	r3, [r7, #22]
            break;
 8007b5c:	e002      	b.n	8007b64 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	75bb      	strb	r3, [r7, #22]
            break;
 8007b62:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007b64:	7dbb      	ldrb	r3, [r7, #22]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d119      	bne.n	8007b9e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d113      	bne.n	8007b9e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007b76:	7dba      	ldrb	r2, [r7, #22]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	32ae      	adds	r2, #174	; 0xae
 8007b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00b      	beq.n	8007b9e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007b86:	7dba      	ldrb	r2, [r7, #22]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007b8e:	7dba      	ldrb	r2, [r7, #22]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	32ae      	adds	r2, #174	; 0xae
 8007b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f001 f94a 	bl	8008e38 <USBD_CtlSendStatus>
 8007ba4:	e032      	b.n	8007c0c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007ba6:	7afb      	ldrb	r3, [r7, #11]
 8007ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	4619      	mov	r1, r3
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 fa31 	bl	8008018 <USBD_CoreFindEP>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bba:	7dbb      	ldrb	r3, [r7, #22]
 8007bbc:	2bff      	cmp	r3, #255	; 0xff
 8007bbe:	d025      	beq.n	8007c0c <USBD_LL_DataOutStage+0x15c>
 8007bc0:	7dbb      	ldrb	r3, [r7, #22]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d122      	bne.n	8007c0c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d117      	bne.n	8007c02 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007bd2:	7dba      	ldrb	r2, [r7, #22]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	32ae      	adds	r2, #174	; 0xae
 8007bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00f      	beq.n	8007c02 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007be2:	7dba      	ldrb	r2, [r7, #22]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007bea:	7dba      	ldrb	r2, [r7, #22]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	32ae      	adds	r2, #174	; 0xae
 8007bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	7afa      	ldrb	r2, [r7, #11]
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	4798      	blx	r3
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	e000      	b.n	8007c0e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b086      	sub	sp, #24
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	607a      	str	r2, [r7, #4]
 8007c22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007c24:	7afb      	ldrb	r3, [r7, #11]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d16f      	bne.n	8007d0a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3314      	adds	r3, #20
 8007c2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d15a      	bne.n	8007cf0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d914      	bls.n	8007c70 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6879      	ldr	r1, [r7, #4]
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f001 f8ac 	bl	8008dba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c62:	2300      	movs	r3, #0
 8007c64:	2200      	movs	r2, #0
 8007c66:	2100      	movs	r1, #0
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f001 fd7d 	bl	8009768 <USBD_LL_PrepareReceive>
 8007c6e:	e03f      	b.n	8007cf0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d11c      	bne.n	8007cb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d316      	bcc.n	8007cb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d20f      	bcs.n	8007cb6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c96:	2200      	movs	r2, #0
 8007c98:	2100      	movs	r1, #0
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f001 f88d 	bl	8008dba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ca8:	2300      	movs	r3, #0
 8007caa:	2200      	movs	r2, #0
 8007cac:	2100      	movs	r1, #0
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f001 fd5a 	bl	8009768 <USBD_LL_PrepareReceive>
 8007cb4:	e01c      	b.n	8007cf0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	d10f      	bne.n	8007ce2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d009      	beq.n	8007ce2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ce2:	2180      	movs	r1, #128	; 0x80
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f001 fc95 	bl	8009614 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f001 f8b7 	bl	8008e5e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d03a      	beq.n	8007d70 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f7ff fe42 	bl	8007984 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d08:	e032      	b.n	8007d70 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	4619      	mov	r1, r3
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f97f 	bl	8008018 <USBD_CoreFindEP>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	2bff      	cmp	r3, #255	; 0xff
 8007d22:	d025      	beq.n	8007d70 <USBD_LL_DataInStage+0x15a>
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d122      	bne.n	8007d70 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d11c      	bne.n	8007d70 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007d36:	7dfa      	ldrb	r2, [r7, #23]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	32ae      	adds	r2, #174	; 0xae
 8007d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d014      	beq.n	8007d70 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007d46:	7dfa      	ldrb	r2, [r7, #23]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007d4e:	7dfa      	ldrb	r2, [r7, #23]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	32ae      	adds	r2, #174	; 0xae
 8007d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	7afa      	ldrb	r2, [r7, #11]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	4798      	blx	r3
 8007d62:	4603      	mov	r3, r0
 8007d64:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007d66:	7dbb      	ldrb	r3, [r7, #22]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007d6c:	7dbb      	ldrb	r3, [r7, #22]
 8007d6e:	e000      	b.n	8007d72 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d014      	beq.n	8007de0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00e      	beq.n	8007de0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	6852      	ldr	r2, [r2, #4]
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	4798      	blx	r3
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007de0:	2340      	movs	r3, #64	; 0x40
 8007de2:	2200      	movs	r2, #0
 8007de4:	2100      	movs	r1, #0
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 fbcf 	bl	800958a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2240      	movs	r2, #64	; 0x40
 8007df8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007dfc:	2340      	movs	r3, #64	; 0x40
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2180      	movs	r1, #128	; 0x80
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 fbc1 	bl	800958a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2240      	movs	r2, #64	; 0x40
 8007e12:	621a      	str	r2, [r3, #32]

  return ret;
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	460b      	mov	r3, r1
 8007e28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	78fa      	ldrb	r2, [r7, #3]
 8007e2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b083      	sub	sp, #12
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2204      	movs	r2, #4
 8007e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	d106      	bne.n	8007e8c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d110      	bne.n	8007ed0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00b      	beq.n	8007ed0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d005      	beq.n	8007ed0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b082      	sub	sp, #8
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	32ae      	adds	r2, #174	; 0xae
 8007ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e01c      	b.n	8007f36 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d115      	bne.n	8007f34 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	32ae      	adds	r2, #174	; 0xae
 8007f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00b      	beq.n	8007f34 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	32ae      	adds	r2, #174	; 0xae
 8007f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	78fa      	ldrb	r2, [r7, #3]
 8007f2e:	4611      	mov	r1, r2
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	460b      	mov	r3, r1
 8007f48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	32ae      	adds	r2, #174	; 0xae
 8007f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e01c      	b.n	8007f9a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d115      	bne.n	8007f98 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	32ae      	adds	r2, #174	; 0xae
 8007f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00b      	beq.n	8007f98 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	32ae      	adds	r2, #174	; 0xae
 8007f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f90:	78fa      	ldrb	r2, [r7, #3]
 8007f92:	4611      	mov	r1, r2
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00e      	beq.n	8007ff4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	6852      	ldr	r2, [r2, #4]
 8007fe2:	b2d2      	uxtb	r2, r2
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	4798      	blx	r3
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	460b      	mov	r3, r1
 8008008:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800800a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008024:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008026:	4618      	mov	r0, r3
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b086      	sub	sp, #24
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	460b      	mov	r3, r1
 800803c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008046:	2300      	movs	r3, #0
 8008048:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	885b      	ldrh	r3, [r3, #2]
 800804e:	b29a      	uxth	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	429a      	cmp	r2, r3
 8008058:	d920      	bls.n	800809c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008062:	e013      	b.n	800808c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008064:	f107 030a 	add.w	r3, r7, #10
 8008068:	4619      	mov	r1, r3
 800806a:	6978      	ldr	r0, [r7, #20]
 800806c:	f000 f81b 	bl	80080a6 <USBD_GetNextDesc>
 8008070:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	2b05      	cmp	r3, #5
 8008078:	d108      	bne.n	800808c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	789b      	ldrb	r3, [r3, #2]
 8008082:	78fa      	ldrb	r2, [r7, #3]
 8008084:	429a      	cmp	r2, r3
 8008086:	d008      	beq.n	800809a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008088:	2300      	movs	r3, #0
 800808a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	885b      	ldrh	r3, [r3, #2]
 8008090:	b29a      	uxth	r2, r3
 8008092:	897b      	ldrh	r3, [r7, #10]
 8008094:	429a      	cmp	r2, r3
 8008096:	d8e5      	bhi.n	8008064 <USBD_GetEpDesc+0x32>
 8008098:	e000      	b.n	800809c <USBD_GetEpDesc+0x6a>
          break;
 800809a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800809c:	693b      	ldr	r3, [r7, #16]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	881a      	ldrh	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	4413      	add	r3, r2
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4413      	add	r3, r2
 80080d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80080d2:	68fb      	ldr	r3, [r7, #12]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	3301      	adds	r3, #1
 80080f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80080fe:	8a3b      	ldrh	r3, [r7, #16]
 8008100:	021b      	lsls	r3, r3, #8
 8008102:	b21a      	sxth	r2, r3
 8008104:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008108:	4313      	orrs	r3, r2
 800810a:	b21b      	sxth	r3, r3
 800810c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800810e:	89fb      	ldrh	r3, [r7, #14]
}
 8008110:	4618      	mov	r0, r3
 8008112:	371c      	adds	r7, #28
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008132:	2b40      	cmp	r3, #64	; 0x40
 8008134:	d005      	beq.n	8008142 <USBD_StdDevReq+0x26>
 8008136:	2b40      	cmp	r3, #64	; 0x40
 8008138:	d857      	bhi.n	80081ea <USBD_StdDevReq+0xce>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00f      	beq.n	800815e <USBD_StdDevReq+0x42>
 800813e:	2b20      	cmp	r3, #32
 8008140:	d153      	bne.n	80081ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	32ae      	adds	r2, #174	; 0xae
 800814c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	4798      	blx	r3
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]
      break;
 800815c:	e04a      	b.n	80081f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	785b      	ldrb	r3, [r3, #1]
 8008162:	2b09      	cmp	r3, #9
 8008164:	d83b      	bhi.n	80081de <USBD_StdDevReq+0xc2>
 8008166:	a201      	add	r2, pc, #4	; (adr r2, 800816c <USBD_StdDevReq+0x50>)
 8008168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816c:	080081c1 	.word	0x080081c1
 8008170:	080081d5 	.word	0x080081d5
 8008174:	080081df 	.word	0x080081df
 8008178:	080081cb 	.word	0x080081cb
 800817c:	080081df 	.word	0x080081df
 8008180:	0800819f 	.word	0x0800819f
 8008184:	08008195 	.word	0x08008195
 8008188:	080081df 	.word	0x080081df
 800818c:	080081b7 	.word	0x080081b7
 8008190:	080081a9 	.word	0x080081a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fa3c 	bl	8008614 <USBD_GetDescriptor>
          break;
 800819c:	e024      	b.n	80081e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fba1 	bl	80088e8 <USBD_SetAddress>
          break;
 80081a6:	e01f      	b.n	80081e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fbe0 	bl	8008970 <USBD_SetConfig>
 80081b0:	4603      	mov	r3, r0
 80081b2:	73fb      	strb	r3, [r7, #15]
          break;
 80081b4:	e018      	b.n	80081e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fc83 	bl	8008ac4 <USBD_GetConfig>
          break;
 80081be:	e013      	b.n	80081e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fcb4 	bl	8008b30 <USBD_GetStatus>
          break;
 80081c8:	e00e      	b.n	80081e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fce3 	bl	8008b98 <USBD_SetFeature>
          break;
 80081d2:	e009      	b.n	80081e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fd07 	bl	8008bea <USBD_ClrFeature>
          break;
 80081dc:	e004      	b.n	80081e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fd5e 	bl	8008ca2 <USBD_CtlError>
          break;
 80081e6:	bf00      	nop
      }
      break;
 80081e8:	e004      	b.n	80081f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fd58 	bl	8008ca2 <USBD_CtlError>
      break;
 80081f2:	bf00      	nop
  }

  return ret;
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop

08008200 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008216:	2b40      	cmp	r3, #64	; 0x40
 8008218:	d005      	beq.n	8008226 <USBD_StdItfReq+0x26>
 800821a:	2b40      	cmp	r3, #64	; 0x40
 800821c:	d852      	bhi.n	80082c4 <USBD_StdItfReq+0xc4>
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <USBD_StdItfReq+0x26>
 8008222:	2b20      	cmp	r3, #32
 8008224:	d14e      	bne.n	80082c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800822c:	b2db      	uxtb	r3, r3
 800822e:	3b01      	subs	r3, #1
 8008230:	2b02      	cmp	r3, #2
 8008232:	d840      	bhi.n	80082b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	889b      	ldrh	r3, [r3, #4]
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b01      	cmp	r3, #1
 800823c:	d836      	bhi.n	80082ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	889b      	ldrh	r3, [r3, #4]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff fed9 	bl	8007ffe <USBD_CoreFindIF>
 800824c:	4603      	mov	r3, r0
 800824e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2bff      	cmp	r3, #255	; 0xff
 8008254:	d01d      	beq.n	8008292 <USBD_StdItfReq+0x92>
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d11a      	bne.n	8008292 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800825c:	7bba      	ldrb	r2, [r7, #14]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	32ae      	adds	r2, #174	; 0xae
 8008262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00f      	beq.n	800828c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800826c:	7bba      	ldrb	r2, [r7, #14]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008274:	7bba      	ldrb	r2, [r7, #14]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	32ae      	adds	r2, #174	; 0xae
 800827a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	4798      	blx	r3
 8008286:	4603      	mov	r3, r0
 8008288:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800828a:	e004      	b.n	8008296 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800828c:	2303      	movs	r3, #3
 800828e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008290:	e001      	b.n	8008296 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008292:	2303      	movs	r3, #3
 8008294:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	88db      	ldrh	r3, [r3, #6]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d110      	bne.n	80082c0 <USBD_StdItfReq+0xc0>
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10d      	bne.n	80082c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fdc7 	bl	8008e38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082aa:	e009      	b.n	80082c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fcf7 	bl	8008ca2 <USBD_CtlError>
          break;
 80082b4:	e004      	b.n	80082c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fcf2 	bl	8008ca2 <USBD_CtlError>
          break;
 80082be:	e000      	b.n	80082c2 <USBD_StdItfReq+0xc2>
          break;
 80082c0:	bf00      	nop
      }
      break;
 80082c2:	e004      	b.n	80082ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fceb 	bl	8008ca2 <USBD_CtlError>
      break;
 80082cc:	bf00      	nop
  }

  return ret;
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	889b      	ldrh	r3, [r3, #4]
 80082ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082f4:	2b40      	cmp	r3, #64	; 0x40
 80082f6:	d007      	beq.n	8008308 <USBD_StdEPReq+0x30>
 80082f8:	2b40      	cmp	r3, #64	; 0x40
 80082fa:	f200 817f 	bhi.w	80085fc <USBD_StdEPReq+0x324>
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d02a      	beq.n	8008358 <USBD_StdEPReq+0x80>
 8008302:	2b20      	cmp	r3, #32
 8008304:	f040 817a 	bne.w	80085fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008308:	7bbb      	ldrb	r3, [r7, #14]
 800830a:	4619      	mov	r1, r3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff fe83 	bl	8008018 <USBD_CoreFindEP>
 8008312:	4603      	mov	r3, r0
 8008314:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008316:	7b7b      	ldrb	r3, [r7, #13]
 8008318:	2bff      	cmp	r3, #255	; 0xff
 800831a:	f000 8174 	beq.w	8008606 <USBD_StdEPReq+0x32e>
 800831e:	7b7b      	ldrb	r3, [r7, #13]
 8008320:	2b00      	cmp	r3, #0
 8008322:	f040 8170 	bne.w	8008606 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008326:	7b7a      	ldrb	r2, [r7, #13]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800832e:	7b7a      	ldrb	r2, [r7, #13]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	32ae      	adds	r2, #174	; 0xae
 8008334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 8163 	beq.w	8008606 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008340:	7b7a      	ldrb	r2, [r7, #13]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	32ae      	adds	r2, #174	; 0xae
 8008346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	4798      	blx	r3
 8008352:	4603      	mov	r3, r0
 8008354:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008356:	e156      	b.n	8008606 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	785b      	ldrb	r3, [r3, #1]
 800835c:	2b03      	cmp	r3, #3
 800835e:	d008      	beq.n	8008372 <USBD_StdEPReq+0x9a>
 8008360:	2b03      	cmp	r3, #3
 8008362:	f300 8145 	bgt.w	80085f0 <USBD_StdEPReq+0x318>
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 809b 	beq.w	80084a2 <USBD_StdEPReq+0x1ca>
 800836c:	2b01      	cmp	r3, #1
 800836e:	d03c      	beq.n	80083ea <USBD_StdEPReq+0x112>
 8008370:	e13e      	b.n	80085f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b02      	cmp	r3, #2
 800837c:	d002      	beq.n	8008384 <USBD_StdEPReq+0xac>
 800837e:	2b03      	cmp	r3, #3
 8008380:	d016      	beq.n	80083b0 <USBD_StdEPReq+0xd8>
 8008382:	e02c      	b.n	80083de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00d      	beq.n	80083a6 <USBD_StdEPReq+0xce>
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	2b80      	cmp	r3, #128	; 0x80
 800838e:	d00a      	beq.n	80083a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008390:	7bbb      	ldrb	r3, [r7, #14]
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 f93d 	bl	8009614 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800839a:	2180      	movs	r1, #128	; 0x80
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f001 f939 	bl	8009614 <USBD_LL_StallEP>
 80083a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083a4:	e020      	b.n	80083e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fc7a 	bl	8008ca2 <USBD_CtlError>
              break;
 80083ae:	e01b      	b.n	80083e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	885b      	ldrh	r3, [r3, #2]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10e      	bne.n	80083d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00b      	beq.n	80083d6 <USBD_StdEPReq+0xfe>
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	2b80      	cmp	r3, #128	; 0x80
 80083c2:	d008      	beq.n	80083d6 <USBD_StdEPReq+0xfe>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	88db      	ldrh	r3, [r3, #6]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d104      	bne.n	80083d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 f91f 	bl	8009614 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fd2e 	bl	8008e38 <USBD_CtlSendStatus>

              break;
 80083dc:	e004      	b.n	80083e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fc5e 	bl	8008ca2 <USBD_CtlError>
              break;
 80083e6:	bf00      	nop
          }
          break;
 80083e8:	e107      	b.n	80085fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d002      	beq.n	80083fc <USBD_StdEPReq+0x124>
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d016      	beq.n	8008428 <USBD_StdEPReq+0x150>
 80083fa:	e04b      	b.n	8008494 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00d      	beq.n	800841e <USBD_StdEPReq+0x146>
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	2b80      	cmp	r3, #128	; 0x80
 8008406:	d00a      	beq.n	800841e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 f901 	bl	8009614 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008412:	2180      	movs	r1, #128	; 0x80
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 f8fd 	bl	8009614 <USBD_LL_StallEP>
 800841a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800841c:	e040      	b.n	80084a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fc3e 	bl	8008ca2 <USBD_CtlError>
              break;
 8008426:	e03b      	b.n	80084a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	885b      	ldrh	r3, [r3, #2]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d136      	bne.n	800849e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008436:	2b00      	cmp	r3, #0
 8008438:	d004      	beq.n	8008444 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f001 f907 	bl	8009652 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fcf7 	bl	8008e38 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7ff fde2 	bl	8008018 <USBD_CoreFindEP>
 8008454:	4603      	mov	r3, r0
 8008456:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008458:	7b7b      	ldrb	r3, [r7, #13]
 800845a:	2bff      	cmp	r3, #255	; 0xff
 800845c:	d01f      	beq.n	800849e <USBD_StdEPReq+0x1c6>
 800845e:	7b7b      	ldrb	r3, [r7, #13]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d11c      	bne.n	800849e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008464:	7b7a      	ldrb	r2, [r7, #13]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800846c:	7b7a      	ldrb	r2, [r7, #13]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	32ae      	adds	r2, #174	; 0xae
 8008472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d010      	beq.n	800849e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800847c:	7b7a      	ldrb	r2, [r7, #13]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	32ae      	adds	r2, #174	; 0xae
 8008482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
 800848e:	4603      	mov	r3, r0
 8008490:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008492:	e004      	b.n	800849e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fc03 	bl	8008ca2 <USBD_CtlError>
              break;
 800849c:	e000      	b.n	80084a0 <USBD_StdEPReq+0x1c8>
              break;
 800849e:	bf00      	nop
          }
          break;
 80084a0:	e0ab      	b.n	80085fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d002      	beq.n	80084b4 <USBD_StdEPReq+0x1dc>
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d032      	beq.n	8008518 <USBD_StdEPReq+0x240>
 80084b2:	e097      	b.n	80085e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d007      	beq.n	80084ca <USBD_StdEPReq+0x1f2>
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	2b80      	cmp	r3, #128	; 0x80
 80084be:	d004      	beq.n	80084ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fbed 	bl	8008ca2 <USBD_CtlError>
                break;
 80084c8:	e091      	b.n	80085ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	da0b      	bge.n	80084ea <USBD_StdEPReq+0x212>
 80084d2:	7bbb      	ldrb	r3, [r7, #14]
 80084d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084d8:	4613      	mov	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	3310      	adds	r3, #16
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	4413      	add	r3, r2
 80084e6:	3304      	adds	r3, #4
 80084e8:	e00b      	b.n	8008502 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084f0:	4613      	mov	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	4413      	add	r3, r2
 8008500:	3304      	adds	r3, #4
 8008502:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	2200      	movs	r2, #0
 8008508:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2202      	movs	r2, #2
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fc37 	bl	8008d84 <USBD_CtlSendData>
              break;
 8008516:	e06a      	b.n	80085ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800851c:	2b00      	cmp	r3, #0
 800851e:	da11      	bge.n	8008544 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	f003 020f 	and.w	r2, r3, #15
 8008526:	6879      	ldr	r1, [r7, #4]
 8008528:	4613      	mov	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	440b      	add	r3, r1
 8008532:	3324      	adds	r3, #36	; 0x24
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d117      	bne.n	800856a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fbb0 	bl	8008ca2 <USBD_CtlError>
                  break;
 8008542:	e054      	b.n	80085ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	f003 020f 	and.w	r2, r3, #15
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	440b      	add	r3, r1
 8008556:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d104      	bne.n	800856a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fb9d 	bl	8008ca2 <USBD_CtlError>
                  break;
 8008568:	e041      	b.n	80085ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800856a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800856e:	2b00      	cmp	r3, #0
 8008570:	da0b      	bge.n	800858a <USBD_StdEPReq+0x2b2>
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	3310      	adds	r3, #16
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	4413      	add	r3, r2
 8008586:	3304      	adds	r3, #4
 8008588:	e00b      	b.n	80085a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008590:	4613      	mov	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	4413      	add	r3, r2
 80085a0:	3304      	adds	r3, #4
 80085a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d002      	beq.n	80085b0 <USBD_StdEPReq+0x2d8>
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
 80085ac:	2b80      	cmp	r3, #128	; 0x80
 80085ae:	d103      	bne.n	80085b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	e00e      	b.n	80085d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 f867 	bl	8009690 <USBD_LL_IsStallEP>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d003      	beq.n	80085d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2201      	movs	r2, #1
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	e002      	b.n	80085d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	2200      	movs	r2, #0
 80085d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2202      	movs	r2, #2
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fbd1 	bl	8008d84 <USBD_CtlSendData>
              break;
 80085e2:	e004      	b.n	80085ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fb5b 	bl	8008ca2 <USBD_CtlError>
              break;
 80085ec:	bf00      	nop
          }
          break;
 80085ee:	e004      	b.n	80085fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fb55 	bl	8008ca2 <USBD_CtlError>
          break;
 80085f8:	bf00      	nop
      }
      break;
 80085fa:	e005      	b.n	8008608 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fb4f 	bl	8008ca2 <USBD_CtlError>
      break;
 8008604:	e000      	b.n	8008608 <USBD_StdEPReq+0x330>
      break;
 8008606:	bf00      	nop
  }

  return ret;
 8008608:	7bfb      	ldrb	r3, [r7, #15]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008622:	2300      	movs	r3, #0
 8008624:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	885b      	ldrh	r3, [r3, #2]
 800862e:	0a1b      	lsrs	r3, r3, #8
 8008630:	b29b      	uxth	r3, r3
 8008632:	3b01      	subs	r3, #1
 8008634:	2b06      	cmp	r3, #6
 8008636:	f200 8128 	bhi.w	800888a <USBD_GetDescriptor+0x276>
 800863a:	a201      	add	r2, pc, #4	; (adr r2, 8008640 <USBD_GetDescriptor+0x2c>)
 800863c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008640:	0800865d 	.word	0x0800865d
 8008644:	08008675 	.word	0x08008675
 8008648:	080086b5 	.word	0x080086b5
 800864c:	0800888b 	.word	0x0800888b
 8008650:	0800888b 	.word	0x0800888b
 8008654:	0800882b 	.word	0x0800882b
 8008658:	08008857 	.word	0x08008857
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	7c12      	ldrb	r2, [r2, #16]
 8008668:	f107 0108 	add.w	r1, r7, #8
 800866c:	4610      	mov	r0, r2
 800866e:	4798      	blx	r3
 8008670:	60f8      	str	r0, [r7, #12]
      break;
 8008672:	e112      	b.n	800889a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	7c1b      	ldrb	r3, [r3, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10d      	bne.n	8008698 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008684:	f107 0208 	add.w	r2, r7, #8
 8008688:	4610      	mov	r0, r2
 800868a:	4798      	blx	r3
 800868c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3301      	adds	r3, #1
 8008692:	2202      	movs	r2, #2
 8008694:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008696:	e100      	b.n	800889a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	f107 0208 	add.w	r2, r7, #8
 80086a4:	4610      	mov	r0, r2
 80086a6:	4798      	blx	r3
 80086a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3301      	adds	r3, #1
 80086ae:	2202      	movs	r2, #2
 80086b0:	701a      	strb	r2, [r3, #0]
      break;
 80086b2:	e0f2      	b.n	800889a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	885b      	ldrh	r3, [r3, #2]
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b05      	cmp	r3, #5
 80086bc:	f200 80ac 	bhi.w	8008818 <USBD_GetDescriptor+0x204>
 80086c0:	a201      	add	r2, pc, #4	; (adr r2, 80086c8 <USBD_GetDescriptor+0xb4>)
 80086c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c6:	bf00      	nop
 80086c8:	080086e1 	.word	0x080086e1
 80086cc:	08008715 	.word	0x08008715
 80086d0:	08008749 	.word	0x08008749
 80086d4:	0800877d 	.word	0x0800877d
 80086d8:	080087b1 	.word	0x080087b1
 80086dc:	080087e5 	.word	0x080087e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00b      	beq.n	8008704 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	7c12      	ldrb	r2, [r2, #16]
 80086f8:	f107 0108 	add.w	r1, r7, #8
 80086fc:	4610      	mov	r0, r2
 80086fe:	4798      	blx	r3
 8008700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008702:	e091      	b.n	8008828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 facb 	bl	8008ca2 <USBD_CtlError>
            err++;
 800870c:	7afb      	ldrb	r3, [r7, #11]
 800870e:	3301      	adds	r3, #1
 8008710:	72fb      	strb	r3, [r7, #11]
          break;
 8008712:	e089      	b.n	8008828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00b      	beq.n	8008738 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	7c12      	ldrb	r2, [r2, #16]
 800872c:	f107 0108 	add.w	r1, r7, #8
 8008730:	4610      	mov	r0, r2
 8008732:	4798      	blx	r3
 8008734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008736:	e077      	b.n	8008828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fab1 	bl	8008ca2 <USBD_CtlError>
            err++;
 8008740:	7afb      	ldrb	r3, [r7, #11]
 8008742:	3301      	adds	r3, #1
 8008744:	72fb      	strb	r3, [r7, #11]
          break;
 8008746:	e06f      	b.n	8008828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00b      	beq.n	800876c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	7c12      	ldrb	r2, [r2, #16]
 8008760:	f107 0108 	add.w	r1, r7, #8
 8008764:	4610      	mov	r0, r2
 8008766:	4798      	blx	r3
 8008768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800876a:	e05d      	b.n	8008828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fa97 	bl	8008ca2 <USBD_CtlError>
            err++;
 8008774:	7afb      	ldrb	r3, [r7, #11]
 8008776:	3301      	adds	r3, #1
 8008778:	72fb      	strb	r3, [r7, #11]
          break;
 800877a:	e055      	b.n	8008828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00b      	beq.n	80087a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	7c12      	ldrb	r2, [r2, #16]
 8008794:	f107 0108 	add.w	r1, r7, #8
 8008798:	4610      	mov	r0, r2
 800879a:	4798      	blx	r3
 800879c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800879e:	e043      	b.n	8008828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fa7d 	bl	8008ca2 <USBD_CtlError>
            err++;
 80087a8:	7afb      	ldrb	r3, [r7, #11]
 80087aa:	3301      	adds	r3, #1
 80087ac:	72fb      	strb	r3, [r7, #11]
          break;
 80087ae:	e03b      	b.n	8008828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00b      	beq.n	80087d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	7c12      	ldrb	r2, [r2, #16]
 80087c8:	f107 0108 	add.w	r1, r7, #8
 80087cc:	4610      	mov	r0, r2
 80087ce:	4798      	blx	r3
 80087d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087d2:	e029      	b.n	8008828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fa63 	bl	8008ca2 <USBD_CtlError>
            err++;
 80087dc:	7afb      	ldrb	r3, [r7, #11]
 80087de:	3301      	adds	r3, #1
 80087e0:	72fb      	strb	r3, [r7, #11]
          break;
 80087e2:	e021      	b.n	8008828 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00b      	beq.n	8008808 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	7c12      	ldrb	r2, [r2, #16]
 80087fc:	f107 0108 	add.w	r1, r7, #8
 8008800:	4610      	mov	r0, r2
 8008802:	4798      	blx	r3
 8008804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008806:	e00f      	b.n	8008828 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fa49 	bl	8008ca2 <USBD_CtlError>
            err++;
 8008810:	7afb      	ldrb	r3, [r7, #11]
 8008812:	3301      	adds	r3, #1
 8008814:	72fb      	strb	r3, [r7, #11]
          break;
 8008816:	e007      	b.n	8008828 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fa41 	bl	8008ca2 <USBD_CtlError>
          err++;
 8008820:	7afb      	ldrb	r3, [r7, #11]
 8008822:	3301      	adds	r3, #1
 8008824:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008826:	bf00      	nop
      }
      break;
 8008828:	e037      	b.n	800889a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	7c1b      	ldrb	r3, [r3, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d109      	bne.n	8008846 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883a:	f107 0208 	add.w	r2, r7, #8
 800883e:	4610      	mov	r0, r2
 8008840:	4798      	blx	r3
 8008842:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008844:	e029      	b.n	800889a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fa2a 	bl	8008ca2 <USBD_CtlError>
        err++;
 800884e:	7afb      	ldrb	r3, [r7, #11]
 8008850:	3301      	adds	r3, #1
 8008852:	72fb      	strb	r3, [r7, #11]
      break;
 8008854:	e021      	b.n	800889a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	7c1b      	ldrb	r3, [r3, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10d      	bne.n	800887a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	f107 0208 	add.w	r2, r7, #8
 800886a:	4610      	mov	r0, r2
 800886c:	4798      	blx	r3
 800886e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3301      	adds	r3, #1
 8008874:	2207      	movs	r2, #7
 8008876:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008878:	e00f      	b.n	800889a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fa10 	bl	8008ca2 <USBD_CtlError>
        err++;
 8008882:	7afb      	ldrb	r3, [r7, #11]
 8008884:	3301      	adds	r3, #1
 8008886:	72fb      	strb	r3, [r7, #11]
      break;
 8008888:	e007      	b.n	800889a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fa08 	bl	8008ca2 <USBD_CtlError>
      err++;
 8008892:	7afb      	ldrb	r3, [r7, #11]
 8008894:	3301      	adds	r3, #1
 8008896:	72fb      	strb	r3, [r7, #11]
      break;
 8008898:	bf00      	nop
  }

  if (err != 0U)
 800889a:	7afb      	ldrb	r3, [r7, #11]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d11e      	bne.n	80088de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	88db      	ldrh	r3, [r3, #6]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d016      	beq.n	80088d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80088a8:	893b      	ldrh	r3, [r7, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00e      	beq.n	80088cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	88da      	ldrh	r2, [r3, #6]
 80088b2:	893b      	ldrh	r3, [r7, #8]
 80088b4:	4293      	cmp	r3, r2
 80088b6:	bf28      	it	cs
 80088b8:	4613      	movcs	r3, r2
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088be:	893b      	ldrh	r3, [r7, #8]
 80088c0:	461a      	mov	r2, r3
 80088c2:	68f9      	ldr	r1, [r7, #12]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fa5d 	bl	8008d84 <USBD_CtlSendData>
 80088ca:	e009      	b.n	80088e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f9e7 	bl	8008ca2 <USBD_CtlError>
 80088d4:	e004      	b.n	80088e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 faae 	bl	8008e38 <USBD_CtlSendStatus>
 80088dc:	e000      	b.n	80088e0 <USBD_GetDescriptor+0x2cc>
    return;
 80088de:	bf00      	nop
  }
}
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop

080088e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	889b      	ldrh	r3, [r3, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d131      	bne.n	800895e <USBD_SetAddress+0x76>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	88db      	ldrh	r3, [r3, #6]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d12d      	bne.n	800895e <USBD_SetAddress+0x76>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	885b      	ldrh	r3, [r3, #2]
 8008906:	2b7f      	cmp	r3, #127	; 0x7f
 8008908:	d829      	bhi.n	800895e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	885b      	ldrh	r3, [r3, #2]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008914:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b03      	cmp	r3, #3
 8008920:	d104      	bne.n	800892c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f9bc 	bl	8008ca2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892a:	e01d      	b.n	8008968 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	7bfa      	ldrb	r2, [r7, #15]
 8008930:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fed5 	bl	80096e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa7a 	bl	8008e38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d004      	beq.n	8008954 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2202      	movs	r2, #2
 800894e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008952:	e009      	b.n	8008968 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800895c:	e004      	b.n	8008968 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f99e 	bl	8008ca2 <USBD_CtlError>
  }
}
 8008966:	bf00      	nop
 8008968:	bf00      	nop
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	885b      	ldrh	r3, [r3, #2]
 8008982:	b2da      	uxtb	r2, r3
 8008984:	4b4e      	ldr	r3, [pc, #312]	; (8008ac0 <USBD_SetConfig+0x150>)
 8008986:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008988:	4b4d      	ldr	r3, [pc, #308]	; (8008ac0 <USBD_SetConfig+0x150>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d905      	bls.n	800899c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f985 	bl	8008ca2 <USBD_CtlError>
    return USBD_FAIL;
 8008998:	2303      	movs	r3, #3
 800899a:	e08c      	b.n	8008ab6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d002      	beq.n	80089ae <USBD_SetConfig+0x3e>
 80089a8:	2b03      	cmp	r3, #3
 80089aa:	d029      	beq.n	8008a00 <USBD_SetConfig+0x90>
 80089ac:	e075      	b.n	8008a9a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80089ae:	4b44      	ldr	r3, [pc, #272]	; (8008ac0 <USBD_SetConfig+0x150>)
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d020      	beq.n	80089f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80089b6:	4b42      	ldr	r3, [pc, #264]	; (8008ac0 <USBD_SetConfig+0x150>)
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089c0:	4b3f      	ldr	r3, [pc, #252]	; (8008ac0 <USBD_SetConfig+0x150>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7fe ffe7 	bl	800799a <USBD_SetClassConfig>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d008      	beq.n	80089e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f962 	bl	8008ca2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2202      	movs	r2, #2
 80089e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089e6:	e065      	b.n	8008ab4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fa25 	bl	8008e38 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2203      	movs	r2, #3
 80089f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089f6:	e05d      	b.n	8008ab4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fa1d 	bl	8008e38 <USBD_CtlSendStatus>
      break;
 80089fe:	e059      	b.n	8008ab4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a00:	4b2f      	ldr	r3, [pc, #188]	; (8008ac0 <USBD_SetConfig+0x150>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d112      	bne.n	8008a2e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008a10:	4b2b      	ldr	r3, [pc, #172]	; (8008ac0 <USBD_SetConfig+0x150>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a1a:	4b29      	ldr	r3, [pc, #164]	; (8008ac0 <USBD_SetConfig+0x150>)
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7fe ffd6 	bl	80079d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fa06 	bl	8008e38 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a2c:	e042      	b.n	8008ab4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008a2e:	4b24      	ldr	r3, [pc, #144]	; (8008ac0 <USBD_SetConfig+0x150>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	461a      	mov	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d02a      	beq.n	8008a92 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f7fe ffc4 	bl	80079d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a4a:	4b1d      	ldr	r3, [pc, #116]	; (8008ac0 <USBD_SetConfig+0x150>)
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a54:	4b1a      	ldr	r3, [pc, #104]	; (8008ac0 <USBD_SetConfig+0x150>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7fe ff9d 	bl	800799a <USBD_SetClassConfig>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00f      	beq.n	8008a8a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f918 	bl	8008ca2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7fe ffa9 	bl	80079d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a88:	e014      	b.n	8008ab4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f9d4 	bl	8008e38 <USBD_CtlSendStatus>
      break;
 8008a90:	e010      	b.n	8008ab4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f9d0 	bl	8008e38 <USBD_CtlSendStatus>
      break;
 8008a98:	e00c      	b.n	8008ab4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f900 	bl	8008ca2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008aa2:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <USBD_SetConfig+0x150>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7fe ff92 	bl	80079d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab2:	bf00      	nop
  }

  return ret;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	2000032c 	.word	0x2000032c

08008ac4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	88db      	ldrh	r3, [r3, #6]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d004      	beq.n	8008ae0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f8e2 	bl	8008ca2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ade:	e023      	b.n	8008b28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	dc02      	bgt.n	8008af2 <USBD_GetConfig+0x2e>
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	dc03      	bgt.n	8008af8 <USBD_GetConfig+0x34>
 8008af0:	e015      	b.n	8008b1e <USBD_GetConfig+0x5a>
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d00b      	beq.n	8008b0e <USBD_GetConfig+0x4a>
 8008af6:	e012      	b.n	8008b1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	3308      	adds	r3, #8
 8008b02:	2201      	movs	r2, #1
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f93c 	bl	8008d84 <USBD_CtlSendData>
        break;
 8008b0c:	e00c      	b.n	8008b28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3304      	adds	r3, #4
 8008b12:	2201      	movs	r2, #1
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f934 	bl	8008d84 <USBD_CtlSendData>
        break;
 8008b1c:	e004      	b.n	8008b28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f8be 	bl	8008ca2 <USBD_CtlError>
        break;
 8008b26:	bf00      	nop
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	3b01      	subs	r3, #1
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d81e      	bhi.n	8008b86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	88db      	ldrh	r3, [r3, #6]
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d004      	beq.n	8008b5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f8a5 	bl	8008ca2 <USBD_CtlError>
        break;
 8008b58:	e01a      	b.n	8008b90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d005      	beq.n	8008b76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f043 0202 	orr.w	r2, r3, #2
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	330c      	adds	r3, #12
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f900 	bl	8008d84 <USBD_CtlSendData>
      break;
 8008b84:	e004      	b.n	8008b90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f88a 	bl	8008ca2 <USBD_CtlError>
      break;
 8008b8e:	bf00      	nop
  }
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	885b      	ldrh	r3, [r3, #2]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d107      	bne.n	8008bba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f940 	bl	8008e38 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008bb8:	e013      	b.n	8008be2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	885b      	ldrh	r3, [r3, #2]
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d10b      	bne.n	8008bda <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	889b      	ldrh	r3, [r3, #4]
 8008bc6:	0a1b      	lsrs	r3, r3, #8
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f930 	bl	8008e38 <USBD_CtlSendStatus>
}
 8008bd8:	e003      	b.n	8008be2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f860 	bl	8008ca2 <USBD_CtlError>
}
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d80b      	bhi.n	8008c1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	885b      	ldrh	r3, [r3, #2]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d10c      	bne.n	8008c24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f910 	bl	8008e38 <USBD_CtlSendStatus>
      }
      break;
 8008c18:	e004      	b.n	8008c24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f840 	bl	8008ca2 <USBD_CtlError>
      break;
 8008c22:	e000      	b.n	8008c26 <USBD_ClrFeature+0x3c>
      break;
 8008c24:	bf00      	nop
  }
}
 8008c26:	bf00      	nop
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	781a      	ldrb	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	3301      	adds	r3, #1
 8008c48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3301      	adds	r3, #1
 8008c56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f7ff fa41 	bl	80080e0 <SWAPBYTE>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	461a      	mov	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f7ff fa34 	bl	80080e0 <SWAPBYTE>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	3301      	adds	r3, #1
 8008c84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f7ff fa27 	bl	80080e0 <SWAPBYTE>
 8008c92:	4603      	mov	r3, r0
 8008c94:	461a      	mov	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	80da      	strh	r2, [r3, #6]
}
 8008c9a:	bf00      	nop
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cac:	2180      	movs	r1, #128	; 0x80
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fcb0 	bl	8009614 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fcac 	bl	8009614 <USBD_LL_StallEP>
}
 8008cbc:	bf00      	nop
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d036      	beq.n	8008d48 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008cde:	6938      	ldr	r0, [r7, #16]
 8008ce0:	f000 f836 	bl	8008d50 <USBD_GetLen>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	7812      	ldrb	r2, [r2, #0]
 8008cfc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	3301      	adds	r3, #1
 8008d02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	4413      	add	r3, r2
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
 8008d10:	3301      	adds	r3, #1
 8008d12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d14:	e013      	b.n	8008d3e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	7812      	ldrb	r2, [r2, #0]
 8008d20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	3301      	adds	r3, #1
 8008d26:	613b      	str	r3, [r7, #16]
    idx++;
 8008d28:	7dfb      	ldrb	r3, [r7, #23]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	4413      	add	r3, r2
 8008d34:	2200      	movs	r2, #0
 8008d36:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e7      	bne.n	8008d16 <USBD_GetString+0x52>
 8008d46:	e000      	b.n	8008d4a <USBD_GetString+0x86>
    return;
 8008d48:	bf00      	nop
  }
}
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d60:	e005      	b.n	8008d6e <USBD_GetLen+0x1e>
  {
    len++;
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
 8008d64:	3301      	adds	r3, #1
 8008d66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1f5      	bne.n	8008d62 <USBD_GetLen+0x12>
  }

  return len;
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2202      	movs	r2, #2
 8008d94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	2100      	movs	r1, #0
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 fcbb 	bl	8009726 <USBD_LL_Transmit>

  return USBD_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	60f8      	str	r0, [r7, #12]
 8008dc2:	60b9      	str	r1, [r7, #8]
 8008dc4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	2100      	movs	r1, #0
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f000 fcaa 	bl	8009726 <USBD_LL_Transmit>

  return USBD_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2203      	movs	r2, #3
 8008dec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	2100      	movs	r1, #0
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 fcae 	bl	8009768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	60f8      	str	r0, [r7, #12]
 8008e1e:	60b9      	str	r1, [r7, #8]
 8008e20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	2100      	movs	r1, #0
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 fc9d 	bl	8009768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2204      	movs	r2, #4
 8008e44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e48:	2300      	movs	r3, #0
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fc69 	bl	8009726 <USBD_LL_Transmit>

  return USBD_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2205      	movs	r2, #5
 8008e6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e6e:	2300      	movs	r3, #0
 8008e70:	2200      	movs	r2, #0
 8008e72:	2100      	movs	r1, #0
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fc77 	bl	8009768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	4912      	ldr	r1, [pc, #72]	; (8008ed4 <MX_USB_DEVICE_Init+0x50>)
 8008e8c:	4812      	ldr	r0, [pc, #72]	; (8008ed8 <MX_USB_DEVICE_Init+0x54>)
 8008e8e:	f7fe fd07 	bl	80078a0 <USBD_Init>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e98:	f7f7 fe80 	bl	8000b9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e9c:	490f      	ldr	r1, [pc, #60]	; (8008edc <MX_USB_DEVICE_Init+0x58>)
 8008e9e:	480e      	ldr	r0, [pc, #56]	; (8008ed8 <MX_USB_DEVICE_Init+0x54>)
 8008ea0:	f7fe fd2e 	bl	8007900 <USBD_RegisterClass>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008eaa:	f7f7 fe77 	bl	8000b9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008eae:	490c      	ldr	r1, [pc, #48]	; (8008ee0 <MX_USB_DEVICE_Init+0x5c>)
 8008eb0:	4809      	ldr	r0, [pc, #36]	; (8008ed8 <MX_USB_DEVICE_Init+0x54>)
 8008eb2:	f7fe fc65 	bl	8007780 <USBD_CDC_RegisterInterface>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ebc:	f7f7 fe6e 	bl	8000b9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ec0:	4805      	ldr	r0, [pc, #20]	; (8008ed8 <MX_USB_DEVICE_Init+0x54>)
 8008ec2:	f7fe fd53 	bl	800796c <USBD_Start>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d001      	beq.n	8008ed0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ecc:	f7f7 fe66 	bl	8000b9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ed0:	bf00      	nop
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	200000ac 	.word	0x200000ac
 8008ed8:	20000330 	.word	0x20000330
 8008edc:	20000018 	.word	0x20000018
 8008ee0:	20000098 	.word	0x20000098

08008ee4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ee8:	2200      	movs	r2, #0
 8008eea:	4905      	ldr	r1, [pc, #20]	; (8008f00 <CDC_Init_FS+0x1c>)
 8008eec:	4805      	ldr	r0, [pc, #20]	; (8008f04 <CDC_Init_FS+0x20>)
 8008eee:	f7fe fc61 	bl	80077b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ef2:	4905      	ldr	r1, [pc, #20]	; (8008f08 <CDC_Init_FS+0x24>)
 8008ef4:	4803      	ldr	r0, [pc, #12]	; (8008f04 <CDC_Init_FS+0x20>)
 8008ef6:	f7fe fc7f 	bl	80077f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008efa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	20000e0c 	.word	0x20000e0c
 8008f04:	20000330 	.word	0x20000330
 8008f08:	2000060c 	.word	0x2000060c

08008f0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	4603      	mov	r3, r0
 8008f24:	6039      	str	r1, [r7, #0]
 8008f26:	71fb      	strb	r3, [r7, #7]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f2c:	79fb      	ldrb	r3, [r7, #7]
 8008f2e:	2b23      	cmp	r3, #35	; 0x23
 8008f30:	d84a      	bhi.n	8008fc8 <CDC_Control_FS+0xac>
 8008f32:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <CDC_Control_FS+0x1c>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008fc9 	.word	0x08008fc9
 8008f3c:	08008fc9 	.word	0x08008fc9
 8008f40:	08008fc9 	.word	0x08008fc9
 8008f44:	08008fc9 	.word	0x08008fc9
 8008f48:	08008fc9 	.word	0x08008fc9
 8008f4c:	08008fc9 	.word	0x08008fc9
 8008f50:	08008fc9 	.word	0x08008fc9
 8008f54:	08008fc9 	.word	0x08008fc9
 8008f58:	08008fc9 	.word	0x08008fc9
 8008f5c:	08008fc9 	.word	0x08008fc9
 8008f60:	08008fc9 	.word	0x08008fc9
 8008f64:	08008fc9 	.word	0x08008fc9
 8008f68:	08008fc9 	.word	0x08008fc9
 8008f6c:	08008fc9 	.word	0x08008fc9
 8008f70:	08008fc9 	.word	0x08008fc9
 8008f74:	08008fc9 	.word	0x08008fc9
 8008f78:	08008fc9 	.word	0x08008fc9
 8008f7c:	08008fc9 	.word	0x08008fc9
 8008f80:	08008fc9 	.word	0x08008fc9
 8008f84:	08008fc9 	.word	0x08008fc9
 8008f88:	08008fc9 	.word	0x08008fc9
 8008f8c:	08008fc9 	.word	0x08008fc9
 8008f90:	08008fc9 	.word	0x08008fc9
 8008f94:	08008fc9 	.word	0x08008fc9
 8008f98:	08008fc9 	.word	0x08008fc9
 8008f9c:	08008fc9 	.word	0x08008fc9
 8008fa0:	08008fc9 	.word	0x08008fc9
 8008fa4:	08008fc9 	.word	0x08008fc9
 8008fa8:	08008fc9 	.word	0x08008fc9
 8008fac:	08008fc9 	.word	0x08008fc9
 8008fb0:	08008fc9 	.word	0x08008fc9
 8008fb4:	08008fc9 	.word	0x08008fc9
 8008fb8:	08008fc9 	.word	0x08008fc9
 8008fbc:	08008fc9 	.word	0x08008fc9
 8008fc0:	08008fc9 	.word	0x08008fc9
 8008fc4:	08008fc9 	.word	0x08008fc9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008fc8:	bf00      	nop
  }

  return (USBD_OK);
 8008fca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008fe2:	6879      	ldr	r1, [r7, #4]
 8008fe4:	4805      	ldr	r0, [pc, #20]	; (8008ffc <CDC_Receive_FS+0x24>)
 8008fe6:	f7fe fc07 	bl	80077f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008fea:	4804      	ldr	r0, [pc, #16]	; (8008ffc <CDC_Receive_FS+0x24>)
 8008fec:	f7fe fc22 	bl	8007834 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008ff0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20000330 	.word	0x20000330

08009000 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009000:	b480      	push	{r7}
 8009002:	b087      	sub	sp, #28
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	4613      	mov	r3, r2
 800900c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009012:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009016:	4618      	mov	r0, r3
 8009018:	371c      	adds	r7, #28
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
	...

08009024 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	4603      	mov	r3, r0
 800902c:	6039      	str	r1, [r7, #0]
 800902e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2212      	movs	r2, #18
 8009034:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009036:	4b03      	ldr	r3, [pc, #12]	; (8009044 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	200000c8 	.word	0x200000c8

08009048 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	6039      	str	r1, [r7, #0]
 8009052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2204      	movs	r2, #4
 8009058:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800905a:	4b03      	ldr	r3, [pc, #12]	; (8009068 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	200000dc 	.word	0x200000dc

0800906c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	6039      	str	r1, [r7, #0]
 8009076:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009078:	79fb      	ldrb	r3, [r7, #7]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d105      	bne.n	800908a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	4907      	ldr	r1, [pc, #28]	; (80090a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009082:	4808      	ldr	r0, [pc, #32]	; (80090a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009084:	f7ff fe1e 	bl	8008cc4 <USBD_GetString>
 8009088:	e004      	b.n	8009094 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	4904      	ldr	r1, [pc, #16]	; (80090a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800908e:	4805      	ldr	r0, [pc, #20]	; (80090a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009090:	f7ff fe18 	bl	8008cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009094:	4b02      	ldr	r3, [pc, #8]	; (80090a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009096:	4618      	mov	r0, r3
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	2000160c 	.word	0x2000160c
 80090a4:	080098c8 	.word	0x080098c8

080090a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4603      	mov	r3, r0
 80090b0:	6039      	str	r1, [r7, #0]
 80090b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	4904      	ldr	r1, [pc, #16]	; (80090c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090b8:	4804      	ldr	r0, [pc, #16]	; (80090cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090ba:	f7ff fe03 	bl	8008cc4 <USBD_GetString>
  return USBD_StrDesc;
 80090be:	4b02      	ldr	r3, [pc, #8]	; (80090c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	2000160c 	.word	0x2000160c
 80090cc:	080098e0 	.word	0x080098e0

080090d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	6039      	str	r1, [r7, #0]
 80090da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	221a      	movs	r2, #26
 80090e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090e2:	f000 f843 	bl	800916c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090e6:	4b02      	ldr	r3, [pc, #8]	; (80090f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	200000e0 	.word	0x200000e0

080090f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	6039      	str	r1, [r7, #0]
 80090fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009100:	79fb      	ldrb	r3, [r7, #7]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d105      	bne.n	8009112 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	4907      	ldr	r1, [pc, #28]	; (8009128 <USBD_FS_ConfigStrDescriptor+0x34>)
 800910a:	4808      	ldr	r0, [pc, #32]	; (800912c <USBD_FS_ConfigStrDescriptor+0x38>)
 800910c:	f7ff fdda 	bl	8008cc4 <USBD_GetString>
 8009110:	e004      	b.n	800911c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	4904      	ldr	r1, [pc, #16]	; (8009128 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009116:	4805      	ldr	r0, [pc, #20]	; (800912c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009118:	f7ff fdd4 	bl	8008cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800911c:	4b02      	ldr	r3, [pc, #8]	; (8009128 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	2000160c 	.word	0x2000160c
 800912c:	080098f4 	.word	0x080098f4

08009130 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	6039      	str	r1, [r7, #0]
 800913a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800913c:	79fb      	ldrb	r3, [r7, #7]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d105      	bne.n	800914e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	4907      	ldr	r1, [pc, #28]	; (8009164 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009146:	4808      	ldr	r0, [pc, #32]	; (8009168 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009148:	f7ff fdbc 	bl	8008cc4 <USBD_GetString>
 800914c:	e004      	b.n	8009158 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	4904      	ldr	r1, [pc, #16]	; (8009164 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009152:	4805      	ldr	r0, [pc, #20]	; (8009168 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009154:	f7ff fdb6 	bl	8008cc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009158:	4b02      	ldr	r3, [pc, #8]	; (8009164 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800915a:	4618      	mov	r0, r3
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	2000160c 	.word	0x2000160c
 8009168:	08009900 	.word	0x08009900

0800916c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009172:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <Get_SerialNum+0x44>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009178:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <Get_SerialNum+0x48>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800917e:	4b0e      	ldr	r3, [pc, #56]	; (80091b8 <Get_SerialNum+0x4c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4413      	add	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d009      	beq.n	80091a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009192:	2208      	movs	r2, #8
 8009194:	4909      	ldr	r1, [pc, #36]	; (80091bc <Get_SerialNum+0x50>)
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 f814 	bl	80091c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800919c:	2204      	movs	r2, #4
 800919e:	4908      	ldr	r1, [pc, #32]	; (80091c0 <Get_SerialNum+0x54>)
 80091a0:	68b8      	ldr	r0, [r7, #8]
 80091a2:	f000 f80f 	bl	80091c4 <IntToUnicode>
  }
}
 80091a6:	bf00      	nop
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	1fff7a10 	.word	0x1fff7a10
 80091b4:	1fff7a14 	.word	0x1fff7a14
 80091b8:	1fff7a18 	.word	0x1fff7a18
 80091bc:	200000e2 	.word	0x200000e2
 80091c0:	200000f2 	.word	0x200000f2

080091c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	4613      	mov	r3, r2
 80091d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091d2:	2300      	movs	r3, #0
 80091d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091d6:	2300      	movs	r3, #0
 80091d8:	75fb      	strb	r3, [r7, #23]
 80091da:	e027      	b.n	800922c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	0f1b      	lsrs	r3, r3, #28
 80091e0:	2b09      	cmp	r3, #9
 80091e2:	d80b      	bhi.n	80091fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	0f1b      	lsrs	r3, r3, #28
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	4619      	mov	r1, r3
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	440b      	add	r3, r1
 80091f4:	3230      	adds	r2, #48	; 0x30
 80091f6:	b2d2      	uxtb	r2, r2
 80091f8:	701a      	strb	r2, [r3, #0]
 80091fa:	e00a      	b.n	8009212 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	0f1b      	lsrs	r3, r3, #28
 8009200:	b2da      	uxtb	r2, r3
 8009202:	7dfb      	ldrb	r3, [r7, #23]
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	4619      	mov	r1, r3
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	440b      	add	r3, r1
 800920c:	3237      	adds	r2, #55	; 0x37
 800920e:	b2d2      	uxtb	r2, r2
 8009210:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	011b      	lsls	r3, r3, #4
 8009216:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009218:	7dfb      	ldrb	r3, [r7, #23]
 800921a:	005b      	lsls	r3, r3, #1
 800921c:	3301      	adds	r3, #1
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	4413      	add	r3, r2
 8009222:	2200      	movs	r2, #0
 8009224:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	3301      	adds	r3, #1
 800922a:	75fb      	strb	r3, [r7, #23]
 800922c:	7dfa      	ldrb	r2, [r7, #23]
 800922e:	79fb      	ldrb	r3, [r7, #7]
 8009230:	429a      	cmp	r2, r3
 8009232:	d3d3      	bcc.n	80091dc <IntToUnicode+0x18>
  }
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop
 8009238:	371c      	adds	r7, #28
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
	...

08009244 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b08a      	sub	sp, #40	; 0x28
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800924c:	f107 0314 	add.w	r3, r7, #20
 8009250:	2200      	movs	r2, #0
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	605a      	str	r2, [r3, #4]
 8009256:	609a      	str	r2, [r3, #8]
 8009258:	60da      	str	r2, [r3, #12]
 800925a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009264:	d13a      	bne.n	80092dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009266:	2300      	movs	r3, #0
 8009268:	613b      	str	r3, [r7, #16]
 800926a:	4b1e      	ldr	r3, [pc, #120]	; (80092e4 <HAL_PCD_MspInit+0xa0>)
 800926c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926e:	4a1d      	ldr	r2, [pc, #116]	; (80092e4 <HAL_PCD_MspInit+0xa0>)
 8009270:	f043 0301 	orr.w	r3, r3, #1
 8009274:	6313      	str	r3, [r2, #48]	; 0x30
 8009276:	4b1b      	ldr	r3, [pc, #108]	; (80092e4 <HAL_PCD_MspInit+0xa0>)
 8009278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	613b      	str	r3, [r7, #16]
 8009280:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009282:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009288:	2302      	movs	r3, #2
 800928a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800928c:	2300      	movs	r3, #0
 800928e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009290:	2303      	movs	r3, #3
 8009292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009294:	230a      	movs	r3, #10
 8009296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009298:	f107 0314 	add.w	r3, r7, #20
 800929c:	4619      	mov	r1, r3
 800929e:	4812      	ldr	r0, [pc, #72]	; (80092e8 <HAL_PCD_MspInit+0xa4>)
 80092a0:	f7f8 fb86 	bl	80019b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092a4:	4b0f      	ldr	r3, [pc, #60]	; (80092e4 <HAL_PCD_MspInit+0xa0>)
 80092a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a8:	4a0e      	ldr	r2, [pc, #56]	; (80092e4 <HAL_PCD_MspInit+0xa0>)
 80092aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ae:	6353      	str	r3, [r2, #52]	; 0x34
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]
 80092b4:	4b0b      	ldr	r3, [pc, #44]	; (80092e4 <HAL_PCD_MspInit+0xa0>)
 80092b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b8:	4a0a      	ldr	r2, [pc, #40]	; (80092e4 <HAL_PCD_MspInit+0xa0>)
 80092ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092be:	6453      	str	r3, [r2, #68]	; 0x44
 80092c0:	4b08      	ldr	r3, [pc, #32]	; (80092e4 <HAL_PCD_MspInit+0xa0>)
 80092c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092c8:	60fb      	str	r3, [r7, #12]
 80092ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092cc:	2200      	movs	r2, #0
 80092ce:	2100      	movs	r1, #0
 80092d0:	2043      	movs	r0, #67	; 0x43
 80092d2:	f7f8 fb36 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092d6:	2043      	movs	r0, #67	; 0x43
 80092d8:	f7f8 fb4f 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092dc:	bf00      	nop
 80092de:	3728      	adds	r7, #40	; 0x28
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	40023800 	.word	0x40023800
 80092e8:	40020000 	.word	0x40020000

080092ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009300:	4619      	mov	r1, r3
 8009302:	4610      	mov	r0, r2
 8009304:	f7fe fb7f 	bl	8007a06 <USBD_LL_SetupStage>
}
 8009308:	bf00      	nop
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009322:	78fa      	ldrb	r2, [r7, #3]
 8009324:	6879      	ldr	r1, [r7, #4]
 8009326:	4613      	mov	r3, r2
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	4413      	add	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	440b      	add	r3, r1
 8009330:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	78fb      	ldrb	r3, [r7, #3]
 8009338:	4619      	mov	r1, r3
 800933a:	f7fe fbb9 	bl	8007ab0 <USBD_LL_DataOutStage>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009358:	78fa      	ldrb	r2, [r7, #3]
 800935a:	6879      	ldr	r1, [r7, #4]
 800935c:	4613      	mov	r3, r2
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	334c      	adds	r3, #76	; 0x4c
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	78fb      	ldrb	r3, [r7, #3]
 800936c:	4619      	mov	r1, r3
 800936e:	f7fe fc52 	bl	8007c16 <USBD_LL_DataInStage>
}
 8009372:	bf00      	nop
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe fd86 	bl	8007e9a <USBD_LL_SOF>
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800939e:	2301      	movs	r3, #1
 80093a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d001      	beq.n	80093ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80093aa:	f7f7 fbf7 	bl	8000b9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093b4:	7bfa      	ldrb	r2, [r7, #15]
 80093b6:	4611      	mov	r1, r2
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fe fd30 	bl	8007e1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe fcd8 	bl	8007d7a <USBD_LL_Reset>
}
 80093ca:	bf00      	nop
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe fd2b 	bl	8007e3e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6812      	ldr	r2, [r2, #0]
 80093f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093fa:	f043 0301 	orr.w	r3, r3, #1
 80093fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a1b      	ldr	r3, [r3, #32]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d005      	beq.n	8009414 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009408:	4b04      	ldr	r3, [pc, #16]	; (800941c <HAL_PCD_SuspendCallback+0x48>)
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	4a03      	ldr	r2, [pc, #12]	; (800941c <HAL_PCD_SuspendCallback+0x48>)
 800940e:	f043 0306 	orr.w	r3, r3, #6
 8009412:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009414:	bf00      	nop
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	e000ed00 	.word	0xe000ed00

08009420 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe fd1b 	bl	8007e6a <USBD_LL_Resume>
}
 8009434:	bf00      	nop
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	460b      	mov	r3, r1
 8009446:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800944e:	78fa      	ldrb	r2, [r7, #3]
 8009450:	4611      	mov	r1, r2
 8009452:	4618      	mov	r0, r3
 8009454:	f7fe fd73 	bl	8007f3e <USBD_LL_IsoOUTIncomplete>
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009472:	78fa      	ldrb	r2, [r7, #3]
 8009474:	4611      	mov	r1, r2
 8009476:	4618      	mov	r0, r3
 8009478:	f7fe fd2f 	bl	8007eda <USBD_LL_IsoINIncomplete>
}
 800947c:	bf00      	nop
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe fd85 	bl	8007fa2 <USBD_LL_DevConnected>
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fe fd82 	bl	8007fb8 <USBD_LL_DevDisconnected>
}
 80094b4:	bf00      	nop
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d13c      	bne.n	8009546 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80094cc:	4a20      	ldr	r2, [pc, #128]	; (8009550 <USBD_LL_Init+0x94>)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a1e      	ldr	r2, [pc, #120]	; (8009550 <USBD_LL_Init+0x94>)
 80094d8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094dc:	4b1c      	ldr	r3, [pc, #112]	; (8009550 <USBD_LL_Init+0x94>)
 80094de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80094e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80094e4:	4b1a      	ldr	r3, [pc, #104]	; (8009550 <USBD_LL_Init+0x94>)
 80094e6:	2204      	movs	r2, #4
 80094e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80094ea:	4b19      	ldr	r3, [pc, #100]	; (8009550 <USBD_LL_Init+0x94>)
 80094ec:	2202      	movs	r2, #2
 80094ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094f0:	4b17      	ldr	r3, [pc, #92]	; (8009550 <USBD_LL_Init+0x94>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80094f6:	4b16      	ldr	r3, [pc, #88]	; (8009550 <USBD_LL_Init+0x94>)
 80094f8:	2202      	movs	r2, #2
 80094fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094fc:	4b14      	ldr	r3, [pc, #80]	; (8009550 <USBD_LL_Init+0x94>)
 80094fe:	2200      	movs	r2, #0
 8009500:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009502:	4b13      	ldr	r3, [pc, #76]	; (8009550 <USBD_LL_Init+0x94>)
 8009504:	2200      	movs	r2, #0
 8009506:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009508:	4b11      	ldr	r3, [pc, #68]	; (8009550 <USBD_LL_Init+0x94>)
 800950a:	2200      	movs	r2, #0
 800950c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800950e:	4b10      	ldr	r3, [pc, #64]	; (8009550 <USBD_LL_Init+0x94>)
 8009510:	2200      	movs	r2, #0
 8009512:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009514:	4b0e      	ldr	r3, [pc, #56]	; (8009550 <USBD_LL_Init+0x94>)
 8009516:	2200      	movs	r2, #0
 8009518:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800951a:	480d      	ldr	r0, [pc, #52]	; (8009550 <USBD_LL_Init+0x94>)
 800951c:	f7f8 fd2a 	bl	8001f74 <HAL_PCD_Init>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009526:	f7f7 fb39 	bl	8000b9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800952a:	2180      	movs	r1, #128	; 0x80
 800952c:	4808      	ldr	r0, [pc, #32]	; (8009550 <USBD_LL_Init+0x94>)
 800952e:	f7f9 ff82 	bl	8003436 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009532:	2240      	movs	r2, #64	; 0x40
 8009534:	2100      	movs	r1, #0
 8009536:	4806      	ldr	r0, [pc, #24]	; (8009550 <USBD_LL_Init+0x94>)
 8009538:	f7f9 ff36 	bl	80033a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800953c:	2280      	movs	r2, #128	; 0x80
 800953e:	2101      	movs	r1, #1
 8009540:	4803      	ldr	r0, [pc, #12]	; (8009550 <USBD_LL_Init+0x94>)
 8009542:	f7f9 ff31 	bl	80033a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	2000180c 	.word	0x2000180c

08009554 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800956a:	4618      	mov	r0, r3
 800956c:	f7f8 fe1f 	bl	80021ae <HAL_PCD_Start>
 8009570:	4603      	mov	r3, r0
 8009572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	4618      	mov	r0, r3
 8009578:	f000 f942 	bl	8009800 <USBD_Get_USB_Status>
 800957c:	4603      	mov	r3, r0
 800957e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009580:	7bbb      	ldrb	r3, [r7, #14]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	4608      	mov	r0, r1
 8009594:	4611      	mov	r1, r2
 8009596:	461a      	mov	r2, r3
 8009598:	4603      	mov	r3, r0
 800959a:	70fb      	strb	r3, [r7, #3]
 800959c:	460b      	mov	r3, r1
 800959e:	70bb      	strb	r3, [r7, #2]
 80095a0:	4613      	mov	r3, r2
 80095a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80095b2:	78bb      	ldrb	r3, [r7, #2]
 80095b4:	883a      	ldrh	r2, [r7, #0]
 80095b6:	78f9      	ldrb	r1, [r7, #3]
 80095b8:	f7f9 faf0 	bl	8002b9c <HAL_PCD_EP_Open>
 80095bc:	4603      	mov	r3, r0
 80095be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 f91c 	bl	8009800 <USBD_Get_USB_Status>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	460b      	mov	r3, r1
 80095e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095f0:	78fa      	ldrb	r2, [r7, #3]
 80095f2:	4611      	mov	r1, r2
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7f9 fb39 	bl	8002c6c <HAL_PCD_EP_Close>
 80095fa:	4603      	mov	r3, r0
 80095fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	4618      	mov	r0, r3
 8009602:	f000 f8fd 	bl	8009800 <USBD_Get_USB_Status>
 8009606:	4603      	mov	r3, r0
 8009608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800960a:	7bbb      	ldrb	r3, [r7, #14]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800962e:	78fa      	ldrb	r2, [r7, #3]
 8009630:	4611      	mov	r1, r2
 8009632:	4618      	mov	r0, r3
 8009634:	f7f9 fc11 	bl	8002e5a <HAL_PCD_EP_SetStall>
 8009638:	4603      	mov	r3, r0
 800963a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	4618      	mov	r0, r3
 8009640:	f000 f8de 	bl	8009800 <USBD_Get_USB_Status>
 8009644:	4603      	mov	r3, r0
 8009646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009648:	7bbb      	ldrb	r3, [r7, #14]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	460b      	mov	r3, r1
 800965c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800966c:	78fa      	ldrb	r2, [r7, #3]
 800966e:	4611      	mov	r1, r2
 8009670:	4618      	mov	r0, r3
 8009672:	f7f9 fc56 	bl	8002f22 <HAL_PCD_EP_ClrStall>
 8009676:	4603      	mov	r3, r0
 8009678:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	4618      	mov	r0, r3
 800967e:	f000 f8bf 	bl	8009800 <USBD_Get_USB_Status>
 8009682:	4603      	mov	r3, r0
 8009684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009686:	7bbb      	ldrb	r3, [r7, #14]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	460b      	mov	r3, r1
 800969a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	da0b      	bge.n	80096c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096ac:	78fb      	ldrb	r3, [r7, #3]
 80096ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096b2:	68f9      	ldr	r1, [r7, #12]
 80096b4:	4613      	mov	r3, r2
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	4413      	add	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	440b      	add	r3, r1
 80096be:	333e      	adds	r3, #62	; 0x3e
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	e00b      	b.n	80096dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096ca:	68f9      	ldr	r1, [r7, #12]
 80096cc:	4613      	mov	r3, r2
 80096ce:	00db      	lsls	r3, r3, #3
 80096d0:	4413      	add	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	440b      	add	r3, r1
 80096d6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80096da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	460b      	mov	r3, r1
 80096f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009702:	78fa      	ldrb	r2, [r7, #3]
 8009704:	4611      	mov	r1, r2
 8009706:	4618      	mov	r0, r3
 8009708:	f7f9 fa23 	bl	8002b52 <HAL_PCD_SetAddress>
 800970c:	4603      	mov	r3, r0
 800970e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009710:	7bfb      	ldrb	r3, [r7, #15]
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f874 	bl	8009800 <USBD_Get_USB_Status>
 8009718:	4603      	mov	r3, r0
 800971a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800971c:	7bbb      	ldrb	r3, [r7, #14]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b086      	sub	sp, #24
 800972a:	af00      	add	r7, sp, #0
 800972c:	60f8      	str	r0, [r7, #12]
 800972e:	607a      	str	r2, [r7, #4]
 8009730:	603b      	str	r3, [r7, #0]
 8009732:	460b      	mov	r3, r1
 8009734:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800973a:	2300      	movs	r3, #0
 800973c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009744:	7af9      	ldrb	r1, [r7, #11]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	f7f9 fb3c 	bl	8002dc6 <HAL_PCD_EP_Transmit>
 800974e:	4603      	mov	r3, r0
 8009750:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009752:	7dfb      	ldrb	r3, [r7, #23]
 8009754:	4618      	mov	r0, r3
 8009756:	f000 f853 	bl	8009800 <USBD_Get_USB_Status>
 800975a:	4603      	mov	r3, r0
 800975c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800975e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	607a      	str	r2, [r7, #4]
 8009772:	603b      	str	r3, [r7, #0]
 8009774:	460b      	mov	r3, r1
 8009776:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009786:	7af9      	ldrb	r1, [r7, #11]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	f7f9 fab8 	bl	8002d00 <HAL_PCD_EP_Receive>
 8009790:	4603      	mov	r3, r0
 8009792:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009794:	7dfb      	ldrb	r3, [r7, #23]
 8009796:	4618      	mov	r0, r3
 8009798:	f000 f832 	bl	8009800 <USBD_Get_USB_Status>
 800979c:	4603      	mov	r3, r0
 800979e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3718      	adds	r7, #24
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b082      	sub	sp, #8
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	460b      	mov	r3, r1
 80097b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097bc:	78fa      	ldrb	r2, [r7, #3]
 80097be:	4611      	mov	r1, r2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7f9 fae8 	bl	8002d96 <HAL_PCD_EP_GetRxCount>
 80097c6:	4603      	mov	r3, r0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097d8:	4b03      	ldr	r3, [pc, #12]	; (80097e8 <USBD_static_malloc+0x18>)
}
 80097da:	4618      	mov	r0, r3
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	20001d18 	.word	0x20001d18

080097ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]

}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	2b03      	cmp	r3, #3
 8009812:	d817      	bhi.n	8009844 <USBD_Get_USB_Status+0x44>
 8009814:	a201      	add	r2, pc, #4	; (adr r2, 800981c <USBD_Get_USB_Status+0x1c>)
 8009816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981a:	bf00      	nop
 800981c:	0800982d 	.word	0x0800982d
 8009820:	08009833 	.word	0x08009833
 8009824:	08009839 	.word	0x08009839
 8009828:	0800983f 	.word	0x0800983f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73fb      	strb	r3, [r7, #15]
    break;
 8009830:	e00b      	b.n	800984a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009832:	2303      	movs	r3, #3
 8009834:	73fb      	strb	r3, [r7, #15]
    break;
 8009836:	e008      	b.n	800984a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009838:	2301      	movs	r3, #1
 800983a:	73fb      	strb	r3, [r7, #15]
    break;
 800983c:	e005      	b.n	800984a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800983e:	2303      	movs	r3, #3
 8009840:	73fb      	strb	r3, [r7, #15]
    break;
 8009842:	e002      	b.n	800984a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009844:	2303      	movs	r3, #3
 8009846:	73fb      	strb	r3, [r7, #15]
    break;
 8009848:	bf00      	nop
  }
  return usb_status;
 800984a:	7bfb      	ldrb	r3, [r7, #15]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <memset>:
 8009858:	4402      	add	r2, r0
 800985a:	4603      	mov	r3, r0
 800985c:	4293      	cmp	r3, r2
 800985e:	d100      	bne.n	8009862 <memset+0xa>
 8009860:	4770      	bx	lr
 8009862:	f803 1b01 	strb.w	r1, [r3], #1
 8009866:	e7f9      	b.n	800985c <memset+0x4>

08009868 <__libc_init_array>:
 8009868:	b570      	push	{r4, r5, r6, lr}
 800986a:	4d0d      	ldr	r5, [pc, #52]	; (80098a0 <__libc_init_array+0x38>)
 800986c:	4c0d      	ldr	r4, [pc, #52]	; (80098a4 <__libc_init_array+0x3c>)
 800986e:	1b64      	subs	r4, r4, r5
 8009870:	10a4      	asrs	r4, r4, #2
 8009872:	2600      	movs	r6, #0
 8009874:	42a6      	cmp	r6, r4
 8009876:	d109      	bne.n	800988c <__libc_init_array+0x24>
 8009878:	4d0b      	ldr	r5, [pc, #44]	; (80098a8 <__libc_init_array+0x40>)
 800987a:	4c0c      	ldr	r4, [pc, #48]	; (80098ac <__libc_init_array+0x44>)
 800987c:	f000 f818 	bl	80098b0 <_init>
 8009880:	1b64      	subs	r4, r4, r5
 8009882:	10a4      	asrs	r4, r4, #2
 8009884:	2600      	movs	r6, #0
 8009886:	42a6      	cmp	r6, r4
 8009888:	d105      	bne.n	8009896 <__libc_init_array+0x2e>
 800988a:	bd70      	pop	{r4, r5, r6, pc}
 800988c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009890:	4798      	blx	r3
 8009892:	3601      	adds	r6, #1
 8009894:	e7ee      	b.n	8009874 <__libc_init_array+0xc>
 8009896:	f855 3b04 	ldr.w	r3, [r5], #4
 800989a:	4798      	blx	r3
 800989c:	3601      	adds	r6, #1
 800989e:	e7f2      	b.n	8009886 <__libc_init_array+0x1e>
 80098a0:	08009930 	.word	0x08009930
 80098a4:	08009930 	.word	0x08009930
 80098a8:	08009930 	.word	0x08009930
 80098ac:	08009934 	.word	0x08009934

080098b0 <_init>:
 80098b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b2:	bf00      	nop
 80098b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b6:	bc08      	pop	{r3}
 80098b8:	469e      	mov	lr, r3
 80098ba:	4770      	bx	lr

080098bc <_fini>:
 80098bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098be:	bf00      	nop
 80098c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098c2:	bc08      	pop	{r3}
 80098c4:	469e      	mov	lr, r3
 80098c6:	4770      	bx	lr
