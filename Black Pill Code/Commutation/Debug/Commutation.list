
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f540  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800f6e0  0800f6e0  0001f6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fab4  0800fab4  000202e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fab4  0800fab4  0001fab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fabc  0800fabc  000202e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fabc  0800fabc  0001fabc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fac0  0800fac0  0001fac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  0800fac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb8  200002e8  0800fdac  000202e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022a0  0800fdac  000222a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d07a  00000000  00000000  0002035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040e3  00000000  00000000  0003d3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a40  00000000  00000000  000414b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001476  00000000  00000000  00042ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c3ae  00000000  00000000  0004436e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020293  00000000  00000000  0006071c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3bee  00000000  00000000  000809af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008004  00000000  00000000  001245a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0012c5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e8 	.word	0x200002e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f6c8 	.word	0x0800f6c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002ec 	.word	0x200002ec
 80001dc:	0800f6c8 	.word	0x0800f6c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <PrepareCommutation>:
static void MX_TIM9_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

HAL_StatusTypeDef PrepareCommutation (char Direction) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]

	// Read IDR for Hall Sensor status
	uint16_t Hall = (GPIOA->IDR & 0b111) - 1;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <PrepareCommutation+0x68>)
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	81fb      	strh	r3, [r7, #14]
		break;
	}
	*/

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8000ece:	89fa      	ldrh	r2, [r7, #14]
 8000ed0:	4913      	ldr	r1, [pc, #76]	; (8000f20 <PrepareCommutation+0x6c>)
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	440b      	add	r3, r1
 8000edc:	881a      	ldrh	r2, [r3, #0]
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <PrepareCommutation+0x70>)
 8000ee0:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 8000ee2:	89fa      	ldrh	r2, [r7, #14]
 8000ee4:	490e      	ldr	r1, [pc, #56]	; (8000f20 <PrepareCommutation+0x6c>)
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	440b      	add	r3, r1
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	881a      	ldrh	r2, [r3, #0]
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <PrepareCommutation+0x70>)
 8000ef6:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 8000ef8:	89fa      	ldrh	r2, [r7, #14]
 8000efa:	4909      	ldr	r1, [pc, #36]	; (8000f20 <PrepareCommutation+0x6c>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	440b      	add	r3, r1
 8000f06:	3302      	adds	r3, #2
 8000f08:	881a      	ldrh	r2, [r3, #0]
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <PrepareCommutation+0x70>)
 8000f0c:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8000f0e:	2300      	movs	r3, #0

}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	20000000 	.word	0x20000000
 8000f24:	40010000 	.word	0x40010000

08000f28 <StartupSequence>:

HAL_StatusTypeDef StartupSequence (char Direction) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_EnableListen_IT (&hi2c1);
 8000f32:	4855      	ldr	r0, [pc, #340]	; (8001088 <StartupSequence+0x160>)
 8000f34:	f002 f99c 	bl	8003270 <HAL_I2C_EnableListen_IT>

	// Initialize some variables
	Fapb1tclk = HAL_RCC_GetPCLK1Freq() * 2;
 8000f38:	f005 fd06 	bl	8006948 <HAL_RCC_GetPCLK1Freq>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4a52      	ldr	r2, [pc, #328]	; (800108c <StartupSequence+0x164>)
 8000f42:	6013      	str	r3, [r2, #0]
	Fapb2tclk = HAL_RCC_GetPCLK2Freq() * 2;
 8000f44:	f005 fd14 	bl	8006970 <HAL_RCC_GetPCLK2Freq>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4a50      	ldr	r2, [pc, #320]	; (8001090 <StartupSequence+0x168>)
 8000f4e:	6013      	str	r3, [r2, #0]
	RPMConst = (Fapb2tclk / (TIM9->PSC + 1));
 8000f50:	4b4f      	ldr	r3, [pc, #316]	; (8001090 <StartupSequence+0x168>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b4f      	ldr	r3, [pc, #316]	; (8001094 <StartupSequence+0x16c>)
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	3301      	adds	r3, #1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4a4e      	ldr	r2, [pc, #312]	; (8001098 <StartupSequence+0x170>)
 8000f60:	6013      	str	r3, [r2, #0]

	// Set first commutation state according to Hall sensors
	if (PrepareCommutation (Direction) == HAL_ERROR) {
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ffa5 	bl	8000eb4 <PrepareCommutation>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <StartupSequence+0x4c>
		return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e084      	b.n	800107e <StartupSequence+0x156>
	}

	// Start HallSensor timer
	HAL_TIMEx_HallSensor_Start (&htim2);
 8000f74:	4849      	ldr	r0, [pc, #292]	; (800109c <StartupSequence+0x174>)
 8000f76:	f007 f9e1 	bl	800833c <HAL_TIMEx_HallSensor_Start>

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4848      	ldr	r0, [pc, #288]	; (80010a0 <StartupSequence+0x178>)
 8000f7e:	f005 fecd 	bl	8006d1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 8000f82:	2104      	movs	r1, #4
 8000f84:	4846      	ldr	r0, [pc, #280]	; (80010a0 <StartupSequence+0x178>)
 8000f86:	f005 fec9 	bl	8006d1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 8000f8a:	2108      	movs	r1, #8
 8000f8c:	4844      	ldr	r0, [pc, #272]	; (80010a0 <StartupSequence+0x178>)
 8000f8e:	f005 fec5 	bl	8006d1c <HAL_TIM_PWM_Start>

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 8000f92:	4b44      	ldr	r3, [pc, #272]	; (80010a4 <StartupSequence+0x17c>)
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	4a43      	ldr	r2, [pc, #268]	; (80010a4 <StartupSequence+0x17c>)
 8000f98:	f023 0320 	bic.w	r3, r3, #32
 8000f9c:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 8000f9e:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <StartupSequence+0x17c>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	4a40      	ldr	r2, [pc, #256]	; (80010a4 <StartupSequence+0x17c>)
 8000fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fa8:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8000faa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fb8:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8000fba:	4b36      	ldr	r3, [pc, #216]	; (8001094 <StartupSequence+0x16c>)
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	4a35      	ldr	r2, [pc, #212]	; (8001094 <StartupSequence+0x16c>)
 8000fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fc4:	60d3      	str	r3, [r2, #12]

	// Start Interrupts
	HAL_TIM_Base_Start_IT (&htim1);
 8000fc6:	4836      	ldr	r0, [pc, #216]	; (80010a0 <StartupSequence+0x178>)
 8000fc8:	f005 fdbe 	bl	8006b48 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim2);
 8000fcc:	4833      	ldr	r0, [pc, #204]	; (800109c <StartupSequence+0x174>)
 8000fce:	f005 fdbb 	bl	8006b48 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim9);
 8000fd2:	4835      	ldr	r0, [pc, #212]	; (80010a8 <StartupSequence+0x180>)
 8000fd4:	f005 fdb8 	bl	8006b48 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT (&htim9, TIM_CHANNEL_2);
 8000fd8:	2104      	movs	r1, #4
 8000fda:	4833      	ldr	r0, [pc, #204]	; (80010a8 <StartupSequence+0x180>)
 8000fdc:	f006 f802 	bl	8006fe4 <HAL_TIM_IC_Start_IT>

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 8000fe0:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <StartupSequence+0x17c>)
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	4a2f      	ldr	r2, [pc, #188]	; (80010a4 <StartupSequence+0x17c>)
 8000fe6:	f023 0320 	bic.w	r3, r3, #32
 8000fea:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 8000fec:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <StartupSequence+0x17c>)
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	4a2c      	ldr	r2, [pc, #176]	; (80010a4 <StartupSequence+0x17c>)
 8000ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ff6:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 8000ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001006:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <StartupSequence+0x16c>)
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <StartupSequence+0x16c>)
 800100e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001012:	6113      	str	r3, [r2, #16]

	// Enable interrupts
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <StartupSequence+0x17c>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	4a22      	ldr	r2, [pc, #136]	; (80010a4 <StartupSequence+0x17c>)
 800101a:	f043 0320 	orr.w	r3, r3, #32
 800101e:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 8001020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800102a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800102e:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <StartupSequence+0x16c>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	4a17      	ldr	r2, [pc, #92]	; (8001094 <StartupSequence+0x16c>)
 8001036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800103a:	60d3      	str	r3, [r2, #12]

	// Write some registers
	TIM1->CR2  |= TIM_CR2_CCPC; 	// Set CCPC in CR2 to preload CCxE, CCxNE and OCxM bits
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <StartupSequence+0x17c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <StartupSequence+0x17c>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6053      	str	r3, [r2, #4]
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <StartupSequence+0x17c>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	4a15      	ldr	r2, [pc, #84]	; (80010a4 <StartupSequence+0x17c>)
 800104e:	f043 0320 	orr.w	r3, r3, #32
 8001052:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <StartupSequence+0x17c>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <StartupSequence+0x17c>)
 800105a:	f043 0320 	orr.w	r3, r3, #32
 800105e:	60d3      	str	r3, [r2, #12]
	TIM1->BDTR &= ~TIM_BDTR_DTG;	// Reset DTG bits
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <StartupSequence+0x17c>)
 8001062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001064:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <StartupSequence+0x17c>)
 8001066:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800106a:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= 0x800A;			// Set dead-time to 100ns and make sure to enable MOE bit
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <StartupSequence+0x17c>)
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <StartupSequence+0x17c>)
 8001072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001076:	f043 030a 	orr.w	r3, r3, #10
 800107a:	6453      	str	r3, [r2, #68]	; 0x44

	return HAL_OK;
 800107c:	2300      	movs	r3, #0

}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000034c 	.word	0x2000034c
 800108c:	20000534 	.word	0x20000534
 8001090:	20000538 	.word	0x20000538
 8001094:	40014000 	.word	0x40014000
 8001098:	2000053c 	.word	0x2000053c
 800109c:	20000440 	.word	0x20000440
 80010a0:	200003f8 	.word	0x200003f8
 80010a4:	40010000 	.word	0x40010000
 80010a8:	20000488 	.word	0x20000488

080010ac <StopSequence>:

HAL_StatusTypeDef StopSequence() {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

	// Stop HallSensor timer
	HAL_TIMEx_HallSensor_Stop (&htim2);
 80010b0:	481e      	ldr	r0, [pc, #120]	; (800112c <StopSequence+0x80>)
 80010b2:	f007 f9c3 	bl	800843c <HAL_TIMEx_HallSensor_Stop>

	// Disable all output channels
	TIM1->CCER  = 0x0000;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <StopSequence+0x84>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = 0x0000;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <StopSequence+0x84>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = 0x0000;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <StopSequence+0x84>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	61da      	str	r2, [r3, #28]

	// Disable commutation events if not already disabled
	if ( (TIM1->DIER & TIM_DIER_COMIE) >= 1 ) { 	// If COMIE bit in DIER is set commutation events are still enabled
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <StopSequence+0x84>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <StopSequence+0x40>

		TIM1->EGR |= TIM_EGR_COMG; 							// Trigger commutation event
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <StopSequence+0x84>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	4a15      	ldr	r2, [pc, #84]	; (8001130 <StopSequence+0x84>)
 80010da:	f043 0320 	orr.w	r3, r3, #32
 80010de:	6153      	str	r3, [r2, #20]
		// while ( (TIM1->SR & TIM_SR_COMIF) >= 1 ); 	// Wait until commutation event has happened
		TIM1->DIER &= ~TIM_DIER_COMIE; 						// Disable commutation events in DIER register
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <StopSequence+0x84>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	4a12      	ldr	r2, [pc, #72]	; (8001130 <StopSequence+0x84>)
 80010e6:	f023 0320 	bic.w	r3, r3, #32
 80010ea:	60d3      	str	r3, [r2, #12]

	}

	// Stop interrupts
	HAL_TIM_Base_Stop_IT (&htim1);
 80010ec:	4811      	ldr	r0, [pc, #68]	; (8001134 <StopSequence+0x88>)
 80010ee:	f005 fd8d 	bl	8006c0c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim2);
 80010f2:	480e      	ldr	r0, [pc, #56]	; (800112c <StopSequence+0x80>)
 80010f4:	f005 fd8a 	bl	8006c0c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim9);
 80010f8:	480f      	ldr	r0, [pc, #60]	; (8001138 <StopSequence+0x8c>)
 80010fa:	f005 fd87 	bl	8006c0c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT (&htim9, TIM_CHANNEL_2);
 80010fe:	2104      	movs	r1, #4
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <StopSequence+0x8c>)
 8001102:	f006 f889 	bl	8007218 <HAL_TIM_IC_Stop_IT>

	// Stop PWM Timers
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_1);
 8001106:	2100      	movs	r1, #0
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <StopSequence+0x88>)
 800110a:	f005 feb7 	bl	8006e7c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_2);
 800110e:	2104      	movs	r1, #4
 8001110:	4808      	ldr	r0, [pc, #32]	; (8001134 <StopSequence+0x88>)
 8001112:	f005 feb3 	bl	8006e7c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_3);
 8001116:	2108      	movs	r1, #8
 8001118:	4806      	ldr	r0, [pc, #24]	; (8001134 <StopSequence+0x88>)
 800111a:	f005 feaf 	bl	8006e7c <HAL_TIM_PWM_Stop>

	Registers[RPMReg] = 0;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <StopSequence+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	80da      	strh	r2, [r3, #6]

	return HAL_OK;
 8001124:	2300      	movs	r3, #0

}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000440 	.word	0x20000440
 8001130:	40010000 	.word	0x40010000
 8001134:	200003f8 	.word	0x200003f8
 8001138:	20000488 	.word	0x20000488
 800113c:	20000514 	.word	0x20000514

08001140 <ProcessData>:

void ProcessData (void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

	StartReg = RxData[0]; 			// Start address of registers to be written
 8001146:	4b38      	ldr	r3, [pc, #224]	; (8001228 <ProcessData+0xe8>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4b37      	ldr	r3, [pc, #220]	; (800122c <ProcessData+0xec>)
 800114e:	601a      	str	r2, [r3, #0]
	NumReg = RxCount - 1; 			// Number of registers to be written
 8001150:	4b37      	ldr	r3, [pc, #220]	; (8001230 <ProcessData+0xf0>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	4a37      	ldr	r2, [pc, #220]	; (8001234 <ProcessData+0xf4>)
 8001158:	6013      	str	r3, [r2, #0]
	EndReg = StartReg + NumReg - 1; // Last register to be written
 800115a:	4b34      	ldr	r3, [pc, #208]	; (800122c <ProcessData+0xec>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b35      	ldr	r3, [pc, #212]	; (8001234 <ProcessData+0xf4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	3b01      	subs	r3, #1
 8001166:	4a34      	ldr	r2, [pc, #208]	; (8001238 <ProcessData+0xf8>)
 8001168:	6013      	str	r3, [r2, #0]
	if (EndReg > RxSize) {
		//Error_Handler();
	}

	// Write data into the register using a for loop
	for (int i = 1; i < NumReg + 1; i++) {
 800116a:	2301      	movs	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	e00f      	b.n	8001190 <ProcessData+0x50>
		Registers[StartReg++] = RxData[i + 1];
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	4a2c      	ldr	r2, [pc, #176]	; (8001228 <ProcessData+0xe8>)
 8001176:	5cd0      	ldrb	r0, [r2, r3]
 8001178:	4b2c      	ldr	r3, [pc, #176]	; (800122c <ProcessData+0xec>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	1c5a      	adds	r2, r3, #1
 800117e:	492b      	ldr	r1, [pc, #172]	; (800122c <ProcessData+0xec>)
 8001180:	600a      	str	r2, [r1, #0]
 8001182:	b281      	uxth	r1, r0
 8001184:	4a2d      	ldr	r2, [pc, #180]	; (800123c <ProcessData+0xfc>)
 8001186:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 1; i < NumReg + 1; i++) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3301      	adds	r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <ProcessData+0xf4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	429a      	cmp	r2, r3
 8001198:	ddea      	ble.n	8001170 <ProcessData+0x30>
	}

	// If the PWM is higher than 0 but the motor is not turning then startup
	if ( Registers[PWMReg] > 0 && Registers[RPMReg] <= 0) {
 800119a:	4b28      	ldr	r3, [pc, #160]	; (800123c <ProcessData+0xfc>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d009      	beq.n	80011b6 <ProcessData+0x76>
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <ProcessData+0xfc>)
 80011a4:	88db      	ldrh	r3, [r3, #6]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d105      	bne.n	80011b6 <ProcessData+0x76>
		StartupSequence(Registers[DirReg]);
 80011aa:	4b24      	ldr	r3, [pc, #144]	; (800123c <ProcessData+0xfc>)
 80011ac:	885b      	ldrh	r3, [r3, #2]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff feb9 	bl	8000f28 <StartupSequence>
	}

	// If the PWM is 0 or negative but the motor is still turning shutdown
	if ( Registers[PWMReg] <= 0 && Registers[RPMReg] > 0 ) {
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <ProcessData+0xfc>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <ProcessData+0x8a>
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <ProcessData+0xfc>)
 80011c0:	88db      	ldrh	r3, [r3, #6]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <ProcessData+0x8a>
		StopSequence();
 80011c6:	f7ff ff71 	bl	80010ac <StopSequence>
	}

	// Update PWM values
	if ( Registers[PWMReg] >= 0 ) {

		uint32_t PWM = (Registers[PWMReg] * TIM1->ARR) / 100; // Calculate required CCRx value
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <ProcessData+0xfc>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <ProcessData+0x100>)
 80011d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	4a1a      	ldr	r2, [pc, #104]	; (8001244 <ProcessData+0x104>)
 80011da:	fba2 2303 	umull	r2, r3, r2, r3
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	603b      	str	r3, [r7, #0]

		if (PWM >= TIM1->ARR - 60) {
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <ProcessData+0x100>)
 80011e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e6:	3b3c      	subs	r3, #60	; 0x3c
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d303      	bcc.n	80011f6 <ProcessData+0xb6>
			PWM = TIM1->ARR - 60;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <ProcessData+0x100>)
 80011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f2:	3b3c      	subs	r3, #60	; 0x3c
 80011f4:	603b      	str	r3, [r7, #0]
		}

		TIM1->CR1 |= TIM_CR1_UDIS; 	// Disable Update Events
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <ProcessData+0x100>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a11      	ldr	r2, [pc, #68]	; (8001240 <ProcessData+0x100>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6013      	str	r3, [r2, #0]
		TIM1->CCR1 = PWM;	  		// Set new PWM for channel 1
 8001202:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <ProcessData+0x100>)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = PWM;	  		// Set new PWM for channel 2
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <ProcessData+0x100>)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = PWM;	  		// Set new PWM for channel 3
 800120e:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <ProcessData+0x100>)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM1->CR1 &= ~TIM_CR1_UDIS; // Enable Update Events
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <ProcessData+0x100>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a09      	ldr	r2, [pc, #36]	; (8001240 <ProcessData+0x100>)
 800121a:	f023 0302 	bic.w	r3, r3, #2
 800121e:	6013      	str	r3, [r2, #0]

	}

}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2000052c 	.word	0x2000052c
 800122c:	2000051c 	.word	0x2000051c
 8001230:	20000529 	.word	0x20000529
 8001234:	20000520 	.word	0x20000520
 8001238:	20000524 	.word	0x20000524
 800123c:	20000514 	.word	0x20000514
 8001240:	40010000 	.word	0x40010000
 8001244:	51eb851f 	.word	0x51eb851f

08001248 <HAL_I2C_ListenCpltCallback>:

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

	HAL_I2C_EnableListen_IT (hi2c);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f002 f80d 	bl	8003270 <HAL_I2C_EnableListen_IT>

}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback (I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
 800126c:	4613      	mov	r3, r2
 800126e:	803b      	strh	r3, [r7, #0]

	if ( TransferDirection == I2C_DIRECTION_TRANSMIT ) { // If the master wants to transmit the data
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d112      	bne.n	800129c <HAL_I2C_AddrCallback+0x3c>

		RxCount = 0;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_I2C_AddrCallback+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
		memset(RxData, 0, RxSize); // Empty the RxData array
 800127c:	2206      	movs	r2, #6
 800127e:	2100      	movs	r1, #0
 8001280:	4815      	ldr	r0, [pc, #84]	; (80012d8 <HAL_I2C_AddrCallback+0x78>)
 8001282:	f00c face 	bl	800d822 <memset>
		HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_FIRST_FRAME);
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_I2C_AddrCallback+0x74>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_I2C_AddrCallback+0x78>)
 800128e:	18d1      	adds	r1, r2, r3
 8001290:	2301      	movs	r3, #1
 8001292:	2201      	movs	r2, #1
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f001 ff78 	bl	800318a <HAL_I2C_Slave_Seq_Receive_IT>
		TxCount = 0;
		StartReg = RxData[0];
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, Registers[TxCount + StartReg], 1, I2C_FIRST_FRAME);

	}
}
 800129a:	e016      	b.n	80012ca <HAL_I2C_AddrCallback+0x6a>
		TxCount = 0;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_I2C_AddrCallback+0x7c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
		StartReg = RxData[0];
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_I2C_AddrCallback+0x78>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_I2C_AddrCallback+0x80>)
 80012aa:	601a      	str	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, Registers[TxCount + StartReg], 1, I2C_FIRST_FRAME);
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_I2C_AddrCallback+0x7c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_I2C_AddrCallback+0x80>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <HAL_I2C_AddrCallback+0x84>)
 80012ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012be:	4619      	mov	r1, r3
 80012c0:	2301      	movs	r3, #1
 80012c2:	2201      	movs	r2, #1
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f001 feed 	bl	80030a4 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000529 	.word	0x20000529
 80012d8:	2000052c 	.word	0x2000052c
 80012dc:	20000528 	.word	0x20000528
 80012e0:	2000051c 	.word	0x2000051c
 80012e4:	20000514 	.word	0x20000514

080012e8 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback (I2C_HandleTypeDef *hi2c) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

	TxCount++;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_I2C_SlaveTxCpltCallback+0x3c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_I2C_SlaveTxCpltCallback+0x3c>)
 80012fa:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT (hi2c, Registers[TxCount + StartReg], 1, I2C_NEXT_FRAME);
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_I2C_SlaveTxCpltCallback+0x3c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <HAL_I2C_SlaveTxCpltCallback+0x40>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_I2C_SlaveTxCpltCallback+0x44>)
 800130a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800130e:	4619      	mov	r1, r3
 8001310:	2304      	movs	r3, #4
 8001312:	2201      	movs	r2, #1
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f001 fec5 	bl	80030a4 <HAL_I2C_Slave_Seq_Transmit_IT>

}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000528 	.word	0x20000528
 8001328:	2000051c 	.word	0x2000051c
 800132c:	20000514 	.word	0x20000514

08001330 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef *hi2c) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

	RxCount++;
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8001342:	701a      	strb	r2, [r3, #0]

	if ( RxCount < RxSize ) {
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b05      	cmp	r3, #5
 800134a:	d818      	bhi.n	800137e <HAL_I2C_SlaveRxCpltCallback+0x4e>

		if (RxCount == RxSize - 1) {
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b05      	cmp	r3, #5
 8001352:	d10a      	bne.n	800136a <HAL_I2C_SlaveRxCpltCallback+0x3a>
			HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_LAST_FRAME);
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800135c:	18d1      	adds	r1, r2, r3
 800135e:	2320      	movs	r3, #32
 8001360:	2201      	movs	r2, #1
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f001 ff11 	bl	800318a <HAL_I2C_Slave_Seq_Receive_IT>
 8001368:	e009      	b.n	800137e <HAL_I2C_SlaveRxCpltCallback+0x4e>
		} else {
			HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_NEXT_FRAME);
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001372:	18d1      	adds	r1, r2, r3
 8001374:	2304      	movs	r3, #4
 8001376:	2201      	movs	r2, #1
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f001 ff06 	bl	800318a <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if ( RxCount == RxSize) {
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b06      	cmp	r3, #6
 8001384:	d101      	bne.n	800138a <HAL_I2C_SlaveRxCpltCallback+0x5a>
		ProcessData();
 8001386:	f7ff fedb 	bl	8001140 <ProcessData>
	}

}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000529 	.word	0x20000529
 8001398:	2000052c 	.word	0x2000052c

0800139c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback (I2C_HandleTypeDef *hi2c) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

	if ( HAL_I2C_GetError (hi2c) == 4) {
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f002 f9bd 	bl	8003724 <HAL_I2C_GetError>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d111      	bne.n	80013d4 <HAL_I2C_ErrorCallback+0x38>

		__HAL_I2C_CLEAR_FLAG (hi2c, I2C_FLAG_AF); 	// Clear AF flag
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013b8:	615a      	str	r2, [r3, #20]

		if ( TxCount == 0) { 						// Error while recieving
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_I2C_ErrorCallback+0x48>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <HAL_I2C_ErrorCallback+0x2c>
			ProcessData();
 80013c2:	f7ff febd 	bl	8001140 <ProcessData>
 80013c6:	e005      	b.n	80013d4 <HAL_I2C_ErrorCallback+0x38>
		} else { 									// Error while transmitting
			TxCount--;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_I2C_ErrorCallback+0x48>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_I2C_ErrorCallback+0x48>)
 80013d2:	701a      	strb	r2, [r3, #0]
		}

	}

	HAL_I2C_EnableListen_IT(hi2c);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f001 ff4b 	bl	8003270 <HAL_I2C_EnableListen_IT>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000528 	.word	0x20000528

080013e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ec:	f000 ff48 	bl	8002280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f0:	f000 f81c 	bl	800142c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f4:	f000 faa8 	bl	8001948 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013f8:	f000 f882 	bl	8001500 <MX_ADC1_Init>
  MX_TIM1_Init();
 80013fc:	f000 f936 	bl	800166c <MX_TIM1_Init>
  MX_SPI1_Init();
 8001400:	f000 f8fe 	bl	8001600 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001404:	f000 f9ec 	bl	80017e0 <MX_TIM2_Init>
  MX_TIM9_Init();
 8001408:	f000 fa34 	bl	8001874 <MX_TIM9_Init>
  MX_I2C1_Init();
 800140c:	f000 f8ca 	bl	80015a4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001410:	f00a ffb2 	bl	800c378 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8001414:	f000 fa6e 	bl	80018f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	StartupSequence (Registers[DirReg]);
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <main+0x40>)
 800141a:	885b      	ldrh	r3, [r3, #2]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fd82 	bl	8000f28 <StartupSequence>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001424:	e7fe      	b.n	8001424 <main+0x3c>
 8001426:	bf00      	nop
 8001428:	20000514 	.word	0x20000514

0800142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b094      	sub	sp, #80	; 0x50
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 0320 	add.w	r3, r7, #32
 8001436:	2230      	movs	r2, #48	; 0x30
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f00c f9f1 	bl	800d822 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <SystemClock_Config+0xcc>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	4a27      	ldr	r2, [pc, #156]	; (80014f8 <SystemClock_Config+0xcc>)
 800145a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145e:	6413      	str	r3, [r2, #64]	; 0x40
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <SystemClock_Config+0xcc>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <SystemClock_Config+0xd0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <SystemClock_Config+0xd0>)
 8001476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <SystemClock_Config+0xd0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001488:	2301      	movs	r3, #1
 800148a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800148c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001492:	2302      	movs	r3, #2
 8001494:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001496:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800149c:	2319      	movs	r3, #25
 800149e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80014a0:	23c0      	movs	r3, #192	; 0xc0
 80014a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014a8:	2304      	movs	r3, #4
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 fe19 	bl	80060e8 <HAL_RCC_OscConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014bc:	f000 fa7a 	bl	80019b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c0:	230f      	movs	r3, #15
 80014c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c4:	2302      	movs	r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2103      	movs	r1, #3
 80014de:	4618      	mov	r0, r3
 80014e0:	f005 f87a 	bl	80065d8 <HAL_RCC_ClockConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014ea:	f000 fa63 	bl	80019b4 <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	3750      	adds	r7, #80	; 0x50
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40007000 	.word	0x40007000

08001500 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001506:	463b      	mov	r3, r7
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <MX_ADC1_Init+0x98>)
 8001514:	4a21      	ldr	r2, [pc, #132]	; (800159c <MX_ADC1_Init+0x9c>)
 8001516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <MX_ADC1_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <MX_ADC1_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <MX_ADC1_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MX_ADC1_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_ADC1_Init+0x98>)
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <MX_ADC1_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <MX_ADC1_Init+0x98>)
 8001540:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <MX_ADC1_Init+0xa0>)
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_ADC1_Init+0x98>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <MX_ADC1_Init+0x98>)
 800154c:	2201      	movs	r2, #1
 800154e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_ADC1_Init+0x98>)
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_ADC1_Init+0x98>)
 800155a:	2201      	movs	r2, #1
 800155c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800155e:	480e      	ldr	r0, [pc, #56]	; (8001598 <MX_ADC1_Init+0x98>)
 8001560:	f000 ff24 	bl	80023ac <HAL_ADC_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800156a:	f000 fa23 	bl	80019b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800156e:	2304      	movs	r3, #4
 8001570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001572:	2301      	movs	r3, #1
 8001574:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157a:	463b      	mov	r3, r7
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_ADC1_Init+0x98>)
 8001580:	f000 ff58 	bl	8002434 <HAL_ADC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800158a:	f000 fa13 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000304 	.word	0x20000304
 800159c:	40012000 	.word	0x40012000
 80015a0:	0f000001 	.word	0x0f000001

080015a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015aa:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <MX_I2C1_Init+0x54>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <MX_I2C1_Init+0x58>)
 80015b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015bc:	2220      	movs	r2, #32
 80015be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_I2C1_Init+0x50>)
 80015e2:	f001 fc1b 	bl	8002e1c <HAL_I2C_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015ec:	f000 f9e2 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000034c 	.word	0x2000034c
 80015f8:	40005400 	.word	0x40005400
 80015fc:	000186a0 	.word	0x000186a0

08001600 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_SPI1_Init+0x64>)
 8001606:	4a18      	ldr	r2, [pc, #96]	; (8001668 <MX_SPI1_Init+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_SPI1_Init+0x64>)
 800160c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001610:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_SPI1_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_SPI1_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_SPI1_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_SPI1_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_SPI1_Init+0x64>)
 800162c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001630:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_SPI1_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <MX_SPI1_Init+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_SPI1_Init+0x64>)
 8001640:	2200      	movs	r2, #0
 8001642:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <MX_SPI1_Init+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_SPI1_Init+0x64>)
 800164c:	220a      	movs	r2, #10
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_SPI1_Init+0x64>)
 8001652:	f005 f9a1 	bl	8006998 <HAL_SPI_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800165c:	f000 f9aa 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200003a0 	.word	0x200003a0
 8001668:	40013000 	.word	0x40013000

0800166c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b096      	sub	sp, #88	; 0x58
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001672:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001682:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168c:	f107 0320 	add.w	r3, r7, #32
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	615a      	str	r2, [r3, #20]
 800169e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016a0:	463b      	mov	r3, r7
 80016a2:	2220      	movs	r2, #32
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f00c f8bb 	bl	800d822 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016ac:	4b4a      	ldr	r3, [pc, #296]	; (80017d8 <MX_TIM1_Init+0x16c>)
 80016ae:	4a4b      	ldr	r2, [pc, #300]	; (80017dc <MX_TIM1_Init+0x170>)
 80016b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016b2:	4b49      	ldr	r3, [pc, #292]	; (80017d8 <MX_TIM1_Init+0x16c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <MX_TIM1_Init+0x16c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 80016be:	4b46      	ldr	r3, [pc, #280]	; (80017d8 <MX_TIM1_Init+0x16c>)
 80016c0:	f240 727f 	movw	r2, #1919	; 0x77f
 80016c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c6:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <MX_TIM1_Init+0x16c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016cc:	4b42      	ldr	r3, [pc, #264]	; (80017d8 <MX_TIM1_Init+0x16c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <MX_TIM1_Init+0x16c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016d8:	483f      	ldr	r0, [pc, #252]	; (80017d8 <MX_TIM1_Init+0x16c>)
 80016da:	f005 f9e6 	bl	8006aaa <HAL_TIM_Base_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016e4:	f000 f966 	bl	80019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016e8:	483b      	ldr	r0, [pc, #236]	; (80017d8 <MX_TIM1_Init+0x16c>)
 80016ea:	f005 fabe 	bl	8006c6a <HAL_TIM_PWM_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80016f4:	f000 f95e 	bl	80019b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80016f8:	2304      	movs	r3, #4
 80016fa:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001700:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001704:	4619      	mov	r1, r3
 8001706:	4834      	ldr	r0, [pc, #208]	; (80017d8 <MX_TIM1_Init+0x16c>)
 8001708:	f006 f89a 	bl	8007840 <HAL_TIM_SlaveConfigSynchro>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001712:	f000 f94f 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800171e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001722:	4619      	mov	r1, r3
 8001724:	482c      	ldr	r0, [pc, #176]	; (80017d8 <MX_TIM1_Init+0x16c>)
 8001726:	f006 fec1 	bl	80084ac <HAL_TIMEx_MasterConfigSynchronization>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001730:	f000 f940 	bl	80019b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001734:	2360      	movs	r3, #96	; 0x60
 8001736:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	2200      	movs	r2, #0
 8001756:	4619      	mov	r1, r3
 8001758:	481f      	ldr	r0, [pc, #124]	; (80017d8 <MX_TIM1_Init+0x16c>)
 800175a:	f005 ffaf 	bl	80076bc <HAL_TIM_PWM_ConfigChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001764:	f000 f926 	bl	80019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001768:	f107 0320 	add.w	r3, r7, #32
 800176c:	2204      	movs	r2, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4819      	ldr	r0, [pc, #100]	; (80017d8 <MX_TIM1_Init+0x16c>)
 8001772:	f005 ffa3 	bl	80076bc <HAL_TIM_PWM_ConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800177c:	f000 f91a 	bl	80019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	2208      	movs	r2, #8
 8001786:	4619      	mov	r1, r3
 8001788:	4813      	ldr	r0, [pc, #76]	; (80017d8 <MX_TIM1_Init+0x16c>)
 800178a:	f005 ff97 	bl	80076bc <HAL_TIM_PWM_ConfigChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001794:	f000 f90e 	bl	80019b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017b6:	463b      	mov	r3, r7
 80017b8:	4619      	mov	r1, r3
 80017ba:	4807      	ldr	r0, [pc, #28]	; (80017d8 <MX_TIM1_Init+0x16c>)
 80017bc:	f006 fee4 	bl	8008588 <HAL_TIMEx_ConfigBreakDeadTime>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 80017c6:	f000 f8f5 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017ca:	4803      	ldr	r0, [pc, #12]	; (80017d8 <MX_TIM1_Init+0x16c>)
 80017cc:	f000 faf2 	bl	8001db4 <HAL_TIM_MspPostInit>

}
 80017d0:	bf00      	nop
 80017d2:	3758      	adds	r7, #88	; 0x58
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200003f8 	.word	0x200003f8
 80017dc:	40010000 	.word	0x40010000

080017e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	463b      	mov	r3, r7
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <MX_TIM2_Init+0x90>)
 80017fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001802:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <MX_TIM2_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <MX_TIM2_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <MX_TIM2_Init+0x90>)
 8001812:	f04f 32ff 	mov.w	r2, #4294967295
 8001816:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <MX_TIM2_Init+0x90>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_TIM2_Init+0x90>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4619      	mov	r1, r3
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_TIM2_Init+0x90>)
 800183c:	f006 fcd4 	bl	80081e8 <HAL_TIMEx_HallSensor_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001846:	f000 f8b5 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800184a:	2350      	movs	r3, #80	; 0x50
 800184c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001852:	463b      	mov	r3, r7
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <MX_TIM2_Init+0x90>)
 8001858:	f006 fe28 	bl	80084ac <HAL_TIMEx_MasterConfigSynchronization>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001862:	f000 f8a7 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000440 	.word	0x20000440

08001874 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800187a:	463b      	mov	r3, r7
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <MX_TIM9_Init+0x78>)
 8001888:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <MX_TIM9_Init+0x7c>)
 800188a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1499;
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_TIM9_Init+0x78>)
 800188e:	f240 52db 	movw	r2, #1499	; 0x5db
 8001892:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <MX_TIM9_Init+0x78>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 63999;
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_TIM9_Init+0x78>)
 800189c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80018a0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_TIM9_Init+0x78>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_TIM9_Init+0x78>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80018ae:	480f      	ldr	r0, [pc, #60]	; (80018ec <MX_TIM9_Init+0x78>)
 80018b0:	f005 fb48 	bl	8006f44 <HAL_TIM_IC_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80018ba:	f000 f87b 	bl	80019b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018be:	2300      	movs	r3, #0
 80018c0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018c2:	2301      	movs	r3, #1
 80018c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 80018ca:	2302      	movs	r3, #2
 80018cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80018ce:	463b      	mov	r3, r7
 80018d0:	2204      	movs	r2, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_TIM9_Init+0x78>)
 80018d6:	f005 fe55 	bl	8007584 <HAL_TIM_IC_ConfigChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 80018e0:	f000 f868 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000488 	.word	0x20000488
 80018f0:	40014000 	.word	0x40014000

080018f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <MX_USART1_UART_Init+0x50>)
 80018fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001904:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 800192c:	f006 fe92 	bl	8008654 <HAL_UART_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001936:	f000 f83d 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200004d0 	.word	0x200004d0
 8001944:	40011000 	.word	0x40011000

08001948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <MX_GPIO_Init+0x68>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a16      	ldr	r2, [pc, #88]	; (80019b0 <MX_GPIO_Init+0x68>)
 8001958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_GPIO_Init+0x68>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_GPIO_Init+0x68>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <MX_GPIO_Init+0x68>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <MX_GPIO_Init+0x68>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_GPIO_Init+0x68>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a08      	ldr	r2, [pc, #32]	; (80019b0 <MX_GPIO_Init+0x68>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_GPIO_Init+0x68>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019bc:	e7fe      	b.n	80019bc <Error_Handler+0x8>
	...

080019c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_MspInit+0x4c>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <HAL_MspInit+0x4c>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_MspInit+0x4c>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_MspInit+0x4c>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <HAL_MspInit+0x4c>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_MspInit+0x4c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800

08001a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <HAL_ADC_MspInit+0x7c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d127      	bne.n	8001a82 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a6a:	2310      	movs	r3, #16
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <HAL_ADC_MspInit+0x84>)
 8001a7e:	f001 f849 	bl	8002b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3728      	adds	r7, #40	; 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40012000 	.word	0x40012000
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020000 	.word	0x40020000

08001a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a21      	ldr	r2, [pc, #132]	; (8001b3c <HAL_I2C_MspInit+0xa4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d13b      	bne.n	8001b32 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_I2C_MspInit+0xa8>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a1f      	ldr	r2, [pc, #124]	; (8001b40 <HAL_I2C_MspInit+0xa8>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_I2C_MspInit+0xa8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ad6:	23c0      	movs	r3, #192	; 0xc0
 8001ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ada:	2312      	movs	r3, #18
 8001adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	4814      	ldr	r0, [pc, #80]	; (8001b44 <HAL_I2C_MspInit+0xac>)
 8001af2:	f001 f80f 	bl	8002b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_I2C_MspInit+0xa8>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <HAL_I2C_MspInit+0xa8>)
 8001b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_I2C_MspInit+0xa8>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	201f      	movs	r0, #31
 8001b18:	f000 ff95 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b1c:	201f      	movs	r0, #31
 8001b1e:	f000 ffae 	bl	8002a7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	2020      	movs	r0, #32
 8001b28:	f000 ff8d 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b2c:	2020      	movs	r0, #32
 8001b2e:	f000 ffa6 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b32:	bf00      	nop
 8001b34:	3728      	adds	r7, #40	; 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40005400 	.word	0x40005400
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020400 	.word	0x40020400

08001b48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a28      	ldr	r2, [pc, #160]	; (8001c08 <HAL_SPI_MspInit+0xc0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d149      	bne.n	8001bfe <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b78:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <HAL_SPI_MspInit+0xc4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001bbe:	2360      	movs	r3, #96	; 0x60
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bce:	2305      	movs	r3, #5
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480d      	ldr	r0, [pc, #52]	; (8001c10 <HAL_SPI_MspInit+0xc8>)
 8001bda:	f000 ff9b 	bl	8002b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bde:	2320      	movs	r3, #32
 8001be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	2303      	movs	r3, #3
 8001bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bee:	2305      	movs	r3, #5
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4806      	ldr	r0, [pc, #24]	; (8001c14 <HAL_SPI_MspInit+0xcc>)
 8001bfa:	f000 ff8b 	bl	8002b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40013000 	.word	0x40013000
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40020400 	.word	0x40020400

08001c18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <HAL_TIM_Base_MspInit+0x58>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d11d      	bne.n	8001c66 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_TIM_Base_MspInit+0x5c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <HAL_TIM_Base_MspInit+0x5c>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_TIM_Base_MspInit+0x5c>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2018      	movs	r0, #24
 8001c4c:	f000 fefb 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001c50:	2018      	movs	r0, #24
 8001c52:	f000 ff14 	bl	8002a7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	201a      	movs	r0, #26
 8001c5c:	f000 fef3 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c60:	201a      	movs	r0, #26
 8001c62:	f000 ff0c 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40010000 	.word	0x40010000
 8001c74:	40023800 	.word	0x40023800

08001c78 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c98:	d133      	bne.n	8001d02 <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001cd2:	2307      	movs	r3, #7
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	4808      	ldr	r0, [pc, #32]	; (8001d10 <HAL_TIMEx_HallSensor_MspInit+0x98>)
 8001cee:	f000 ff11 	bl	8002b14 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	201c      	movs	r0, #28
 8001cf8:	f000 fea5 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cfc:	201c      	movs	r0, #28
 8001cfe:	f000 febe 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000

08001d14 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM9)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <HAL_TIM_IC_MspInit+0x94>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d133      	bne.n	8001d9e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <HAL_TIM_IC_MspInit+0x98>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	; (8001dac <HAL_TIM_IC_MspInit+0x98>)
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_TIM_IC_MspInit+0x98>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_TIM_IC_MspInit+0x98>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a14      	ldr	r2, [pc, #80]	; (8001dac <HAL_TIM_IC_MspInit+0x98>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_TIM_IC_MspInit+0x98>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PA3     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d6e:	2308      	movs	r3, #8
 8001d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	4809      	ldr	r0, [pc, #36]	; (8001db0 <HAL_TIM_IC_MspInit+0x9c>)
 8001d8a:	f000 fec3 	bl	8002b14 <HAL_GPIO_Init>

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	2018      	movs	r0, #24
 8001d94:	f000 fe57 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001d98:	2018      	movs	r0, #24
 8001d9a:	f000 fe70 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40014000 	.word	0x40014000
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020000 	.word	0x40020000

08001db4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_TIM_MspPostInit+0xa8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d13d      	bne.n	8001e52 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_TIM_MspPostInit+0xac>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a20      	ldr	r2, [pc, #128]	; (8001e60 <HAL_TIM_MspPostInit+0xac>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_TIM_MspPostInit+0xac>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_TIM_MspPostInit+0xac>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <HAL_TIM_MspPostInit+0xac>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_TIM_MspPostInit+0xac>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e0e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e20:	2301      	movs	r3, #1
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480e      	ldr	r0, [pc, #56]	; (8001e64 <HAL_TIM_MspPostInit+0xb0>)
 8001e2c:	f000 fe72 	bl	8002b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001e30:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e42:	2301      	movs	r3, #1
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4806      	ldr	r0, [pc, #24]	; (8001e68 <HAL_TIM_MspPostInit+0xb4>)
 8001e4e:	f000 fe61 	bl	8002b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e52:	bf00      	nop
 8001e54:	3728      	adds	r7, #40	; 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020400 	.word	0x40020400
 8001e68:	40020000 	.word	0x40020000

08001e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a28      	ldr	r2, [pc, #160]	; (8001f2c <HAL_UART_MspInit+0xc0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d14a      	bne.n	8001f24 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_UART_MspInit+0xc4>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a26      	ldr	r2, [pc, #152]	; (8001f30 <HAL_UART_MspInit+0xc4>)
 8001e98:	f043 0310 	orr.w	r3, r3, #16
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_UART_MspInit+0xc4>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_UART_MspInit+0xc4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <HAL_UART_MspInit+0xc4>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_UART_MspInit+0xc4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <HAL_UART_MspInit+0xc4>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a18      	ldr	r2, [pc, #96]	; (8001f30 <HAL_UART_MspInit+0xc4>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_UART_MspInit+0xc4>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ef4:	2307      	movs	r3, #7
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4619      	mov	r1, r3
 8001efe:	480d      	ldr	r0, [pc, #52]	; (8001f34 <HAL_UART_MspInit+0xc8>)
 8001f00:	f000 fe08 	bl	8002b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f04:	2308      	movs	r3, #8
 8001f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f14:	2307      	movs	r3, #7
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4806      	ldr	r0, [pc, #24]	; (8001f38 <HAL_UART_MspInit+0xcc>)
 8001f20:	f000 fdf8 	bl	8002b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f24:	bf00      	nop
 8001f26:	3728      	adds	r7, #40	; 0x28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40011000 	.word	0x40011000
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400

08001f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <NMI_Handler+0x4>

08001f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <MemManage_Handler+0x4>

08001f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f88:	f000 f9cc 	bl	8002324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	if ( (TIM9->SR & TIM_SR_CC2IF) >= 1) { // If the CC2IF is set it means a input capture has happened
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <TIM1_BRK_TIM9_IRQHandler+0x3c>)
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <TIM1_BRK_TIM9_IRQHandler+0x26>
		// uint32_t HallTime = HAL_TIM_ReadCapturedValue (&htim9, TIM_CHANNEL_2); // Original
		// uint16_t HallTime = TIM9->CCR2; // Read the captured value
		// RPMValue = RPMConst / (TIM9->CCR2 / 2);
		// Test[RPMReg] = RPMConst / (TIM9->CCR2 / 2);
		Registers[RPMReg] = RPMConst / (TIM9->CCR2 / 2);
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <TIM1_BRK_TIM9_IRQHandler+0x40>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <TIM1_BRK_TIM9_IRQHandler+0x3c>)
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	085b      	lsrs	r3, r3, #1
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <TIM1_BRK_TIM9_IRQHandler+0x44>)
 8001fb2:	80da      	strh	r2, [r3, #6]
 8001fb4:	e002      	b.n	8001fbc <TIM1_BRK_TIM9_IRQHandler+0x2c>
		// If maximum RPM is exceeded -> shutdown
		if ( Registers[RPMReg] > MaximumRPM ) {
			//StopSequence();
		}
	} else {
		Registers[RPMReg] = 0; // If the CC2IF was not set it means the timer has overflowed and the motor is thus stationary
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <TIM1_BRK_TIM9_IRQHandler+0x44>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	80da      	strh	r2, [r3, #6]
	}


  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fbc:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <TIM1_BRK_TIM9_IRQHandler+0x48>)
 8001fbe:	f005 f9d9 	bl	8007374 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001fc2:	4806      	ldr	r0, [pc, #24]	; (8001fdc <TIM1_BRK_TIM9_IRQHandler+0x4c>)
 8001fc4:	f005 f9d6 	bl	8007374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40014000 	.word	0x40014000
 8001fd0:	2000053c 	.word	0x2000053c
 8001fd4:	20000514 	.word	0x20000514
 8001fd8:	200003f8 	.word	0x200003f8
 8001fdc:	20000488 	.word	0x20000488

08001fe0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	PrepareCommutation (Registers[DirReg]); // Set next Commutation states
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 8001fe6:	885b      	ldrh	r3, [r3, #2]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe ff62 	bl	8000eb4 <PrepareCommutation>

	TIM1->SR &= ~TIM_SR_COMIF; 				// Reset COMIF in SR register
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	4a05      	ldr	r2, [pc, #20]	; (800200c <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001ff6:	f023 0320 	bic.w	r3, r3, #32
 8001ffa:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ffc:	4804      	ldr	r0, [pc, #16]	; (8002010 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 8001ffe:	f005 f9b9 	bl	8007374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000514 	.word	0x20000514
 800200c:	40010000 	.word	0x40010000
 8002010:	200003f8 	.word	0x200003f8

08002014 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	// TIM1->CCR2 = PWM;	  // Set new PWM for channel 2
	// TIM1->CCR3 = PWM;	  // Set new PWM for channel 3
	// TIM1->CR1 &= ~0x0002; // Enable Update Events

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <TIM2_IRQHandler+0x20>)
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR
	TIM1->EGR |= TIM_EGR_COMG;
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <TIM2_IRQHandler+0x24>)
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <TIM2_IRQHandler+0x24>)
 8002024:	f043 0320 	orr.w	r3, r3, #32
 8002028:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800202a:	4804      	ldr	r0, [pc, #16]	; (800203c <TIM2_IRQHandler+0x28>)
 800202c:	f005 f9a2 	bl	8007374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40014000 	.word	0x40014000
 8002038:	40010000 	.word	0x40010000
 800203c:	20000440 	.word	0x20000440

08002040 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <I2C1_EV_IRQHandler+0x10>)
 8002046:	f001 f949 	bl	80032dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000034c 	.word	0x2000034c

08002054 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <I2C1_ER_IRQHandler+0x10>)
 800205a:	f001 fa92 	bl	8003582 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000034c 	.word	0x2000034c

08002068 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <OTG_FS_IRQHandler+0x10>)
 800206e:	f002 ff0e 	bl	8004e8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20001a28 	.word	0x20001a28

0800207c <_getpid>:
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
 8002080:	2301      	movs	r3, #1
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_kill>:
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	f00b fc17 	bl	800d8c8 <__errno>
 800209a:	4603      	mov	r3, r0
 800209c:	2216      	movs	r2, #22
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_exit>:
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ffe7 	bl	800208c <_kill>
 80020be:	e7fe      	b.n	80020be <_exit+0x12>

080020c0 <_read>:
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e00a      	b.n	80020e8 <_read+0x28>
 80020d2:	f3af 8000 	nop.w
 80020d6:	4601      	mov	r1, r0
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	60ba      	str	r2, [r7, #8]
 80020de:	b2ca      	uxtb	r2, r1
 80020e0:	701a      	strb	r2, [r3, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dbf0      	blt.n	80020d2 <_read+0x12>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_write>:
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e009      	b.n	8002120 <_write+0x26>
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	60ba      	str	r2, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f3af 8000 	nop.w
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3301      	adds	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	dbf1      	blt.n	800210c <_write+0x12>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_close>:
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_fstat>:
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	2300      	movs	r3, #0
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <_isatty>:
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	2301      	movs	r3, #1
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_lseek>:
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	2300      	movs	r3, #0
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <_sbrk>:
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <_sbrk+0x5c>)
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <_sbrk+0x60>)
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <_sbrk+0x22>
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <_sbrk+0x64>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <_sbrk+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d207      	bcs.n	80021dc <_sbrk+0x40>
 80021cc:	f00b fb7c 	bl	800d8c8 <__errno>
 80021d0:	4603      	mov	r3, r0
 80021d2:	220c      	movs	r2, #12
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	e009      	b.n	80021f0 <_sbrk+0x54>
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_sbrk+0x64>)
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20020000 	.word	0x20020000
 80021fc:	00000400 	.word	0x00000400
 8002200:	20000540 	.word	0x20000540
 8002204:	200022a0 	.word	0x200022a0

08002208 <SystemInit>:
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <SystemInit+0x20>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	4a05      	ldr	r2, [pc, #20]	; (8002228 <SystemInit+0x20>)
 8002214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <Reset_Handler>:
 800222c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002264 <LoopFillZerobss+0x12>
 8002230:	480d      	ldr	r0, [pc, #52]	; (8002268 <LoopFillZerobss+0x16>)
 8002232:	490e      	ldr	r1, [pc, #56]	; (800226c <LoopFillZerobss+0x1a>)
 8002234:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <LoopFillZerobss+0x1e>)
 8002236:	2300      	movs	r3, #0
 8002238:	e002      	b.n	8002240 <LoopCopyDataInit>

0800223a <CopyDataInit>:
 800223a:	58d4      	ldr	r4, [r2, r3]
 800223c:	50c4      	str	r4, [r0, r3]
 800223e:	3304      	adds	r3, #4

08002240 <LoopCopyDataInit>:
 8002240:	18c4      	adds	r4, r0, r3
 8002242:	428c      	cmp	r4, r1
 8002244:	d3f9      	bcc.n	800223a <CopyDataInit>
 8002246:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <LoopFillZerobss+0x22>)
 8002248:	4c0b      	ldr	r4, [pc, #44]	; (8002278 <LoopFillZerobss+0x26>)
 800224a:	2300      	movs	r3, #0
 800224c:	e001      	b.n	8002252 <LoopFillZerobss>

0800224e <FillZerobss>:
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	3204      	adds	r2, #4

08002252 <LoopFillZerobss>:
 8002252:	42a2      	cmp	r2, r4
 8002254:	d3fb      	bcc.n	800224e <FillZerobss>
 8002256:	f7ff ffd7 	bl	8002208 <SystemInit>
 800225a:	f00b fb3b 	bl	800d8d4 <__libc_init_array>
 800225e:	f7ff f8c3 	bl	80013e8 <main>
 8002262:	4770      	bx	lr
 8002264:	20020000 	.word	0x20020000
 8002268:	20000000 	.word	0x20000000
 800226c:	200002e8 	.word	0x200002e8
 8002270:	0800fac4 	.word	0x0800fac4
 8002274:	200002e8 	.word	0x200002e8
 8002278:	200022a0 	.word	0x200022a0

0800227c <ADC_IRQHandler>:
 800227c:	e7fe      	b.n	800227c <ADC_IRQHandler>
	...

08002280 <HAL_Init>:
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <HAL_Init+0x40>)
 800228a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <HAL_Init+0x40>)
 8002296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_Init+0x40>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <HAL_Init+0x40>)
 80022a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	2003      	movs	r0, #3
 80022aa:	f000 fbc1 	bl	8002a30 <HAL_NVIC_SetPriorityGrouping>
 80022ae:	200f      	movs	r0, #15
 80022b0:	f000 f808 	bl	80022c4 <HAL_InitTick>
 80022b4:	f7ff fb84 	bl	80019c0 <HAL_MspInit>
 80022b8:	2300      	movs	r3, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023c00 	.word	0x40023c00

080022c4 <HAL_InitTick>:
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x54>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_InitTick+0x58>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022da:	fbb3 f3f1 	udiv	r3, r3, r1
 80022de:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fbd9 	bl	8002a9a <HAL_SYSTICK_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_InitTick+0x2e>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00e      	b.n	8002310 <HAL_InitTick+0x4c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b0f      	cmp	r3, #15
 80022f6:	d80a      	bhi.n	800230e <HAL_InitTick+0x4a>
 80022f8:	2200      	movs	r2, #0
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002300:	f000 fba1 	bl	8002a46 <HAL_NVIC_SetPriority>
 8002304:	4a06      	ldr	r2, [pc, #24]	; (8002320 <HAL_InitTick+0x5c>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	2300      	movs	r3, #0
 800230c:	e000      	b.n	8002310 <HAL_InitTick+0x4c>
 800230e:	2301      	movs	r3, #1
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000024 	.word	0x20000024
 800231c:	2000002c 	.word	0x2000002c
 8002320:	20000028 	.word	0x20000028

08002324 <HAL_IncTick>:
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x20>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_IncTick+0x24>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4413      	add	r3, r2
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_IncTick+0x24>)
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	2000002c 	.word	0x2000002c
 8002348:	20000544 	.word	0x20000544

0800234c <HAL_GetTick>:
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_GetTick+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000544 	.word	0x20000544

08002364 <HAL_Delay>:
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	f7ff ffee 	bl	800234c <HAL_GetTick>
 8002370:	60b8      	str	r0, [r7, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d005      	beq.n	800238a <HAL_Delay+0x26>
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_Delay+0x44>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	bf00      	nop
 800238c:	f7ff ffde 	bl	800234c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d8f7      	bhi.n	800238c <HAL_Delay+0x28>
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	2000002c 	.word	0x2000002c

080023ac <HAL_ADC_Init>:
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_Init+0x16>
 80023be:	2301      	movs	r3, #1
 80023c0:	e033      	b.n	800242a <HAL_ADC_Init+0x7e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_ADC_Init+0x32>
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fb20 	bl	8001a10 <HAL_ADC_MspInit>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d118      	bne.n	800241c <HAL_ADC_Init+0x70>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023f2:	f023 0302 	bic.w	r3, r3, #2
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f94a 	bl	8002698 <ADC_Init>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
 800241a:	e001      	b.n	8002420 <HAL_ADC_Init+0x74>
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_ADC_ConfigChannel>:
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x1c>
 800244c:	2302      	movs	r3, #2
 800244e:	e113      	b.n	8002678 <HAL_ADC_ConfigChannel+0x244>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b09      	cmp	r3, #9
 800245e:	d925      	bls.n	80024ac <HAL_ADC_ConfigChannel+0x78>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68d9      	ldr	r1, [r3, #12]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	3b1e      	subs	r3, #30
 8002476:	2207      	movs	r2, #7
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43da      	mvns	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	400a      	ands	r2, r1
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68d9      	ldr	r1, [r3, #12]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	b29b      	uxth	r3, r3
 8002496:	4618      	mov	r0, r3
 8002498:	4603      	mov	r3, r0
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4403      	add	r3, r0
 800249e:	3b1e      	subs	r3, #30
 80024a0:	409a      	lsls	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	e022      	b.n	80024f2 <HAL_ADC_ConfigChannel+0xbe>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6919      	ldr	r1, [r3, #16]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	2207      	movs	r2, #7
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	400a      	ands	r2, r1
 80024ce:	611a      	str	r2, [r3, #16]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6919      	ldr	r1, [r3, #16]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	4618      	mov	r0, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4403      	add	r3, r0
 80024e8:	409a      	lsls	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	611a      	str	r2, [r3, #16]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d824      	bhi.n	8002544 <HAL_ADC_ConfigChannel+0x110>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	3b05      	subs	r3, #5
 800250c:	221f      	movs	r2, #31
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	400a      	ands	r2, r1
 800251a:	635a      	str	r2, [r3, #52]	; 0x34
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	4618      	mov	r0, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	3b05      	subs	r3, #5
 8002536:	fa00 f203 	lsl.w	r2, r0, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	635a      	str	r2, [r3, #52]	; 0x34
 8002542:	e04c      	b.n	80025de <HAL_ADC_ConfigChannel+0x1aa>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b0c      	cmp	r3, #12
 800254a:	d824      	bhi.n	8002596 <HAL_ADC_ConfigChannel+0x162>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	3b23      	subs	r3, #35	; 0x23
 800255e:	221f      	movs	r2, #31
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43da      	mvns	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	400a      	ands	r2, r1
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	b29b      	uxth	r3, r3
 800257a:	4618      	mov	r0, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3b23      	subs	r3, #35	; 0x23
 8002588:	fa00 f203 	lsl.w	r2, r0, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
 8002594:	e023      	b.n	80025de <HAL_ADC_ConfigChannel+0x1aa>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	3b41      	subs	r3, #65	; 0x41
 80025a8:	221f      	movs	r2, #31
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	400a      	ands	r2, r1
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4618      	mov	r0, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	3b41      	subs	r3, #65	; 0x41
 80025d2:	fa00 f203 	lsl.w	r2, r0, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80025de:	4b29      	ldr	r3, [pc, #164]	; (8002684 <HAL_ADC_ConfigChannel+0x250>)
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a28      	ldr	r2, [pc, #160]	; (8002688 <HAL_ADC_ConfigChannel+0x254>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d10f      	bne.n	800260c <HAL_ADC_ConfigChannel+0x1d8>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b12      	cmp	r3, #18
 80025f2:	d10b      	bne.n	800260c <HAL_ADC_ConfigChannel+0x1d8>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_ADC_ConfigChannel+0x254>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d12b      	bne.n	800266e <HAL_ADC_ConfigChannel+0x23a>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1c      	ldr	r2, [pc, #112]	; (800268c <HAL_ADC_ConfigChannel+0x258>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d003      	beq.n	8002628 <HAL_ADC_ConfigChannel+0x1f4>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b11      	cmp	r3, #17
 8002626:	d122      	bne.n	800266e <HAL_ADC_ConfigChannel+0x23a>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a11      	ldr	r2, [pc, #68]	; (800268c <HAL_ADC_ConfigChannel+0x258>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d111      	bne.n	800266e <HAL_ADC_ConfigChannel+0x23a>
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_ADC_ConfigChannel+0x25c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a11      	ldr	r2, [pc, #68]	; (8002694 <HAL_ADC_ConfigChannel+0x260>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	0c9a      	lsrs	r2, r3, #18
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	e002      	b.n	8002668 <HAL_ADC_ConfigChannel+0x234>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3b01      	subs	r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f9      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x22e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002676:	2300      	movs	r3, #0
 8002678:	4618      	mov	r0, r3
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40012300 	.word	0x40012300
 8002688:	40012000 	.word	0x40012000
 800268c:	10000012 	.word	0x10000012
 8002690:	20000024 	.word	0x20000024
 8002694:	431bde83 	.word	0x431bde83

08002698 <ADC_Init>:
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	4b79      	ldr	r3, [pc, #484]	; (8002888 <ADC_Init+0x1f0>)
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	021a      	lsls	r2, r3, #8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6899      	ldr	r1, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	4a58      	ldr	r2, [pc, #352]	; (800288c <ADC_Init+0x1f4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d022      	beq.n	8002776 <ADC_Init+0xde>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6899      	ldr	r1, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	e00f      	b.n	8002796 <ADC_Init+0xfe>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0202 	bic.w	r2, r2, #2
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6899      	ldr	r1, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	7e1b      	ldrb	r3, [r3, #24]
 80027b0:	005a      	lsls	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01b      	beq.n	80027fc <ADC_Init+0x164>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	3b01      	subs	r3, #1
 80027f0:	035a      	lsls	r2, r3, #13
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	e007      	b.n	800280c <ADC_Init+0x174>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	3b01      	subs	r3, #1
 8002828:	051a      	lsls	r2, r3, #20
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	62da      	str	r2, [r3, #44]	; 0x2c
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6899      	ldr	r1, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800284e:	025a      	lsls	r2, r3, #9
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6899      	ldr	r1, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	029a      	lsls	r2, r3, #10
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	40012300 	.word	0x40012300
 800288c:	0f000001 	.word	0x0f000001

08002890 <__NVIC_SetPriorityGrouping>:
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	021a      	lsls	r2, r3, #8
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_EnableIRQ>:
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	db0b      	blt.n	800291e <__NVIC_EnableIRQ+0x2a>
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4907      	ldr	r1, [pc, #28]	; (800292c <__NVIC_EnableIRQ+0x38>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2001      	movs	r0, #1
 8002916:	fa00 f202 	lsl.w	r2, r0, r2
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000e100 	.word	0xe000e100

08002930 <__NVIC_SetPriority>:
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	db0a      	blt.n	800295a <__NVIC_SetPriority+0x2a>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	490c      	ldr	r1, [pc, #48]	; (800297c <__NVIC_SetPriority+0x4c>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440b      	add	r3, r1
 8002954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002958:	e00a      	b.n	8002970 <__NVIC_SetPriority+0x40>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <__NVIC_SetPriority+0x50>)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	3b04      	subs	r3, #4
 8002968:	0112      	lsls	r2, r2, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	440b      	add	r3, r1
 800296e:	761a      	strb	r2, [r3, #24]
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <NVIC_EncodePriority>:
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf28      	it	cs
 80029a2:	2304      	movcs	r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d902      	bls.n	80029b4 <NVIC_EncodePriority+0x30>
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3b03      	subs	r3, #3
 80029b2:	e000      	b.n	80029b6 <NVIC_EncodePriority+0x32>
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	401a      	ands	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	409a      	lsls	r2, r3
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	400b      	ands	r3, r1
 80029dc:	4313      	orrs	r3, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <SysTick_Config>:
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029fc:	d301      	bcc.n	8002a02 <SysTick_Config+0x16>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00f      	b.n	8002a22 <SysTick_Config+0x36>
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <SysTick_Config+0x40>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	6053      	str	r3, [r2, #4]
 8002a0a:	210f      	movs	r1, #15
 8002a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a10:	f7ff ff8e 	bl	8002930 <__NVIC_SetPriority>
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <SysTick_Config+0x40>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <SysTick_Config+0x40>)
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	2300      	movs	r3, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	e000e010 	.word	0xe000e010

08002a30 <HAL_NVIC_SetPriorityGrouping>:
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff29 	bl	8002890 <__NVIC_SetPriorityGrouping>
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_SetPriority>:
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	73fb      	strb	r3, [r7, #15]
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	f7ff ff3e 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002a5c:	6178      	str	r0, [r7, #20]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	6978      	ldr	r0, [r7, #20]
 8002a64:	f7ff ff8e 	bl	8002984 <NVIC_EncodePriority>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff5d 	bl	8002930 <__NVIC_SetPriority>
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_EnableIRQ>:
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	71fb      	strb	r3, [r7, #7]
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff31 	bl	80028f4 <__NVIC_EnableIRQ>
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_SYSTICK_Config>:
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ffa2 	bl	80029ec <SysTick_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_DMA_Abort_IT>:
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d004      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x1e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
 8002acc:	2301      	movs	r3, #1
 8002ace:	e00c      	b.n	8002aea <HAL_DMA_Abort_IT+0x38>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_DMA_GetState>:
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_GPIO_Init>:
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	e159      	b.n	8002de4 <HAL_GPIO_Init+0x2d0>
 8002b30:	2201      	movs	r2, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	f040 8148 	bne.w	8002dde <HAL_GPIO_Init+0x2ca>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d005      	beq.n	8002b66 <HAL_GPIO_Init+0x52>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d130      	bne.n	8002bc8 <HAL_GPIO_Init+0xb4>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	2203      	movs	r2, #3
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 0201 	and.w	r2, r3, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d017      	beq.n	8002c04 <HAL_GPIO_Init+0xf0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	60da      	str	r2, [r3, #12]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d123      	bne.n	8002c58 <HAL_GPIO_Init+0x144>
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	08da      	lsrs	r2, r3, #3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3208      	adds	r2, #8
 8002c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	220f      	movs	r2, #15
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	08da      	lsrs	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3208      	adds	r2, #8
 8002c52:	69b9      	ldr	r1, [r7, #24]
 8002c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0203 	and.w	r2, r3, #3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80a2 	beq.w	8002dde <HAL_GPIO_Init+0x2ca>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	4b57      	ldr	r3, [pc, #348]	; (8002dfc <HAL_GPIO_Init+0x2e8>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	4a56      	ldr	r2, [pc, #344]	; (8002dfc <HAL_GPIO_Init+0x2e8>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8002caa:	4b54      	ldr	r3, [pc, #336]	; (8002dfc <HAL_GPIO_Init+0x2e8>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_GPIO_Init+0x2ec>)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a49      	ldr	r2, [pc, #292]	; (8002e04 <HAL_GPIO_Init+0x2f0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d019      	beq.n	8002d16 <HAL_GPIO_Init+0x202>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a48      	ldr	r2, [pc, #288]	; (8002e08 <HAL_GPIO_Init+0x2f4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_GPIO_Init+0x1fe>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a47      	ldr	r2, [pc, #284]	; (8002e0c <HAL_GPIO_Init+0x2f8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00d      	beq.n	8002d0e <HAL_GPIO_Init+0x1fa>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a46      	ldr	r2, [pc, #280]	; (8002e10 <HAL_GPIO_Init+0x2fc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <HAL_GPIO_Init+0x1f6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a45      	ldr	r2, [pc, #276]	; (8002e14 <HAL_GPIO_Init+0x300>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d101      	bne.n	8002d06 <HAL_GPIO_Init+0x1f2>
 8002d02:	2304      	movs	r3, #4
 8002d04:	e008      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d06:	2307      	movs	r3, #7
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e004      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e002      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d16:	2300      	movs	r3, #0
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f002 0203 	and.w	r2, r2, #3
 8002d1e:	0092      	lsls	r2, r2, #2
 8002d20:	4093      	lsls	r3, r2
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	4935      	ldr	r1, [pc, #212]	; (8002e00 <HAL_GPIO_Init+0x2ec>)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002d36:	4b38      	ldr	r3, [pc, #224]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x246>
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	4a2f      	ldr	r2, [pc, #188]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6093      	str	r3, [r2, #8]
 8002d60:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x270>
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	4a24      	ldr	r2, [pc, #144]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	60d3      	str	r3, [r2, #12]
 8002d8a:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x29a>
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6053      	str	r3, [r2, #4]
 8002db4:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x2c4>
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	4a0f      	ldr	r2, [pc, #60]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3301      	adds	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	f67f aea2 	bls.w	8002b30 <HAL_GPIO_Init+0x1c>
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40020c00 	.word	0x40020c00
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40013c00 	.word	0x40013c00

08002e1c <HAL_I2C_Init>:
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_I2C_Init+0x12>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e12b      	b.n	8003086 <HAL_I2C_Init+0x26a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_I2C_Init+0x2c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fe28 	bl	8001a98 <HAL_I2C_MspInit>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	; 0x24
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	f003 fd62 	bl	8006948 <HAL_RCC_GetPCLK1Freq>
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4a81      	ldr	r2, [pc, #516]	; (8003090 <HAL_I2C_Init+0x274>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d807      	bhi.n	8002ea0 <HAL_I2C_Init+0x84>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4a80      	ldr	r2, [pc, #512]	; (8003094 <HAL_I2C_Init+0x278>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	bf94      	ite	ls
 8002e98:	2301      	movls	r3, #1
 8002e9a:	2300      	movhi	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e006      	b.n	8002eae <HAL_I2C_Init+0x92>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a7d      	ldr	r2, [pc, #500]	; (8003098 <HAL_I2C_Init+0x27c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	bf94      	ite	ls
 8002ea8:	2301      	movls	r3, #1
 8002eaa:	2300      	movhi	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Init+0x9a>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0e7      	b.n	8003086 <HAL_I2C_Init+0x26a>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a78      	ldr	r2, [pc, #480]	; (800309c <HAL_I2C_Init+0x280>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0c9b      	lsrs	r3, r3, #18
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a6a      	ldr	r2, [pc, #424]	; (8003090 <HAL_I2C_Init+0x274>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d802      	bhi.n	8002ef0 <HAL_I2C_Init+0xd4>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	3301      	adds	r3, #1
 8002eee:	e009      	b.n	8002f04 <HAL_I2C_Init+0xe8>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	4a69      	ldr	r2, [pc, #420]	; (80030a0 <HAL_I2C_Init+0x284>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	3301      	adds	r3, #1
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6213      	str	r3, [r2, #32]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	495c      	ldr	r1, [pc, #368]	; (8003090 <HAL_I2C_Init+0x274>)
 8002f20:	428b      	cmp	r3, r1
 8002f22:	d819      	bhi.n	8002f58 <HAL_I2C_Init+0x13c>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1e59      	subs	r1, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f32:	1c59      	adds	r1, r3, #1
 8002f34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f38:	400b      	ands	r3, r1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_I2C_Init+0x138>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1e59      	subs	r1, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f52:	e051      	b.n	8002ff8 <HAL_I2C_Init+0x1dc>
 8002f54:	2304      	movs	r3, #4
 8002f56:	e04f      	b.n	8002ff8 <HAL_I2C_Init+0x1dc>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d111      	bne.n	8002f84 <HAL_I2C_Init+0x168>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1e58      	subs	r0, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	440b      	add	r3, r1
 8002f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e012      	b.n	8002faa <HAL_I2C_Init+0x18e>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1e58      	subs	r0, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	0099      	lsls	r1, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Init+0x196>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e022      	b.n	8002ff8 <HAL_I2C_Init+0x1dc>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_I2C_Init+0x1bc>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1e58      	subs	r0, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	440b      	add	r3, r1
 8002fc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fcc:	3301      	adds	r3, #1
 8002fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd6:	e00f      	b.n	8002ff8 <HAL_I2C_Init+0x1dc>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1e58      	subs	r0, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	0099      	lsls	r1, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	6809      	ldr	r1, [r1, #0]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61cb      	str	r3, [r1, #28]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003026:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6911      	ldr	r1, [r2, #16]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68d2      	ldr	r2, [r2, #12]
 8003032:	4311      	orrs	r1, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	430b      	orrs	r3, r1
 800303a:	6093      	str	r3, [r2, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	60da      	str	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003084:	2300      	movs	r3, #0
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	000186a0 	.word	0x000186a0
 8003094:	001e847f 	.word	0x001e847f
 8003098:	003d08ff 	.word	0x003d08ff
 800309c:	431bde83 	.word	0x431bde83
 80030a0:	10624dd3 	.word	0x10624dd3

080030a4 <HAL_I2C_Slave_Seq_Transmit_IT>:
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	80fb      	strh	r3, [r7, #6]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030c0:	2b28      	cmp	r3, #40	; 0x28
 80030c2:	d15b      	bne.n	800317c <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e054      	b.n	800317e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 80030de:	2302      	movs	r3, #2
 80030e0:	e04d      	b.n	800317e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d007      	beq.n	8003108 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2229      	movs	r2, #41	; 0x29
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	625a      	str	r2, [r3, #36]	; 0x24
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	88fa      	ldrh	r2, [r7, #6]
 8003138:	855a      	strh	r2, [r3, #42]	; 0x2a
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	851a      	strh	r2, [r3, #40]	; 0x28
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	62da      	str	r2, [r3, #44]	; 0x2c
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003176:	605a      	str	r2, [r3, #4]
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800317c:	2302      	movs	r3, #2
 800317e:	4618      	mov	r0, r3
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_I2C_Slave_Seq_Receive_IT>:
 800318a:	b480      	push	{r7}
 800318c:	b087      	sub	sp, #28
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	4613      	mov	r3, r2
 8003198:	80fb      	strh	r3, [r7, #6]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031a6:	2b28      	cmp	r3, #40	; 0x28
 80031a8:	d15b      	bne.n	8003262 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_I2C_Slave_Seq_Receive_IT+0x30>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e054      	b.n	8003264 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e04d      	b.n	8003264 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d007      	beq.n	80031ee <HAL_I2C_Slave_Seq_Receive_IT+0x64>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	222a      	movs	r2, #42	; 0x2a
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	641a      	str	r2, [r3, #64]	; 0x40
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	88fa      	ldrh	r2, [r7, #6]
 800321e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	851a      	strh	r2, [r3, #40]	; 0x28
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	2300      	movs	r3, #0
 8003260:	e000      	b.n	8003264 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8003262:	2302      	movs	r3, #2
 8003264:	4618      	mov	r0, r3
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_I2C_EnableListen_IT>:
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b20      	cmp	r3, #32
 8003282:	d124      	bne.n	80032ce <HAL_I2C_EnableListen_IT+0x5e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2228      	movs	r2, #40	; 0x28
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b01      	cmp	r3, #1
 8003298:	d007      	beq.n	80032aa <HAL_I2C_EnableListen_IT+0x3a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <HAL_I2C_EnableListen_IT+0x60>
 80032ce:	2302      	movs	r3, #2
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_I2C_EV_IRQHandler>:
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	2300      	movs	r3, #0
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	73bb      	strb	r3, [r7, #14]
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	2b10      	cmp	r3, #16
 800330a:	d003      	beq.n	8003314 <HAL_I2C_EV_IRQHandler+0x38>
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	f040 80b1 	bne.w	8003476 <HAL_I2C_EV_IRQHandler+0x19a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10d      	bne.n	800334a <HAL_I2C_EV_IRQHandler+0x6e>
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003334:	d003      	beq.n	800333e <HAL_I2C_EV_IRQHandler+0x62>
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800333c:	d101      	bne.n	8003342 <HAL_I2C_EV_IRQHandler+0x66>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_I2C_EV_IRQHandler+0x68>
 8003342:	2300      	movs	r3, #0
 8003344:	2b01      	cmp	r3, #1
 8003346:	f000 8114 	beq.w	8003572 <HAL_I2C_EV_IRQHandler+0x296>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00b      	beq.n	800336c <HAL_I2C_EV_IRQHandler+0x90>
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <HAL_I2C_EV_IRQHandler+0x90>
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f001 fc2a 	bl	8004bb8 <I2C_ConvertOtherXferOptions>
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fd34 	bl	8003dd2 <I2C_Master_SB>
 800336a:	e083      	b.n	8003474 <HAL_I2C_EV_IRQHandler+0x198>
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <HAL_I2C_EV_IRQHandler+0xac>
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_I2C_EV_IRQHandler+0xac>
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fdac 	bl	8003ede <I2C_Master_ADD10>
 8003386:	e075      	b.n	8003474 <HAL_I2C_EV_IRQHandler+0x198>
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0xc8>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0xc8>
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fdc8 	bl	8003f32 <I2C_Master_ADDR>
 80033a2:	e067      	b.n	8003474 <HAL_I2C_EV_IRQHandler+0x198>
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d036      	beq.n	800341c <HAL_I2C_EV_IRQHandler+0x140>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033bc:	f000 80db 	beq.w	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00d      	beq.n	80033e6 <HAL_I2C_EV_IRQHandler+0x10a>
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_I2C_EV_IRQHandler+0x10a>
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <HAL_I2C_EV_IRQHandler+0x10a>
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f9ac 	bl	800373c <I2C_MasterTransmit_TXE>
 80033e4:	e046      	b.n	8003474 <HAL_I2C_EV_IRQHandler+0x198>
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80c2 	beq.w	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80bc 	beq.w	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
 80033fe:	7bbb      	ldrb	r3, [r7, #14]
 8003400:	2b21      	cmp	r3, #33	; 0x21
 8003402:	d103      	bne.n	800340c <HAL_I2C_EV_IRQHandler+0x130>
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fa35 	bl	8003874 <I2C_MasterTransmit_BTF>
 800340a:	e0b4      	b.n	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	f040 80b1 	bne.w	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 faa3 	bl	8003960 <I2C_MemoryTransmit_TXE_BTF>
 800341a:	e0ac      	b.n	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800342a:	f000 80a4 	beq.w	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <HAL_I2C_EV_IRQHandler+0x178>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_I2C_EV_IRQHandler+0x178>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d103      	bne.n	8003454 <HAL_I2C_EV_IRQHandler+0x178>
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fb1b 	bl	8003a88 <I2C_MasterReceive_RXNE>
 8003452:	e00f      	b.n	8003474 <HAL_I2C_EV_IRQHandler+0x198>
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 808b 	beq.w	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8085 	beq.w	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fbc6 	bl	8003bfe <I2C_MasterReceive_BTF>
 8003472:	e080      	b.n	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
 8003474:	e07f      	b.n	8003576 <HAL_I2C_EV_IRQHandler+0x29a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d004      	beq.n	8003488 <HAL_I2C_EV_IRQHandler+0x1ac>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	e007      	b.n	8003498 <HAL_I2C_EV_IRQHandler+0x1bc>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d011      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x1ea>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00c      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x1ea>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_I2C_EV_IRQHandler+0x1e0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	69b9      	ldr	r1, [r7, #24]
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 ff86 	bl	80043d0 <I2C_Slave_ADDR>
 80034c4:	e05a      	b.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_I2C_EV_IRQHandler+0x206>
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_I2C_EV_IRQHandler+0x206>
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 ffc0 	bl	8004460 <I2C_Slave_STOPF>
 80034e0:	e04c      	b.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
 80034e2:	7bbb      	ldrb	r3, [r7, #14]
 80034e4:	2b21      	cmp	r3, #33	; 0x21
 80034e6:	d002      	beq.n	80034ee <HAL_I2C_EV_IRQHandler+0x212>
 80034e8:	7bbb      	ldrb	r3, [r7, #14]
 80034ea:	2b29      	cmp	r3, #41	; 0x29
 80034ec:	d120      	bne.n	8003530 <HAL_I2C_EV_IRQHandler+0x254>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00d      	beq.n	8003514 <HAL_I2C_EV_IRQHandler+0x238>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_I2C_EV_IRQHandler+0x238>
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d103      	bne.n	8003514 <HAL_I2C_EV_IRQHandler+0x238>
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fea1 	bl	8004254 <I2C_SlaveTransmit_TXE>
 8003512:	e032      	b.n	800357a <HAL_I2C_EV_IRQHandler+0x29e>
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d02d      	beq.n	800357a <HAL_I2C_EV_IRQHandler+0x29e>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003524:	2b00      	cmp	r3, #0
 8003526:	d028      	beq.n	800357a <HAL_I2C_EV_IRQHandler+0x29e>
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fed0 	bl	80042ce <I2C_SlaveTransmit_BTF>
 800352e:	e024      	b.n	800357a <HAL_I2C_EV_IRQHandler+0x29e>
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <HAL_I2C_EV_IRQHandler+0x27a>
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_I2C_EV_IRQHandler+0x27a>
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <HAL_I2C_EV_IRQHandler+0x27a>
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fede 	bl	8004310 <I2C_SlaveReceive_RXNE>
 8003554:	e012      	b.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 ff0e 	bl	800438c <I2C_SlaveReceive_BTF>
 8003570:	e004      	b.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003572:	bf00      	nop
 8003574:	e002      	b.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003576:	bf00      	nop
 8003578:	e000      	b.n	800357c <HAL_I2C_EV_IRQHandler+0x2a0>
 800357a:	bf00      	nop
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_I2C_ER_IRQHandler>:
 8003582:	b580      	push	{r7, lr}
 8003584:	b08a      	sub	sp, #40	; 0x28
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	623b      	str	r3, [r7, #32]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	2300      	movs	r3, #0
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a4:	76fb      	strb	r3, [r7, #27]
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00d      	beq.n	80035cc <HAL_I2C_ER_IRQHandler+0x4a>
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_I2C_ER_IRQHandler+0x4a>
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035ca:	615a      	str	r2, [r3, #20]
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00d      	beq.n	80035f2 <HAL_I2C_ER_IRQHandler+0x70>
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_I2C_ER_IRQHandler+0x70>
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	f043 0302 	orr.w	r3, r3, #2
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80035f0:	615a      	str	r2, [r3, #20]
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d03e      	beq.n	800367a <HAL_I2C_ER_IRQHandler+0xf8>
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d039      	beq.n	800367a <HAL_I2C_ER_IRQHandler+0xf8>
 8003606:	7efb      	ldrb	r3, [r7, #27]
 8003608:	76bb      	strb	r3, [r7, #26]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	74fb      	strb	r3, [r7, #19]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	7ebb      	ldrb	r3, [r7, #26]
 8003622:	2b20      	cmp	r3, #32
 8003624:	d112      	bne.n	800364c <HAL_I2C_ER_IRQHandler+0xca>
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10f      	bne.n	800364c <HAL_I2C_ER_IRQHandler+0xca>
 800362c:	7cfb      	ldrb	r3, [r7, #19]
 800362e:	2b21      	cmp	r3, #33	; 0x21
 8003630:	d008      	beq.n	8003644 <HAL_I2C_ER_IRQHandler+0xc2>
 8003632:	7cfb      	ldrb	r3, [r7, #19]
 8003634:	2b29      	cmp	r3, #41	; 0x29
 8003636:	d005      	beq.n	8003644 <HAL_I2C_ER_IRQHandler+0xc2>
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	2b28      	cmp	r3, #40	; 0x28
 800363c:	d106      	bne.n	800364c <HAL_I2C_ER_IRQHandler+0xca>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b21      	cmp	r3, #33	; 0x21
 8003642:	d103      	bne.n	800364c <HAL_I2C_ER_IRQHandler+0xca>
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f001 f83b 	bl	80046c0 <I2C_Slave_AF>
 800364a:	e016      	b.n	800367a <HAL_I2C_ER_IRQHandler+0xf8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003654:	615a      	str	r2, [r3, #20]
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	f043 0304 	orr.w	r3, r3, #4
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	7efb      	ldrb	r3, [r7, #27]
 8003660:	2b10      	cmp	r3, #16
 8003662:	d002      	beq.n	800366a <HAL_I2C_ER_IRQHandler+0xe8>
 8003664:	7efb      	ldrb	r3, [r7, #27]
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d107      	bne.n	800367a <HAL_I2C_ER_IRQHandler+0xf8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00d      	beq.n	80036a0 <HAL_I2C_ER_IRQHandler+0x11e>
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_I2C_ER_IRQHandler+0x11e>
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	f043 0308 	orr.w	r3, r3, #8
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800369e:	615a      	str	r2, [r3, #20]
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_I2C_ER_IRQHandler+0x136>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f001 f874 	bl	80047a0 <I2C_ITError>
 80036b8:	bf00      	nop
 80036ba:	3728      	adds	r7, #40	; 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_I2C_MasterTxCpltCallback>:
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_I2C_MasterRxCpltCallback>:
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_I2C_MemTxCpltCallback>:
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_I2C_MemRxCpltCallback>:
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_I2C_AbortCpltCallback>:
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_I2C_GetError>:
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <I2C_MasterTransmit_TXE>:
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003752:	73bb      	strb	r3, [r7, #14]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	2b00      	cmp	r3, #0
 8003760:	d150      	bne.n	8003804 <I2C_MasterTransmit_TXE+0xc8>
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	2b21      	cmp	r3, #33	; 0x21
 8003766:	d14d      	bne.n	8003804 <I2C_MasterTransmit_TXE+0xc8>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b08      	cmp	r3, #8
 800376c:	d01d      	beq.n	80037aa <I2C_MasterTransmit_TXE+0x6e>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b20      	cmp	r3, #32
 8003772:	d01a      	beq.n	80037aa <I2C_MasterTransmit_TXE+0x6e>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800377a:	d016      	beq.n	80037aa <I2C_MasterTransmit_TXE+0x6e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2211      	movs	r2, #17
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff ff8c 	bl	80036c0 <HAL_I2C_MasterTxCpltCallback>
 80037a8:	e060      	b.n	800386c <I2C_MasterTransmit_TXE+0x130>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d107      	bne.n	80037f4 <I2C_MasterTransmit_TXE+0xb8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff7b 	bl	80036e8 <HAL_I2C_MemTxCpltCallback>
 80037f2:	e03b      	b.n	800386c <I2C_MasterTransmit_TXE+0x130>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff ff5f 	bl	80036c0 <HAL_I2C_MasterTxCpltCallback>
 8003802:	e033      	b.n	800386c <I2C_MasterTransmit_TXE+0x130>
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b21      	cmp	r3, #33	; 0x21
 8003808:	d005      	beq.n	8003816 <I2C_MasterTransmit_TXE+0xda>
 800380a:	7bbb      	ldrb	r3, [r7, #14]
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d12d      	bne.n	800386c <I2C_MasterTransmit_TXE+0x130>
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b22      	cmp	r3, #34	; 0x22
 8003814:	d12a      	bne.n	800386c <I2C_MasterTransmit_TXE+0x130>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d108      	bne.n	8003832 <I2C_MasterTransmit_TXE+0xf6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	e01c      	b.n	800386c <I2C_MasterTransmit_TXE+0x130>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d103      	bne.n	8003846 <I2C_MasterTransmit_TXE+0x10a>
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f88e 	bl	8003960 <I2C_MemoryTransmit_TXE_BTF>
 8003844:	e012      	b.n	800386c <I2C_MasterTransmit_TXE+0x130>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	611a      	str	r2, [r3, #16]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	625a      	str	r2, [r3, #36]	; 0x24
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	855a      	strh	r2, [r3, #42]	; 0x2a
 800386a:	e7ff      	b.n	800386c <I2C_MasterTransmit_TXE+0x130>
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_MasterTransmit_BTF>:
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b21      	cmp	r3, #33	; 0x21
 800388c:	d164      	bne.n	8003958 <I2C_MasterTransmit_BTF+0xe4>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d012      	beq.n	80038be <I2C_MasterTransmit_BTF+0x4a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	781a      	ldrb	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	611a      	str	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038bc:	e04c      	b.n	8003958 <I2C_MasterTransmit_BTF+0xe4>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d01d      	beq.n	8003900 <I2C_MasterTransmit_BTF+0x8c>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d01a      	beq.n	8003900 <I2C_MasterTransmit_BTF+0x8c>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038d0:	d016      	beq.n	8003900 <I2C_MasterTransmit_BTF+0x8c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2211      	movs	r2, #17
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff fee1 	bl	80036c0 <HAL_I2C_MasterTxCpltCallback>
 80038fe:	e02b      	b.n	8003958 <I2C_MasterTransmit_BTF+0xe4>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d107      	bne.n	800394a <I2C_MasterTransmit_BTF+0xd6>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff fed0 	bl	80036e8 <HAL_I2C_MemTxCpltCallback>
 8003948:	e006      	b.n	8003958 <I2C_MasterTransmit_BTF+0xe4>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff feb4 	bl	80036c0 <HAL_I2C_MasterTxCpltCallback>
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <I2C_MemoryTransmit_TXE_BTF>:
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396e:	73fb      	strb	r3, [r7, #15]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003974:	2b00      	cmp	r3, #0
 8003976:	d11d      	bne.n	80039b4 <I2C_MemoryTransmit_TXE_BTF+0x54>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10b      	bne.n	8003998 <I2C_MemoryTransmit_TXE_BTF+0x38>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003984:	b2da      	uxtb	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	611a      	str	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003990:	1c9a      	adds	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	651a      	str	r2, [r3, #80]	; 0x50
 8003996:	e073      	b.n	8003a80 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399c:	b29b      	uxth	r3, r3
 800399e:	121b      	asrs	r3, r3, #8
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	611a      	str	r2, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	651a      	str	r2, [r3, #80]	; 0x50
 80039b2:	e065      	b.n	8003a80 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d10b      	bne.n	80039d4 <I2C_MemoryTransmit_TXE_BTF+0x74>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	651a      	str	r2, [r3, #80]	; 0x50
 80039d2:	e055      	b.n	8003a80 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d151      	bne.n	8003a80 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b22      	cmp	r3, #34	; 0x22
 80039e0:	d10d      	bne.n	80039fe <I2C_MemoryTransmit_TXE_BTF+0x9e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	651a      	str	r2, [r3, #80]	; 0x50
 80039fc:	e040      	b.n	8003a80 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d015      	beq.n	8003a34 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	2b21      	cmp	r3, #33	; 0x21
 8003a0c:	d112      	bne.n	8003a34 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	781a      	ldrb	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	611a      	str	r2, [r3, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	625a      	str	r2, [r3, #36]	; 0x24
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a32:	e025      	b.n	8003a80 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d120      	bne.n	8003a80 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b21      	cmp	r3, #33	; 0x21
 8003a42:	d11d      	bne.n	8003a80 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fe34 	bl	80036e8 <HAL_I2C_MemTxCpltCallback>
 8003a80:	bf00      	nop
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <I2C_MasterReceive_RXNE>:
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b22      	cmp	r3, #34	; 0x22
 8003a9a:	f040 80ac 	bne.w	8003bf6 <I2C_MasterReceive_RXNE+0x16e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d921      	bls.n	8003af0 <I2C_MasterReceive_RXNE+0x68>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	f040 808c 	bne.w	8003bf6 <I2C_MasterReceive_RXNE+0x16e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	e082      	b.n	8003bf6 <I2C_MasterReceive_RXNE+0x16e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d075      	beq.n	8003be4 <I2C_MasterReceive_RXNE+0x15c>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d002      	beq.n	8003b04 <I2C_MasterReceive_RXNE+0x7c>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d16f      	bne.n	8003be4 <I2C_MasterReceive_RXNE+0x15c>
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f001 f825 	bl	8004b54 <I2C_WaitOnSTOPRequestThroughIT>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d142      	bne.n	8003b96 <I2C_MasterReceive_RXNE+0x10e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b2e:	605a      	str	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b40      	cmp	r3, #64	; 0x40
 8003b68:	d10a      	bne.n	8003b80 <I2C_MasterReceive_RXNE+0xf8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fdbf 	bl	80036fc <HAL_I2C_MemRxCpltCallback>
 8003b7e:	e03a      	b.n	8003bf6 <I2C_MasterReceive_RXNE+0x16e>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2212      	movs	r2, #18
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff fda0 	bl	80036d4 <HAL_I2C_MasterRxCpltCallback>
 8003b94:	e02f      	b.n	8003bf6 <I2C_MasterReceive_RXNE+0x16e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7fd fbdd 	bl	800139c <HAL_I2C_ErrorCallback>
 8003be2:	e008      	b.n	8003bf6 <I2C_MasterReceive_RXNE+0x16e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf2:	605a      	str	r2, [r3, #4]
 8003bf4:	e7ff      	b.n	8003bf6 <I2C_MasterReceive_RXNE+0x16e>
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <I2C_MasterReceive_BTF>:
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d11b      	bne.n	8003c4e <I2C_MasterReceive_BTF+0x50>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c4c:	e0bd      	b.n	8003dca <I2C_MasterReceive_BTF+0x1cc>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d129      	bne.n	8003cac <I2C_MasterReceive_BTF+0xae>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d00a      	beq.n	8003c84 <I2C_MasterReceive_BTF+0x86>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d007      	beq.n	8003c84 <I2C_MasterReceive_BTF+0x86>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	625a      	str	r2, [r3, #36]	; 0x24
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003caa:	e08e      	b.n	8003dca <I2C_MasterReceive_BTF+0x1cc>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d176      	bne.n	8003da4 <I2C_MasterReceive_BTF+0x1a6>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d002      	beq.n	8003cc2 <I2C_MasterReceive_BTF+0xc4>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d108      	bne.n	8003cd4 <I2C_MasterReceive_BTF+0xd6>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e019      	b.n	8003d08 <I2C_MasterReceive_BTF+0x10a>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d002      	beq.n	8003ce0 <I2C_MasterReceive_BTF+0xe2>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d108      	bne.n	8003cf2 <I2C_MasterReceive_BTF+0xf4>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e00a      	b.n	8003d08 <I2C_MasterReceive_BTF+0x10a>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	d007      	beq.n	8003d08 <I2C_MasterReceive_BTF+0x10a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	625a      	str	r2, [r3, #36]	; 0x24
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d62:	605a      	str	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d10a      	bne.n	8003d8e <I2C_MasterReceive_BTF+0x190>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff fcb8 	bl	80036fc <HAL_I2C_MemRxCpltCallback>
 8003d8c:	e01d      	b.n	8003dca <I2C_MasterReceive_BTF+0x1cc>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2212      	movs	r2, #18
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff fc99 	bl	80036d4 <HAL_I2C_MasterRxCpltCallback>
 8003da2:	e012      	b.n	8003dca <I2C_MasterReceive_BTF+0x1cc>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	625a      	str	r2, [r3, #36]	; 0x24
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <I2C_Master_SB>:
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d117      	bne.n	8003e16 <I2C_Master_SB+0x44>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <I2C_Master_SB+0x30>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	461a      	mov	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dfe:	611a      	str	r2, [r3, #16]
 8003e00:	e067      	b.n	8003ed2 <I2C_Master_SB+0x100>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	611a      	str	r2, [r3, #16]
 8003e14:	e05d      	b.n	8003ed2 <I2C_Master_SB+0x100>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e1e:	d133      	bne.n	8003e88 <I2C_Master_SB+0xb6>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b21      	cmp	r3, #33	; 0x21
 8003e2a:	d109      	bne.n	8003e40 <I2C_Master_SB+0x6e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e3c:	611a      	str	r2, [r3, #16]
 8003e3e:	e008      	b.n	8003e52 <I2C_Master_SB+0x80>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	611a      	str	r2, [r3, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d004      	beq.n	8003e64 <I2C_Master_SB+0x92>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d108      	bne.n	8003e76 <I2C_Master_SB+0xa4>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d032      	beq.n	8003ed2 <I2C_Master_SB+0x100>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d02d      	beq.n	8003ed2 <I2C_Master_SB+0x100>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	e024      	b.n	8003ed2 <I2C_Master_SB+0x100>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10e      	bne.n	8003eae <I2C_Master_SB+0xdc>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	11db      	asrs	r3, r3, #7
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	f003 0306 	and.w	r3, r3, #6
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	f063 030f 	orn	r3, r3, #15
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	611a      	str	r2, [r3, #16]
 8003eac:	e011      	b.n	8003ed2 <I2C_Master_SB+0x100>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d10d      	bne.n	8003ed2 <I2C_Master_SB+0x100>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	11db      	asrs	r3, r3, #7
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f003 0306 	and.w	r3, r3, #6
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f063 030e 	orn	r3, r3, #14
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	611a      	str	r2, [r3, #16]
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <I2C_Master_ADD10>:
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <I2C_Master_ADD10+0x26>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d108      	bne.n	8003f16 <I2C_Master_ADD10+0x38>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00c      	beq.n	8003f26 <I2C_Master_ADD10+0x48>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <I2C_Master_ADD10+0x48>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <I2C_Master_ADDR>:
 8003f32:	b480      	push	{r7}
 8003f34:	b091      	sub	sp, #68	; 0x44
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b22      	cmp	r3, #34	; 0x22
 8003f5a:	f040 8169 	bne.w	8004230 <I2C_Master_ADDR+0x2fe>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10f      	bne.n	8003f86 <I2C_Master_ADDR+0x54>
 8003f66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f6a:	2b40      	cmp	r3, #64	; 0x40
 8003f6c:	d10b      	bne.n	8003f86 <I2C_Master_ADDR+0x54>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	633b      	str	r3, [r7, #48]	; 0x30
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	633b      	str	r3, [r7, #48]	; 0x30
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	633b      	str	r3, [r7, #48]	; 0x30
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	e160      	b.n	8004248 <I2C_Master_ADDR+0x316>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d11d      	bne.n	8003fca <I2C_Master_ADDR+0x98>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f96:	d118      	bne.n	8003fca <I2C_Master_ADDR+0x98>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	651a      	str	r2, [r3, #80]	; 0x50
 8003fc8:	e13e      	b.n	8004248 <I2C_Master_ADDR+0x316>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d113      	bne.n	8003ffc <I2C_Master_ADDR+0xca>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	e115      	b.n	8004228 <I2C_Master_ADDR+0x2f6>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b01      	cmp	r3, #1
 8004004:	f040 808a 	bne.w	800411c <I2C_Master_ADDR+0x1ea>
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800400e:	d137      	bne.n	8004080 <I2C_Master_ADDR+0x14e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402e:	d113      	bne.n	8004058 <I2C_Master_ADDR+0x126>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	2300      	movs	r3, #0
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	e0e7      	b.n	8004228 <I2C_Master_ADDR+0x2f6>
 8004058:	2300      	movs	r3, #0
 800405a:	623b      	str	r3, [r7, #32]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	623b      	str	r3, [r7, #32]
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e0d3      	b.n	8004228 <I2C_Master_ADDR+0x2f6>
 8004080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004082:	2b08      	cmp	r3, #8
 8004084:	d02e      	beq.n	80040e4 <I2C_Master_ADDR+0x1b2>
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	2b20      	cmp	r3, #32
 800408a:	d02b      	beq.n	80040e4 <I2C_Master_ADDR+0x1b2>
 800408c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408e:	2b12      	cmp	r3, #18
 8004090:	d102      	bne.n	8004098 <I2C_Master_ADDR+0x166>
 8004092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004094:	2b01      	cmp	r3, #1
 8004096:	d125      	bne.n	80040e4 <I2C_Master_ADDR+0x1b2>
 8004098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409a:	2b04      	cmp	r3, #4
 800409c:	d00e      	beq.n	80040bc <I2C_Master_ADDR+0x18a>
 800409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d00b      	beq.n	80040bc <I2C_Master_ADDR+0x18a>
 80040a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a6:	2b10      	cmp	r3, #16
 80040a8:	d008      	beq.n	80040bc <I2C_Master_ADDR+0x18a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e007      	b.n	80040cc <I2C_Master_ADDR+0x19a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	61fb      	str	r3, [r7, #28]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	e0a1      	b.n	8004228 <I2C_Master_ADDR+0x2f6>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	2300      	movs	r3, #0
 80040f6:	61bb      	str	r3, [r7, #24]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	e085      	b.n	8004228 <I2C_Master_ADDR+0x2f6>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d14d      	bne.n	80041c2 <I2C_Master_ADDR+0x290>
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	2b04      	cmp	r3, #4
 800412a:	d016      	beq.n	800415a <I2C_Master_ADDR+0x228>
 800412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412e:	2b02      	cmp	r3, #2
 8004130:	d013      	beq.n	800415a <I2C_Master_ADDR+0x228>
 8004132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004134:	2b10      	cmp	r3, #16
 8004136:	d010      	beq.n	800415a <I2C_Master_ADDR+0x228>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e007      	b.n	800416a <I2C_Master_ADDR+0x238>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004178:	d117      	bne.n	80041aa <I2C_Master_ADDR+0x278>
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004180:	d00b      	beq.n	800419a <I2C_Master_ADDR+0x268>
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	2b01      	cmp	r3, #1
 8004186:	d008      	beq.n	800419a <I2C_Master_ADDR+0x268>
 8004188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418a:	2b08      	cmp	r3, #8
 800418c:	d005      	beq.n	800419a <I2C_Master_ADDR+0x268>
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	2b10      	cmp	r3, #16
 8004192:	d002      	beq.n	800419a <I2C_Master_ADDR+0x268>
 8004194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004196:	2b20      	cmp	r3, #32
 8004198:	d107      	bne.n	80041aa <I2C_Master_ADDR+0x278>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	e032      	b.n	8004228 <I2C_Master_ADDR+0x2f6>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e0:	d117      	bne.n	8004212 <I2C_Master_ADDR+0x2e0>
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041e8:	d00b      	beq.n	8004202 <I2C_Master_ADDR+0x2d0>
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d008      	beq.n	8004202 <I2C_Master_ADDR+0x2d0>
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d005      	beq.n	8004202 <I2C_Master_ADDR+0x2d0>
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d002      	beq.n	8004202 <I2C_Master_ADDR+0x2d0>
 80041fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d107      	bne.n	8004212 <I2C_Master_ADDR+0x2e0>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	651a      	str	r2, [r3, #80]	; 0x50
 800422e:	e00b      	b.n	8004248 <I2C_Master_ADDR+0x316>
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	e7ff      	b.n	8004248 <I2C_Master_ADDR+0x316>
 8004248:	bf00      	nop
 800424a:	3744      	adds	r7, #68	; 0x44
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <I2C_SlaveTransmit_TXE>:
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004262:	73fb      	strb	r3, [r7, #15]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d02b      	beq.n	80042c6 <I2C_SlaveTransmit_TXE+0x72>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	781a      	ldrb	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	611a      	str	r2, [r3, #16]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	625a      	str	r2, [r3, #36]	; 0x24
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d114      	bne.n	80042c6 <I2C_SlaveTransmit_TXE+0x72>
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b29      	cmp	r3, #41	; 0x29
 80042a0:	d111      	bne.n	80042c6 <I2C_SlaveTransmit_TXE+0x72>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2221      	movs	r2, #33	; 0x21
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2228      	movs	r2, #40	; 0x28
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7fd f811 	bl	80012e8 <HAL_I2C_SlaveTxCpltCallback>
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <I2C_SlaveTransmit_BTF>:
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d011      	beq.n	8004304 <I2C_SlaveTransmit_BTF+0x36>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	611a      	str	r2, [r3, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <I2C_SlaveReceive_RXNE>:
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431e:	73fb      	strb	r3, [r7, #15]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d02c      	beq.n	8004384 <I2C_SlaveReceive_RXNE+0x74>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d114      	bne.n	8004384 <I2C_SlaveReceive_RXNE+0x74>
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	2b2a      	cmp	r3, #42	; 0x2a
 800435e:	d111      	bne.n	8004384 <I2C_SlaveReceive_RXNE+0x74>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2222      	movs	r2, #34	; 0x22
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2228      	movs	r2, #40	; 0x28
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fc ffd6 	bl	8001330 <HAL_I2C_SlaveRxCpltCallback>
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <I2C_SlaveReceive_BTF>:
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d012      	beq.n	80043c4 <I2C_SlaveReceive_BTF+0x38>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <I2C_Slave_ADDR>:
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	2300      	movs	r3, #0
 80043dc:	73fb      	strb	r3, [r7, #15]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043ea:	2b28      	cmp	r3, #40	; 0x28
 80043ec:	d125      	bne.n	800443a <I2C_Slave_ADDR+0x6a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <I2C_Slave_ADDR+0x3c>
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b00      	cmp	r3, #0
 8004414:	d103      	bne.n	800441e <I2C_Slave_ADDR+0x4e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	81bb      	strh	r3, [r7, #12]
 800441c:	e002      	b.n	8004424 <I2C_Slave_ADDR+0x54>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	81bb      	strh	r3, [r7, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800442c:	89ba      	ldrh	r2, [r7, #12]
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	4619      	mov	r1, r3
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc ff14 	bl	8001260 <HAL_I2C_AddrCallback>
 8004438:	e00e      	b.n	8004458 <I2C_Slave_ADDR+0x88>
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <I2C_Slave_STOPF>:
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446e:	73fb      	strb	r3, [r7, #15]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800447e:	605a      	str	r2, [r3, #4]
 8004480:	2300      	movs	r3, #0
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044bc:	d172      	bne.n	80045a4 <I2C_Slave_STOPF+0x144>
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	2b22      	cmp	r3, #34	; 0x22
 80044c2:	d002      	beq.n	80044ca <I2C_Slave_STOPF+0x6a>
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	2b2a      	cmp	r3, #42	; 0x2a
 80044c8:	d135      	bne.n	8004536 <I2C_Slave_STOPF+0xd6>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <I2C_Slave_STOPF+0x8e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f043 0204 	orr.w	r2, r3, #4
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe faf7 	bl	8002af6 <HAL_DMA_GetState>
 8004508:	4603      	mov	r3, r0
 800450a:	2b01      	cmp	r3, #1
 800450c:	d049      	beq.n	80045a2 <I2C_Slave_STOPF+0x142>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	4a69      	ldr	r2, [pc, #420]	; (80046b8 <I2C_Slave_STOPF+0x258>)
 8004514:	651a      	str	r2, [r3, #80]	; 0x50
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe fac9 	bl	8002ab2 <HAL_DMA_Abort_IT>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d03d      	beq.n	80045a2 <I2C_Slave_STOPF+0x142>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004530:	4610      	mov	r0, r2
 8004532:	4798      	blx	r3
 8004534:	e035      	b.n	80045a2 <I2C_Slave_STOPF+0x142>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	b29a      	uxth	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <I2C_Slave_STOPF+0xfa>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f043 0204 	orr.w	r2, r3, #4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe fac1 	bl	8002af6 <HAL_DMA_GetState>
 8004574:	4603      	mov	r3, r0
 8004576:	2b01      	cmp	r3, #1
 8004578:	d014      	beq.n	80045a4 <I2C_Slave_STOPF+0x144>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457e:	4a4e      	ldr	r2, [pc, #312]	; (80046b8 <I2C_Slave_STOPF+0x258>)
 8004580:	651a      	str	r2, [r3, #80]	; 0x50
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fa93 	bl	8002ab2 <HAL_DMA_Abort_IT>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <I2C_Slave_STOPF+0x144>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800459c:	4610      	mov	r0, r2
 800459e:	4798      	blx	r3
 80045a0:	e000      	b.n	80045a4 <I2C_Slave_STOPF+0x144>
 80045a2:	bf00      	nop
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d03e      	beq.n	800462c <I2C_Slave_STOPF+0x1cc>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d112      	bne.n	80045e2 <I2C_Slave_STOPF+0x182>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d112      	bne.n	8004616 <I2C_Slave_STOPF+0x1b6>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	625a      	str	r2, [r3, #36]	; 0x24
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <I2C_Slave_STOPF+0x1cc>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f043 0204 	orr.w	r2, r3, #4
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <I2C_Slave_STOPF+0x1dc>
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f8b3 	bl	80047a0 <I2C_ITError>
 800463a:	e039      	b.n	80046b0 <I2C_Slave_STOPF+0x250>
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b2a      	cmp	r3, #42	; 0x2a
 8004640:	d109      	bne.n	8004656 <I2C_Slave_STOPF+0x1f6>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2228      	movs	r2, #40	; 0x28
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7fc fe6d 	bl	8001330 <HAL_I2C_SlaveRxCpltCallback>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b28      	cmp	r3, #40	; 0x28
 8004660:	d111      	bne.n	8004686 <I2C_Slave_STOPF+0x226>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a15      	ldr	r2, [pc, #84]	; (80046bc <I2C_Slave_STOPF+0x25c>)
 8004666:	62da      	str	r2, [r3, #44]	; 0x2c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fc fde2 	bl	8001248 <HAL_I2C_ListenCpltCallback>
 8004684:	e014      	b.n	80046b0 <I2C_Slave_STOPF+0x250>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	2b22      	cmp	r3, #34	; 0x22
 800468c:	d002      	beq.n	8004694 <I2C_Slave_STOPF+0x234>
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	2b22      	cmp	r3, #34	; 0x22
 8004692:	d10d      	bne.n	80046b0 <I2C_Slave_STOPF+0x250>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	631a      	str	r2, [r3, #48]	; 0x30
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fc fe40 	bl	8001330 <HAL_I2C_SlaveRxCpltCallback>
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	08004a05 	.word	0x08004a05
 80046bc:	ffff0000 	.word	0xffff0000

080046c0 <I2C_Slave_AF>:
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ce:	73fb      	strb	r3, [r7, #15]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d002      	beq.n	80046e2 <I2C_Slave_AF+0x22>
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d129      	bne.n	8004736 <I2C_Slave_AF+0x76>
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	2b28      	cmp	r3, #40	; 0x28
 80046e6:	d126      	bne.n	8004736 <I2C_Slave_AF+0x76>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a2c      	ldr	r2, [pc, #176]	; (800479c <I2C_Slave_AF+0xdc>)
 80046ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004706:	615a      	str	r2, [r3, #20]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fc fd8a 	bl	8001248 <HAL_I2C_ListenCpltCallback>
 8004734:	e02e      	b.n	8004794 <I2C_Slave_AF+0xd4>
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	2b21      	cmp	r3, #33	; 0x21
 800473a:	d126      	bne.n	800478a <I2C_Slave_AF+0xca>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a17      	ldr	r2, [pc, #92]	; (800479c <I2C_Slave_AF+0xdc>)
 8004740:	62da      	str	r2, [r3, #44]	; 0x2c
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2221      	movs	r2, #33	; 0x21
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004766:	605a      	str	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004770:	615a      	str	r2, [r3, #20]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fc fdb0 	bl	80012e8 <HAL_I2C_SlaveTxCpltCallback>
 8004788:	e004      	b.n	8004794 <I2C_Slave_AF+0xd4>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004792:	615a      	str	r2, [r3, #20]
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	ffff0000 	.word	0xffff0000

080047a0 <I2C_ITError>:
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ae:	73fb      	strb	r3, [r7, #15]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b6:	73bb      	strb	r3, [r7, #14]
 80047b8:	7bbb      	ldrb	r3, [r7, #14]
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d002      	beq.n	80047c4 <I2C_ITError+0x24>
 80047be:	7bbb      	ldrb	r3, [r7, #14]
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	d10a      	bne.n	80047da <I2C_ITError+0x3a>
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2b22      	cmp	r3, #34	; 0x22
 80047c8:	d107      	bne.n	80047da <I2C_ITError+0x3a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047e0:	2b28      	cmp	r3, #40	; 0x28
 80047e2:	d107      	bne.n	80047f4 <I2C_ITError+0x54>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2228      	movs	r2, #40	; 0x28
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047f2:	e015      	b.n	8004820 <I2C_ITError+0x80>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004802:	d00a      	beq.n	800481a <I2C_ITError+0x7a>
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	2b60      	cmp	r3, #96	; 0x60
 8004808:	d007      	beq.n	800481a <I2C_ITError+0x7a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800482a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482e:	d162      	bne.n	80048f6 <I2C_ITError+0x156>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800483e:	605a      	str	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d020      	beq.n	8004890 <I2C_ITError+0xf0>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004852:	4a6a      	ldr	r2, [pc, #424]	; (80049fc <I2C_ITError+0x25c>)
 8004854:	651a      	str	r2, [r3, #80]	; 0x50
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485a:	4618      	mov	r0, r3
 800485c:	f7fe f929 	bl	8002ab2 <HAL_DMA_Abort_IT>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8089 	beq.w	800497a <I2C_ITError+0x1da>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800488a:	4610      	mov	r0, r2
 800488c:	4798      	blx	r3
 800488e:	e074      	b.n	800497a <I2C_ITError+0x1da>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	4a59      	ldr	r2, [pc, #356]	; (80049fc <I2C_ITError+0x25c>)
 8004896:	651a      	str	r2, [r3, #80]	; 0x50
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	4618      	mov	r0, r3
 800489e:	f7fe f908 	bl	8002ab2 <HAL_DMA_Abort_IT>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d068      	beq.n	800497a <I2C_ITError+0x1da>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b40      	cmp	r3, #64	; 0x40
 80048b4:	d10b      	bne.n	80048ce <I2C_ITError+0x12e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0201 	bic.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048f0:	4610      	mov	r0, r2
 80048f2:	4798      	blx	r3
 80048f4:	e041      	b.n	800497a <I2C_ITError+0x1da>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b60      	cmp	r3, #96	; 0x60
 8004900:	d125      	bne.n	800494e <I2C_ITError+0x1ae>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	641a      	str	r2, [r3, #64]	; 0x40
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491a:	2b40      	cmp	r3, #64	; 0x40
 800491c:	d10b      	bne.n	8004936 <I2C_ITError+0x196>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	701a      	strb	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	625a      	str	r2, [r3, #36]	; 0x24
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fe fee2 	bl	8003710 <HAL_I2C_AbortCpltCallback>
 800494c:	e015      	b.n	800497a <I2C_ITError+0x1da>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	d10b      	bne.n	8004974 <I2C_ITError+0x1d4>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	625a      	str	r2, [r3, #36]	; 0x24
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fc fd11 	bl	800139c <HAL_I2C_ErrorCallback>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10e      	bne.n	80049a8 <I2C_ITError+0x208>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d109      	bne.n	80049a8 <I2C_ITError+0x208>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <I2C_ITError+0x208>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <I2C_ITError+0x218>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049b6:	605a      	str	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049be:	73fb      	strb	r3, [r7, #15]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d113      	bne.n	80049f4 <I2C_ITError+0x254>
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b28      	cmp	r3, #40	; 0x28
 80049d0:	d110      	bne.n	80049f4 <I2C_ITError+0x254>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a0a      	ldr	r2, [pc, #40]	; (8004a00 <I2C_ITError+0x260>)
 80049d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fc fc2a 	bl	8001248 <HAL_I2C_ListenCpltCallback>
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	08004a05 	.word	0x08004a05
 8004a00:	ffff0000 	.word	0xffff0000

08004a04 <I2C_DMAAbort>:
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1c:	74fb      	strb	r3, [r7, #19]
 8004a1e:	4b4b      	ldr	r3, [pc, #300]	; (8004b4c <I2C_DMAAbort+0x148>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	08db      	lsrs	r3, r3, #3
 8004a24:	4a4a      	ldr	r2, [pc, #296]	; (8004b50 <I2C_DMAAbort+0x14c>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	0a1a      	lsrs	r2, r3, #8
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	00da      	lsls	r2, r3, #3
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <I2C_DMAAbort+0x48>
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0220 	orr.w	r2, r3, #32
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
 8004a4a:	e00a      	b.n	8004a62 <I2C_DMAAbort+0x5e>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a60:	d0ea      	beq.n	8004a38 <I2C_DMAAbort+0x34>
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <I2C_DMAAbort+0x6e>
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6e:	2200      	movs	r2, #0
 8004a70:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <I2C_DMAAbort+0x7e>
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	2200      	movs	r2, #0
 8004a80:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2200      	movs	r2, #0
 8004a96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <I2C_DMAAbort+0xa4>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	651a      	str	r2, [r3, #80]	; 0x50
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <I2C_DMAAbort+0xb4>
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	651a      	str	r2, [r3, #80]	; 0x50
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0201 	bic.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b60      	cmp	r3, #96	; 0x60
 8004ad2:	d10e      	bne.n	8004af2 <I2C_DMAAbort+0xee>
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8004aea:	6978      	ldr	r0, [r7, #20]
 8004aec:	f7fe fe10 	bl	8003710 <HAL_I2C_AbortCpltCallback>
 8004af0:	e027      	b.n	8004b42 <I2C_DMAAbort+0x13e>
 8004af2:	7cfb      	ldrb	r3, [r7, #19]
 8004af4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004af8:	2b28      	cmp	r3, #40	; 0x28
 8004afa:	d117      	bne.n	8004b2c <I2C_DMAAbort+0x128>
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2228      	movs	r2, #40	; 0x28
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b2a:	e007      	b.n	8004b3c <I2C_DMAAbort+0x138>
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b3c:	6978      	ldr	r0, [r7, #20]
 8004b3e:	f7fc fc2d 	bl	800139c <HAL_I2C_ErrorCallback>
 8004b42:	bf00      	nop
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20000024 	.word	0x20000024
 8004b50:	14f8b589 	.word	0x14f8b589

08004b54 <I2C_WaitOnSTOPRequestThroughIT>:
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	4b13      	ldr	r3, [pc, #76]	; (8004bb0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	08db      	lsrs	r3, r3, #3
 8004b66:	4a13      	ldr	r2, [pc, #76]	; (8004bb4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b68:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6c:	0a1a      	lsrs	r2, r3, #8
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d107      	bne.n	8004b92 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f043 0220 	orr.w	r2, r3, #32
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e008      	b.n	8004ba4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba0:	d0e9      	beq.n	8004b76 <I2C_WaitOnSTOPRequestThroughIT+0x22>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	20000024 	.word	0x20000024
 8004bb4:	14f8b589 	.word	0x14f8b589

08004bb8 <I2C_ConvertOtherXferOptions>:
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004bc8:	d103      	bne.n	8004bd2 <I2C_ConvertOtherXferOptions+0x1a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bd0:	e007      	b.n	8004be2 <I2C_ConvertOtherXferOptions+0x2a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004bda:	d102      	bne.n	8004be2 <I2C_ConvertOtherXferOptions+0x2a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2208      	movs	r2, #8
 8004be0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <HAL_PCD_Init>:
 8004bee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf0:	b08f      	sub	sp, #60	; 0x3c
 8004bf2:	af0a      	add	r7, sp, #40	; 0x28
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_PCD_Init+0x12>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e10f      	b.n	8004e20 <HAL_PCD_Init+0x232>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_PCD_Init+0x32>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f007 fd8c 	bl	800c738 <HAL_PCD_MspInit>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2203      	movs	r2, #3
 8004c24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d102      	bne.n	8004c3a <HAL_PCD_Init+0x4c>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	611a      	str	r2, [r3, #16]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f004 f8df 	bl	8008e02 <USB_DisableGlobalInt>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	603b      	str	r3, [r7, #0]
 8004c4a:	687e      	ldr	r6, [r7, #4]
 8004c4c:	466d      	mov	r5, sp
 8004c4e:	f106 0410 	add.w	r4, r6, #16
 8004c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c62:	1d33      	adds	r3, r6, #4
 8004c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c66:	6838      	ldr	r0, [r7, #0]
 8004c68:	f003 ffb6 	bl	8008bd8 <USB_CoreInit>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_PCD_Init+0x90>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e0d0      	b.n	8004e20 <HAL_PCD_Init+0x232>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2100      	movs	r1, #0
 8004c84:	4618      	mov	r0, r3
 8004c86:	f004 f8cd 	bl	8008e24 <USB_SetCurrentMode>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	73fb      	strb	r3, [r7, #15]
 8004c8e:	e04a      	b.n	8004d26 <HAL_PCD_Init+0x138>
 8004c90:	7bfa      	ldrb	r2, [r7, #15]
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	333d      	adds	r3, #61	; 0x3d
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	7bfa      	ldrb	r2, [r7, #15]
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	440b      	add	r3, r1
 8004cb2:	333c      	adds	r3, #60	; 0x3c
 8004cb4:	7bfa      	ldrb	r2, [r7, #15]
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	7bfa      	ldrb	r2, [r7, #15]
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	b298      	uxth	r0, r3
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	3344      	adds	r3, #68	; 0x44
 8004ccc:	4602      	mov	r2, r0
 8004cce:	801a      	strh	r2, [r3, #0]
 8004cd0:	7bfa      	ldrb	r2, [r7, #15]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	3340      	adds	r3, #64	; 0x40
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	7bfa      	ldrb	r2, [r7, #15]
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	3348      	adds	r3, #72	; 0x48
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	7bfa      	ldrb	r2, [r7, #15]
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	334c      	adds	r3, #76	; 0x4c
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	7bfa      	ldrb	r2, [r7, #15]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	3354      	adds	r3, #84	; 0x54
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	3301      	adds	r3, #1
 8004d24:	73fb      	strb	r3, [r7, #15]
 8004d26:	7bfa      	ldrb	r2, [r7, #15]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d3af      	bcc.n	8004c90 <HAL_PCD_Init+0xa2>
 8004d30:	2300      	movs	r3, #0
 8004d32:	73fb      	strb	r3, [r7, #15]
 8004d34:	e044      	b.n	8004dc0 <HAL_PCD_Init+0x1d2>
 8004d36:	7bfa      	ldrb	r2, [r7, #15]
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4413      	add	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	7bfa      	ldrb	r2, [r7, #15]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004d5e:	7bfa      	ldrb	r2, [r7, #15]
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	7bfa      	ldrb	r2, [r7, #15]
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
 8004d78:	7bfa      	ldrb	r2, [r7, #15]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	7bfa      	ldrb	r2, [r7, #15]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	7bfa      	ldrb	r2, [r7, #15]
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
 8004dc0:	7bfa      	ldrb	r2, [r7, #15]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d3b5      	bcc.n	8004d36 <HAL_PCD_Init+0x148>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	687e      	ldr	r6, [r7, #4]
 8004dd2:	466d      	mov	r5, sp
 8004dd4:	f106 0410 	add.w	r4, r6, #16
 8004dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004de0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004de4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004de8:	1d33      	adds	r3, r6, #4
 8004dea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dec:	6838      	ldr	r0, [r7, #0]
 8004dee:	f004 f865 	bl	8008ebc <USB_DevInit>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_PCD_Init+0x216>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8004e00:	2301      	movs	r3, #1
 8004e02:	e00d      	b.n	8004e20 <HAL_PCD_Init+0x232>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f005 f9b4 	bl	800a186 <USB_DevDisconnect>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e28 <HAL_PCD_Start>:
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_PCD_Start+0x1c>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e020      	b.n	8004e86 <HAL_PCD_Start+0x5e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d109      	bne.n	8004e68 <HAL_PCD_Start+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d005      	beq.n	8004e68 <HAL_PCD_Start+0x40>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f003 ffb7 	bl	8008de0 <USB_EnableGlobalInt>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f005 f964 	bl	800a144 <USB_DevConnect>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004e84:	2300      	movs	r3, #0
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_PCD_IRQHandler>:
 8004e8e:	b590      	push	{r4, r7, lr}
 8004e90:	b08d      	sub	sp, #52	; 0x34
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	623b      	str	r3, [r7, #32]
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	61fb      	str	r3, [r7, #28]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f005 fa22 	bl	800a2ee <USB_GetMode>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f040 848a 	bne.w	80057c6 <HAL_PCD_IRQHandler+0x938>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f005 f986 	bl	800a1c8 <USB_ReadInterrupts>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8480 	beq.w	80057c4 <HAL_PCD_IRQHandler+0x936>
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	0a1b      	lsrs	r3, r3, #8
 8004ece:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f005 f973 	bl	800a1c8 <USB_ReadInterrupts>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d107      	bne.n	8004efc <HAL_PCD_IRQHandler+0x6e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f002 0202 	and.w	r2, r2, #2
 8004efa:	615a      	str	r2, [r3, #20]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f005 f961 	bl	800a1c8 <USB_ReadInterrupts>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d161      	bne.n	8004fd4 <HAL_PCD_IRQHandler+0x146>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0210 	bic.w	r2, r2, #16
 8004f1e:	619a      	str	r2, [r3, #24]
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f003 020f 	and.w	r2, r3, #15
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	0c5b      	lsrs	r3, r3, #17
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d124      	bne.n	8004f96 <HAL_PCD_IRQHandler+0x108>
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d035      	beq.n	8004fc4 <HAL_PCD_IRQHandler+0x136>
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	6919      	ldr	r1, [r3, #16]
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	091b      	lsrs	r3, r3, #4
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6a38      	ldr	r0, [r7, #32]
 8004f6c:	f004 ff98 	bl	8009ea0 <USB_ReadPacket>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	091b      	lsrs	r3, r3, #4
 8004f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f7c:	441a      	add	r2, r3
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	611a      	str	r2, [r3, #16]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	6a1a      	ldr	r2, [r3, #32]
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f8e:	441a      	add	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	621a      	str	r2, [r3, #32]
 8004f94:	e016      	b.n	8004fc4 <HAL_PCD_IRQHandler+0x136>
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	0c5b      	lsrs	r3, r3, #17
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	2b06      	cmp	r3, #6
 8004fa0:	d110      	bne.n	8004fc4 <HAL_PCD_IRQHandler+0x136>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004fa8:	2208      	movs	r2, #8
 8004faa:	4619      	mov	r1, r3
 8004fac:	6a38      	ldr	r0, [r7, #32]
 8004fae:	f004 ff77 	bl	8009ea0 <USB_ReadPacket>
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	6a1a      	ldr	r2, [r3, #32]
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	091b      	lsrs	r3, r3, #4
 8004fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fbe:	441a      	add	r2, r3
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	621a      	str	r2, [r3, #32]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0210 	orr.w	r2, r2, #16
 8004fd2:	619a      	str	r2, [r3, #24]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f005 f8f5 	bl	800a1c8 <USB_ReadInterrupts>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fe4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fe8:	f040 80a7 	bne.w	800513a <HAL_PCD_IRQHandler+0x2ac>
 8004fec:	2300      	movs	r3, #0
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f005 f8fa 	bl	800a1ee <USB_ReadDevAllOutEpInterrupt>
 8004ffa:	62b8      	str	r0, [r7, #40]	; 0x28
 8004ffc:	e099      	b.n	8005132 <HAL_PCD_IRQHandler+0x2a4>
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 808e 	beq.w	8005126 <HAL_PCD_IRQHandler+0x298>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f005 f91e 	bl	800a256 <USB_ReadDevOutEPInterrupt>
 800501a:	6138      	str	r0, [r7, #16]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00c      	beq.n	8005040 <HAL_PCD_IRQHandler+0x1b2>
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005032:	461a      	mov	r2, r3
 8005034:	2301      	movs	r3, #1
 8005036:	6093      	str	r3, [r2, #8]
 8005038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fec2 	bl	8005dc4 <PCD_EP_OutXfrComplete_int>
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00c      	beq.n	8005064 <HAL_PCD_IRQHandler+0x1d6>
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005056:	461a      	mov	r2, r3
 8005058:	2308      	movs	r3, #8
 800505a:	6093      	str	r3, [r2, #8]
 800505c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 ff98 	bl	8005f94 <PCD_EP_OutSetupPacket_int>
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f003 0310 	and.w	r3, r3, #16
 800506a:	2b00      	cmp	r3, #0
 800506c:	d008      	beq.n	8005080 <HAL_PCD_IRQHandler+0x1f2>
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507a:	461a      	mov	r2, r3
 800507c:	2310      	movs	r3, #16
 800507e:	6093      	str	r3, [r2, #8]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d030      	beq.n	80050ec <HAL_PCD_IRQHandler+0x25e>
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	2b80      	cmp	r3, #128	; 0x80
 8005094:	d109      	bne.n	80050aa <HAL_PCD_IRQHandler+0x21c>
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050a8:	6053      	str	r3, [r2, #4]
 80050aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ac:	4613      	mov	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	4413      	add	r3, r2
 80050bc:	3304      	adds	r3, #4
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	78db      	ldrb	r3, [r3, #3]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d108      	bne.n	80050da <HAL_PCD_IRQHandler+0x24c>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2200      	movs	r2, #0
 80050cc:	70da      	strb	r2, [r3, #3]
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	4619      	mov	r1, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f007 fc2b 	bl	800c930 <HAL_PCD_ISOOUTIncompleteCallback>
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e6:	461a      	mov	r2, r3
 80050e8:	2302      	movs	r3, #2
 80050ea:	6093      	str	r3, [r2, #8]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d008      	beq.n	8005108 <HAL_PCD_IRQHandler+0x27a>
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005102:	461a      	mov	r2, r3
 8005104:	2320      	movs	r3, #32
 8005106:	6093      	str	r3, [r2, #8]
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <HAL_PCD_IRQHandler+0x298>
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511e:	461a      	mov	r2, r3
 8005120:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005124:	6093      	str	r3, [r2, #8]
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	3301      	adds	r3, #1
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	085b      	lsrs	r3, r3, #1
 8005130:	62bb      	str	r3, [r7, #40]	; 0x28
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	2b00      	cmp	r3, #0
 8005136:	f47f af62 	bne.w	8004ffe <HAL_PCD_IRQHandler+0x170>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f005 f842 	bl	800a1c8 <USB_ReadInterrupts>
 8005144:	4603      	mov	r3, r0
 8005146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800514a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800514e:	f040 80db 	bne.w	8005308 <HAL_PCD_IRQHandler+0x47a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f005 f863 	bl	800a222 <USB_ReadDevAllInEpInterrupt>
 800515c:	62b8      	str	r0, [r7, #40]	; 0x28
 800515e:	2300      	movs	r3, #0
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
 8005162:	e0cd      	b.n	8005300 <HAL_PCD_IRQHandler+0x472>
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 80c2 	beq.w	80052f4 <HAL_PCD_IRQHandler+0x466>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	f005 f889 	bl	800a292 <USB_ReadDevInEPInterrupt>
 8005180:	6138      	str	r0, [r7, #16]
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d057      	beq.n	800523c <HAL_PCD_IRQHandler+0x3ae>
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	2201      	movs	r2, #1
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	43db      	mvns	r3, r3
 80051a6:	69f9      	ldr	r1, [r7, #28]
 80051a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051ac:	4013      	ands	r3, r2
 80051ae:	634b      	str	r3, [r1, #52]	; 0x34
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051bc:	461a      	mov	r2, r3
 80051be:	2301      	movs	r3, #1
 80051c0:	6093      	str	r3, [r2, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d132      	bne.n	8005230 <HAL_PCD_IRQHandler+0x3a2>
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ce:	4613      	mov	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	440b      	add	r3, r1
 80051d8:	334c      	adds	r3, #76	; 0x4c
 80051da:	6819      	ldr	r1, [r3, #0]
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e0:	4613      	mov	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4403      	add	r3, r0
 80051ea:	3348      	adds	r3, #72	; 0x48
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4419      	add	r1, r3
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f4:	4613      	mov	r3, r2
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4403      	add	r3, r0
 80051fe:	334c      	adds	r3, #76	; 0x4c
 8005200:	6019      	str	r1, [r3, #0]
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d113      	bne.n	8005230 <HAL_PCD_IRQHandler+0x3a2>
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520c:	4613      	mov	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	3354      	adds	r3, #84	; 0x54
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d108      	bne.n	8005230 <HAL_PCD_IRQHandler+0x3a2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005228:	461a      	mov	r2, r3
 800522a:	2101      	movs	r1, #1
 800522c:	f005 f890 	bl	800a350 <USB_EP0_OutStart>
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	b2db      	uxtb	r3, r3
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f007 faff 	bl	800c83a <HAL_PCD_DataInStageCallback>
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d008      	beq.n	8005258 <HAL_PCD_IRQHandler+0x3ca>
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005252:	461a      	mov	r2, r3
 8005254:	2308      	movs	r3, #8
 8005256:	6093      	str	r3, [r2, #8]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f003 0310 	and.w	r3, r3, #16
 800525e:	2b00      	cmp	r3, #0
 8005260:	d008      	beq.n	8005274 <HAL_PCD_IRQHandler+0x3e6>
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	461a      	mov	r2, r3
 8005270:	2310      	movs	r3, #16
 8005272:	6093      	str	r3, [r2, #8]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <HAL_PCD_IRQHandler+0x402>
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528a:	461a      	mov	r2, r3
 800528c:	2340      	movs	r3, #64	; 0x40
 800528e:	6093      	str	r3, [r2, #8]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d023      	beq.n	80052e2 <HAL_PCD_IRQHandler+0x454>
 800529a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800529c:	6a38      	ldr	r0, [r7, #32]
 800529e:	f003 ff71 	bl	8009184 <USB_FlushTxFifo>
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	4613      	mov	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	3338      	adds	r3, #56	; 0x38
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	3304      	adds	r3, #4
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	78db      	ldrb	r3, [r3, #3]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d108      	bne.n	80052d0 <HAL_PCD_IRQHandler+0x442>
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2200      	movs	r2, #0
 80052c2:	70da      	strb	r2, [r3, #3]
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	4619      	mov	r1, r3
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f007 fb42 	bl	800c954 <HAL_PCD_ISOINIncompleteCallback>
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	461a      	mov	r2, r3
 80052de:	2302      	movs	r3, #2
 80052e0:	6093      	str	r3, [r2, #8]
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <HAL_PCD_IRQHandler+0x466>
 80052ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fcdb 	bl	8005caa <PCD_WriteEmptyTxFifo>
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	3301      	adds	r3, #1
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	085b      	lsrs	r3, r3, #1
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	2b00      	cmp	r3, #0
 8005304:	f47f af2e 	bne.w	8005164 <HAL_PCD_IRQHandler+0x2d6>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f004 ff5b 	bl	800a1c8 <USB_ReadInterrupts>
 8005312:	4603      	mov	r3, r0
 8005314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800531c:	d122      	bne.n	8005364 <HAL_PCD_IRQHandler+0x4d6>
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	6053      	str	r3, [r2, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005338:	2b01      	cmp	r3, #1
 800533a:	d108      	bne.n	800534e <HAL_PCD_IRQHandler+0x4c0>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8005344:	2100      	movs	r1, #0
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fec2 	bl	80060d0 <HAL_PCDEx_LPM_Callback>
 800534c:	e002      	b.n	8005354 <HAL_PCD_IRQHandler+0x4c6>
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f007 fae0 	bl	800c914 <HAL_PCD_ResumeCallback>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005362:	615a      	str	r2, [r3, #20]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f004 ff2d 	bl	800a1c8 <USB_ReadInterrupts>
 800536e:	4603      	mov	r3, r0
 8005370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005378:	d112      	bne.n	80053a0 <HAL_PCD_IRQHandler+0x512>
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b01      	cmp	r3, #1
 8005388:	d102      	bne.n	8005390 <HAL_PCD_IRQHandler+0x502>
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f007 fa9c 	bl	800c8c8 <HAL_PCD_SuspendCallback>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800539e:	615a      	str	r2, [r3, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f004 ff0f 	bl	800a1c8 <USB_ReadInterrupts>
 80053aa:	4603      	mov	r3, r0
 80053ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b4:	f040 80b7 	bne.w	8005526 <HAL_PCD_IRQHandler+0x698>
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053c6:	f023 0301 	bic.w	r3, r3, #1
 80053ca:	6053      	str	r3, [r2, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2110      	movs	r1, #16
 80053d2:	4618      	mov	r0, r3
 80053d4:	f003 fed6 	bl	8009184 <USB_FlushTxFifo>
 80053d8:	2300      	movs	r3, #0
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053dc:	e046      	b.n	800546c <HAL_PCD_IRQHandler+0x5de>
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	461a      	mov	r2, r3
 80053ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053f0:	6093      	str	r3, [r2, #8]
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	461a      	mov	r2, r3
 8005420:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005424:	6093      	str	r3, [r2, #8]
 8005426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005436:	0151      	lsls	r1, r2, #5
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	440a      	add	r2, r1
 800543c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005440:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005456:	0151      	lsls	r1, r2, #5
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	440a      	add	r2, r1
 800545c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005460:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	3301      	adds	r3, #1
 800546a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005472:	429a      	cmp	r2, r3
 8005474:	d3b3      	bcc.n	80053de <HAL_PCD_IRQHandler+0x550>
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005484:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005488:	61d3      	str	r3, [r2, #28]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548e:	2b00      	cmp	r3, #0
 8005490:	d016      	beq.n	80054c0 <HAL_PCD_IRQHandler+0x632>
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a2:	f043 030b 	orr.w	r3, r3, #11
 80054a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b8:	f043 030b 	orr.w	r3, r3, #11
 80054bc:	6453      	str	r3, [r2, #68]	; 0x44
 80054be:	e015      	b.n	80054ec <HAL_PCD_IRQHandler+0x65e>
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054d2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80054d6:	6153      	str	r3, [r2, #20]
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054e6:	f043 030b 	orr.w	r3, r3, #11
 80054ea:	6113      	str	r3, [r2, #16]
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	b2d9      	uxtb	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005510:	461a      	mov	r2, r3
 8005512:	f004 ff1d 	bl	800a350 <USB_EP0_OutStart>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695a      	ldr	r2, [r3, #20]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005524:	615a      	str	r2, [r3, #20]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f004 fe4c 	bl	800a1c8 <USB_ReadInterrupts>
 8005530:	4603      	mov	r3, r0
 8005532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553a:	d124      	bne.n	8005586 <HAL_PCD_IRQHandler+0x6f8>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f004 fee2 	bl	800a30a <USB_ActivateSetup>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f003 fe97 	bl	800927e <USB_GetDevSpeed>
 8005550:	4603      	mov	r3, r0
 8005552:	461a      	mov	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	60da      	str	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681c      	ldr	r4, [r3, #0]
 800555c:	f001 f9e8 	bl	8006930 <HAL_RCC_GetHCLKFreq>
 8005560:	4601      	mov	r1, r0
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	4620      	mov	r0, r4
 800556c:	f003 fb96 	bl	8008c9c <USB_SetTurnaroundTime>
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f007 f98a 	bl	800c88a <HAL_PCD_ResetCallback>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695a      	ldr	r2, [r3, #20]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005584:	615a      	str	r2, [r3, #20]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f004 fe1c 	bl	800a1c8 <USB_ReadInterrupts>
 8005590:	4603      	mov	r3, r0
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b08      	cmp	r3, #8
 8005598:	d10a      	bne.n	80055b0 <HAL_PCD_IRQHandler+0x722>
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f007 f967 	bl	800c86e <HAL_PCD_SOFCallback>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f002 0208 	and.w	r2, r2, #8
 80055ae:	615a      	str	r2, [r3, #20]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f004 fe07 	bl	800a1c8 <USB_ReadInterrupts>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c0:	2b80      	cmp	r3, #128	; 0x80
 80055c2:	d122      	bne.n	800560a <HAL_PCD_IRQHandler+0x77c>
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	619a      	str	r2, [r3, #24]
 80055d0:	2301      	movs	r3, #1
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
 80055d4:	e014      	b.n	8005600 <HAL_PCD_IRQHandler+0x772>
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055da:	4613      	mov	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d105      	bne.n	80055fa <HAL_PCD_IRQHandler+0x76c>
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fb27 	bl	8005c48 <HAL_PCD_EP_Abort>
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	3301      	adds	r3, #1
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005606:	429a      	cmp	r2, r3
 8005608:	d3e5      	bcc.n	80055d6 <HAL_PCD_IRQHandler+0x748>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f004 fdda 	bl	800a1c8 <USB_ReadInterrupts>
 8005614:	4603      	mov	r3, r0
 8005616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800561a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800561e:	d13b      	bne.n	8005698 <HAL_PCD_IRQHandler+0x80a>
 8005620:	2301      	movs	r3, #1
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
 8005624:	e02b      	b.n	800567e <HAL_PCD_IRQHandler+0x7f0>
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563a:	4613      	mov	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	440b      	add	r3, r1
 8005644:	3340      	adds	r3, #64	; 0x40
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d115      	bne.n	8005678 <HAL_PCD_IRQHandler+0x7ea>
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	da12      	bge.n	8005678 <HAL_PCD_IRQHandler+0x7ea>
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005656:	4613      	mov	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	440b      	add	r3, r1
 8005660:	333f      	adds	r3, #63	; 0x3f
 8005662:	2201      	movs	r2, #1
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	b2db      	uxtb	r3, r3
 800566a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800566e:	b2db      	uxtb	r3, r3
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fae8 	bl	8005c48 <HAL_PCD_EP_Abort>
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	3301      	adds	r3, #1
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005684:	429a      	cmp	r2, r3
 8005686:	d3ce      	bcc.n	8005626 <HAL_PCD_IRQHandler+0x798>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695a      	ldr	r2, [r3, #20]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005696:	615a      	str	r2, [r3, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f004 fd93 	bl	800a1c8 <USB_ReadInterrupts>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056ac:	d155      	bne.n	800575a <HAL_PCD_IRQHandler+0x8cc>
 80056ae:	2301      	movs	r3, #1
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
 80056b2:	e045      	b.n	8005740 <HAL_PCD_IRQHandler+0x8b2>
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c8:	4613      	mov	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d12e      	bne.n	800573a <HAL_PCD_IRQHandler+0x8ac>
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	da2b      	bge.n	800573a <HAL_PCD_IRQHandler+0x8ac>
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d121      	bne.n	800573a <HAL_PCD_IRQHandler+0x8ac>
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fa:	4613      	mov	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005708:	2201      	movs	r2, #1
 800570a:	701a      	strb	r2, [r3, #0]
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	619a      	str	r2, [r3, #24]
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <HAL_PCD_IRQHandler+0x8ac>
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005736:	6053      	str	r3, [r2, #4]
 8005738:	e007      	b.n	800574a <HAL_PCD_IRQHandler+0x8bc>
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	3301      	adds	r3, #1
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005746:	429a      	cmp	r2, r3
 8005748:	d3b4      	bcc.n	80056b4 <HAL_PCD_IRQHandler+0x826>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005758:	615a      	str	r2, [r3, #20]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f004 fd32 	bl	800a1c8 <USB_ReadInterrupts>
 8005764:	4603      	mov	r3, r0
 8005766:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800576a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576e:	d10a      	bne.n	8005786 <HAL_PCD_IRQHandler+0x8f8>
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f007 f901 	bl	800c978 <HAL_PCD_ConnectCallback>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005784:	615a      	str	r2, [r3, #20]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f004 fd1c 	bl	800a1c8 <USB_ReadInterrupts>
 8005790:	4603      	mov	r3, r0
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b04      	cmp	r3, #4
 8005798:	d115      	bne.n	80057c6 <HAL_PCD_IRQHandler+0x938>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_PCD_IRQHandler+0x924>
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f007 f8f1 	bl	800c994 <HAL_PCD_DisconnectCallback>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6859      	ldr	r1, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
 80057c2:	e000      	b.n	80057c6 <HAL_PCD_IRQHandler+0x938>
 80057c4:	bf00      	nop
 80057c6:	3734      	adds	r7, #52	; 0x34
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd90      	pop	{r4, r7, pc}

080057cc <HAL_PCD_SetAddress>:
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	70fb      	strb	r3, [r7, #3]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <HAL_PCD_SetAddress+0x1a>
 80057e2:	2302      	movs	r3, #2
 80057e4:	e013      	b.n	800580e <HAL_PCD_SetAddress+0x42>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	78fa      	ldrb	r2, [r7, #3]
 80057f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	78fa      	ldrb	r2, [r7, #3]
 80057fc:	4611      	mov	r1, r2
 80057fe:	4618      	mov	r0, r3
 8005800:	f004 fc7a 	bl	800a0f8 <USB_SetDevAddress>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800580c:	2300      	movs	r3, #0
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_PCD_EP_Open>:
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	4608      	mov	r0, r1
 8005820:	4611      	mov	r1, r2
 8005822:	461a      	mov	r2, r3
 8005824:	4603      	mov	r3, r0
 8005826:	70fb      	strb	r3, [r7, #3]
 8005828:	460b      	mov	r3, r1
 800582a:	803b      	strh	r3, [r7, #0]
 800582c:	4613      	mov	r3, r2
 800582e:	70bb      	strb	r3, [r7, #2]
 8005830:	2300      	movs	r3, #0
 8005832:	72fb      	strb	r3, [r7, #11]
 8005834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005838:	2b00      	cmp	r3, #0
 800583a:	da0f      	bge.n	800585c <HAL_PCD_EP_Open+0x46>
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	f003 020f 	and.w	r2, r3, #15
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	3338      	adds	r3, #56	; 0x38
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4413      	add	r3, r2
 8005850:	3304      	adds	r3, #4
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	705a      	strb	r2, [r3, #1]
 800585a:	e00f      	b.n	800587c <HAL_PCD_EP_Open+0x66>
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	f003 020f 	and.w	r2, r3, #15
 8005862:	4613      	mov	r3, r2
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	4413      	add	r3, r2
 8005872:	3304      	adds	r3, #4
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	705a      	strb	r2, [r3, #1]
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	b2da      	uxtb	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	883a      	ldrh	r2, [r7, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	78ba      	ldrb	r2, [r7, #2]
 8005892:	711a      	strb	r2, [r3, #4]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	785b      	ldrb	r3, [r3, #1]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d004      	beq.n	80058a6 <HAL_PCD_EP_Open+0x90>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	811a      	strh	r2, [r3, #8]
 80058a6:	78bb      	ldrb	r3, [r7, #2]
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d102      	bne.n	80058b2 <HAL_PCD_EP_Open+0x9c>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	715a      	strb	r2, [r3, #5]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_PCD_EP_Open+0xaa>
 80058bc:	2302      	movs	r3, #2
 80058be:	e00e      	b.n	80058de <HAL_PCD_EP_Open+0xc8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68f9      	ldr	r1, [r7, #12]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f003 fcfa 	bl	80092c8 <USB_ActivateEndpoint>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80058dc:	7afb      	ldrb	r3, [r7, #11]
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_PCD_EP_Close>:
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	460b      	mov	r3, r1
 80058f0:	70fb      	strb	r3, [r7, #3]
 80058f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	da0f      	bge.n	800591a <HAL_PCD_EP_Close+0x34>
 80058fa:	78fb      	ldrb	r3, [r7, #3]
 80058fc:	f003 020f 	and.w	r2, r3, #15
 8005900:	4613      	mov	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	3338      	adds	r3, #56	; 0x38
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	4413      	add	r3, r2
 800590e:	3304      	adds	r3, #4
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	705a      	strb	r2, [r3, #1]
 8005918:	e00f      	b.n	800593a <HAL_PCD_EP_Close+0x54>
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	f003 020f 	and.w	r2, r3, #15
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	4413      	add	r3, r2
 8005930:	3304      	adds	r3, #4
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	705a      	strb	r2, [r3, #1]
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	f003 030f 	and.w	r3, r3, #15
 8005940:	b2da      	uxtb	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_PCD_EP_Close+0x6e>
 8005950:	2302      	movs	r3, #2
 8005952:	e00e      	b.n	8005972 <HAL_PCD_EP_Close+0x8c>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68f9      	ldr	r1, [r7, #12]
 8005962:	4618      	mov	r0, r3
 8005964:	f003 fd38 	bl	80093d8 <USB_DeactivateEndpoint>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005970:	2300      	movs	r3, #0
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_PCD_EP_Receive>:
 800597a:	b580      	push	{r7, lr}
 800597c:	b086      	sub	sp, #24
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	460b      	mov	r3, r1
 8005988:	72fb      	strb	r3, [r7, #11]
 800598a:	7afb      	ldrb	r3, [r7, #11]
 800598c:	f003 020f 	and.w	r2, r3, #15
 8005990:	4613      	mov	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	3304      	adds	r3, #4
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	611a      	str	r2, [r3, #16]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	619a      	str	r2, [r3, #24]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2200      	movs	r2, #0
 80059b4:	621a      	str	r2, [r3, #32]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2200      	movs	r2, #0
 80059ba:	705a      	strb	r2, [r3, #1]
 80059bc:	7afb      	ldrb	r3, [r7, #11]
 80059be:	f003 030f 	and.w	r3, r3, #15
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	701a      	strb	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d102      	bne.n	80059d6 <HAL_PCD_EP_Receive+0x5c>
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	615a      	str	r2, [r3, #20]
 80059d6:	7afb      	ldrb	r3, [r7, #11]
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <HAL_PCD_EP_Receive+0x7a>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6818      	ldr	r0, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	6979      	ldr	r1, [r7, #20]
 80059ee:	f004 f817 	bl	8009a20 <USB_EP0StartXfer>
 80059f2:	e008      	b.n	8005a06 <HAL_PCD_EP_Receive+0x8c>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6818      	ldr	r0, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	6979      	ldr	r1, [r7, #20]
 8005a02:	f003 fdc5 	bl	8009590 <USB_EPStartXfer>
 8005a06:	2300      	movs	r3, #0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_PCD_EP_GetRxCount>:
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	70fb      	strb	r3, [r7, #3]
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	f003 020f 	and.w	r2, r3, #15
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	4613      	mov	r3, r2
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_PCD_EP_Transmit>:
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	72fb      	strb	r3, [r7, #11]
 8005a50:	7afb      	ldrb	r3, [r7, #11]
 8005a52:	f003 020f 	and.w	r2, r3, #15
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	3338      	adds	r3, #56	; 0x38
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	3304      	adds	r3, #4
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	611a      	str	r2, [r3, #16]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	619a      	str	r2, [r3, #24]
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2200      	movs	r2, #0
 8005a78:	621a      	str	r2, [r3, #32]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	705a      	strb	r2, [r3, #1]
 8005a80:	7afb      	ldrb	r3, [r7, #11]
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d102      	bne.n	8005a9a <HAL_PCD_EP_Transmit+0x5a>
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	615a      	str	r2, [r3, #20]
 8005a9a:	7afb      	ldrb	r3, [r7, #11]
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d109      	bne.n	8005ab8 <HAL_PCD_EP_Transmit+0x78>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	6979      	ldr	r1, [r7, #20]
 8005ab2:	f003 ffb5 	bl	8009a20 <USB_EP0StartXfer>
 8005ab6:	e008      	b.n	8005aca <HAL_PCD_EP_Transmit+0x8a>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	6979      	ldr	r1, [r7, #20]
 8005ac6:	f003 fd63 	bl	8009590 <USB_EPStartXfer>
 8005aca:	2300      	movs	r3, #0
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_PCD_EP_SetStall>:
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	70fb      	strb	r3, [r7, #3]
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	f003 020f 	and.w	r2, r3, #15
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d901      	bls.n	8005af2 <HAL_PCD_EP_SetStall+0x1e>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e050      	b.n	8005b94 <HAL_PCD_EP_SetStall+0xc0>
 8005af2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	da0f      	bge.n	8005b1a <HAL_PCD_EP_SetStall+0x46>
 8005afa:	78fb      	ldrb	r3, [r7, #3]
 8005afc:	f003 020f 	and.w	r2, r3, #15
 8005b00:	4613      	mov	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	3338      	adds	r3, #56	; 0x38
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	3304      	adds	r3, #4
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	705a      	strb	r2, [r3, #1]
 8005b18:	e00d      	b.n	8005b36 <HAL_PCD_EP_SetStall+0x62>
 8005b1a:	78fa      	ldrb	r2, [r7, #3]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	705a      	strb	r2, [r3, #1]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	709a      	strb	r2, [r3, #2]
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_PCD_EP_SetStall+0x82>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e01e      	b.n	8005b94 <HAL_PCD_EP_SetStall+0xc0>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68f9      	ldr	r1, [r7, #12]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f004 f9f3 	bl	8009f50 <USB_EPSetStall>
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <HAL_PCD_EP_SetStall+0xb6>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	b2d9      	uxtb	r1, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b84:	461a      	mov	r2, r3
 8005b86:	f004 fbe3 	bl	800a350 <USB_EP0_OutStart>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005b92:	2300      	movs	r3, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_PCD_EP_ClrStall>:
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	f003 020f 	and.w	r2, r3, #15
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d901      	bls.n	8005bba <HAL_PCD_EP_ClrStall+0x1e>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e042      	b.n	8005c40 <HAL_PCD_EP_ClrStall+0xa4>
 8005bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	da0f      	bge.n	8005be2 <HAL_PCD_EP_ClrStall+0x46>
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	f003 020f 	and.w	r2, r3, #15
 8005bc8:	4613      	mov	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	3338      	adds	r3, #56	; 0x38
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	705a      	strb	r2, [r3, #1]
 8005be0:	e00f      	b.n	8005c02 <HAL_PCD_EP_ClrStall+0x66>
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	f003 020f 	and.w	r2, r3, #15
 8005be8:	4613      	mov	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	705a      	strb	r2, [r3, #1]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	709a      	strb	r2, [r3, #2]
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	701a      	strb	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_PCD_EP_ClrStall+0x86>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e00e      	b.n	8005c40 <HAL_PCD_EP_ClrStall+0xa4>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68f9      	ldr	r1, [r7, #12]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f004 f9fb 	bl	800a02c <USB_EPClearStall>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005c3e:	2300      	movs	r3, #0
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_PCD_EP_Abort>:
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	70fb      	strb	r3, [r7, #3]
 8005c54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	da0c      	bge.n	8005c76 <HAL_PCD_EP_Abort+0x2e>
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	f003 020f 	and.w	r2, r3, #15
 8005c62:	4613      	mov	r3, r2
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	4413      	add	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	3338      	adds	r3, #56	; 0x38
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	4413      	add	r3, r2
 8005c70:	3304      	adds	r3, #4
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	e00c      	b.n	8005c90 <HAL_PCD_EP_Abort+0x48>
 8005c76:	78fb      	ldrb	r3, [r7, #3]
 8005c78:	f003 020f 	and.w	r2, r3, #15
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68f9      	ldr	r1, [r7, #12]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f004 f81a 	bl	8009cd0 <USB_EPStopXfer>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	72fb      	strb	r3, [r7, #11]
 8005ca0:	7afb      	ldrb	r3, [r7, #11]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <PCD_WriteEmptyTxFifo>:
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b08a      	sub	sp, #40	; 0x28
 8005cae:	af02      	add	r7, sp, #8
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	3338      	adds	r3, #56	; 0x38
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	4413      	add	r3, r2
 8005cce:	3304      	adds	r3, #4
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a1a      	ldr	r2, [r3, #32]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d901      	bls.n	8005ce2 <PCD_WriteEmptyTxFifo+0x38>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e06c      	b.n	8005dbc <PCD_WriteEmptyTxFifo+0x112>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	61fb      	str	r3, [r7, #28]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d902      	bls.n	8005cfe <PCD_WriteEmptyTxFifo+0x54>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	3303      	adds	r3, #3
 8005d02:	089b      	lsrs	r3, r3, #2
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	e02b      	b.n	8005d60 <PCD_WriteEmptyTxFifo+0xb6>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	699a      	ldr	r2, [r3, #24]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	69fa      	ldr	r2, [r7, #28]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d902      	bls.n	8005d24 <PCD_WriteEmptyTxFifo+0x7a>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	3303      	adds	r3, #3
 8005d28:	089b      	lsrs	r3, r3, #2
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6919      	ldr	r1, [r3, #16]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	b298      	uxth	r0, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	4603      	mov	r3, r0
 8005d42:	6978      	ldr	r0, [r7, #20]
 8005d44:	f004 f86e 	bl	8009e24 <USB_WritePacket>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	441a      	add	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	611a      	str	r2, [r3, #16]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a1a      	ldr	r2, [r3, #32]
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	441a      	add	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	621a      	str	r2, [r3, #32]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d809      	bhi.n	8005d8a <PCD_WriteEmptyTxFifo+0xe0>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a1a      	ldr	r2, [r3, #32]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d203      	bcs.n	8005d8a <PCD_WriteEmptyTxFifo+0xe0>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1be      	bne.n	8005d08 <PCD_WriteEmptyTxFifo+0x5e>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d811      	bhi.n	8005dba <PCD_WriteEmptyTxFifo+0x110>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	f003 030f 	and.w	r3, r3, #15
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	60bb      	str	r3, [r7, #8]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	43db      	mvns	r3, r3
 8005db0:	6939      	ldr	r1, [r7, #16]
 8005db2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005db6:	4013      	ands	r3, r2
 8005db8:	634b      	str	r3, [r1, #52]	; 0x34
 8005dba:	2300      	movs	r3, #0
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3720      	adds	r7, #32
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <PCD_EP_OutXfrComplete_int>:
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	333c      	adds	r3, #60	; 0x3c
 8005ddc:	3304      	adds	r3, #4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d17b      	bne.n	8005ef2 <PCD_EP_OutXfrComplete_int+0x12e>
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d015      	beq.n	8005e30 <PCD_EP_OutXfrComplete_int+0x6c>
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	4a61      	ldr	r2, [pc, #388]	; (8005f8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	f240 80b9 	bls.w	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 80b3 	beq.w	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e26:	461a      	mov	r2, r3
 8005e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e2c:	6093      	str	r3, [r2, #8]
 8005e2e:	e0a7      	b.n	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <PCD_EP_OutXfrComplete_int+0x8a>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	461a      	mov	r2, r3
 8005e48:	2320      	movs	r3, #32
 8005e4a:	6093      	str	r3, [r2, #8]
 8005e4c:	e098      	b.n	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 8093 	bne.w	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	4a4b      	ldr	r2, [pc, #300]	; (8005f8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d90f      	bls.n	8005e82 <PCD_EP_OutXfrComplete_int+0xbe>
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <PCD_EP_OutXfrComplete_int+0xbe>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e7e:	6093      	str	r3, [r2, #8]
 8005e80:	e07e      	b.n	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	4613      	mov	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4413      	add	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4413      	add	r3, r2
 8005e94:	3304      	adds	r3, #4
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	0159      	lsls	r1, r3, #5
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	440b      	add	r3, r1
 8005ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	621a      	str	r2, [r3, #32]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d114      	bne.n	8005ee4 <PCD_EP_OutXfrComplete_int+0x120>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <PCD_EP_OutXfrComplete_int+0x112>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ecc:	461a      	mov	r2, r3
 8005ece:	2101      	movs	r1, #1
 8005ed0:	f004 fa3e 	bl	800a350 <USB_EP0_OutStart>
 8005ed4:	e006      	b.n	8005ee4 <PCD_EP_OutXfrComplete_int+0x120>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	441a      	add	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	611a      	str	r2, [r3, #16]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f006 fc8a 	bl	800c804 <HAL_PCD_DataOutStageCallback>
 8005ef0:	e046      	b.n	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	4a26      	ldr	r2, [pc, #152]	; (8005f90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d124      	bne.n	8005f44 <PCD_EP_OutXfrComplete_int+0x180>
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <PCD_EP_OutXfrComplete_int+0x156>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	461a      	mov	r2, r3
 8005f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f16:	6093      	str	r3, [r2, #8]
 8005f18:	e032      	b.n	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <PCD_EP_OutXfrComplete_int+0x172>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f30:	461a      	mov	r2, r3
 8005f32:	2320      	movs	r3, #32
 8005f34:	6093      	str	r3, [r2, #8]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f006 fc61 	bl	800c804 <HAL_PCD_DataOutStageCallback>
 8005f42:	e01d      	b.n	8005f80 <PCD_EP_OutXfrComplete_int+0x1bc>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d114      	bne.n	8005f74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d108      	bne.n	8005f74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	2100      	movs	r1, #0
 8005f70:	f004 f9ee 	bl	800a350 <USB_EP0_OutStart>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f006 fc42 	bl	800c804 <HAL_PCD_DataOutStageCallback>
 8005f80:	2300      	movs	r3, #0
 8005f82:	4618      	mov	r0, r3
 8005f84:	3720      	adds	r7, #32
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	4f54300a 	.word	0x4f54300a
 8005f90:	4f54310a 	.word	0x4f54310a

08005f94 <PCD_EP_OutSetupPacket_int>:
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	333c      	adds	r3, #60	; 0x3c
 8005fac:	3304      	adds	r3, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	60bb      	str	r3, [r7, #8]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4a15      	ldr	r2, [pc, #84]	; (800601c <PCD_EP_OutSetupPacket_int+0x88>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d90e      	bls.n	8005fe8 <PCD_EP_OutSetupPacket_int+0x54>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d009      	beq.n	8005fe8 <PCD_EP_OutSetupPacket_int+0x54>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fe6:	6093      	str	r3, [r2, #8]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f006 fbf9 	bl	800c7e0 <HAL_PCD_SetupStageCallback>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4a0a      	ldr	r2, [pc, #40]	; (800601c <PCD_EP_OutSetupPacket_int+0x88>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d90c      	bls.n	8006010 <PCD_EP_OutSetupPacket_int+0x7c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d108      	bne.n	8006010 <PCD_EP_OutSetupPacket_int+0x7c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006008:	461a      	mov	r2, r3
 800600a:	2101      	movs	r1, #1
 800600c:	f004 f9a0 	bl	800a350 <USB_EP0_OutStart>
 8006010:	2300      	movs	r3, #0
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	4f54300a 	.word	0x4f54300a

08006020 <HAL_PCDEx_SetTxFiFo>:
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	70fb      	strb	r3, [r7, #3]
 800602c:	4613      	mov	r3, r2
 800602e:	803b      	strh	r3, [r7, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	60bb      	str	r3, [r7, #8]
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d107      	bne.n	800604e <HAL_PCDEx_SetTxFiFo+0x2e>
 800603e:	883b      	ldrh	r3, [r7, #0]
 8006040:	0419      	lsls	r1, r3, #16
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	430a      	orrs	r2, r1
 800604a:	629a      	str	r2, [r3, #40]	; 0x28
 800604c:	e028      	b.n	80060a0 <HAL_PCDEx_SetTxFiFo+0x80>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	4413      	add	r3, r2
 800605a:	60bb      	str	r3, [r7, #8]
 800605c:	2300      	movs	r3, #0
 800605e:	73fb      	strb	r3, [r7, #15]
 8006060:	e00d      	b.n	800607e <HAL_PCDEx_SetTxFiFo+0x5e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	3340      	adds	r3, #64	; 0x40
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	4413      	add	r3, r2
 8006076:	60bb      	str	r3, [r7, #8]
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	3301      	adds	r3, #1
 800607c:	73fb      	strb	r3, [r7, #15]
 800607e:	7bfa      	ldrb	r2, [r7, #15]
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	3b01      	subs	r3, #1
 8006084:	429a      	cmp	r2, r3
 8006086:	d3ec      	bcc.n	8006062 <HAL_PCDEx_SetTxFiFo+0x42>
 8006088:	883b      	ldrh	r3, [r7, #0]
 800608a:	0418      	lsls	r0, r3, #16
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6819      	ldr	r1, [r3, #0]
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	3b01      	subs	r3, #1
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	4302      	orrs	r2, r0
 8006098:	3340      	adds	r3, #64	; 0x40
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	440b      	add	r3, r1
 800609e:	605a      	str	r2, [r3, #4]
 80060a0:	2300      	movs	r3, #0
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_PCDEx_SetRxFiFo>:
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	460b      	mov	r3, r1
 80060b8:	807b      	strh	r3, [r7, #2]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	887a      	ldrh	r2, [r7, #2]
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24
 80060c2:	2300      	movs	r3, #0
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_PCDEx_LPM_Callback>:
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_RCC_OscConfig>:
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_RCC_OscConfig+0x12>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e267      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d075      	beq.n	80061f2 <HAL_RCC_OscConfig+0x10a>
 8006106:	4b88      	ldr	r3, [pc, #544]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 030c 	and.w	r3, r3, #12
 800610e:	2b04      	cmp	r3, #4
 8006110:	d00c      	beq.n	800612c <HAL_RCC_OscConfig+0x44>
 8006112:	4b85      	ldr	r3, [pc, #532]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 030c 	and.w	r3, r3, #12
 800611a:	2b08      	cmp	r3, #8
 800611c:	d112      	bne.n	8006144 <HAL_RCC_OscConfig+0x5c>
 800611e:	4b82      	ldr	r3, [pc, #520]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800612a:	d10b      	bne.n	8006144 <HAL_RCC_OscConfig+0x5c>
 800612c:	4b7e      	ldr	r3, [pc, #504]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d05b      	beq.n	80061f0 <HAL_RCC_OscConfig+0x108>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d157      	bne.n	80061f0 <HAL_RCC_OscConfig+0x108>
 8006140:	2301      	movs	r3, #1
 8006142:	e242      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614c:	d106      	bne.n	800615c <HAL_RCC_OscConfig+0x74>
 800614e:	4b76      	ldr	r3, [pc, #472]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a75      	ldr	r2, [pc, #468]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	e01d      	b.n	8006198 <HAL_RCC_OscConfig+0xb0>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006164:	d10c      	bne.n	8006180 <HAL_RCC_OscConfig+0x98>
 8006166:	4b70      	ldr	r3, [pc, #448]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a6f      	ldr	r2, [pc, #444]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 800616c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006170:	6013      	str	r3, [r2, #0]
 8006172:	4b6d      	ldr	r3, [pc, #436]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a6c      	ldr	r2, [pc, #432]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	e00b      	b.n	8006198 <HAL_RCC_OscConfig+0xb0>
 8006180:	4b69      	ldr	r3, [pc, #420]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a68      	ldr	r2, [pc, #416]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	4b66      	ldr	r3, [pc, #408]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a65      	ldr	r2, [pc, #404]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d013      	beq.n	80061c8 <HAL_RCC_OscConfig+0xe0>
 80061a0:	f7fc f8d4 	bl	800234c <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0xd2>
 80061a8:	f7fc f8d0 	bl	800234c <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b64      	cmp	r3, #100	; 0x64
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0xd2>
 80061b6:	2303      	movs	r3, #3
 80061b8:	e207      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 80061ba:	4b5b      	ldr	r3, [pc, #364]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0f0      	beq.n	80061a8 <HAL_RCC_OscConfig+0xc0>
 80061c6:	e014      	b.n	80061f2 <HAL_RCC_OscConfig+0x10a>
 80061c8:	f7fc f8c0 	bl	800234c <HAL_GetTick>
 80061cc:	6138      	str	r0, [r7, #16]
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0xfa>
 80061d0:	f7fc f8bc 	bl	800234c <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b64      	cmp	r3, #100	; 0x64
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0xfa>
 80061de:	2303      	movs	r3, #3
 80061e0:	e1f3      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 80061e2:	4b51      	ldr	r3, [pc, #324]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1f0      	bne.n	80061d0 <HAL_RCC_OscConfig+0xe8>
 80061ee:	e000      	b.n	80061f2 <HAL_RCC_OscConfig+0x10a>
 80061f0:	bf00      	nop
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d063      	beq.n	80062c6 <HAL_RCC_OscConfig+0x1de>
 80061fe:	4b4a      	ldr	r3, [pc, #296]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 030c 	and.w	r3, r3, #12
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00b      	beq.n	8006222 <HAL_RCC_OscConfig+0x13a>
 800620a:	4b47      	ldr	r3, [pc, #284]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f003 030c 	and.w	r3, r3, #12
 8006212:	2b08      	cmp	r3, #8
 8006214:	d11c      	bne.n	8006250 <HAL_RCC_OscConfig+0x168>
 8006216:	4b44      	ldr	r3, [pc, #272]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d116      	bne.n	8006250 <HAL_RCC_OscConfig+0x168>
 8006222:	4b41      	ldr	r3, [pc, #260]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d005      	beq.n	800623a <HAL_RCC_OscConfig+0x152>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d001      	beq.n	800623a <HAL_RCC_OscConfig+0x152>
 8006236:	2301      	movs	r3, #1
 8006238:	e1c7      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 800623a:	4b3b      	ldr	r3, [pc, #236]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	4937      	ldr	r1, [pc, #220]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 800624a:	4313      	orrs	r3, r2
 800624c:	600b      	str	r3, [r1, #0]
 800624e:	e03a      	b.n	80062c6 <HAL_RCC_OscConfig+0x1de>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d020      	beq.n	800629a <HAL_RCC_OscConfig+0x1b2>
 8006258:	4b34      	ldr	r3, [pc, #208]	; (800632c <HAL_RCC_OscConfig+0x244>)
 800625a:	2201      	movs	r2, #1
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	f7fc f875 	bl	800234c <HAL_GetTick>
 8006262:	6138      	str	r0, [r7, #16]
 8006264:	e008      	b.n	8006278 <HAL_RCC_OscConfig+0x190>
 8006266:	f7fc f871 	bl	800234c <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x190>
 8006274:	2303      	movs	r3, #3
 8006276:	e1a8      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 8006278:	4b2b      	ldr	r3, [pc, #172]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0f0      	beq.n	8006266 <HAL_RCC_OscConfig+0x17e>
 8006284:	4b28      	ldr	r3, [pc, #160]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	4925      	ldr	r1, [pc, #148]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 8006294:	4313      	orrs	r3, r2
 8006296:	600b      	str	r3, [r1, #0]
 8006298:	e015      	b.n	80062c6 <HAL_RCC_OscConfig+0x1de>
 800629a:	4b24      	ldr	r3, [pc, #144]	; (800632c <HAL_RCC_OscConfig+0x244>)
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	f7fc f854 	bl	800234c <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x1d2>
 80062a8:	f7fc f850 	bl	800234c <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x1d2>
 80062b6:	2303      	movs	r3, #3
 80062b8:	e187      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 80062ba:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f0      	bne.n	80062a8 <HAL_RCC_OscConfig+0x1c0>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d036      	beq.n	8006340 <HAL_RCC_OscConfig+0x258>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d016      	beq.n	8006308 <HAL_RCC_OscConfig+0x220>
 80062da:	4b15      	ldr	r3, [pc, #84]	; (8006330 <HAL_RCC_OscConfig+0x248>)
 80062dc:	2201      	movs	r2, #1
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	f7fc f834 	bl	800234c <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0x212>
 80062e8:	f7fc f830 	bl	800234c <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0x212>
 80062f6:	2303      	movs	r3, #3
 80062f8:	e167      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 80062fa:	4b0b      	ldr	r3, [pc, #44]	; (8006328 <HAL_RCC_OscConfig+0x240>)
 80062fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0f0      	beq.n	80062e8 <HAL_RCC_OscConfig+0x200>
 8006306:	e01b      	b.n	8006340 <HAL_RCC_OscConfig+0x258>
 8006308:	4b09      	ldr	r3, [pc, #36]	; (8006330 <HAL_RCC_OscConfig+0x248>)
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	f7fc f81d 	bl	800234c <HAL_GetTick>
 8006312:	6138      	str	r0, [r7, #16]
 8006314:	e00e      	b.n	8006334 <HAL_RCC_OscConfig+0x24c>
 8006316:	f7fc f819 	bl	800234c <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d907      	bls.n	8006334 <HAL_RCC_OscConfig+0x24c>
 8006324:	2303      	movs	r3, #3
 8006326:	e150      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 8006328:	40023800 	.word	0x40023800
 800632c:	42470000 	.word	0x42470000
 8006330:	42470e80 	.word	0x42470e80
 8006334:	4b88      	ldr	r3, [pc, #544]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 8006336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1ea      	bne.n	8006316 <HAL_RCC_OscConfig+0x22e>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8097 	beq.w	800647c <HAL_RCC_OscConfig+0x394>
 800634e:	2300      	movs	r3, #0
 8006350:	75fb      	strb	r3, [r7, #23]
 8006352:	4b81      	ldr	r3, [pc, #516]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10f      	bne.n	800637e <HAL_RCC_OscConfig+0x296>
 800635e:	2300      	movs	r3, #0
 8006360:	60bb      	str	r3, [r7, #8]
 8006362:	4b7d      	ldr	r3, [pc, #500]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	4a7c      	ldr	r2, [pc, #496]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 8006368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800636c:	6413      	str	r3, [r2, #64]	; 0x40
 800636e:	4b7a      	ldr	r3, [pc, #488]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006376:	60bb      	str	r3, [r7, #8]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2301      	movs	r3, #1
 800637c:	75fb      	strb	r3, [r7, #23]
 800637e:	4b77      	ldr	r3, [pc, #476]	; (800655c <HAL_RCC_OscConfig+0x474>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006386:	2b00      	cmp	r3, #0
 8006388:	d118      	bne.n	80063bc <HAL_RCC_OscConfig+0x2d4>
 800638a:	4b74      	ldr	r3, [pc, #464]	; (800655c <HAL_RCC_OscConfig+0x474>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a73      	ldr	r2, [pc, #460]	; (800655c <HAL_RCC_OscConfig+0x474>)
 8006390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	f7fb ffd9 	bl	800234c <HAL_GetTick>
 800639a:	6138      	str	r0, [r7, #16]
 800639c:	e008      	b.n	80063b0 <HAL_RCC_OscConfig+0x2c8>
 800639e:	f7fb ffd5 	bl	800234c <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_OscConfig+0x2c8>
 80063ac:	2303      	movs	r3, #3
 80063ae:	e10c      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 80063b0:	4b6a      	ldr	r3, [pc, #424]	; (800655c <HAL_RCC_OscConfig+0x474>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0f0      	beq.n	800639e <HAL_RCC_OscConfig+0x2b6>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d106      	bne.n	80063d2 <HAL_RCC_OscConfig+0x2ea>
 80063c4:	4b64      	ldr	r3, [pc, #400]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 80063c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c8:	4a63      	ldr	r2, [pc, #396]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 80063ca:	f043 0301 	orr.w	r3, r3, #1
 80063ce:	6713      	str	r3, [r2, #112]	; 0x70
 80063d0:	e01c      	b.n	800640c <HAL_RCC_OscConfig+0x324>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2b05      	cmp	r3, #5
 80063d8:	d10c      	bne.n	80063f4 <HAL_RCC_OscConfig+0x30c>
 80063da:	4b5f      	ldr	r3, [pc, #380]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 80063dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063de:	4a5e      	ldr	r2, [pc, #376]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 80063e0:	f043 0304 	orr.w	r3, r3, #4
 80063e4:	6713      	str	r3, [r2, #112]	; 0x70
 80063e6:	4b5c      	ldr	r3, [pc, #368]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 80063e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ea:	4a5b      	ldr	r2, [pc, #364]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 80063ec:	f043 0301 	orr.w	r3, r3, #1
 80063f0:	6713      	str	r3, [r2, #112]	; 0x70
 80063f2:	e00b      	b.n	800640c <HAL_RCC_OscConfig+0x324>
 80063f4:	4b58      	ldr	r3, [pc, #352]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 80063f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f8:	4a57      	ldr	r2, [pc, #348]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 80063fa:	f023 0301 	bic.w	r3, r3, #1
 80063fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006400:	4b55      	ldr	r3, [pc, #340]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 8006402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006404:	4a54      	ldr	r2, [pc, #336]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 8006406:	f023 0304 	bic.w	r3, r3, #4
 800640a:	6713      	str	r3, [r2, #112]	; 0x70
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d015      	beq.n	8006440 <HAL_RCC_OscConfig+0x358>
 8006414:	f7fb ff9a 	bl	800234c <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]
 800641a:	e00a      	b.n	8006432 <HAL_RCC_OscConfig+0x34a>
 800641c:	f7fb ff96 	bl	800234c <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f241 3288 	movw	r2, #5000	; 0x1388
 800642a:	4293      	cmp	r3, r2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x34a>
 800642e:	2303      	movs	r3, #3
 8006430:	e0cb      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 8006432:	4b49      	ldr	r3, [pc, #292]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0ee      	beq.n	800641c <HAL_RCC_OscConfig+0x334>
 800643e:	e014      	b.n	800646a <HAL_RCC_OscConfig+0x382>
 8006440:	f7fb ff84 	bl	800234c <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]
 8006446:	e00a      	b.n	800645e <HAL_RCC_OscConfig+0x376>
 8006448:	f7fb ff80 	bl	800234c <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	f241 3288 	movw	r2, #5000	; 0x1388
 8006456:	4293      	cmp	r3, r2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x376>
 800645a:	2303      	movs	r3, #3
 800645c:	e0b5      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 800645e:	4b3e      	ldr	r3, [pc, #248]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 8006460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1ee      	bne.n	8006448 <HAL_RCC_OscConfig+0x360>
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d105      	bne.n	800647c <HAL_RCC_OscConfig+0x394>
 8006470:	4b39      	ldr	r3, [pc, #228]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	4a38      	ldr	r2, [pc, #224]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 8006476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800647a:	6413      	str	r3, [r2, #64]	; 0x40
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 80a1 	beq.w	80065c8 <HAL_RCC_OscConfig+0x4e0>
 8006486:	4b34      	ldr	r3, [pc, #208]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 030c 	and.w	r3, r3, #12
 800648e:	2b08      	cmp	r3, #8
 8006490:	d05c      	beq.n	800654c <HAL_RCC_OscConfig+0x464>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d141      	bne.n	800651e <HAL_RCC_OscConfig+0x436>
 800649a:	4b31      	ldr	r3, [pc, #196]	; (8006560 <HAL_RCC_OscConfig+0x478>)
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	f7fb ff54 	bl	800234c <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x3d2>
 80064a8:	f7fb ff50 	bl	800234c <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x3d2>
 80064b6:	2303      	movs	r3, #3
 80064b8:	e087      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 80064ba:	4b27      	ldr	r3, [pc, #156]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f0      	bne.n	80064a8 <HAL_RCC_OscConfig+0x3c0>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69da      	ldr	r2, [r3, #28]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	019b      	lsls	r3, r3, #6
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	085b      	lsrs	r3, r3, #1
 80064de:	3b01      	subs	r3, #1
 80064e0:	041b      	lsls	r3, r3, #16
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	061b      	lsls	r3, r3, #24
 80064ea:	491b      	ldr	r1, [pc, #108]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	604b      	str	r3, [r1, #4]
 80064f0:	4b1b      	ldr	r3, [pc, #108]	; (8006560 <HAL_RCC_OscConfig+0x478>)
 80064f2:	2201      	movs	r2, #1
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	f7fb ff29 	bl	800234c <HAL_GetTick>
 80064fa:	6138      	str	r0, [r7, #16]
 80064fc:	e008      	b.n	8006510 <HAL_RCC_OscConfig+0x428>
 80064fe:	f7fb ff25 	bl	800234c <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_OscConfig+0x428>
 800650c:	2303      	movs	r3, #3
 800650e:	e05c      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 8006510:	4b11      	ldr	r3, [pc, #68]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0f0      	beq.n	80064fe <HAL_RCC_OscConfig+0x416>
 800651c:	e054      	b.n	80065c8 <HAL_RCC_OscConfig+0x4e0>
 800651e:	4b10      	ldr	r3, [pc, #64]	; (8006560 <HAL_RCC_OscConfig+0x478>)
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	f7fb ff12 	bl	800234c <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x456>
 800652c:	f7fb ff0e 	bl	800234c <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x456>
 800653a:	2303      	movs	r3, #3
 800653c:	e045      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 800653e:	4b06      	ldr	r3, [pc, #24]	; (8006558 <HAL_RCC_OscConfig+0x470>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1f0      	bne.n	800652c <HAL_RCC_OscConfig+0x444>
 800654a:	e03d      	b.n	80065c8 <HAL_RCC_OscConfig+0x4e0>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d107      	bne.n	8006564 <HAL_RCC_OscConfig+0x47c>
 8006554:	2301      	movs	r3, #1
 8006556:	e038      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 8006558:	40023800 	.word	0x40023800
 800655c:	40007000 	.word	0x40007000
 8006560:	42470060 	.word	0x42470060
 8006564:	4b1b      	ldr	r3, [pc, #108]	; (80065d4 <HAL_RCC_OscConfig+0x4ec>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d028      	beq.n	80065c4 <HAL_RCC_OscConfig+0x4dc>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	429a      	cmp	r2, r3
 800657e:	d121      	bne.n	80065c4 <HAL_RCC_OscConfig+0x4dc>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	429a      	cmp	r2, r3
 800658c:	d11a      	bne.n	80065c4 <HAL_RCC_OscConfig+0x4dc>
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006594:	4013      	ands	r3, r2
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800659a:	0192      	lsls	r2, r2, #6
 800659c:	4293      	cmp	r3, r2
 800659e:	d111      	bne.n	80065c4 <HAL_RCC_OscConfig+0x4dc>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	3b01      	subs	r3, #1
 80065ae:	041b      	lsls	r3, r3, #16
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d107      	bne.n	80065c4 <HAL_RCC_OscConfig+0x4dc>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	061b      	lsls	r3, r3, #24
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d001      	beq.n	80065c8 <HAL_RCC_OscConfig+0x4e0>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e000      	b.n	80065ca <HAL_RCC_OscConfig+0x4e2>
 80065c8:	2300      	movs	r3, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	40023800 	.word	0x40023800

080065d8 <HAL_RCC_ClockConfig>:
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <HAL_RCC_ClockConfig+0x14>
 80065e8:	2301      	movs	r3, #1
 80065ea:	e0cc      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ae>
 80065ec:	4b68      	ldr	r3, [pc, #416]	; (8006790 <HAL_RCC_ClockConfig+0x1b8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d90c      	bls.n	8006614 <HAL_RCC_ClockConfig+0x3c>
 80065fa:	4b65      	ldr	r3, [pc, #404]	; (8006790 <HAL_RCC_ClockConfig+0x1b8>)
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	4b63      	ldr	r3, [pc, #396]	; (8006790 <HAL_RCC_ClockConfig+0x1b8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d001      	beq.n	8006614 <HAL_RCC_ClockConfig+0x3c>
 8006610:	2301      	movs	r3, #1
 8006612:	e0b8      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ae>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d020      	beq.n	8006662 <HAL_RCC_ClockConfig+0x8a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <HAL_RCC_ClockConfig+0x60>
 800662c:	4b59      	ldr	r3, [pc, #356]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	4a58      	ldr	r2, [pc, #352]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 8006632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006636:	6093      	str	r3, [r2, #8]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <HAL_RCC_ClockConfig+0x78>
 8006644:	4b53      	ldr	r3, [pc, #332]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	4a52      	ldr	r2, [pc, #328]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 800664a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800664e:	6093      	str	r3, [r2, #8]
 8006650:	4b50      	ldr	r3, [pc, #320]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	494d      	ldr	r1, [pc, #308]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 800665e:	4313      	orrs	r3, r2
 8006660:	608b      	str	r3, [r1, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d044      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x120>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d107      	bne.n	8006686 <HAL_RCC_ClockConfig+0xae>
 8006676:	4b47      	ldr	r3, [pc, #284]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d119      	bne.n	80066b6 <HAL_RCC_ClockConfig+0xde>
 8006682:	2301      	movs	r3, #1
 8006684:	e07f      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ae>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b02      	cmp	r3, #2
 800668c:	d003      	beq.n	8006696 <HAL_RCC_ClockConfig+0xbe>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b03      	cmp	r3, #3
 8006694:	d107      	bne.n	80066a6 <HAL_RCC_ClockConfig+0xce>
 8006696:	4b3f      	ldr	r3, [pc, #252]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d109      	bne.n	80066b6 <HAL_RCC_ClockConfig+0xde>
 80066a2:	2301      	movs	r3, #1
 80066a4:	e06f      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ae>
 80066a6:	4b3b      	ldr	r3, [pc, #236]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_RCC_ClockConfig+0xde>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e067      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ae>
 80066b6:	4b37      	ldr	r3, [pc, #220]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f023 0203 	bic.w	r2, r3, #3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	4934      	ldr	r1, [pc, #208]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	608b      	str	r3, [r1, #8]
 80066c8:	f7fb fe40 	bl	800234c <HAL_GetTick>
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	e00a      	b.n	80066e6 <HAL_RCC_ClockConfig+0x10e>
 80066d0:	f7fb fe3c 	bl	800234c <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	f241 3288 	movw	r2, #5000	; 0x1388
 80066de:	4293      	cmp	r3, r2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_ClockConfig+0x10e>
 80066e2:	2303      	movs	r3, #3
 80066e4:	e04f      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ae>
 80066e6:	4b2b      	ldr	r3, [pc, #172]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 020c 	and.w	r2, r3, #12
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d1eb      	bne.n	80066d0 <HAL_RCC_ClockConfig+0xf8>
 80066f8:	4b25      	ldr	r3, [pc, #148]	; (8006790 <HAL_RCC_ClockConfig+0x1b8>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d20c      	bcs.n	8006720 <HAL_RCC_ClockConfig+0x148>
 8006706:	4b22      	ldr	r3, [pc, #136]	; (8006790 <HAL_RCC_ClockConfig+0x1b8>)
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	4b20      	ldr	r3, [pc, #128]	; (8006790 <HAL_RCC_ClockConfig+0x1b8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	429a      	cmp	r2, r3
 800671a:	d001      	beq.n	8006720 <HAL_RCC_ClockConfig+0x148>
 800671c:	2301      	movs	r3, #1
 800671e:	e032      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ae>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d008      	beq.n	800673e <HAL_RCC_ClockConfig+0x166>
 800672c:	4b19      	ldr	r3, [pc, #100]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	4916      	ldr	r1, [pc, #88]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	4313      	orrs	r3, r2
 800673c:	608b      	str	r3, [r1, #8]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <HAL_RCC_ClockConfig+0x186>
 800674a:	4b12      	ldr	r3, [pc, #72]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	490e      	ldr	r1, [pc, #56]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 800675a:	4313      	orrs	r3, r2
 800675c:	608b      	str	r3, [r1, #8]
 800675e:	f000 f821 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 8006762:	4602      	mov	r2, r0
 8006764:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	091b      	lsrs	r3, r3, #4
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	490a      	ldr	r1, [pc, #40]	; (8006798 <HAL_RCC_ClockConfig+0x1c0>)
 8006770:	5ccb      	ldrb	r3, [r1, r3]
 8006772:	fa22 f303 	lsr.w	r3, r2, r3
 8006776:	4a09      	ldr	r2, [pc, #36]	; (800679c <HAL_RCC_ClockConfig+0x1c4>)
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <HAL_RCC_ClockConfig+0x1c8>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4618      	mov	r0, r3
 8006780:	f7fb fda0 	bl	80022c4 <HAL_InitTick>
 8006784:	2300      	movs	r3, #0
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40023c00 	.word	0x40023c00
 8006794:	40023800 	.word	0x40023800
 8006798:	0800f728 	.word	0x0800f728
 800679c:	20000024 	.word	0x20000024
 80067a0:	20000028 	.word	0x20000028

080067a4 <HAL_RCC_GetSysClockFreq>:
 80067a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a8:	b090      	sub	sp, #64	; 0x40
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	2300      	movs	r3, #0
 80067ae:	637b      	str	r3, [r7, #52]	; 0x34
 80067b0:	2300      	movs	r3, #0
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067b4:	2300      	movs	r3, #0
 80067b6:	633b      	str	r3, [r7, #48]	; 0x30
 80067b8:	2300      	movs	r3, #0
 80067ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80067bc:	4b59      	ldr	r3, [pc, #356]	; (8006924 <HAL_RCC_GetSysClockFreq+0x180>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 030c 	and.w	r3, r3, #12
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d00d      	beq.n	80067e4 <HAL_RCC_GetSysClockFreq+0x40>
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	f200 80a1 	bhi.w	8006910 <HAL_RCC_GetSysClockFreq+0x16c>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <HAL_RCC_GetSysClockFreq+0x34>
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d003      	beq.n	80067de <HAL_RCC_GetSysClockFreq+0x3a>
 80067d6:	e09b      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0x16c>
 80067d8:	4b53      	ldr	r3, [pc, #332]	; (8006928 <HAL_RCC_GetSysClockFreq+0x184>)
 80067da:	63bb      	str	r3, [r7, #56]	; 0x38
 80067dc:	e09b      	b.n	8006916 <HAL_RCC_GetSysClockFreq+0x172>
 80067de:	4b53      	ldr	r3, [pc, #332]	; (800692c <HAL_RCC_GetSysClockFreq+0x188>)
 80067e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80067e2:	e098      	b.n	8006916 <HAL_RCC_GetSysClockFreq+0x172>
 80067e4:	4b4f      	ldr	r3, [pc, #316]	; (8006924 <HAL_RCC_GetSysClockFreq+0x180>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34
 80067ee:	4b4d      	ldr	r3, [pc, #308]	; (8006924 <HAL_RCC_GetSysClockFreq+0x180>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d028      	beq.n	800684c <HAL_RCC_GetSysClockFreq+0xa8>
 80067fa:	4b4a      	ldr	r3, [pc, #296]	; (8006924 <HAL_RCC_GetSysClockFreq+0x180>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	099b      	lsrs	r3, r3, #6
 8006800:	2200      	movs	r2, #0
 8006802:	623b      	str	r3, [r7, #32]
 8006804:	627a      	str	r2, [r7, #36]	; 0x24
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800680c:	2100      	movs	r1, #0
 800680e:	4b47      	ldr	r3, [pc, #284]	; (800692c <HAL_RCC_GetSysClockFreq+0x188>)
 8006810:	fb03 f201 	mul.w	r2, r3, r1
 8006814:	2300      	movs	r3, #0
 8006816:	fb00 f303 	mul.w	r3, r0, r3
 800681a:	4413      	add	r3, r2
 800681c:	4a43      	ldr	r2, [pc, #268]	; (800692c <HAL_RCC_GetSysClockFreq+0x188>)
 800681e:	fba0 1202 	umull	r1, r2, r0, r2
 8006822:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006824:	460a      	mov	r2, r1
 8006826:	62ba      	str	r2, [r7, #40]	; 0x28
 8006828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800682a:	4413      	add	r3, r2
 800682c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800682e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006830:	2200      	movs	r2, #0
 8006832:	61bb      	str	r3, [r7, #24]
 8006834:	61fa      	str	r2, [r7, #28]
 8006836:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800683a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800683e:	f7fa f9bb 	bl	8000bb8 <__aeabi_uldivmod>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4613      	mov	r3, r2
 8006848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800684a:	e053      	b.n	80068f4 <HAL_RCC_GetSysClockFreq+0x150>
 800684c:	4b35      	ldr	r3, [pc, #212]	; (8006924 <HAL_RCC_GetSysClockFreq+0x180>)
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	099b      	lsrs	r3, r3, #6
 8006852:	2200      	movs	r2, #0
 8006854:	613b      	str	r3, [r7, #16]
 8006856:	617a      	str	r2, [r7, #20]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800685e:	f04f 0b00 	mov.w	fp, #0
 8006862:	4652      	mov	r2, sl
 8006864:	465b      	mov	r3, fp
 8006866:	f04f 0000 	mov.w	r0, #0
 800686a:	f04f 0100 	mov.w	r1, #0
 800686e:	0159      	lsls	r1, r3, #5
 8006870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006874:	0150      	lsls	r0, r2, #5
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	ebb2 080a 	subs.w	r8, r2, sl
 800687e:	eb63 090b 	sbc.w	r9, r3, fp
 8006882:	f04f 0200 	mov.w	r2, #0
 8006886:	f04f 0300 	mov.w	r3, #0
 800688a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800688e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006892:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006896:	ebb2 0408 	subs.w	r4, r2, r8
 800689a:	eb63 0509 	sbc.w	r5, r3, r9
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	f04f 0300 	mov.w	r3, #0
 80068a6:	00eb      	lsls	r3, r5, #3
 80068a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068ac:	00e2      	lsls	r2, r4, #3
 80068ae:	4614      	mov	r4, r2
 80068b0:	461d      	mov	r5, r3
 80068b2:	eb14 030a 	adds.w	r3, r4, sl
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	eb45 030b 	adc.w	r3, r5, fp
 80068bc:	607b      	str	r3, [r7, #4]
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068ca:	4629      	mov	r1, r5
 80068cc:	028b      	lsls	r3, r1, #10
 80068ce:	4621      	mov	r1, r4
 80068d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068d4:	4621      	mov	r1, r4
 80068d6:	028a      	lsls	r2, r1, #10
 80068d8:	4610      	mov	r0, r2
 80068da:	4619      	mov	r1, r3
 80068dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068de:	2200      	movs	r2, #0
 80068e0:	60bb      	str	r3, [r7, #8]
 80068e2:	60fa      	str	r2, [r7, #12]
 80068e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068e8:	f7fa f966 	bl	8000bb8 <__aeabi_uldivmod>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4613      	mov	r3, r2
 80068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f4:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <HAL_RCC_GetSysClockFreq+0x180>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	0c1b      	lsrs	r3, r3, #16
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	3301      	adds	r3, #1
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	633b      	str	r3, [r7, #48]	; 0x30
 8006904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	fbb2 f3f3 	udiv	r3, r2, r3
 800690c:	63bb      	str	r3, [r7, #56]	; 0x38
 800690e:	e002      	b.n	8006916 <HAL_RCC_GetSysClockFreq+0x172>
 8006910:	4b05      	ldr	r3, [pc, #20]	; (8006928 <HAL_RCC_GetSysClockFreq+0x184>)
 8006912:	63bb      	str	r3, [r7, #56]	; 0x38
 8006914:	bf00      	nop
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	4618      	mov	r0, r3
 800691a:	3740      	adds	r7, #64	; 0x40
 800691c:	46bd      	mov	sp, r7
 800691e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006922:	bf00      	nop
 8006924:	40023800 	.word	0x40023800
 8006928:	00f42400 	.word	0x00f42400
 800692c:	017d7840 	.word	0x017d7840

08006930 <HAL_RCC_GetHCLKFreq>:
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
 8006934:	4b03      	ldr	r3, [pc, #12]	; (8006944 <HAL_RCC_GetHCLKFreq+0x14>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	20000024 	.word	0x20000024

08006948 <HAL_RCC_GetPCLK1Freq>:
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
 800694c:	f7ff fff0 	bl	8006930 <HAL_RCC_GetHCLKFreq>
 8006950:	4602      	mov	r2, r0
 8006952:	4b05      	ldr	r3, [pc, #20]	; (8006968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	0a9b      	lsrs	r3, r3, #10
 8006958:	f003 0307 	and.w	r3, r3, #7
 800695c:	4903      	ldr	r1, [pc, #12]	; (800696c <HAL_RCC_GetPCLK1Freq+0x24>)
 800695e:	5ccb      	ldrb	r3, [r1, r3]
 8006960:	fa22 f303 	lsr.w	r3, r2, r3
 8006964:	4618      	mov	r0, r3
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40023800 	.word	0x40023800
 800696c:	0800f738 	.word	0x0800f738

08006970 <HAL_RCC_GetPCLK2Freq>:
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
 8006974:	f7ff ffdc 	bl	8006930 <HAL_RCC_GetHCLKFreq>
 8006978:	4602      	mov	r2, r0
 800697a:	4b05      	ldr	r3, [pc, #20]	; (8006990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	0b5b      	lsrs	r3, r3, #13
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	4903      	ldr	r1, [pc, #12]	; (8006994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006986:	5ccb      	ldrb	r3, [r1, r3]
 8006988:	fa22 f303 	lsr.w	r3, r2, r3
 800698c:	4618      	mov	r0, r3
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40023800 	.word	0x40023800
 8006994:	0800f738 	.word	0x0800f738

08006998 <HAL_SPI_Init>:
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_SPI_Init+0x12>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e07b      	b.n	8006aa2 <HAL_SPI_Init+0x10a>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d108      	bne.n	80069c4 <HAL_SPI_Init+0x2c>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069ba:	d009      	beq.n	80069d0 <HAL_SPI_Init+0x38>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	61da      	str	r2, [r3, #28]
 80069c2:	e005      	b.n	80069d0 <HAL_SPI_Init+0x38>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	611a      	str	r2, [r3, #16]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	615a      	str	r2, [r3, #20]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	629a      	str	r2, [r3, #40]	; 0x28
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <HAL_SPI_Init+0x58>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fb f8ac 	bl	8001b48 <HAL_SPI_MspInit>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a40:	431a      	orrs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a54:	ea42 0103 	orr.w	r1, r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	0c1b      	lsrs	r3, r3, #16
 8006a6e:	f003 0104 	and.w	r1, r3, #4
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	f003 0210 	and.w	r2, r3, #16
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	605a      	str	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69da      	ldr	r2, [r3, #28]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a90:	61da      	str	r2, [r3, #28]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	655a      	str	r2, [r3, #84]	; 0x54
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <HAL_TIM_Base_Init>:
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <HAL_TIM_Base_Init+0x12>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e041      	b.n	8006b40 <HAL_TIM_Base_Init+0x96>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d106      	bne.n	8006ad6 <HAL_TIM_Base_Init+0x2c>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7fb f8a1 	bl	8001c18 <HAL_TIM_Base_MspInit>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f000 ff1d 	bl	8007928 <TIM_Base_SetConfig>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b3e:	2300      	movs	r3, #0
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_TIM_Base_Start_IT>:
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d001      	beq.n	8006b60 <HAL_TIM_Base_Start_IT+0x18>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e044      	b.n	8006bea <HAL_TIM_Base_Start_IT+0xa2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	60da      	str	r2, [r3, #12]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1e      	ldr	r2, [pc, #120]	; (8006bf8 <HAL_TIM_Base_Start_IT+0xb0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d018      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8a:	d013      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1a      	ldr	r2, [pc, #104]	; (8006bfc <HAL_TIM_Base_Start_IT+0xb4>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00e      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a19      	ldr	r2, [pc, #100]	; (8006c00 <HAL_TIM_Base_Start_IT+0xb8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d009      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a17      	ldr	r2, [pc, #92]	; (8006c04 <HAL_TIM_Base_Start_IT+0xbc>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d004      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a16      	ldr	r2, [pc, #88]	; (8006c08 <HAL_TIM_Base_Start_IT+0xc0>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d111      	bne.n	8006bd8 <HAL_TIM_Base_Start_IT+0x90>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b06      	cmp	r3, #6
 8006bc4:	d010      	beq.n	8006be8 <HAL_TIM_Base_Start_IT+0xa0>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f042 0201 	orr.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	e007      	b.n	8006be8 <HAL_TIM_Base_Start_IT+0xa0>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	2300      	movs	r3, #0
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40010000 	.word	0x40010000
 8006bfc:	40000400 	.word	0x40000400
 8006c00:	40000800 	.word	0x40000800
 8006c04:	40000c00 	.word	0x40000c00
 8006c08:	40014000 	.word	0x40014000

08006c0c <HAL_TIM_Base_Stop_IT>:
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0201 	bic.w	r2, r2, #1
 8006c22:	60da      	str	r2, [r3, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6a1a      	ldr	r2, [r3, #32]
 8006c2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10f      	bne.n	8006c54 <HAL_TIM_Base_Stop_IT+0x48>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6a1a      	ldr	r2, [r3, #32]
 8006c3a:	f240 4344 	movw	r3, #1092	; 0x444
 8006c3e:	4013      	ands	r3, r2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d107      	bne.n	8006c54 <HAL_TIM_Base_Stop_IT+0x48>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0201 	bic.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <HAL_TIM_PWM_Init>:
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_TIM_PWM_Init+0x12>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e041      	b.n	8006d00 <HAL_TIM_PWM_Init+0x96>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d106      	bne.n	8006c96 <HAL_TIM_PWM_Init+0x2c>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f839 	bl	8006d08 <HAL_TIM_PWM_MspInit>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4610      	mov	r0, r2
 8006caa:	f000 fe3d 	bl	8007928 <TIM_Base_SetConfig>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006cfe:	2300      	movs	r3, #0
 8006d00:	4618      	mov	r0, r3
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_TIM_PWM_MspInit>:
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_TIM_PWM_Start>:
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d109      	bne.n	8006d40 <HAL_TIM_PWM_Start+0x24>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	bf14      	ite	ne
 8006d38:	2301      	movne	r3, #1
 8006d3a:	2300      	moveq	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	e022      	b.n	8006d86 <HAL_TIM_PWM_Start+0x6a>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d109      	bne.n	8006d5a <HAL_TIM_PWM_Start+0x3e>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	bf14      	ite	ne
 8006d52:	2301      	movne	r3, #1
 8006d54:	2300      	moveq	r3, #0
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	e015      	b.n	8006d86 <HAL_TIM_PWM_Start+0x6a>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d109      	bne.n	8006d74 <HAL_TIM_PWM_Start+0x58>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	bf14      	ite	ne
 8006d6c:	2301      	movne	r3, #1
 8006d6e:	2300      	moveq	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	e008      	b.n	8006d86 <HAL_TIM_PWM_Start+0x6a>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	bf14      	ite	ne
 8006d80:	2301      	movne	r3, #1
 8006d82:	2300      	moveq	r3, #0
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <HAL_TIM_PWM_Start+0x72>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e068      	b.n	8006e60 <HAL_TIM_PWM_Start+0x144>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d104      	bne.n	8006d9e <HAL_TIM_PWM_Start+0x82>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d9c:	e013      	b.n	8006dc6 <HAL_TIM_PWM_Start+0xaa>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d104      	bne.n	8006dae <HAL_TIM_PWM_Start+0x92>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dac:	e00b      	b.n	8006dc6 <HAL_TIM_PWM_Start+0xaa>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d104      	bne.n	8006dbe <HAL_TIM_PWM_Start+0xa2>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dbc:	e003      	b.n	8006dc6 <HAL_TIM_PWM_Start+0xaa>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f001 f9e5 	bl	800819e <TIM_CCxChannelCmd>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a23      	ldr	r2, [pc, #140]	; (8006e68 <HAL_TIM_PWM_Start+0x14c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d107      	bne.n	8006dee <HAL_TIM_PWM_Start+0xd2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dec:	645a      	str	r2, [r3, #68]	; 0x44
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1d      	ldr	r2, [pc, #116]	; (8006e68 <HAL_TIM_PWM_Start+0x14c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d018      	beq.n	8006e2a <HAL_TIM_PWM_Start+0x10e>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e00:	d013      	beq.n	8006e2a <HAL_TIM_PWM_Start+0x10e>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a19      	ldr	r2, [pc, #100]	; (8006e6c <HAL_TIM_PWM_Start+0x150>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00e      	beq.n	8006e2a <HAL_TIM_PWM_Start+0x10e>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a17      	ldr	r2, [pc, #92]	; (8006e70 <HAL_TIM_PWM_Start+0x154>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_TIM_PWM_Start+0x10e>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a16      	ldr	r2, [pc, #88]	; (8006e74 <HAL_TIM_PWM_Start+0x158>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <HAL_TIM_PWM_Start+0x10e>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a14      	ldr	r2, [pc, #80]	; (8006e78 <HAL_TIM_PWM_Start+0x15c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d111      	bne.n	8006e4e <HAL_TIM_PWM_Start+0x132>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b06      	cmp	r3, #6
 8006e3a:	d010      	beq.n	8006e5e <HAL_TIM_PWM_Start+0x142>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0201 	orr.w	r2, r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	e007      	b.n	8006e5e <HAL_TIM_PWM_Start+0x142>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f042 0201 	orr.w	r2, r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40000800 	.word	0x40000800
 8006e74:	40000c00 	.word	0x40000c00
 8006e78:	40014000 	.word	0x40014000

08006e7c <HAL_TIM_PWM_Stop>:
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f001 f985 	bl	800819e <TIM_CCxChannelCmd>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a29      	ldr	r2, [pc, #164]	; (8006f40 <HAL_TIM_PWM_Stop+0xc4>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d117      	bne.n	8006ece <HAL_TIM_PWM_Stop+0x52>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6a1a      	ldr	r2, [r3, #32]
 8006ea4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10f      	bne.n	8006ece <HAL_TIM_PWM_Stop+0x52>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6a1a      	ldr	r2, [r3, #32]
 8006eb4:	f240 4344 	movw	r3, #1092	; 0x444
 8006eb8:	4013      	ands	r3, r2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d107      	bne.n	8006ece <HAL_TIM_PWM_Stop+0x52>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ecc:	645a      	str	r2, [r3, #68]	; 0x44
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6a1a      	ldr	r2, [r3, #32]
 8006ed4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ed8:	4013      	ands	r3, r2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10f      	bne.n	8006efe <HAL_TIM_PWM_Stop+0x82>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6a1a      	ldr	r2, [r3, #32]
 8006ee4:	f240 4344 	movw	r3, #1092	; 0x444
 8006ee8:	4013      	ands	r3, r2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d107      	bne.n	8006efe <HAL_TIM_PWM_Stop+0x82>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0201 	bic.w	r2, r2, #1
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d104      	bne.n	8006f0e <HAL_TIM_PWM_Stop+0x92>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f0c:	e013      	b.n	8006f36 <HAL_TIM_PWM_Stop+0xba>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b04      	cmp	r3, #4
 8006f12:	d104      	bne.n	8006f1e <HAL_TIM_PWM_Stop+0xa2>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f1c:	e00b      	b.n	8006f36 <HAL_TIM_PWM_Stop+0xba>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d104      	bne.n	8006f2e <HAL_TIM_PWM_Stop+0xb2>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f2c:	e003      	b.n	8006f36 <HAL_TIM_PWM_Stop+0xba>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f36:	2300      	movs	r3, #0
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40010000 	.word	0x40010000

08006f44 <HAL_TIM_IC_Init>:
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_TIM_IC_Init+0x12>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e041      	b.n	8006fda <HAL_TIM_IC_Init+0x96>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <HAL_TIM_IC_Init+0x2c>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7fa fed2 	bl	8001d14 <HAL_TIM_IC_MspInit>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4619      	mov	r1, r3
 8006f82:	4610      	mov	r0, r2
 8006f84:	f000 fcd0 	bl	8007928 <TIM_Base_SetConfig>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <HAL_TIM_IC_Start_IT>:
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <HAL_TIM_IC_Start_IT+0x1e>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	e013      	b.n	800702a <HAL_TIM_IC_Start_IT+0x46>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b04      	cmp	r3, #4
 8007006:	d104      	bne.n	8007012 <HAL_TIM_IC_Start_IT+0x2e>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800700e:	b2db      	uxtb	r3, r3
 8007010:	e00b      	b.n	800702a <HAL_TIM_IC_Start_IT+0x46>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d104      	bne.n	8007022 <HAL_TIM_IC_Start_IT+0x3e>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800701e:	b2db      	uxtb	r3, r3
 8007020:	e003      	b.n	800702a <HAL_TIM_IC_Start_IT+0x46>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007028:	b2db      	uxtb	r3, r3
 800702a:	73bb      	strb	r3, [r7, #14]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d104      	bne.n	800703c <HAL_TIM_IC_Start_IT+0x58>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007038:	b2db      	uxtb	r3, r3
 800703a:	e013      	b.n	8007064 <HAL_TIM_IC_Start_IT+0x80>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b04      	cmp	r3, #4
 8007040:	d104      	bne.n	800704c <HAL_TIM_IC_Start_IT+0x68>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007048:	b2db      	uxtb	r3, r3
 800704a:	e00b      	b.n	8007064 <HAL_TIM_IC_Start_IT+0x80>
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2b08      	cmp	r3, #8
 8007050:	d104      	bne.n	800705c <HAL_TIM_IC_Start_IT+0x78>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007058:	b2db      	uxtb	r3, r3
 800705a:	e003      	b.n	8007064 <HAL_TIM_IC_Start_IT+0x80>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007062:	b2db      	uxtb	r3, r3
 8007064:	737b      	strb	r3, [r7, #13]
 8007066:	7bbb      	ldrb	r3, [r7, #14]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d102      	bne.n	8007072 <HAL_TIM_IC_Start_IT+0x8e>
 800706c:	7b7b      	ldrb	r3, [r7, #13]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d001      	beq.n	8007076 <HAL_TIM_IC_Start_IT+0x92>
 8007072:	2301      	movs	r3, #1
 8007074:	e0c2      	b.n	80071fc <HAL_TIM_IC_Start_IT+0x218>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d104      	bne.n	8007086 <HAL_TIM_IC_Start_IT+0xa2>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007084:	e013      	b.n	80070ae <HAL_TIM_IC_Start_IT+0xca>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b04      	cmp	r3, #4
 800708a:	d104      	bne.n	8007096 <HAL_TIM_IC_Start_IT+0xb2>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007094:	e00b      	b.n	80070ae <HAL_TIM_IC_Start_IT+0xca>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b08      	cmp	r3, #8
 800709a:	d104      	bne.n	80070a6 <HAL_TIM_IC_Start_IT+0xc2>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070a4:	e003      	b.n	80070ae <HAL_TIM_IC_Start_IT+0xca>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2202      	movs	r2, #2
 80070aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d104      	bne.n	80070be <HAL_TIM_IC_Start_IT+0xda>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070bc:	e013      	b.n	80070e6 <HAL_TIM_IC_Start_IT+0x102>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	d104      	bne.n	80070ce <HAL_TIM_IC_Start_IT+0xea>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070cc:	e00b      	b.n	80070e6 <HAL_TIM_IC_Start_IT+0x102>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	d104      	bne.n	80070de <HAL_TIM_IC_Start_IT+0xfa>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070dc:	e003      	b.n	80070e6 <HAL_TIM_IC_Start_IT+0x102>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2202      	movs	r2, #2
 80070e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2b0c      	cmp	r3, #12
 80070ea:	d841      	bhi.n	8007170 <HAL_TIM_IC_Start_IT+0x18c>
 80070ec:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <HAL_TIM_IC_Start_IT+0x110>)
 80070ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	08007129 	.word	0x08007129
 80070f8:	08007171 	.word	0x08007171
 80070fc:	08007171 	.word	0x08007171
 8007100:	08007171 	.word	0x08007171
 8007104:	0800713b 	.word	0x0800713b
 8007108:	08007171 	.word	0x08007171
 800710c:	08007171 	.word	0x08007171
 8007110:	08007171 	.word	0x08007171
 8007114:	0800714d 	.word	0x0800714d
 8007118:	08007171 	.word	0x08007171
 800711c:	08007171 	.word	0x08007171
 8007120:	08007171 	.word	0x08007171
 8007124:	0800715f 	.word	0x0800715f
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0202 	orr.w	r2, r2, #2
 8007136:	60da      	str	r2, [r3, #12]
 8007138:	e01d      	b.n	8007176 <HAL_TIM_IC_Start_IT+0x192>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68da      	ldr	r2, [r3, #12]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0204 	orr.w	r2, r2, #4
 8007148:	60da      	str	r2, [r3, #12]
 800714a:	e014      	b.n	8007176 <HAL_TIM_IC_Start_IT+0x192>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0208 	orr.w	r2, r2, #8
 800715a:	60da      	str	r2, [r3, #12]
 800715c:	e00b      	b.n	8007176 <HAL_TIM_IC_Start_IT+0x192>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68da      	ldr	r2, [r3, #12]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f042 0210 	orr.w	r2, r2, #16
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	e002      	b.n	8007176 <HAL_TIM_IC_Start_IT+0x192>
 8007170:	2301      	movs	r3, #1
 8007172:	73fb      	strb	r3, [r7, #15]
 8007174:	bf00      	nop
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d13e      	bne.n	80071fa <HAL_TIM_IC_Start_IT+0x216>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2201      	movs	r2, #1
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	4618      	mov	r0, r3
 8007186:	f001 f80a 	bl	800819e <TIM_CCxChannelCmd>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a1d      	ldr	r2, [pc, #116]	; (8007204 <HAL_TIM_IC_Start_IT+0x220>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d018      	beq.n	80071c6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719c:	d013      	beq.n	80071c6 <HAL_TIM_IC_Start_IT+0x1e2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a19      	ldr	r2, [pc, #100]	; (8007208 <HAL_TIM_IC_Start_IT+0x224>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00e      	beq.n	80071c6 <HAL_TIM_IC_Start_IT+0x1e2>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a17      	ldr	r2, [pc, #92]	; (800720c <HAL_TIM_IC_Start_IT+0x228>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d009      	beq.n	80071c6 <HAL_TIM_IC_Start_IT+0x1e2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a16      	ldr	r2, [pc, #88]	; (8007210 <HAL_TIM_IC_Start_IT+0x22c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d004      	beq.n	80071c6 <HAL_TIM_IC_Start_IT+0x1e2>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a14      	ldr	r2, [pc, #80]	; (8007214 <HAL_TIM_IC_Start_IT+0x230>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d111      	bne.n	80071ea <HAL_TIM_IC_Start_IT+0x206>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	60bb      	str	r3, [r7, #8]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b06      	cmp	r3, #6
 80071d6:	d010      	beq.n	80071fa <HAL_TIM_IC_Start_IT+0x216>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	e007      	b.n	80071fa <HAL_TIM_IC_Start_IT+0x216>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f042 0201 	orr.w	r2, r2, #1
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	40010000 	.word	0x40010000
 8007208:	40000400 	.word	0x40000400
 800720c:	40000800 	.word	0x40000800
 8007210:	40000c00 	.word	0x40000c00
 8007214:	40014000 	.word	0x40014000

08007218 <HAL_TIM_IC_Stop_IT>:
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
 8007222:	2300      	movs	r3, #0
 8007224:	73fb      	strb	r3, [r7, #15]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b0c      	cmp	r3, #12
 800722a:	d841      	bhi.n	80072b0 <HAL_TIM_IC_Stop_IT+0x98>
 800722c:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <HAL_TIM_IC_Stop_IT+0x1c>)
 800722e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007232:	bf00      	nop
 8007234:	08007269 	.word	0x08007269
 8007238:	080072b1 	.word	0x080072b1
 800723c:	080072b1 	.word	0x080072b1
 8007240:	080072b1 	.word	0x080072b1
 8007244:	0800727b 	.word	0x0800727b
 8007248:	080072b1 	.word	0x080072b1
 800724c:	080072b1 	.word	0x080072b1
 8007250:	080072b1 	.word	0x080072b1
 8007254:	0800728d 	.word	0x0800728d
 8007258:	080072b1 	.word	0x080072b1
 800725c:	080072b1 	.word	0x080072b1
 8007260:	080072b1 	.word	0x080072b1
 8007264:	0800729f 	.word	0x0800729f
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 0202 	bic.w	r2, r2, #2
 8007276:	60da      	str	r2, [r3, #12]
 8007278:	e01d      	b.n	80072b6 <HAL_TIM_IC_Stop_IT+0x9e>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f022 0204 	bic.w	r2, r2, #4
 8007288:	60da      	str	r2, [r3, #12]
 800728a:	e014      	b.n	80072b6 <HAL_TIM_IC_Stop_IT+0x9e>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0208 	bic.w	r2, r2, #8
 800729a:	60da      	str	r2, [r3, #12]
 800729c:	e00b      	b.n	80072b6 <HAL_TIM_IC_Stop_IT+0x9e>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0210 	bic.w	r2, r2, #16
 80072ac:	60da      	str	r2, [r3, #12]
 80072ae:	e002      	b.n	80072b6 <HAL_TIM_IC_Stop_IT+0x9e>
 80072b0:	2301      	movs	r3, #1
 80072b2:	73fb      	strb	r3, [r7, #15]
 80072b4:	bf00      	nop
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d156      	bne.n	800736a <HAL_TIM_IC_Stop_IT+0x152>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2200      	movs	r2, #0
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 ff6a 	bl	800819e <TIM_CCxChannelCmd>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6a1a      	ldr	r2, [r3, #32]
 80072d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80072d4:	4013      	ands	r3, r2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10f      	bne.n	80072fa <HAL_TIM_IC_Stop_IT+0xe2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6a1a      	ldr	r2, [r3, #32]
 80072e0:	f240 4344 	movw	r3, #1092	; 0x444
 80072e4:	4013      	ands	r3, r2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d107      	bne.n	80072fa <HAL_TIM_IC_Stop_IT+0xe2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0201 	bic.w	r2, r2, #1
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d104      	bne.n	800730a <HAL_TIM_IC_Stop_IT+0xf2>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007308:	e013      	b.n	8007332 <HAL_TIM_IC_Stop_IT+0x11a>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b04      	cmp	r3, #4
 800730e:	d104      	bne.n	800731a <HAL_TIM_IC_Stop_IT+0x102>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007318:	e00b      	b.n	8007332 <HAL_TIM_IC_Stop_IT+0x11a>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b08      	cmp	r3, #8
 800731e:	d104      	bne.n	800732a <HAL_TIM_IC_Stop_IT+0x112>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007328:	e003      	b.n	8007332 <HAL_TIM_IC_Stop_IT+0x11a>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d104      	bne.n	8007342 <HAL_TIM_IC_Stop_IT+0x12a>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007340:	e013      	b.n	800736a <HAL_TIM_IC_Stop_IT+0x152>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b04      	cmp	r3, #4
 8007346:	d104      	bne.n	8007352 <HAL_TIM_IC_Stop_IT+0x13a>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007350:	e00b      	b.n	800736a <HAL_TIM_IC_Stop_IT+0x152>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b08      	cmp	r3, #8
 8007356:	d104      	bne.n	8007362 <HAL_TIM_IC_Stop_IT+0x14a>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007360:	e003      	b.n	800736a <HAL_TIM_IC_Stop_IT+0x152>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_TIM_IRQHandler>:
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b02      	cmp	r3, #2
 8007388:	d122      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x5c>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b02      	cmp	r3, #2
 8007396:	d11b      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x5c>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0202 	mvn.w	r2, #2
 80073a0:	611a      	str	r2, [r3, #16]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	771a      	strb	r2, [r3, #28]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_TIM_IRQHandler+0x4a>
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa98 	bl	80078ec <HAL_TIM_IC_CaptureCallback>
 80073bc:	e005      	b.n	80073ca <HAL_TIM_IRQHandler+0x56>
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa8a 	bl	80078d8 <HAL_TIM_OC_DelayElapsedCallback>
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fa9b 	bl	8007900 <HAL_TIM_PWM_PulseFinishedCallback>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	771a      	strb	r2, [r3, #28]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d122      	bne.n	8007424 <HAL_TIM_IRQHandler+0xb0>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d11b      	bne.n	8007424 <HAL_TIM_IRQHandler+0xb0>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0204 	mvn.w	r2, #4
 80073f4:	611a      	str	r2, [r3, #16]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2202      	movs	r2, #2
 80073fa:	771a      	strb	r2, [r3, #28]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_TIM_IRQHandler+0x9e>
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fa6e 	bl	80078ec <HAL_TIM_IC_CaptureCallback>
 8007410:	e005      	b.n	800741e <HAL_TIM_IRQHandler+0xaa>
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa60 	bl	80078d8 <HAL_TIM_OC_DelayElapsedCallback>
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fa71 	bl	8007900 <HAL_TIM_PWM_PulseFinishedCallback>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	771a      	strb	r2, [r3, #28]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0308 	and.w	r3, r3, #8
 800742e:	2b08      	cmp	r3, #8
 8007430:	d122      	bne.n	8007478 <HAL_TIM_IRQHandler+0x104>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f003 0308 	and.w	r3, r3, #8
 800743c:	2b08      	cmp	r3, #8
 800743e:	d11b      	bne.n	8007478 <HAL_TIM_IRQHandler+0x104>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0208 	mvn.w	r2, #8
 8007448:	611a      	str	r2, [r3, #16]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2204      	movs	r2, #4
 800744e:	771a      	strb	r2, [r3, #28]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f003 0303 	and.w	r3, r3, #3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_TIM_IRQHandler+0xf2>
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fa44 	bl	80078ec <HAL_TIM_IC_CaptureCallback>
 8007464:	e005      	b.n	8007472 <HAL_TIM_IRQHandler+0xfe>
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fa36 	bl	80078d8 <HAL_TIM_OC_DelayElapsedCallback>
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fa47 	bl	8007900 <HAL_TIM_PWM_PulseFinishedCallback>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	771a      	strb	r2, [r3, #28]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0310 	and.w	r3, r3, #16
 8007482:	2b10      	cmp	r3, #16
 8007484:	d122      	bne.n	80074cc <HAL_TIM_IRQHandler+0x158>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f003 0310 	and.w	r3, r3, #16
 8007490:	2b10      	cmp	r3, #16
 8007492:	d11b      	bne.n	80074cc <HAL_TIM_IRQHandler+0x158>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0210 	mvn.w	r2, #16
 800749c:	611a      	str	r2, [r3, #16]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2208      	movs	r2, #8
 80074a2:	771a      	strb	r2, [r3, #28]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_TIM_IRQHandler+0x146>
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fa1a 	bl	80078ec <HAL_TIM_IC_CaptureCallback>
 80074b8:	e005      	b.n	80074c6 <HAL_TIM_IRQHandler+0x152>
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa0c 	bl	80078d8 <HAL_TIM_OC_DelayElapsedCallback>
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fa1d 	bl	8007900 <HAL_TIM_PWM_PulseFinishedCallback>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	771a      	strb	r2, [r3, #28]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d10e      	bne.n	80074f8 <HAL_TIM_IRQHandler+0x184>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d107      	bne.n	80074f8 <HAL_TIM_IRQHandler+0x184>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f06f 0201 	mvn.w	r2, #1
 80074f0:	611a      	str	r2, [r3, #16]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9e6 	bl	80078c4 <HAL_TIM_PeriodElapsedCallback>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007502:	2b80      	cmp	r3, #128	; 0x80
 8007504:	d10e      	bne.n	8007524 <HAL_TIM_IRQHandler+0x1b0>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007510:	2b80      	cmp	r3, #128	; 0x80
 8007512:	d107      	bne.n	8007524 <HAL_TIM_IRQHandler+0x1b0>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800751c:	611a      	str	r2, [r3, #16]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 f88e 	bl	8008640 <HAL_TIMEx_BreakCallback>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752e:	2b40      	cmp	r3, #64	; 0x40
 8007530:	d10e      	bne.n	8007550 <HAL_TIM_IRQHandler+0x1dc>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753c:	2b40      	cmp	r3, #64	; 0x40
 800753e:	d107      	bne.n	8007550 <HAL_TIM_IRQHandler+0x1dc>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007548:	611a      	str	r2, [r3, #16]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f9e2 	bl	8007914 <HAL_TIM_TriggerCallback>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b20      	cmp	r3, #32
 800755c:	d10e      	bne.n	800757c <HAL_TIM_IRQHandler+0x208>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0320 	and.w	r3, r3, #32
 8007568:	2b20      	cmp	r3, #32
 800756a:	d107      	bne.n	800757c <HAL_TIM_IRQHandler+0x208>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f06f 0220 	mvn.w	r2, #32
 8007574:	611a      	str	r2, [r3, #16]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 f858 	bl	800862c <HAL_TIMEx_CommutCallback>
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_TIM_IC_ConfigChannel>:
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	2300      	movs	r3, #0
 8007592:	75fb      	strb	r3, [r7, #23]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800759a:	2b01      	cmp	r3, #1
 800759c:	d101      	bne.n	80075a2 <HAL_TIM_IC_ConfigChannel+0x1e>
 800759e:	2302      	movs	r3, #2
 80075a0:	e088      	b.n	80076b4 <HAL_TIM_IC_ConfigChannel+0x130>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d11b      	bne.n	80075e8 <HAL_TIM_IC_ConfigChannel+0x64>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6818      	ldr	r0, [r3, #0]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	6819      	ldr	r1, [r3, #0]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f000 fc50 	bl	8007e64 <TIM_TI1_SetConfig>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 020c 	bic.w	r2, r2, #12
 80075d2:	619a      	str	r2, [r3, #24]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6999      	ldr	r1, [r3, #24]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	619a      	str	r2, [r3, #24]
 80075e6:	e060      	b.n	80076aa <HAL_TIM_IC_ConfigChannel+0x126>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d11c      	bne.n	8007628 <HAL_TIM_IC_ConfigChannel+0xa4>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6819      	ldr	r1, [r3, #0]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f000 fcc8 	bl	8007f92 <TIM_TI2_SetConfig>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	699a      	ldr	r2, [r3, #24]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007610:	619a      	str	r2, [r3, #24]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6999      	ldr	r1, [r3, #24]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	021a      	lsls	r2, r3, #8
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	619a      	str	r2, [r3, #24]
 8007626:	e040      	b.n	80076aa <HAL_TIM_IC_ConfigChannel+0x126>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b08      	cmp	r3, #8
 800762c:	d11b      	bne.n	8007666 <HAL_TIM_IC_ConfigChannel+0xe2>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	6819      	ldr	r1, [r3, #0]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f000 fd15 	bl	800806c <TIM_TI3_SetConfig>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	69da      	ldr	r2, [r3, #28]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 020c 	bic.w	r2, r2, #12
 8007650:	61da      	str	r2, [r3, #28]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69d9      	ldr	r1, [r3, #28]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	61da      	str	r2, [r3, #28]
 8007664:	e021      	b.n	80076aa <HAL_TIM_IC_ConfigChannel+0x126>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b0c      	cmp	r3, #12
 800766a:	d11c      	bne.n	80076a6 <HAL_TIM_IC_ConfigChannel+0x122>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	6819      	ldr	r1, [r3, #0]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f000 fd32 	bl	80080e4 <TIM_TI4_SetConfig>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69da      	ldr	r2, [r3, #28]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800768e:	61da      	str	r2, [r3, #28]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	69d9      	ldr	r1, [r3, #28]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	021a      	lsls	r2, r3, #8
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	61da      	str	r2, [r3, #28]
 80076a4:	e001      	b.n	80076aa <HAL_TIM_IC_ConfigChannel+0x126>
 80076a6:	2301      	movs	r3, #1
 80076a8:	75fb      	strb	r3, [r7, #23]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	4618      	mov	r0, r3
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_TIM_PWM_ConfigChannel>:
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	2300      	movs	r3, #0
 80076ca:	75fb      	strb	r3, [r7, #23]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e0ae      	b.n	8007838 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b0c      	cmp	r3, #12
 80076e6:	f200 809f 	bhi.w	8007828 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80076ea:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f0:	08007725 	.word	0x08007725
 80076f4:	08007829 	.word	0x08007829
 80076f8:	08007829 	.word	0x08007829
 80076fc:	08007829 	.word	0x08007829
 8007700:	08007765 	.word	0x08007765
 8007704:	08007829 	.word	0x08007829
 8007708:	08007829 	.word	0x08007829
 800770c:	08007829 	.word	0x08007829
 8007710:	080077a7 	.word	0x080077a7
 8007714:	08007829 	.word	0x08007829
 8007718:	08007829 	.word	0x08007829
 800771c:	08007829 	.word	0x08007829
 8007720:	080077e7 	.word	0x080077e7
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68b9      	ldr	r1, [r7, #8]
 800772a:	4618      	mov	r0, r3
 800772c:	f000 f97c 	bl	8007a28 <TIM_OC1_SetConfig>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699a      	ldr	r2, [r3, #24]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0208 	orr.w	r2, r2, #8
 800773e:	619a      	str	r2, [r3, #24]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	699a      	ldr	r2, [r3, #24]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0204 	bic.w	r2, r2, #4
 800774e:	619a      	str	r2, [r3, #24]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6999      	ldr	r1, [r3, #24]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	691a      	ldr	r2, [r3, #16]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	619a      	str	r2, [r3, #24]
 8007762:	e064      	b.n	800782e <HAL_TIM_PWM_ConfigChannel+0x172>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	4618      	mov	r0, r3
 800776c:	f000 f9c2 	bl	8007af4 <TIM_OC2_SetConfig>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699a      	ldr	r2, [r3, #24]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800777e:	619a      	str	r2, [r3, #24]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699a      	ldr	r2, [r3, #24]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800778e:	619a      	str	r2, [r3, #24]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6999      	ldr	r1, [r3, #24]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	021a      	lsls	r2, r3, #8
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	619a      	str	r2, [r3, #24]
 80077a4:	e043      	b.n	800782e <HAL_TIM_PWM_ConfigChannel+0x172>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68b9      	ldr	r1, [r7, #8]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 fa0d 	bl	8007bcc <TIM_OC3_SetConfig>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	69da      	ldr	r2, [r3, #28]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f042 0208 	orr.w	r2, r2, #8
 80077c0:	61da      	str	r2, [r3, #28]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	69da      	ldr	r2, [r3, #28]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0204 	bic.w	r2, r2, #4
 80077d0:	61da      	str	r2, [r3, #28]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69d9      	ldr	r1, [r3, #28]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	691a      	ldr	r2, [r3, #16]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	61da      	str	r2, [r3, #28]
 80077e4:	e023      	b.n	800782e <HAL_TIM_PWM_ConfigChannel+0x172>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fa57 	bl	8007ca0 <TIM_OC4_SetConfig>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69da      	ldr	r2, [r3, #28]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007800:	61da      	str	r2, [r3, #28]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69da      	ldr	r2, [r3, #28]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007810:	61da      	str	r2, [r3, #28]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69d9      	ldr	r1, [r3, #28]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	021a      	lsls	r2, r3, #8
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	61da      	str	r2, [r3, #28]
 8007826:	e002      	b.n	800782e <HAL_TIM_PWM_ConfigChannel+0x172>
 8007828:	2301      	movs	r3, #1
 800782a:	75fb      	strb	r3, [r7, #23]
 800782c:	bf00      	nop
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007836:	7dfb      	ldrb	r3, [r7, #23]
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_TIM_SlaveConfigSynchro>:
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007850:	2b01      	cmp	r3, #1
 8007852:	d101      	bne.n	8007858 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007854:	2302      	movs	r3, #2
 8007856:	e031      	b.n	80078bc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fa68 	bl	8007d40 <TIM_SlaveTimer_SetConfig>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d009      	beq.n	800788a <HAL_TIM_SlaveConfigSynchro+0x4a>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007886:	2301      	movs	r3, #1
 8007888:	e018      	b.n	80078bc <HAL_TIM_SlaveConfigSynchro+0x7c>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007898:	60da      	str	r2, [r3, #12]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078a8:	60da      	str	r2, [r3, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80078ba:	2300      	movs	r3, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <HAL_TIM_PeriodElapsedCallback>:
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_TIM_OC_DelayElapsedCallback>:
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_TIM_IC_CaptureCallback>:
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_TIM_TriggerCallback>:
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <TIM_Base_SetConfig>:
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a34      	ldr	r2, [pc, #208]	; (8007a0c <TIM_Base_SetConfig+0xe4>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00f      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007946:	d00b      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a31      	ldr	r2, [pc, #196]	; (8007a10 <TIM_Base_SetConfig+0xe8>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d007      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a30      	ldr	r2, [pc, #192]	; (8007a14 <TIM_Base_SetConfig+0xec>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d003      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a2f      	ldr	r2, [pc, #188]	; (8007a18 <TIM_Base_SetConfig+0xf0>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d108      	bne.n	8007972 <TIM_Base_SetConfig+0x4a>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a25      	ldr	r2, [pc, #148]	; (8007a0c <TIM_Base_SetConfig+0xe4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d01b      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007980:	d017      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a22      	ldr	r2, [pc, #136]	; (8007a10 <TIM_Base_SetConfig+0xe8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d013      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a21      	ldr	r2, [pc, #132]	; (8007a14 <TIM_Base_SetConfig+0xec>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00f      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a20      	ldr	r2, [pc, #128]	; (8007a18 <TIM_Base_SetConfig+0xf0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00b      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1f      	ldr	r2, [pc, #124]	; (8007a1c <TIM_Base_SetConfig+0xf4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d007      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a1e      	ldr	r2, [pc, #120]	; (8007a20 <TIM_Base_SetConfig+0xf8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d003      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a1d      	ldr	r2, [pc, #116]	; (8007a24 <TIM_Base_SetConfig+0xfc>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d108      	bne.n	80079c4 <TIM_Base_SetConfig+0x9c>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	62da      	str	r2, [r3, #44]	; 0x2c
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	629a      	str	r2, [r3, #40]	; 0x28
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a08      	ldr	r2, [pc, #32]	; (8007a0c <TIM_Base_SetConfig+0xe4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d103      	bne.n	80079f8 <TIM_Base_SetConfig+0xd0>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	691a      	ldr	r2, [r3, #16]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	631a      	str	r2, [r3, #48]	; 0x30
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	615a      	str	r2, [r3, #20]
 80079fe:	bf00      	nop
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	40000400 	.word	0x40000400
 8007a14:	40000800 	.word	0x40000800
 8007a18:	40000c00 	.word	0x40000c00
 8007a1c:	40014000 	.word	0x40014000
 8007a20:	40014400 	.word	0x40014400
 8007a24:	40014800 	.word	0x40014800

08007a28 <TIM_OC1_SetConfig>:
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f023 0201 	bic.w	r2, r3, #1
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	621a      	str	r2, [r3, #32]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	617b      	str	r3, [r7, #20]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	613b      	str	r3, [r7, #16]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0303 	bic.w	r3, r3, #3
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f023 0302 	bic.w	r3, r3, #2
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a1c      	ldr	r2, [pc, #112]	; (8007af0 <TIM_OC1_SetConfig+0xc8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d10c      	bne.n	8007a9e <TIM_OC1_SetConfig+0x76>
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f023 0308 	bic.w	r3, r3, #8
 8007a8a:	617b      	str	r3, [r7, #20]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f023 0304 	bic.w	r3, r3, #4
 8007a9c:	617b      	str	r3, [r7, #20]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a13      	ldr	r2, [pc, #76]	; (8007af0 <TIM_OC1_SetConfig+0xc8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d111      	bne.n	8007aca <TIM_OC1_SetConfig+0xa2>
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aac:	613b      	str	r3, [r7, #16]
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	613b      	str	r3, [r7, #16]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	605a      	str	r2, [r3, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	619a      	str	r2, [r3, #24]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	635a      	str	r2, [r3, #52]	; 0x34
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	621a      	str	r2, [r3, #32]
 8007ae4:	bf00      	nop
 8007ae6:	371c      	adds	r7, #28
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	40010000 	.word	0x40010000

08007af4 <TIM_OC2_SetConfig>:
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	f023 0210 	bic.w	r2, r3, #16
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	621a      	str	r2, [r3, #32]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	613b      	str	r3, [r7, #16]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	021b      	lsls	r3, r3, #8
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f023 0320 	bic.w	r3, r3, #32
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a1e      	ldr	r2, [pc, #120]	; (8007bc8 <TIM_OC2_SetConfig+0xd4>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d10d      	bne.n	8007b70 <TIM_OC2_SetConfig+0x7c>
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b5a:	617b      	str	r3, [r7, #20]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6e:	617b      	str	r3, [r7, #20]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a15      	ldr	r2, [pc, #84]	; (8007bc8 <TIM_OC2_SetConfig+0xd4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d113      	bne.n	8007ba0 <TIM_OC2_SetConfig+0xac>
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b7e:	613b      	str	r3, [r7, #16]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b86:	613b      	str	r3, [r7, #16]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	605a      	str	r2, [r3, #4]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	619a      	str	r2, [r3, #24]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	621a      	str	r2, [r3, #32]
 8007bba:	bf00      	nop
 8007bbc:	371c      	adds	r7, #28
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	40010000 	.word	0x40010000

08007bcc <TIM_OC3_SetConfig>:
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	621a      	str	r2, [r3, #32]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	613b      	str	r3, [r7, #16]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0303 	bic.w	r3, r3, #3
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c14:	617b      	str	r3, [r7, #20]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a1d      	ldr	r2, [pc, #116]	; (8007c9c <TIM_OC3_SetConfig+0xd0>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d10d      	bne.n	8007c46 <TIM_OC3_SetConfig+0x7a>
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c30:	617b      	str	r3, [r7, #20]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c44:	617b      	str	r3, [r7, #20]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a14      	ldr	r2, [pc, #80]	; (8007c9c <TIM_OC3_SetConfig+0xd0>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d113      	bne.n	8007c76 <TIM_OC3_SetConfig+0xaa>
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c54:	613b      	str	r3, [r7, #16]
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c5c:	613b      	str	r3, [r7, #16]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	011b      	lsls	r3, r3, #4
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	613b      	str	r3, [r7, #16]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	011b      	lsls	r3, r3, #4
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	613b      	str	r3, [r7, #16]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	605a      	str	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	61da      	str	r2, [r3, #28]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	63da      	str	r2, [r3, #60]	; 0x3c
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	621a      	str	r2, [r3, #32]
 8007c90:	bf00      	nop
 8007c92:	371c      	adds	r7, #28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	40010000 	.word	0x40010000

08007ca0 <TIM_OC4_SetConfig>:
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	621a      	str	r2, [r3, #32]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	613b      	str	r3, [r7, #16]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cea:	613b      	str	r3, [r7, #16]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	031b      	lsls	r3, r3, #12
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a10      	ldr	r2, [pc, #64]	; (8007d3c <TIM_OC4_SetConfig+0x9c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d109      	bne.n	8007d14 <TIM_OC4_SetConfig+0x74>
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d06:	617b      	str	r3, [r7, #20]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	019b      	lsls	r3, r3, #6
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	605a      	str	r2, [r3, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	61da      	str	r2, [r3, #28]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	621a      	str	r2, [r3, #32]
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	40010000 	.word	0x40010000

08007d40 <TIM_SlaveTimer_SetConfig>:
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	75fb      	strb	r3, [r7, #23]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	613b      	str	r3, [r7, #16]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f023 0307 	bic.w	r3, r3, #7
 8007d6e:	613b      	str	r3, [r7, #16]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	609a      	str	r2, [r3, #8]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	2b70      	cmp	r3, #112	; 0x70
 8007d88:	d01a      	beq.n	8007dc0 <TIM_SlaveTimer_SetConfig+0x80>
 8007d8a:	2b70      	cmp	r3, #112	; 0x70
 8007d8c:	d860      	bhi.n	8007e50 <TIM_SlaveTimer_SetConfig+0x110>
 8007d8e:	2b60      	cmp	r3, #96	; 0x60
 8007d90:	d054      	beq.n	8007e3c <TIM_SlaveTimer_SetConfig+0xfc>
 8007d92:	2b60      	cmp	r3, #96	; 0x60
 8007d94:	d85c      	bhi.n	8007e50 <TIM_SlaveTimer_SetConfig+0x110>
 8007d96:	2b50      	cmp	r3, #80	; 0x50
 8007d98:	d046      	beq.n	8007e28 <TIM_SlaveTimer_SetConfig+0xe8>
 8007d9a:	2b50      	cmp	r3, #80	; 0x50
 8007d9c:	d858      	bhi.n	8007e50 <TIM_SlaveTimer_SetConfig+0x110>
 8007d9e:	2b40      	cmp	r3, #64	; 0x40
 8007da0:	d019      	beq.n	8007dd6 <TIM_SlaveTimer_SetConfig+0x96>
 8007da2:	2b40      	cmp	r3, #64	; 0x40
 8007da4:	d854      	bhi.n	8007e50 <TIM_SlaveTimer_SetConfig+0x110>
 8007da6:	2b30      	cmp	r3, #48	; 0x30
 8007da8:	d055      	beq.n	8007e56 <TIM_SlaveTimer_SetConfig+0x116>
 8007daa:	2b30      	cmp	r3, #48	; 0x30
 8007dac:	d850      	bhi.n	8007e50 <TIM_SlaveTimer_SetConfig+0x110>
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	d051      	beq.n	8007e56 <TIM_SlaveTimer_SetConfig+0x116>
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d84c      	bhi.n	8007e50 <TIM_SlaveTimer_SetConfig+0x110>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d04d      	beq.n	8007e56 <TIM_SlaveTimer_SetConfig+0x116>
 8007dba:	2b10      	cmp	r3, #16
 8007dbc:	d04b      	beq.n	8007e56 <TIM_SlaveTimer_SetConfig+0x116>
 8007dbe:	e047      	b.n	8007e50 <TIM_SlaveTimer_SetConfig+0x110>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	68d9      	ldr	r1, [r3, #12]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	f000 f9c5 	bl	800815e <TIM_ETR_SetConfig>
 8007dd4:	e040      	b.n	8007e58 <TIM_SlaveTimer_SetConfig+0x118>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b05      	cmp	r3, #5
 8007ddc:	d101      	bne.n	8007de2 <TIM_SlaveTimer_SetConfig+0xa2>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e03b      	b.n	8007e5a <TIM_SlaveTimer_SetConfig+0x11a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6a1a      	ldr	r2, [r3, #32]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0201 	bic.w	r2, r2, #1
 8007df8:	621a      	str	r2, [r3, #32]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	60bb      	str	r3, [r7, #8]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e08:	60bb      	str	r3, [r7, #8]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	011b      	lsls	r3, r3, #4
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60bb      	str	r3, [r7, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	619a      	str	r2, [r3, #24]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	621a      	str	r2, [r3, #32]
 8007e26:	e017      	b.n	8007e58 <TIM_SlaveTimer_SetConfig+0x118>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6818      	ldr	r0, [r3, #0]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	6899      	ldr	r1, [r3, #8]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	461a      	mov	r2, r3
 8007e36:	f000 f87d 	bl	8007f34 <TIM_TI1_ConfigInputStage>
 8007e3a:	e00d      	b.n	8007e58 <TIM_SlaveTimer_SetConfig+0x118>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6818      	ldr	r0, [r3, #0]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	6899      	ldr	r1, [r3, #8]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	f000 f8df 	bl	800800c <TIM_TI2_ConfigInputStage>
 8007e4e:	e003      	b.n	8007e58 <TIM_SlaveTimer_SetConfig+0x118>
 8007e50:	2301      	movs	r3, #1
 8007e52:	75fb      	strb	r3, [r7, #23]
 8007e54:	e000      	b.n	8007e58 <TIM_SlaveTimer_SetConfig+0x118>
 8007e56:	bf00      	nop
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <TIM_TI1_SetConfig>:
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	603b      	str	r3, [r7, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	f023 0201 	bic.w	r2, r3, #1
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	621a      	str	r2, [r3, #32]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	613b      	str	r3, [r7, #16]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4a24      	ldr	r2, [pc, #144]	; (8007f20 <TIM_TI1_SetConfig+0xbc>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d013      	beq.n	8007eba <TIM_TI1_SetConfig+0x56>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e98:	d00f      	beq.n	8007eba <TIM_TI1_SetConfig+0x56>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	4a21      	ldr	r2, [pc, #132]	; (8007f24 <TIM_TI1_SetConfig+0xc0>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00b      	beq.n	8007eba <TIM_TI1_SetConfig+0x56>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	4a20      	ldr	r2, [pc, #128]	; (8007f28 <TIM_TI1_SetConfig+0xc4>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d007      	beq.n	8007eba <TIM_TI1_SetConfig+0x56>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4a1f      	ldr	r2, [pc, #124]	; (8007f2c <TIM_TI1_SetConfig+0xc8>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d003      	beq.n	8007eba <TIM_TI1_SetConfig+0x56>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4a1e      	ldr	r2, [pc, #120]	; (8007f30 <TIM_TI1_SetConfig+0xcc>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d101      	bne.n	8007ebe <TIM_TI1_SetConfig+0x5a>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e000      	b.n	8007ec0 <TIM_TI1_SetConfig+0x5c>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d008      	beq.n	8007ed6 <TIM_TI1_SetConfig+0x72>
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f023 0303 	bic.w	r3, r3, #3
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	617b      	str	r3, [r7, #20]
 8007ed4:	e003      	b.n	8007ede <TIM_TI1_SetConfig+0x7a>
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f043 0301 	orr.w	r3, r3, #1
 8007edc:	617b      	str	r3, [r7, #20]
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ee4:	617b      	str	r3, [r7, #20]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	011b      	lsls	r3, r3, #4
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	f023 030a 	bic.w	r3, r3, #10
 8007ef8:	613b      	str	r3, [r7, #16]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f003 030a 	and.w	r3, r3, #10
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	613b      	str	r3, [r7, #16]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	619a      	str	r2, [r3, #24]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	621a      	str	r2, [r3, #32]
 8007f12:	bf00      	nop
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	40010000 	.word	0x40010000
 8007f24:	40000400 	.word	0x40000400
 8007f28:	40000800 	.word	0x40000800
 8007f2c:	40000c00 	.word	0x40000c00
 8007f30:	40014000 	.word	0x40014000

08007f34 <TIM_TI1_ConfigInputStage>:
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	f023 0201 	bic.w	r2, r3, #1
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	621a      	str	r2, [r3, #32]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	613b      	str	r3, [r7, #16]
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f5e:	613b      	str	r3, [r7, #16]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	011b      	lsls	r3, r3, #4
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	613b      	str	r3, [r7, #16]
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f023 030a 	bic.w	r3, r3, #10
 8007f70:	617b      	str	r3, [r7, #20]
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	617b      	str	r3, [r7, #20]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	619a      	str	r2, [r3, #24]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	621a      	str	r2, [r3, #32]
 8007f86:	bf00      	nop
 8007f88:	371c      	adds	r7, #28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <TIM_TI2_SetConfig>:
 8007f92:	b480      	push	{r7}
 8007f94:	b087      	sub	sp, #28
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	60f8      	str	r0, [r7, #12]
 8007f9a:	60b9      	str	r1, [r7, #8]
 8007f9c:	607a      	str	r2, [r7, #4]
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	f023 0210 	bic.w	r2, r3, #16
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	621a      	str	r2, [r3, #32]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	617b      	str	r3, [r7, #20]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	021b      	lsls	r3, r3, #8
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	617b      	str	r3, [r7, #20]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fd0:	617b      	str	r3, [r7, #20]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	031b      	lsls	r3, r3, #12
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fe4:	613b      	str	r3, [r7, #16]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	011b      	lsls	r3, r3, #4
 8007fea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	613b      	str	r3, [r7, #16]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	619a      	str	r2, [r3, #24]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	621a      	str	r2, [r3, #32]
 8008000:	bf00      	nop
 8008002:	371c      	adds	r7, #28
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <TIM_TI2_ConfigInputStage>:
 800800c:	b480      	push	{r7}
 800800e:	b087      	sub	sp, #28
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6a1b      	ldr	r3, [r3, #32]
 800801c:	f023 0210 	bic.w	r2, r3, #16
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	621a      	str	r2, [r3, #32]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	617b      	str	r3, [r7, #20]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	613b      	str	r3, [r7, #16]
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	031b      	lsls	r3, r3, #12
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008048:	613b      	str	r3, [r7, #16]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	011b      	lsls	r3, r3, #4
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	4313      	orrs	r3, r2
 8008052:	613b      	str	r3, [r7, #16]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	619a      	str	r2, [r3, #24]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	621a      	str	r2, [r3, #32]
 8008060:	bf00      	nop
 8008062:	371c      	adds	r7, #28
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <TIM_TI3_SetConfig>:
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	621a      	str	r2, [r3, #32]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	617b      	str	r3, [r7, #20]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	613b      	str	r3, [r7, #16]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f023 0303 	bic.w	r3, r3, #3
 8008098:	617b      	str	r3, [r7, #20]
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4313      	orrs	r3, r2
 80080a0:	617b      	str	r3, [r7, #20]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	011b      	lsls	r3, r3, #4
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	021b      	lsls	r3, r3, #8
 80080c2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	613b      	str	r3, [r7, #16]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	61da      	str	r2, [r3, #28]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	621a      	str	r2, [r3, #32]
 80080d8:	bf00      	nop
 80080da:	371c      	adds	r7, #28
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <TIM_TI4_SetConfig>:
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	603b      	str	r3, [r7, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	621a      	str	r2, [r3, #32]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	617b      	str	r3, [r7, #20]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	613b      	str	r3, [r7, #16]
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008110:	617b      	str	r3, [r7, #20]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	4313      	orrs	r3, r2
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008122:	617b      	str	r3, [r7, #20]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	031b      	lsls	r3, r3, #12
 8008128:	b29b      	uxth	r3, r3
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	4313      	orrs	r3, r2
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008136:	613b      	str	r3, [r7, #16]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	031b      	lsls	r3, r3, #12
 800813c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	4313      	orrs	r3, r2
 8008144:	613b      	str	r3, [r7, #16]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	61da      	str	r2, [r3, #28]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	621a      	str	r2, [r3, #32]
 8008152:	bf00      	nop
 8008154:	371c      	adds	r7, #28
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <TIM_ETR_SetConfig>:
 800815e:	b480      	push	{r7}
 8008160:	b087      	sub	sp, #28
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	607a      	str	r2, [r7, #4]
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	617b      	str	r3, [r7, #20]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	021a      	lsls	r2, r3, #8
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	431a      	orrs	r2, r3
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	4313      	orrs	r3, r2
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	4313      	orrs	r3, r2
 800818a:	617b      	str	r3, [r7, #20]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	609a      	str	r2, [r3, #8]
 8008192:	bf00      	nop
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <TIM_CCxChannelCmd>:
 800819e:	b480      	push	{r7}
 80081a0:	b087      	sub	sp, #28
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	f003 031f 	and.w	r3, r3, #31
 80081b0:	2201      	movs	r2, #1
 80081b2:	fa02 f303 	lsl.w	r3, r2, r3
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6a1a      	ldr	r2, [r3, #32]
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	43db      	mvns	r3, r3
 80081c0:	401a      	ands	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	621a      	str	r2, [r3, #32]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6a1a      	ldr	r2, [r3, #32]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f003 031f 	and.w	r3, r3, #31
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	fa01 f303 	lsl.w	r3, r1, r3
 80081d6:	431a      	orrs	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	621a      	str	r2, [r3, #32]
 80081dc:	bf00      	nop
 80081de:	371c      	adds	r7, #28
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_TIMEx_HallSensor_Init>:
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08a      	sub	sp, #40	; 0x28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <HAL_TIMEx_HallSensor_Init+0x14>
 80081f8:	2301      	movs	r3, #1
 80081fa:	e09a      	b.n	8008332 <HAL_TIMEx_HallSensor_Init+0x14a>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d106      	bne.n	8008216 <HAL_TIMEx_HallSensor_Init+0x2e>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7f9 fd31 	bl	8001c78 <HAL_TIMEx_HallSensor_MspInit>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2202      	movs	r2, #2
 800821a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3304      	adds	r3, #4
 8008226:	4619      	mov	r1, r3
 8008228:	4610      	mov	r0, r2
 800822a:	f7ff fb7d 	bl	8007928 <TIM_Base_SetConfig>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6819      	ldr	r1, [r3, #0]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	2203      	movs	r2, #3
 800823c:	f7ff fe12 	bl	8007e64 <TIM_TI1_SetConfig>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699a      	ldr	r2, [r3, #24]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 020c 	bic.w	r2, r2, #12
 800824e:	619a      	str	r2, [r3, #24]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6999      	ldr	r1, [r3, #24]
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	619a      	str	r2, [r3, #24]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008270:	605a      	str	r2, [r3, #4]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008280:	609a      	str	r2, [r3, #8]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008290:	609a      	str	r2, [r3, #8]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689a      	ldr	r2, [r3, #8]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0207 	bic.w	r2, r2, #7
 80082a0:	609a      	str	r2, [r3, #8]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	689a      	ldr	r2, [r3, #8]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f042 0204 	orr.w	r2, r2, #4
 80082b0:	609a      	str	r2, [r3, #8]
 80082b2:	2300      	movs	r3, #0
 80082b4:	61fb      	str	r3, [r7, #28]
 80082b6:	2300      	movs	r3, #0
 80082b8:	623b      	str	r3, [r7, #32]
 80082ba:	2370      	movs	r3, #112	; 0x70
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	2300      	movs	r3, #0
 80082c0:	627b      	str	r3, [r7, #36]	; 0x24
 80082c2:	2300      	movs	r3, #0
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	2300      	movs	r3, #0
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	613b      	str	r3, [r7, #16]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f107 020c 	add.w	r2, r7, #12
 80082d8:	4611      	mov	r1, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f7ff fc0a 	bl	8007af4 <TIM_OC2_SetConfig>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80082ee:	605a      	str	r2, [r3, #4]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80082fe:	605a      	str	r2, [r3, #4]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008330:	2300      	movs	r3, #0
 8008332:	4618      	mov	r0, r3
 8008334:	3728      	adds	r7, #40	; 0x28
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <HAL_TIMEx_HallSensor_Start>:
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800834a:	73fb      	strb	r3, [r7, #15]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008352:	73bb      	strb	r3, [r7, #14]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800835a:	737b      	strb	r3, [r7, #13]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008362:	733b      	strb	r3, [r7, #12]
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d108      	bne.n	800837c <HAL_TIMEx_HallSensor_Start+0x40>
 800836a:	7bbb      	ldrb	r3, [r7, #14]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d105      	bne.n	800837c <HAL_TIMEx_HallSensor_Start+0x40>
 8008370:	7b7b      	ldrb	r3, [r7, #13]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d102      	bne.n	800837c <HAL_TIMEx_HallSensor_Start+0x40>
 8008376:	7b3b      	ldrb	r3, [r7, #12]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d001      	beq.n	8008380 <HAL_TIMEx_HallSensor_Start+0x44>
 800837c:	2301      	movs	r3, #1
 800837e:	e04f      	b.n	8008420 <HAL_TIMEx_HallSensor_Start+0xe4>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2201      	movs	r2, #1
 80083a6:	2100      	movs	r1, #0
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7ff fef8 	bl	800819e <TIM_CCxChannelCmd>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a1d      	ldr	r2, [pc, #116]	; (8008428 <HAL_TIMEx_HallSensor_Start+0xec>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d018      	beq.n	80083ea <HAL_TIMEx_HallSensor_Start+0xae>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c0:	d013      	beq.n	80083ea <HAL_TIMEx_HallSensor_Start+0xae>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a19      	ldr	r2, [pc, #100]	; (800842c <HAL_TIMEx_HallSensor_Start+0xf0>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d00e      	beq.n	80083ea <HAL_TIMEx_HallSensor_Start+0xae>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a17      	ldr	r2, [pc, #92]	; (8008430 <HAL_TIMEx_HallSensor_Start+0xf4>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d009      	beq.n	80083ea <HAL_TIMEx_HallSensor_Start+0xae>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a16      	ldr	r2, [pc, #88]	; (8008434 <HAL_TIMEx_HallSensor_Start+0xf8>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d004      	beq.n	80083ea <HAL_TIMEx_HallSensor_Start+0xae>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a14      	ldr	r2, [pc, #80]	; (8008438 <HAL_TIMEx_HallSensor_Start+0xfc>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d111      	bne.n	800840e <HAL_TIMEx_HallSensor_Start+0xd2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f003 0307 	and.w	r3, r3, #7
 80083f4:	60bb      	str	r3, [r7, #8]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2b06      	cmp	r3, #6
 80083fa:	d010      	beq.n	800841e <HAL_TIMEx_HallSensor_Start+0xe2>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f042 0201 	orr.w	r2, r2, #1
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	e007      	b.n	800841e <HAL_TIMEx_HallSensor_Start+0xe2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f042 0201 	orr.w	r2, r2, #1
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	2300      	movs	r3, #0
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	40010000 	.word	0x40010000
 800842c:	40000400 	.word	0x40000400
 8008430:	40000800 	.word	0x40000800
 8008434:	40000c00 	.word	0x40000c00
 8008438:	40014000 	.word	0x40014000

0800843c <HAL_TIMEx_HallSensor_Stop>:
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2200      	movs	r2, #0
 800844a:	2100      	movs	r1, #0
 800844c:	4618      	mov	r0, r3
 800844e:	f7ff fea6 	bl	800819e <TIM_CCxChannelCmd>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6a1a      	ldr	r2, [r3, #32]
 8008458:	f241 1311 	movw	r3, #4369	; 0x1111
 800845c:	4013      	ands	r3, r2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10f      	bne.n	8008482 <HAL_TIMEx_HallSensor_Stop+0x46>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6a1a      	ldr	r2, [r3, #32]
 8008468:	f240 4344 	movw	r3, #1092	; 0x444
 800846c:	4013      	ands	r3, r2
 800846e:	2b00      	cmp	r3, #0
 8008470:	d107      	bne.n	8008482 <HAL_TIMEx_HallSensor_Stop+0x46>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0201 	bic.w	r2, r2, #1
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084a2:	2300      	movs	r3, #0
 80084a4:	4618      	mov	r0, r3
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_TIMEx_MasterConfigSynchronization>:
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d101      	bne.n	80084c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084c0:	2302      	movs	r3, #2
 80084c2:	e050      	b.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2202      	movs	r2, #2
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	60bb      	str	r3, [r7, #8]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	605a      	str	r2, [r3, #4]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a1c      	ldr	r2, [pc, #112]	; (8008574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d018      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008510:	d013      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a18      	ldr	r2, [pc, #96]	; (8008578 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00e      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a16      	ldr	r2, [pc, #88]	; (800857c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d009      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a15      	ldr	r2, [pc, #84]	; (8008580 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d004      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a13      	ldr	r2, [pc, #76]	; (8008584 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d10c      	bne.n	8008554 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008540:	60bb      	str	r3, [r7, #8]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	4313      	orrs	r3, r2
 800854a:	60bb      	str	r3, [r7, #8]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	609a      	str	r2, [r3, #8]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008564:	2300      	movs	r3, #0
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	40010000 	.word	0x40010000
 8008578:	40000400 	.word	0x40000400
 800857c:	40000800 	.word	0x40000800
 8008580:	40000c00 	.word	0x40000c00
 8008584:	40014000 	.word	0x40014000

08008588 <HAL_TIMEx_ConfigBreakDeadTime>:
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
 8008592:	2300      	movs	r3, #0
 8008594:	60fb      	str	r3, [r7, #12]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800859c:	2b01      	cmp	r3, #1
 800859e:	d101      	bne.n	80085a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80085a0:	2302      	movs	r3, #2
 80085a2:	e03d      	b.n	8008620 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	60fb      	str	r3, [r7, #12]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	4313      	orrs	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	645a      	str	r2, [r3, #68]	; 0x44
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800861e:	2300      	movs	r3, #0
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_TIMEx_CommutCallback>:
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <HAL_TIMEx_BreakCallback>:
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_UART_Init>:
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <HAL_UART_Init+0x12>
 8008662:	2301      	movs	r3, #1
 8008664:	e03f      	b.n	80086e6 <HAL_UART_Init+0x92>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d106      	bne.n	8008680 <HAL_UART_Init+0x2c>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7f9 fbf6 	bl	8001e6c <HAL_UART_MspInit>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2224      	movs	r2, #36	; 0x24
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008696:	60da      	str	r2, [r3, #12]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f829 	bl	80086f0 <UART_SetConfig>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	691a      	ldr	r2, [r3, #16]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086ac:	611a      	str	r2, [r3, #16]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	695a      	ldr	r2, [r3, #20]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086bc:	615a      	str	r2, [r3, #20]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68da      	ldr	r2, [r3, #12]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086cc:	60da      	str	r2, [r3, #12]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	641a      	str	r2, [r3, #64]	; 0x40
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2220      	movs	r2, #32
 80086e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086e4:	2300      	movs	r3, #0
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <UART_SetConfig>:
 80086f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086f4:	b0c0      	sub	sp, #256	; 0x100
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80086fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800870c:	68d9      	ldr	r1, [r3, #12]
 800870e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	ea40 0301 	orr.w	r3, r0, r1
 8008718:	6113      	str	r3, [r2, #16]
 800871a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871e:	689a      	ldr	r2, [r3, #8]
 8008720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	431a      	orrs	r2, r3
 8008728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	431a      	orrs	r2, r3
 8008730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	4313      	orrs	r3, r2
 8008738:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800873c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008748:	f021 010c 	bic.w	r1, r1, #12
 800874c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008756:	430b      	orrs	r3, r1
 8008758:	60d3      	str	r3, [r2, #12]
 800875a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800876a:	6999      	ldr	r1, [r3, #24]
 800876c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	ea40 0301 	orr.w	r3, r0, r1
 8008776:	6153      	str	r3, [r2, #20]
 8008778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	4b8f      	ldr	r3, [pc, #572]	; (80089bc <UART_SetConfig+0x2cc>)
 8008780:	429a      	cmp	r2, r3
 8008782:	d005      	beq.n	8008790 <UART_SetConfig+0xa0>
 8008784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	4b8d      	ldr	r3, [pc, #564]	; (80089c0 <UART_SetConfig+0x2d0>)
 800878c:	429a      	cmp	r2, r3
 800878e:	d104      	bne.n	800879a <UART_SetConfig+0xaa>
 8008790:	f7fe f8ee 	bl	8006970 <HAL_RCC_GetPCLK2Freq>
 8008794:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008798:	e003      	b.n	80087a2 <UART_SetConfig+0xb2>
 800879a:	f7fe f8d5 	bl	8006948 <HAL_RCC_GetPCLK1Freq>
 800879e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80087a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a6:	69db      	ldr	r3, [r3, #28]
 80087a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ac:	f040 810c 	bne.w	80089c8 <UART_SetConfig+0x2d8>
 80087b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087b4:	2200      	movs	r2, #0
 80087b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80087be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80087c2:	4622      	mov	r2, r4
 80087c4:	462b      	mov	r3, r5
 80087c6:	1891      	adds	r1, r2, r2
 80087c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80087ca:	415b      	adcs	r3, r3
 80087cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80087d2:	4621      	mov	r1, r4
 80087d4:	eb12 0801 	adds.w	r8, r2, r1
 80087d8:	4629      	mov	r1, r5
 80087da:	eb43 0901 	adc.w	r9, r3, r1
 80087de:	f04f 0200 	mov.w	r2, #0
 80087e2:	f04f 0300 	mov.w	r3, #0
 80087e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087f2:	4690      	mov	r8, r2
 80087f4:	4699      	mov	r9, r3
 80087f6:	4623      	mov	r3, r4
 80087f8:	eb18 0303 	adds.w	r3, r8, r3
 80087fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008800:	462b      	mov	r3, r5
 8008802:	eb49 0303 	adc.w	r3, r9, r3
 8008806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800880a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008816:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800881a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800881e:	460b      	mov	r3, r1
 8008820:	18db      	adds	r3, r3, r3
 8008822:	653b      	str	r3, [r7, #80]	; 0x50
 8008824:	4613      	mov	r3, r2
 8008826:	eb42 0303 	adc.w	r3, r2, r3
 800882a:	657b      	str	r3, [r7, #84]	; 0x54
 800882c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008830:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008834:	f7f8 f9c0 	bl	8000bb8 <__aeabi_uldivmod>
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	4b61      	ldr	r3, [pc, #388]	; (80089c4 <UART_SetConfig+0x2d4>)
 800883e:	fba3 2302 	umull	r2, r3, r3, r2
 8008842:	095b      	lsrs	r3, r3, #5
 8008844:	011c      	lsls	r4, r3, #4
 8008846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800884a:	2200      	movs	r2, #0
 800884c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008850:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008854:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008858:	4642      	mov	r2, r8
 800885a:	464b      	mov	r3, r9
 800885c:	1891      	adds	r1, r2, r2
 800885e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008860:	415b      	adcs	r3, r3
 8008862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008864:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008868:	4641      	mov	r1, r8
 800886a:	eb12 0a01 	adds.w	sl, r2, r1
 800886e:	4649      	mov	r1, r9
 8008870:	eb43 0b01 	adc.w	fp, r3, r1
 8008874:	f04f 0200 	mov.w	r2, #0
 8008878:	f04f 0300 	mov.w	r3, #0
 800887c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008880:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008884:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008888:	4692      	mov	sl, r2
 800888a:	469b      	mov	fp, r3
 800888c:	4643      	mov	r3, r8
 800888e:	eb1a 0303 	adds.w	r3, sl, r3
 8008892:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008896:	464b      	mov	r3, r9
 8008898:	eb4b 0303 	adc.w	r3, fp, r3
 800889c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80088a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80088b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80088b4:	460b      	mov	r3, r1
 80088b6:	18db      	adds	r3, r3, r3
 80088b8:	643b      	str	r3, [r7, #64]	; 0x40
 80088ba:	4613      	mov	r3, r2
 80088bc:	eb42 0303 	adc.w	r3, r2, r3
 80088c0:	647b      	str	r3, [r7, #68]	; 0x44
 80088c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80088c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80088ca:	f7f8 f975 	bl	8000bb8 <__aeabi_uldivmod>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4611      	mov	r1, r2
 80088d4:	4b3b      	ldr	r3, [pc, #236]	; (80089c4 <UART_SetConfig+0x2d4>)
 80088d6:	fba3 2301 	umull	r2, r3, r3, r1
 80088da:	095b      	lsrs	r3, r3, #5
 80088dc:	2264      	movs	r2, #100	; 0x64
 80088de:	fb02 f303 	mul.w	r3, r2, r3
 80088e2:	1acb      	subs	r3, r1, r3
 80088e4:	00db      	lsls	r3, r3, #3
 80088e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80088ea:	4b36      	ldr	r3, [pc, #216]	; (80089c4 <UART_SetConfig+0x2d4>)
 80088ec:	fba3 2302 	umull	r2, r3, r3, r2
 80088f0:	095b      	lsrs	r3, r3, #5
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088f8:	441c      	add	r4, r3
 80088fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088fe:	2200      	movs	r2, #0
 8008900:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008904:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008908:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800890c:	4642      	mov	r2, r8
 800890e:	464b      	mov	r3, r9
 8008910:	1891      	adds	r1, r2, r2
 8008912:	63b9      	str	r1, [r7, #56]	; 0x38
 8008914:	415b      	adcs	r3, r3
 8008916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800891c:	4641      	mov	r1, r8
 800891e:	1851      	adds	r1, r2, r1
 8008920:	6339      	str	r1, [r7, #48]	; 0x30
 8008922:	4649      	mov	r1, r9
 8008924:	414b      	adcs	r3, r1
 8008926:	637b      	str	r3, [r7, #52]	; 0x34
 8008928:	f04f 0200 	mov.w	r2, #0
 800892c:	f04f 0300 	mov.w	r3, #0
 8008930:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008934:	4659      	mov	r1, fp
 8008936:	00cb      	lsls	r3, r1, #3
 8008938:	4651      	mov	r1, sl
 800893a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800893e:	4651      	mov	r1, sl
 8008940:	00ca      	lsls	r2, r1, #3
 8008942:	4610      	mov	r0, r2
 8008944:	4619      	mov	r1, r3
 8008946:	4603      	mov	r3, r0
 8008948:	4642      	mov	r2, r8
 800894a:	189b      	adds	r3, r3, r2
 800894c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008950:	464b      	mov	r3, r9
 8008952:	460a      	mov	r2, r1
 8008954:	eb42 0303 	adc.w	r3, r2, r3
 8008958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800895c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008968:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800896c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008970:	460b      	mov	r3, r1
 8008972:	18db      	adds	r3, r3, r3
 8008974:	62bb      	str	r3, [r7, #40]	; 0x28
 8008976:	4613      	mov	r3, r2
 8008978:	eb42 0303 	adc.w	r3, r2, r3
 800897c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800897e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008982:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008986:	f7f8 f917 	bl	8000bb8 <__aeabi_uldivmod>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4b0d      	ldr	r3, [pc, #52]	; (80089c4 <UART_SetConfig+0x2d4>)
 8008990:	fba3 1302 	umull	r1, r3, r3, r2
 8008994:	095b      	lsrs	r3, r3, #5
 8008996:	2164      	movs	r1, #100	; 0x64
 8008998:	fb01 f303 	mul.w	r3, r1, r3
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	3332      	adds	r3, #50	; 0x32
 80089a2:	4a08      	ldr	r2, [pc, #32]	; (80089c4 <UART_SetConfig+0x2d4>)
 80089a4:	fba2 2303 	umull	r2, r3, r2, r3
 80089a8:	095b      	lsrs	r3, r3, #5
 80089aa:	f003 0207 	and.w	r2, r3, #7
 80089ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4422      	add	r2, r4
 80089b6:	609a      	str	r2, [r3, #8]
 80089b8:	e106      	b.n	8008bc8 <UART_SetConfig+0x4d8>
 80089ba:	bf00      	nop
 80089bc:	40011000 	.word	0x40011000
 80089c0:	40011400 	.word	0x40011400
 80089c4:	51eb851f 	.word	0x51eb851f
 80089c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089cc:	2200      	movs	r2, #0
 80089ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80089d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80089da:	4642      	mov	r2, r8
 80089dc:	464b      	mov	r3, r9
 80089de:	1891      	adds	r1, r2, r2
 80089e0:	6239      	str	r1, [r7, #32]
 80089e2:	415b      	adcs	r3, r3
 80089e4:	627b      	str	r3, [r7, #36]	; 0x24
 80089e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089ea:	4641      	mov	r1, r8
 80089ec:	1854      	adds	r4, r2, r1
 80089ee:	4649      	mov	r1, r9
 80089f0:	eb43 0501 	adc.w	r5, r3, r1
 80089f4:	f04f 0200 	mov.w	r2, #0
 80089f8:	f04f 0300 	mov.w	r3, #0
 80089fc:	00eb      	lsls	r3, r5, #3
 80089fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a02:	00e2      	lsls	r2, r4, #3
 8008a04:	4614      	mov	r4, r2
 8008a06:	461d      	mov	r5, r3
 8008a08:	4643      	mov	r3, r8
 8008a0a:	18e3      	adds	r3, r4, r3
 8008a0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a10:	464b      	mov	r3, r9
 8008a12:	eb45 0303 	adc.w	r3, r5, r3
 8008a16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a2a:	f04f 0200 	mov.w	r2, #0
 8008a2e:	f04f 0300 	mov.w	r3, #0
 8008a32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008a36:	4629      	mov	r1, r5
 8008a38:	008b      	lsls	r3, r1, #2
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a40:	4621      	mov	r1, r4
 8008a42:	008a      	lsls	r2, r1, #2
 8008a44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008a48:	f7f8 f8b6 	bl	8000bb8 <__aeabi_uldivmod>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	4b60      	ldr	r3, [pc, #384]	; (8008bd4 <UART_SetConfig+0x4e4>)
 8008a52:	fba3 2302 	umull	r2, r3, r3, r2
 8008a56:	095b      	lsrs	r3, r3, #5
 8008a58:	011c      	lsls	r4, r3, #4
 8008a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	464b      	mov	r3, r9
 8008a70:	1891      	adds	r1, r2, r2
 8008a72:	61b9      	str	r1, [r7, #24]
 8008a74:	415b      	adcs	r3, r3
 8008a76:	61fb      	str	r3, [r7, #28]
 8008a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a7c:	4641      	mov	r1, r8
 8008a7e:	1851      	adds	r1, r2, r1
 8008a80:	6139      	str	r1, [r7, #16]
 8008a82:	4649      	mov	r1, r9
 8008a84:	414b      	adcs	r3, r1
 8008a86:	617b      	str	r3, [r7, #20]
 8008a88:	f04f 0200 	mov.w	r2, #0
 8008a8c:	f04f 0300 	mov.w	r3, #0
 8008a90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a94:	4659      	mov	r1, fp
 8008a96:	00cb      	lsls	r3, r1, #3
 8008a98:	4651      	mov	r1, sl
 8008a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a9e:	4651      	mov	r1, sl
 8008aa0:	00ca      	lsls	r2, r1, #3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	4642      	mov	r2, r8
 8008aaa:	189b      	adds	r3, r3, r2
 8008aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ab0:	464b      	mov	r3, r9
 8008ab2:	460a      	mov	r2, r1
 8008ab4:	eb42 0303 	adc.w	r3, r2, r3
 8008ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ac6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ac8:	f04f 0200 	mov.w	r2, #0
 8008acc:	f04f 0300 	mov.w	r3, #0
 8008ad0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	008b      	lsls	r3, r1, #2
 8008ad8:	4641      	mov	r1, r8
 8008ada:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ade:	4641      	mov	r1, r8
 8008ae0:	008a      	lsls	r2, r1, #2
 8008ae2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008ae6:	f7f8 f867 	bl	8000bb8 <__aeabi_uldivmod>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4611      	mov	r1, r2
 8008af0:	4b38      	ldr	r3, [pc, #224]	; (8008bd4 <UART_SetConfig+0x4e4>)
 8008af2:	fba3 2301 	umull	r2, r3, r3, r1
 8008af6:	095b      	lsrs	r3, r3, #5
 8008af8:	2264      	movs	r2, #100	; 0x64
 8008afa:	fb02 f303 	mul.w	r3, r2, r3
 8008afe:	1acb      	subs	r3, r1, r3
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	3332      	adds	r3, #50	; 0x32
 8008b04:	4a33      	ldr	r2, [pc, #204]	; (8008bd4 <UART_SetConfig+0x4e4>)
 8008b06:	fba2 2303 	umull	r2, r3, r2, r3
 8008b0a:	095b      	lsrs	r3, r3, #5
 8008b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b10:	441c      	add	r4, r3
 8008b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b16:	2200      	movs	r2, #0
 8008b18:	673b      	str	r3, [r7, #112]	; 0x70
 8008b1a:	677a      	str	r2, [r7, #116]	; 0x74
 8008b1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008b20:	4642      	mov	r2, r8
 8008b22:	464b      	mov	r3, r9
 8008b24:	1891      	adds	r1, r2, r2
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	415b      	adcs	r3, r3
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b30:	4641      	mov	r1, r8
 8008b32:	1851      	adds	r1, r2, r1
 8008b34:	6039      	str	r1, [r7, #0]
 8008b36:	4649      	mov	r1, r9
 8008b38:	414b      	adcs	r3, r1
 8008b3a:	607b      	str	r3, [r7, #4]
 8008b3c:	f04f 0200 	mov.w	r2, #0
 8008b40:	f04f 0300 	mov.w	r3, #0
 8008b44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b48:	4659      	mov	r1, fp
 8008b4a:	00cb      	lsls	r3, r1, #3
 8008b4c:	4651      	mov	r1, sl
 8008b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b52:	4651      	mov	r1, sl
 8008b54:	00ca      	lsls	r2, r1, #3
 8008b56:	4610      	mov	r0, r2
 8008b58:	4619      	mov	r1, r3
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	4642      	mov	r2, r8
 8008b5e:	189b      	adds	r3, r3, r2
 8008b60:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b62:	464b      	mov	r3, r9
 8008b64:	460a      	mov	r2, r1
 8008b66:	eb42 0303 	adc.w	r3, r2, r3
 8008b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	663b      	str	r3, [r7, #96]	; 0x60
 8008b76:	667a      	str	r2, [r7, #100]	; 0x64
 8008b78:	f04f 0200 	mov.w	r2, #0
 8008b7c:	f04f 0300 	mov.w	r3, #0
 8008b80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008b84:	4649      	mov	r1, r9
 8008b86:	008b      	lsls	r3, r1, #2
 8008b88:	4641      	mov	r1, r8
 8008b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b8e:	4641      	mov	r1, r8
 8008b90:	008a      	lsls	r2, r1, #2
 8008b92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008b96:	f7f8 f80f 	bl	8000bb8 <__aeabi_uldivmod>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4b0d      	ldr	r3, [pc, #52]	; (8008bd4 <UART_SetConfig+0x4e4>)
 8008ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ba4:	095b      	lsrs	r3, r3, #5
 8008ba6:	2164      	movs	r1, #100	; 0x64
 8008ba8:	fb01 f303 	mul.w	r3, r1, r3
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	011b      	lsls	r3, r3, #4
 8008bb0:	3332      	adds	r3, #50	; 0x32
 8008bb2:	4a08      	ldr	r2, [pc, #32]	; (8008bd4 <UART_SetConfig+0x4e4>)
 8008bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb8:	095b      	lsrs	r3, r3, #5
 8008bba:	f003 020f 	and.w	r2, r3, #15
 8008bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4422      	add	r2, r4
 8008bc6:	609a      	str	r2, [r3, #8]
 8008bc8:	bf00      	nop
 8008bca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bd4:	51eb851f 	.word	0x51eb851f

08008bd8 <USB_CoreInit>:
 8008bd8:	b084      	sub	sp, #16
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	f107 001c 	add.w	r0, r7, #28
 8008be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8008bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d122      	bne.n	8008c36 <USB_CoreInit+0x5e>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	639a      	str	r2, [r3, #56]	; 0x38
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	60d3      	str	r3, [r2, #12]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	60da      	str	r2, [r3, #12]
 8008c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d105      	bne.n	8008c2a <USB_CoreInit+0x52>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	60da      	str	r2, [r3, #12]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 fbee 	bl	800a40c <USB_CoreReset>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73fb      	strb	r3, [r7, #15]
 8008c34:	e01a      	b.n	8008c6c <USB_CoreInit+0x94>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60da      	str	r2, [r3, #12]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f001 fbe2 	bl	800a40c <USB_CoreReset>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]
 8008c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d106      	bne.n	8008c60 <USB_CoreInit+0x88>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38
 8008c5e:	e005      	b.n	8008c6c <USB_CoreInit+0x94>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	639a      	str	r2, [r3, #56]	; 0x38
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d10b      	bne.n	8008c8a <USB_CoreInit+0xb2>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f043 0206 	orr.w	r2, r3, #6
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	609a      	str	r2, [r3, #8]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f043 0220 	orr.w	r2, r3, #32
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	609a      	str	r2, [r3, #8]
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c96:	b004      	add	sp, #16
 8008c98:	4770      	bx	lr
	...

08008c9c <USB_SetTurnaroundTime>:
 8008c9c:	b480      	push	{r7}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	71fb      	strb	r3, [r7, #7]
 8008caa:	79fb      	ldrb	r3, [r7, #7]
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d165      	bne.n	8008d7c <USB_SetTurnaroundTime+0xe0>
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	4a41      	ldr	r2, [pc, #260]	; (8008db8 <USB_SetTurnaroundTime+0x11c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d906      	bls.n	8008cc6 <USB_SetTurnaroundTime+0x2a>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	4a40      	ldr	r2, [pc, #256]	; (8008dbc <USB_SetTurnaroundTime+0x120>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d202      	bcs.n	8008cc6 <USB_SetTurnaroundTime+0x2a>
 8008cc0:	230f      	movs	r3, #15
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	e062      	b.n	8008d8c <USB_SetTurnaroundTime+0xf0>
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	4a3c      	ldr	r2, [pc, #240]	; (8008dbc <USB_SetTurnaroundTime+0x120>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d306      	bcc.n	8008cdc <USB_SetTurnaroundTime+0x40>
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	4a3b      	ldr	r2, [pc, #236]	; (8008dc0 <USB_SetTurnaroundTime+0x124>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d202      	bcs.n	8008cdc <USB_SetTurnaroundTime+0x40>
 8008cd6:	230e      	movs	r3, #14
 8008cd8:	617b      	str	r3, [r7, #20]
 8008cda:	e057      	b.n	8008d8c <USB_SetTurnaroundTime+0xf0>
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	4a38      	ldr	r2, [pc, #224]	; (8008dc0 <USB_SetTurnaroundTime+0x124>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d306      	bcc.n	8008cf2 <USB_SetTurnaroundTime+0x56>
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	4a37      	ldr	r2, [pc, #220]	; (8008dc4 <USB_SetTurnaroundTime+0x128>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d202      	bcs.n	8008cf2 <USB_SetTurnaroundTime+0x56>
 8008cec:	230d      	movs	r3, #13
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	e04c      	b.n	8008d8c <USB_SetTurnaroundTime+0xf0>
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	4a33      	ldr	r2, [pc, #204]	; (8008dc4 <USB_SetTurnaroundTime+0x128>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d306      	bcc.n	8008d08 <USB_SetTurnaroundTime+0x6c>
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	4a32      	ldr	r2, [pc, #200]	; (8008dc8 <USB_SetTurnaroundTime+0x12c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d802      	bhi.n	8008d08 <USB_SetTurnaroundTime+0x6c>
 8008d02:	230c      	movs	r3, #12
 8008d04:	617b      	str	r3, [r7, #20]
 8008d06:	e041      	b.n	8008d8c <USB_SetTurnaroundTime+0xf0>
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	4a2f      	ldr	r2, [pc, #188]	; (8008dc8 <USB_SetTurnaroundTime+0x12c>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d906      	bls.n	8008d1e <USB_SetTurnaroundTime+0x82>
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	4a2e      	ldr	r2, [pc, #184]	; (8008dcc <USB_SetTurnaroundTime+0x130>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d802      	bhi.n	8008d1e <USB_SetTurnaroundTime+0x82>
 8008d18:	230b      	movs	r3, #11
 8008d1a:	617b      	str	r3, [r7, #20]
 8008d1c:	e036      	b.n	8008d8c <USB_SetTurnaroundTime+0xf0>
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	4a2a      	ldr	r2, [pc, #168]	; (8008dcc <USB_SetTurnaroundTime+0x130>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d906      	bls.n	8008d34 <USB_SetTurnaroundTime+0x98>
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	4a29      	ldr	r2, [pc, #164]	; (8008dd0 <USB_SetTurnaroundTime+0x134>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d802      	bhi.n	8008d34 <USB_SetTurnaroundTime+0x98>
 8008d2e:	230a      	movs	r3, #10
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	e02b      	b.n	8008d8c <USB_SetTurnaroundTime+0xf0>
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	4a26      	ldr	r2, [pc, #152]	; (8008dd0 <USB_SetTurnaroundTime+0x134>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d906      	bls.n	8008d4a <USB_SetTurnaroundTime+0xae>
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	4a25      	ldr	r2, [pc, #148]	; (8008dd4 <USB_SetTurnaroundTime+0x138>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d202      	bcs.n	8008d4a <USB_SetTurnaroundTime+0xae>
 8008d44:	2309      	movs	r3, #9
 8008d46:	617b      	str	r3, [r7, #20]
 8008d48:	e020      	b.n	8008d8c <USB_SetTurnaroundTime+0xf0>
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	4a21      	ldr	r2, [pc, #132]	; (8008dd4 <USB_SetTurnaroundTime+0x138>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d306      	bcc.n	8008d60 <USB_SetTurnaroundTime+0xc4>
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	4a20      	ldr	r2, [pc, #128]	; (8008dd8 <USB_SetTurnaroundTime+0x13c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d802      	bhi.n	8008d60 <USB_SetTurnaroundTime+0xc4>
 8008d5a:	2308      	movs	r3, #8
 8008d5c:	617b      	str	r3, [r7, #20]
 8008d5e:	e015      	b.n	8008d8c <USB_SetTurnaroundTime+0xf0>
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	4a1d      	ldr	r2, [pc, #116]	; (8008dd8 <USB_SetTurnaroundTime+0x13c>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d906      	bls.n	8008d76 <USB_SetTurnaroundTime+0xda>
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	4a1c      	ldr	r2, [pc, #112]	; (8008ddc <USB_SetTurnaroundTime+0x140>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d202      	bcs.n	8008d76 <USB_SetTurnaroundTime+0xda>
 8008d70:	2307      	movs	r3, #7
 8008d72:	617b      	str	r3, [r7, #20]
 8008d74:	e00a      	b.n	8008d8c <USB_SetTurnaroundTime+0xf0>
 8008d76:	2306      	movs	r3, #6
 8008d78:	617b      	str	r3, [r7, #20]
 8008d7a:	e007      	b.n	8008d8c <USB_SetTurnaroundTime+0xf0>
 8008d7c:	79fb      	ldrb	r3, [r7, #7]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d102      	bne.n	8008d88 <USB_SetTurnaroundTime+0xec>
 8008d82:	2309      	movs	r3, #9
 8008d84:	617b      	str	r3, [r7, #20]
 8008d86:	e001      	b.n	8008d8c <USB_SetTurnaroundTime+0xf0>
 8008d88:	2309      	movs	r3, #9
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	60da      	str	r2, [r3, #12]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	68da      	ldr	r2, [r3, #12]
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	029b      	lsls	r3, r3, #10
 8008da0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008da4:	431a      	orrs	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	60da      	str	r2, [r3, #12]
 8008daa:	2300      	movs	r3, #0
 8008dac:	4618      	mov	r0, r3
 8008dae:	371c      	adds	r7, #28
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	00d8acbf 	.word	0x00d8acbf
 8008dbc:	00e4e1c0 	.word	0x00e4e1c0
 8008dc0:	00f42400 	.word	0x00f42400
 8008dc4:	01067380 	.word	0x01067380
 8008dc8:	011a499f 	.word	0x011a499f
 8008dcc:	01312cff 	.word	0x01312cff
 8008dd0:	014ca43f 	.word	0x014ca43f
 8008dd4:	016e3600 	.word	0x016e3600
 8008dd8:	01a6ab1f 	.word	0x01a6ab1f
 8008ddc:	01e84800 	.word	0x01e84800

08008de0 <USB_EnableGlobalInt>:
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f043 0201 	orr.w	r2, r3, #1
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	609a      	str	r2, [r3, #8]
 8008df4:	2300      	movs	r3, #0
 8008df6:	4618      	mov	r0, r3
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <USB_DisableGlobalInt>:
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f023 0201 	bic.w	r2, r3, #1
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	609a      	str	r2, [r3, #8]
 8008e16:	2300      	movs	r3, #0
 8008e18:	4618      	mov	r0, r3
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <USB_SetCurrentMode>:
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	70fb      	strb	r3, [r7, #3]
 8008e30:	2300      	movs	r3, #0
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	60da      	str	r2, [r3, #12]
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d115      	bne.n	8008e72 <USB_SetCurrentMode+0x4e>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	60da      	str	r2, [r3, #12]
 8008e52:	2001      	movs	r0, #1
 8008e54:	f7f9 fa86 	bl	8002364 <HAL_Delay>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	60fb      	str	r3, [r7, #12]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f001 fa45 	bl	800a2ee <USB_GetMode>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d01e      	beq.n	8008ea8 <USB_SetCurrentMode+0x84>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b31      	cmp	r3, #49	; 0x31
 8008e6e:	d9f0      	bls.n	8008e52 <USB_SetCurrentMode+0x2e>
 8008e70:	e01a      	b.n	8008ea8 <USB_SetCurrentMode+0x84>
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d115      	bne.n	8008ea4 <USB_SetCurrentMode+0x80>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	60da      	str	r2, [r3, #12]
 8008e84:	2001      	movs	r0, #1
 8008e86:	f7f9 fa6d 	bl	8002364 <HAL_Delay>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	60fb      	str	r3, [r7, #12]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f001 fa2c 	bl	800a2ee <USB_GetMode>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <USB_SetCurrentMode+0x84>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2b31      	cmp	r3, #49	; 0x31
 8008ea0:	d9f0      	bls.n	8008e84 <USB_SetCurrentMode+0x60>
 8008ea2:	e001      	b.n	8008ea8 <USB_SetCurrentMode+0x84>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e005      	b.n	8008eb4 <USB_SetCurrentMode+0x90>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2b32      	cmp	r3, #50	; 0x32
 8008eac:	d101      	bne.n	8008eb2 <USB_SetCurrentMode+0x8e>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e000      	b.n	8008eb4 <USB_SetCurrentMode+0x90>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USB_DevInit>:
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b086      	sub	sp, #24
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8008ece:	2300      	movs	r3, #0
 8008ed0:	75fb      	strb	r3, [r7, #23]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	60fb      	str	r3, [r7, #12]
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	613b      	str	r3, [r7, #16]
 8008eda:	e009      	b.n	8008ef0 <USB_DevInit+0x34>
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	3340      	adds	r3, #64	; 0x40
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	605a      	str	r2, [r3, #4]
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	3301      	adds	r3, #1
 8008eee:	613b      	str	r3, [r7, #16]
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	2b0e      	cmp	r3, #14
 8008ef4:	d9f2      	bls.n	8008edc <USB_DevInit+0x20>
 8008ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d11c      	bne.n	8008f36 <USB_DevInit+0x7a>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f0a:	f043 0302 	orr.w	r3, r3, #2
 8008f0e:	6053      	str	r3, [r2, #4]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	639a      	str	r2, [r3, #56]	; 0x38
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	639a      	str	r2, [r3, #56]	; 0x38
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	639a      	str	r2, [r3, #56]	; 0x38
 8008f34:	e00b      	b.n	8008f4e <USB_DevInit+0x92>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	639a      	str	r2, [r3, #56]	; 0x38
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f54:	461a      	mov	r2, r3
 8008f56:	2300      	movs	r3, #0
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f60:	4619      	mov	r1, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f68:	461a      	mov	r2, r3
 8008f6a:	680b      	ldr	r3, [r1, #0]
 8008f6c:	6013      	str	r3, [r2, #0]
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d10c      	bne.n	8008f8e <USB_DevInit+0xd2>
 8008f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d104      	bne.n	8008f84 <USB_DevInit+0xc8>
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f965 	bl	800924c <USB_SetDevSpeed>
 8008f82:	e008      	b.n	8008f96 <USB_DevInit+0xda>
 8008f84:	2101      	movs	r1, #1
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f960 	bl	800924c <USB_SetDevSpeed>
 8008f8c:	e003      	b.n	8008f96 <USB_DevInit+0xda>
 8008f8e:	2103      	movs	r1, #3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f95b 	bl	800924c <USB_SetDevSpeed>
 8008f96:	2110      	movs	r1, #16
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f8f3 	bl	8009184 <USB_FlushTxFifo>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d001      	beq.n	8008fa8 <USB_DevInit+0xec>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	75fb      	strb	r3, [r7, #23]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f91f 	bl	80091ec <USB_FlushRxFifo>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <USB_DevInit+0xfc>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	75fb      	strb	r3, [r7, #23]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	6113      	str	r3, [r2, #16]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fca:	461a      	mov	r2, r3
 8008fcc:	2300      	movs	r3, #0
 8008fce:	6153      	str	r3, [r2, #20]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61d3      	str	r3, [r2, #28]
 8008fdc:	2300      	movs	r3, #0
 8008fde:	613b      	str	r3, [r7, #16]
 8008fe0:	e043      	b.n	800906a <USB_DevInit+0x1ae>
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ff8:	d118      	bne.n	800902c <USB_DevInit+0x170>
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <USB_DevInit+0x15a>
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	015a      	lsls	r2, r3, #5
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4413      	add	r3, r2
 8009008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900c:	461a      	mov	r2, r3
 800900e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	e013      	b.n	800903e <USB_DevInit+0x182>
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009022:	461a      	mov	r2, r3
 8009024:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	e008      	b.n	800903e <USB_DevInit+0x182>
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009038:	461a      	mov	r2, r3
 800903a:	2300      	movs	r3, #0
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	4413      	add	r3, r2
 8009046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800904a:	461a      	mov	r2, r3
 800904c:	2300      	movs	r3, #0
 800904e:	6113      	str	r3, [r2, #16]
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4413      	add	r3, r2
 8009058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800905c:	461a      	mov	r2, r3
 800905e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009062:	6093      	str	r3, [r2, #8]
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	3301      	adds	r3, #1
 8009068:	613b      	str	r3, [r7, #16]
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	429a      	cmp	r2, r3
 8009070:	d3b7      	bcc.n	8008fe2 <USB_DevInit+0x126>
 8009072:	2300      	movs	r3, #0
 8009074:	613b      	str	r3, [r7, #16]
 8009076:	e043      	b.n	8009100 <USB_DevInit+0x244>
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	015a      	lsls	r2, r3, #5
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	4413      	add	r3, r2
 8009080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800908a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800908e:	d118      	bne.n	80090c2 <USB_DevInit+0x206>
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10a      	bne.n	80090ac <USB_DevInit+0x1f0>
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	4413      	add	r3, r2
 800909e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a2:	461a      	mov	r2, r3
 80090a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	e013      	b.n	80090d4 <USB_DevInit+0x218>
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b8:	461a      	mov	r2, r3
 80090ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	e008      	b.n	80090d4 <USB_DevInit+0x218>
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ce:	461a      	mov	r2, r3
 80090d0:	2300      	movs	r3, #0
 80090d2:	6013      	str	r3, [r2, #0]
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e0:	461a      	mov	r2, r3
 80090e2:	2300      	movs	r3, #0
 80090e4:	6113      	str	r3, [r2, #16]
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f2:	461a      	mov	r2, r3
 80090f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090f8:	6093      	str	r3, [r2, #8]
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	3301      	adds	r3, #1
 80090fe:	613b      	str	r3, [r7, #16]
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	429a      	cmp	r2, r3
 8009106:	d3b7      	bcc.n	8009078 <USB_DevInit+0x1bc>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800911a:	6113      	str	r3, [r2, #16]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	619a      	str	r2, [r3, #24]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009128:	615a      	str	r2, [r3, #20]
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	2b00      	cmp	r3, #0
 800912e:	d105      	bne.n	800913c <USB_DevInit+0x280>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	f043 0210 	orr.w	r2, r3, #16
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	619a      	str	r2, [r3, #24]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699a      	ldr	r2, [r3, #24]
 8009140:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <USB_DevInit+0x2c4>)
 8009142:	4313      	orrs	r3, r2
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	6193      	str	r3, [r2, #24]
 8009148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800914a:	2b00      	cmp	r3, #0
 800914c:	d005      	beq.n	800915a <USB_DevInit+0x29e>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	f043 0208 	orr.w	r2, r3, #8
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	619a      	str	r2, [r3, #24]
 800915a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800915c:	2b01      	cmp	r3, #1
 800915e:	d107      	bne.n	8009170 <USB_DevInit+0x2b4>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009168:	f043 0304 	orr.w	r3, r3, #4
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	6193      	str	r3, [r2, #24]
 8009170:	7dfb      	ldrb	r3, [r7, #23]
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800917c:	b004      	add	sp, #16
 800917e:	4770      	bx	lr
 8009180:	803c3800 	.word	0x803c3800

08009184 <USB_FlushTxFifo>:
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	3301      	adds	r3, #1
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4a13      	ldr	r2, [pc, #76]	; (80091e8 <USB_FlushTxFifo+0x64>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d901      	bls.n	80091a4 <USB_FlushTxFifo+0x20>
 80091a0:	2303      	movs	r3, #3
 80091a2:	e01b      	b.n	80091dc <USB_FlushTxFifo+0x58>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	daf2      	bge.n	8009192 <USB_FlushTxFifo+0xe>
 80091ac:	2300      	movs	r3, #0
 80091ae:	60fb      	str	r3, [r7, #12]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	019b      	lsls	r3, r3, #6
 80091b4:	f043 0220 	orr.w	r2, r3, #32
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	611a      	str	r2, [r3, #16]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	3301      	adds	r3, #1
 80091c0:	60fb      	str	r3, [r7, #12]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4a08      	ldr	r2, [pc, #32]	; (80091e8 <USB_FlushTxFifo+0x64>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d901      	bls.n	80091ce <USB_FlushTxFifo+0x4a>
 80091ca:	2303      	movs	r3, #3
 80091cc:	e006      	b.n	80091dc <USB_FlushTxFifo+0x58>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	f003 0320 	and.w	r3, r3, #32
 80091d6:	2b20      	cmp	r3, #32
 80091d8:	d0f0      	beq.n	80091bc <USB_FlushTxFifo+0x38>
 80091da:	2300      	movs	r3, #0
 80091dc:	4618      	mov	r0, r3
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr
 80091e8:	00030d40 	.word	0x00030d40

080091ec <USB_FlushRxFifo>:
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	2300      	movs	r3, #0
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	3301      	adds	r3, #1
 80091fc:	60fb      	str	r3, [r7, #12]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	4a11      	ldr	r2, [pc, #68]	; (8009248 <USB_FlushRxFifo+0x5c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d901      	bls.n	800920a <USB_FlushRxFifo+0x1e>
 8009206:	2303      	movs	r3, #3
 8009208:	e018      	b.n	800923c <USB_FlushRxFifo+0x50>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	2b00      	cmp	r3, #0
 8009210:	daf2      	bge.n	80091f8 <USB_FlushRxFifo+0xc>
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2210      	movs	r2, #16
 800921a:	611a      	str	r2, [r3, #16]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3301      	adds	r3, #1
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	4a08      	ldr	r2, [pc, #32]	; (8009248 <USB_FlushRxFifo+0x5c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d901      	bls.n	800922e <USB_FlushRxFifo+0x42>
 800922a:	2303      	movs	r3, #3
 800922c:	e006      	b.n	800923c <USB_FlushRxFifo+0x50>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f003 0310 	and.w	r3, r3, #16
 8009236:	2b10      	cmp	r3, #16
 8009238:	d0f0      	beq.n	800921c <USB_FlushRxFifo+0x30>
 800923a:	2300      	movs	r3, #0
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	00030d40 	.word	0x00030d40

0800924c <USB_SetDevSpeed>:
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	78fb      	ldrb	r3, [r7, #3]
 8009266:	68f9      	ldr	r1, [r7, #12]
 8009268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800926c:	4313      	orrs	r3, r2
 800926e:	600b      	str	r3, [r1, #0]
 8009270:	2300      	movs	r3, #0
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <USB_GetDevSpeed>:
 800927e:	b480      	push	{r7}
 8009280:	b087      	sub	sp, #28
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	613b      	str	r3, [r7, #16]
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f003 0306 	and.w	r3, r3, #6
 8009296:	60fb      	str	r3, [r7, #12]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d102      	bne.n	80092a4 <USB_GetDevSpeed+0x26>
 800929e:	2300      	movs	r3, #0
 80092a0:	75fb      	strb	r3, [r7, #23]
 80092a2:	e00a      	b.n	80092ba <USB_GetDevSpeed+0x3c>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d002      	beq.n	80092b0 <USB_GetDevSpeed+0x32>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b06      	cmp	r3, #6
 80092ae:	d102      	bne.n	80092b6 <USB_GetDevSpeed+0x38>
 80092b0:	2302      	movs	r3, #2
 80092b2:	75fb      	strb	r3, [r7, #23]
 80092b4:	e001      	b.n	80092ba <USB_GetDevSpeed+0x3c>
 80092b6:	230f      	movs	r3, #15
 80092b8:	75fb      	strb	r3, [r7, #23]
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
 80092bc:	4618      	mov	r0, r3
 80092be:	371c      	adds	r7, #28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <USB_ActivateEndpoint>:
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	60fb      	str	r3, [r7, #12]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	60bb      	str	r3, [r7, #8]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	785b      	ldrb	r3, [r3, #1]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d13a      	bne.n	800935a <USB_ActivateEndpoint+0x92>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ea:	69da      	ldr	r2, [r3, #28]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	f003 030f 	and.w	r3, r3, #15
 80092f4:	2101      	movs	r1, #1
 80092f6:	fa01 f303 	lsl.w	r3, r1, r3
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	68f9      	ldr	r1, [r7, #12]
 80092fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009302:	4313      	orrs	r3, r2
 8009304:	61cb      	str	r3, [r1, #28]
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	4413      	add	r3, r2
 800930e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d155      	bne.n	80093c8 <USB_ActivateEndpoint+0x100>
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4413      	add	r3, r2
 8009324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	791b      	ldrb	r3, [r3, #4]
 8009336:	049b      	lsls	r3, r3, #18
 8009338:	4319      	orrs	r1, r3
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	059b      	lsls	r3, r3, #22
 800933e:	430b      	orrs	r3, r1
 8009340:	4313      	orrs	r3, r2
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	0151      	lsls	r1, r2, #5
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	440a      	add	r2, r1
 800934a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800934e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	e036      	b.n	80093c8 <USB_ActivateEndpoint+0x100>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009360:	69da      	ldr	r2, [r3, #28]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	f003 030f 	and.w	r3, r3, #15
 800936a:	2101      	movs	r1, #1
 800936c:	fa01 f303 	lsl.w	r3, r1, r3
 8009370:	041b      	lsls	r3, r3, #16
 8009372:	68f9      	ldr	r1, [r7, #12]
 8009374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009378:	4313      	orrs	r3, r2
 800937a:	61cb      	str	r3, [r1, #28]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	4413      	add	r3, r2
 8009384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d11a      	bne.n	80093c8 <USB_ActivateEndpoint+0x100>
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	015a      	lsls	r2, r3, #5
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	4413      	add	r3, r2
 800939a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	791b      	ldrb	r3, [r3, #4]
 80093ac:	049b      	lsls	r3, r3, #18
 80093ae:	430b      	orrs	r3, r1
 80093b0:	4313      	orrs	r3, r2
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	0151      	lsls	r1, r2, #5
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	440a      	add	r2, r1
 80093ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	2300      	movs	r3, #0
 80093ca:	4618      	mov	r0, r3
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
	...

080093d8 <USB_DeactivateEndpoint>:
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	60fb      	str	r3, [r7, #12]
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	60bb      	str	r3, [r7, #8]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	785b      	ldrb	r3, [r3, #1]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d161      	bne.n	80094b8 <USB_DeactivateEndpoint+0xe0>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800940a:	d11f      	bne.n	800944c <USB_DeactivateEndpoint+0x74>
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4413      	add	r3, r2
 8009414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	0151      	lsls	r1, r2, #5
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	440a      	add	r2, r1
 8009422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009426:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	0151      	lsls	r1, r2, #5
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	440a      	add	r2, r1
 8009442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009446:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	f003 030f 	and.w	r3, r3, #15
 800945c:	2101      	movs	r1, #1
 800945e:	fa01 f303 	lsl.w	r3, r1, r3
 8009462:	b29b      	uxth	r3, r3
 8009464:	43db      	mvns	r3, r3
 8009466:	68f9      	ldr	r1, [r7, #12]
 8009468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800946c:	4013      	ands	r3, r2
 800946e:	63cb      	str	r3, [r1, #60]	; 0x3c
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009476:	69da      	ldr	r2, [r3, #28]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	f003 030f 	and.w	r3, r3, #15
 8009480:	2101      	movs	r1, #1
 8009482:	fa01 f303 	lsl.w	r3, r1, r3
 8009486:	b29b      	uxth	r3, r3
 8009488:	43db      	mvns	r3, r3
 800948a:	68f9      	ldr	r1, [r7, #12]
 800948c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009490:	4013      	ands	r3, r2
 8009492:	61cb      	str	r3, [r1, #28]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	0159      	lsls	r1, r3, #5
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	440b      	add	r3, r1
 80094aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ae:	4619      	mov	r1, r3
 80094b0:	4b35      	ldr	r3, [pc, #212]	; (8009588 <USB_DeactivateEndpoint+0x1b0>)
 80094b2:	4013      	ands	r3, r2
 80094b4:	600b      	str	r3, [r1, #0]
 80094b6:	e060      	b.n	800957a <USB_DeactivateEndpoint+0x1a2>
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	015a      	lsls	r2, r3, #5
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	4413      	add	r3, r2
 80094c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094ce:	d11f      	bne.n	8009510 <USB_DeactivateEndpoint+0x138>
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	0151      	lsls	r1, r2, #5
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	440a      	add	r2, r1
 80094e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	0151      	lsls	r1, r2, #5
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	440a      	add	r2, r1
 8009506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800950a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	f003 030f 	and.w	r3, r3, #15
 8009520:	2101      	movs	r1, #1
 8009522:	fa01 f303 	lsl.w	r3, r1, r3
 8009526:	041b      	lsls	r3, r3, #16
 8009528:	43db      	mvns	r3, r3
 800952a:	68f9      	ldr	r1, [r7, #12]
 800952c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009530:	4013      	ands	r3, r2
 8009532:	63cb      	str	r3, [r1, #60]	; 0x3c
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800953a:	69da      	ldr	r2, [r3, #28]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	f003 030f 	and.w	r3, r3, #15
 8009544:	2101      	movs	r1, #1
 8009546:	fa01 f303 	lsl.w	r3, r1, r3
 800954a:	041b      	lsls	r3, r3, #16
 800954c:	43db      	mvns	r3, r3
 800954e:	68f9      	ldr	r1, [r7, #12]
 8009550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009554:	4013      	ands	r3, r2
 8009556:	61cb      	str	r3, [r1, #28]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4413      	add	r3, r2
 8009560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	0159      	lsls	r1, r3, #5
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	440b      	add	r3, r1
 800956e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009572:	4619      	mov	r1, r3
 8009574:	4b05      	ldr	r3, [pc, #20]	; (800958c <USB_DeactivateEndpoint+0x1b4>)
 8009576:	4013      	ands	r3, r2
 8009578:	600b      	str	r3, [r1, #0]
 800957a:	2300      	movs	r3, #0
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	ec337800 	.word	0xec337800
 800958c:	eff37800 	.word	0xeff37800

08009590 <USB_EPStartXfer>:
 8009590:	b580      	push	{r7, lr}
 8009592:	b08a      	sub	sp, #40	; 0x28
 8009594:	af02      	add	r7, sp, #8
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	4613      	mov	r3, r2
 800959c:	71fb      	strb	r3, [r7, #7]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	61fb      	str	r3, [r7, #28]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	61bb      	str	r3, [r7, #24]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	785b      	ldrb	r3, [r3, #1]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	f040 815c 	bne.w	800986a <USB_EPStartXfer+0x2da>
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d132      	bne.n	8009620 <USB_EPStartXfer+0x90>
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	015a      	lsls	r2, r3, #5
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	0151      	lsls	r1, r2, #5
 80095cc:	69fa      	ldr	r2, [r7, #28]
 80095ce:	440a      	add	r2, r1
 80095d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095dc:	6113      	str	r3, [r2, #16]
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	015a      	lsls	r2, r3, #5
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	4413      	add	r3, r2
 80095e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	0151      	lsls	r1, r2, #5
 80095f0:	69fa      	ldr	r2, [r7, #28]
 80095f2:	440a      	add	r2, r1
 80095f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095fc:	6113      	str	r3, [r2, #16]
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	015a      	lsls	r2, r3, #5
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	4413      	add	r3, r2
 8009606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	0151      	lsls	r1, r2, #5
 8009610:	69fa      	ldr	r2, [r7, #28]
 8009612:	440a      	add	r2, r1
 8009614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009618:	0cdb      	lsrs	r3, r3, #19
 800961a:	04db      	lsls	r3, r3, #19
 800961c:	6113      	str	r3, [r2, #16]
 800961e:	e074      	b.n	800970a <USB_EPStartXfer+0x17a>
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	4413      	add	r3, r2
 8009628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	69ba      	ldr	r2, [r7, #24]
 8009630:	0151      	lsls	r1, r2, #5
 8009632:	69fa      	ldr	r2, [r7, #28]
 8009634:	440a      	add	r2, r1
 8009636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800963a:	0cdb      	lsrs	r3, r3, #19
 800963c:	04db      	lsls	r3, r3, #19
 800963e:	6113      	str	r3, [r2, #16]
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	4413      	add	r3, r2
 8009648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	0151      	lsls	r1, r2, #5
 8009652:	69fa      	ldr	r2, [r7, #28]
 8009654:	440a      	add	r2, r1
 8009656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800965a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800965e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009662:	6113      	str	r3, [r2, #16]
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	015a      	lsls	r2, r3, #5
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	4413      	add	r3, r2
 800966c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009670:	691a      	ldr	r2, [r3, #16]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	6999      	ldr	r1, [r3, #24]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	440b      	add	r3, r1
 800967c:	1e59      	subs	r1, r3, #1
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	fbb1 f3f3 	udiv	r3, r1, r3
 8009686:	04d9      	lsls	r1, r3, #19
 8009688:	4b9d      	ldr	r3, [pc, #628]	; (8009900 <USB_EPStartXfer+0x370>)
 800968a:	400b      	ands	r3, r1
 800968c:	69b9      	ldr	r1, [r7, #24]
 800968e:	0148      	lsls	r0, r1, #5
 8009690:	69f9      	ldr	r1, [r7, #28]
 8009692:	4401      	add	r1, r0
 8009694:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009698:	4313      	orrs	r3, r2
 800969a:	610b      	str	r3, [r1, #16]
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a8:	691a      	ldr	r2, [r3, #16]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096b2:	69b9      	ldr	r1, [r7, #24]
 80096b4:	0148      	lsls	r0, r1, #5
 80096b6:	69f9      	ldr	r1, [r7, #28]
 80096b8:	4401      	add	r1, r0
 80096ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80096be:	4313      	orrs	r3, r2
 80096c0:	610b      	str	r3, [r1, #16]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	791b      	ldrb	r3, [r3, #4]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d11f      	bne.n	800970a <USB_EPStartXfer+0x17a>
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	69ba      	ldr	r2, [r7, #24]
 80096da:	0151      	lsls	r1, r2, #5
 80096dc:	69fa      	ldr	r2, [r7, #28]
 80096de:	440a      	add	r2, r1
 80096e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80096e8:	6113      	str	r3, [r2, #16]
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	69ba      	ldr	r2, [r7, #24]
 80096fa:	0151      	lsls	r1, r2, #5
 80096fc:	69fa      	ldr	r2, [r7, #28]
 80096fe:	440a      	add	r2, r1
 8009700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009704:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009708:	6113      	str	r3, [r2, #16]
 800970a:	79fb      	ldrb	r3, [r7, #7]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d14b      	bne.n	80097a8 <USB_EPStartXfer+0x218>
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d009      	beq.n	800972c <USB_EPStartXfer+0x19c>
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	4413      	add	r3, r2
 8009720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009724:	461a      	mov	r2, r3
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	6153      	str	r3, [r2, #20]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	791b      	ldrb	r3, [r3, #4]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d128      	bne.n	8009786 <USB_EPStartXfer+0x1f6>
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009740:	2b00      	cmp	r3, #0
 8009742:	d110      	bne.n	8009766 <USB_EPStartXfer+0x1d6>
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	4413      	add	r3, r2
 800974c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	0151      	lsls	r1, r2, #5
 8009756:	69fa      	ldr	r2, [r7, #28]
 8009758:	440a      	add	r2, r1
 800975a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800975e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	e00f      	b.n	8009786 <USB_EPStartXfer+0x1f6>
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	015a      	lsls	r2, r3, #5
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	4413      	add	r3, r2
 800976e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	69ba      	ldr	r2, [r7, #24]
 8009776:	0151      	lsls	r1, r2, #5
 8009778:	69fa      	ldr	r2, [r7, #28]
 800977a:	440a      	add	r2, r1
 800977c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009784:	6013      	str	r3, [r2, #0]
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	015a      	lsls	r2, r3, #5
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	4413      	add	r3, r2
 800978e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	69ba      	ldr	r2, [r7, #24]
 8009796:	0151      	lsls	r1, r2, #5
 8009798:	69fa      	ldr	r2, [r7, #28]
 800979a:	440a      	add	r2, r1
 800979c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097a4:	6013      	str	r3, [r2, #0]
 80097a6:	e133      	b.n	8009a10 <USB_EPStartXfer+0x480>
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	69ba      	ldr	r2, [r7, #24]
 80097b8:	0151      	lsls	r1, r2, #5
 80097ba:	69fa      	ldr	r2, [r7, #28]
 80097bc:	440a      	add	r2, r1
 80097be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097c6:	6013      	str	r3, [r2, #0]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	791b      	ldrb	r3, [r3, #4]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d015      	beq.n	80097fc <USB_EPStartXfer+0x26c>
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 811b 	beq.w	8009a10 <USB_EPStartXfer+0x480>
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	f003 030f 	and.w	r3, r3, #15
 80097ea:	2101      	movs	r1, #1
 80097ec:	fa01 f303 	lsl.w	r3, r1, r3
 80097f0:	69f9      	ldr	r1, [r7, #28]
 80097f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097f6:	4313      	orrs	r3, r2
 80097f8:	634b      	str	r3, [r1, #52]	; 0x34
 80097fa:	e109      	b.n	8009a10 <USB_EPStartXfer+0x480>
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009808:	2b00      	cmp	r3, #0
 800980a:	d110      	bne.n	800982e <USB_EPStartXfer+0x29e>
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	69ba      	ldr	r2, [r7, #24]
 800981c:	0151      	lsls	r1, r2, #5
 800981e:	69fa      	ldr	r2, [r7, #28]
 8009820:	440a      	add	r2, r1
 8009822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009826:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800982a:	6013      	str	r3, [r2, #0]
 800982c:	e00f      	b.n	800984e <USB_EPStartXfer+0x2be>
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	4413      	add	r3, r2
 8009836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	69ba      	ldr	r2, [r7, #24]
 800983e:	0151      	lsls	r1, r2, #5
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	440a      	add	r2, r1
 8009844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800984c:	6013      	str	r3, [r2, #0]
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	6919      	ldr	r1, [r3, #16]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	781a      	ldrb	r2, [r3, #0]
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	b298      	uxth	r0, r3
 800985c:	79fb      	ldrb	r3, [r7, #7]
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	4603      	mov	r3, r0
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 fade 	bl	8009e24 <USB_WritePacket>
 8009868:	e0d2      	b.n	8009a10 <USB_EPStartXfer+0x480>
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	4413      	add	r3, r2
 8009872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	0151      	lsls	r1, r2, #5
 800987c:	69fa      	ldr	r2, [r7, #28]
 800987e:	440a      	add	r2, r1
 8009880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009884:	0cdb      	lsrs	r3, r3, #19
 8009886:	04db      	lsls	r3, r3, #19
 8009888:	6113      	str	r3, [r2, #16]
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	4413      	add	r3, r2
 8009892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	69ba      	ldr	r2, [r7, #24]
 800989a:	0151      	lsls	r1, r2, #5
 800989c:	69fa      	ldr	r2, [r7, #28]
 800989e:	440a      	add	r2, r1
 80098a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098ac:	6113      	str	r3, [r2, #16]
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d126      	bne.n	8009904 <USB_EPStartXfer+0x374>
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	015a      	lsls	r2, r3, #5
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	4413      	add	r3, r2
 80098be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c2:	691a      	ldr	r2, [r3, #16]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098cc:	69b9      	ldr	r1, [r7, #24]
 80098ce:	0148      	lsls	r0, r1, #5
 80098d0:	69f9      	ldr	r1, [r7, #28]
 80098d2:	4401      	add	r1, r0
 80098d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80098d8:	4313      	orrs	r3, r2
 80098da:	610b      	str	r3, [r1, #16]
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	69ba      	ldr	r2, [r7, #24]
 80098ec:	0151      	lsls	r1, r2, #5
 80098ee:	69fa      	ldr	r2, [r7, #28]
 80098f0:	440a      	add	r2, r1
 80098f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098fa:	6113      	str	r3, [r2, #16]
 80098fc:	e03a      	b.n	8009974 <USB_EPStartXfer+0x3e4>
 80098fe:	bf00      	nop
 8009900:	1ff80000 	.word	0x1ff80000
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	699a      	ldr	r2, [r3, #24]
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	4413      	add	r3, r2
 800990e:	1e5a      	subs	r2, r3, #1
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	fbb2 f3f3 	udiv	r3, r2, r3
 8009918:	82fb      	strh	r3, [r7, #22]
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	8afa      	ldrh	r2, [r7, #22]
 8009920:	fb03 f202 	mul.w	r2, r3, r2
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	61da      	str	r2, [r3, #28]
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	4413      	add	r3, r2
 8009930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009934:	691a      	ldr	r2, [r3, #16]
 8009936:	8afb      	ldrh	r3, [r7, #22]
 8009938:	04d9      	lsls	r1, r3, #19
 800993a:	4b38      	ldr	r3, [pc, #224]	; (8009a1c <USB_EPStartXfer+0x48c>)
 800993c:	400b      	ands	r3, r1
 800993e:	69b9      	ldr	r1, [r7, #24]
 8009940:	0148      	lsls	r0, r1, #5
 8009942:	69f9      	ldr	r1, [r7, #28]
 8009944:	4401      	add	r1, r0
 8009946:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800994a:	4313      	orrs	r3, r2
 800994c:	610b      	str	r3, [r1, #16]
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	015a      	lsls	r2, r3, #5
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	4413      	add	r3, r2
 8009956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800995a:	691a      	ldr	r2, [r3, #16]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	69db      	ldr	r3, [r3, #28]
 8009960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009964:	69b9      	ldr	r1, [r7, #24]
 8009966:	0148      	lsls	r0, r1, #5
 8009968:	69f9      	ldr	r1, [r7, #28]
 800996a:	4401      	add	r1, r0
 800996c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009970:	4313      	orrs	r3, r2
 8009972:	610b      	str	r3, [r1, #16]
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d10d      	bne.n	8009996 <USB_EPStartXfer+0x406>
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d009      	beq.n	8009996 <USB_EPStartXfer+0x406>
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	6919      	ldr	r1, [r3, #16]
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	4413      	add	r3, r2
 800998e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009992:	460a      	mov	r2, r1
 8009994:	615a      	str	r2, [r3, #20]
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	791b      	ldrb	r3, [r3, #4]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d128      	bne.n	80099f0 <USB_EPStartXfer+0x460>
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d110      	bne.n	80099d0 <USB_EPStartXfer+0x440>
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	015a      	lsls	r2, r3, #5
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	4413      	add	r3, r2
 80099b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	69ba      	ldr	r2, [r7, #24]
 80099be:	0151      	lsls	r1, r2, #5
 80099c0:	69fa      	ldr	r2, [r7, #28]
 80099c2:	440a      	add	r2, r1
 80099c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	e00f      	b.n	80099f0 <USB_EPStartXfer+0x460>
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	69ba      	ldr	r2, [r7, #24]
 80099e0:	0151      	lsls	r1, r2, #5
 80099e2:	69fa      	ldr	r2, [r7, #28]
 80099e4:	440a      	add	r2, r1
 80099e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099ee:	6013      	str	r3, [r2, #0]
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	69ba      	ldr	r2, [r7, #24]
 8009a00:	0151      	lsls	r1, r2, #5
 8009a02:	69fa      	ldr	r2, [r7, #28]
 8009a04:	440a      	add	r2, r1
 8009a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	2300      	movs	r3, #0
 8009a12:	4618      	mov	r0, r3
 8009a14:	3720      	adds	r7, #32
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	1ff80000 	.word	0x1ff80000

08009a20 <USB_EP0StartXfer>:
 8009a20:	b480      	push	{r7}
 8009a22:	b087      	sub	sp, #28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	71fb      	strb	r3, [r7, #7]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	617b      	str	r3, [r7, #20]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	613b      	str	r3, [r7, #16]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	785b      	ldrb	r3, [r3, #1]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	f040 80ce 	bne.w	8009bde <USB_EP0StartXfer+0x1be>
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d132      	bne.n	8009ab0 <USB_EP0StartXfer+0x90>
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	693a      	ldr	r2, [r7, #16]
 8009a5a:	0151      	lsls	r1, r2, #5
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	440a      	add	r2, r1
 8009a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a6c:	6113      	str	r3, [r2, #16]
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	0151      	lsls	r1, r2, #5
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	440a      	add	r2, r1
 8009a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a8c:	6113      	str	r3, [r2, #16]
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	0151      	lsls	r1, r2, #5
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	440a      	add	r2, r1
 8009aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aa8:	0cdb      	lsrs	r3, r3, #19
 8009aaa:	04db      	lsls	r3, r3, #19
 8009aac:	6113      	str	r3, [r2, #16]
 8009aae:	e04e      	b.n	8009b4e <USB_EP0StartXfer+0x12e>
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	0151      	lsls	r1, r2, #5
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	440a      	add	r2, r1
 8009ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aca:	0cdb      	lsrs	r3, r3, #19
 8009acc:	04db      	lsls	r3, r3, #19
 8009ace:	6113      	str	r3, [r2, #16]
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	015a      	lsls	r2, r3, #5
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	693a      	ldr	r2, [r7, #16]
 8009ae0:	0151      	lsls	r1, r2, #5
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	440a      	add	r2, r1
 8009ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009aee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009af2:	6113      	str	r3, [r2, #16]
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	699a      	ldr	r2, [r3, #24]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d903      	bls.n	8009b08 <USB_EP0StartXfer+0xe8>
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	68da      	ldr	r2, [r3, #12]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	619a      	str	r2, [r3, #24]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	015a      	lsls	r2, r3, #5
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	4413      	add	r3, r2
 8009b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	0151      	lsls	r1, r2, #5
 8009b1a:	697a      	ldr	r2, [r7, #20]
 8009b1c:	440a      	add	r2, r1
 8009b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b26:	6113      	str	r3, [r2, #16]
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	015a      	lsls	r2, r3, #5
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	4413      	add	r3, r2
 8009b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b34:	691a      	ldr	r2, [r3, #16]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b3e:	6939      	ldr	r1, [r7, #16]
 8009b40:	0148      	lsls	r0, r1, #5
 8009b42:	6979      	ldr	r1, [r7, #20]
 8009b44:	4401      	add	r1, r0
 8009b46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	610b      	str	r3, [r1, #16]
 8009b4e:	79fb      	ldrb	r3, [r7, #7]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d11e      	bne.n	8009b92 <USB_EP0StartXfer+0x172>
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d009      	beq.n	8009b70 <USB_EP0StartXfer+0x150>
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b68:	461a      	mov	r2, r3
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	6153      	str	r3, [r2, #20]
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	0151      	lsls	r1, r2, #5
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	440a      	add	r2, r1
 8009b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b8e:	6013      	str	r3, [r2, #0]
 8009b90:	e097      	b.n	8009cc2 <USB_EP0StartXfer+0x2a2>
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	015a      	lsls	r2, r3, #5
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	4413      	add	r3, r2
 8009b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	0151      	lsls	r1, r2, #5
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	440a      	add	r2, r1
 8009ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009bb0:	6013      	str	r3, [r2, #0]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 8083 	beq.w	8009cc2 <USB_EP0StartXfer+0x2a2>
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	f003 030f 	and.w	r3, r3, #15
 8009bcc:	2101      	movs	r1, #1
 8009bce:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd2:	6979      	ldr	r1, [r7, #20]
 8009bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	634b      	str	r3, [r1, #52]	; 0x34
 8009bdc:	e071      	b.n	8009cc2 <USB_EP0StartXfer+0x2a2>
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	0151      	lsls	r1, r2, #5
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	440a      	add	r2, r1
 8009bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf8:	0cdb      	lsrs	r3, r3, #19
 8009bfa:	04db      	lsls	r3, r3, #19
 8009bfc:	6113      	str	r3, [r2, #16]
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	015a      	lsls	r2, r3, #5
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	693a      	ldr	r2, [r7, #16]
 8009c0e:	0151      	lsls	r1, r2, #5
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	440a      	add	r2, r1
 8009c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c20:	6113      	str	r3, [r2, #16]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <USB_EP0StartXfer+0x212>
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	619a      	str	r2, [r3, #24]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	68da      	ldr	r2, [r3, #12]
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	61da      	str	r2, [r3, #28]
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	015a      	lsls	r2, r3, #5
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	4413      	add	r3, r2
 8009c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	0151      	lsls	r1, r2, #5
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	440a      	add	r2, r1
 8009c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c58:	6113      	str	r3, [r2, #16]
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	015a      	lsls	r2, r3, #5
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c66:	691a      	ldr	r2, [r3, #16]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c70:	6939      	ldr	r1, [r7, #16]
 8009c72:	0148      	lsls	r0, r1, #5
 8009c74:	6979      	ldr	r1, [r7, #20]
 8009c76:	4401      	add	r1, r0
 8009c78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	610b      	str	r3, [r1, #16]
 8009c80:	79fb      	ldrb	r3, [r7, #7]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d10d      	bne.n	8009ca2 <USB_EP0StartXfer+0x282>
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d009      	beq.n	8009ca2 <USB_EP0StartXfer+0x282>
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	6919      	ldr	r1, [r3, #16]
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	015a      	lsls	r2, r3, #5
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c9e:	460a      	mov	r2, r1
 8009ca0:	615a      	str	r2, [r3, #20]
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	015a      	lsls	r2, r3, #5
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	4413      	add	r3, r2
 8009caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	0151      	lsls	r1, r2, #5
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	440a      	add	r2, r1
 8009cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009cc0:	6013      	str	r3, [r2, #0]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	371c      	adds	r7, #28
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <USB_EPStopXfer>:
 8009cd0:	b480      	push	{r7}
 8009cd2:	b087      	sub	sp, #28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	60fb      	str	r3, [r7, #12]
 8009cde:	2300      	movs	r3, #0
 8009ce0:	75fb      	strb	r3, [r7, #23]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	613b      	str	r3, [r7, #16]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	785b      	ldrb	r3, [r3, #1]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d14a      	bne.n	8009d84 <USB_EPStopXfer+0xb4>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d06:	f040 8086 	bne.w	8009e16 <USB_EPStopXfer+0x146>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	015a      	lsls	r2, r3, #5
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	4413      	add	r3, r2
 8009d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	7812      	ldrb	r2, [r2, #0]
 8009d1e:	0151      	lsls	r1, r2, #5
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	440a      	add	r2, r1
 8009d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d2c:	6013      	str	r3, [r2, #0]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	7812      	ldrb	r2, [r2, #0]
 8009d42:	0151      	lsls	r1, r2, #5
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	440a      	add	r2, r1
 8009d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d50:	6013      	str	r3, [r2, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	3301      	adds	r3, #1
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d902      	bls.n	8009d68 <USB_EPStopXfer+0x98>
 8009d62:	2301      	movs	r3, #1
 8009d64:	75fb      	strb	r3, [r7, #23]
 8009d66:	e056      	b.n	8009e16 <USB_EPStopXfer+0x146>
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d80:	d0e7      	beq.n	8009d52 <USB_EPStopXfer+0x82>
 8009d82:	e048      	b.n	8009e16 <USB_EPStopXfer+0x146>
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	015a      	lsls	r2, r3, #5
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d9c:	d13b      	bne.n	8009e16 <USB_EPStopXfer+0x146>
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	015a      	lsls	r2, r3, #5
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	4413      	add	r3, r2
 8009da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	7812      	ldrb	r2, [r2, #0]
 8009db2:	0151      	lsls	r1, r2, #5
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	440a      	add	r2, r1
 8009db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	015a      	lsls	r2, r3, #5
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	4413      	add	r3, r2
 8009dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	7812      	ldrb	r2, [r2, #0]
 8009dd6:	0151      	lsls	r1, r2, #5
 8009dd8:	693a      	ldr	r2, [r7, #16]
 8009dda:	440a      	add	r2, r1
 8009ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009de0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009de4:	6013      	str	r3, [r2, #0]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	3301      	adds	r3, #1
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f242 7210 	movw	r2, #10000	; 0x2710
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d902      	bls.n	8009dfc <USB_EPStopXfer+0x12c>
 8009df6:	2301      	movs	r3, #1
 8009df8:	75fb      	strb	r3, [r7, #23]
 8009dfa:	e00c      	b.n	8009e16 <USB_EPStopXfer+0x146>
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	015a      	lsls	r2, r3, #5
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	4413      	add	r3, r2
 8009e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e14:	d0e7      	beq.n	8009de6 <USB_EPStopXfer+0x116>
 8009e16:	7dfb      	ldrb	r3, [r7, #23]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	371c      	adds	r7, #28
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <USB_WritePacket>:
 8009e24:	b480      	push	{r7}
 8009e26:	b089      	sub	sp, #36	; 0x24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	4611      	mov	r1, r2
 8009e30:	461a      	mov	r2, r3
 8009e32:	460b      	mov	r3, r1
 8009e34:	71fb      	strb	r3, [r7, #7]
 8009e36:	4613      	mov	r3, r2
 8009e38:	80bb      	strh	r3, [r7, #4]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	617b      	str	r3, [r7, #20]
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d123      	bne.n	8009e92 <USB_WritePacket+0x6e>
 8009e4a:	88bb      	ldrh	r3, [r7, #4]
 8009e4c:	3303      	adds	r3, #3
 8009e4e:	089b      	lsrs	r3, r3, #2
 8009e50:	613b      	str	r3, [r7, #16]
 8009e52:	2300      	movs	r3, #0
 8009e54:	61bb      	str	r3, [r7, #24]
 8009e56:	e018      	b.n	8009e8a <USB_WritePacket+0x66>
 8009e58:	79fb      	ldrb	r3, [r7, #7]
 8009e5a:	031a      	lsls	r2, r3, #12
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	4413      	add	r3, r2
 8009e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e64:	461a      	mov	r2, r3
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6013      	str	r3, [r2, #0]
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	3301      	adds	r3, #1
 8009e76:	61fb      	str	r3, [r7, #28]
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	61fb      	str	r3, [r7, #28]
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	3301      	adds	r3, #1
 8009e82:	61fb      	str	r3, [r7, #28]
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	3301      	adds	r3, #1
 8009e88:	61bb      	str	r3, [r7, #24]
 8009e8a:	69ba      	ldr	r2, [r7, #24]
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d3e2      	bcc.n	8009e58 <USB_WritePacket+0x34>
 8009e92:	2300      	movs	r3, #0
 8009e94:	4618      	mov	r0, r3
 8009e96:	3724      	adds	r7, #36	; 0x24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <USB_ReadPacket>:
 8009ea0:	b480      	push	{r7}
 8009ea2:	b08b      	sub	sp, #44	; 0x2c
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	80fb      	strh	r3, [r7, #6]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	61bb      	str	r3, [r7, #24]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8009eb6:	88fb      	ldrh	r3, [r7, #6]
 8009eb8:	089b      	lsrs	r3, r3, #2
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	617b      	str	r3, [r7, #20]
 8009ebe:	88fb      	ldrh	r3, [r7, #6]
 8009ec0:	f003 0303 	and.w	r3, r3, #3
 8009ec4:	83fb      	strh	r3, [r7, #30]
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	623b      	str	r3, [r7, #32]
 8009eca:	e014      	b.n	8009ef6 <USB_ReadPacket+0x56>
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	3301      	adds	r3, #1
 8009edc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	3301      	adds	r3, #1
 8009eee:	627b      	str	r3, [r7, #36]	; 0x24
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	623b      	str	r3, [r7, #32]
 8009ef6:	6a3a      	ldr	r2, [r7, #32]
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d3e6      	bcc.n	8009ecc <USB_ReadPacket+0x2c>
 8009efe:	8bfb      	ldrh	r3, [r7, #30]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d01e      	beq.n	8009f42 <USB_ReadPacket+0xa2>
 8009f04:	2300      	movs	r3, #0
 8009f06:	623b      	str	r3, [r7, #32]
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f0e:	461a      	mov	r2, r3
 8009f10:	f107 0310 	add.w	r3, r7, #16
 8009f14:	6812      	ldr	r2, [r2, #0]
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	6a3b      	ldr	r3, [r7, #32]
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	00db      	lsls	r3, r3, #3
 8009f20:	fa22 f303 	lsr.w	r3, r2, r3
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f28:	701a      	strb	r2, [r3, #0]
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	623b      	str	r3, [r7, #32]
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	3301      	adds	r3, #1
 8009f34:	627b      	str	r3, [r7, #36]	; 0x24
 8009f36:	8bfb      	ldrh	r3, [r7, #30]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	83fb      	strh	r3, [r7, #30]
 8009f3c:	8bfb      	ldrh	r3, [r7, #30]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1ea      	bne.n	8009f18 <USB_ReadPacket+0x78>
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	4618      	mov	r0, r3
 8009f46:	372c      	adds	r7, #44	; 0x2c
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <USB_EPSetStall>:
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	60fb      	str	r3, [r7, #12]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	60bb      	str	r3, [r7, #8]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	785b      	ldrb	r3, [r3, #1]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d12c      	bne.n	8009fc6 <USB_EPSetStall+0x76>
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	db12      	blt.n	8009fa4 <USB_EPSetStall+0x54>
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00f      	beq.n	8009fa4 <USB_EPSetStall+0x54>
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	015a      	lsls	r2, r3, #5
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	0151      	lsls	r1, r2, #5
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	440a      	add	r2, r1
 8009f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	015a      	lsls	r2, r3, #5
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	4413      	add	r3, r2
 8009fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	0151      	lsls	r1, r2, #5
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	440a      	add	r2, r1
 8009fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fc2:	6013      	str	r3, [r2, #0]
 8009fc4:	e02b      	b.n	800a01e <USB_EPSetStall+0xce>
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	015a      	lsls	r2, r3, #5
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	4413      	add	r3, r2
 8009fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	db12      	blt.n	8009ffe <USB_EPSetStall+0xae>
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00f      	beq.n	8009ffe <USB_EPSetStall+0xae>
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	0151      	lsls	r1, r2, #5
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	440a      	add	r2, r1
 8009ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ff8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	015a      	lsls	r2, r3, #5
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	4413      	add	r3, r2
 800a006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	0151      	lsls	r1, r2, #5
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	440a      	add	r2, r1
 800a014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a01c:	6013      	str	r3, [r2, #0]
 800a01e:	2300      	movs	r3, #0
 800a020:	4618      	mov	r0, r3
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <USB_EPClearStall>:
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	60fb      	str	r3, [r7, #12]
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	60bb      	str	r3, [r7, #8]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	785b      	ldrb	r3, [r3, #1]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d128      	bne.n	800a09a <USB_EPClearStall+0x6e>
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	0151      	lsls	r1, r2, #5
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	440a      	add	r2, r1
 800a05e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a062:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a066:	6013      	str	r3, [r2, #0]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	791b      	ldrb	r3, [r3, #4]
 800a06c:	2b03      	cmp	r3, #3
 800a06e:	d003      	beq.n	800a078 <USB_EPClearStall+0x4c>
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	791b      	ldrb	r3, [r3, #4]
 800a074:	2b02      	cmp	r3, #2
 800a076:	d138      	bne.n	800a0ea <USB_EPClearStall+0xbe>
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	0151      	lsls	r1, r2, #5
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	440a      	add	r2, r1
 800a08e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a096:	6013      	str	r3, [r2, #0]
 800a098:	e027      	b.n	800a0ea <USB_EPClearStall+0xbe>
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	0151      	lsls	r1, r2, #5
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	440a      	add	r2, r1
 800a0b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0b8:	6013      	str	r3, [r2, #0]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	791b      	ldrb	r3, [r3, #4]
 800a0be:	2b03      	cmp	r3, #3
 800a0c0:	d003      	beq.n	800a0ca <USB_EPClearStall+0x9e>
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	791b      	ldrb	r3, [r3, #4]
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d10f      	bne.n	800a0ea <USB_EPClearStall+0xbe>
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	015a      	lsls	r2, r3, #5
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	68ba      	ldr	r2, [r7, #8]
 800a0da:	0151      	lsls	r1, r2, #5
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	440a      	add	r2, r1
 800a0e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3714      	adds	r7, #20
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <USB_SetDevAddress>:
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	70fb      	strb	r3, [r7, #3]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	60fb      	str	r3, [r7, #12]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a116:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a11a:	6013      	str	r3, [r2, #0]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	011b      	lsls	r3, r3, #4
 800a128:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a12c:	68f9      	ldr	r1, [r7, #12]
 800a12e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a132:	4313      	orrs	r3, r2
 800a134:	600b      	str	r3, [r1, #0]
 800a136:	2300      	movs	r3, #0
 800a138:	4618      	mov	r0, r3
 800a13a:	3714      	adds	r7, #20
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <USB_DevConnect>:
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a15e:	f023 0303 	bic.w	r3, r3, #3
 800a162:	6013      	str	r3, [r2, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a172:	f023 0302 	bic.w	r3, r3, #2
 800a176:	6053      	str	r3, [r2, #4]
 800a178:	2300      	movs	r3, #0
 800a17a:	4618      	mov	r0, r3
 800a17c:	3714      	adds	r7, #20
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <USB_DevDisconnect>:
 800a186:	b480      	push	{r7}
 800a188:	b085      	sub	sp, #20
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	60fb      	str	r3, [r7, #12]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1a0:	f023 0303 	bic.w	r3, r3, #3
 800a1a4:	6013      	str	r3, [r2, #0]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1b4:	f043 0302 	orr.w	r3, r3, #2
 800a1b8:	6053      	str	r3, [r2, #4]
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <USB_ReadInterrupts>:
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	60fb      	str	r3, [r7, #12]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	4013      	ands	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <USB_ReadDevAllOutEpInterrupt>:
 800a1ee:	b480      	push	{r7}
 800a1f0:	b085      	sub	sp, #20
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	60bb      	str	r3, [r7, #8]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	4013      	ands	r3, r2
 800a210:	60bb      	str	r3, [r7, #8]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	0c1b      	lsrs	r3, r3, #16
 800a216:	4618      	mov	r0, r3
 800a218:	3714      	adds	r7, #20
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <USB_ReadDevAllInEpInterrupt>:
 800a222:	b480      	push	{r7}
 800a224:	b085      	sub	sp, #20
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	60bb      	str	r3, [r7, #8]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	4013      	ands	r3, r2
 800a244:	60bb      	str	r3, [r7, #8]
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	b29b      	uxth	r3, r3
 800a24a:	4618      	mov	r0, r3
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <USB_ReadDevOutEPInterrupt>:
 800a256:	b480      	push	{r7}
 800a258:	b085      	sub	sp, #20
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	460b      	mov	r3, r1
 800a260:	70fb      	strb	r3, [r7, #3]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	78fb      	ldrb	r3, [r7, #3]
 800a268:	015a      	lsls	r2, r3, #5
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	4413      	add	r3, r2
 800a26e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	60bb      	str	r3, [r7, #8]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	4013      	ands	r3, r2
 800a282:	60bb      	str	r3, [r7, #8]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	4618      	mov	r0, r3
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <USB_ReadDevInEPInterrupt>:
 800a292:	b480      	push	{r7}
 800a294:	b087      	sub	sp, #28
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	460b      	mov	r3, r1
 800a29c:	70fb      	strb	r3, [r7, #3]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	617b      	str	r3, [r7, #20]
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	613b      	str	r3, [r7, #16]
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b4:	60fb      	str	r3, [r7, #12]
 800a2b6:	78fb      	ldrb	r3, [r7, #3]
 800a2b8:	f003 030f 	and.w	r3, r3, #15
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c2:	01db      	lsls	r3, r3, #7
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	613b      	str	r3, [r7, #16]
 800a2cc:	78fb      	ldrb	r3, [r7, #3]
 800a2ce:	015a      	lsls	r2, r3, #5
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	4013      	ands	r3, r2
 800a2de:	60bb      	str	r3, [r7, #8]
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	371c      	adds	r7, #28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <USB_GetMode>:
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	4618      	mov	r0, r3
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <USB_ActivateSetup>:
 800a30a:	b480      	push	{r7}
 800a30c:	b085      	sub	sp, #20
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	60fb      	str	r3, [r7, #12]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a324:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a328:	f023 0307 	bic.w	r3, r3, #7
 800a32c:	6013      	str	r3, [r2, #0]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a33c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a340:	6053      	str	r3, [r2, #4]
 800a342:	2300      	movs	r3, #0
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <USB_EP0_OutStart>:
 800a350:	b480      	push	{r7}
 800a352:	b087      	sub	sp, #28
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	460b      	mov	r3, r1
 800a35a:	607a      	str	r2, [r7, #4]
 800a35c:	72fb      	strb	r3, [r7, #11]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	617b      	str	r3, [r7, #20]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	333c      	adds	r3, #60	; 0x3c
 800a366:	3304      	adds	r3, #4
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	613b      	str	r3, [r7, #16]
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	4a26      	ldr	r2, [pc, #152]	; (800a408 <USB_EP0_OutStart+0xb8>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d90a      	bls.n	800a38a <USB_EP0_OutStart+0x3a>
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a384:	d101      	bne.n	800a38a <USB_EP0_OutStart+0x3a>
 800a386:	2300      	movs	r3, #0
 800a388:	e037      	b.n	800a3fa <USB_EP0_OutStart+0xaa>
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a390:	461a      	mov	r2, r3
 800a392:	2300      	movs	r3, #0
 800a394:	6113      	str	r3, [r2, #16]
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3a8:	6113      	str	r3, [r2, #16]
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	697a      	ldr	r2, [r7, #20]
 800a3b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3b8:	f043 0318 	orr.w	r3, r3, #24
 800a3bc:	6113      	str	r3, [r2, #16]
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	697a      	ldr	r2, [r7, #20]
 800a3c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a3d0:	6113      	str	r3, [r2, #16]
 800a3d2:	7afb      	ldrb	r3, [r7, #11]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d10f      	bne.n	800a3f8 <USB_EP0_OutStart+0xa8>
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3de:	461a      	mov	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6153      	str	r3, [r2, #20]
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	697a      	ldr	r2, [r7, #20]
 800a3ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a3f6:	6013      	str	r3, [r2, #0]
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	371c      	adds	r7, #28
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	4f54300a 	.word	0x4f54300a

0800a40c <USB_CoreReset>:
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	2300      	movs	r3, #0
 800a416:	60fb      	str	r3, [r7, #12]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3301      	adds	r3, #1
 800a41c:	60fb      	str	r3, [r7, #12]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	4a13      	ldr	r2, [pc, #76]	; (800a470 <USB_CoreReset+0x64>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d901      	bls.n	800a42a <USB_CoreReset+0x1e>
 800a426:	2303      	movs	r3, #3
 800a428:	e01b      	b.n	800a462 <USB_CoreReset+0x56>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	daf2      	bge.n	800a418 <USB_CoreReset+0xc>
 800a432:	2300      	movs	r3, #0
 800a434:	60fb      	str	r3, [r7, #12]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	f043 0201 	orr.w	r2, r3, #1
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	611a      	str	r2, [r3, #16]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	3301      	adds	r3, #1
 800a446:	60fb      	str	r3, [r7, #12]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4a09      	ldr	r2, [pc, #36]	; (800a470 <USB_CoreReset+0x64>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d901      	bls.n	800a454 <USB_CoreReset+0x48>
 800a450:	2303      	movs	r3, #3
 800a452:	e006      	b.n	800a462 <USB_CoreReset+0x56>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	f003 0301 	and.w	r3, r3, #1
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d0f0      	beq.n	800a442 <USB_CoreReset+0x36>
 800a460:	2300      	movs	r3, #0
 800a462:	4618      	mov	r0, r3
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	00030d40 	.word	0x00030d40

0800a474 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a480:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a484:	f002 fc1e 	bl	800ccc4 <USBD_static_malloc>
 800a488:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d109      	bne.n	800a4a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	32b0      	adds	r2, #176	; 0xb0
 800a49a:	2100      	movs	r1, #0
 800a49c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e0d4      	b.n	800a64e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a4a4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f003 f9b9 	bl	800d822 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	32b0      	adds	r2, #176	; 0xb0
 800a4ba:	68f9      	ldr	r1, [r7, #12]
 800a4bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	32b0      	adds	r2, #176	; 0xb0
 800a4ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	7c1b      	ldrb	r3, [r3, #16]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d138      	bne.n	800a54e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a4dc:	4b5e      	ldr	r3, [pc, #376]	; (800a658 <USBD_CDC_Init+0x1e4>)
 800a4de:	7819      	ldrb	r1, [r3, #0]
 800a4e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4e4:	2202      	movs	r2, #2
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f002 fac9 	bl	800ca7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a4ec:	4b5a      	ldr	r3, [pc, #360]	; (800a658 <USBD_CDC_Init+0x1e4>)
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	f003 020f 	and.w	r2, r3, #15
 800a4f4:	6879      	ldr	r1, [r7, #4]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4413      	add	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	440b      	add	r3, r1
 800a500:	3324      	adds	r3, #36	; 0x24
 800a502:	2201      	movs	r2, #1
 800a504:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a506:	4b55      	ldr	r3, [pc, #340]	; (800a65c <USBD_CDC_Init+0x1e8>)
 800a508:	7819      	ldrb	r1, [r3, #0]
 800a50a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a50e:	2202      	movs	r2, #2
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f002 fab4 	bl	800ca7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a516:	4b51      	ldr	r3, [pc, #324]	; (800a65c <USBD_CDC_Init+0x1e8>)
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	f003 020f 	and.w	r2, r3, #15
 800a51e:	6879      	ldr	r1, [r7, #4]
 800a520:	4613      	mov	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	4413      	add	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	440b      	add	r3, r1
 800a52a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a52e:	2201      	movs	r2, #1
 800a530:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a532:	4b4b      	ldr	r3, [pc, #300]	; (800a660 <USBD_CDC_Init+0x1ec>)
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	f003 020f 	and.w	r2, r3, #15
 800a53a:	6879      	ldr	r1, [r7, #4]
 800a53c:	4613      	mov	r3, r2
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	4413      	add	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	440b      	add	r3, r1
 800a546:	3326      	adds	r3, #38	; 0x26
 800a548:	2210      	movs	r2, #16
 800a54a:	801a      	strh	r2, [r3, #0]
 800a54c:	e035      	b.n	800a5ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a54e:	4b42      	ldr	r3, [pc, #264]	; (800a658 <USBD_CDC_Init+0x1e4>)
 800a550:	7819      	ldrb	r1, [r3, #0]
 800a552:	2340      	movs	r3, #64	; 0x40
 800a554:	2202      	movs	r2, #2
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f002 fa91 	bl	800ca7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a55c:	4b3e      	ldr	r3, [pc, #248]	; (800a658 <USBD_CDC_Init+0x1e4>)
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	f003 020f 	and.w	r2, r3, #15
 800a564:	6879      	ldr	r1, [r7, #4]
 800a566:	4613      	mov	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	440b      	add	r3, r1
 800a570:	3324      	adds	r3, #36	; 0x24
 800a572:	2201      	movs	r2, #1
 800a574:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a576:	4b39      	ldr	r3, [pc, #228]	; (800a65c <USBD_CDC_Init+0x1e8>)
 800a578:	7819      	ldrb	r1, [r3, #0]
 800a57a:	2340      	movs	r3, #64	; 0x40
 800a57c:	2202      	movs	r2, #2
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f002 fa7d 	bl	800ca7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a584:	4b35      	ldr	r3, [pc, #212]	; (800a65c <USBD_CDC_Init+0x1e8>)
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	f003 020f 	and.w	r2, r3, #15
 800a58c:	6879      	ldr	r1, [r7, #4]
 800a58e:	4613      	mov	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4413      	add	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	440b      	add	r3, r1
 800a598:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a59c:	2201      	movs	r2, #1
 800a59e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a5a0:	4b2f      	ldr	r3, [pc, #188]	; (800a660 <USBD_CDC_Init+0x1ec>)
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	f003 020f 	and.w	r2, r3, #15
 800a5a8:	6879      	ldr	r1, [r7, #4]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	440b      	add	r3, r1
 800a5b4:	3326      	adds	r3, #38	; 0x26
 800a5b6:	2210      	movs	r2, #16
 800a5b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a5ba:	4b29      	ldr	r3, [pc, #164]	; (800a660 <USBD_CDC_Init+0x1ec>)
 800a5bc:	7819      	ldrb	r1, [r3, #0]
 800a5be:	2308      	movs	r3, #8
 800a5c0:	2203      	movs	r2, #3
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f002 fa5b 	bl	800ca7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a5c8:	4b25      	ldr	r3, [pc, #148]	; (800a660 <USBD_CDC_Init+0x1ec>)
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	f003 020f 	and.w	r2, r3, #15
 800a5d0:	6879      	ldr	r1, [r7, #4]
 800a5d2:	4613      	mov	r3, r2
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	4413      	add	r3, r2
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	440b      	add	r3, r1
 800a5dc:	3324      	adds	r3, #36	; 0x24
 800a5de:	2201      	movs	r2, #1
 800a5e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	33b0      	adds	r3, #176	; 0xb0
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a614:	2b00      	cmp	r3, #0
 800a616:	d101      	bne.n	800a61c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a618:	2302      	movs	r3, #2
 800a61a:	e018      	b.n	800a64e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	7c1b      	ldrb	r3, [r3, #16]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10a      	bne.n	800a63a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a624:	4b0d      	ldr	r3, [pc, #52]	; (800a65c <USBD_CDC_Init+0x1e8>)
 800a626:	7819      	ldrb	r1, [r3, #0]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a62e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f002 fb12 	bl	800cc5c <USBD_LL_PrepareReceive>
 800a638:	e008      	b.n	800a64c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a63a:	4b08      	ldr	r3, [pc, #32]	; (800a65c <USBD_CDC_Init+0x1e8>)
 800a63c:	7819      	ldrb	r1, [r3, #0]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a644:	2340      	movs	r3, #64	; 0x40
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f002 fb08 	bl	800cc5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	200000b7 	.word	0x200000b7
 800a65c:	200000b8 	.word	0x200000b8
 800a660:	200000b9 	.word	0x200000b9

0800a664 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	460b      	mov	r3, r1
 800a66e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a670:	4b3a      	ldr	r3, [pc, #232]	; (800a75c <USBD_CDC_DeInit+0xf8>)
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f002 fa27 	bl	800caca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a67c:	4b37      	ldr	r3, [pc, #220]	; (800a75c <USBD_CDC_DeInit+0xf8>)
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	f003 020f 	and.w	r2, r3, #15
 800a684:	6879      	ldr	r1, [r7, #4]
 800a686:	4613      	mov	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4413      	add	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	440b      	add	r3, r1
 800a690:	3324      	adds	r3, #36	; 0x24
 800a692:	2200      	movs	r2, #0
 800a694:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a696:	4b32      	ldr	r3, [pc, #200]	; (800a760 <USBD_CDC_DeInit+0xfc>)
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	4619      	mov	r1, r3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f002 fa14 	bl	800caca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a6a2:	4b2f      	ldr	r3, [pc, #188]	; (800a760 <USBD_CDC_DeInit+0xfc>)
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	f003 020f 	and.w	r2, r3, #15
 800a6aa:	6879      	ldr	r1, [r7, #4]
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	4413      	add	r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	440b      	add	r3, r1
 800a6b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a6be:	4b29      	ldr	r3, [pc, #164]	; (800a764 <USBD_CDC_DeInit+0x100>)
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f002 fa00 	bl	800caca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a6ca:	4b26      	ldr	r3, [pc, #152]	; (800a764 <USBD_CDC_DeInit+0x100>)
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	f003 020f 	and.w	r2, r3, #15
 800a6d2:	6879      	ldr	r1, [r7, #4]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	440b      	add	r3, r1
 800a6de:	3324      	adds	r3, #36	; 0x24
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a6e4:	4b1f      	ldr	r3, [pc, #124]	; (800a764 <USBD_CDC_DeInit+0x100>)
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	f003 020f 	and.w	r2, r3, #15
 800a6ec:	6879      	ldr	r1, [r7, #4]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	440b      	add	r3, r1
 800a6f8:	3326      	adds	r3, #38	; 0x26
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	32b0      	adds	r2, #176	; 0xb0
 800a708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d01f      	beq.n	800a750 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	33b0      	adds	r3, #176	; 0xb0
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	32b0      	adds	r2, #176	; 0xb0
 800a72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a732:	4618      	mov	r0, r3
 800a734:	f002 fad4 	bl	800cce0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	32b0      	adds	r2, #176	; 0xb0
 800a742:	2100      	movs	r1, #0
 800a744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	200000b7 	.word	0x200000b7
 800a760:	200000b8 	.word	0x200000b8
 800a764:	200000b9 	.word	0x200000b9

0800a768 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	32b0      	adds	r2, #176	; 0xb0
 800a77c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a780:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a782:	2300      	movs	r3, #0
 800a784:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a786:	2300      	movs	r3, #0
 800a788:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d101      	bne.n	800a798 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a794:	2303      	movs	r3, #3
 800a796:	e0bf      	b.n	800a918 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d050      	beq.n	800a846 <USBD_CDC_Setup+0xde>
 800a7a4:	2b20      	cmp	r3, #32
 800a7a6:	f040 80af 	bne.w	800a908 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	88db      	ldrh	r3, [r3, #6]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d03a      	beq.n	800a828 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	b25b      	sxtb	r3, r3
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	da1b      	bge.n	800a7f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	33b0      	adds	r3, #176	; 0xb0
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	4413      	add	r3, r2
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a7d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	88d2      	ldrh	r2, [r2, #6]
 800a7d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	88db      	ldrh	r3, [r3, #6]
 800a7de:	2b07      	cmp	r3, #7
 800a7e0:	bf28      	it	cs
 800a7e2:	2307      	movcs	r3, #7
 800a7e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	89fa      	ldrh	r2, [r7, #14]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f001 fd43 	bl	800c278 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a7f2:	e090      	b.n	800a916 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	785a      	ldrb	r2, [r3, #1]
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	88db      	ldrh	r3, [r3, #6]
 800a802:	2b3f      	cmp	r3, #63	; 0x3f
 800a804:	d803      	bhi.n	800a80e <USBD_CDC_Setup+0xa6>
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	88db      	ldrh	r3, [r3, #6]
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	e000      	b.n	800a810 <USBD_CDC_Setup+0xa8>
 800a80e:	2240      	movs	r2, #64	; 0x40
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a816:	6939      	ldr	r1, [r7, #16]
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a81e:	461a      	mov	r2, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f001 fd55 	bl	800c2d0 <USBD_CtlPrepareRx>
      break;
 800a826:	e076      	b.n	800a916 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	33b0      	adds	r3, #176	; 0xb0
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	7850      	ldrb	r0, [r2, #1]
 800a83e:	2200      	movs	r2, #0
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	4798      	blx	r3
      break;
 800a844:	e067      	b.n	800a916 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	785b      	ldrb	r3, [r3, #1]
 800a84a:	2b0b      	cmp	r3, #11
 800a84c:	d851      	bhi.n	800a8f2 <USBD_CDC_Setup+0x18a>
 800a84e:	a201      	add	r2, pc, #4	; (adr r2, 800a854 <USBD_CDC_Setup+0xec>)
 800a850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a854:	0800a885 	.word	0x0800a885
 800a858:	0800a901 	.word	0x0800a901
 800a85c:	0800a8f3 	.word	0x0800a8f3
 800a860:	0800a8f3 	.word	0x0800a8f3
 800a864:	0800a8f3 	.word	0x0800a8f3
 800a868:	0800a8f3 	.word	0x0800a8f3
 800a86c:	0800a8f3 	.word	0x0800a8f3
 800a870:	0800a8f3 	.word	0x0800a8f3
 800a874:	0800a8f3 	.word	0x0800a8f3
 800a878:	0800a8f3 	.word	0x0800a8f3
 800a87c:	0800a8af 	.word	0x0800a8af
 800a880:	0800a8d9 	.word	0x0800a8d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b03      	cmp	r3, #3
 800a88e:	d107      	bne.n	800a8a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a890:	f107 030a 	add.w	r3, r7, #10
 800a894:	2202      	movs	r2, #2
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f001 fced 	bl	800c278 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a89e:	e032      	b.n	800a906 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a8a0:	6839      	ldr	r1, [r7, #0]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f001 fc77 	bl	800c196 <USBD_CtlError>
            ret = USBD_FAIL;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	75fb      	strb	r3, [r7, #23]
          break;
 800a8ac:	e02b      	b.n	800a906 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	2b03      	cmp	r3, #3
 800a8b8:	d107      	bne.n	800a8ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a8ba:	f107 030d 	add.w	r3, r7, #13
 800a8be:	2201      	movs	r2, #1
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f001 fcd8 	bl	800c278 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a8c8:	e01d      	b.n	800a906 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f001 fc62 	bl	800c196 <USBD_CtlError>
            ret = USBD_FAIL;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	75fb      	strb	r3, [r7, #23]
          break;
 800a8d6:	e016      	b.n	800a906 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b03      	cmp	r3, #3
 800a8e2:	d00f      	beq.n	800a904 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a8e4:	6839      	ldr	r1, [r7, #0]
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f001 fc55 	bl	800c196 <USBD_CtlError>
            ret = USBD_FAIL;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a8f0:	e008      	b.n	800a904 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a8f2:	6839      	ldr	r1, [r7, #0]
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f001 fc4e 	bl	800c196 <USBD_CtlError>
          ret = USBD_FAIL;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a8fe:	e002      	b.n	800a906 <USBD_CDC_Setup+0x19e>
          break;
 800a900:	bf00      	nop
 800a902:	e008      	b.n	800a916 <USBD_CDC_Setup+0x1ae>
          break;
 800a904:	bf00      	nop
      }
      break;
 800a906:	e006      	b.n	800a916 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a908:	6839      	ldr	r1, [r7, #0]
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f001 fc43 	bl	800c196 <USBD_CtlError>
      ret = USBD_FAIL;
 800a910:	2303      	movs	r3, #3
 800a912:	75fb      	strb	r3, [r7, #23]
      break;
 800a914:	bf00      	nop
  }

  return (uint8_t)ret;
 800a916:	7dfb      	ldrb	r3, [r7, #23]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	460b      	mov	r3, r1
 800a92a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a932:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	32b0      	adds	r2, #176	; 0xb0
 800a93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a946:	2303      	movs	r3, #3
 800a948:	e065      	b.n	800aa16 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	32b0      	adds	r2, #176	; 0xb0
 800a954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a958:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a95a:	78fb      	ldrb	r3, [r7, #3]
 800a95c:	f003 020f 	and.w	r2, r3, #15
 800a960:	6879      	ldr	r1, [r7, #4]
 800a962:	4613      	mov	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4413      	add	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	440b      	add	r3, r1
 800a96c:	3318      	adds	r3, #24
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d02f      	beq.n	800a9d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a974:	78fb      	ldrb	r3, [r7, #3]
 800a976:	f003 020f 	and.w	r2, r3, #15
 800a97a:	6879      	ldr	r1, [r7, #4]
 800a97c:	4613      	mov	r3, r2
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4413      	add	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	440b      	add	r3, r1
 800a986:	3318      	adds	r3, #24
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	78fb      	ldrb	r3, [r7, #3]
 800a98c:	f003 010f 	and.w	r1, r3, #15
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	460b      	mov	r3, r1
 800a994:	00db      	lsls	r3, r3, #3
 800a996:	440b      	add	r3, r1
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4403      	add	r3, r0
 800a99c:	3348      	adds	r3, #72	; 0x48
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a9a4:	fb01 f303 	mul.w	r3, r1, r3
 800a9a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d112      	bne.n	800a9d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a9ae:	78fb      	ldrb	r3, [r7, #3]
 800a9b0:	f003 020f 	and.w	r2, r3, #15
 800a9b4:	6879      	ldr	r1, [r7, #4]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	4413      	add	r3, r2
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	440b      	add	r3, r1
 800a9c0:	3318      	adds	r3, #24
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a9c6:	78f9      	ldrb	r1, [r7, #3]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f002 f924 	bl	800cc1a <USBD_LL_Transmit>
 800a9d2:	e01f      	b.n	800aa14 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	33b0      	adds	r3, #176	; 0xb0
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d010      	beq.n	800aa14 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	33b0      	adds	r3, #176	; 0xb0
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	68ba      	ldr	r2, [r7, #8]
 800aa06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800aa10:	78fa      	ldrb	r2, [r7, #3]
 800aa12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	460b      	mov	r3, r1
 800aa28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	32b0      	adds	r2, #176	; 0xb0
 800aa34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	32b0      	adds	r2, #176	; 0xb0
 800aa44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d101      	bne.n	800aa50 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	e01a      	b.n	800aa86 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa50:	78fb      	ldrb	r3, [r7, #3]
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f002 f922 	bl	800cc9e <USBD_LL_GetRxDataSize>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	33b0      	adds	r3, #176	; 0xb0
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	4413      	add	r3, r2
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aa80:	4611      	mov	r1, r2
 800aa82:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b084      	sub	sp, #16
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	32b0      	adds	r2, #176	; 0xb0
 800aaa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d101      	bne.n	800aab0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aaac:	2303      	movs	r3, #3
 800aaae:	e025      	b.n	800aafc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	33b0      	adds	r3, #176	; 0xb0
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	4413      	add	r3, r2
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d01a      	beq.n	800aafa <USBD_CDC_EP0_RxReady+0x6c>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aaca:	2bff      	cmp	r3, #255	; 0xff
 800aacc:	d015      	beq.n	800aafa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	33b0      	adds	r3, #176	; 0xb0
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800aae6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aaee:	b292      	uxth	r2, r2
 800aaf0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	22ff      	movs	r2, #255	; 0xff
 800aaf6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab0c:	2182      	movs	r1, #130	; 0x82
 800ab0e:	4818      	ldr	r0, [pc, #96]	; (800ab70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ab10:	f000 fd09 	bl	800b526 <USBD_GetEpDesc>
 800ab14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab16:	2101      	movs	r1, #1
 800ab18:	4815      	ldr	r0, [pc, #84]	; (800ab70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ab1a:	f000 fd04 	bl	800b526 <USBD_GetEpDesc>
 800ab1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab20:	2181      	movs	r1, #129	; 0x81
 800ab22:	4813      	ldr	r0, [pc, #76]	; (800ab70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ab24:	f000 fcff 	bl	800b526 <USBD_GetEpDesc>
 800ab28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	2210      	movs	r2, #16
 800ab34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d006      	beq.n	800ab4a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab44:	711a      	strb	r2, [r3, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d006      	beq.n	800ab5e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2200      	movs	r2, #0
 800ab54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab58:	711a      	strb	r2, [r3, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2243      	movs	r2, #67	; 0x43
 800ab62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ab64:	4b02      	ldr	r3, [pc, #8]	; (800ab70 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3718      	adds	r7, #24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	20000074 	.word	0x20000074

0800ab74 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b086      	sub	sp, #24
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab7c:	2182      	movs	r1, #130	; 0x82
 800ab7e:	4818      	ldr	r0, [pc, #96]	; (800abe0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab80:	f000 fcd1 	bl	800b526 <USBD_GetEpDesc>
 800ab84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab86:	2101      	movs	r1, #1
 800ab88:	4815      	ldr	r0, [pc, #84]	; (800abe0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab8a:	f000 fccc 	bl	800b526 <USBD_GetEpDesc>
 800ab8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab90:	2181      	movs	r1, #129	; 0x81
 800ab92:	4813      	ldr	r0, [pc, #76]	; (800abe0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab94:	f000 fcc7 	bl	800b526 <USBD_GetEpDesc>
 800ab98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d002      	beq.n	800aba6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	2210      	movs	r2, #16
 800aba4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d006      	beq.n	800abba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	2200      	movs	r2, #0
 800abb0:	711a      	strb	r2, [r3, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f042 0202 	orr.w	r2, r2, #2
 800abb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d006      	beq.n	800abce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	711a      	strb	r2, [r3, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f042 0202 	orr.w	r2, r2, #2
 800abcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2243      	movs	r2, #67	; 0x43
 800abd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800abd4:	4b02      	ldr	r3, [pc, #8]	; (800abe0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3718      	adds	r7, #24
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	20000074 	.word	0x20000074

0800abe4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b086      	sub	sp, #24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800abec:	2182      	movs	r1, #130	; 0x82
 800abee:	4818      	ldr	r0, [pc, #96]	; (800ac50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abf0:	f000 fc99 	bl	800b526 <USBD_GetEpDesc>
 800abf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800abf6:	2101      	movs	r1, #1
 800abf8:	4815      	ldr	r0, [pc, #84]	; (800ac50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abfa:	f000 fc94 	bl	800b526 <USBD_GetEpDesc>
 800abfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac00:	2181      	movs	r1, #129	; 0x81
 800ac02:	4813      	ldr	r0, [pc, #76]	; (800ac50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ac04:	f000 fc8f 	bl	800b526 <USBD_GetEpDesc>
 800ac08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d002      	beq.n	800ac16 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2210      	movs	r2, #16
 800ac14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d006      	beq.n	800ac2a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac24:	711a      	strb	r2, [r3, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d006      	beq.n	800ac3e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2200      	movs	r2, #0
 800ac34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac38:	711a      	strb	r2, [r3, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2243      	movs	r2, #67	; 0x43
 800ac42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac44:	4b02      	ldr	r3, [pc, #8]	; (800ac50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3718      	adds	r7, #24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	20000074 	.word	0x20000074

0800ac54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	220a      	movs	r2, #10
 800ac60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ac62:	4b03      	ldr	r3, [pc, #12]	; (800ac70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	20000030 	.word	0x20000030

0800ac74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e009      	b.n	800ac9c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	33b0      	adds	r3, #176	; 0xb0
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b087      	sub	sp, #28
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	32b0      	adds	r2, #176	; 0xb0
 800acbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d101      	bne.n	800acce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800acca:	2303      	movs	r3, #3
 800accc:	e008      	b.n	800ace0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	68ba      	ldr	r2, [r7, #8]
 800acd2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	371c      	adds	r7, #28
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	32b0      	adds	r2, #176	; 0xb0
 800ad00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d101      	bne.n	800ad10 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	e004      	b.n	800ad1a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
	...

0800ad28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	32b0      	adds	r2, #176	; 0xb0
 800ad3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	32b0      	adds	r2, #176	; 0xb0
 800ad4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e018      	b.n	800ad88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	7c1b      	ldrb	r3, [r3, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10a      	bne.n	800ad74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad5e:	4b0c      	ldr	r3, [pc, #48]	; (800ad90 <USBD_CDC_ReceivePacket+0x68>)
 800ad60:	7819      	ldrb	r1, [r3, #0]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f001 ff75 	bl	800cc5c <USBD_LL_PrepareReceive>
 800ad72:	e008      	b.n	800ad86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad74:	4b06      	ldr	r3, [pc, #24]	; (800ad90 <USBD_CDC_ReceivePacket+0x68>)
 800ad76:	7819      	ldrb	r1, [r3, #0]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad7e:	2340      	movs	r3, #64	; 0x40
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f001 ff6b 	bl	800cc5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	200000b8 	.word	0x200000b8

0800ad94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b086      	sub	sp, #24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ada8:	2303      	movs	r3, #3
 800adaa:	e01f      	b.n	800adec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2200      	movs	r2, #0
 800adb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d003      	beq.n	800add2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2201      	movs	r2, #1
 800add6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	79fa      	ldrb	r2, [r7, #7]
 800adde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f001 fde5 	bl	800c9b0 <USBD_LL_Init>
 800ade6:	4603      	mov	r3, r0
 800ade8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800adea:	7dfb      	ldrb	r3, [r7, #23]
}
 800adec:	4618      	mov	r0, r3
 800adee:	3718      	adds	r7, #24
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800adfe:	2300      	movs	r3, #0
 800ae00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d101      	bne.n	800ae0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	e025      	b.n	800ae58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	32ae      	adds	r2, #174	; 0xae
 800ae1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00f      	beq.n	800ae48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	32ae      	adds	r2, #174	; 0xae
 800ae32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae38:	f107 020e 	add.w	r2, r7, #14
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	4798      	blx	r3
 800ae40:	4602      	mov	r2, r0
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ae4e:	1c5a      	adds	r2, r3, #1
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f001 fded 	bl	800ca48 <USBD_LL_Start>
 800ae6e:	4603      	mov	r3, r0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b084      	sub	sp, #16
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
 800ae96:	460b      	mov	r3, r1
 800ae98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d009      	beq.n	800aebc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	78fa      	ldrb	r2, [r7, #3]
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	4798      	blx	r3
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	460b      	mov	r3, r1
 800aed0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	78fa      	ldrb	r2, [r7, #3]
 800aee0:	4611      	mov	r1, r2
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	4798      	blx	r3
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d001      	beq.n	800aef0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aeec:	2303      	movs	r3, #3
 800aeee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b084      	sub	sp, #16
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f001 f908 	bl	800c122 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800af20:	461a      	mov	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800af2e:	f003 031f 	and.w	r3, r3, #31
 800af32:	2b02      	cmp	r3, #2
 800af34:	d01a      	beq.n	800af6c <USBD_LL_SetupStage+0x72>
 800af36:	2b02      	cmp	r3, #2
 800af38:	d822      	bhi.n	800af80 <USBD_LL_SetupStage+0x86>
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d002      	beq.n	800af44 <USBD_LL_SetupStage+0x4a>
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d00a      	beq.n	800af58 <USBD_LL_SetupStage+0x5e>
 800af42:	e01d      	b.n	800af80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af4a:	4619      	mov	r1, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fb5f 	bl	800b610 <USBD_StdDevReq>
 800af52:	4603      	mov	r3, r0
 800af54:	73fb      	strb	r3, [r7, #15]
      break;
 800af56:	e020      	b.n	800af9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af5e:	4619      	mov	r1, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fbc7 	bl	800b6f4 <USBD_StdItfReq>
 800af66:	4603      	mov	r3, r0
 800af68:	73fb      	strb	r3, [r7, #15]
      break;
 800af6a:	e016      	b.n	800af9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af72:	4619      	mov	r1, r3
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fc29 	bl	800b7cc <USBD_StdEPReq>
 800af7a:	4603      	mov	r3, r0
 800af7c:	73fb      	strb	r3, [r7, #15]
      break;
 800af7e:	e00c      	b.n	800af9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800af86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f001 fdba 	bl	800cb08 <USBD_LL_StallEP>
 800af94:	4603      	mov	r3, r0
 800af96:	73fb      	strb	r3, [r7, #15]
      break;
 800af98:	bf00      	nop
  }

  return ret;
 800af9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	460b      	mov	r3, r1
 800afae:	607a      	str	r2, [r7, #4]
 800afb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800afb6:	7afb      	ldrb	r3, [r7, #11]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d16e      	bne.n	800b09a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800afc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800afca:	2b03      	cmp	r3, #3
 800afcc:	f040 8098 	bne.w	800b100 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	689a      	ldr	r2, [r3, #8]
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d913      	bls.n	800b004 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	689a      	ldr	r2, [r3, #8]
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	1ad2      	subs	r2, r2, r3
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	68da      	ldr	r2, [r3, #12]
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	4293      	cmp	r3, r2
 800aff4:	bf28      	it	cs
 800aff6:	4613      	movcs	r3, r2
 800aff8:	461a      	mov	r2, r3
 800affa:	6879      	ldr	r1, [r7, #4]
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f001 f984 	bl	800c30a <USBD_CtlContinueRx>
 800b002:	e07d      	b.n	800b100 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b00a:	f003 031f 	and.w	r3, r3, #31
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d014      	beq.n	800b03c <USBD_LL_DataOutStage+0x98>
 800b012:	2b02      	cmp	r3, #2
 800b014:	d81d      	bhi.n	800b052 <USBD_LL_DataOutStage+0xae>
 800b016:	2b00      	cmp	r3, #0
 800b018:	d002      	beq.n	800b020 <USBD_LL_DataOutStage+0x7c>
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d003      	beq.n	800b026 <USBD_LL_DataOutStage+0x82>
 800b01e:	e018      	b.n	800b052 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b020:	2300      	movs	r3, #0
 800b022:	75bb      	strb	r3, [r7, #22]
            break;
 800b024:	e018      	b.n	800b058 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	4619      	mov	r1, r3
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f000 fa5e 	bl	800b4f2 <USBD_CoreFindIF>
 800b036:	4603      	mov	r3, r0
 800b038:	75bb      	strb	r3, [r7, #22]
            break;
 800b03a:	e00d      	b.n	800b058 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b042:	b2db      	uxtb	r3, r3
 800b044:	4619      	mov	r1, r3
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	f000 fa60 	bl	800b50c <USBD_CoreFindEP>
 800b04c:	4603      	mov	r3, r0
 800b04e:	75bb      	strb	r3, [r7, #22]
            break;
 800b050:	e002      	b.n	800b058 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b052:	2300      	movs	r3, #0
 800b054:	75bb      	strb	r3, [r7, #22]
            break;
 800b056:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b058:	7dbb      	ldrb	r3, [r7, #22]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d119      	bne.n	800b092 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b064:	b2db      	uxtb	r3, r3
 800b066:	2b03      	cmp	r3, #3
 800b068:	d113      	bne.n	800b092 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b06a:	7dba      	ldrb	r2, [r7, #22]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	32ae      	adds	r2, #174	; 0xae
 800b070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00b      	beq.n	800b092 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b07a:	7dba      	ldrb	r2, [r7, #22]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b082:	7dba      	ldrb	r2, [r7, #22]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	32ae      	adds	r2, #174	; 0xae
 800b088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f001 f94a 	bl	800c32c <USBD_CtlSendStatus>
 800b098:	e032      	b.n	800b100 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b09a:	7afb      	ldrb	r3, [r7, #11]
 800b09c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	f000 fa31 	bl	800b50c <USBD_CoreFindEP>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0ae:	7dbb      	ldrb	r3, [r7, #22]
 800b0b0:	2bff      	cmp	r3, #255	; 0xff
 800b0b2:	d025      	beq.n	800b100 <USBD_LL_DataOutStage+0x15c>
 800b0b4:	7dbb      	ldrb	r3, [r7, #22]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d122      	bne.n	800b100 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b03      	cmp	r3, #3
 800b0c4:	d117      	bne.n	800b0f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b0c6:	7dba      	ldrb	r2, [r7, #22]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	32ae      	adds	r2, #174	; 0xae
 800b0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d0:	699b      	ldr	r3, [r3, #24]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00f      	beq.n	800b0f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b0d6:	7dba      	ldrb	r2, [r7, #22]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b0de:	7dba      	ldrb	r2, [r7, #22]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	32ae      	adds	r2, #174	; 0xae
 800b0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e8:	699b      	ldr	r3, [r3, #24]
 800b0ea:	7afa      	ldrb	r2, [r7, #11]
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	4798      	blx	r3
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b0f6:	7dfb      	ldrb	r3, [r7, #23]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d001      	beq.n	800b100 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b0fc:	7dfb      	ldrb	r3, [r7, #23]
 800b0fe:	e000      	b.n	800b102 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3718      	adds	r7, #24
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b086      	sub	sp, #24
 800b10e:	af00      	add	r7, sp, #0
 800b110:	60f8      	str	r0, [r7, #12]
 800b112:	460b      	mov	r3, r1
 800b114:	607a      	str	r2, [r7, #4]
 800b116:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b118:	7afb      	ldrb	r3, [r7, #11]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d16f      	bne.n	800b1fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	3314      	adds	r3, #20
 800b122:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d15a      	bne.n	800b1e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	689a      	ldr	r2, [r3, #8]
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	429a      	cmp	r2, r3
 800b138:	d914      	bls.n	800b164 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	689a      	ldr	r2, [r3, #8]
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	1ad2      	subs	r2, r2, r3
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	461a      	mov	r2, r3
 800b14e:	6879      	ldr	r1, [r7, #4]
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f001 f8ac 	bl	800c2ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b156:	2300      	movs	r3, #0
 800b158:	2200      	movs	r2, #0
 800b15a:	2100      	movs	r1, #0
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f001 fd7d 	bl	800cc5c <USBD_LL_PrepareReceive>
 800b162:	e03f      	b.n	800b1e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	68da      	ldr	r2, [r3, #12]
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d11c      	bne.n	800b1aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	685a      	ldr	r2, [r3, #4]
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b178:	429a      	cmp	r2, r3
 800b17a:	d316      	bcc.n	800b1aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	685a      	ldr	r2, [r3, #4]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b186:	429a      	cmp	r2, r3
 800b188:	d20f      	bcs.n	800b1aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b18a:	2200      	movs	r2, #0
 800b18c:	2100      	movs	r1, #0
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f001 f88d 	bl	800c2ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b19c:	2300      	movs	r3, #0
 800b19e:	2200      	movs	r2, #0
 800b1a0:	2100      	movs	r1, #0
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f001 fd5a 	bl	800cc5c <USBD_LL_PrepareReceive>
 800b1a8:	e01c      	b.n	800b1e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	2b03      	cmp	r3, #3
 800b1b4:	d10f      	bne.n	800b1d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d009      	beq.n	800b1d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1d6:	2180      	movs	r1, #128	; 0x80
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f001 fc95 	bl	800cb08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f001 f8b7 	bl	800c352 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d03a      	beq.n	800b264 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7ff fe42 	bl	800ae78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b1fc:	e032      	b.n	800b264 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b1fe:	7afb      	ldrb	r3, [r7, #11]
 800b200:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b204:	b2db      	uxtb	r3, r3
 800b206:	4619      	mov	r1, r3
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 f97f 	bl	800b50c <USBD_CoreFindEP>
 800b20e:	4603      	mov	r3, r0
 800b210:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	2bff      	cmp	r3, #255	; 0xff
 800b216:	d025      	beq.n	800b264 <USBD_LL_DataInStage+0x15a>
 800b218:	7dfb      	ldrb	r3, [r7, #23]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d122      	bne.n	800b264 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b224:	b2db      	uxtb	r3, r3
 800b226:	2b03      	cmp	r3, #3
 800b228:	d11c      	bne.n	800b264 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b22a:	7dfa      	ldrb	r2, [r7, #23]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	32ae      	adds	r2, #174	; 0xae
 800b230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b234:	695b      	ldr	r3, [r3, #20]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d014      	beq.n	800b264 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b23a:	7dfa      	ldrb	r2, [r7, #23]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b242:	7dfa      	ldrb	r2, [r7, #23]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	32ae      	adds	r2, #174	; 0xae
 800b248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	7afa      	ldrb	r2, [r7, #11]
 800b250:	4611      	mov	r1, r2
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	4798      	blx	r3
 800b256:	4603      	mov	r3, r0
 800b258:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b25a:	7dbb      	ldrb	r3, [r7, #22]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b260:	7dbb      	ldrb	r3, [r7, #22]
 800b262:	e000      	b.n	800b266 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3718      	adds	r7, #24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b084      	sub	sp, #16
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b276:	2300      	movs	r3, #0
 800b278:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2201      	movs	r2, #1
 800b27e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d014      	beq.n	800b2d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00e      	beq.n	800b2d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	6852      	ldr	r2, [r2, #4]
 800b2c2:	b2d2      	uxtb	r2, r2
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	4798      	blx	r3
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b2d0:	2303      	movs	r3, #3
 800b2d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b2d4:	2340      	movs	r3, #64	; 0x40
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	2100      	movs	r1, #0
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f001 fbcf 	bl	800ca7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2240      	movs	r2, #64	; 0x40
 800b2ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b2f0:	2340      	movs	r3, #64	; 0x40
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	2180      	movs	r1, #128	; 0x80
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f001 fbc1 	bl	800ca7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2201      	movs	r2, #1
 800b300:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2240      	movs	r2, #64	; 0x40
 800b306:	621a      	str	r2, [r3, #32]

  return ret;
 800b308:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b312:	b480      	push	{r7}
 800b314:	b083      	sub	sp, #12
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	460b      	mov	r3, r1
 800b31c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	78fa      	ldrb	r2, [r7, #3]
 800b322:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b332:	b480      	push	{r7}
 800b334:	b083      	sub	sp, #12
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b340:	b2da      	uxtb	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2204      	movs	r2, #4
 800b34c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b35e:	b480      	push	{r7}
 800b360:	b083      	sub	sp, #12
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b04      	cmp	r3, #4
 800b370:	d106      	bne.n	800b380 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b378:	b2da      	uxtb	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b082      	sub	sp, #8
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	2b03      	cmp	r3, #3
 800b3a0:	d110      	bne.n	800b3c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00b      	beq.n	800b3c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3b2:	69db      	ldr	r3, [r3, #28]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d005      	beq.n	800b3c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3be:	69db      	ldr	r3, [r3, #28]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	32ae      	adds	r2, #174	; 0xae
 800b3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d101      	bne.n	800b3f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	e01c      	b.n	800b42a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	2b03      	cmp	r3, #3
 800b3fa:	d115      	bne.n	800b428 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	32ae      	adds	r2, #174	; 0xae
 800b406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40a:	6a1b      	ldr	r3, [r3, #32]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00b      	beq.n	800b428 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	32ae      	adds	r2, #174	; 0xae
 800b41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b41e:	6a1b      	ldr	r3, [r3, #32]
 800b420:	78fa      	ldrb	r2, [r7, #3]
 800b422:	4611      	mov	r1, r2
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b082      	sub	sp, #8
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	460b      	mov	r3, r1
 800b43c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	32ae      	adds	r2, #174	; 0xae
 800b448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d101      	bne.n	800b454 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b450:	2303      	movs	r3, #3
 800b452:	e01c      	b.n	800b48e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d115      	bne.n	800b48c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	32ae      	adds	r2, #174	; 0xae
 800b46a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b470:	2b00      	cmp	r3, #0
 800b472:	d00b      	beq.n	800b48c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	32ae      	adds	r2, #174	; 0xae
 800b47e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b484:	78fa      	ldrb	r2, [r7, #3]
 800b486:	4611      	mov	r1, r2
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b496:	b480      	push	{r7}
 800b498:	b083      	sub	sp, #12
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00e      	beq.n	800b4e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	6852      	ldr	r2, [r2, #4]
 800b4d6:	b2d2      	uxtb	r2, r2
 800b4d8:	4611      	mov	r1, r2
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	4798      	blx	r3
 800b4de:	4603      	mov	r3, r0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d001      	beq.n	800b4e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b4f2:	b480      	push	{r7}
 800b4f4:	b083      	sub	sp, #12
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b4fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b500:	4618      	mov	r0, r3
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	460b      	mov	r3, r1
 800b516:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b518:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	370c      	adds	r7, #12
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr

0800b526 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b086      	sub	sp, #24
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	460b      	mov	r3, r1
 800b530:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b53a:	2300      	movs	r3, #0
 800b53c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	885b      	ldrh	r3, [r3, #2]
 800b542:	b29a      	uxth	r2, r3
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	b29b      	uxth	r3, r3
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d920      	bls.n	800b590 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	b29b      	uxth	r3, r3
 800b554:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b556:	e013      	b.n	800b580 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b558:	f107 030a 	add.w	r3, r7, #10
 800b55c:	4619      	mov	r1, r3
 800b55e:	6978      	ldr	r0, [r7, #20]
 800b560:	f000 f81b 	bl	800b59a <USBD_GetNextDesc>
 800b564:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	785b      	ldrb	r3, [r3, #1]
 800b56a:	2b05      	cmp	r3, #5
 800b56c:	d108      	bne.n	800b580 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	789b      	ldrb	r3, [r3, #2]
 800b576:	78fa      	ldrb	r2, [r7, #3]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d008      	beq.n	800b58e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b57c:	2300      	movs	r3, #0
 800b57e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	885b      	ldrh	r3, [r3, #2]
 800b584:	b29a      	uxth	r2, r3
 800b586:	897b      	ldrh	r3, [r7, #10]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d8e5      	bhi.n	800b558 <USBD_GetEpDesc+0x32>
 800b58c:	e000      	b.n	800b590 <USBD_GetEpDesc+0x6a>
          break;
 800b58e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b590:	693b      	ldr	r3, [r7, #16]
}
 800b592:	4618      	mov	r0, r3
 800b594:	3718      	adds	r7, #24
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b59a:	b480      	push	{r7}
 800b59c:	b085      	sub	sp, #20
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	881a      	ldrh	r2, [r3, #0]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	4413      	add	r3, r2
 800b5b4:	b29a      	uxth	r2, r3
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	461a      	mov	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b087      	sub	sp, #28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b5f2:	8a3b      	ldrh	r3, [r7, #16]
 800b5f4:	021b      	lsls	r3, r3, #8
 800b5f6:	b21a      	sxth	r2, r3
 800b5f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	b21b      	sxth	r3, r3
 800b600:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b602:	89fb      	ldrh	r3, [r7, #14]
}
 800b604:	4618      	mov	r0, r3
 800b606:	371c      	adds	r7, #28
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b626:	2b40      	cmp	r3, #64	; 0x40
 800b628:	d005      	beq.n	800b636 <USBD_StdDevReq+0x26>
 800b62a:	2b40      	cmp	r3, #64	; 0x40
 800b62c:	d857      	bhi.n	800b6de <USBD_StdDevReq+0xce>
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00f      	beq.n	800b652 <USBD_StdDevReq+0x42>
 800b632:	2b20      	cmp	r3, #32
 800b634:	d153      	bne.n	800b6de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	32ae      	adds	r2, #174	; 0xae
 800b640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	6839      	ldr	r1, [r7, #0]
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	4798      	blx	r3
 800b64c:	4603      	mov	r3, r0
 800b64e:	73fb      	strb	r3, [r7, #15]
      break;
 800b650:	e04a      	b.n	800b6e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	785b      	ldrb	r3, [r3, #1]
 800b656:	2b09      	cmp	r3, #9
 800b658:	d83b      	bhi.n	800b6d2 <USBD_StdDevReq+0xc2>
 800b65a:	a201      	add	r2, pc, #4	; (adr r2, 800b660 <USBD_StdDevReq+0x50>)
 800b65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b660:	0800b6b5 	.word	0x0800b6b5
 800b664:	0800b6c9 	.word	0x0800b6c9
 800b668:	0800b6d3 	.word	0x0800b6d3
 800b66c:	0800b6bf 	.word	0x0800b6bf
 800b670:	0800b6d3 	.word	0x0800b6d3
 800b674:	0800b693 	.word	0x0800b693
 800b678:	0800b689 	.word	0x0800b689
 800b67c:	0800b6d3 	.word	0x0800b6d3
 800b680:	0800b6ab 	.word	0x0800b6ab
 800b684:	0800b69d 	.word	0x0800b69d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fa3c 	bl	800bb08 <USBD_GetDescriptor>
          break;
 800b690:	e024      	b.n	800b6dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fba1 	bl	800bddc <USBD_SetAddress>
          break;
 800b69a:	e01f      	b.n	800b6dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b69c:	6839      	ldr	r1, [r7, #0]
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fbe0 	bl	800be64 <USBD_SetConfig>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	73fb      	strb	r3, [r7, #15]
          break;
 800b6a8:	e018      	b.n	800b6dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fc83 	bl	800bfb8 <USBD_GetConfig>
          break;
 800b6b2:	e013      	b.n	800b6dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fcb4 	bl	800c024 <USBD_GetStatus>
          break;
 800b6bc:	e00e      	b.n	800b6dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 fce3 	bl	800c08c <USBD_SetFeature>
          break;
 800b6c6:	e009      	b.n	800b6dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6c8:	6839      	ldr	r1, [r7, #0]
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 fd07 	bl	800c0de <USBD_ClrFeature>
          break;
 800b6d0:	e004      	b.n	800b6dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 fd5e 	bl	800c196 <USBD_CtlError>
          break;
 800b6da:	bf00      	nop
      }
      break;
 800b6dc:	e004      	b.n	800b6e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b6de:	6839      	ldr	r1, [r7, #0]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 fd58 	bl	800c196 <USBD_CtlError>
      break;
 800b6e6:	bf00      	nop
  }

  return ret;
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop

0800b6f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6fe:	2300      	movs	r3, #0
 800b700:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b70a:	2b40      	cmp	r3, #64	; 0x40
 800b70c:	d005      	beq.n	800b71a <USBD_StdItfReq+0x26>
 800b70e:	2b40      	cmp	r3, #64	; 0x40
 800b710:	d852      	bhi.n	800b7b8 <USBD_StdItfReq+0xc4>
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <USBD_StdItfReq+0x26>
 800b716:	2b20      	cmp	r3, #32
 800b718:	d14e      	bne.n	800b7b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b720:	b2db      	uxtb	r3, r3
 800b722:	3b01      	subs	r3, #1
 800b724:	2b02      	cmp	r3, #2
 800b726:	d840      	bhi.n	800b7aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	889b      	ldrh	r3, [r3, #4]
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d836      	bhi.n	800b7a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	889b      	ldrh	r3, [r3, #4]
 800b736:	b2db      	uxtb	r3, r3
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f7ff fed9 	bl	800b4f2 <USBD_CoreFindIF>
 800b740:	4603      	mov	r3, r0
 800b742:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b744:	7bbb      	ldrb	r3, [r7, #14]
 800b746:	2bff      	cmp	r3, #255	; 0xff
 800b748:	d01d      	beq.n	800b786 <USBD_StdItfReq+0x92>
 800b74a:	7bbb      	ldrb	r3, [r7, #14]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d11a      	bne.n	800b786 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b750:	7bba      	ldrb	r2, [r7, #14]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	32ae      	adds	r2, #174	; 0xae
 800b756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00f      	beq.n	800b780 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b760:	7bba      	ldrb	r2, [r7, #14]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b768:	7bba      	ldrb	r2, [r7, #14]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	32ae      	adds	r2, #174	; 0xae
 800b76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	6839      	ldr	r1, [r7, #0]
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	4798      	blx	r3
 800b77a:	4603      	mov	r3, r0
 800b77c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b77e:	e004      	b.n	800b78a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b780:	2303      	movs	r3, #3
 800b782:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b784:	e001      	b.n	800b78a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b786:	2303      	movs	r3, #3
 800b788:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	88db      	ldrh	r3, [r3, #6]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d110      	bne.n	800b7b4 <USBD_StdItfReq+0xc0>
 800b792:	7bfb      	ldrb	r3, [r7, #15]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10d      	bne.n	800b7b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fdc7 	bl	800c32c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b79e:	e009      	b.n	800b7b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 fcf7 	bl	800c196 <USBD_CtlError>
          break;
 800b7a8:	e004      	b.n	800b7b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b7aa:	6839      	ldr	r1, [r7, #0]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fcf2 	bl	800c196 <USBD_CtlError>
          break;
 800b7b2:	e000      	b.n	800b7b6 <USBD_StdItfReq+0xc2>
          break;
 800b7b4:	bf00      	nop
      }
      break;
 800b7b6:	e004      	b.n	800b7c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fceb 	bl	800c196 <USBD_CtlError>
      break;
 800b7c0:	bf00      	nop
  }

  return ret;
 800b7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	889b      	ldrh	r3, [r3, #4]
 800b7de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7e8:	2b40      	cmp	r3, #64	; 0x40
 800b7ea:	d007      	beq.n	800b7fc <USBD_StdEPReq+0x30>
 800b7ec:	2b40      	cmp	r3, #64	; 0x40
 800b7ee:	f200 817f 	bhi.w	800baf0 <USBD_StdEPReq+0x324>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d02a      	beq.n	800b84c <USBD_StdEPReq+0x80>
 800b7f6:	2b20      	cmp	r3, #32
 800b7f8:	f040 817a 	bne.w	800baf0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff fe83 	bl	800b50c <USBD_CoreFindEP>
 800b806:	4603      	mov	r3, r0
 800b808:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b80a:	7b7b      	ldrb	r3, [r7, #13]
 800b80c:	2bff      	cmp	r3, #255	; 0xff
 800b80e:	f000 8174 	beq.w	800bafa <USBD_StdEPReq+0x32e>
 800b812:	7b7b      	ldrb	r3, [r7, #13]
 800b814:	2b00      	cmp	r3, #0
 800b816:	f040 8170 	bne.w	800bafa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b81a:	7b7a      	ldrb	r2, [r7, #13]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b822:	7b7a      	ldrb	r2, [r7, #13]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	32ae      	adds	r2, #174	; 0xae
 800b828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f000 8163 	beq.w	800bafa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b834:	7b7a      	ldrb	r2, [r7, #13]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	32ae      	adds	r2, #174	; 0xae
 800b83a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	4798      	blx	r3
 800b846:	4603      	mov	r3, r0
 800b848:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b84a:	e156      	b.n	800bafa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	785b      	ldrb	r3, [r3, #1]
 800b850:	2b03      	cmp	r3, #3
 800b852:	d008      	beq.n	800b866 <USBD_StdEPReq+0x9a>
 800b854:	2b03      	cmp	r3, #3
 800b856:	f300 8145 	bgt.w	800bae4 <USBD_StdEPReq+0x318>
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f000 809b 	beq.w	800b996 <USBD_StdEPReq+0x1ca>
 800b860:	2b01      	cmp	r3, #1
 800b862:	d03c      	beq.n	800b8de <USBD_StdEPReq+0x112>
 800b864:	e13e      	b.n	800bae4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d002      	beq.n	800b878 <USBD_StdEPReq+0xac>
 800b872:	2b03      	cmp	r3, #3
 800b874:	d016      	beq.n	800b8a4 <USBD_StdEPReq+0xd8>
 800b876:	e02c      	b.n	800b8d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b878:	7bbb      	ldrb	r3, [r7, #14]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00d      	beq.n	800b89a <USBD_StdEPReq+0xce>
 800b87e:	7bbb      	ldrb	r3, [r7, #14]
 800b880:	2b80      	cmp	r3, #128	; 0x80
 800b882:	d00a      	beq.n	800b89a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b884:	7bbb      	ldrb	r3, [r7, #14]
 800b886:	4619      	mov	r1, r3
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f001 f93d 	bl	800cb08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b88e:	2180      	movs	r1, #128	; 0x80
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f001 f939 	bl	800cb08 <USBD_LL_StallEP>
 800b896:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b898:	e020      	b.n	800b8dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 fc7a 	bl	800c196 <USBD_CtlError>
              break;
 800b8a2:	e01b      	b.n	800b8dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	885b      	ldrh	r3, [r3, #2]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10e      	bne.n	800b8ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8ac:	7bbb      	ldrb	r3, [r7, #14]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00b      	beq.n	800b8ca <USBD_StdEPReq+0xfe>
 800b8b2:	7bbb      	ldrb	r3, [r7, #14]
 800b8b4:	2b80      	cmp	r3, #128	; 0x80
 800b8b6:	d008      	beq.n	800b8ca <USBD_StdEPReq+0xfe>
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	88db      	ldrh	r3, [r3, #6]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d104      	bne.n	800b8ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8c0:	7bbb      	ldrb	r3, [r7, #14]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f001 f91f 	bl	800cb08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fd2e 	bl	800c32c <USBD_CtlSendStatus>

              break;
 800b8d0:	e004      	b.n	800b8dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b8d2:	6839      	ldr	r1, [r7, #0]
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fc5e 	bl	800c196 <USBD_CtlError>
              break;
 800b8da:	bf00      	nop
          }
          break;
 800b8dc:	e107      	b.n	800baee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	d002      	beq.n	800b8f0 <USBD_StdEPReq+0x124>
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d016      	beq.n	800b91c <USBD_StdEPReq+0x150>
 800b8ee:	e04b      	b.n	800b988 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00d      	beq.n	800b912 <USBD_StdEPReq+0x146>
 800b8f6:	7bbb      	ldrb	r3, [r7, #14]
 800b8f8:	2b80      	cmp	r3, #128	; 0x80
 800b8fa:	d00a      	beq.n	800b912 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8fc:	7bbb      	ldrb	r3, [r7, #14]
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f001 f901 	bl	800cb08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b906:	2180      	movs	r1, #128	; 0x80
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f001 f8fd 	bl	800cb08 <USBD_LL_StallEP>
 800b90e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b910:	e040      	b.n	800b994 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 fc3e 	bl	800c196 <USBD_CtlError>
              break;
 800b91a:	e03b      	b.n	800b994 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	885b      	ldrh	r3, [r3, #2]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d136      	bne.n	800b992 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b924:	7bbb      	ldrb	r3, [r7, #14]
 800b926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d004      	beq.n	800b938 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b92e:	7bbb      	ldrb	r3, [r7, #14]
 800b930:	4619      	mov	r1, r3
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f001 f907 	bl	800cb46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fcf7 	bl	800c32c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b93e:	7bbb      	ldrb	r3, [r7, #14]
 800b940:	4619      	mov	r1, r3
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f7ff fde2 	bl	800b50c <USBD_CoreFindEP>
 800b948:	4603      	mov	r3, r0
 800b94a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b94c:	7b7b      	ldrb	r3, [r7, #13]
 800b94e:	2bff      	cmp	r3, #255	; 0xff
 800b950:	d01f      	beq.n	800b992 <USBD_StdEPReq+0x1c6>
 800b952:	7b7b      	ldrb	r3, [r7, #13]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d11c      	bne.n	800b992 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b958:	7b7a      	ldrb	r2, [r7, #13]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b960:	7b7a      	ldrb	r2, [r7, #13]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	32ae      	adds	r2, #174	; 0xae
 800b966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d010      	beq.n	800b992 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b970:	7b7a      	ldrb	r2, [r7, #13]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	32ae      	adds	r2, #174	; 0xae
 800b976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	4798      	blx	r3
 800b982:	4603      	mov	r3, r0
 800b984:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b986:	e004      	b.n	800b992 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 fc03 	bl	800c196 <USBD_CtlError>
              break;
 800b990:	e000      	b.n	800b994 <USBD_StdEPReq+0x1c8>
              break;
 800b992:	bf00      	nop
          }
          break;
 800b994:	e0ab      	b.n	800baee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d002      	beq.n	800b9a8 <USBD_StdEPReq+0x1dc>
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d032      	beq.n	800ba0c <USBD_StdEPReq+0x240>
 800b9a6:	e097      	b.n	800bad8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d007      	beq.n	800b9be <USBD_StdEPReq+0x1f2>
 800b9ae:	7bbb      	ldrb	r3, [r7, #14]
 800b9b0:	2b80      	cmp	r3, #128	; 0x80
 800b9b2:	d004      	beq.n	800b9be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fbed 	bl	800c196 <USBD_CtlError>
                break;
 800b9bc:	e091      	b.n	800bae2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	da0b      	bge.n	800b9de <USBD_StdEPReq+0x212>
 800b9c6:	7bbb      	ldrb	r3, [r7, #14]
 800b9c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	4413      	add	r3, r2
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	3310      	adds	r3, #16
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	4413      	add	r3, r2
 800b9da:	3304      	adds	r3, #4
 800b9dc:	e00b      	b.n	800b9f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
 800b9e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	4413      	add	r3, r2
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2202      	movs	r2, #2
 800ba02:	4619      	mov	r1, r3
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 fc37 	bl	800c278 <USBD_CtlSendData>
              break;
 800ba0a:	e06a      	b.n	800bae2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	da11      	bge.n	800ba38 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba14:	7bbb      	ldrb	r3, [r7, #14]
 800ba16:	f003 020f 	and.w	r2, r3, #15
 800ba1a:	6879      	ldr	r1, [r7, #4]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4413      	add	r3, r2
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	440b      	add	r3, r1
 800ba26:	3324      	adds	r3, #36	; 0x24
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d117      	bne.n	800ba5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba2e:	6839      	ldr	r1, [r7, #0]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fbb0 	bl	800c196 <USBD_CtlError>
                  break;
 800ba36:	e054      	b.n	800bae2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba38:	7bbb      	ldrb	r3, [r7, #14]
 800ba3a:	f003 020f 	and.w	r2, r3, #15
 800ba3e:	6879      	ldr	r1, [r7, #4]
 800ba40:	4613      	mov	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4413      	add	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	440b      	add	r3, r1
 800ba4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba4e:	881b      	ldrh	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d104      	bne.n	800ba5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 fb9d 	bl	800c196 <USBD_CtlError>
                  break;
 800ba5c:	e041      	b.n	800bae2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	da0b      	bge.n	800ba7e <USBD_StdEPReq+0x2b2>
 800ba66:	7bbb      	ldrb	r3, [r7, #14]
 800ba68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4413      	add	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	3310      	adds	r3, #16
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	4413      	add	r3, r2
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	e00b      	b.n	800ba96 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba7e:	7bbb      	ldrb	r3, [r7, #14]
 800ba80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba84:	4613      	mov	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	4413      	add	r3, r2
 800ba94:	3304      	adds	r3, #4
 800ba96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d002      	beq.n	800baa4 <USBD_StdEPReq+0x2d8>
 800ba9e:	7bbb      	ldrb	r3, [r7, #14]
 800baa0:	2b80      	cmp	r3, #128	; 0x80
 800baa2:	d103      	bne.n	800baac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	2200      	movs	r2, #0
 800baa8:	601a      	str	r2, [r3, #0]
 800baaa:	e00e      	b.n	800baca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f001 f867 	bl	800cb84 <USBD_LL_IsStallEP>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d003      	beq.n	800bac4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	2201      	movs	r2, #1
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	e002      	b.n	800baca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2200      	movs	r2, #0
 800bac8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	2202      	movs	r2, #2
 800bace:	4619      	mov	r1, r3
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fbd1 	bl	800c278 <USBD_CtlSendData>
              break;
 800bad6:	e004      	b.n	800bae2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 fb5b 	bl	800c196 <USBD_CtlError>
              break;
 800bae0:	bf00      	nop
          }
          break;
 800bae2:	e004      	b.n	800baee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fb55 	bl	800c196 <USBD_CtlError>
          break;
 800baec:	bf00      	nop
      }
      break;
 800baee:	e005      	b.n	800bafc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800baf0:	6839      	ldr	r1, [r7, #0]
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 fb4f 	bl	800c196 <USBD_CtlError>
      break;
 800baf8:	e000      	b.n	800bafc <USBD_StdEPReq+0x330>
      break;
 800bafa:	bf00      	nop
  }

  return ret;
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
	...

0800bb08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb12:	2300      	movs	r3, #0
 800bb14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	885b      	ldrh	r3, [r3, #2]
 800bb22:	0a1b      	lsrs	r3, r3, #8
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	3b01      	subs	r3, #1
 800bb28:	2b06      	cmp	r3, #6
 800bb2a:	f200 8128 	bhi.w	800bd7e <USBD_GetDescriptor+0x276>
 800bb2e:	a201      	add	r2, pc, #4	; (adr r2, 800bb34 <USBD_GetDescriptor+0x2c>)
 800bb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb34:	0800bb51 	.word	0x0800bb51
 800bb38:	0800bb69 	.word	0x0800bb69
 800bb3c:	0800bba9 	.word	0x0800bba9
 800bb40:	0800bd7f 	.word	0x0800bd7f
 800bb44:	0800bd7f 	.word	0x0800bd7f
 800bb48:	0800bd1f 	.word	0x0800bd1f
 800bb4c:	0800bd4b 	.word	0x0800bd4b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	7c12      	ldrb	r2, [r2, #16]
 800bb5c:	f107 0108 	add.w	r1, r7, #8
 800bb60:	4610      	mov	r0, r2
 800bb62:	4798      	blx	r3
 800bb64:	60f8      	str	r0, [r7, #12]
      break;
 800bb66:	e112      	b.n	800bd8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	7c1b      	ldrb	r3, [r3, #16]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d10d      	bne.n	800bb8c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb78:	f107 0208 	add.w	r2, r7, #8
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	4798      	blx	r3
 800bb80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	3301      	adds	r3, #1
 800bb86:	2202      	movs	r2, #2
 800bb88:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb8a:	e100      	b.n	800bd8e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb94:	f107 0208 	add.w	r2, r7, #8
 800bb98:	4610      	mov	r0, r2
 800bb9a:	4798      	blx	r3
 800bb9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3301      	adds	r3, #1
 800bba2:	2202      	movs	r2, #2
 800bba4:	701a      	strb	r2, [r3, #0]
      break;
 800bba6:	e0f2      	b.n	800bd8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	885b      	ldrh	r3, [r3, #2]
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	2b05      	cmp	r3, #5
 800bbb0:	f200 80ac 	bhi.w	800bd0c <USBD_GetDescriptor+0x204>
 800bbb4:	a201      	add	r2, pc, #4	; (adr r2, 800bbbc <USBD_GetDescriptor+0xb4>)
 800bbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbba:	bf00      	nop
 800bbbc:	0800bbd5 	.word	0x0800bbd5
 800bbc0:	0800bc09 	.word	0x0800bc09
 800bbc4:	0800bc3d 	.word	0x0800bc3d
 800bbc8:	0800bc71 	.word	0x0800bc71
 800bbcc:	0800bca5 	.word	0x0800bca5
 800bbd0:	0800bcd9 	.word	0x0800bcd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00b      	beq.n	800bbf8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	7c12      	ldrb	r2, [r2, #16]
 800bbec:	f107 0108 	add.w	r1, r7, #8
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	4798      	blx	r3
 800bbf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbf6:	e091      	b.n	800bd1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 facb 	bl	800c196 <USBD_CtlError>
            err++;
 800bc00:	7afb      	ldrb	r3, [r7, #11]
 800bc02:	3301      	adds	r3, #1
 800bc04:	72fb      	strb	r3, [r7, #11]
          break;
 800bc06:	e089      	b.n	800bd1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00b      	beq.n	800bc2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	7c12      	ldrb	r2, [r2, #16]
 800bc20:	f107 0108 	add.w	r1, r7, #8
 800bc24:	4610      	mov	r0, r2
 800bc26:	4798      	blx	r3
 800bc28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc2a:	e077      	b.n	800bd1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 fab1 	bl	800c196 <USBD_CtlError>
            err++;
 800bc34:	7afb      	ldrb	r3, [r7, #11]
 800bc36:	3301      	adds	r3, #1
 800bc38:	72fb      	strb	r3, [r7, #11]
          break;
 800bc3a:	e06f      	b.n	800bd1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00b      	beq.n	800bc60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	7c12      	ldrb	r2, [r2, #16]
 800bc54:	f107 0108 	add.w	r1, r7, #8
 800bc58:	4610      	mov	r0, r2
 800bc5a:	4798      	blx	r3
 800bc5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc5e:	e05d      	b.n	800bd1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc60:	6839      	ldr	r1, [r7, #0]
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 fa97 	bl	800c196 <USBD_CtlError>
            err++;
 800bc68:	7afb      	ldrb	r3, [r7, #11]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc6e:	e055      	b.n	800bd1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc76:	691b      	ldr	r3, [r3, #16]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00b      	beq.n	800bc94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	7c12      	ldrb	r2, [r2, #16]
 800bc88:	f107 0108 	add.w	r1, r7, #8
 800bc8c:	4610      	mov	r0, r2
 800bc8e:	4798      	blx	r3
 800bc90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc92:	e043      	b.n	800bd1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fa7d 	bl	800c196 <USBD_CtlError>
            err++;
 800bc9c:	7afb      	ldrb	r3, [r7, #11]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	72fb      	strb	r3, [r7, #11]
          break;
 800bca2:	e03b      	b.n	800bd1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcaa:	695b      	ldr	r3, [r3, #20]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00b      	beq.n	800bcc8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcb6:	695b      	ldr	r3, [r3, #20]
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	7c12      	ldrb	r2, [r2, #16]
 800bcbc:	f107 0108 	add.w	r1, r7, #8
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	4798      	blx	r3
 800bcc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcc6:	e029      	b.n	800bd1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcc8:	6839      	ldr	r1, [r7, #0]
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 fa63 	bl	800c196 <USBD_CtlError>
            err++;
 800bcd0:	7afb      	ldrb	r3, [r7, #11]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	72fb      	strb	r3, [r7, #11]
          break;
 800bcd6:	e021      	b.n	800bd1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcde:	699b      	ldr	r3, [r3, #24]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00b      	beq.n	800bcfc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	7c12      	ldrb	r2, [r2, #16]
 800bcf0:	f107 0108 	add.w	r1, r7, #8
 800bcf4:	4610      	mov	r0, r2
 800bcf6:	4798      	blx	r3
 800bcf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcfa:	e00f      	b.n	800bd1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcfc:	6839      	ldr	r1, [r7, #0]
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fa49 	bl	800c196 <USBD_CtlError>
            err++;
 800bd04:	7afb      	ldrb	r3, [r7, #11]
 800bd06:	3301      	adds	r3, #1
 800bd08:	72fb      	strb	r3, [r7, #11]
          break;
 800bd0a:	e007      	b.n	800bd1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fa41 	bl	800c196 <USBD_CtlError>
          err++;
 800bd14:	7afb      	ldrb	r3, [r7, #11]
 800bd16:	3301      	adds	r3, #1
 800bd18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bd1a:	bf00      	nop
      }
      break;
 800bd1c:	e037      	b.n	800bd8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	7c1b      	ldrb	r3, [r3, #16]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d109      	bne.n	800bd3a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2e:	f107 0208 	add.w	r2, r7, #8
 800bd32:	4610      	mov	r0, r2
 800bd34:	4798      	blx	r3
 800bd36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd38:	e029      	b.n	800bd8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd3a:	6839      	ldr	r1, [r7, #0]
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 fa2a 	bl	800c196 <USBD_CtlError>
        err++;
 800bd42:	7afb      	ldrb	r3, [r7, #11]
 800bd44:	3301      	adds	r3, #1
 800bd46:	72fb      	strb	r3, [r7, #11]
      break;
 800bd48:	e021      	b.n	800bd8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	7c1b      	ldrb	r3, [r3, #16]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10d      	bne.n	800bd6e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd5a:	f107 0208 	add.w	r2, r7, #8
 800bd5e:	4610      	mov	r0, r2
 800bd60:	4798      	blx	r3
 800bd62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	3301      	adds	r3, #1
 800bd68:	2207      	movs	r2, #7
 800bd6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd6c:	e00f      	b.n	800bd8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd6e:	6839      	ldr	r1, [r7, #0]
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fa10 	bl	800c196 <USBD_CtlError>
        err++;
 800bd76:	7afb      	ldrb	r3, [r7, #11]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	72fb      	strb	r3, [r7, #11]
      break;
 800bd7c:	e007      	b.n	800bd8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bd7e:	6839      	ldr	r1, [r7, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 fa08 	bl	800c196 <USBD_CtlError>
      err++;
 800bd86:	7afb      	ldrb	r3, [r7, #11]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	72fb      	strb	r3, [r7, #11]
      break;
 800bd8c:	bf00      	nop
  }

  if (err != 0U)
 800bd8e:	7afb      	ldrb	r3, [r7, #11]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d11e      	bne.n	800bdd2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	88db      	ldrh	r3, [r3, #6]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d016      	beq.n	800bdca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bd9c:	893b      	ldrh	r3, [r7, #8]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00e      	beq.n	800bdc0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	88da      	ldrh	r2, [r3, #6]
 800bda6:	893b      	ldrh	r3, [r7, #8]
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	bf28      	it	cs
 800bdac:	4613      	movcs	r3, r2
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bdb2:	893b      	ldrh	r3, [r7, #8]
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	68f9      	ldr	r1, [r7, #12]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 fa5d 	bl	800c278 <USBD_CtlSendData>
 800bdbe:	e009      	b.n	800bdd4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 f9e7 	bl	800c196 <USBD_CtlError>
 800bdc8:	e004      	b.n	800bdd4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 faae 	bl	800c32c <USBD_CtlSendStatus>
 800bdd0:	e000      	b.n	800bdd4 <USBD_GetDescriptor+0x2cc>
    return;
 800bdd2:	bf00      	nop
  }
}
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop

0800bddc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	889b      	ldrh	r3, [r3, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d131      	bne.n	800be52 <USBD_SetAddress+0x76>
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	88db      	ldrh	r3, [r3, #6]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d12d      	bne.n	800be52 <USBD_SetAddress+0x76>
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	885b      	ldrh	r3, [r3, #2]
 800bdfa:	2b7f      	cmp	r3, #127	; 0x7f
 800bdfc:	d829      	bhi.n	800be52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	885b      	ldrh	r3, [r3, #2]
 800be02:	b2db      	uxtb	r3, r3
 800be04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b03      	cmp	r3, #3
 800be14:	d104      	bne.n	800be20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800be16:	6839      	ldr	r1, [r7, #0]
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 f9bc 	bl	800c196 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be1e:	e01d      	b.n	800be5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	7bfa      	ldrb	r2, [r7, #15]
 800be24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be28:	7bfb      	ldrb	r3, [r7, #15]
 800be2a:	4619      	mov	r1, r3
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fed5 	bl	800cbdc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fa7a 	bl	800c32c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be38:	7bfb      	ldrb	r3, [r7, #15]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d004      	beq.n	800be48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2202      	movs	r2, #2
 800be42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be46:	e009      	b.n	800be5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be50:	e004      	b.n	800be5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 f99e 	bl	800c196 <USBD_CtlError>
  }
}
 800be5a:	bf00      	nop
 800be5c:	bf00      	nop
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be6e:	2300      	movs	r3, #0
 800be70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	885b      	ldrh	r3, [r3, #2]
 800be76:	b2da      	uxtb	r2, r3
 800be78:	4b4e      	ldr	r3, [pc, #312]	; (800bfb4 <USBD_SetConfig+0x150>)
 800be7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be7c:	4b4d      	ldr	r3, [pc, #308]	; (800bfb4 <USBD_SetConfig+0x150>)
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	2b01      	cmp	r3, #1
 800be82:	d905      	bls.n	800be90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be84:	6839      	ldr	r1, [r7, #0]
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f985 	bl	800c196 <USBD_CtlError>
    return USBD_FAIL;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e08c      	b.n	800bfaa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be96:	b2db      	uxtb	r3, r3
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d002      	beq.n	800bea2 <USBD_SetConfig+0x3e>
 800be9c:	2b03      	cmp	r3, #3
 800be9e:	d029      	beq.n	800bef4 <USBD_SetConfig+0x90>
 800bea0:	e075      	b.n	800bf8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bea2:	4b44      	ldr	r3, [pc, #272]	; (800bfb4 <USBD_SetConfig+0x150>)
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d020      	beq.n	800beec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800beaa:	4b42      	ldr	r3, [pc, #264]	; (800bfb4 <USBD_SetConfig+0x150>)
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	461a      	mov	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800beb4:	4b3f      	ldr	r3, [pc, #252]	; (800bfb4 <USBD_SetConfig+0x150>)
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	4619      	mov	r1, r3
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7fe ffe7 	bl	800ae8e <USBD_SetClassConfig>
 800bec0:	4603      	mov	r3, r0
 800bec2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d008      	beq.n	800bedc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 f962 	bl	800c196 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2202      	movs	r2, #2
 800bed6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800beda:	e065      	b.n	800bfa8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fa25 	bl	800c32c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2203      	movs	r2, #3
 800bee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800beea:	e05d      	b.n	800bfa8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fa1d 	bl	800c32c <USBD_CtlSendStatus>
      break;
 800bef2:	e059      	b.n	800bfa8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bef4:	4b2f      	ldr	r3, [pc, #188]	; (800bfb4 <USBD_SetConfig+0x150>)
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d112      	bne.n	800bf22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2202      	movs	r2, #2
 800bf00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bf04:	4b2b      	ldr	r3, [pc, #172]	; (800bfb4 <USBD_SetConfig+0x150>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	461a      	mov	r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf0e:	4b29      	ldr	r3, [pc, #164]	; (800bfb4 <USBD_SetConfig+0x150>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	4619      	mov	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7fe ffd6 	bl	800aec6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 fa06 	bl	800c32c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf20:	e042      	b.n	800bfa8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bf22:	4b24      	ldr	r3, [pc, #144]	; (800bfb4 <USBD_SetConfig+0x150>)
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d02a      	beq.n	800bf86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	4619      	mov	r1, r3
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7fe ffc4 	bl	800aec6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf3e:	4b1d      	ldr	r3, [pc, #116]	; (800bfb4 <USBD_SetConfig+0x150>)
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	461a      	mov	r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf48:	4b1a      	ldr	r3, [pc, #104]	; (800bfb4 <USBD_SetConfig+0x150>)
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7fe ff9d 	bl	800ae8e <USBD_SetClassConfig>
 800bf54:	4603      	mov	r3, r0
 800bf56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bf58:	7bfb      	ldrb	r3, [r7, #15]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00f      	beq.n	800bf7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bf5e:	6839      	ldr	r1, [r7, #0]
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 f918 	bl	800c196 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7fe ffa9 	bl	800aec6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2202      	movs	r2, #2
 800bf78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf7c:	e014      	b.n	800bfa8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f9d4 	bl	800c32c <USBD_CtlSendStatus>
      break;
 800bf84:	e010      	b.n	800bfa8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 f9d0 	bl	800c32c <USBD_CtlSendStatus>
      break;
 800bf8c:	e00c      	b.n	800bfa8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bf8e:	6839      	ldr	r1, [r7, #0]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 f900 	bl	800c196 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf96:	4b07      	ldr	r3, [pc, #28]	; (800bfb4 <USBD_SetConfig+0x150>)
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f7fe ff92 	bl	800aec6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bfa2:	2303      	movs	r3, #3
 800bfa4:	73fb      	strb	r3, [r7, #15]
      break;
 800bfa6:	bf00      	nop
  }

  return ret;
 800bfa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3710      	adds	r7, #16
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	20000548 	.word	0x20000548

0800bfb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	88db      	ldrh	r3, [r3, #6]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d004      	beq.n	800bfd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bfca:	6839      	ldr	r1, [r7, #0]
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 f8e2 	bl	800c196 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bfd2:	e023      	b.n	800c01c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	dc02      	bgt.n	800bfe6 <USBD_GetConfig+0x2e>
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	dc03      	bgt.n	800bfec <USBD_GetConfig+0x34>
 800bfe4:	e015      	b.n	800c012 <USBD_GetConfig+0x5a>
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d00b      	beq.n	800c002 <USBD_GetConfig+0x4a>
 800bfea:	e012      	b.n	800c012 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	3308      	adds	r3, #8
 800bff6:	2201      	movs	r2, #1
 800bff8:	4619      	mov	r1, r3
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f93c 	bl	800c278 <USBD_CtlSendData>
        break;
 800c000:	e00c      	b.n	800c01c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	3304      	adds	r3, #4
 800c006:	2201      	movs	r2, #1
 800c008:	4619      	mov	r1, r3
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 f934 	bl	800c278 <USBD_CtlSendData>
        break;
 800c010:	e004      	b.n	800c01c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c012:	6839      	ldr	r1, [r7, #0]
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f8be 	bl	800c196 <USBD_CtlError>
        break;
 800c01a:	bf00      	nop
}
 800c01c:	bf00      	nop
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c034:	b2db      	uxtb	r3, r3
 800c036:	3b01      	subs	r3, #1
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d81e      	bhi.n	800c07a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	88db      	ldrh	r3, [r3, #6]
 800c040:	2b02      	cmp	r3, #2
 800c042:	d004      	beq.n	800c04e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 f8a5 	bl	800c196 <USBD_CtlError>
        break;
 800c04c:	e01a      	b.n	800c084 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2201      	movs	r2, #1
 800c052:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d005      	beq.n	800c06a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	f043 0202 	orr.w	r2, r3, #2
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	330c      	adds	r3, #12
 800c06e:	2202      	movs	r2, #2
 800c070:	4619      	mov	r1, r3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f900 	bl	800c278 <USBD_CtlSendData>
      break;
 800c078:	e004      	b.n	800c084 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 f88a 	bl	800c196 <USBD_CtlError>
      break;
 800c082:	bf00      	nop
  }
}
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	885b      	ldrh	r3, [r3, #2]
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d107      	bne.n	800c0ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 f940 	bl	800c32c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c0ac:	e013      	b.n	800c0d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	885b      	ldrh	r3, [r3, #2]
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d10b      	bne.n	800c0ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	889b      	ldrh	r3, [r3, #4]
 800c0ba:	0a1b      	lsrs	r3, r3, #8
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	b2da      	uxtb	r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f930 	bl	800c32c <USBD_CtlSendStatus>
}
 800c0cc:	e003      	b.n	800c0d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c0ce:	6839      	ldr	r1, [r7, #0]
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 f860 	bl	800c196 <USBD_CtlError>
}
 800c0d6:	bf00      	nop
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b082      	sub	sp, #8
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
 800c0e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d80b      	bhi.n	800c10e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	885b      	ldrh	r3, [r3, #2]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d10c      	bne.n	800c118 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 f910 	bl	800c32c <USBD_CtlSendStatus>
      }
      break;
 800c10c:	e004      	b.n	800c118 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 f840 	bl	800c196 <USBD_CtlError>
      break;
 800c116:	e000      	b.n	800c11a <USBD_ClrFeature+0x3c>
      break;
 800c118:	bf00      	nop
  }
}
 800c11a:	bf00      	nop
 800c11c:	3708      	adds	r7, #8
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b084      	sub	sp, #16
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
 800c12a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	781a      	ldrb	r2, [r3, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	3301      	adds	r3, #1
 800c13c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	781a      	ldrb	r2, [r3, #0]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	3301      	adds	r3, #1
 800c14a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f7ff fa41 	bl	800b5d4 <SWAPBYTE>
 800c152:	4603      	mov	r3, r0
 800c154:	461a      	mov	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	3301      	adds	r3, #1
 800c15e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	3301      	adds	r3, #1
 800c164:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c166:	68f8      	ldr	r0, [r7, #12]
 800c168:	f7ff fa34 	bl	800b5d4 <SWAPBYTE>
 800c16c:	4603      	mov	r3, r0
 800c16e:	461a      	mov	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	3301      	adds	r3, #1
 800c178:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3301      	adds	r3, #1
 800c17e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c180:	68f8      	ldr	r0, [r7, #12]
 800c182:	f7ff fa27 	bl	800b5d4 <SWAPBYTE>
 800c186:	4603      	mov	r3, r0
 800c188:	461a      	mov	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	80da      	strh	r2, [r3, #6]
}
 800c18e:	bf00      	nop
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b082      	sub	sp, #8
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1a0:	2180      	movs	r1, #128	; 0x80
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fcb0 	bl	800cb08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 fcac 	bl	800cb08 <USBD_LL_StallEP>
}
 800c1b0:	bf00      	nop
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b086      	sub	sp, #24
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d036      	beq.n	800c23c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c1d2:	6938      	ldr	r0, [r7, #16]
 800c1d4:	f000 f836 	bl	800c244 <USBD_GetLen>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	3301      	adds	r3, #1
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	005b      	lsls	r3, r3, #1
 800c1e0:	b29a      	uxth	r2, r3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c1e6:	7dfb      	ldrb	r3, [r7, #23]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	7812      	ldrb	r2, [r2, #0]
 800c1f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1f2:	7dfb      	ldrb	r3, [r7, #23]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	2203      	movs	r2, #3
 800c200:	701a      	strb	r2, [r3, #0]
  idx++;
 800c202:	7dfb      	ldrb	r3, [r7, #23]
 800c204:	3301      	adds	r3, #1
 800c206:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c208:	e013      	b.n	800c232 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c20a:	7dfb      	ldrb	r3, [r7, #23]
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	4413      	add	r3, r2
 800c210:	693a      	ldr	r2, [r7, #16]
 800c212:	7812      	ldrb	r2, [r2, #0]
 800c214:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	3301      	adds	r3, #1
 800c21a:	613b      	str	r3, [r7, #16]
    idx++;
 800c21c:	7dfb      	ldrb	r3, [r7, #23]
 800c21e:	3301      	adds	r3, #1
 800c220:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c222:	7dfb      	ldrb	r3, [r7, #23]
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	4413      	add	r3, r2
 800c228:	2200      	movs	r2, #0
 800c22a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c22c:	7dfb      	ldrb	r3, [r7, #23]
 800c22e:	3301      	adds	r3, #1
 800c230:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1e7      	bne.n	800c20a <USBD_GetString+0x52>
 800c23a:	e000      	b.n	800c23e <USBD_GetString+0x86>
    return;
 800c23c:	bf00      	nop
  }
}
 800c23e:	3718      	adds	r7, #24
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c254:	e005      	b.n	800c262 <USBD_GetLen+0x1e>
  {
    len++;
 800c256:	7bfb      	ldrb	r3, [r7, #15]
 800c258:	3301      	adds	r3, #1
 800c25a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	3301      	adds	r3, #1
 800c260:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1f5      	bne.n	800c256 <USBD_GetLen+0x12>
  }

  return len;
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3714      	adds	r7, #20
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2202      	movs	r2, #2
 800c288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	2100      	movs	r1, #0
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f000 fcbb 	bl	800cc1a <USBD_LL_Transmit>

  return USBD_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b084      	sub	sp, #16
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	60f8      	str	r0, [r7, #12]
 800c2b6:	60b9      	str	r1, [r7, #8]
 800c2b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	68ba      	ldr	r2, [r7, #8]
 800c2be:	2100      	movs	r1, #0
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f000 fcaa 	bl	800cc1a <USBD_LL_Transmit>

  return USBD_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2203      	movs	r2, #3
 800c2e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f000 fcae 	bl	800cc5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b084      	sub	sp, #16
 800c30e:	af00      	add	r7, sp, #0
 800c310:	60f8      	str	r0, [r7, #12]
 800c312:	60b9      	str	r1, [r7, #8]
 800c314:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	2100      	movs	r1, #0
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f000 fc9d 	bl	800cc5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c322:	2300      	movs	r3, #0
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2204      	movs	r2, #4
 800c338:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c33c:	2300      	movs	r3, #0
 800c33e:	2200      	movs	r2, #0
 800c340:	2100      	movs	r1, #0
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fc69 	bl	800cc1a <USBD_LL_Transmit>

  return USBD_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b082      	sub	sp, #8
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2205      	movs	r2, #5
 800c35e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c362:	2300      	movs	r3, #0
 800c364:	2200      	movs	r2, #0
 800c366:	2100      	movs	r1, #0
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 fc77 	bl	800cc5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c36e:	2300      	movs	r3, #0
}
 800c370:	4618      	mov	r0, r3
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c37c:	2200      	movs	r2, #0
 800c37e:	4912      	ldr	r1, [pc, #72]	; (800c3c8 <MX_USB_DEVICE_Init+0x50>)
 800c380:	4812      	ldr	r0, [pc, #72]	; (800c3cc <MX_USB_DEVICE_Init+0x54>)
 800c382:	f7fe fd07 	bl	800ad94 <USBD_Init>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d001      	beq.n	800c390 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c38c:	f7f5 fb12 	bl	80019b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c390:	490f      	ldr	r1, [pc, #60]	; (800c3d0 <MX_USB_DEVICE_Init+0x58>)
 800c392:	480e      	ldr	r0, [pc, #56]	; (800c3cc <MX_USB_DEVICE_Init+0x54>)
 800c394:	f7fe fd2e 	bl	800adf4 <USBD_RegisterClass>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d001      	beq.n	800c3a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c39e:	f7f5 fb09 	bl	80019b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c3a2:	490c      	ldr	r1, [pc, #48]	; (800c3d4 <MX_USB_DEVICE_Init+0x5c>)
 800c3a4:	4809      	ldr	r0, [pc, #36]	; (800c3cc <MX_USB_DEVICE_Init+0x54>)
 800c3a6:	f7fe fc65 	bl	800ac74 <USBD_CDC_RegisterInterface>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d001      	beq.n	800c3b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c3b0:	f7f5 fb00 	bl	80019b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c3b4:	4805      	ldr	r0, [pc, #20]	; (800c3cc <MX_USB_DEVICE_Init+0x54>)
 800c3b6:	f7fe fd53 	bl	800ae60 <USBD_Start>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d001      	beq.n	800c3c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c3c0:	f7f5 faf8 	bl	80019b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c3c4:	bf00      	nop
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	200000d0 	.word	0x200000d0
 800c3cc:	2000054c 	.word	0x2000054c
 800c3d0:	2000003c 	.word	0x2000003c
 800c3d4:	200000bc 	.word	0x200000bc

0800c3d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c3dc:	2200      	movs	r2, #0
 800c3de:	4905      	ldr	r1, [pc, #20]	; (800c3f4 <CDC_Init_FS+0x1c>)
 800c3e0:	4805      	ldr	r0, [pc, #20]	; (800c3f8 <CDC_Init_FS+0x20>)
 800c3e2:	f7fe fc61 	bl	800aca8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c3e6:	4905      	ldr	r1, [pc, #20]	; (800c3fc <CDC_Init_FS+0x24>)
 800c3e8:	4803      	ldr	r0, [pc, #12]	; (800c3f8 <CDC_Init_FS+0x20>)
 800c3ea:	f7fe fc7f 	bl	800acec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c3ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	20001028 	.word	0x20001028
 800c3f8:	2000054c 	.word	0x2000054c
 800c3fc:	20000828 	.word	0x20000828

0800c400 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c400:	b480      	push	{r7}
 800c402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c404:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c406:	4618      	mov	r0, r3
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	4603      	mov	r3, r0
 800c418:	6039      	str	r1, [r7, #0]
 800c41a:	71fb      	strb	r3, [r7, #7]
 800c41c:	4613      	mov	r3, r2
 800c41e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c420:	79fb      	ldrb	r3, [r7, #7]
 800c422:	2b23      	cmp	r3, #35	; 0x23
 800c424:	d84a      	bhi.n	800c4bc <CDC_Control_FS+0xac>
 800c426:	a201      	add	r2, pc, #4	; (adr r2, 800c42c <CDC_Control_FS+0x1c>)
 800c428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42c:	0800c4bd 	.word	0x0800c4bd
 800c430:	0800c4bd 	.word	0x0800c4bd
 800c434:	0800c4bd 	.word	0x0800c4bd
 800c438:	0800c4bd 	.word	0x0800c4bd
 800c43c:	0800c4bd 	.word	0x0800c4bd
 800c440:	0800c4bd 	.word	0x0800c4bd
 800c444:	0800c4bd 	.word	0x0800c4bd
 800c448:	0800c4bd 	.word	0x0800c4bd
 800c44c:	0800c4bd 	.word	0x0800c4bd
 800c450:	0800c4bd 	.word	0x0800c4bd
 800c454:	0800c4bd 	.word	0x0800c4bd
 800c458:	0800c4bd 	.word	0x0800c4bd
 800c45c:	0800c4bd 	.word	0x0800c4bd
 800c460:	0800c4bd 	.word	0x0800c4bd
 800c464:	0800c4bd 	.word	0x0800c4bd
 800c468:	0800c4bd 	.word	0x0800c4bd
 800c46c:	0800c4bd 	.word	0x0800c4bd
 800c470:	0800c4bd 	.word	0x0800c4bd
 800c474:	0800c4bd 	.word	0x0800c4bd
 800c478:	0800c4bd 	.word	0x0800c4bd
 800c47c:	0800c4bd 	.word	0x0800c4bd
 800c480:	0800c4bd 	.word	0x0800c4bd
 800c484:	0800c4bd 	.word	0x0800c4bd
 800c488:	0800c4bd 	.word	0x0800c4bd
 800c48c:	0800c4bd 	.word	0x0800c4bd
 800c490:	0800c4bd 	.word	0x0800c4bd
 800c494:	0800c4bd 	.word	0x0800c4bd
 800c498:	0800c4bd 	.word	0x0800c4bd
 800c49c:	0800c4bd 	.word	0x0800c4bd
 800c4a0:	0800c4bd 	.word	0x0800c4bd
 800c4a4:	0800c4bd 	.word	0x0800c4bd
 800c4a8:	0800c4bd 	.word	0x0800c4bd
 800c4ac:	0800c4bd 	.word	0x0800c4bd
 800c4b0:	0800c4bd 	.word	0x0800c4bd
 800c4b4:	0800c4bd 	.word	0x0800c4bd
 800c4b8:	0800c4bd 	.word	0x0800c4bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c4bc:	bf00      	nop
  }

  return (USBD_OK);
 800c4be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c4d6:	6879      	ldr	r1, [r7, #4]
 800c4d8:	4805      	ldr	r0, [pc, #20]	; (800c4f0 <CDC_Receive_FS+0x24>)
 800c4da:	f7fe fc07 	bl	800acec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c4de:	4804      	ldr	r0, [pc, #16]	; (800c4f0 <CDC_Receive_FS+0x24>)
 800c4e0:	f7fe fc22 	bl	800ad28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c4e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	2000054c 	.word	0x2000054c

0800c4f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b087      	sub	sp, #28
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	4613      	mov	r3, r2
 800c500:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c502:	2300      	movs	r3, #0
 800c504:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c506:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	371c      	adds	r7, #28
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr
	...

0800c518 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	4603      	mov	r3, r0
 800c520:	6039      	str	r1, [r7, #0]
 800c522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	2212      	movs	r2, #18
 800c528:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c52a:	4b03      	ldr	r3, [pc, #12]	; (800c538 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	200000ec 	.word	0x200000ec

0800c53c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	4603      	mov	r3, r0
 800c544:	6039      	str	r1, [r7, #0]
 800c546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	2204      	movs	r2, #4
 800c54c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c54e:	4b03      	ldr	r3, [pc, #12]	; (800c55c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c550:	4618      	mov	r0, r3
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr
 800c55c:	20000100 	.word	0x20000100

0800c560 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	6039      	str	r1, [r7, #0]
 800c56a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c56c:	79fb      	ldrb	r3, [r7, #7]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d105      	bne.n	800c57e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	4907      	ldr	r1, [pc, #28]	; (800c594 <USBD_FS_ProductStrDescriptor+0x34>)
 800c576:	4808      	ldr	r0, [pc, #32]	; (800c598 <USBD_FS_ProductStrDescriptor+0x38>)
 800c578:	f7ff fe1e 	bl	800c1b8 <USBD_GetString>
 800c57c:	e004      	b.n	800c588 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	4904      	ldr	r1, [pc, #16]	; (800c594 <USBD_FS_ProductStrDescriptor+0x34>)
 800c582:	4805      	ldr	r0, [pc, #20]	; (800c598 <USBD_FS_ProductStrDescriptor+0x38>)
 800c584:	f7ff fe18 	bl	800c1b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c588:	4b02      	ldr	r3, [pc, #8]	; (800c594 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	20001828 	.word	0x20001828
 800c598:	0800f6e0 	.word	0x0800f6e0

0800c59c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	6039      	str	r1, [r7, #0]
 800c5a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c5a8:	683a      	ldr	r2, [r7, #0]
 800c5aa:	4904      	ldr	r1, [pc, #16]	; (800c5bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c5ac:	4804      	ldr	r0, [pc, #16]	; (800c5c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c5ae:	f7ff fe03 	bl	800c1b8 <USBD_GetString>
  return USBD_StrDesc;
 800c5b2:	4b02      	ldr	r3, [pc, #8]	; (800c5bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	20001828 	.word	0x20001828
 800c5c0:	0800f6f8 	.word	0x0800f6f8

0800c5c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	6039      	str	r1, [r7, #0]
 800c5ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	221a      	movs	r2, #26
 800c5d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c5d6:	f000 f843 	bl	800c660 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c5da:	4b02      	ldr	r3, [pc, #8]	; (800c5e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	20000104 	.word	0x20000104

0800c5e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	6039      	str	r1, [r7, #0]
 800c5f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c5f4:	79fb      	ldrb	r3, [r7, #7]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d105      	bne.n	800c606 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	4907      	ldr	r1, [pc, #28]	; (800c61c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5fe:	4808      	ldr	r0, [pc, #32]	; (800c620 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c600:	f7ff fdda 	bl	800c1b8 <USBD_GetString>
 800c604:	e004      	b.n	800c610 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	4904      	ldr	r1, [pc, #16]	; (800c61c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c60a:	4805      	ldr	r0, [pc, #20]	; (800c620 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c60c:	f7ff fdd4 	bl	800c1b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c610:	4b02      	ldr	r3, [pc, #8]	; (800c61c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c612:	4618      	mov	r0, r3
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	20001828 	.word	0x20001828
 800c620:	0800f70c 	.word	0x0800f70c

0800c624 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	4603      	mov	r3, r0
 800c62c:	6039      	str	r1, [r7, #0]
 800c62e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c630:	79fb      	ldrb	r3, [r7, #7]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d105      	bne.n	800c642 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c636:	683a      	ldr	r2, [r7, #0]
 800c638:	4907      	ldr	r1, [pc, #28]	; (800c658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c63a:	4808      	ldr	r0, [pc, #32]	; (800c65c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c63c:	f7ff fdbc 	bl	800c1b8 <USBD_GetString>
 800c640:	e004      	b.n	800c64c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c642:	683a      	ldr	r2, [r7, #0]
 800c644:	4904      	ldr	r1, [pc, #16]	; (800c658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c646:	4805      	ldr	r0, [pc, #20]	; (800c65c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c648:	f7ff fdb6 	bl	800c1b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c64c:	4b02      	ldr	r3, [pc, #8]	; (800c658 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	20001828 	.word	0x20001828
 800c65c:	0800f718 	.word	0x0800f718

0800c660 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c666:	4b0f      	ldr	r3, [pc, #60]	; (800c6a4 <Get_SerialNum+0x44>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c66c:	4b0e      	ldr	r3, [pc, #56]	; (800c6a8 <Get_SerialNum+0x48>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c672:	4b0e      	ldr	r3, [pc, #56]	; (800c6ac <Get_SerialNum+0x4c>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4413      	add	r3, r2
 800c67e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d009      	beq.n	800c69a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c686:	2208      	movs	r2, #8
 800c688:	4909      	ldr	r1, [pc, #36]	; (800c6b0 <Get_SerialNum+0x50>)
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f000 f814 	bl	800c6b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c690:	2204      	movs	r2, #4
 800c692:	4908      	ldr	r1, [pc, #32]	; (800c6b4 <Get_SerialNum+0x54>)
 800c694:	68b8      	ldr	r0, [r7, #8]
 800c696:	f000 f80f 	bl	800c6b8 <IntToUnicode>
  }
}
 800c69a:	bf00      	nop
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	1fff7a10 	.word	0x1fff7a10
 800c6a8:	1fff7a14 	.word	0x1fff7a14
 800c6ac:	1fff7a18 	.word	0x1fff7a18
 800c6b0:	20000106 	.word	0x20000106
 800c6b4:	20000116 	.word	0x20000116

0800c6b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b087      	sub	sp, #28
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	75fb      	strb	r3, [r7, #23]
 800c6ce:	e027      	b.n	800c720 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	0f1b      	lsrs	r3, r3, #28
 800c6d4:	2b09      	cmp	r3, #9
 800c6d6:	d80b      	bhi.n	800c6f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	0f1b      	lsrs	r3, r3, #28
 800c6dc:	b2da      	uxtb	r2, r3
 800c6de:	7dfb      	ldrb	r3, [r7, #23]
 800c6e0:	005b      	lsls	r3, r3, #1
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	440b      	add	r3, r1
 800c6e8:	3230      	adds	r2, #48	; 0x30
 800c6ea:	b2d2      	uxtb	r2, r2
 800c6ec:	701a      	strb	r2, [r3, #0]
 800c6ee:	e00a      	b.n	800c706 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	0f1b      	lsrs	r3, r3, #28
 800c6f4:	b2da      	uxtb	r2, r3
 800c6f6:	7dfb      	ldrb	r3, [r7, #23]
 800c6f8:	005b      	lsls	r3, r3, #1
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	440b      	add	r3, r1
 800c700:	3237      	adds	r2, #55	; 0x37
 800c702:	b2d2      	uxtb	r2, r2
 800c704:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	011b      	lsls	r3, r3, #4
 800c70a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c70c:	7dfb      	ldrb	r3, [r7, #23]
 800c70e:	005b      	lsls	r3, r3, #1
 800c710:	3301      	adds	r3, #1
 800c712:	68ba      	ldr	r2, [r7, #8]
 800c714:	4413      	add	r3, r2
 800c716:	2200      	movs	r2, #0
 800c718:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c71a:	7dfb      	ldrb	r3, [r7, #23]
 800c71c:	3301      	adds	r3, #1
 800c71e:	75fb      	strb	r3, [r7, #23]
 800c720:	7dfa      	ldrb	r2, [r7, #23]
 800c722:	79fb      	ldrb	r3, [r7, #7]
 800c724:	429a      	cmp	r2, r3
 800c726:	d3d3      	bcc.n	800c6d0 <IntToUnicode+0x18>
  }
}
 800c728:	bf00      	nop
 800c72a:	bf00      	nop
 800c72c:	371c      	adds	r7, #28
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr
	...

0800c738 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b08a      	sub	sp, #40	; 0x28
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c740:	f107 0314 	add.w	r3, r7, #20
 800c744:	2200      	movs	r2, #0
 800c746:	601a      	str	r2, [r3, #0]
 800c748:	605a      	str	r2, [r3, #4]
 800c74a:	609a      	str	r2, [r3, #8]
 800c74c:	60da      	str	r2, [r3, #12]
 800c74e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c758:	d13a      	bne.n	800c7d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c75a:	2300      	movs	r3, #0
 800c75c:	613b      	str	r3, [r7, #16]
 800c75e:	4b1e      	ldr	r3, [pc, #120]	; (800c7d8 <HAL_PCD_MspInit+0xa0>)
 800c760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c762:	4a1d      	ldr	r2, [pc, #116]	; (800c7d8 <HAL_PCD_MspInit+0xa0>)
 800c764:	f043 0301 	orr.w	r3, r3, #1
 800c768:	6313      	str	r3, [r2, #48]	; 0x30
 800c76a:	4b1b      	ldr	r3, [pc, #108]	; (800c7d8 <HAL_PCD_MspInit+0xa0>)
 800c76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c76e:	f003 0301 	and.w	r3, r3, #1
 800c772:	613b      	str	r3, [r7, #16]
 800c774:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c776:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c77a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c77c:	2302      	movs	r3, #2
 800c77e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c780:	2300      	movs	r3, #0
 800c782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c784:	2303      	movs	r3, #3
 800c786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c788:	230a      	movs	r3, #10
 800c78a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c78c:	f107 0314 	add.w	r3, r7, #20
 800c790:	4619      	mov	r1, r3
 800c792:	4812      	ldr	r0, [pc, #72]	; (800c7dc <HAL_PCD_MspInit+0xa4>)
 800c794:	f7f6 f9be 	bl	8002b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c798:	4b0f      	ldr	r3, [pc, #60]	; (800c7d8 <HAL_PCD_MspInit+0xa0>)
 800c79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c79c:	4a0e      	ldr	r2, [pc, #56]	; (800c7d8 <HAL_PCD_MspInit+0xa0>)
 800c79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7a2:	6353      	str	r3, [r2, #52]	; 0x34
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	60fb      	str	r3, [r7, #12]
 800c7a8:	4b0b      	ldr	r3, [pc, #44]	; (800c7d8 <HAL_PCD_MspInit+0xa0>)
 800c7aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ac:	4a0a      	ldr	r2, [pc, #40]	; (800c7d8 <HAL_PCD_MspInit+0xa0>)
 800c7ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c7b2:	6453      	str	r3, [r2, #68]	; 0x44
 800c7b4:	4b08      	ldr	r3, [pc, #32]	; (800c7d8 <HAL_PCD_MspInit+0xa0>)
 800c7b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7bc:	60fb      	str	r3, [r7, #12]
 800c7be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	2043      	movs	r0, #67	; 0x43
 800c7c6:	f7f6 f93e 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c7ca:	2043      	movs	r0, #67	; 0x43
 800c7cc:	f7f6 f957 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c7d0:	bf00      	nop
 800c7d2:	3728      	adds	r7, #40	; 0x28
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	40023800 	.word	0x40023800
 800c7dc:	40020000 	.word	0x40020000

0800c7e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	f7fe fb7f 	bl	800aefa <USBD_LL_SetupStage>
}
 800c7fc:	bf00      	nop
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c816:	78fa      	ldrb	r2, [r7, #3]
 800c818:	6879      	ldr	r1, [r7, #4]
 800c81a:	4613      	mov	r3, r2
 800c81c:	00db      	lsls	r3, r3, #3
 800c81e:	4413      	add	r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	440b      	add	r3, r1
 800c824:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	78fb      	ldrb	r3, [r7, #3]
 800c82c:	4619      	mov	r1, r3
 800c82e:	f7fe fbb9 	bl	800afa4 <USBD_LL_DataOutStage>
}
 800c832:	bf00      	nop
 800c834:	3708      	adds	r7, #8
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b082      	sub	sp, #8
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
 800c842:	460b      	mov	r3, r1
 800c844:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c84c:	78fa      	ldrb	r2, [r7, #3]
 800c84e:	6879      	ldr	r1, [r7, #4]
 800c850:	4613      	mov	r3, r2
 800c852:	00db      	lsls	r3, r3, #3
 800c854:	4413      	add	r3, r2
 800c856:	009b      	lsls	r3, r3, #2
 800c858:	440b      	add	r3, r1
 800c85a:	334c      	adds	r3, #76	; 0x4c
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	78fb      	ldrb	r3, [r7, #3]
 800c860:	4619      	mov	r1, r3
 800c862:	f7fe fc52 	bl	800b10a <USBD_LL_DataInStage>
}
 800c866:	bf00      	nop
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b082      	sub	sp, #8
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fe fd86 	bl	800b38e <USBD_LL_SOF>
}
 800c882:	bf00      	nop
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b084      	sub	sp, #16
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c892:	2301      	movs	r3, #1
 800c894:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d001      	beq.n	800c8a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c89e:	f7f5 f889 	bl	80019b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c8a8:	7bfa      	ldrb	r2, [r7, #15]
 800c8aa:	4611      	mov	r1, r2
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fe fd30 	bl	800b312 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7fe fcd8 	bl	800b26e <USBD_LL_Reset>
}
 800c8be:	bf00      	nop
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
	...

0800c8c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fe fd2b 	bl	800b332 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	6812      	ldr	r2, [r2, #0]
 800c8ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c8ee:	f043 0301 	orr.w	r3, r3, #1
 800c8f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6a1b      	ldr	r3, [r3, #32]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d005      	beq.n	800c908 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8fc:	4b04      	ldr	r3, [pc, #16]	; (800c910 <HAL_PCD_SuspendCallback+0x48>)
 800c8fe:	691b      	ldr	r3, [r3, #16]
 800c900:	4a03      	ldr	r2, [pc, #12]	; (800c910 <HAL_PCD_SuspendCallback+0x48>)
 800c902:	f043 0306 	orr.w	r3, r3, #6
 800c906:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c908:	bf00      	nop
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	e000ed00 	.word	0xe000ed00

0800c914 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c922:	4618      	mov	r0, r3
 800c924:	f7fe fd1b 	bl	800b35e <USBD_LL_Resume>
}
 800c928:	bf00      	nop
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	460b      	mov	r3, r1
 800c93a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c942:	78fa      	ldrb	r2, [r7, #3]
 800c944:	4611      	mov	r1, r2
 800c946:	4618      	mov	r0, r3
 800c948:	f7fe fd73 	bl	800b432 <USBD_LL_IsoOUTIncomplete>
}
 800c94c:	bf00      	nop
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	460b      	mov	r3, r1
 800c95e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c966:	78fa      	ldrb	r2, [r7, #3]
 800c968:	4611      	mov	r1, r2
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fe fd2f 	bl	800b3ce <USBD_LL_IsoINIncomplete>
}
 800c970:	bf00      	nop
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c986:	4618      	mov	r0, r3
 800c988:	f7fe fd85 	bl	800b496 <USBD_LL_DevConnected>
}
 800c98c:	bf00      	nop
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fe fd82 	bl	800b4ac <USBD_LL_DevDisconnected>
}
 800c9a8:	bf00      	nop
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d13c      	bne.n	800ca3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c9c0:	4a20      	ldr	r2, [pc, #128]	; (800ca44 <USBD_LL_Init+0x94>)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4a1e      	ldr	r2, [pc, #120]	; (800ca44 <USBD_LL_Init+0x94>)
 800c9cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c9d0:	4b1c      	ldr	r3, [pc, #112]	; (800ca44 <USBD_LL_Init+0x94>)
 800c9d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c9d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c9d8:	4b1a      	ldr	r3, [pc, #104]	; (800ca44 <USBD_LL_Init+0x94>)
 800c9da:	2204      	movs	r2, #4
 800c9dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c9de:	4b19      	ldr	r3, [pc, #100]	; (800ca44 <USBD_LL_Init+0x94>)
 800c9e0:	2202      	movs	r2, #2
 800c9e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c9e4:	4b17      	ldr	r3, [pc, #92]	; (800ca44 <USBD_LL_Init+0x94>)
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c9ea:	4b16      	ldr	r3, [pc, #88]	; (800ca44 <USBD_LL_Init+0x94>)
 800c9ec:	2202      	movs	r2, #2
 800c9ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c9f0:	4b14      	ldr	r3, [pc, #80]	; (800ca44 <USBD_LL_Init+0x94>)
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c9f6:	4b13      	ldr	r3, [pc, #76]	; (800ca44 <USBD_LL_Init+0x94>)
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c9fc:	4b11      	ldr	r3, [pc, #68]	; (800ca44 <USBD_LL_Init+0x94>)
 800c9fe:	2200      	movs	r2, #0
 800ca00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ca02:	4b10      	ldr	r3, [pc, #64]	; (800ca44 <USBD_LL_Init+0x94>)
 800ca04:	2200      	movs	r2, #0
 800ca06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ca08:	4b0e      	ldr	r3, [pc, #56]	; (800ca44 <USBD_LL_Init+0x94>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ca0e:	480d      	ldr	r0, [pc, #52]	; (800ca44 <USBD_LL_Init+0x94>)
 800ca10:	f7f8 f8ed 	bl	8004bee <HAL_PCD_Init>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d001      	beq.n	800ca1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ca1a:	f7f4 ffcb 	bl	80019b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ca1e:	2180      	movs	r1, #128	; 0x80
 800ca20:	4808      	ldr	r0, [pc, #32]	; (800ca44 <USBD_LL_Init+0x94>)
 800ca22:	f7f9 fb44 	bl	80060ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ca26:	2240      	movs	r2, #64	; 0x40
 800ca28:	2100      	movs	r1, #0
 800ca2a:	4806      	ldr	r0, [pc, #24]	; (800ca44 <USBD_LL_Init+0x94>)
 800ca2c:	f7f9 faf8 	bl	8006020 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ca30:	2280      	movs	r2, #128	; 0x80
 800ca32:	2101      	movs	r1, #1
 800ca34:	4803      	ldr	r0, [pc, #12]	; (800ca44 <USBD_LL_Init+0x94>)
 800ca36:	f7f9 faf3 	bl	8006020 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ca3a:	2300      	movs	r3, #0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	20001a28 	.word	0x20001a28

0800ca48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca50:	2300      	movs	r3, #0
 800ca52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca54:	2300      	movs	r3, #0
 800ca56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7f8 f9e2 	bl	8004e28 <HAL_PCD_Start>
 800ca64:	4603      	mov	r3, r0
 800ca66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca68:	7bfb      	ldrb	r3, [r7, #15]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f000 f942 	bl	800ccf4 <USBD_Get_USB_Status>
 800ca70:	4603      	mov	r3, r0
 800ca72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b084      	sub	sp, #16
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	4608      	mov	r0, r1
 800ca88:	4611      	mov	r1, r2
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	70fb      	strb	r3, [r7, #3]
 800ca90:	460b      	mov	r3, r1
 800ca92:	70bb      	strb	r3, [r7, #2]
 800ca94:	4613      	mov	r3, r2
 800ca96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800caa6:	78bb      	ldrb	r3, [r7, #2]
 800caa8:	883a      	ldrh	r2, [r7, #0]
 800caaa:	78f9      	ldrb	r1, [r7, #3]
 800caac:	f7f8 feb3 	bl	8005816 <HAL_PCD_EP_Open>
 800cab0:	4603      	mov	r3, r0
 800cab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cab4:	7bfb      	ldrb	r3, [r7, #15]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f000 f91c 	bl	800ccf4 <USBD_Get_USB_Status>
 800cabc:	4603      	mov	r3, r0
 800cabe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cac0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b084      	sub	sp, #16
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
 800cad2:	460b      	mov	r3, r1
 800cad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cada:	2300      	movs	r3, #0
 800cadc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cae4:	78fa      	ldrb	r2, [r7, #3]
 800cae6:	4611      	mov	r1, r2
 800cae8:	4618      	mov	r0, r3
 800caea:	f7f8 fefc 	bl	80058e6 <HAL_PCD_EP_Close>
 800caee:	4603      	mov	r3, r0
 800caf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caf2:	7bfb      	ldrb	r3, [r7, #15]
 800caf4:	4618      	mov	r0, r3
 800caf6:	f000 f8fd 	bl	800ccf4 <USBD_Get_USB_Status>
 800cafa:	4603      	mov	r3, r0
 800cafc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cafe:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	460b      	mov	r3, r1
 800cb12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb14:	2300      	movs	r3, #0
 800cb16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb22:	78fa      	ldrb	r2, [r7, #3]
 800cb24:	4611      	mov	r1, r2
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7f8 ffd4 	bl	8005ad4 <HAL_PCD_EP_SetStall>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb30:	7bfb      	ldrb	r3, [r7, #15]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f000 f8de 	bl	800ccf4 <USBD_Get_USB_Status>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b084      	sub	sp, #16
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
 800cb4e:	460b      	mov	r3, r1
 800cb50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb52:	2300      	movs	r3, #0
 800cb54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb56:	2300      	movs	r3, #0
 800cb58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb60:	78fa      	ldrb	r2, [r7, #3]
 800cb62:	4611      	mov	r1, r2
 800cb64:	4618      	mov	r0, r3
 800cb66:	f7f9 f819 	bl	8005b9c <HAL_PCD_EP_ClrStall>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f000 f8bf 	bl	800ccf4 <USBD_Get_USB_Status>
 800cb76:	4603      	mov	r3, r0
 800cb78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cb98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	da0b      	bge.n	800cbb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cba0:	78fb      	ldrb	r3, [r7, #3]
 800cba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cba6:	68f9      	ldr	r1, [r7, #12]
 800cba8:	4613      	mov	r3, r2
 800cbaa:	00db      	lsls	r3, r3, #3
 800cbac:	4413      	add	r3, r2
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	440b      	add	r3, r1
 800cbb2:	333e      	adds	r3, #62	; 0x3e
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	e00b      	b.n	800cbd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cbb8:	78fb      	ldrb	r3, [r7, #3]
 800cbba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbbe:	68f9      	ldr	r1, [r7, #12]
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	00db      	lsls	r3, r3, #3
 800cbc4:	4413      	add	r3, r2
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	440b      	add	r3, r1
 800cbca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800cbce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3714      	adds	r7, #20
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbec:	2300      	movs	r3, #0
 800cbee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbf6:	78fa      	ldrb	r2, [r7, #3]
 800cbf8:	4611      	mov	r1, r2
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7f8 fde6 	bl	80057cc <HAL_PCD_SetAddress>
 800cc00:	4603      	mov	r3, r0
 800cc02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc04:	7bfb      	ldrb	r3, [r7, #15]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f000 f874 	bl	800ccf4 <USBD_Get_USB_Status>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc10:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b086      	sub	sp, #24
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	60f8      	str	r0, [r7, #12]
 800cc22:	607a      	str	r2, [r7, #4]
 800cc24:	603b      	str	r3, [r7, #0]
 800cc26:	460b      	mov	r3, r1
 800cc28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cc38:	7af9      	ldrb	r1, [r7, #11]
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	f7f8 feff 	bl	8005a40 <HAL_PCD_EP_Transmit>
 800cc42:	4603      	mov	r3, r0
 800cc44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc46:	7dfb      	ldrb	r3, [r7, #23]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f000 f853 	bl	800ccf4 <USBD_Get_USB_Status>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc52:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3718      	adds	r7, #24
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b086      	sub	sp, #24
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	607a      	str	r2, [r7, #4]
 800cc66:	603b      	str	r3, [r7, #0]
 800cc68:	460b      	mov	r3, r1
 800cc6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc70:	2300      	movs	r3, #0
 800cc72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cc7a:	7af9      	ldrb	r1, [r7, #11]
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	f7f8 fe7b 	bl	800597a <HAL_PCD_EP_Receive>
 800cc84:	4603      	mov	r3, r0
 800cc86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc88:	7dfb      	ldrb	r3, [r7, #23]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f000 f832 	bl	800ccf4 <USBD_Get_USB_Status>
 800cc90:	4603      	mov	r3, r0
 800cc92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc94:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b082      	sub	sp, #8
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
 800cca6:	460b      	mov	r3, r1
 800cca8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccb0:	78fa      	ldrb	r2, [r7, #3]
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7f8 feab 	bl	8005a10 <HAL_PCD_EP_GetRxCount>
 800ccba:	4603      	mov	r3, r0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cccc:	4b03      	ldr	r3, [pc, #12]	; (800ccdc <USBD_static_malloc+0x18>)
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	20001f34 	.word	0x20001f34

0800cce0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b083      	sub	sp, #12
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]

}
 800cce8:	bf00      	nop
 800ccea:	370c      	adds	r7, #12
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cd02:	79fb      	ldrb	r3, [r7, #7]
 800cd04:	2b03      	cmp	r3, #3
 800cd06:	d817      	bhi.n	800cd38 <USBD_Get_USB_Status+0x44>
 800cd08:	a201      	add	r2, pc, #4	; (adr r2, 800cd10 <USBD_Get_USB_Status+0x1c>)
 800cd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd0e:	bf00      	nop
 800cd10:	0800cd21 	.word	0x0800cd21
 800cd14:	0800cd27 	.word	0x0800cd27
 800cd18:	0800cd2d 	.word	0x0800cd2d
 800cd1c:	0800cd33 	.word	0x0800cd33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cd20:	2300      	movs	r3, #0
 800cd22:	73fb      	strb	r3, [r7, #15]
    break;
 800cd24:	e00b      	b.n	800cd3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd26:	2303      	movs	r3, #3
 800cd28:	73fb      	strb	r3, [r7, #15]
    break;
 800cd2a:	e008      	b.n	800cd3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd30:	e005      	b.n	800cd3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd32:	2303      	movs	r3, #3
 800cd34:	73fb      	strb	r3, [r7, #15]
    break;
 800cd36:	e002      	b.n	800cd3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cd38:	2303      	movs	r3, #3
 800cd3a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd3c:	bf00      	nop
  }
  return usb_status;
 800cd3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3714      	adds	r7, #20
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <__cvt>:
 800cd4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd50:	ec55 4b10 	vmov	r4, r5, d0
 800cd54:	2d00      	cmp	r5, #0
 800cd56:	460e      	mov	r6, r1
 800cd58:	4619      	mov	r1, r3
 800cd5a:	462b      	mov	r3, r5
 800cd5c:	bfbb      	ittet	lt
 800cd5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cd62:	461d      	movlt	r5, r3
 800cd64:	2300      	movge	r3, #0
 800cd66:	232d      	movlt	r3, #45	; 0x2d
 800cd68:	700b      	strb	r3, [r1, #0]
 800cd6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cd70:	4691      	mov	r9, r2
 800cd72:	f023 0820 	bic.w	r8, r3, #32
 800cd76:	bfbc      	itt	lt
 800cd78:	4622      	movlt	r2, r4
 800cd7a:	4614      	movlt	r4, r2
 800cd7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd80:	d005      	beq.n	800cd8e <__cvt+0x42>
 800cd82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cd86:	d100      	bne.n	800cd8a <__cvt+0x3e>
 800cd88:	3601      	adds	r6, #1
 800cd8a:	2102      	movs	r1, #2
 800cd8c:	e000      	b.n	800cd90 <__cvt+0x44>
 800cd8e:	2103      	movs	r1, #3
 800cd90:	ab03      	add	r3, sp, #12
 800cd92:	9301      	str	r3, [sp, #4]
 800cd94:	ab02      	add	r3, sp, #8
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	ec45 4b10 	vmov	d0, r4, r5
 800cd9c:	4653      	mov	r3, sl
 800cd9e:	4632      	mov	r2, r6
 800cda0:	f000 fe4a 	bl	800da38 <_dtoa_r>
 800cda4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cda8:	4607      	mov	r7, r0
 800cdaa:	d102      	bne.n	800cdb2 <__cvt+0x66>
 800cdac:	f019 0f01 	tst.w	r9, #1
 800cdb0:	d022      	beq.n	800cdf8 <__cvt+0xac>
 800cdb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cdb6:	eb07 0906 	add.w	r9, r7, r6
 800cdba:	d110      	bne.n	800cdde <__cvt+0x92>
 800cdbc:	783b      	ldrb	r3, [r7, #0]
 800cdbe:	2b30      	cmp	r3, #48	; 0x30
 800cdc0:	d10a      	bne.n	800cdd8 <__cvt+0x8c>
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	4629      	mov	r1, r5
 800cdca:	f7f3 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 800cdce:	b918      	cbnz	r0, 800cdd8 <__cvt+0x8c>
 800cdd0:	f1c6 0601 	rsb	r6, r6, #1
 800cdd4:	f8ca 6000 	str.w	r6, [sl]
 800cdd8:	f8da 3000 	ldr.w	r3, [sl]
 800cddc:	4499      	add	r9, r3
 800cdde:	2200      	movs	r2, #0
 800cde0:	2300      	movs	r3, #0
 800cde2:	4620      	mov	r0, r4
 800cde4:	4629      	mov	r1, r5
 800cde6:	f7f3 fe77 	bl	8000ad8 <__aeabi_dcmpeq>
 800cdea:	b108      	cbz	r0, 800cdf0 <__cvt+0xa4>
 800cdec:	f8cd 900c 	str.w	r9, [sp, #12]
 800cdf0:	2230      	movs	r2, #48	; 0x30
 800cdf2:	9b03      	ldr	r3, [sp, #12]
 800cdf4:	454b      	cmp	r3, r9
 800cdf6:	d307      	bcc.n	800ce08 <__cvt+0xbc>
 800cdf8:	9b03      	ldr	r3, [sp, #12]
 800cdfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdfc:	1bdb      	subs	r3, r3, r7
 800cdfe:	4638      	mov	r0, r7
 800ce00:	6013      	str	r3, [r2, #0]
 800ce02:	b004      	add	sp, #16
 800ce04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce08:	1c59      	adds	r1, r3, #1
 800ce0a:	9103      	str	r1, [sp, #12]
 800ce0c:	701a      	strb	r2, [r3, #0]
 800ce0e:	e7f0      	b.n	800cdf2 <__cvt+0xa6>

0800ce10 <__exponent>:
 800ce10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce12:	4603      	mov	r3, r0
 800ce14:	2900      	cmp	r1, #0
 800ce16:	bfb8      	it	lt
 800ce18:	4249      	neglt	r1, r1
 800ce1a:	f803 2b02 	strb.w	r2, [r3], #2
 800ce1e:	bfb4      	ite	lt
 800ce20:	222d      	movlt	r2, #45	; 0x2d
 800ce22:	222b      	movge	r2, #43	; 0x2b
 800ce24:	2909      	cmp	r1, #9
 800ce26:	7042      	strb	r2, [r0, #1]
 800ce28:	dd2a      	ble.n	800ce80 <__exponent+0x70>
 800ce2a:	f10d 0207 	add.w	r2, sp, #7
 800ce2e:	4617      	mov	r7, r2
 800ce30:	260a      	movs	r6, #10
 800ce32:	4694      	mov	ip, r2
 800ce34:	fb91 f5f6 	sdiv	r5, r1, r6
 800ce38:	fb06 1415 	mls	r4, r6, r5, r1
 800ce3c:	3430      	adds	r4, #48	; 0x30
 800ce3e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ce42:	460c      	mov	r4, r1
 800ce44:	2c63      	cmp	r4, #99	; 0x63
 800ce46:	f102 32ff 	add.w	r2, r2, #4294967295
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	dcf1      	bgt.n	800ce32 <__exponent+0x22>
 800ce4e:	3130      	adds	r1, #48	; 0x30
 800ce50:	f1ac 0402 	sub.w	r4, ip, #2
 800ce54:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ce58:	1c41      	adds	r1, r0, #1
 800ce5a:	4622      	mov	r2, r4
 800ce5c:	42ba      	cmp	r2, r7
 800ce5e:	d30a      	bcc.n	800ce76 <__exponent+0x66>
 800ce60:	f10d 0209 	add.w	r2, sp, #9
 800ce64:	eba2 020c 	sub.w	r2, r2, ip
 800ce68:	42bc      	cmp	r4, r7
 800ce6a:	bf88      	it	hi
 800ce6c:	2200      	movhi	r2, #0
 800ce6e:	4413      	add	r3, r2
 800ce70:	1a18      	subs	r0, r3, r0
 800ce72:	b003      	add	sp, #12
 800ce74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce76:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ce7a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ce7e:	e7ed      	b.n	800ce5c <__exponent+0x4c>
 800ce80:	2330      	movs	r3, #48	; 0x30
 800ce82:	3130      	adds	r1, #48	; 0x30
 800ce84:	7083      	strb	r3, [r0, #2]
 800ce86:	70c1      	strb	r1, [r0, #3]
 800ce88:	1d03      	adds	r3, r0, #4
 800ce8a:	e7f1      	b.n	800ce70 <__exponent+0x60>

0800ce8c <_printf_float>:
 800ce8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce90:	ed2d 8b02 	vpush	{d8}
 800ce94:	b08d      	sub	sp, #52	; 0x34
 800ce96:	460c      	mov	r4, r1
 800ce98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ce9c:	4616      	mov	r6, r2
 800ce9e:	461f      	mov	r7, r3
 800cea0:	4605      	mov	r5, r0
 800cea2:	f000 fcc7 	bl	800d834 <_localeconv_r>
 800cea6:	f8d0 a000 	ldr.w	sl, [r0]
 800ceaa:	4650      	mov	r0, sl
 800ceac:	f7f3 f9e8 	bl	8000280 <strlen>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	930a      	str	r3, [sp, #40]	; 0x28
 800ceb4:	6823      	ldr	r3, [r4, #0]
 800ceb6:	9305      	str	r3, [sp, #20]
 800ceb8:	f8d8 3000 	ldr.w	r3, [r8]
 800cebc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cec0:	3307      	adds	r3, #7
 800cec2:	f023 0307 	bic.w	r3, r3, #7
 800cec6:	f103 0208 	add.w	r2, r3, #8
 800ceca:	f8c8 2000 	str.w	r2, [r8]
 800cece:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ced2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ced6:	9307      	str	r3, [sp, #28]
 800ced8:	f8cd 8018 	str.w	r8, [sp, #24]
 800cedc:	ee08 0a10 	vmov	s16, r0
 800cee0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cee4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cee8:	4b9e      	ldr	r3, [pc, #632]	; (800d164 <_printf_float+0x2d8>)
 800ceea:	f04f 32ff 	mov.w	r2, #4294967295
 800ceee:	f7f3 fe25 	bl	8000b3c <__aeabi_dcmpun>
 800cef2:	bb88      	cbnz	r0, 800cf58 <_printf_float+0xcc>
 800cef4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cef8:	4b9a      	ldr	r3, [pc, #616]	; (800d164 <_printf_float+0x2d8>)
 800cefa:	f04f 32ff 	mov.w	r2, #4294967295
 800cefe:	f7f3 fdff 	bl	8000b00 <__aeabi_dcmple>
 800cf02:	bb48      	cbnz	r0, 800cf58 <_printf_float+0xcc>
 800cf04:	2200      	movs	r2, #0
 800cf06:	2300      	movs	r3, #0
 800cf08:	4640      	mov	r0, r8
 800cf0a:	4649      	mov	r1, r9
 800cf0c:	f7f3 fdee 	bl	8000aec <__aeabi_dcmplt>
 800cf10:	b110      	cbz	r0, 800cf18 <_printf_float+0x8c>
 800cf12:	232d      	movs	r3, #45	; 0x2d
 800cf14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf18:	4a93      	ldr	r2, [pc, #588]	; (800d168 <_printf_float+0x2dc>)
 800cf1a:	4b94      	ldr	r3, [pc, #592]	; (800d16c <_printf_float+0x2e0>)
 800cf1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cf20:	bf94      	ite	ls
 800cf22:	4690      	movls	r8, r2
 800cf24:	4698      	movhi	r8, r3
 800cf26:	2303      	movs	r3, #3
 800cf28:	6123      	str	r3, [r4, #16]
 800cf2a:	9b05      	ldr	r3, [sp, #20]
 800cf2c:	f023 0304 	bic.w	r3, r3, #4
 800cf30:	6023      	str	r3, [r4, #0]
 800cf32:	f04f 0900 	mov.w	r9, #0
 800cf36:	9700      	str	r7, [sp, #0]
 800cf38:	4633      	mov	r3, r6
 800cf3a:	aa0b      	add	r2, sp, #44	; 0x2c
 800cf3c:	4621      	mov	r1, r4
 800cf3e:	4628      	mov	r0, r5
 800cf40:	f000 f9da 	bl	800d2f8 <_printf_common>
 800cf44:	3001      	adds	r0, #1
 800cf46:	f040 8090 	bne.w	800d06a <_printf_float+0x1de>
 800cf4a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf4e:	b00d      	add	sp, #52	; 0x34
 800cf50:	ecbd 8b02 	vpop	{d8}
 800cf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf58:	4642      	mov	r2, r8
 800cf5a:	464b      	mov	r3, r9
 800cf5c:	4640      	mov	r0, r8
 800cf5e:	4649      	mov	r1, r9
 800cf60:	f7f3 fdec 	bl	8000b3c <__aeabi_dcmpun>
 800cf64:	b140      	cbz	r0, 800cf78 <_printf_float+0xec>
 800cf66:	464b      	mov	r3, r9
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	bfbc      	itt	lt
 800cf6c:	232d      	movlt	r3, #45	; 0x2d
 800cf6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cf72:	4a7f      	ldr	r2, [pc, #508]	; (800d170 <_printf_float+0x2e4>)
 800cf74:	4b7f      	ldr	r3, [pc, #508]	; (800d174 <_printf_float+0x2e8>)
 800cf76:	e7d1      	b.n	800cf1c <_printf_float+0x90>
 800cf78:	6863      	ldr	r3, [r4, #4]
 800cf7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cf7e:	9206      	str	r2, [sp, #24]
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	d13f      	bne.n	800d004 <_printf_float+0x178>
 800cf84:	2306      	movs	r3, #6
 800cf86:	6063      	str	r3, [r4, #4]
 800cf88:	9b05      	ldr	r3, [sp, #20]
 800cf8a:	6861      	ldr	r1, [r4, #4]
 800cf8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cf90:	2300      	movs	r3, #0
 800cf92:	9303      	str	r3, [sp, #12]
 800cf94:	ab0a      	add	r3, sp, #40	; 0x28
 800cf96:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cf9a:	ab09      	add	r3, sp, #36	; 0x24
 800cf9c:	ec49 8b10 	vmov	d0, r8, r9
 800cfa0:	9300      	str	r3, [sp, #0]
 800cfa2:	6022      	str	r2, [r4, #0]
 800cfa4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f7ff fecf 	bl	800cd4c <__cvt>
 800cfae:	9b06      	ldr	r3, [sp, #24]
 800cfb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfb2:	2b47      	cmp	r3, #71	; 0x47
 800cfb4:	4680      	mov	r8, r0
 800cfb6:	d108      	bne.n	800cfca <_printf_float+0x13e>
 800cfb8:	1cc8      	adds	r0, r1, #3
 800cfba:	db02      	blt.n	800cfc2 <_printf_float+0x136>
 800cfbc:	6863      	ldr	r3, [r4, #4]
 800cfbe:	4299      	cmp	r1, r3
 800cfc0:	dd41      	ble.n	800d046 <_printf_float+0x1ba>
 800cfc2:	f1ab 0302 	sub.w	r3, fp, #2
 800cfc6:	fa5f fb83 	uxtb.w	fp, r3
 800cfca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cfce:	d820      	bhi.n	800d012 <_printf_float+0x186>
 800cfd0:	3901      	subs	r1, #1
 800cfd2:	465a      	mov	r2, fp
 800cfd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cfd8:	9109      	str	r1, [sp, #36]	; 0x24
 800cfda:	f7ff ff19 	bl	800ce10 <__exponent>
 800cfde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfe0:	1813      	adds	r3, r2, r0
 800cfe2:	2a01      	cmp	r2, #1
 800cfe4:	4681      	mov	r9, r0
 800cfe6:	6123      	str	r3, [r4, #16]
 800cfe8:	dc02      	bgt.n	800cff0 <_printf_float+0x164>
 800cfea:	6822      	ldr	r2, [r4, #0]
 800cfec:	07d2      	lsls	r2, r2, #31
 800cfee:	d501      	bpl.n	800cff4 <_printf_float+0x168>
 800cff0:	3301      	adds	r3, #1
 800cff2:	6123      	str	r3, [r4, #16]
 800cff4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d09c      	beq.n	800cf36 <_printf_float+0xaa>
 800cffc:	232d      	movs	r3, #45	; 0x2d
 800cffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d002:	e798      	b.n	800cf36 <_printf_float+0xaa>
 800d004:	9a06      	ldr	r2, [sp, #24]
 800d006:	2a47      	cmp	r2, #71	; 0x47
 800d008:	d1be      	bne.n	800cf88 <_printf_float+0xfc>
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d1bc      	bne.n	800cf88 <_printf_float+0xfc>
 800d00e:	2301      	movs	r3, #1
 800d010:	e7b9      	b.n	800cf86 <_printf_float+0xfa>
 800d012:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d016:	d118      	bne.n	800d04a <_printf_float+0x1be>
 800d018:	2900      	cmp	r1, #0
 800d01a:	6863      	ldr	r3, [r4, #4]
 800d01c:	dd0b      	ble.n	800d036 <_printf_float+0x1aa>
 800d01e:	6121      	str	r1, [r4, #16]
 800d020:	b913      	cbnz	r3, 800d028 <_printf_float+0x19c>
 800d022:	6822      	ldr	r2, [r4, #0]
 800d024:	07d0      	lsls	r0, r2, #31
 800d026:	d502      	bpl.n	800d02e <_printf_float+0x1a2>
 800d028:	3301      	adds	r3, #1
 800d02a:	440b      	add	r3, r1
 800d02c:	6123      	str	r3, [r4, #16]
 800d02e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d030:	f04f 0900 	mov.w	r9, #0
 800d034:	e7de      	b.n	800cff4 <_printf_float+0x168>
 800d036:	b913      	cbnz	r3, 800d03e <_printf_float+0x1b2>
 800d038:	6822      	ldr	r2, [r4, #0]
 800d03a:	07d2      	lsls	r2, r2, #31
 800d03c:	d501      	bpl.n	800d042 <_printf_float+0x1b6>
 800d03e:	3302      	adds	r3, #2
 800d040:	e7f4      	b.n	800d02c <_printf_float+0x1a0>
 800d042:	2301      	movs	r3, #1
 800d044:	e7f2      	b.n	800d02c <_printf_float+0x1a0>
 800d046:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d04c:	4299      	cmp	r1, r3
 800d04e:	db05      	blt.n	800d05c <_printf_float+0x1d0>
 800d050:	6823      	ldr	r3, [r4, #0]
 800d052:	6121      	str	r1, [r4, #16]
 800d054:	07d8      	lsls	r0, r3, #31
 800d056:	d5ea      	bpl.n	800d02e <_printf_float+0x1a2>
 800d058:	1c4b      	adds	r3, r1, #1
 800d05a:	e7e7      	b.n	800d02c <_printf_float+0x1a0>
 800d05c:	2900      	cmp	r1, #0
 800d05e:	bfd4      	ite	le
 800d060:	f1c1 0202 	rsble	r2, r1, #2
 800d064:	2201      	movgt	r2, #1
 800d066:	4413      	add	r3, r2
 800d068:	e7e0      	b.n	800d02c <_printf_float+0x1a0>
 800d06a:	6823      	ldr	r3, [r4, #0]
 800d06c:	055a      	lsls	r2, r3, #21
 800d06e:	d407      	bmi.n	800d080 <_printf_float+0x1f4>
 800d070:	6923      	ldr	r3, [r4, #16]
 800d072:	4642      	mov	r2, r8
 800d074:	4631      	mov	r1, r6
 800d076:	4628      	mov	r0, r5
 800d078:	47b8      	blx	r7
 800d07a:	3001      	adds	r0, #1
 800d07c:	d12c      	bne.n	800d0d8 <_printf_float+0x24c>
 800d07e:	e764      	b.n	800cf4a <_printf_float+0xbe>
 800d080:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d084:	f240 80e0 	bls.w	800d248 <_printf_float+0x3bc>
 800d088:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d08c:	2200      	movs	r2, #0
 800d08e:	2300      	movs	r3, #0
 800d090:	f7f3 fd22 	bl	8000ad8 <__aeabi_dcmpeq>
 800d094:	2800      	cmp	r0, #0
 800d096:	d034      	beq.n	800d102 <_printf_float+0x276>
 800d098:	4a37      	ldr	r2, [pc, #220]	; (800d178 <_printf_float+0x2ec>)
 800d09a:	2301      	movs	r3, #1
 800d09c:	4631      	mov	r1, r6
 800d09e:	4628      	mov	r0, r5
 800d0a0:	47b8      	blx	r7
 800d0a2:	3001      	adds	r0, #1
 800d0a4:	f43f af51 	beq.w	800cf4a <_printf_float+0xbe>
 800d0a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	db02      	blt.n	800d0b6 <_printf_float+0x22a>
 800d0b0:	6823      	ldr	r3, [r4, #0]
 800d0b2:	07d8      	lsls	r0, r3, #31
 800d0b4:	d510      	bpl.n	800d0d8 <_printf_float+0x24c>
 800d0b6:	ee18 3a10 	vmov	r3, s16
 800d0ba:	4652      	mov	r2, sl
 800d0bc:	4631      	mov	r1, r6
 800d0be:	4628      	mov	r0, r5
 800d0c0:	47b8      	blx	r7
 800d0c2:	3001      	adds	r0, #1
 800d0c4:	f43f af41 	beq.w	800cf4a <_printf_float+0xbe>
 800d0c8:	f04f 0800 	mov.w	r8, #0
 800d0cc:	f104 091a 	add.w	r9, r4, #26
 800d0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	4543      	cmp	r3, r8
 800d0d6:	dc09      	bgt.n	800d0ec <_printf_float+0x260>
 800d0d8:	6823      	ldr	r3, [r4, #0]
 800d0da:	079b      	lsls	r3, r3, #30
 800d0dc:	f100 8107 	bmi.w	800d2ee <_printf_float+0x462>
 800d0e0:	68e0      	ldr	r0, [r4, #12]
 800d0e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0e4:	4298      	cmp	r0, r3
 800d0e6:	bfb8      	it	lt
 800d0e8:	4618      	movlt	r0, r3
 800d0ea:	e730      	b.n	800cf4e <_printf_float+0xc2>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	464a      	mov	r2, r9
 800d0f0:	4631      	mov	r1, r6
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	47b8      	blx	r7
 800d0f6:	3001      	adds	r0, #1
 800d0f8:	f43f af27 	beq.w	800cf4a <_printf_float+0xbe>
 800d0fc:	f108 0801 	add.w	r8, r8, #1
 800d100:	e7e6      	b.n	800d0d0 <_printf_float+0x244>
 800d102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d104:	2b00      	cmp	r3, #0
 800d106:	dc39      	bgt.n	800d17c <_printf_float+0x2f0>
 800d108:	4a1b      	ldr	r2, [pc, #108]	; (800d178 <_printf_float+0x2ec>)
 800d10a:	2301      	movs	r3, #1
 800d10c:	4631      	mov	r1, r6
 800d10e:	4628      	mov	r0, r5
 800d110:	47b8      	blx	r7
 800d112:	3001      	adds	r0, #1
 800d114:	f43f af19 	beq.w	800cf4a <_printf_float+0xbe>
 800d118:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d11c:	4313      	orrs	r3, r2
 800d11e:	d102      	bne.n	800d126 <_printf_float+0x29a>
 800d120:	6823      	ldr	r3, [r4, #0]
 800d122:	07d9      	lsls	r1, r3, #31
 800d124:	d5d8      	bpl.n	800d0d8 <_printf_float+0x24c>
 800d126:	ee18 3a10 	vmov	r3, s16
 800d12a:	4652      	mov	r2, sl
 800d12c:	4631      	mov	r1, r6
 800d12e:	4628      	mov	r0, r5
 800d130:	47b8      	blx	r7
 800d132:	3001      	adds	r0, #1
 800d134:	f43f af09 	beq.w	800cf4a <_printf_float+0xbe>
 800d138:	f04f 0900 	mov.w	r9, #0
 800d13c:	f104 0a1a 	add.w	sl, r4, #26
 800d140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d142:	425b      	negs	r3, r3
 800d144:	454b      	cmp	r3, r9
 800d146:	dc01      	bgt.n	800d14c <_printf_float+0x2c0>
 800d148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d14a:	e792      	b.n	800d072 <_printf_float+0x1e6>
 800d14c:	2301      	movs	r3, #1
 800d14e:	4652      	mov	r2, sl
 800d150:	4631      	mov	r1, r6
 800d152:	4628      	mov	r0, r5
 800d154:	47b8      	blx	r7
 800d156:	3001      	adds	r0, #1
 800d158:	f43f aef7 	beq.w	800cf4a <_printf_float+0xbe>
 800d15c:	f109 0901 	add.w	r9, r9, #1
 800d160:	e7ee      	b.n	800d140 <_printf_float+0x2b4>
 800d162:	bf00      	nop
 800d164:	7fefffff 	.word	0x7fefffff
 800d168:	0800f740 	.word	0x0800f740
 800d16c:	0800f744 	.word	0x0800f744
 800d170:	0800f748 	.word	0x0800f748
 800d174:	0800f74c 	.word	0x0800f74c
 800d178:	0800f750 	.word	0x0800f750
 800d17c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d17e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d180:	429a      	cmp	r2, r3
 800d182:	bfa8      	it	ge
 800d184:	461a      	movge	r2, r3
 800d186:	2a00      	cmp	r2, #0
 800d188:	4691      	mov	r9, r2
 800d18a:	dc37      	bgt.n	800d1fc <_printf_float+0x370>
 800d18c:	f04f 0b00 	mov.w	fp, #0
 800d190:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d194:	f104 021a 	add.w	r2, r4, #26
 800d198:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d19a:	9305      	str	r3, [sp, #20]
 800d19c:	eba3 0309 	sub.w	r3, r3, r9
 800d1a0:	455b      	cmp	r3, fp
 800d1a2:	dc33      	bgt.n	800d20c <_printf_float+0x380>
 800d1a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	db3b      	blt.n	800d224 <_printf_float+0x398>
 800d1ac:	6823      	ldr	r3, [r4, #0]
 800d1ae:	07da      	lsls	r2, r3, #31
 800d1b0:	d438      	bmi.n	800d224 <_printf_float+0x398>
 800d1b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d1b6:	eba2 0903 	sub.w	r9, r2, r3
 800d1ba:	9b05      	ldr	r3, [sp, #20]
 800d1bc:	1ad2      	subs	r2, r2, r3
 800d1be:	4591      	cmp	r9, r2
 800d1c0:	bfa8      	it	ge
 800d1c2:	4691      	movge	r9, r2
 800d1c4:	f1b9 0f00 	cmp.w	r9, #0
 800d1c8:	dc35      	bgt.n	800d236 <_printf_float+0x3aa>
 800d1ca:	f04f 0800 	mov.w	r8, #0
 800d1ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d1d2:	f104 0a1a 	add.w	sl, r4, #26
 800d1d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1da:	1a9b      	subs	r3, r3, r2
 800d1dc:	eba3 0309 	sub.w	r3, r3, r9
 800d1e0:	4543      	cmp	r3, r8
 800d1e2:	f77f af79 	ble.w	800d0d8 <_printf_float+0x24c>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	4652      	mov	r2, sl
 800d1ea:	4631      	mov	r1, r6
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	47b8      	blx	r7
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	f43f aeaa 	beq.w	800cf4a <_printf_float+0xbe>
 800d1f6:	f108 0801 	add.w	r8, r8, #1
 800d1fa:	e7ec      	b.n	800d1d6 <_printf_float+0x34a>
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	4631      	mov	r1, r6
 800d200:	4642      	mov	r2, r8
 800d202:	4628      	mov	r0, r5
 800d204:	47b8      	blx	r7
 800d206:	3001      	adds	r0, #1
 800d208:	d1c0      	bne.n	800d18c <_printf_float+0x300>
 800d20a:	e69e      	b.n	800cf4a <_printf_float+0xbe>
 800d20c:	2301      	movs	r3, #1
 800d20e:	4631      	mov	r1, r6
 800d210:	4628      	mov	r0, r5
 800d212:	9205      	str	r2, [sp, #20]
 800d214:	47b8      	blx	r7
 800d216:	3001      	adds	r0, #1
 800d218:	f43f ae97 	beq.w	800cf4a <_printf_float+0xbe>
 800d21c:	9a05      	ldr	r2, [sp, #20]
 800d21e:	f10b 0b01 	add.w	fp, fp, #1
 800d222:	e7b9      	b.n	800d198 <_printf_float+0x30c>
 800d224:	ee18 3a10 	vmov	r3, s16
 800d228:	4652      	mov	r2, sl
 800d22a:	4631      	mov	r1, r6
 800d22c:	4628      	mov	r0, r5
 800d22e:	47b8      	blx	r7
 800d230:	3001      	adds	r0, #1
 800d232:	d1be      	bne.n	800d1b2 <_printf_float+0x326>
 800d234:	e689      	b.n	800cf4a <_printf_float+0xbe>
 800d236:	9a05      	ldr	r2, [sp, #20]
 800d238:	464b      	mov	r3, r9
 800d23a:	4442      	add	r2, r8
 800d23c:	4631      	mov	r1, r6
 800d23e:	4628      	mov	r0, r5
 800d240:	47b8      	blx	r7
 800d242:	3001      	adds	r0, #1
 800d244:	d1c1      	bne.n	800d1ca <_printf_float+0x33e>
 800d246:	e680      	b.n	800cf4a <_printf_float+0xbe>
 800d248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d24a:	2a01      	cmp	r2, #1
 800d24c:	dc01      	bgt.n	800d252 <_printf_float+0x3c6>
 800d24e:	07db      	lsls	r3, r3, #31
 800d250:	d53a      	bpl.n	800d2c8 <_printf_float+0x43c>
 800d252:	2301      	movs	r3, #1
 800d254:	4642      	mov	r2, r8
 800d256:	4631      	mov	r1, r6
 800d258:	4628      	mov	r0, r5
 800d25a:	47b8      	blx	r7
 800d25c:	3001      	adds	r0, #1
 800d25e:	f43f ae74 	beq.w	800cf4a <_printf_float+0xbe>
 800d262:	ee18 3a10 	vmov	r3, s16
 800d266:	4652      	mov	r2, sl
 800d268:	4631      	mov	r1, r6
 800d26a:	4628      	mov	r0, r5
 800d26c:	47b8      	blx	r7
 800d26e:	3001      	adds	r0, #1
 800d270:	f43f ae6b 	beq.w	800cf4a <_printf_float+0xbe>
 800d274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d278:	2200      	movs	r2, #0
 800d27a:	2300      	movs	r3, #0
 800d27c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d280:	f7f3 fc2a 	bl	8000ad8 <__aeabi_dcmpeq>
 800d284:	b9d8      	cbnz	r0, 800d2be <_printf_float+0x432>
 800d286:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d28a:	f108 0201 	add.w	r2, r8, #1
 800d28e:	4631      	mov	r1, r6
 800d290:	4628      	mov	r0, r5
 800d292:	47b8      	blx	r7
 800d294:	3001      	adds	r0, #1
 800d296:	d10e      	bne.n	800d2b6 <_printf_float+0x42a>
 800d298:	e657      	b.n	800cf4a <_printf_float+0xbe>
 800d29a:	2301      	movs	r3, #1
 800d29c:	4652      	mov	r2, sl
 800d29e:	4631      	mov	r1, r6
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	47b8      	blx	r7
 800d2a4:	3001      	adds	r0, #1
 800d2a6:	f43f ae50 	beq.w	800cf4a <_printf_float+0xbe>
 800d2aa:	f108 0801 	add.w	r8, r8, #1
 800d2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	4543      	cmp	r3, r8
 800d2b4:	dcf1      	bgt.n	800d29a <_printf_float+0x40e>
 800d2b6:	464b      	mov	r3, r9
 800d2b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d2bc:	e6da      	b.n	800d074 <_printf_float+0x1e8>
 800d2be:	f04f 0800 	mov.w	r8, #0
 800d2c2:	f104 0a1a 	add.w	sl, r4, #26
 800d2c6:	e7f2      	b.n	800d2ae <_printf_float+0x422>
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	4642      	mov	r2, r8
 800d2cc:	e7df      	b.n	800d28e <_printf_float+0x402>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	464a      	mov	r2, r9
 800d2d2:	4631      	mov	r1, r6
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	47b8      	blx	r7
 800d2d8:	3001      	adds	r0, #1
 800d2da:	f43f ae36 	beq.w	800cf4a <_printf_float+0xbe>
 800d2de:	f108 0801 	add.w	r8, r8, #1
 800d2e2:	68e3      	ldr	r3, [r4, #12]
 800d2e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2e6:	1a5b      	subs	r3, r3, r1
 800d2e8:	4543      	cmp	r3, r8
 800d2ea:	dcf0      	bgt.n	800d2ce <_printf_float+0x442>
 800d2ec:	e6f8      	b.n	800d0e0 <_printf_float+0x254>
 800d2ee:	f04f 0800 	mov.w	r8, #0
 800d2f2:	f104 0919 	add.w	r9, r4, #25
 800d2f6:	e7f4      	b.n	800d2e2 <_printf_float+0x456>

0800d2f8 <_printf_common>:
 800d2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2fc:	4616      	mov	r6, r2
 800d2fe:	4699      	mov	r9, r3
 800d300:	688a      	ldr	r2, [r1, #8]
 800d302:	690b      	ldr	r3, [r1, #16]
 800d304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d308:	4293      	cmp	r3, r2
 800d30a:	bfb8      	it	lt
 800d30c:	4613      	movlt	r3, r2
 800d30e:	6033      	str	r3, [r6, #0]
 800d310:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d314:	4607      	mov	r7, r0
 800d316:	460c      	mov	r4, r1
 800d318:	b10a      	cbz	r2, 800d31e <_printf_common+0x26>
 800d31a:	3301      	adds	r3, #1
 800d31c:	6033      	str	r3, [r6, #0]
 800d31e:	6823      	ldr	r3, [r4, #0]
 800d320:	0699      	lsls	r1, r3, #26
 800d322:	bf42      	ittt	mi
 800d324:	6833      	ldrmi	r3, [r6, #0]
 800d326:	3302      	addmi	r3, #2
 800d328:	6033      	strmi	r3, [r6, #0]
 800d32a:	6825      	ldr	r5, [r4, #0]
 800d32c:	f015 0506 	ands.w	r5, r5, #6
 800d330:	d106      	bne.n	800d340 <_printf_common+0x48>
 800d332:	f104 0a19 	add.w	sl, r4, #25
 800d336:	68e3      	ldr	r3, [r4, #12]
 800d338:	6832      	ldr	r2, [r6, #0]
 800d33a:	1a9b      	subs	r3, r3, r2
 800d33c:	42ab      	cmp	r3, r5
 800d33e:	dc26      	bgt.n	800d38e <_printf_common+0x96>
 800d340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d344:	1e13      	subs	r3, r2, #0
 800d346:	6822      	ldr	r2, [r4, #0]
 800d348:	bf18      	it	ne
 800d34a:	2301      	movne	r3, #1
 800d34c:	0692      	lsls	r2, r2, #26
 800d34e:	d42b      	bmi.n	800d3a8 <_printf_common+0xb0>
 800d350:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d354:	4649      	mov	r1, r9
 800d356:	4638      	mov	r0, r7
 800d358:	47c0      	blx	r8
 800d35a:	3001      	adds	r0, #1
 800d35c:	d01e      	beq.n	800d39c <_printf_common+0xa4>
 800d35e:	6823      	ldr	r3, [r4, #0]
 800d360:	6922      	ldr	r2, [r4, #16]
 800d362:	f003 0306 	and.w	r3, r3, #6
 800d366:	2b04      	cmp	r3, #4
 800d368:	bf02      	ittt	eq
 800d36a:	68e5      	ldreq	r5, [r4, #12]
 800d36c:	6833      	ldreq	r3, [r6, #0]
 800d36e:	1aed      	subeq	r5, r5, r3
 800d370:	68a3      	ldr	r3, [r4, #8]
 800d372:	bf0c      	ite	eq
 800d374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d378:	2500      	movne	r5, #0
 800d37a:	4293      	cmp	r3, r2
 800d37c:	bfc4      	itt	gt
 800d37e:	1a9b      	subgt	r3, r3, r2
 800d380:	18ed      	addgt	r5, r5, r3
 800d382:	2600      	movs	r6, #0
 800d384:	341a      	adds	r4, #26
 800d386:	42b5      	cmp	r5, r6
 800d388:	d11a      	bne.n	800d3c0 <_printf_common+0xc8>
 800d38a:	2000      	movs	r0, #0
 800d38c:	e008      	b.n	800d3a0 <_printf_common+0xa8>
 800d38e:	2301      	movs	r3, #1
 800d390:	4652      	mov	r2, sl
 800d392:	4649      	mov	r1, r9
 800d394:	4638      	mov	r0, r7
 800d396:	47c0      	blx	r8
 800d398:	3001      	adds	r0, #1
 800d39a:	d103      	bne.n	800d3a4 <_printf_common+0xac>
 800d39c:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a4:	3501      	adds	r5, #1
 800d3a6:	e7c6      	b.n	800d336 <_printf_common+0x3e>
 800d3a8:	18e1      	adds	r1, r4, r3
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	2030      	movs	r0, #48	; 0x30
 800d3ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3b2:	4422      	add	r2, r4
 800d3b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3bc:	3302      	adds	r3, #2
 800d3be:	e7c7      	b.n	800d350 <_printf_common+0x58>
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	4622      	mov	r2, r4
 800d3c4:	4649      	mov	r1, r9
 800d3c6:	4638      	mov	r0, r7
 800d3c8:	47c0      	blx	r8
 800d3ca:	3001      	adds	r0, #1
 800d3cc:	d0e6      	beq.n	800d39c <_printf_common+0xa4>
 800d3ce:	3601      	adds	r6, #1
 800d3d0:	e7d9      	b.n	800d386 <_printf_common+0x8e>
	...

0800d3d4 <_printf_i>:
 800d3d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3d8:	7e0f      	ldrb	r7, [r1, #24]
 800d3da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d3dc:	2f78      	cmp	r7, #120	; 0x78
 800d3de:	4691      	mov	r9, r2
 800d3e0:	4680      	mov	r8, r0
 800d3e2:	460c      	mov	r4, r1
 800d3e4:	469a      	mov	sl, r3
 800d3e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d3ea:	d807      	bhi.n	800d3fc <_printf_i+0x28>
 800d3ec:	2f62      	cmp	r7, #98	; 0x62
 800d3ee:	d80a      	bhi.n	800d406 <_printf_i+0x32>
 800d3f0:	2f00      	cmp	r7, #0
 800d3f2:	f000 80d4 	beq.w	800d59e <_printf_i+0x1ca>
 800d3f6:	2f58      	cmp	r7, #88	; 0x58
 800d3f8:	f000 80c0 	beq.w	800d57c <_printf_i+0x1a8>
 800d3fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d404:	e03a      	b.n	800d47c <_printf_i+0xa8>
 800d406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d40a:	2b15      	cmp	r3, #21
 800d40c:	d8f6      	bhi.n	800d3fc <_printf_i+0x28>
 800d40e:	a101      	add	r1, pc, #4	; (adr r1, 800d414 <_printf_i+0x40>)
 800d410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d414:	0800d46d 	.word	0x0800d46d
 800d418:	0800d481 	.word	0x0800d481
 800d41c:	0800d3fd 	.word	0x0800d3fd
 800d420:	0800d3fd 	.word	0x0800d3fd
 800d424:	0800d3fd 	.word	0x0800d3fd
 800d428:	0800d3fd 	.word	0x0800d3fd
 800d42c:	0800d481 	.word	0x0800d481
 800d430:	0800d3fd 	.word	0x0800d3fd
 800d434:	0800d3fd 	.word	0x0800d3fd
 800d438:	0800d3fd 	.word	0x0800d3fd
 800d43c:	0800d3fd 	.word	0x0800d3fd
 800d440:	0800d585 	.word	0x0800d585
 800d444:	0800d4ad 	.word	0x0800d4ad
 800d448:	0800d53f 	.word	0x0800d53f
 800d44c:	0800d3fd 	.word	0x0800d3fd
 800d450:	0800d3fd 	.word	0x0800d3fd
 800d454:	0800d5a7 	.word	0x0800d5a7
 800d458:	0800d3fd 	.word	0x0800d3fd
 800d45c:	0800d4ad 	.word	0x0800d4ad
 800d460:	0800d3fd 	.word	0x0800d3fd
 800d464:	0800d3fd 	.word	0x0800d3fd
 800d468:	0800d547 	.word	0x0800d547
 800d46c:	682b      	ldr	r3, [r5, #0]
 800d46e:	1d1a      	adds	r2, r3, #4
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	602a      	str	r2, [r5, #0]
 800d474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d47c:	2301      	movs	r3, #1
 800d47e:	e09f      	b.n	800d5c0 <_printf_i+0x1ec>
 800d480:	6820      	ldr	r0, [r4, #0]
 800d482:	682b      	ldr	r3, [r5, #0]
 800d484:	0607      	lsls	r7, r0, #24
 800d486:	f103 0104 	add.w	r1, r3, #4
 800d48a:	6029      	str	r1, [r5, #0]
 800d48c:	d501      	bpl.n	800d492 <_printf_i+0xbe>
 800d48e:	681e      	ldr	r6, [r3, #0]
 800d490:	e003      	b.n	800d49a <_printf_i+0xc6>
 800d492:	0646      	lsls	r6, r0, #25
 800d494:	d5fb      	bpl.n	800d48e <_printf_i+0xba>
 800d496:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d49a:	2e00      	cmp	r6, #0
 800d49c:	da03      	bge.n	800d4a6 <_printf_i+0xd2>
 800d49e:	232d      	movs	r3, #45	; 0x2d
 800d4a0:	4276      	negs	r6, r6
 800d4a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4a6:	485a      	ldr	r0, [pc, #360]	; (800d610 <_printf_i+0x23c>)
 800d4a8:	230a      	movs	r3, #10
 800d4aa:	e012      	b.n	800d4d2 <_printf_i+0xfe>
 800d4ac:	682b      	ldr	r3, [r5, #0]
 800d4ae:	6820      	ldr	r0, [r4, #0]
 800d4b0:	1d19      	adds	r1, r3, #4
 800d4b2:	6029      	str	r1, [r5, #0]
 800d4b4:	0605      	lsls	r5, r0, #24
 800d4b6:	d501      	bpl.n	800d4bc <_printf_i+0xe8>
 800d4b8:	681e      	ldr	r6, [r3, #0]
 800d4ba:	e002      	b.n	800d4c2 <_printf_i+0xee>
 800d4bc:	0641      	lsls	r1, r0, #25
 800d4be:	d5fb      	bpl.n	800d4b8 <_printf_i+0xe4>
 800d4c0:	881e      	ldrh	r6, [r3, #0]
 800d4c2:	4853      	ldr	r0, [pc, #332]	; (800d610 <_printf_i+0x23c>)
 800d4c4:	2f6f      	cmp	r7, #111	; 0x6f
 800d4c6:	bf0c      	ite	eq
 800d4c8:	2308      	moveq	r3, #8
 800d4ca:	230a      	movne	r3, #10
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4d2:	6865      	ldr	r5, [r4, #4]
 800d4d4:	60a5      	str	r5, [r4, #8]
 800d4d6:	2d00      	cmp	r5, #0
 800d4d8:	bfa2      	ittt	ge
 800d4da:	6821      	ldrge	r1, [r4, #0]
 800d4dc:	f021 0104 	bicge.w	r1, r1, #4
 800d4e0:	6021      	strge	r1, [r4, #0]
 800d4e2:	b90e      	cbnz	r6, 800d4e8 <_printf_i+0x114>
 800d4e4:	2d00      	cmp	r5, #0
 800d4e6:	d04b      	beq.n	800d580 <_printf_i+0x1ac>
 800d4e8:	4615      	mov	r5, r2
 800d4ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800d4ee:	fb03 6711 	mls	r7, r3, r1, r6
 800d4f2:	5dc7      	ldrb	r7, [r0, r7]
 800d4f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d4f8:	4637      	mov	r7, r6
 800d4fa:	42bb      	cmp	r3, r7
 800d4fc:	460e      	mov	r6, r1
 800d4fe:	d9f4      	bls.n	800d4ea <_printf_i+0x116>
 800d500:	2b08      	cmp	r3, #8
 800d502:	d10b      	bne.n	800d51c <_printf_i+0x148>
 800d504:	6823      	ldr	r3, [r4, #0]
 800d506:	07de      	lsls	r6, r3, #31
 800d508:	d508      	bpl.n	800d51c <_printf_i+0x148>
 800d50a:	6923      	ldr	r3, [r4, #16]
 800d50c:	6861      	ldr	r1, [r4, #4]
 800d50e:	4299      	cmp	r1, r3
 800d510:	bfde      	ittt	le
 800d512:	2330      	movle	r3, #48	; 0x30
 800d514:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d518:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d51c:	1b52      	subs	r2, r2, r5
 800d51e:	6122      	str	r2, [r4, #16]
 800d520:	f8cd a000 	str.w	sl, [sp]
 800d524:	464b      	mov	r3, r9
 800d526:	aa03      	add	r2, sp, #12
 800d528:	4621      	mov	r1, r4
 800d52a:	4640      	mov	r0, r8
 800d52c:	f7ff fee4 	bl	800d2f8 <_printf_common>
 800d530:	3001      	adds	r0, #1
 800d532:	d14a      	bne.n	800d5ca <_printf_i+0x1f6>
 800d534:	f04f 30ff 	mov.w	r0, #4294967295
 800d538:	b004      	add	sp, #16
 800d53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	f043 0320 	orr.w	r3, r3, #32
 800d544:	6023      	str	r3, [r4, #0]
 800d546:	4833      	ldr	r0, [pc, #204]	; (800d614 <_printf_i+0x240>)
 800d548:	2778      	movs	r7, #120	; 0x78
 800d54a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d54e:	6823      	ldr	r3, [r4, #0]
 800d550:	6829      	ldr	r1, [r5, #0]
 800d552:	061f      	lsls	r7, r3, #24
 800d554:	f851 6b04 	ldr.w	r6, [r1], #4
 800d558:	d402      	bmi.n	800d560 <_printf_i+0x18c>
 800d55a:	065f      	lsls	r7, r3, #25
 800d55c:	bf48      	it	mi
 800d55e:	b2b6      	uxthmi	r6, r6
 800d560:	07df      	lsls	r7, r3, #31
 800d562:	bf48      	it	mi
 800d564:	f043 0320 	orrmi.w	r3, r3, #32
 800d568:	6029      	str	r1, [r5, #0]
 800d56a:	bf48      	it	mi
 800d56c:	6023      	strmi	r3, [r4, #0]
 800d56e:	b91e      	cbnz	r6, 800d578 <_printf_i+0x1a4>
 800d570:	6823      	ldr	r3, [r4, #0]
 800d572:	f023 0320 	bic.w	r3, r3, #32
 800d576:	6023      	str	r3, [r4, #0]
 800d578:	2310      	movs	r3, #16
 800d57a:	e7a7      	b.n	800d4cc <_printf_i+0xf8>
 800d57c:	4824      	ldr	r0, [pc, #144]	; (800d610 <_printf_i+0x23c>)
 800d57e:	e7e4      	b.n	800d54a <_printf_i+0x176>
 800d580:	4615      	mov	r5, r2
 800d582:	e7bd      	b.n	800d500 <_printf_i+0x12c>
 800d584:	682b      	ldr	r3, [r5, #0]
 800d586:	6826      	ldr	r6, [r4, #0]
 800d588:	6961      	ldr	r1, [r4, #20]
 800d58a:	1d18      	adds	r0, r3, #4
 800d58c:	6028      	str	r0, [r5, #0]
 800d58e:	0635      	lsls	r5, r6, #24
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	d501      	bpl.n	800d598 <_printf_i+0x1c4>
 800d594:	6019      	str	r1, [r3, #0]
 800d596:	e002      	b.n	800d59e <_printf_i+0x1ca>
 800d598:	0670      	lsls	r0, r6, #25
 800d59a:	d5fb      	bpl.n	800d594 <_printf_i+0x1c0>
 800d59c:	8019      	strh	r1, [r3, #0]
 800d59e:	2300      	movs	r3, #0
 800d5a0:	6123      	str	r3, [r4, #16]
 800d5a2:	4615      	mov	r5, r2
 800d5a4:	e7bc      	b.n	800d520 <_printf_i+0x14c>
 800d5a6:	682b      	ldr	r3, [r5, #0]
 800d5a8:	1d1a      	adds	r2, r3, #4
 800d5aa:	602a      	str	r2, [r5, #0]
 800d5ac:	681d      	ldr	r5, [r3, #0]
 800d5ae:	6862      	ldr	r2, [r4, #4]
 800d5b0:	2100      	movs	r1, #0
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	f7f2 fe14 	bl	80001e0 <memchr>
 800d5b8:	b108      	cbz	r0, 800d5be <_printf_i+0x1ea>
 800d5ba:	1b40      	subs	r0, r0, r5
 800d5bc:	6060      	str	r0, [r4, #4]
 800d5be:	6863      	ldr	r3, [r4, #4]
 800d5c0:	6123      	str	r3, [r4, #16]
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5c8:	e7aa      	b.n	800d520 <_printf_i+0x14c>
 800d5ca:	6923      	ldr	r3, [r4, #16]
 800d5cc:	462a      	mov	r2, r5
 800d5ce:	4649      	mov	r1, r9
 800d5d0:	4640      	mov	r0, r8
 800d5d2:	47d0      	blx	sl
 800d5d4:	3001      	adds	r0, #1
 800d5d6:	d0ad      	beq.n	800d534 <_printf_i+0x160>
 800d5d8:	6823      	ldr	r3, [r4, #0]
 800d5da:	079b      	lsls	r3, r3, #30
 800d5dc:	d413      	bmi.n	800d606 <_printf_i+0x232>
 800d5de:	68e0      	ldr	r0, [r4, #12]
 800d5e0:	9b03      	ldr	r3, [sp, #12]
 800d5e2:	4298      	cmp	r0, r3
 800d5e4:	bfb8      	it	lt
 800d5e6:	4618      	movlt	r0, r3
 800d5e8:	e7a6      	b.n	800d538 <_printf_i+0x164>
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	4632      	mov	r2, r6
 800d5ee:	4649      	mov	r1, r9
 800d5f0:	4640      	mov	r0, r8
 800d5f2:	47d0      	blx	sl
 800d5f4:	3001      	adds	r0, #1
 800d5f6:	d09d      	beq.n	800d534 <_printf_i+0x160>
 800d5f8:	3501      	adds	r5, #1
 800d5fa:	68e3      	ldr	r3, [r4, #12]
 800d5fc:	9903      	ldr	r1, [sp, #12]
 800d5fe:	1a5b      	subs	r3, r3, r1
 800d600:	42ab      	cmp	r3, r5
 800d602:	dcf2      	bgt.n	800d5ea <_printf_i+0x216>
 800d604:	e7eb      	b.n	800d5de <_printf_i+0x20a>
 800d606:	2500      	movs	r5, #0
 800d608:	f104 0619 	add.w	r6, r4, #25
 800d60c:	e7f5      	b.n	800d5fa <_printf_i+0x226>
 800d60e:	bf00      	nop
 800d610:	0800f752 	.word	0x0800f752
 800d614:	0800f763 	.word	0x0800f763

0800d618 <std>:
 800d618:	2300      	movs	r3, #0
 800d61a:	b510      	push	{r4, lr}
 800d61c:	4604      	mov	r4, r0
 800d61e:	e9c0 3300 	strd	r3, r3, [r0]
 800d622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d626:	6083      	str	r3, [r0, #8]
 800d628:	8181      	strh	r1, [r0, #12]
 800d62a:	6643      	str	r3, [r0, #100]	; 0x64
 800d62c:	81c2      	strh	r2, [r0, #14]
 800d62e:	6183      	str	r3, [r0, #24]
 800d630:	4619      	mov	r1, r3
 800d632:	2208      	movs	r2, #8
 800d634:	305c      	adds	r0, #92	; 0x5c
 800d636:	f000 f8f4 	bl	800d822 <memset>
 800d63a:	4b0d      	ldr	r3, [pc, #52]	; (800d670 <std+0x58>)
 800d63c:	6263      	str	r3, [r4, #36]	; 0x24
 800d63e:	4b0d      	ldr	r3, [pc, #52]	; (800d674 <std+0x5c>)
 800d640:	62a3      	str	r3, [r4, #40]	; 0x28
 800d642:	4b0d      	ldr	r3, [pc, #52]	; (800d678 <std+0x60>)
 800d644:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d646:	4b0d      	ldr	r3, [pc, #52]	; (800d67c <std+0x64>)
 800d648:	6323      	str	r3, [r4, #48]	; 0x30
 800d64a:	4b0d      	ldr	r3, [pc, #52]	; (800d680 <std+0x68>)
 800d64c:	6224      	str	r4, [r4, #32]
 800d64e:	429c      	cmp	r4, r3
 800d650:	d006      	beq.n	800d660 <std+0x48>
 800d652:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d656:	4294      	cmp	r4, r2
 800d658:	d002      	beq.n	800d660 <std+0x48>
 800d65a:	33d0      	adds	r3, #208	; 0xd0
 800d65c:	429c      	cmp	r4, r3
 800d65e:	d105      	bne.n	800d66c <std+0x54>
 800d660:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d668:	f000 b958 	b.w	800d91c <__retarget_lock_init_recursive>
 800d66c:	bd10      	pop	{r4, pc}
 800d66e:	bf00      	nop
 800d670:	0800d79d 	.word	0x0800d79d
 800d674:	0800d7bf 	.word	0x0800d7bf
 800d678:	0800d7f7 	.word	0x0800d7f7
 800d67c:	0800d81b 	.word	0x0800d81b
 800d680:	20002154 	.word	0x20002154

0800d684 <stdio_exit_handler>:
 800d684:	4a02      	ldr	r2, [pc, #8]	; (800d690 <stdio_exit_handler+0xc>)
 800d686:	4903      	ldr	r1, [pc, #12]	; (800d694 <stdio_exit_handler+0x10>)
 800d688:	4803      	ldr	r0, [pc, #12]	; (800d698 <stdio_exit_handler+0x14>)
 800d68a:	f000 b869 	b.w	800d760 <_fwalk_sglue>
 800d68e:	bf00      	nop
 800d690:	20000120 	.word	0x20000120
 800d694:	0800f021 	.word	0x0800f021
 800d698:	2000012c 	.word	0x2000012c

0800d69c <cleanup_stdio>:
 800d69c:	6841      	ldr	r1, [r0, #4]
 800d69e:	4b0c      	ldr	r3, [pc, #48]	; (800d6d0 <cleanup_stdio+0x34>)
 800d6a0:	4299      	cmp	r1, r3
 800d6a2:	b510      	push	{r4, lr}
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	d001      	beq.n	800d6ac <cleanup_stdio+0x10>
 800d6a8:	f001 fcba 	bl	800f020 <_fflush_r>
 800d6ac:	68a1      	ldr	r1, [r4, #8]
 800d6ae:	4b09      	ldr	r3, [pc, #36]	; (800d6d4 <cleanup_stdio+0x38>)
 800d6b0:	4299      	cmp	r1, r3
 800d6b2:	d002      	beq.n	800d6ba <cleanup_stdio+0x1e>
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f001 fcb3 	bl	800f020 <_fflush_r>
 800d6ba:	68e1      	ldr	r1, [r4, #12]
 800d6bc:	4b06      	ldr	r3, [pc, #24]	; (800d6d8 <cleanup_stdio+0x3c>)
 800d6be:	4299      	cmp	r1, r3
 800d6c0:	d004      	beq.n	800d6cc <cleanup_stdio+0x30>
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6c8:	f001 bcaa 	b.w	800f020 <_fflush_r>
 800d6cc:	bd10      	pop	{r4, pc}
 800d6ce:	bf00      	nop
 800d6d0:	20002154 	.word	0x20002154
 800d6d4:	200021bc 	.word	0x200021bc
 800d6d8:	20002224 	.word	0x20002224

0800d6dc <global_stdio_init.part.0>:
 800d6dc:	b510      	push	{r4, lr}
 800d6de:	4b0b      	ldr	r3, [pc, #44]	; (800d70c <global_stdio_init.part.0+0x30>)
 800d6e0:	4c0b      	ldr	r4, [pc, #44]	; (800d710 <global_stdio_init.part.0+0x34>)
 800d6e2:	4a0c      	ldr	r2, [pc, #48]	; (800d714 <global_stdio_init.part.0+0x38>)
 800d6e4:	601a      	str	r2, [r3, #0]
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	2104      	movs	r1, #4
 800d6ec:	f7ff ff94 	bl	800d618 <std>
 800d6f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	2109      	movs	r1, #9
 800d6f8:	f7ff ff8e 	bl	800d618 <std>
 800d6fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d700:	2202      	movs	r2, #2
 800d702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d706:	2112      	movs	r1, #18
 800d708:	f7ff bf86 	b.w	800d618 <std>
 800d70c:	2000228c 	.word	0x2000228c
 800d710:	20002154 	.word	0x20002154
 800d714:	0800d685 	.word	0x0800d685

0800d718 <__sfp_lock_acquire>:
 800d718:	4801      	ldr	r0, [pc, #4]	; (800d720 <__sfp_lock_acquire+0x8>)
 800d71a:	f000 b900 	b.w	800d91e <__retarget_lock_acquire_recursive>
 800d71e:	bf00      	nop
 800d720:	20002295 	.word	0x20002295

0800d724 <__sfp_lock_release>:
 800d724:	4801      	ldr	r0, [pc, #4]	; (800d72c <__sfp_lock_release+0x8>)
 800d726:	f000 b8fb 	b.w	800d920 <__retarget_lock_release_recursive>
 800d72a:	bf00      	nop
 800d72c:	20002295 	.word	0x20002295

0800d730 <__sinit>:
 800d730:	b510      	push	{r4, lr}
 800d732:	4604      	mov	r4, r0
 800d734:	f7ff fff0 	bl	800d718 <__sfp_lock_acquire>
 800d738:	6a23      	ldr	r3, [r4, #32]
 800d73a:	b11b      	cbz	r3, 800d744 <__sinit+0x14>
 800d73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d740:	f7ff bff0 	b.w	800d724 <__sfp_lock_release>
 800d744:	4b04      	ldr	r3, [pc, #16]	; (800d758 <__sinit+0x28>)
 800d746:	6223      	str	r3, [r4, #32]
 800d748:	4b04      	ldr	r3, [pc, #16]	; (800d75c <__sinit+0x2c>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d1f5      	bne.n	800d73c <__sinit+0xc>
 800d750:	f7ff ffc4 	bl	800d6dc <global_stdio_init.part.0>
 800d754:	e7f2      	b.n	800d73c <__sinit+0xc>
 800d756:	bf00      	nop
 800d758:	0800d69d 	.word	0x0800d69d
 800d75c:	2000228c 	.word	0x2000228c

0800d760 <_fwalk_sglue>:
 800d760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d764:	4607      	mov	r7, r0
 800d766:	4688      	mov	r8, r1
 800d768:	4614      	mov	r4, r2
 800d76a:	2600      	movs	r6, #0
 800d76c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d770:	f1b9 0901 	subs.w	r9, r9, #1
 800d774:	d505      	bpl.n	800d782 <_fwalk_sglue+0x22>
 800d776:	6824      	ldr	r4, [r4, #0]
 800d778:	2c00      	cmp	r4, #0
 800d77a:	d1f7      	bne.n	800d76c <_fwalk_sglue+0xc>
 800d77c:	4630      	mov	r0, r6
 800d77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d782:	89ab      	ldrh	r3, [r5, #12]
 800d784:	2b01      	cmp	r3, #1
 800d786:	d907      	bls.n	800d798 <_fwalk_sglue+0x38>
 800d788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d78c:	3301      	adds	r3, #1
 800d78e:	d003      	beq.n	800d798 <_fwalk_sglue+0x38>
 800d790:	4629      	mov	r1, r5
 800d792:	4638      	mov	r0, r7
 800d794:	47c0      	blx	r8
 800d796:	4306      	orrs	r6, r0
 800d798:	3568      	adds	r5, #104	; 0x68
 800d79a:	e7e9      	b.n	800d770 <_fwalk_sglue+0x10>

0800d79c <__sread>:
 800d79c:	b510      	push	{r4, lr}
 800d79e:	460c      	mov	r4, r1
 800d7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7a4:	f000 f86c 	bl	800d880 <_read_r>
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	bfab      	itete	ge
 800d7ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d7ae:	89a3      	ldrhlt	r3, [r4, #12]
 800d7b0:	181b      	addge	r3, r3, r0
 800d7b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d7b6:	bfac      	ite	ge
 800d7b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d7ba:	81a3      	strhlt	r3, [r4, #12]
 800d7bc:	bd10      	pop	{r4, pc}

0800d7be <__swrite>:
 800d7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c2:	461f      	mov	r7, r3
 800d7c4:	898b      	ldrh	r3, [r1, #12]
 800d7c6:	05db      	lsls	r3, r3, #23
 800d7c8:	4605      	mov	r5, r0
 800d7ca:	460c      	mov	r4, r1
 800d7cc:	4616      	mov	r6, r2
 800d7ce:	d505      	bpl.n	800d7dc <__swrite+0x1e>
 800d7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7d4:	2302      	movs	r3, #2
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f000 f840 	bl	800d85c <_lseek_r>
 800d7dc:	89a3      	ldrh	r3, [r4, #12]
 800d7de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7e6:	81a3      	strh	r3, [r4, #12]
 800d7e8:	4632      	mov	r2, r6
 800d7ea:	463b      	mov	r3, r7
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7f2:	f000 b857 	b.w	800d8a4 <_write_r>

0800d7f6 <__sseek>:
 800d7f6:	b510      	push	{r4, lr}
 800d7f8:	460c      	mov	r4, r1
 800d7fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7fe:	f000 f82d 	bl	800d85c <_lseek_r>
 800d802:	1c43      	adds	r3, r0, #1
 800d804:	89a3      	ldrh	r3, [r4, #12]
 800d806:	bf15      	itete	ne
 800d808:	6560      	strne	r0, [r4, #84]	; 0x54
 800d80a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d80e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d812:	81a3      	strheq	r3, [r4, #12]
 800d814:	bf18      	it	ne
 800d816:	81a3      	strhne	r3, [r4, #12]
 800d818:	bd10      	pop	{r4, pc}

0800d81a <__sclose>:
 800d81a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d81e:	f000 b80d 	b.w	800d83c <_close_r>

0800d822 <memset>:
 800d822:	4402      	add	r2, r0
 800d824:	4603      	mov	r3, r0
 800d826:	4293      	cmp	r3, r2
 800d828:	d100      	bne.n	800d82c <memset+0xa>
 800d82a:	4770      	bx	lr
 800d82c:	f803 1b01 	strb.w	r1, [r3], #1
 800d830:	e7f9      	b.n	800d826 <memset+0x4>
	...

0800d834 <_localeconv_r>:
 800d834:	4800      	ldr	r0, [pc, #0]	; (800d838 <_localeconv_r+0x4>)
 800d836:	4770      	bx	lr
 800d838:	2000026c 	.word	0x2000026c

0800d83c <_close_r>:
 800d83c:	b538      	push	{r3, r4, r5, lr}
 800d83e:	4d06      	ldr	r5, [pc, #24]	; (800d858 <_close_r+0x1c>)
 800d840:	2300      	movs	r3, #0
 800d842:	4604      	mov	r4, r0
 800d844:	4608      	mov	r0, r1
 800d846:	602b      	str	r3, [r5, #0]
 800d848:	f7f4 fc73 	bl	8002132 <_close>
 800d84c:	1c43      	adds	r3, r0, #1
 800d84e:	d102      	bne.n	800d856 <_close_r+0x1a>
 800d850:	682b      	ldr	r3, [r5, #0]
 800d852:	b103      	cbz	r3, 800d856 <_close_r+0x1a>
 800d854:	6023      	str	r3, [r4, #0]
 800d856:	bd38      	pop	{r3, r4, r5, pc}
 800d858:	20002290 	.word	0x20002290

0800d85c <_lseek_r>:
 800d85c:	b538      	push	{r3, r4, r5, lr}
 800d85e:	4d07      	ldr	r5, [pc, #28]	; (800d87c <_lseek_r+0x20>)
 800d860:	4604      	mov	r4, r0
 800d862:	4608      	mov	r0, r1
 800d864:	4611      	mov	r1, r2
 800d866:	2200      	movs	r2, #0
 800d868:	602a      	str	r2, [r5, #0]
 800d86a:	461a      	mov	r2, r3
 800d86c:	f7f4 fc88 	bl	8002180 <_lseek>
 800d870:	1c43      	adds	r3, r0, #1
 800d872:	d102      	bne.n	800d87a <_lseek_r+0x1e>
 800d874:	682b      	ldr	r3, [r5, #0]
 800d876:	b103      	cbz	r3, 800d87a <_lseek_r+0x1e>
 800d878:	6023      	str	r3, [r4, #0]
 800d87a:	bd38      	pop	{r3, r4, r5, pc}
 800d87c:	20002290 	.word	0x20002290

0800d880 <_read_r>:
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	4d07      	ldr	r5, [pc, #28]	; (800d8a0 <_read_r+0x20>)
 800d884:	4604      	mov	r4, r0
 800d886:	4608      	mov	r0, r1
 800d888:	4611      	mov	r1, r2
 800d88a:	2200      	movs	r2, #0
 800d88c:	602a      	str	r2, [r5, #0]
 800d88e:	461a      	mov	r2, r3
 800d890:	f7f4 fc16 	bl	80020c0 <_read>
 800d894:	1c43      	adds	r3, r0, #1
 800d896:	d102      	bne.n	800d89e <_read_r+0x1e>
 800d898:	682b      	ldr	r3, [r5, #0]
 800d89a:	b103      	cbz	r3, 800d89e <_read_r+0x1e>
 800d89c:	6023      	str	r3, [r4, #0]
 800d89e:	bd38      	pop	{r3, r4, r5, pc}
 800d8a0:	20002290 	.word	0x20002290

0800d8a4 <_write_r>:
 800d8a4:	b538      	push	{r3, r4, r5, lr}
 800d8a6:	4d07      	ldr	r5, [pc, #28]	; (800d8c4 <_write_r+0x20>)
 800d8a8:	4604      	mov	r4, r0
 800d8aa:	4608      	mov	r0, r1
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	602a      	str	r2, [r5, #0]
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	f7f4 fc21 	bl	80020fa <_write>
 800d8b8:	1c43      	adds	r3, r0, #1
 800d8ba:	d102      	bne.n	800d8c2 <_write_r+0x1e>
 800d8bc:	682b      	ldr	r3, [r5, #0]
 800d8be:	b103      	cbz	r3, 800d8c2 <_write_r+0x1e>
 800d8c0:	6023      	str	r3, [r4, #0]
 800d8c2:	bd38      	pop	{r3, r4, r5, pc}
 800d8c4:	20002290 	.word	0x20002290

0800d8c8 <__errno>:
 800d8c8:	4b01      	ldr	r3, [pc, #4]	; (800d8d0 <__errno+0x8>)
 800d8ca:	6818      	ldr	r0, [r3, #0]
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop
 800d8d0:	20000178 	.word	0x20000178

0800d8d4 <__libc_init_array>:
 800d8d4:	b570      	push	{r4, r5, r6, lr}
 800d8d6:	4d0d      	ldr	r5, [pc, #52]	; (800d90c <__libc_init_array+0x38>)
 800d8d8:	4c0d      	ldr	r4, [pc, #52]	; (800d910 <__libc_init_array+0x3c>)
 800d8da:	1b64      	subs	r4, r4, r5
 800d8dc:	10a4      	asrs	r4, r4, #2
 800d8de:	2600      	movs	r6, #0
 800d8e0:	42a6      	cmp	r6, r4
 800d8e2:	d109      	bne.n	800d8f8 <__libc_init_array+0x24>
 800d8e4:	4d0b      	ldr	r5, [pc, #44]	; (800d914 <__libc_init_array+0x40>)
 800d8e6:	4c0c      	ldr	r4, [pc, #48]	; (800d918 <__libc_init_array+0x44>)
 800d8e8:	f001 feee 	bl	800f6c8 <_init>
 800d8ec:	1b64      	subs	r4, r4, r5
 800d8ee:	10a4      	asrs	r4, r4, #2
 800d8f0:	2600      	movs	r6, #0
 800d8f2:	42a6      	cmp	r6, r4
 800d8f4:	d105      	bne.n	800d902 <__libc_init_array+0x2e>
 800d8f6:	bd70      	pop	{r4, r5, r6, pc}
 800d8f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8fc:	4798      	blx	r3
 800d8fe:	3601      	adds	r6, #1
 800d900:	e7ee      	b.n	800d8e0 <__libc_init_array+0xc>
 800d902:	f855 3b04 	ldr.w	r3, [r5], #4
 800d906:	4798      	blx	r3
 800d908:	3601      	adds	r6, #1
 800d90a:	e7f2      	b.n	800d8f2 <__libc_init_array+0x1e>
 800d90c:	0800fabc 	.word	0x0800fabc
 800d910:	0800fabc 	.word	0x0800fabc
 800d914:	0800fabc 	.word	0x0800fabc
 800d918:	0800fac0 	.word	0x0800fac0

0800d91c <__retarget_lock_init_recursive>:
 800d91c:	4770      	bx	lr

0800d91e <__retarget_lock_acquire_recursive>:
 800d91e:	4770      	bx	lr

0800d920 <__retarget_lock_release_recursive>:
 800d920:	4770      	bx	lr

0800d922 <quorem>:
 800d922:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d926:	6903      	ldr	r3, [r0, #16]
 800d928:	690c      	ldr	r4, [r1, #16]
 800d92a:	42a3      	cmp	r3, r4
 800d92c:	4607      	mov	r7, r0
 800d92e:	db7e      	blt.n	800da2e <quorem+0x10c>
 800d930:	3c01      	subs	r4, #1
 800d932:	f101 0814 	add.w	r8, r1, #20
 800d936:	f100 0514 	add.w	r5, r0, #20
 800d93a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d93e:	9301      	str	r3, [sp, #4]
 800d940:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d944:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d948:	3301      	adds	r3, #1
 800d94a:	429a      	cmp	r2, r3
 800d94c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d950:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d954:	fbb2 f6f3 	udiv	r6, r2, r3
 800d958:	d331      	bcc.n	800d9be <quorem+0x9c>
 800d95a:	f04f 0e00 	mov.w	lr, #0
 800d95e:	4640      	mov	r0, r8
 800d960:	46ac      	mov	ip, r5
 800d962:	46f2      	mov	sl, lr
 800d964:	f850 2b04 	ldr.w	r2, [r0], #4
 800d968:	b293      	uxth	r3, r2
 800d96a:	fb06 e303 	mla	r3, r6, r3, lr
 800d96e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d972:	0c1a      	lsrs	r2, r3, #16
 800d974:	b29b      	uxth	r3, r3
 800d976:	ebaa 0303 	sub.w	r3, sl, r3
 800d97a:	f8dc a000 	ldr.w	sl, [ip]
 800d97e:	fa13 f38a 	uxtah	r3, r3, sl
 800d982:	fb06 220e 	mla	r2, r6, lr, r2
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	9b00      	ldr	r3, [sp, #0]
 800d98a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d98e:	b292      	uxth	r2, r2
 800d990:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d994:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d998:	f8bd 3000 	ldrh.w	r3, [sp]
 800d99c:	4581      	cmp	r9, r0
 800d99e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9a2:	f84c 3b04 	str.w	r3, [ip], #4
 800d9a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d9aa:	d2db      	bcs.n	800d964 <quorem+0x42>
 800d9ac:	f855 300b 	ldr.w	r3, [r5, fp]
 800d9b0:	b92b      	cbnz	r3, 800d9be <quorem+0x9c>
 800d9b2:	9b01      	ldr	r3, [sp, #4]
 800d9b4:	3b04      	subs	r3, #4
 800d9b6:	429d      	cmp	r5, r3
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	d32c      	bcc.n	800da16 <quorem+0xf4>
 800d9bc:	613c      	str	r4, [r7, #16]
 800d9be:	4638      	mov	r0, r7
 800d9c0:	f001 f9a8 	bl	800ed14 <__mcmp>
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	db22      	blt.n	800da0e <quorem+0xec>
 800d9c8:	3601      	adds	r6, #1
 800d9ca:	4629      	mov	r1, r5
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	f858 2b04 	ldr.w	r2, [r8], #4
 800d9d2:	f8d1 c000 	ldr.w	ip, [r1]
 800d9d6:	b293      	uxth	r3, r2
 800d9d8:	1ac3      	subs	r3, r0, r3
 800d9da:	0c12      	lsrs	r2, r2, #16
 800d9dc:	fa13 f38c 	uxtah	r3, r3, ip
 800d9e0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d9e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9ee:	45c1      	cmp	r9, r8
 800d9f0:	f841 3b04 	str.w	r3, [r1], #4
 800d9f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d9f8:	d2e9      	bcs.n	800d9ce <quorem+0xac>
 800d9fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da02:	b922      	cbnz	r2, 800da0e <quorem+0xec>
 800da04:	3b04      	subs	r3, #4
 800da06:	429d      	cmp	r5, r3
 800da08:	461a      	mov	r2, r3
 800da0a:	d30a      	bcc.n	800da22 <quorem+0x100>
 800da0c:	613c      	str	r4, [r7, #16]
 800da0e:	4630      	mov	r0, r6
 800da10:	b003      	add	sp, #12
 800da12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da16:	6812      	ldr	r2, [r2, #0]
 800da18:	3b04      	subs	r3, #4
 800da1a:	2a00      	cmp	r2, #0
 800da1c:	d1ce      	bne.n	800d9bc <quorem+0x9a>
 800da1e:	3c01      	subs	r4, #1
 800da20:	e7c9      	b.n	800d9b6 <quorem+0x94>
 800da22:	6812      	ldr	r2, [r2, #0]
 800da24:	3b04      	subs	r3, #4
 800da26:	2a00      	cmp	r2, #0
 800da28:	d1f0      	bne.n	800da0c <quorem+0xea>
 800da2a:	3c01      	subs	r4, #1
 800da2c:	e7eb      	b.n	800da06 <quorem+0xe4>
 800da2e:	2000      	movs	r0, #0
 800da30:	e7ee      	b.n	800da10 <quorem+0xee>
 800da32:	0000      	movs	r0, r0
 800da34:	0000      	movs	r0, r0
	...

0800da38 <_dtoa_r>:
 800da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3c:	ed2d 8b04 	vpush	{d8-d9}
 800da40:	69c5      	ldr	r5, [r0, #28]
 800da42:	b093      	sub	sp, #76	; 0x4c
 800da44:	ed8d 0b02 	vstr	d0, [sp, #8]
 800da48:	ec57 6b10 	vmov	r6, r7, d0
 800da4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800da50:	9107      	str	r1, [sp, #28]
 800da52:	4604      	mov	r4, r0
 800da54:	920a      	str	r2, [sp, #40]	; 0x28
 800da56:	930d      	str	r3, [sp, #52]	; 0x34
 800da58:	b975      	cbnz	r5, 800da78 <_dtoa_r+0x40>
 800da5a:	2010      	movs	r0, #16
 800da5c:	f000 fe2a 	bl	800e6b4 <malloc>
 800da60:	4602      	mov	r2, r0
 800da62:	61e0      	str	r0, [r4, #28]
 800da64:	b920      	cbnz	r0, 800da70 <_dtoa_r+0x38>
 800da66:	4bae      	ldr	r3, [pc, #696]	; (800dd20 <_dtoa_r+0x2e8>)
 800da68:	21ef      	movs	r1, #239	; 0xef
 800da6a:	48ae      	ldr	r0, [pc, #696]	; (800dd24 <_dtoa_r+0x2ec>)
 800da6c:	f001 fb1e 	bl	800f0ac <__assert_func>
 800da70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800da74:	6005      	str	r5, [r0, #0]
 800da76:	60c5      	str	r5, [r0, #12]
 800da78:	69e3      	ldr	r3, [r4, #28]
 800da7a:	6819      	ldr	r1, [r3, #0]
 800da7c:	b151      	cbz	r1, 800da94 <_dtoa_r+0x5c>
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	604a      	str	r2, [r1, #4]
 800da82:	2301      	movs	r3, #1
 800da84:	4093      	lsls	r3, r2
 800da86:	608b      	str	r3, [r1, #8]
 800da88:	4620      	mov	r0, r4
 800da8a:	f000 ff07 	bl	800e89c <_Bfree>
 800da8e:	69e3      	ldr	r3, [r4, #28]
 800da90:	2200      	movs	r2, #0
 800da92:	601a      	str	r2, [r3, #0]
 800da94:	1e3b      	subs	r3, r7, #0
 800da96:	bfbb      	ittet	lt
 800da98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800da9c:	9303      	strlt	r3, [sp, #12]
 800da9e:	2300      	movge	r3, #0
 800daa0:	2201      	movlt	r2, #1
 800daa2:	bfac      	ite	ge
 800daa4:	f8c8 3000 	strge.w	r3, [r8]
 800daa8:	f8c8 2000 	strlt.w	r2, [r8]
 800daac:	4b9e      	ldr	r3, [pc, #632]	; (800dd28 <_dtoa_r+0x2f0>)
 800daae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dab2:	ea33 0308 	bics.w	r3, r3, r8
 800dab6:	d11b      	bne.n	800daf0 <_dtoa_r+0xb8>
 800dab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800daba:	f242 730f 	movw	r3, #9999	; 0x270f
 800dabe:	6013      	str	r3, [r2, #0]
 800dac0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dac4:	4333      	orrs	r3, r6
 800dac6:	f000 8593 	beq.w	800e5f0 <_dtoa_r+0xbb8>
 800daca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dacc:	b963      	cbnz	r3, 800dae8 <_dtoa_r+0xb0>
 800dace:	4b97      	ldr	r3, [pc, #604]	; (800dd2c <_dtoa_r+0x2f4>)
 800dad0:	e027      	b.n	800db22 <_dtoa_r+0xea>
 800dad2:	4b97      	ldr	r3, [pc, #604]	; (800dd30 <_dtoa_r+0x2f8>)
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	3308      	adds	r3, #8
 800dad8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dada:	6013      	str	r3, [r2, #0]
 800dadc:	9800      	ldr	r0, [sp, #0]
 800dade:	b013      	add	sp, #76	; 0x4c
 800dae0:	ecbd 8b04 	vpop	{d8-d9}
 800dae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae8:	4b90      	ldr	r3, [pc, #576]	; (800dd2c <_dtoa_r+0x2f4>)
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	3303      	adds	r3, #3
 800daee:	e7f3      	b.n	800dad8 <_dtoa_r+0xa0>
 800daf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800daf4:	2200      	movs	r2, #0
 800daf6:	ec51 0b17 	vmov	r0, r1, d7
 800dafa:	eeb0 8a47 	vmov.f32	s16, s14
 800dafe:	eef0 8a67 	vmov.f32	s17, s15
 800db02:	2300      	movs	r3, #0
 800db04:	f7f2 ffe8 	bl	8000ad8 <__aeabi_dcmpeq>
 800db08:	4681      	mov	r9, r0
 800db0a:	b160      	cbz	r0, 800db26 <_dtoa_r+0xee>
 800db0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db0e:	2301      	movs	r3, #1
 800db10:	6013      	str	r3, [r2, #0]
 800db12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db14:	2b00      	cmp	r3, #0
 800db16:	f000 8568 	beq.w	800e5ea <_dtoa_r+0xbb2>
 800db1a:	4b86      	ldr	r3, [pc, #536]	; (800dd34 <_dtoa_r+0x2fc>)
 800db1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db1e:	6013      	str	r3, [r2, #0]
 800db20:	3b01      	subs	r3, #1
 800db22:	9300      	str	r3, [sp, #0]
 800db24:	e7da      	b.n	800dadc <_dtoa_r+0xa4>
 800db26:	aa10      	add	r2, sp, #64	; 0x40
 800db28:	a911      	add	r1, sp, #68	; 0x44
 800db2a:	4620      	mov	r0, r4
 800db2c:	eeb0 0a48 	vmov.f32	s0, s16
 800db30:	eef0 0a68 	vmov.f32	s1, s17
 800db34:	f001 f994 	bl	800ee60 <__d2b>
 800db38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800db3c:	4682      	mov	sl, r0
 800db3e:	2d00      	cmp	r5, #0
 800db40:	d07f      	beq.n	800dc42 <_dtoa_r+0x20a>
 800db42:	ee18 3a90 	vmov	r3, s17
 800db46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db4a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800db4e:	ec51 0b18 	vmov	r0, r1, d8
 800db52:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800db56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800db5a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800db5e:	4619      	mov	r1, r3
 800db60:	2200      	movs	r2, #0
 800db62:	4b75      	ldr	r3, [pc, #468]	; (800dd38 <_dtoa_r+0x300>)
 800db64:	f7f2 fb98 	bl	8000298 <__aeabi_dsub>
 800db68:	a367      	add	r3, pc, #412	; (adr r3, 800dd08 <_dtoa_r+0x2d0>)
 800db6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6e:	f7f2 fd4b 	bl	8000608 <__aeabi_dmul>
 800db72:	a367      	add	r3, pc, #412	; (adr r3, 800dd10 <_dtoa_r+0x2d8>)
 800db74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db78:	f7f2 fb90 	bl	800029c <__adddf3>
 800db7c:	4606      	mov	r6, r0
 800db7e:	4628      	mov	r0, r5
 800db80:	460f      	mov	r7, r1
 800db82:	f7f2 fcd7 	bl	8000534 <__aeabi_i2d>
 800db86:	a364      	add	r3, pc, #400	; (adr r3, 800dd18 <_dtoa_r+0x2e0>)
 800db88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8c:	f7f2 fd3c 	bl	8000608 <__aeabi_dmul>
 800db90:	4602      	mov	r2, r0
 800db92:	460b      	mov	r3, r1
 800db94:	4630      	mov	r0, r6
 800db96:	4639      	mov	r1, r7
 800db98:	f7f2 fb80 	bl	800029c <__adddf3>
 800db9c:	4606      	mov	r6, r0
 800db9e:	460f      	mov	r7, r1
 800dba0:	f7f2 ffe2 	bl	8000b68 <__aeabi_d2iz>
 800dba4:	2200      	movs	r2, #0
 800dba6:	4683      	mov	fp, r0
 800dba8:	2300      	movs	r3, #0
 800dbaa:	4630      	mov	r0, r6
 800dbac:	4639      	mov	r1, r7
 800dbae:	f7f2 ff9d 	bl	8000aec <__aeabi_dcmplt>
 800dbb2:	b148      	cbz	r0, 800dbc8 <_dtoa_r+0x190>
 800dbb4:	4658      	mov	r0, fp
 800dbb6:	f7f2 fcbd 	bl	8000534 <__aeabi_i2d>
 800dbba:	4632      	mov	r2, r6
 800dbbc:	463b      	mov	r3, r7
 800dbbe:	f7f2 ff8b 	bl	8000ad8 <__aeabi_dcmpeq>
 800dbc2:	b908      	cbnz	r0, 800dbc8 <_dtoa_r+0x190>
 800dbc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dbc8:	f1bb 0f16 	cmp.w	fp, #22
 800dbcc:	d857      	bhi.n	800dc7e <_dtoa_r+0x246>
 800dbce:	4b5b      	ldr	r3, [pc, #364]	; (800dd3c <_dtoa_r+0x304>)
 800dbd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd8:	ec51 0b18 	vmov	r0, r1, d8
 800dbdc:	f7f2 ff86 	bl	8000aec <__aeabi_dcmplt>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	d04e      	beq.n	800dc82 <_dtoa_r+0x24a>
 800dbe4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dbe8:	2300      	movs	r3, #0
 800dbea:	930c      	str	r3, [sp, #48]	; 0x30
 800dbec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbee:	1b5b      	subs	r3, r3, r5
 800dbf0:	1e5a      	subs	r2, r3, #1
 800dbf2:	bf45      	ittet	mi
 800dbf4:	f1c3 0301 	rsbmi	r3, r3, #1
 800dbf8:	9305      	strmi	r3, [sp, #20]
 800dbfa:	2300      	movpl	r3, #0
 800dbfc:	2300      	movmi	r3, #0
 800dbfe:	9206      	str	r2, [sp, #24]
 800dc00:	bf54      	ite	pl
 800dc02:	9305      	strpl	r3, [sp, #20]
 800dc04:	9306      	strmi	r3, [sp, #24]
 800dc06:	f1bb 0f00 	cmp.w	fp, #0
 800dc0a:	db3c      	blt.n	800dc86 <_dtoa_r+0x24e>
 800dc0c:	9b06      	ldr	r3, [sp, #24]
 800dc0e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800dc12:	445b      	add	r3, fp
 800dc14:	9306      	str	r3, [sp, #24]
 800dc16:	2300      	movs	r3, #0
 800dc18:	9308      	str	r3, [sp, #32]
 800dc1a:	9b07      	ldr	r3, [sp, #28]
 800dc1c:	2b09      	cmp	r3, #9
 800dc1e:	d868      	bhi.n	800dcf2 <_dtoa_r+0x2ba>
 800dc20:	2b05      	cmp	r3, #5
 800dc22:	bfc4      	itt	gt
 800dc24:	3b04      	subgt	r3, #4
 800dc26:	9307      	strgt	r3, [sp, #28]
 800dc28:	9b07      	ldr	r3, [sp, #28]
 800dc2a:	f1a3 0302 	sub.w	r3, r3, #2
 800dc2e:	bfcc      	ite	gt
 800dc30:	2500      	movgt	r5, #0
 800dc32:	2501      	movle	r5, #1
 800dc34:	2b03      	cmp	r3, #3
 800dc36:	f200 8085 	bhi.w	800dd44 <_dtoa_r+0x30c>
 800dc3a:	e8df f003 	tbb	[pc, r3]
 800dc3e:	3b2e      	.short	0x3b2e
 800dc40:	5839      	.short	0x5839
 800dc42:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dc46:	441d      	add	r5, r3
 800dc48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dc4c:	2b20      	cmp	r3, #32
 800dc4e:	bfc1      	itttt	gt
 800dc50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dc54:	fa08 f803 	lslgt.w	r8, r8, r3
 800dc58:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dc5c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dc60:	bfd6      	itet	le
 800dc62:	f1c3 0320 	rsble	r3, r3, #32
 800dc66:	ea48 0003 	orrgt.w	r0, r8, r3
 800dc6a:	fa06 f003 	lslle.w	r0, r6, r3
 800dc6e:	f7f2 fc51 	bl	8000514 <__aeabi_ui2d>
 800dc72:	2201      	movs	r2, #1
 800dc74:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800dc78:	3d01      	subs	r5, #1
 800dc7a:	920e      	str	r2, [sp, #56]	; 0x38
 800dc7c:	e76f      	b.n	800db5e <_dtoa_r+0x126>
 800dc7e:	2301      	movs	r3, #1
 800dc80:	e7b3      	b.n	800dbea <_dtoa_r+0x1b2>
 800dc82:	900c      	str	r0, [sp, #48]	; 0x30
 800dc84:	e7b2      	b.n	800dbec <_dtoa_r+0x1b4>
 800dc86:	9b05      	ldr	r3, [sp, #20]
 800dc88:	eba3 030b 	sub.w	r3, r3, fp
 800dc8c:	9305      	str	r3, [sp, #20]
 800dc8e:	f1cb 0300 	rsb	r3, fp, #0
 800dc92:	9308      	str	r3, [sp, #32]
 800dc94:	2300      	movs	r3, #0
 800dc96:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc98:	e7bf      	b.n	800dc1a <_dtoa_r+0x1e2>
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	dc52      	bgt.n	800dd4a <_dtoa_r+0x312>
 800dca4:	2301      	movs	r3, #1
 800dca6:	9301      	str	r3, [sp, #4]
 800dca8:	9304      	str	r3, [sp, #16]
 800dcaa:	461a      	mov	r2, r3
 800dcac:	920a      	str	r2, [sp, #40]	; 0x28
 800dcae:	e00b      	b.n	800dcc8 <_dtoa_r+0x290>
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	e7f3      	b.n	800dc9c <_dtoa_r+0x264>
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	9309      	str	r3, [sp, #36]	; 0x24
 800dcb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcba:	445b      	add	r3, fp
 800dcbc:	9301      	str	r3, [sp, #4]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	9304      	str	r3, [sp, #16]
 800dcc4:	bfb8      	it	lt
 800dcc6:	2301      	movlt	r3, #1
 800dcc8:	69e0      	ldr	r0, [r4, #28]
 800dcca:	2100      	movs	r1, #0
 800dccc:	2204      	movs	r2, #4
 800dcce:	f102 0614 	add.w	r6, r2, #20
 800dcd2:	429e      	cmp	r6, r3
 800dcd4:	d93d      	bls.n	800dd52 <_dtoa_r+0x31a>
 800dcd6:	6041      	str	r1, [r0, #4]
 800dcd8:	4620      	mov	r0, r4
 800dcda:	f000 fd9f 	bl	800e81c <_Balloc>
 800dcde:	9000      	str	r0, [sp, #0]
 800dce0:	2800      	cmp	r0, #0
 800dce2:	d139      	bne.n	800dd58 <_dtoa_r+0x320>
 800dce4:	4b16      	ldr	r3, [pc, #88]	; (800dd40 <_dtoa_r+0x308>)
 800dce6:	4602      	mov	r2, r0
 800dce8:	f240 11af 	movw	r1, #431	; 0x1af
 800dcec:	e6bd      	b.n	800da6a <_dtoa_r+0x32>
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e7e1      	b.n	800dcb6 <_dtoa_r+0x27e>
 800dcf2:	2501      	movs	r5, #1
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	9307      	str	r3, [sp, #28]
 800dcf8:	9509      	str	r5, [sp, #36]	; 0x24
 800dcfa:	f04f 33ff 	mov.w	r3, #4294967295
 800dcfe:	9301      	str	r3, [sp, #4]
 800dd00:	9304      	str	r3, [sp, #16]
 800dd02:	2200      	movs	r2, #0
 800dd04:	2312      	movs	r3, #18
 800dd06:	e7d1      	b.n	800dcac <_dtoa_r+0x274>
 800dd08:	636f4361 	.word	0x636f4361
 800dd0c:	3fd287a7 	.word	0x3fd287a7
 800dd10:	8b60c8b3 	.word	0x8b60c8b3
 800dd14:	3fc68a28 	.word	0x3fc68a28
 800dd18:	509f79fb 	.word	0x509f79fb
 800dd1c:	3fd34413 	.word	0x3fd34413
 800dd20:	0800f781 	.word	0x0800f781
 800dd24:	0800f798 	.word	0x0800f798
 800dd28:	7ff00000 	.word	0x7ff00000
 800dd2c:	0800f77d 	.word	0x0800f77d
 800dd30:	0800f774 	.word	0x0800f774
 800dd34:	0800f751 	.word	0x0800f751
 800dd38:	3ff80000 	.word	0x3ff80000
 800dd3c:	0800f888 	.word	0x0800f888
 800dd40:	0800f7f0 	.word	0x0800f7f0
 800dd44:	2301      	movs	r3, #1
 800dd46:	9309      	str	r3, [sp, #36]	; 0x24
 800dd48:	e7d7      	b.n	800dcfa <_dtoa_r+0x2c2>
 800dd4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd4c:	9301      	str	r3, [sp, #4]
 800dd4e:	9304      	str	r3, [sp, #16]
 800dd50:	e7ba      	b.n	800dcc8 <_dtoa_r+0x290>
 800dd52:	3101      	adds	r1, #1
 800dd54:	0052      	lsls	r2, r2, #1
 800dd56:	e7ba      	b.n	800dcce <_dtoa_r+0x296>
 800dd58:	69e3      	ldr	r3, [r4, #28]
 800dd5a:	9a00      	ldr	r2, [sp, #0]
 800dd5c:	601a      	str	r2, [r3, #0]
 800dd5e:	9b04      	ldr	r3, [sp, #16]
 800dd60:	2b0e      	cmp	r3, #14
 800dd62:	f200 80a8 	bhi.w	800deb6 <_dtoa_r+0x47e>
 800dd66:	2d00      	cmp	r5, #0
 800dd68:	f000 80a5 	beq.w	800deb6 <_dtoa_r+0x47e>
 800dd6c:	f1bb 0f00 	cmp.w	fp, #0
 800dd70:	dd38      	ble.n	800dde4 <_dtoa_r+0x3ac>
 800dd72:	4bc0      	ldr	r3, [pc, #768]	; (800e074 <_dtoa_r+0x63c>)
 800dd74:	f00b 020f 	and.w	r2, fp, #15
 800dd78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dd80:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dd84:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dd88:	d019      	beq.n	800ddbe <_dtoa_r+0x386>
 800dd8a:	4bbb      	ldr	r3, [pc, #748]	; (800e078 <_dtoa_r+0x640>)
 800dd8c:	ec51 0b18 	vmov	r0, r1, d8
 800dd90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd94:	f7f2 fd62 	bl	800085c <__aeabi_ddiv>
 800dd98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd9c:	f008 080f 	and.w	r8, r8, #15
 800dda0:	2503      	movs	r5, #3
 800dda2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e078 <_dtoa_r+0x640>
 800dda6:	f1b8 0f00 	cmp.w	r8, #0
 800ddaa:	d10a      	bne.n	800ddc2 <_dtoa_r+0x38a>
 800ddac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddb0:	4632      	mov	r2, r6
 800ddb2:	463b      	mov	r3, r7
 800ddb4:	f7f2 fd52 	bl	800085c <__aeabi_ddiv>
 800ddb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddbc:	e02b      	b.n	800de16 <_dtoa_r+0x3de>
 800ddbe:	2502      	movs	r5, #2
 800ddc0:	e7ef      	b.n	800dda2 <_dtoa_r+0x36a>
 800ddc2:	f018 0f01 	tst.w	r8, #1
 800ddc6:	d008      	beq.n	800ddda <_dtoa_r+0x3a2>
 800ddc8:	4630      	mov	r0, r6
 800ddca:	4639      	mov	r1, r7
 800ddcc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ddd0:	f7f2 fc1a 	bl	8000608 <__aeabi_dmul>
 800ddd4:	3501      	adds	r5, #1
 800ddd6:	4606      	mov	r6, r0
 800ddd8:	460f      	mov	r7, r1
 800ddda:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ddde:	f109 0908 	add.w	r9, r9, #8
 800dde2:	e7e0      	b.n	800dda6 <_dtoa_r+0x36e>
 800dde4:	f000 809f 	beq.w	800df26 <_dtoa_r+0x4ee>
 800dde8:	f1cb 0600 	rsb	r6, fp, #0
 800ddec:	4ba1      	ldr	r3, [pc, #644]	; (800e074 <_dtoa_r+0x63c>)
 800ddee:	4fa2      	ldr	r7, [pc, #648]	; (800e078 <_dtoa_r+0x640>)
 800ddf0:	f006 020f 	and.w	r2, r6, #15
 800ddf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfc:	ec51 0b18 	vmov	r0, r1, d8
 800de00:	f7f2 fc02 	bl	8000608 <__aeabi_dmul>
 800de04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de08:	1136      	asrs	r6, r6, #4
 800de0a:	2300      	movs	r3, #0
 800de0c:	2502      	movs	r5, #2
 800de0e:	2e00      	cmp	r6, #0
 800de10:	d17e      	bne.n	800df10 <_dtoa_r+0x4d8>
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1d0      	bne.n	800ddb8 <_dtoa_r+0x380>
 800de16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	f000 8084 	beq.w	800df2a <_dtoa_r+0x4f2>
 800de22:	4b96      	ldr	r3, [pc, #600]	; (800e07c <_dtoa_r+0x644>)
 800de24:	2200      	movs	r2, #0
 800de26:	4640      	mov	r0, r8
 800de28:	4649      	mov	r1, r9
 800de2a:	f7f2 fe5f 	bl	8000aec <__aeabi_dcmplt>
 800de2e:	2800      	cmp	r0, #0
 800de30:	d07b      	beq.n	800df2a <_dtoa_r+0x4f2>
 800de32:	9b04      	ldr	r3, [sp, #16]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d078      	beq.n	800df2a <_dtoa_r+0x4f2>
 800de38:	9b01      	ldr	r3, [sp, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	dd39      	ble.n	800deb2 <_dtoa_r+0x47a>
 800de3e:	4b90      	ldr	r3, [pc, #576]	; (800e080 <_dtoa_r+0x648>)
 800de40:	2200      	movs	r2, #0
 800de42:	4640      	mov	r0, r8
 800de44:	4649      	mov	r1, r9
 800de46:	f7f2 fbdf 	bl	8000608 <__aeabi_dmul>
 800de4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de4e:	9e01      	ldr	r6, [sp, #4]
 800de50:	f10b 37ff 	add.w	r7, fp, #4294967295
 800de54:	3501      	adds	r5, #1
 800de56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800de5a:	4628      	mov	r0, r5
 800de5c:	f7f2 fb6a 	bl	8000534 <__aeabi_i2d>
 800de60:	4642      	mov	r2, r8
 800de62:	464b      	mov	r3, r9
 800de64:	f7f2 fbd0 	bl	8000608 <__aeabi_dmul>
 800de68:	4b86      	ldr	r3, [pc, #536]	; (800e084 <_dtoa_r+0x64c>)
 800de6a:	2200      	movs	r2, #0
 800de6c:	f7f2 fa16 	bl	800029c <__adddf3>
 800de70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800de74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de78:	9303      	str	r3, [sp, #12]
 800de7a:	2e00      	cmp	r6, #0
 800de7c:	d158      	bne.n	800df30 <_dtoa_r+0x4f8>
 800de7e:	4b82      	ldr	r3, [pc, #520]	; (800e088 <_dtoa_r+0x650>)
 800de80:	2200      	movs	r2, #0
 800de82:	4640      	mov	r0, r8
 800de84:	4649      	mov	r1, r9
 800de86:	f7f2 fa07 	bl	8000298 <__aeabi_dsub>
 800de8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de8e:	4680      	mov	r8, r0
 800de90:	4689      	mov	r9, r1
 800de92:	f7f2 fe49 	bl	8000b28 <__aeabi_dcmpgt>
 800de96:	2800      	cmp	r0, #0
 800de98:	f040 8296 	bne.w	800e3c8 <_dtoa_r+0x990>
 800de9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dea0:	4640      	mov	r0, r8
 800dea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dea6:	4649      	mov	r1, r9
 800dea8:	f7f2 fe20 	bl	8000aec <__aeabi_dcmplt>
 800deac:	2800      	cmp	r0, #0
 800deae:	f040 8289 	bne.w	800e3c4 <_dtoa_r+0x98c>
 800deb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800deb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800deb8:	2b00      	cmp	r3, #0
 800deba:	f2c0 814e 	blt.w	800e15a <_dtoa_r+0x722>
 800debe:	f1bb 0f0e 	cmp.w	fp, #14
 800dec2:	f300 814a 	bgt.w	800e15a <_dtoa_r+0x722>
 800dec6:	4b6b      	ldr	r3, [pc, #428]	; (800e074 <_dtoa_r+0x63c>)
 800dec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800decc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ded0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	f280 80dc 	bge.w	800e090 <_dtoa_r+0x658>
 800ded8:	9b04      	ldr	r3, [sp, #16]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	f300 80d8 	bgt.w	800e090 <_dtoa_r+0x658>
 800dee0:	f040 826f 	bne.w	800e3c2 <_dtoa_r+0x98a>
 800dee4:	4b68      	ldr	r3, [pc, #416]	; (800e088 <_dtoa_r+0x650>)
 800dee6:	2200      	movs	r2, #0
 800dee8:	4640      	mov	r0, r8
 800deea:	4649      	mov	r1, r9
 800deec:	f7f2 fb8c 	bl	8000608 <__aeabi_dmul>
 800def0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800def4:	f7f2 fe0e 	bl	8000b14 <__aeabi_dcmpge>
 800def8:	9e04      	ldr	r6, [sp, #16]
 800defa:	4637      	mov	r7, r6
 800defc:	2800      	cmp	r0, #0
 800defe:	f040 8245 	bne.w	800e38c <_dtoa_r+0x954>
 800df02:	9d00      	ldr	r5, [sp, #0]
 800df04:	2331      	movs	r3, #49	; 0x31
 800df06:	f805 3b01 	strb.w	r3, [r5], #1
 800df0a:	f10b 0b01 	add.w	fp, fp, #1
 800df0e:	e241      	b.n	800e394 <_dtoa_r+0x95c>
 800df10:	07f2      	lsls	r2, r6, #31
 800df12:	d505      	bpl.n	800df20 <_dtoa_r+0x4e8>
 800df14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df18:	f7f2 fb76 	bl	8000608 <__aeabi_dmul>
 800df1c:	3501      	adds	r5, #1
 800df1e:	2301      	movs	r3, #1
 800df20:	1076      	asrs	r6, r6, #1
 800df22:	3708      	adds	r7, #8
 800df24:	e773      	b.n	800de0e <_dtoa_r+0x3d6>
 800df26:	2502      	movs	r5, #2
 800df28:	e775      	b.n	800de16 <_dtoa_r+0x3de>
 800df2a:	9e04      	ldr	r6, [sp, #16]
 800df2c:	465f      	mov	r7, fp
 800df2e:	e792      	b.n	800de56 <_dtoa_r+0x41e>
 800df30:	9900      	ldr	r1, [sp, #0]
 800df32:	4b50      	ldr	r3, [pc, #320]	; (800e074 <_dtoa_r+0x63c>)
 800df34:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df38:	4431      	add	r1, r6
 800df3a:	9102      	str	r1, [sp, #8]
 800df3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df3e:	eeb0 9a47 	vmov.f32	s18, s14
 800df42:	eef0 9a67 	vmov.f32	s19, s15
 800df46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800df4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800df4e:	2900      	cmp	r1, #0
 800df50:	d044      	beq.n	800dfdc <_dtoa_r+0x5a4>
 800df52:	494e      	ldr	r1, [pc, #312]	; (800e08c <_dtoa_r+0x654>)
 800df54:	2000      	movs	r0, #0
 800df56:	f7f2 fc81 	bl	800085c <__aeabi_ddiv>
 800df5a:	ec53 2b19 	vmov	r2, r3, d9
 800df5e:	f7f2 f99b 	bl	8000298 <__aeabi_dsub>
 800df62:	9d00      	ldr	r5, [sp, #0]
 800df64:	ec41 0b19 	vmov	d9, r0, r1
 800df68:	4649      	mov	r1, r9
 800df6a:	4640      	mov	r0, r8
 800df6c:	f7f2 fdfc 	bl	8000b68 <__aeabi_d2iz>
 800df70:	4606      	mov	r6, r0
 800df72:	f7f2 fadf 	bl	8000534 <__aeabi_i2d>
 800df76:	4602      	mov	r2, r0
 800df78:	460b      	mov	r3, r1
 800df7a:	4640      	mov	r0, r8
 800df7c:	4649      	mov	r1, r9
 800df7e:	f7f2 f98b 	bl	8000298 <__aeabi_dsub>
 800df82:	3630      	adds	r6, #48	; 0x30
 800df84:	f805 6b01 	strb.w	r6, [r5], #1
 800df88:	ec53 2b19 	vmov	r2, r3, d9
 800df8c:	4680      	mov	r8, r0
 800df8e:	4689      	mov	r9, r1
 800df90:	f7f2 fdac 	bl	8000aec <__aeabi_dcmplt>
 800df94:	2800      	cmp	r0, #0
 800df96:	d164      	bne.n	800e062 <_dtoa_r+0x62a>
 800df98:	4642      	mov	r2, r8
 800df9a:	464b      	mov	r3, r9
 800df9c:	4937      	ldr	r1, [pc, #220]	; (800e07c <_dtoa_r+0x644>)
 800df9e:	2000      	movs	r0, #0
 800dfa0:	f7f2 f97a 	bl	8000298 <__aeabi_dsub>
 800dfa4:	ec53 2b19 	vmov	r2, r3, d9
 800dfa8:	f7f2 fda0 	bl	8000aec <__aeabi_dcmplt>
 800dfac:	2800      	cmp	r0, #0
 800dfae:	f040 80b6 	bne.w	800e11e <_dtoa_r+0x6e6>
 800dfb2:	9b02      	ldr	r3, [sp, #8]
 800dfb4:	429d      	cmp	r5, r3
 800dfb6:	f43f af7c 	beq.w	800deb2 <_dtoa_r+0x47a>
 800dfba:	4b31      	ldr	r3, [pc, #196]	; (800e080 <_dtoa_r+0x648>)
 800dfbc:	ec51 0b19 	vmov	r0, r1, d9
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f7f2 fb21 	bl	8000608 <__aeabi_dmul>
 800dfc6:	4b2e      	ldr	r3, [pc, #184]	; (800e080 <_dtoa_r+0x648>)
 800dfc8:	ec41 0b19 	vmov	d9, r0, r1
 800dfcc:	2200      	movs	r2, #0
 800dfce:	4640      	mov	r0, r8
 800dfd0:	4649      	mov	r1, r9
 800dfd2:	f7f2 fb19 	bl	8000608 <__aeabi_dmul>
 800dfd6:	4680      	mov	r8, r0
 800dfd8:	4689      	mov	r9, r1
 800dfda:	e7c5      	b.n	800df68 <_dtoa_r+0x530>
 800dfdc:	ec51 0b17 	vmov	r0, r1, d7
 800dfe0:	f7f2 fb12 	bl	8000608 <__aeabi_dmul>
 800dfe4:	9b02      	ldr	r3, [sp, #8]
 800dfe6:	9d00      	ldr	r5, [sp, #0]
 800dfe8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfea:	ec41 0b19 	vmov	d9, r0, r1
 800dfee:	4649      	mov	r1, r9
 800dff0:	4640      	mov	r0, r8
 800dff2:	f7f2 fdb9 	bl	8000b68 <__aeabi_d2iz>
 800dff6:	4606      	mov	r6, r0
 800dff8:	f7f2 fa9c 	bl	8000534 <__aeabi_i2d>
 800dffc:	3630      	adds	r6, #48	; 0x30
 800dffe:	4602      	mov	r2, r0
 800e000:	460b      	mov	r3, r1
 800e002:	4640      	mov	r0, r8
 800e004:	4649      	mov	r1, r9
 800e006:	f7f2 f947 	bl	8000298 <__aeabi_dsub>
 800e00a:	f805 6b01 	strb.w	r6, [r5], #1
 800e00e:	9b02      	ldr	r3, [sp, #8]
 800e010:	429d      	cmp	r5, r3
 800e012:	4680      	mov	r8, r0
 800e014:	4689      	mov	r9, r1
 800e016:	f04f 0200 	mov.w	r2, #0
 800e01a:	d124      	bne.n	800e066 <_dtoa_r+0x62e>
 800e01c:	4b1b      	ldr	r3, [pc, #108]	; (800e08c <_dtoa_r+0x654>)
 800e01e:	ec51 0b19 	vmov	r0, r1, d9
 800e022:	f7f2 f93b 	bl	800029c <__adddf3>
 800e026:	4602      	mov	r2, r0
 800e028:	460b      	mov	r3, r1
 800e02a:	4640      	mov	r0, r8
 800e02c:	4649      	mov	r1, r9
 800e02e:	f7f2 fd7b 	bl	8000b28 <__aeabi_dcmpgt>
 800e032:	2800      	cmp	r0, #0
 800e034:	d173      	bne.n	800e11e <_dtoa_r+0x6e6>
 800e036:	ec53 2b19 	vmov	r2, r3, d9
 800e03a:	4914      	ldr	r1, [pc, #80]	; (800e08c <_dtoa_r+0x654>)
 800e03c:	2000      	movs	r0, #0
 800e03e:	f7f2 f92b 	bl	8000298 <__aeabi_dsub>
 800e042:	4602      	mov	r2, r0
 800e044:	460b      	mov	r3, r1
 800e046:	4640      	mov	r0, r8
 800e048:	4649      	mov	r1, r9
 800e04a:	f7f2 fd4f 	bl	8000aec <__aeabi_dcmplt>
 800e04e:	2800      	cmp	r0, #0
 800e050:	f43f af2f 	beq.w	800deb2 <_dtoa_r+0x47a>
 800e054:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e056:	1e6b      	subs	r3, r5, #1
 800e058:	930f      	str	r3, [sp, #60]	; 0x3c
 800e05a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e05e:	2b30      	cmp	r3, #48	; 0x30
 800e060:	d0f8      	beq.n	800e054 <_dtoa_r+0x61c>
 800e062:	46bb      	mov	fp, r7
 800e064:	e04a      	b.n	800e0fc <_dtoa_r+0x6c4>
 800e066:	4b06      	ldr	r3, [pc, #24]	; (800e080 <_dtoa_r+0x648>)
 800e068:	f7f2 face 	bl	8000608 <__aeabi_dmul>
 800e06c:	4680      	mov	r8, r0
 800e06e:	4689      	mov	r9, r1
 800e070:	e7bd      	b.n	800dfee <_dtoa_r+0x5b6>
 800e072:	bf00      	nop
 800e074:	0800f888 	.word	0x0800f888
 800e078:	0800f860 	.word	0x0800f860
 800e07c:	3ff00000 	.word	0x3ff00000
 800e080:	40240000 	.word	0x40240000
 800e084:	401c0000 	.word	0x401c0000
 800e088:	40140000 	.word	0x40140000
 800e08c:	3fe00000 	.word	0x3fe00000
 800e090:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e094:	9d00      	ldr	r5, [sp, #0]
 800e096:	4642      	mov	r2, r8
 800e098:	464b      	mov	r3, r9
 800e09a:	4630      	mov	r0, r6
 800e09c:	4639      	mov	r1, r7
 800e09e:	f7f2 fbdd 	bl	800085c <__aeabi_ddiv>
 800e0a2:	f7f2 fd61 	bl	8000b68 <__aeabi_d2iz>
 800e0a6:	9001      	str	r0, [sp, #4]
 800e0a8:	f7f2 fa44 	bl	8000534 <__aeabi_i2d>
 800e0ac:	4642      	mov	r2, r8
 800e0ae:	464b      	mov	r3, r9
 800e0b0:	f7f2 faaa 	bl	8000608 <__aeabi_dmul>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	4639      	mov	r1, r7
 800e0bc:	f7f2 f8ec 	bl	8000298 <__aeabi_dsub>
 800e0c0:	9e01      	ldr	r6, [sp, #4]
 800e0c2:	9f04      	ldr	r7, [sp, #16]
 800e0c4:	3630      	adds	r6, #48	; 0x30
 800e0c6:	f805 6b01 	strb.w	r6, [r5], #1
 800e0ca:	9e00      	ldr	r6, [sp, #0]
 800e0cc:	1bae      	subs	r6, r5, r6
 800e0ce:	42b7      	cmp	r7, r6
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	d134      	bne.n	800e140 <_dtoa_r+0x708>
 800e0d6:	f7f2 f8e1 	bl	800029c <__adddf3>
 800e0da:	4642      	mov	r2, r8
 800e0dc:	464b      	mov	r3, r9
 800e0de:	4606      	mov	r6, r0
 800e0e0:	460f      	mov	r7, r1
 800e0e2:	f7f2 fd21 	bl	8000b28 <__aeabi_dcmpgt>
 800e0e6:	b9c8      	cbnz	r0, 800e11c <_dtoa_r+0x6e4>
 800e0e8:	4642      	mov	r2, r8
 800e0ea:	464b      	mov	r3, r9
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	4639      	mov	r1, r7
 800e0f0:	f7f2 fcf2 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0f4:	b110      	cbz	r0, 800e0fc <_dtoa_r+0x6c4>
 800e0f6:	9b01      	ldr	r3, [sp, #4]
 800e0f8:	07db      	lsls	r3, r3, #31
 800e0fa:	d40f      	bmi.n	800e11c <_dtoa_r+0x6e4>
 800e0fc:	4651      	mov	r1, sl
 800e0fe:	4620      	mov	r0, r4
 800e100:	f000 fbcc 	bl	800e89c <_Bfree>
 800e104:	2300      	movs	r3, #0
 800e106:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e108:	702b      	strb	r3, [r5, #0]
 800e10a:	f10b 0301 	add.w	r3, fp, #1
 800e10e:	6013      	str	r3, [r2, #0]
 800e110:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e112:	2b00      	cmp	r3, #0
 800e114:	f43f ace2 	beq.w	800dadc <_dtoa_r+0xa4>
 800e118:	601d      	str	r5, [r3, #0]
 800e11a:	e4df      	b.n	800dadc <_dtoa_r+0xa4>
 800e11c:	465f      	mov	r7, fp
 800e11e:	462b      	mov	r3, r5
 800e120:	461d      	mov	r5, r3
 800e122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e126:	2a39      	cmp	r2, #57	; 0x39
 800e128:	d106      	bne.n	800e138 <_dtoa_r+0x700>
 800e12a:	9a00      	ldr	r2, [sp, #0]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d1f7      	bne.n	800e120 <_dtoa_r+0x6e8>
 800e130:	9900      	ldr	r1, [sp, #0]
 800e132:	2230      	movs	r2, #48	; 0x30
 800e134:	3701      	adds	r7, #1
 800e136:	700a      	strb	r2, [r1, #0]
 800e138:	781a      	ldrb	r2, [r3, #0]
 800e13a:	3201      	adds	r2, #1
 800e13c:	701a      	strb	r2, [r3, #0]
 800e13e:	e790      	b.n	800e062 <_dtoa_r+0x62a>
 800e140:	4ba3      	ldr	r3, [pc, #652]	; (800e3d0 <_dtoa_r+0x998>)
 800e142:	2200      	movs	r2, #0
 800e144:	f7f2 fa60 	bl	8000608 <__aeabi_dmul>
 800e148:	2200      	movs	r2, #0
 800e14a:	2300      	movs	r3, #0
 800e14c:	4606      	mov	r6, r0
 800e14e:	460f      	mov	r7, r1
 800e150:	f7f2 fcc2 	bl	8000ad8 <__aeabi_dcmpeq>
 800e154:	2800      	cmp	r0, #0
 800e156:	d09e      	beq.n	800e096 <_dtoa_r+0x65e>
 800e158:	e7d0      	b.n	800e0fc <_dtoa_r+0x6c4>
 800e15a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e15c:	2a00      	cmp	r2, #0
 800e15e:	f000 80ca 	beq.w	800e2f6 <_dtoa_r+0x8be>
 800e162:	9a07      	ldr	r2, [sp, #28]
 800e164:	2a01      	cmp	r2, #1
 800e166:	f300 80ad 	bgt.w	800e2c4 <_dtoa_r+0x88c>
 800e16a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e16c:	2a00      	cmp	r2, #0
 800e16e:	f000 80a5 	beq.w	800e2bc <_dtoa_r+0x884>
 800e172:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e176:	9e08      	ldr	r6, [sp, #32]
 800e178:	9d05      	ldr	r5, [sp, #20]
 800e17a:	9a05      	ldr	r2, [sp, #20]
 800e17c:	441a      	add	r2, r3
 800e17e:	9205      	str	r2, [sp, #20]
 800e180:	9a06      	ldr	r2, [sp, #24]
 800e182:	2101      	movs	r1, #1
 800e184:	441a      	add	r2, r3
 800e186:	4620      	mov	r0, r4
 800e188:	9206      	str	r2, [sp, #24]
 800e18a:	f000 fc3d 	bl	800ea08 <__i2b>
 800e18e:	4607      	mov	r7, r0
 800e190:	b165      	cbz	r5, 800e1ac <_dtoa_r+0x774>
 800e192:	9b06      	ldr	r3, [sp, #24]
 800e194:	2b00      	cmp	r3, #0
 800e196:	dd09      	ble.n	800e1ac <_dtoa_r+0x774>
 800e198:	42ab      	cmp	r3, r5
 800e19a:	9a05      	ldr	r2, [sp, #20]
 800e19c:	bfa8      	it	ge
 800e19e:	462b      	movge	r3, r5
 800e1a0:	1ad2      	subs	r2, r2, r3
 800e1a2:	9205      	str	r2, [sp, #20]
 800e1a4:	9a06      	ldr	r2, [sp, #24]
 800e1a6:	1aed      	subs	r5, r5, r3
 800e1a8:	1ad3      	subs	r3, r2, r3
 800e1aa:	9306      	str	r3, [sp, #24]
 800e1ac:	9b08      	ldr	r3, [sp, #32]
 800e1ae:	b1f3      	cbz	r3, 800e1ee <_dtoa_r+0x7b6>
 800e1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	f000 80a3 	beq.w	800e2fe <_dtoa_r+0x8c6>
 800e1b8:	2e00      	cmp	r6, #0
 800e1ba:	dd10      	ble.n	800e1de <_dtoa_r+0x7a6>
 800e1bc:	4639      	mov	r1, r7
 800e1be:	4632      	mov	r2, r6
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f000 fce1 	bl	800eb88 <__pow5mult>
 800e1c6:	4652      	mov	r2, sl
 800e1c8:	4601      	mov	r1, r0
 800e1ca:	4607      	mov	r7, r0
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	f000 fc31 	bl	800ea34 <__multiply>
 800e1d2:	4651      	mov	r1, sl
 800e1d4:	4680      	mov	r8, r0
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	f000 fb60 	bl	800e89c <_Bfree>
 800e1dc:	46c2      	mov	sl, r8
 800e1de:	9b08      	ldr	r3, [sp, #32]
 800e1e0:	1b9a      	subs	r2, r3, r6
 800e1e2:	d004      	beq.n	800e1ee <_dtoa_r+0x7b6>
 800e1e4:	4651      	mov	r1, sl
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f000 fcce 	bl	800eb88 <__pow5mult>
 800e1ec:	4682      	mov	sl, r0
 800e1ee:	2101      	movs	r1, #1
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	f000 fc09 	bl	800ea08 <__i2b>
 800e1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	4606      	mov	r6, r0
 800e1fc:	f340 8081 	ble.w	800e302 <_dtoa_r+0x8ca>
 800e200:	461a      	mov	r2, r3
 800e202:	4601      	mov	r1, r0
 800e204:	4620      	mov	r0, r4
 800e206:	f000 fcbf 	bl	800eb88 <__pow5mult>
 800e20a:	9b07      	ldr	r3, [sp, #28]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	4606      	mov	r6, r0
 800e210:	dd7a      	ble.n	800e308 <_dtoa_r+0x8d0>
 800e212:	f04f 0800 	mov.w	r8, #0
 800e216:	6933      	ldr	r3, [r6, #16]
 800e218:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e21c:	6918      	ldr	r0, [r3, #16]
 800e21e:	f000 fba5 	bl	800e96c <__hi0bits>
 800e222:	f1c0 0020 	rsb	r0, r0, #32
 800e226:	9b06      	ldr	r3, [sp, #24]
 800e228:	4418      	add	r0, r3
 800e22a:	f010 001f 	ands.w	r0, r0, #31
 800e22e:	f000 8094 	beq.w	800e35a <_dtoa_r+0x922>
 800e232:	f1c0 0320 	rsb	r3, r0, #32
 800e236:	2b04      	cmp	r3, #4
 800e238:	f340 8085 	ble.w	800e346 <_dtoa_r+0x90e>
 800e23c:	9b05      	ldr	r3, [sp, #20]
 800e23e:	f1c0 001c 	rsb	r0, r0, #28
 800e242:	4403      	add	r3, r0
 800e244:	9305      	str	r3, [sp, #20]
 800e246:	9b06      	ldr	r3, [sp, #24]
 800e248:	4403      	add	r3, r0
 800e24a:	4405      	add	r5, r0
 800e24c:	9306      	str	r3, [sp, #24]
 800e24e:	9b05      	ldr	r3, [sp, #20]
 800e250:	2b00      	cmp	r3, #0
 800e252:	dd05      	ble.n	800e260 <_dtoa_r+0x828>
 800e254:	4651      	mov	r1, sl
 800e256:	461a      	mov	r2, r3
 800e258:	4620      	mov	r0, r4
 800e25a:	f000 fcef 	bl	800ec3c <__lshift>
 800e25e:	4682      	mov	sl, r0
 800e260:	9b06      	ldr	r3, [sp, #24]
 800e262:	2b00      	cmp	r3, #0
 800e264:	dd05      	ble.n	800e272 <_dtoa_r+0x83a>
 800e266:	4631      	mov	r1, r6
 800e268:	461a      	mov	r2, r3
 800e26a:	4620      	mov	r0, r4
 800e26c:	f000 fce6 	bl	800ec3c <__lshift>
 800e270:	4606      	mov	r6, r0
 800e272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e274:	2b00      	cmp	r3, #0
 800e276:	d072      	beq.n	800e35e <_dtoa_r+0x926>
 800e278:	4631      	mov	r1, r6
 800e27a:	4650      	mov	r0, sl
 800e27c:	f000 fd4a 	bl	800ed14 <__mcmp>
 800e280:	2800      	cmp	r0, #0
 800e282:	da6c      	bge.n	800e35e <_dtoa_r+0x926>
 800e284:	2300      	movs	r3, #0
 800e286:	4651      	mov	r1, sl
 800e288:	220a      	movs	r2, #10
 800e28a:	4620      	mov	r0, r4
 800e28c:	f000 fb28 	bl	800e8e0 <__multadd>
 800e290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e292:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e296:	4682      	mov	sl, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	f000 81b0 	beq.w	800e5fe <_dtoa_r+0xbc6>
 800e29e:	2300      	movs	r3, #0
 800e2a0:	4639      	mov	r1, r7
 800e2a2:	220a      	movs	r2, #10
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f000 fb1b 	bl	800e8e0 <__multadd>
 800e2aa:	9b01      	ldr	r3, [sp, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	4607      	mov	r7, r0
 800e2b0:	f300 8096 	bgt.w	800e3e0 <_dtoa_r+0x9a8>
 800e2b4:	9b07      	ldr	r3, [sp, #28]
 800e2b6:	2b02      	cmp	r3, #2
 800e2b8:	dc59      	bgt.n	800e36e <_dtoa_r+0x936>
 800e2ba:	e091      	b.n	800e3e0 <_dtoa_r+0x9a8>
 800e2bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e2c2:	e758      	b.n	800e176 <_dtoa_r+0x73e>
 800e2c4:	9b04      	ldr	r3, [sp, #16]
 800e2c6:	1e5e      	subs	r6, r3, #1
 800e2c8:	9b08      	ldr	r3, [sp, #32]
 800e2ca:	42b3      	cmp	r3, r6
 800e2cc:	bfbf      	itttt	lt
 800e2ce:	9b08      	ldrlt	r3, [sp, #32]
 800e2d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e2d2:	9608      	strlt	r6, [sp, #32]
 800e2d4:	1af3      	sublt	r3, r6, r3
 800e2d6:	bfb4      	ite	lt
 800e2d8:	18d2      	addlt	r2, r2, r3
 800e2da:	1b9e      	subge	r6, r3, r6
 800e2dc:	9b04      	ldr	r3, [sp, #16]
 800e2de:	bfbc      	itt	lt
 800e2e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e2e2:	2600      	movlt	r6, #0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	bfb7      	itett	lt
 800e2e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e2ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e2f0:	1a9d      	sublt	r5, r3, r2
 800e2f2:	2300      	movlt	r3, #0
 800e2f4:	e741      	b.n	800e17a <_dtoa_r+0x742>
 800e2f6:	9e08      	ldr	r6, [sp, #32]
 800e2f8:	9d05      	ldr	r5, [sp, #20]
 800e2fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e2fc:	e748      	b.n	800e190 <_dtoa_r+0x758>
 800e2fe:	9a08      	ldr	r2, [sp, #32]
 800e300:	e770      	b.n	800e1e4 <_dtoa_r+0x7ac>
 800e302:	9b07      	ldr	r3, [sp, #28]
 800e304:	2b01      	cmp	r3, #1
 800e306:	dc19      	bgt.n	800e33c <_dtoa_r+0x904>
 800e308:	9b02      	ldr	r3, [sp, #8]
 800e30a:	b9bb      	cbnz	r3, 800e33c <_dtoa_r+0x904>
 800e30c:	9b03      	ldr	r3, [sp, #12]
 800e30e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e312:	b99b      	cbnz	r3, 800e33c <_dtoa_r+0x904>
 800e314:	9b03      	ldr	r3, [sp, #12]
 800e316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e31a:	0d1b      	lsrs	r3, r3, #20
 800e31c:	051b      	lsls	r3, r3, #20
 800e31e:	b183      	cbz	r3, 800e342 <_dtoa_r+0x90a>
 800e320:	9b05      	ldr	r3, [sp, #20]
 800e322:	3301      	adds	r3, #1
 800e324:	9305      	str	r3, [sp, #20]
 800e326:	9b06      	ldr	r3, [sp, #24]
 800e328:	3301      	adds	r3, #1
 800e32a:	9306      	str	r3, [sp, #24]
 800e32c:	f04f 0801 	mov.w	r8, #1
 800e330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e332:	2b00      	cmp	r3, #0
 800e334:	f47f af6f 	bne.w	800e216 <_dtoa_r+0x7de>
 800e338:	2001      	movs	r0, #1
 800e33a:	e774      	b.n	800e226 <_dtoa_r+0x7ee>
 800e33c:	f04f 0800 	mov.w	r8, #0
 800e340:	e7f6      	b.n	800e330 <_dtoa_r+0x8f8>
 800e342:	4698      	mov	r8, r3
 800e344:	e7f4      	b.n	800e330 <_dtoa_r+0x8f8>
 800e346:	d082      	beq.n	800e24e <_dtoa_r+0x816>
 800e348:	9a05      	ldr	r2, [sp, #20]
 800e34a:	331c      	adds	r3, #28
 800e34c:	441a      	add	r2, r3
 800e34e:	9205      	str	r2, [sp, #20]
 800e350:	9a06      	ldr	r2, [sp, #24]
 800e352:	441a      	add	r2, r3
 800e354:	441d      	add	r5, r3
 800e356:	9206      	str	r2, [sp, #24]
 800e358:	e779      	b.n	800e24e <_dtoa_r+0x816>
 800e35a:	4603      	mov	r3, r0
 800e35c:	e7f4      	b.n	800e348 <_dtoa_r+0x910>
 800e35e:	9b04      	ldr	r3, [sp, #16]
 800e360:	2b00      	cmp	r3, #0
 800e362:	dc37      	bgt.n	800e3d4 <_dtoa_r+0x99c>
 800e364:	9b07      	ldr	r3, [sp, #28]
 800e366:	2b02      	cmp	r3, #2
 800e368:	dd34      	ble.n	800e3d4 <_dtoa_r+0x99c>
 800e36a:	9b04      	ldr	r3, [sp, #16]
 800e36c:	9301      	str	r3, [sp, #4]
 800e36e:	9b01      	ldr	r3, [sp, #4]
 800e370:	b963      	cbnz	r3, 800e38c <_dtoa_r+0x954>
 800e372:	4631      	mov	r1, r6
 800e374:	2205      	movs	r2, #5
 800e376:	4620      	mov	r0, r4
 800e378:	f000 fab2 	bl	800e8e0 <__multadd>
 800e37c:	4601      	mov	r1, r0
 800e37e:	4606      	mov	r6, r0
 800e380:	4650      	mov	r0, sl
 800e382:	f000 fcc7 	bl	800ed14 <__mcmp>
 800e386:	2800      	cmp	r0, #0
 800e388:	f73f adbb 	bgt.w	800df02 <_dtoa_r+0x4ca>
 800e38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e38e:	9d00      	ldr	r5, [sp, #0]
 800e390:	ea6f 0b03 	mvn.w	fp, r3
 800e394:	f04f 0800 	mov.w	r8, #0
 800e398:	4631      	mov	r1, r6
 800e39a:	4620      	mov	r0, r4
 800e39c:	f000 fa7e 	bl	800e89c <_Bfree>
 800e3a0:	2f00      	cmp	r7, #0
 800e3a2:	f43f aeab 	beq.w	800e0fc <_dtoa_r+0x6c4>
 800e3a6:	f1b8 0f00 	cmp.w	r8, #0
 800e3aa:	d005      	beq.n	800e3b8 <_dtoa_r+0x980>
 800e3ac:	45b8      	cmp	r8, r7
 800e3ae:	d003      	beq.n	800e3b8 <_dtoa_r+0x980>
 800e3b0:	4641      	mov	r1, r8
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f000 fa72 	bl	800e89c <_Bfree>
 800e3b8:	4639      	mov	r1, r7
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f000 fa6e 	bl	800e89c <_Bfree>
 800e3c0:	e69c      	b.n	800e0fc <_dtoa_r+0x6c4>
 800e3c2:	2600      	movs	r6, #0
 800e3c4:	4637      	mov	r7, r6
 800e3c6:	e7e1      	b.n	800e38c <_dtoa_r+0x954>
 800e3c8:	46bb      	mov	fp, r7
 800e3ca:	4637      	mov	r7, r6
 800e3cc:	e599      	b.n	800df02 <_dtoa_r+0x4ca>
 800e3ce:	bf00      	nop
 800e3d0:	40240000 	.word	0x40240000
 800e3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	f000 80c8 	beq.w	800e56c <_dtoa_r+0xb34>
 800e3dc:	9b04      	ldr	r3, [sp, #16]
 800e3de:	9301      	str	r3, [sp, #4]
 800e3e0:	2d00      	cmp	r5, #0
 800e3e2:	dd05      	ble.n	800e3f0 <_dtoa_r+0x9b8>
 800e3e4:	4639      	mov	r1, r7
 800e3e6:	462a      	mov	r2, r5
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	f000 fc27 	bl	800ec3c <__lshift>
 800e3ee:	4607      	mov	r7, r0
 800e3f0:	f1b8 0f00 	cmp.w	r8, #0
 800e3f4:	d05b      	beq.n	800e4ae <_dtoa_r+0xa76>
 800e3f6:	6879      	ldr	r1, [r7, #4]
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f000 fa0f 	bl	800e81c <_Balloc>
 800e3fe:	4605      	mov	r5, r0
 800e400:	b928      	cbnz	r0, 800e40e <_dtoa_r+0x9d6>
 800e402:	4b83      	ldr	r3, [pc, #524]	; (800e610 <_dtoa_r+0xbd8>)
 800e404:	4602      	mov	r2, r0
 800e406:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e40a:	f7ff bb2e 	b.w	800da6a <_dtoa_r+0x32>
 800e40e:	693a      	ldr	r2, [r7, #16]
 800e410:	3202      	adds	r2, #2
 800e412:	0092      	lsls	r2, r2, #2
 800e414:	f107 010c 	add.w	r1, r7, #12
 800e418:	300c      	adds	r0, #12
 800e41a:	f000 fe39 	bl	800f090 <memcpy>
 800e41e:	2201      	movs	r2, #1
 800e420:	4629      	mov	r1, r5
 800e422:	4620      	mov	r0, r4
 800e424:	f000 fc0a 	bl	800ec3c <__lshift>
 800e428:	9b00      	ldr	r3, [sp, #0]
 800e42a:	3301      	adds	r3, #1
 800e42c:	9304      	str	r3, [sp, #16]
 800e42e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e432:	4413      	add	r3, r2
 800e434:	9308      	str	r3, [sp, #32]
 800e436:	9b02      	ldr	r3, [sp, #8]
 800e438:	f003 0301 	and.w	r3, r3, #1
 800e43c:	46b8      	mov	r8, r7
 800e43e:	9306      	str	r3, [sp, #24]
 800e440:	4607      	mov	r7, r0
 800e442:	9b04      	ldr	r3, [sp, #16]
 800e444:	4631      	mov	r1, r6
 800e446:	3b01      	subs	r3, #1
 800e448:	4650      	mov	r0, sl
 800e44a:	9301      	str	r3, [sp, #4]
 800e44c:	f7ff fa69 	bl	800d922 <quorem>
 800e450:	4641      	mov	r1, r8
 800e452:	9002      	str	r0, [sp, #8]
 800e454:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e458:	4650      	mov	r0, sl
 800e45a:	f000 fc5b 	bl	800ed14 <__mcmp>
 800e45e:	463a      	mov	r2, r7
 800e460:	9005      	str	r0, [sp, #20]
 800e462:	4631      	mov	r1, r6
 800e464:	4620      	mov	r0, r4
 800e466:	f000 fc71 	bl	800ed4c <__mdiff>
 800e46a:	68c2      	ldr	r2, [r0, #12]
 800e46c:	4605      	mov	r5, r0
 800e46e:	bb02      	cbnz	r2, 800e4b2 <_dtoa_r+0xa7a>
 800e470:	4601      	mov	r1, r0
 800e472:	4650      	mov	r0, sl
 800e474:	f000 fc4e 	bl	800ed14 <__mcmp>
 800e478:	4602      	mov	r2, r0
 800e47a:	4629      	mov	r1, r5
 800e47c:	4620      	mov	r0, r4
 800e47e:	9209      	str	r2, [sp, #36]	; 0x24
 800e480:	f000 fa0c 	bl	800e89c <_Bfree>
 800e484:	9b07      	ldr	r3, [sp, #28]
 800e486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e488:	9d04      	ldr	r5, [sp, #16]
 800e48a:	ea43 0102 	orr.w	r1, r3, r2
 800e48e:	9b06      	ldr	r3, [sp, #24]
 800e490:	4319      	orrs	r1, r3
 800e492:	d110      	bne.n	800e4b6 <_dtoa_r+0xa7e>
 800e494:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e498:	d029      	beq.n	800e4ee <_dtoa_r+0xab6>
 800e49a:	9b05      	ldr	r3, [sp, #20]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	dd02      	ble.n	800e4a6 <_dtoa_r+0xa6e>
 800e4a0:	9b02      	ldr	r3, [sp, #8]
 800e4a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e4a6:	9b01      	ldr	r3, [sp, #4]
 800e4a8:	f883 9000 	strb.w	r9, [r3]
 800e4ac:	e774      	b.n	800e398 <_dtoa_r+0x960>
 800e4ae:	4638      	mov	r0, r7
 800e4b0:	e7ba      	b.n	800e428 <_dtoa_r+0x9f0>
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	e7e1      	b.n	800e47a <_dtoa_r+0xa42>
 800e4b6:	9b05      	ldr	r3, [sp, #20]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	db04      	blt.n	800e4c6 <_dtoa_r+0xa8e>
 800e4bc:	9907      	ldr	r1, [sp, #28]
 800e4be:	430b      	orrs	r3, r1
 800e4c0:	9906      	ldr	r1, [sp, #24]
 800e4c2:	430b      	orrs	r3, r1
 800e4c4:	d120      	bne.n	800e508 <_dtoa_r+0xad0>
 800e4c6:	2a00      	cmp	r2, #0
 800e4c8:	dded      	ble.n	800e4a6 <_dtoa_r+0xa6e>
 800e4ca:	4651      	mov	r1, sl
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	f000 fbb4 	bl	800ec3c <__lshift>
 800e4d4:	4631      	mov	r1, r6
 800e4d6:	4682      	mov	sl, r0
 800e4d8:	f000 fc1c 	bl	800ed14 <__mcmp>
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	dc03      	bgt.n	800e4e8 <_dtoa_r+0xab0>
 800e4e0:	d1e1      	bne.n	800e4a6 <_dtoa_r+0xa6e>
 800e4e2:	f019 0f01 	tst.w	r9, #1
 800e4e6:	d0de      	beq.n	800e4a6 <_dtoa_r+0xa6e>
 800e4e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e4ec:	d1d8      	bne.n	800e4a0 <_dtoa_r+0xa68>
 800e4ee:	9a01      	ldr	r2, [sp, #4]
 800e4f0:	2339      	movs	r3, #57	; 0x39
 800e4f2:	7013      	strb	r3, [r2, #0]
 800e4f4:	462b      	mov	r3, r5
 800e4f6:	461d      	mov	r5, r3
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e4fe:	2a39      	cmp	r2, #57	; 0x39
 800e500:	d06c      	beq.n	800e5dc <_dtoa_r+0xba4>
 800e502:	3201      	adds	r2, #1
 800e504:	701a      	strb	r2, [r3, #0]
 800e506:	e747      	b.n	800e398 <_dtoa_r+0x960>
 800e508:	2a00      	cmp	r2, #0
 800e50a:	dd07      	ble.n	800e51c <_dtoa_r+0xae4>
 800e50c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e510:	d0ed      	beq.n	800e4ee <_dtoa_r+0xab6>
 800e512:	9a01      	ldr	r2, [sp, #4]
 800e514:	f109 0301 	add.w	r3, r9, #1
 800e518:	7013      	strb	r3, [r2, #0]
 800e51a:	e73d      	b.n	800e398 <_dtoa_r+0x960>
 800e51c:	9b04      	ldr	r3, [sp, #16]
 800e51e:	9a08      	ldr	r2, [sp, #32]
 800e520:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e524:	4293      	cmp	r3, r2
 800e526:	d043      	beq.n	800e5b0 <_dtoa_r+0xb78>
 800e528:	4651      	mov	r1, sl
 800e52a:	2300      	movs	r3, #0
 800e52c:	220a      	movs	r2, #10
 800e52e:	4620      	mov	r0, r4
 800e530:	f000 f9d6 	bl	800e8e0 <__multadd>
 800e534:	45b8      	cmp	r8, r7
 800e536:	4682      	mov	sl, r0
 800e538:	f04f 0300 	mov.w	r3, #0
 800e53c:	f04f 020a 	mov.w	r2, #10
 800e540:	4641      	mov	r1, r8
 800e542:	4620      	mov	r0, r4
 800e544:	d107      	bne.n	800e556 <_dtoa_r+0xb1e>
 800e546:	f000 f9cb 	bl	800e8e0 <__multadd>
 800e54a:	4680      	mov	r8, r0
 800e54c:	4607      	mov	r7, r0
 800e54e:	9b04      	ldr	r3, [sp, #16]
 800e550:	3301      	adds	r3, #1
 800e552:	9304      	str	r3, [sp, #16]
 800e554:	e775      	b.n	800e442 <_dtoa_r+0xa0a>
 800e556:	f000 f9c3 	bl	800e8e0 <__multadd>
 800e55a:	4639      	mov	r1, r7
 800e55c:	4680      	mov	r8, r0
 800e55e:	2300      	movs	r3, #0
 800e560:	220a      	movs	r2, #10
 800e562:	4620      	mov	r0, r4
 800e564:	f000 f9bc 	bl	800e8e0 <__multadd>
 800e568:	4607      	mov	r7, r0
 800e56a:	e7f0      	b.n	800e54e <_dtoa_r+0xb16>
 800e56c:	9b04      	ldr	r3, [sp, #16]
 800e56e:	9301      	str	r3, [sp, #4]
 800e570:	9d00      	ldr	r5, [sp, #0]
 800e572:	4631      	mov	r1, r6
 800e574:	4650      	mov	r0, sl
 800e576:	f7ff f9d4 	bl	800d922 <quorem>
 800e57a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e57e:	9b00      	ldr	r3, [sp, #0]
 800e580:	f805 9b01 	strb.w	r9, [r5], #1
 800e584:	1aea      	subs	r2, r5, r3
 800e586:	9b01      	ldr	r3, [sp, #4]
 800e588:	4293      	cmp	r3, r2
 800e58a:	dd07      	ble.n	800e59c <_dtoa_r+0xb64>
 800e58c:	4651      	mov	r1, sl
 800e58e:	2300      	movs	r3, #0
 800e590:	220a      	movs	r2, #10
 800e592:	4620      	mov	r0, r4
 800e594:	f000 f9a4 	bl	800e8e0 <__multadd>
 800e598:	4682      	mov	sl, r0
 800e59a:	e7ea      	b.n	800e572 <_dtoa_r+0xb3a>
 800e59c:	9b01      	ldr	r3, [sp, #4]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	bfc8      	it	gt
 800e5a2:	461d      	movgt	r5, r3
 800e5a4:	9b00      	ldr	r3, [sp, #0]
 800e5a6:	bfd8      	it	le
 800e5a8:	2501      	movle	r5, #1
 800e5aa:	441d      	add	r5, r3
 800e5ac:	f04f 0800 	mov.w	r8, #0
 800e5b0:	4651      	mov	r1, sl
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	f000 fb41 	bl	800ec3c <__lshift>
 800e5ba:	4631      	mov	r1, r6
 800e5bc:	4682      	mov	sl, r0
 800e5be:	f000 fba9 	bl	800ed14 <__mcmp>
 800e5c2:	2800      	cmp	r0, #0
 800e5c4:	dc96      	bgt.n	800e4f4 <_dtoa_r+0xabc>
 800e5c6:	d102      	bne.n	800e5ce <_dtoa_r+0xb96>
 800e5c8:	f019 0f01 	tst.w	r9, #1
 800e5cc:	d192      	bne.n	800e4f4 <_dtoa_r+0xabc>
 800e5ce:	462b      	mov	r3, r5
 800e5d0:	461d      	mov	r5, r3
 800e5d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5d6:	2a30      	cmp	r2, #48	; 0x30
 800e5d8:	d0fa      	beq.n	800e5d0 <_dtoa_r+0xb98>
 800e5da:	e6dd      	b.n	800e398 <_dtoa_r+0x960>
 800e5dc:	9a00      	ldr	r2, [sp, #0]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d189      	bne.n	800e4f6 <_dtoa_r+0xabe>
 800e5e2:	f10b 0b01 	add.w	fp, fp, #1
 800e5e6:	2331      	movs	r3, #49	; 0x31
 800e5e8:	e796      	b.n	800e518 <_dtoa_r+0xae0>
 800e5ea:	4b0a      	ldr	r3, [pc, #40]	; (800e614 <_dtoa_r+0xbdc>)
 800e5ec:	f7ff ba99 	b.w	800db22 <_dtoa_r+0xea>
 800e5f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f47f aa6d 	bne.w	800dad2 <_dtoa_r+0x9a>
 800e5f8:	4b07      	ldr	r3, [pc, #28]	; (800e618 <_dtoa_r+0xbe0>)
 800e5fa:	f7ff ba92 	b.w	800db22 <_dtoa_r+0xea>
 800e5fe:	9b01      	ldr	r3, [sp, #4]
 800e600:	2b00      	cmp	r3, #0
 800e602:	dcb5      	bgt.n	800e570 <_dtoa_r+0xb38>
 800e604:	9b07      	ldr	r3, [sp, #28]
 800e606:	2b02      	cmp	r3, #2
 800e608:	f73f aeb1 	bgt.w	800e36e <_dtoa_r+0x936>
 800e60c:	e7b0      	b.n	800e570 <_dtoa_r+0xb38>
 800e60e:	bf00      	nop
 800e610:	0800f7f0 	.word	0x0800f7f0
 800e614:	0800f750 	.word	0x0800f750
 800e618:	0800f774 	.word	0x0800f774

0800e61c <_free_r>:
 800e61c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e61e:	2900      	cmp	r1, #0
 800e620:	d044      	beq.n	800e6ac <_free_r+0x90>
 800e622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e626:	9001      	str	r0, [sp, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	f1a1 0404 	sub.w	r4, r1, #4
 800e62e:	bfb8      	it	lt
 800e630:	18e4      	addlt	r4, r4, r3
 800e632:	f000 f8e7 	bl	800e804 <__malloc_lock>
 800e636:	4a1e      	ldr	r2, [pc, #120]	; (800e6b0 <_free_r+0x94>)
 800e638:	9801      	ldr	r0, [sp, #4]
 800e63a:	6813      	ldr	r3, [r2, #0]
 800e63c:	b933      	cbnz	r3, 800e64c <_free_r+0x30>
 800e63e:	6063      	str	r3, [r4, #4]
 800e640:	6014      	str	r4, [r2, #0]
 800e642:	b003      	add	sp, #12
 800e644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e648:	f000 b8e2 	b.w	800e810 <__malloc_unlock>
 800e64c:	42a3      	cmp	r3, r4
 800e64e:	d908      	bls.n	800e662 <_free_r+0x46>
 800e650:	6825      	ldr	r5, [r4, #0]
 800e652:	1961      	adds	r1, r4, r5
 800e654:	428b      	cmp	r3, r1
 800e656:	bf01      	itttt	eq
 800e658:	6819      	ldreq	r1, [r3, #0]
 800e65a:	685b      	ldreq	r3, [r3, #4]
 800e65c:	1949      	addeq	r1, r1, r5
 800e65e:	6021      	streq	r1, [r4, #0]
 800e660:	e7ed      	b.n	800e63e <_free_r+0x22>
 800e662:	461a      	mov	r2, r3
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	b10b      	cbz	r3, 800e66c <_free_r+0x50>
 800e668:	42a3      	cmp	r3, r4
 800e66a:	d9fa      	bls.n	800e662 <_free_r+0x46>
 800e66c:	6811      	ldr	r1, [r2, #0]
 800e66e:	1855      	adds	r5, r2, r1
 800e670:	42a5      	cmp	r5, r4
 800e672:	d10b      	bne.n	800e68c <_free_r+0x70>
 800e674:	6824      	ldr	r4, [r4, #0]
 800e676:	4421      	add	r1, r4
 800e678:	1854      	adds	r4, r2, r1
 800e67a:	42a3      	cmp	r3, r4
 800e67c:	6011      	str	r1, [r2, #0]
 800e67e:	d1e0      	bne.n	800e642 <_free_r+0x26>
 800e680:	681c      	ldr	r4, [r3, #0]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	6053      	str	r3, [r2, #4]
 800e686:	440c      	add	r4, r1
 800e688:	6014      	str	r4, [r2, #0]
 800e68a:	e7da      	b.n	800e642 <_free_r+0x26>
 800e68c:	d902      	bls.n	800e694 <_free_r+0x78>
 800e68e:	230c      	movs	r3, #12
 800e690:	6003      	str	r3, [r0, #0]
 800e692:	e7d6      	b.n	800e642 <_free_r+0x26>
 800e694:	6825      	ldr	r5, [r4, #0]
 800e696:	1961      	adds	r1, r4, r5
 800e698:	428b      	cmp	r3, r1
 800e69a:	bf04      	itt	eq
 800e69c:	6819      	ldreq	r1, [r3, #0]
 800e69e:	685b      	ldreq	r3, [r3, #4]
 800e6a0:	6063      	str	r3, [r4, #4]
 800e6a2:	bf04      	itt	eq
 800e6a4:	1949      	addeq	r1, r1, r5
 800e6a6:	6021      	streq	r1, [r4, #0]
 800e6a8:	6054      	str	r4, [r2, #4]
 800e6aa:	e7ca      	b.n	800e642 <_free_r+0x26>
 800e6ac:	b003      	add	sp, #12
 800e6ae:	bd30      	pop	{r4, r5, pc}
 800e6b0:	20002298 	.word	0x20002298

0800e6b4 <malloc>:
 800e6b4:	4b02      	ldr	r3, [pc, #8]	; (800e6c0 <malloc+0xc>)
 800e6b6:	4601      	mov	r1, r0
 800e6b8:	6818      	ldr	r0, [r3, #0]
 800e6ba:	f000 b823 	b.w	800e704 <_malloc_r>
 800e6be:	bf00      	nop
 800e6c0:	20000178 	.word	0x20000178

0800e6c4 <sbrk_aligned>:
 800e6c4:	b570      	push	{r4, r5, r6, lr}
 800e6c6:	4e0e      	ldr	r6, [pc, #56]	; (800e700 <sbrk_aligned+0x3c>)
 800e6c8:	460c      	mov	r4, r1
 800e6ca:	6831      	ldr	r1, [r6, #0]
 800e6cc:	4605      	mov	r5, r0
 800e6ce:	b911      	cbnz	r1, 800e6d6 <sbrk_aligned+0x12>
 800e6d0:	f000 fcce 	bl	800f070 <_sbrk_r>
 800e6d4:	6030      	str	r0, [r6, #0]
 800e6d6:	4621      	mov	r1, r4
 800e6d8:	4628      	mov	r0, r5
 800e6da:	f000 fcc9 	bl	800f070 <_sbrk_r>
 800e6de:	1c43      	adds	r3, r0, #1
 800e6e0:	d00a      	beq.n	800e6f8 <sbrk_aligned+0x34>
 800e6e2:	1cc4      	adds	r4, r0, #3
 800e6e4:	f024 0403 	bic.w	r4, r4, #3
 800e6e8:	42a0      	cmp	r0, r4
 800e6ea:	d007      	beq.n	800e6fc <sbrk_aligned+0x38>
 800e6ec:	1a21      	subs	r1, r4, r0
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f000 fcbe 	bl	800f070 <_sbrk_r>
 800e6f4:	3001      	adds	r0, #1
 800e6f6:	d101      	bne.n	800e6fc <sbrk_aligned+0x38>
 800e6f8:	f04f 34ff 	mov.w	r4, #4294967295
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	bd70      	pop	{r4, r5, r6, pc}
 800e700:	2000229c 	.word	0x2000229c

0800e704 <_malloc_r>:
 800e704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e708:	1ccd      	adds	r5, r1, #3
 800e70a:	f025 0503 	bic.w	r5, r5, #3
 800e70e:	3508      	adds	r5, #8
 800e710:	2d0c      	cmp	r5, #12
 800e712:	bf38      	it	cc
 800e714:	250c      	movcc	r5, #12
 800e716:	2d00      	cmp	r5, #0
 800e718:	4607      	mov	r7, r0
 800e71a:	db01      	blt.n	800e720 <_malloc_r+0x1c>
 800e71c:	42a9      	cmp	r1, r5
 800e71e:	d905      	bls.n	800e72c <_malloc_r+0x28>
 800e720:	230c      	movs	r3, #12
 800e722:	603b      	str	r3, [r7, #0]
 800e724:	2600      	movs	r6, #0
 800e726:	4630      	mov	r0, r6
 800e728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e72c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e800 <_malloc_r+0xfc>
 800e730:	f000 f868 	bl	800e804 <__malloc_lock>
 800e734:	f8d8 3000 	ldr.w	r3, [r8]
 800e738:	461c      	mov	r4, r3
 800e73a:	bb5c      	cbnz	r4, 800e794 <_malloc_r+0x90>
 800e73c:	4629      	mov	r1, r5
 800e73e:	4638      	mov	r0, r7
 800e740:	f7ff ffc0 	bl	800e6c4 <sbrk_aligned>
 800e744:	1c43      	adds	r3, r0, #1
 800e746:	4604      	mov	r4, r0
 800e748:	d155      	bne.n	800e7f6 <_malloc_r+0xf2>
 800e74a:	f8d8 4000 	ldr.w	r4, [r8]
 800e74e:	4626      	mov	r6, r4
 800e750:	2e00      	cmp	r6, #0
 800e752:	d145      	bne.n	800e7e0 <_malloc_r+0xdc>
 800e754:	2c00      	cmp	r4, #0
 800e756:	d048      	beq.n	800e7ea <_malloc_r+0xe6>
 800e758:	6823      	ldr	r3, [r4, #0]
 800e75a:	4631      	mov	r1, r6
 800e75c:	4638      	mov	r0, r7
 800e75e:	eb04 0903 	add.w	r9, r4, r3
 800e762:	f000 fc85 	bl	800f070 <_sbrk_r>
 800e766:	4581      	cmp	r9, r0
 800e768:	d13f      	bne.n	800e7ea <_malloc_r+0xe6>
 800e76a:	6821      	ldr	r1, [r4, #0]
 800e76c:	1a6d      	subs	r5, r5, r1
 800e76e:	4629      	mov	r1, r5
 800e770:	4638      	mov	r0, r7
 800e772:	f7ff ffa7 	bl	800e6c4 <sbrk_aligned>
 800e776:	3001      	adds	r0, #1
 800e778:	d037      	beq.n	800e7ea <_malloc_r+0xe6>
 800e77a:	6823      	ldr	r3, [r4, #0]
 800e77c:	442b      	add	r3, r5
 800e77e:	6023      	str	r3, [r4, #0]
 800e780:	f8d8 3000 	ldr.w	r3, [r8]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d038      	beq.n	800e7fa <_malloc_r+0xf6>
 800e788:	685a      	ldr	r2, [r3, #4]
 800e78a:	42a2      	cmp	r2, r4
 800e78c:	d12b      	bne.n	800e7e6 <_malloc_r+0xe2>
 800e78e:	2200      	movs	r2, #0
 800e790:	605a      	str	r2, [r3, #4]
 800e792:	e00f      	b.n	800e7b4 <_malloc_r+0xb0>
 800e794:	6822      	ldr	r2, [r4, #0]
 800e796:	1b52      	subs	r2, r2, r5
 800e798:	d41f      	bmi.n	800e7da <_malloc_r+0xd6>
 800e79a:	2a0b      	cmp	r2, #11
 800e79c:	d917      	bls.n	800e7ce <_malloc_r+0xca>
 800e79e:	1961      	adds	r1, r4, r5
 800e7a0:	42a3      	cmp	r3, r4
 800e7a2:	6025      	str	r5, [r4, #0]
 800e7a4:	bf18      	it	ne
 800e7a6:	6059      	strne	r1, [r3, #4]
 800e7a8:	6863      	ldr	r3, [r4, #4]
 800e7aa:	bf08      	it	eq
 800e7ac:	f8c8 1000 	streq.w	r1, [r8]
 800e7b0:	5162      	str	r2, [r4, r5]
 800e7b2:	604b      	str	r3, [r1, #4]
 800e7b4:	4638      	mov	r0, r7
 800e7b6:	f104 060b 	add.w	r6, r4, #11
 800e7ba:	f000 f829 	bl	800e810 <__malloc_unlock>
 800e7be:	f026 0607 	bic.w	r6, r6, #7
 800e7c2:	1d23      	adds	r3, r4, #4
 800e7c4:	1af2      	subs	r2, r6, r3
 800e7c6:	d0ae      	beq.n	800e726 <_malloc_r+0x22>
 800e7c8:	1b9b      	subs	r3, r3, r6
 800e7ca:	50a3      	str	r3, [r4, r2]
 800e7cc:	e7ab      	b.n	800e726 <_malloc_r+0x22>
 800e7ce:	42a3      	cmp	r3, r4
 800e7d0:	6862      	ldr	r2, [r4, #4]
 800e7d2:	d1dd      	bne.n	800e790 <_malloc_r+0x8c>
 800e7d4:	f8c8 2000 	str.w	r2, [r8]
 800e7d8:	e7ec      	b.n	800e7b4 <_malloc_r+0xb0>
 800e7da:	4623      	mov	r3, r4
 800e7dc:	6864      	ldr	r4, [r4, #4]
 800e7de:	e7ac      	b.n	800e73a <_malloc_r+0x36>
 800e7e0:	4634      	mov	r4, r6
 800e7e2:	6876      	ldr	r6, [r6, #4]
 800e7e4:	e7b4      	b.n	800e750 <_malloc_r+0x4c>
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	e7cc      	b.n	800e784 <_malloc_r+0x80>
 800e7ea:	230c      	movs	r3, #12
 800e7ec:	603b      	str	r3, [r7, #0]
 800e7ee:	4638      	mov	r0, r7
 800e7f0:	f000 f80e 	bl	800e810 <__malloc_unlock>
 800e7f4:	e797      	b.n	800e726 <_malloc_r+0x22>
 800e7f6:	6025      	str	r5, [r4, #0]
 800e7f8:	e7dc      	b.n	800e7b4 <_malloc_r+0xb0>
 800e7fa:	605b      	str	r3, [r3, #4]
 800e7fc:	deff      	udf	#255	; 0xff
 800e7fe:	bf00      	nop
 800e800:	20002298 	.word	0x20002298

0800e804 <__malloc_lock>:
 800e804:	4801      	ldr	r0, [pc, #4]	; (800e80c <__malloc_lock+0x8>)
 800e806:	f7ff b88a 	b.w	800d91e <__retarget_lock_acquire_recursive>
 800e80a:	bf00      	nop
 800e80c:	20002294 	.word	0x20002294

0800e810 <__malloc_unlock>:
 800e810:	4801      	ldr	r0, [pc, #4]	; (800e818 <__malloc_unlock+0x8>)
 800e812:	f7ff b885 	b.w	800d920 <__retarget_lock_release_recursive>
 800e816:	bf00      	nop
 800e818:	20002294 	.word	0x20002294

0800e81c <_Balloc>:
 800e81c:	b570      	push	{r4, r5, r6, lr}
 800e81e:	69c6      	ldr	r6, [r0, #28]
 800e820:	4604      	mov	r4, r0
 800e822:	460d      	mov	r5, r1
 800e824:	b976      	cbnz	r6, 800e844 <_Balloc+0x28>
 800e826:	2010      	movs	r0, #16
 800e828:	f7ff ff44 	bl	800e6b4 <malloc>
 800e82c:	4602      	mov	r2, r0
 800e82e:	61e0      	str	r0, [r4, #28]
 800e830:	b920      	cbnz	r0, 800e83c <_Balloc+0x20>
 800e832:	4b18      	ldr	r3, [pc, #96]	; (800e894 <_Balloc+0x78>)
 800e834:	4818      	ldr	r0, [pc, #96]	; (800e898 <_Balloc+0x7c>)
 800e836:	216b      	movs	r1, #107	; 0x6b
 800e838:	f000 fc38 	bl	800f0ac <__assert_func>
 800e83c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e840:	6006      	str	r6, [r0, #0]
 800e842:	60c6      	str	r6, [r0, #12]
 800e844:	69e6      	ldr	r6, [r4, #28]
 800e846:	68f3      	ldr	r3, [r6, #12]
 800e848:	b183      	cbz	r3, 800e86c <_Balloc+0x50>
 800e84a:	69e3      	ldr	r3, [r4, #28]
 800e84c:	68db      	ldr	r3, [r3, #12]
 800e84e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e852:	b9b8      	cbnz	r0, 800e884 <_Balloc+0x68>
 800e854:	2101      	movs	r1, #1
 800e856:	fa01 f605 	lsl.w	r6, r1, r5
 800e85a:	1d72      	adds	r2, r6, #5
 800e85c:	0092      	lsls	r2, r2, #2
 800e85e:	4620      	mov	r0, r4
 800e860:	f000 fc42 	bl	800f0e8 <_calloc_r>
 800e864:	b160      	cbz	r0, 800e880 <_Balloc+0x64>
 800e866:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e86a:	e00e      	b.n	800e88a <_Balloc+0x6e>
 800e86c:	2221      	movs	r2, #33	; 0x21
 800e86e:	2104      	movs	r1, #4
 800e870:	4620      	mov	r0, r4
 800e872:	f000 fc39 	bl	800f0e8 <_calloc_r>
 800e876:	69e3      	ldr	r3, [r4, #28]
 800e878:	60f0      	str	r0, [r6, #12]
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d1e4      	bne.n	800e84a <_Balloc+0x2e>
 800e880:	2000      	movs	r0, #0
 800e882:	bd70      	pop	{r4, r5, r6, pc}
 800e884:	6802      	ldr	r2, [r0, #0]
 800e886:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e88a:	2300      	movs	r3, #0
 800e88c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e890:	e7f7      	b.n	800e882 <_Balloc+0x66>
 800e892:	bf00      	nop
 800e894:	0800f781 	.word	0x0800f781
 800e898:	0800f801 	.word	0x0800f801

0800e89c <_Bfree>:
 800e89c:	b570      	push	{r4, r5, r6, lr}
 800e89e:	69c6      	ldr	r6, [r0, #28]
 800e8a0:	4605      	mov	r5, r0
 800e8a2:	460c      	mov	r4, r1
 800e8a4:	b976      	cbnz	r6, 800e8c4 <_Bfree+0x28>
 800e8a6:	2010      	movs	r0, #16
 800e8a8:	f7ff ff04 	bl	800e6b4 <malloc>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	61e8      	str	r0, [r5, #28]
 800e8b0:	b920      	cbnz	r0, 800e8bc <_Bfree+0x20>
 800e8b2:	4b09      	ldr	r3, [pc, #36]	; (800e8d8 <_Bfree+0x3c>)
 800e8b4:	4809      	ldr	r0, [pc, #36]	; (800e8dc <_Bfree+0x40>)
 800e8b6:	218f      	movs	r1, #143	; 0x8f
 800e8b8:	f000 fbf8 	bl	800f0ac <__assert_func>
 800e8bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8c0:	6006      	str	r6, [r0, #0]
 800e8c2:	60c6      	str	r6, [r0, #12]
 800e8c4:	b13c      	cbz	r4, 800e8d6 <_Bfree+0x3a>
 800e8c6:	69eb      	ldr	r3, [r5, #28]
 800e8c8:	6862      	ldr	r2, [r4, #4]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8d0:	6021      	str	r1, [r4, #0]
 800e8d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8d6:	bd70      	pop	{r4, r5, r6, pc}
 800e8d8:	0800f781 	.word	0x0800f781
 800e8dc:	0800f801 	.word	0x0800f801

0800e8e0 <__multadd>:
 800e8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8e4:	690d      	ldr	r5, [r1, #16]
 800e8e6:	4607      	mov	r7, r0
 800e8e8:	460c      	mov	r4, r1
 800e8ea:	461e      	mov	r6, r3
 800e8ec:	f101 0c14 	add.w	ip, r1, #20
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	f8dc 3000 	ldr.w	r3, [ip]
 800e8f6:	b299      	uxth	r1, r3
 800e8f8:	fb02 6101 	mla	r1, r2, r1, r6
 800e8fc:	0c1e      	lsrs	r6, r3, #16
 800e8fe:	0c0b      	lsrs	r3, r1, #16
 800e900:	fb02 3306 	mla	r3, r2, r6, r3
 800e904:	b289      	uxth	r1, r1
 800e906:	3001      	adds	r0, #1
 800e908:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e90c:	4285      	cmp	r5, r0
 800e90e:	f84c 1b04 	str.w	r1, [ip], #4
 800e912:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e916:	dcec      	bgt.n	800e8f2 <__multadd+0x12>
 800e918:	b30e      	cbz	r6, 800e95e <__multadd+0x7e>
 800e91a:	68a3      	ldr	r3, [r4, #8]
 800e91c:	42ab      	cmp	r3, r5
 800e91e:	dc19      	bgt.n	800e954 <__multadd+0x74>
 800e920:	6861      	ldr	r1, [r4, #4]
 800e922:	4638      	mov	r0, r7
 800e924:	3101      	adds	r1, #1
 800e926:	f7ff ff79 	bl	800e81c <_Balloc>
 800e92a:	4680      	mov	r8, r0
 800e92c:	b928      	cbnz	r0, 800e93a <__multadd+0x5a>
 800e92e:	4602      	mov	r2, r0
 800e930:	4b0c      	ldr	r3, [pc, #48]	; (800e964 <__multadd+0x84>)
 800e932:	480d      	ldr	r0, [pc, #52]	; (800e968 <__multadd+0x88>)
 800e934:	21ba      	movs	r1, #186	; 0xba
 800e936:	f000 fbb9 	bl	800f0ac <__assert_func>
 800e93a:	6922      	ldr	r2, [r4, #16]
 800e93c:	3202      	adds	r2, #2
 800e93e:	f104 010c 	add.w	r1, r4, #12
 800e942:	0092      	lsls	r2, r2, #2
 800e944:	300c      	adds	r0, #12
 800e946:	f000 fba3 	bl	800f090 <memcpy>
 800e94a:	4621      	mov	r1, r4
 800e94c:	4638      	mov	r0, r7
 800e94e:	f7ff ffa5 	bl	800e89c <_Bfree>
 800e952:	4644      	mov	r4, r8
 800e954:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e958:	3501      	adds	r5, #1
 800e95a:	615e      	str	r6, [r3, #20]
 800e95c:	6125      	str	r5, [r4, #16]
 800e95e:	4620      	mov	r0, r4
 800e960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e964:	0800f7f0 	.word	0x0800f7f0
 800e968:	0800f801 	.word	0x0800f801

0800e96c <__hi0bits>:
 800e96c:	0c03      	lsrs	r3, r0, #16
 800e96e:	041b      	lsls	r3, r3, #16
 800e970:	b9d3      	cbnz	r3, 800e9a8 <__hi0bits+0x3c>
 800e972:	0400      	lsls	r0, r0, #16
 800e974:	2310      	movs	r3, #16
 800e976:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e97a:	bf04      	itt	eq
 800e97c:	0200      	lsleq	r0, r0, #8
 800e97e:	3308      	addeq	r3, #8
 800e980:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e984:	bf04      	itt	eq
 800e986:	0100      	lsleq	r0, r0, #4
 800e988:	3304      	addeq	r3, #4
 800e98a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e98e:	bf04      	itt	eq
 800e990:	0080      	lsleq	r0, r0, #2
 800e992:	3302      	addeq	r3, #2
 800e994:	2800      	cmp	r0, #0
 800e996:	db05      	blt.n	800e9a4 <__hi0bits+0x38>
 800e998:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e99c:	f103 0301 	add.w	r3, r3, #1
 800e9a0:	bf08      	it	eq
 800e9a2:	2320      	moveq	r3, #32
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	4770      	bx	lr
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	e7e4      	b.n	800e976 <__hi0bits+0xa>

0800e9ac <__lo0bits>:
 800e9ac:	6803      	ldr	r3, [r0, #0]
 800e9ae:	f013 0207 	ands.w	r2, r3, #7
 800e9b2:	d00c      	beq.n	800e9ce <__lo0bits+0x22>
 800e9b4:	07d9      	lsls	r1, r3, #31
 800e9b6:	d422      	bmi.n	800e9fe <__lo0bits+0x52>
 800e9b8:	079a      	lsls	r2, r3, #30
 800e9ba:	bf49      	itett	mi
 800e9bc:	085b      	lsrmi	r3, r3, #1
 800e9be:	089b      	lsrpl	r3, r3, #2
 800e9c0:	6003      	strmi	r3, [r0, #0]
 800e9c2:	2201      	movmi	r2, #1
 800e9c4:	bf5c      	itt	pl
 800e9c6:	6003      	strpl	r3, [r0, #0]
 800e9c8:	2202      	movpl	r2, #2
 800e9ca:	4610      	mov	r0, r2
 800e9cc:	4770      	bx	lr
 800e9ce:	b299      	uxth	r1, r3
 800e9d0:	b909      	cbnz	r1, 800e9d6 <__lo0bits+0x2a>
 800e9d2:	0c1b      	lsrs	r3, r3, #16
 800e9d4:	2210      	movs	r2, #16
 800e9d6:	b2d9      	uxtb	r1, r3
 800e9d8:	b909      	cbnz	r1, 800e9de <__lo0bits+0x32>
 800e9da:	3208      	adds	r2, #8
 800e9dc:	0a1b      	lsrs	r3, r3, #8
 800e9de:	0719      	lsls	r1, r3, #28
 800e9e0:	bf04      	itt	eq
 800e9e2:	091b      	lsreq	r3, r3, #4
 800e9e4:	3204      	addeq	r2, #4
 800e9e6:	0799      	lsls	r1, r3, #30
 800e9e8:	bf04      	itt	eq
 800e9ea:	089b      	lsreq	r3, r3, #2
 800e9ec:	3202      	addeq	r2, #2
 800e9ee:	07d9      	lsls	r1, r3, #31
 800e9f0:	d403      	bmi.n	800e9fa <__lo0bits+0x4e>
 800e9f2:	085b      	lsrs	r3, r3, #1
 800e9f4:	f102 0201 	add.w	r2, r2, #1
 800e9f8:	d003      	beq.n	800ea02 <__lo0bits+0x56>
 800e9fa:	6003      	str	r3, [r0, #0]
 800e9fc:	e7e5      	b.n	800e9ca <__lo0bits+0x1e>
 800e9fe:	2200      	movs	r2, #0
 800ea00:	e7e3      	b.n	800e9ca <__lo0bits+0x1e>
 800ea02:	2220      	movs	r2, #32
 800ea04:	e7e1      	b.n	800e9ca <__lo0bits+0x1e>
	...

0800ea08 <__i2b>:
 800ea08:	b510      	push	{r4, lr}
 800ea0a:	460c      	mov	r4, r1
 800ea0c:	2101      	movs	r1, #1
 800ea0e:	f7ff ff05 	bl	800e81c <_Balloc>
 800ea12:	4602      	mov	r2, r0
 800ea14:	b928      	cbnz	r0, 800ea22 <__i2b+0x1a>
 800ea16:	4b05      	ldr	r3, [pc, #20]	; (800ea2c <__i2b+0x24>)
 800ea18:	4805      	ldr	r0, [pc, #20]	; (800ea30 <__i2b+0x28>)
 800ea1a:	f240 1145 	movw	r1, #325	; 0x145
 800ea1e:	f000 fb45 	bl	800f0ac <__assert_func>
 800ea22:	2301      	movs	r3, #1
 800ea24:	6144      	str	r4, [r0, #20]
 800ea26:	6103      	str	r3, [r0, #16]
 800ea28:	bd10      	pop	{r4, pc}
 800ea2a:	bf00      	nop
 800ea2c:	0800f7f0 	.word	0x0800f7f0
 800ea30:	0800f801 	.word	0x0800f801

0800ea34 <__multiply>:
 800ea34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea38:	4691      	mov	r9, r2
 800ea3a:	690a      	ldr	r2, [r1, #16]
 800ea3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	bfb8      	it	lt
 800ea44:	460b      	movlt	r3, r1
 800ea46:	460c      	mov	r4, r1
 800ea48:	bfbc      	itt	lt
 800ea4a:	464c      	movlt	r4, r9
 800ea4c:	4699      	movlt	r9, r3
 800ea4e:	6927      	ldr	r7, [r4, #16]
 800ea50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea54:	68a3      	ldr	r3, [r4, #8]
 800ea56:	6861      	ldr	r1, [r4, #4]
 800ea58:	eb07 060a 	add.w	r6, r7, sl
 800ea5c:	42b3      	cmp	r3, r6
 800ea5e:	b085      	sub	sp, #20
 800ea60:	bfb8      	it	lt
 800ea62:	3101      	addlt	r1, #1
 800ea64:	f7ff feda 	bl	800e81c <_Balloc>
 800ea68:	b930      	cbnz	r0, 800ea78 <__multiply+0x44>
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	4b44      	ldr	r3, [pc, #272]	; (800eb80 <__multiply+0x14c>)
 800ea6e:	4845      	ldr	r0, [pc, #276]	; (800eb84 <__multiply+0x150>)
 800ea70:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ea74:	f000 fb1a 	bl	800f0ac <__assert_func>
 800ea78:	f100 0514 	add.w	r5, r0, #20
 800ea7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea80:	462b      	mov	r3, r5
 800ea82:	2200      	movs	r2, #0
 800ea84:	4543      	cmp	r3, r8
 800ea86:	d321      	bcc.n	800eacc <__multiply+0x98>
 800ea88:	f104 0314 	add.w	r3, r4, #20
 800ea8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ea90:	f109 0314 	add.w	r3, r9, #20
 800ea94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ea98:	9202      	str	r2, [sp, #8]
 800ea9a:	1b3a      	subs	r2, r7, r4
 800ea9c:	3a15      	subs	r2, #21
 800ea9e:	f022 0203 	bic.w	r2, r2, #3
 800eaa2:	3204      	adds	r2, #4
 800eaa4:	f104 0115 	add.w	r1, r4, #21
 800eaa8:	428f      	cmp	r7, r1
 800eaaa:	bf38      	it	cc
 800eaac:	2204      	movcc	r2, #4
 800eaae:	9201      	str	r2, [sp, #4]
 800eab0:	9a02      	ldr	r2, [sp, #8]
 800eab2:	9303      	str	r3, [sp, #12]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d80c      	bhi.n	800ead2 <__multiply+0x9e>
 800eab8:	2e00      	cmp	r6, #0
 800eaba:	dd03      	ble.n	800eac4 <__multiply+0x90>
 800eabc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d05b      	beq.n	800eb7c <__multiply+0x148>
 800eac4:	6106      	str	r6, [r0, #16]
 800eac6:	b005      	add	sp, #20
 800eac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eacc:	f843 2b04 	str.w	r2, [r3], #4
 800ead0:	e7d8      	b.n	800ea84 <__multiply+0x50>
 800ead2:	f8b3 a000 	ldrh.w	sl, [r3]
 800ead6:	f1ba 0f00 	cmp.w	sl, #0
 800eada:	d024      	beq.n	800eb26 <__multiply+0xf2>
 800eadc:	f104 0e14 	add.w	lr, r4, #20
 800eae0:	46a9      	mov	r9, r5
 800eae2:	f04f 0c00 	mov.w	ip, #0
 800eae6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eaea:	f8d9 1000 	ldr.w	r1, [r9]
 800eaee:	fa1f fb82 	uxth.w	fp, r2
 800eaf2:	b289      	uxth	r1, r1
 800eaf4:	fb0a 110b 	mla	r1, sl, fp, r1
 800eaf8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800eafc:	f8d9 2000 	ldr.w	r2, [r9]
 800eb00:	4461      	add	r1, ip
 800eb02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eb06:	fb0a c20b 	mla	r2, sl, fp, ip
 800eb0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eb0e:	b289      	uxth	r1, r1
 800eb10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eb14:	4577      	cmp	r7, lr
 800eb16:	f849 1b04 	str.w	r1, [r9], #4
 800eb1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eb1e:	d8e2      	bhi.n	800eae6 <__multiply+0xb2>
 800eb20:	9a01      	ldr	r2, [sp, #4]
 800eb22:	f845 c002 	str.w	ip, [r5, r2]
 800eb26:	9a03      	ldr	r2, [sp, #12]
 800eb28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb2c:	3304      	adds	r3, #4
 800eb2e:	f1b9 0f00 	cmp.w	r9, #0
 800eb32:	d021      	beq.n	800eb78 <__multiply+0x144>
 800eb34:	6829      	ldr	r1, [r5, #0]
 800eb36:	f104 0c14 	add.w	ip, r4, #20
 800eb3a:	46ae      	mov	lr, r5
 800eb3c:	f04f 0a00 	mov.w	sl, #0
 800eb40:	f8bc b000 	ldrh.w	fp, [ip]
 800eb44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb48:	fb09 220b 	mla	r2, r9, fp, r2
 800eb4c:	4452      	add	r2, sl
 800eb4e:	b289      	uxth	r1, r1
 800eb50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eb54:	f84e 1b04 	str.w	r1, [lr], #4
 800eb58:	f85c 1b04 	ldr.w	r1, [ip], #4
 800eb5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb60:	f8be 1000 	ldrh.w	r1, [lr]
 800eb64:	fb09 110a 	mla	r1, r9, sl, r1
 800eb68:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800eb6c:	4567      	cmp	r7, ip
 800eb6e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb72:	d8e5      	bhi.n	800eb40 <__multiply+0x10c>
 800eb74:	9a01      	ldr	r2, [sp, #4]
 800eb76:	50a9      	str	r1, [r5, r2]
 800eb78:	3504      	adds	r5, #4
 800eb7a:	e799      	b.n	800eab0 <__multiply+0x7c>
 800eb7c:	3e01      	subs	r6, #1
 800eb7e:	e79b      	b.n	800eab8 <__multiply+0x84>
 800eb80:	0800f7f0 	.word	0x0800f7f0
 800eb84:	0800f801 	.word	0x0800f801

0800eb88 <__pow5mult>:
 800eb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb8c:	4615      	mov	r5, r2
 800eb8e:	f012 0203 	ands.w	r2, r2, #3
 800eb92:	4606      	mov	r6, r0
 800eb94:	460f      	mov	r7, r1
 800eb96:	d007      	beq.n	800eba8 <__pow5mult+0x20>
 800eb98:	4c25      	ldr	r4, [pc, #148]	; (800ec30 <__pow5mult+0xa8>)
 800eb9a:	3a01      	subs	r2, #1
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eba2:	f7ff fe9d 	bl	800e8e0 <__multadd>
 800eba6:	4607      	mov	r7, r0
 800eba8:	10ad      	asrs	r5, r5, #2
 800ebaa:	d03d      	beq.n	800ec28 <__pow5mult+0xa0>
 800ebac:	69f4      	ldr	r4, [r6, #28]
 800ebae:	b97c      	cbnz	r4, 800ebd0 <__pow5mult+0x48>
 800ebb0:	2010      	movs	r0, #16
 800ebb2:	f7ff fd7f 	bl	800e6b4 <malloc>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	61f0      	str	r0, [r6, #28]
 800ebba:	b928      	cbnz	r0, 800ebc8 <__pow5mult+0x40>
 800ebbc:	4b1d      	ldr	r3, [pc, #116]	; (800ec34 <__pow5mult+0xac>)
 800ebbe:	481e      	ldr	r0, [pc, #120]	; (800ec38 <__pow5mult+0xb0>)
 800ebc0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ebc4:	f000 fa72 	bl	800f0ac <__assert_func>
 800ebc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ebcc:	6004      	str	r4, [r0, #0]
 800ebce:	60c4      	str	r4, [r0, #12]
 800ebd0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ebd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebd8:	b94c      	cbnz	r4, 800ebee <__pow5mult+0x66>
 800ebda:	f240 2171 	movw	r1, #625	; 0x271
 800ebde:	4630      	mov	r0, r6
 800ebe0:	f7ff ff12 	bl	800ea08 <__i2b>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebea:	4604      	mov	r4, r0
 800ebec:	6003      	str	r3, [r0, #0]
 800ebee:	f04f 0900 	mov.w	r9, #0
 800ebf2:	07eb      	lsls	r3, r5, #31
 800ebf4:	d50a      	bpl.n	800ec0c <__pow5mult+0x84>
 800ebf6:	4639      	mov	r1, r7
 800ebf8:	4622      	mov	r2, r4
 800ebfa:	4630      	mov	r0, r6
 800ebfc:	f7ff ff1a 	bl	800ea34 <__multiply>
 800ec00:	4639      	mov	r1, r7
 800ec02:	4680      	mov	r8, r0
 800ec04:	4630      	mov	r0, r6
 800ec06:	f7ff fe49 	bl	800e89c <_Bfree>
 800ec0a:	4647      	mov	r7, r8
 800ec0c:	106d      	asrs	r5, r5, #1
 800ec0e:	d00b      	beq.n	800ec28 <__pow5mult+0xa0>
 800ec10:	6820      	ldr	r0, [r4, #0]
 800ec12:	b938      	cbnz	r0, 800ec24 <__pow5mult+0x9c>
 800ec14:	4622      	mov	r2, r4
 800ec16:	4621      	mov	r1, r4
 800ec18:	4630      	mov	r0, r6
 800ec1a:	f7ff ff0b 	bl	800ea34 <__multiply>
 800ec1e:	6020      	str	r0, [r4, #0]
 800ec20:	f8c0 9000 	str.w	r9, [r0]
 800ec24:	4604      	mov	r4, r0
 800ec26:	e7e4      	b.n	800ebf2 <__pow5mult+0x6a>
 800ec28:	4638      	mov	r0, r7
 800ec2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec2e:	bf00      	nop
 800ec30:	0800f950 	.word	0x0800f950
 800ec34:	0800f781 	.word	0x0800f781
 800ec38:	0800f801 	.word	0x0800f801

0800ec3c <__lshift>:
 800ec3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec40:	460c      	mov	r4, r1
 800ec42:	6849      	ldr	r1, [r1, #4]
 800ec44:	6923      	ldr	r3, [r4, #16]
 800ec46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec4a:	68a3      	ldr	r3, [r4, #8]
 800ec4c:	4607      	mov	r7, r0
 800ec4e:	4691      	mov	r9, r2
 800ec50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec54:	f108 0601 	add.w	r6, r8, #1
 800ec58:	42b3      	cmp	r3, r6
 800ec5a:	db0b      	blt.n	800ec74 <__lshift+0x38>
 800ec5c:	4638      	mov	r0, r7
 800ec5e:	f7ff fddd 	bl	800e81c <_Balloc>
 800ec62:	4605      	mov	r5, r0
 800ec64:	b948      	cbnz	r0, 800ec7a <__lshift+0x3e>
 800ec66:	4602      	mov	r2, r0
 800ec68:	4b28      	ldr	r3, [pc, #160]	; (800ed0c <__lshift+0xd0>)
 800ec6a:	4829      	ldr	r0, [pc, #164]	; (800ed10 <__lshift+0xd4>)
 800ec6c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ec70:	f000 fa1c 	bl	800f0ac <__assert_func>
 800ec74:	3101      	adds	r1, #1
 800ec76:	005b      	lsls	r3, r3, #1
 800ec78:	e7ee      	b.n	800ec58 <__lshift+0x1c>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	f100 0114 	add.w	r1, r0, #20
 800ec80:	f100 0210 	add.w	r2, r0, #16
 800ec84:	4618      	mov	r0, r3
 800ec86:	4553      	cmp	r3, sl
 800ec88:	db33      	blt.n	800ecf2 <__lshift+0xb6>
 800ec8a:	6920      	ldr	r0, [r4, #16]
 800ec8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec90:	f104 0314 	add.w	r3, r4, #20
 800ec94:	f019 091f 	ands.w	r9, r9, #31
 800ec98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eca0:	d02b      	beq.n	800ecfa <__lshift+0xbe>
 800eca2:	f1c9 0e20 	rsb	lr, r9, #32
 800eca6:	468a      	mov	sl, r1
 800eca8:	2200      	movs	r2, #0
 800ecaa:	6818      	ldr	r0, [r3, #0]
 800ecac:	fa00 f009 	lsl.w	r0, r0, r9
 800ecb0:	4310      	orrs	r0, r2
 800ecb2:	f84a 0b04 	str.w	r0, [sl], #4
 800ecb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecba:	459c      	cmp	ip, r3
 800ecbc:	fa22 f20e 	lsr.w	r2, r2, lr
 800ecc0:	d8f3      	bhi.n	800ecaa <__lshift+0x6e>
 800ecc2:	ebac 0304 	sub.w	r3, ip, r4
 800ecc6:	3b15      	subs	r3, #21
 800ecc8:	f023 0303 	bic.w	r3, r3, #3
 800eccc:	3304      	adds	r3, #4
 800ecce:	f104 0015 	add.w	r0, r4, #21
 800ecd2:	4584      	cmp	ip, r0
 800ecd4:	bf38      	it	cc
 800ecd6:	2304      	movcc	r3, #4
 800ecd8:	50ca      	str	r2, [r1, r3]
 800ecda:	b10a      	cbz	r2, 800ece0 <__lshift+0xa4>
 800ecdc:	f108 0602 	add.w	r6, r8, #2
 800ece0:	3e01      	subs	r6, #1
 800ece2:	4638      	mov	r0, r7
 800ece4:	612e      	str	r6, [r5, #16]
 800ece6:	4621      	mov	r1, r4
 800ece8:	f7ff fdd8 	bl	800e89c <_Bfree>
 800ecec:	4628      	mov	r0, r5
 800ecee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecf2:	f842 0f04 	str.w	r0, [r2, #4]!
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	e7c5      	b.n	800ec86 <__lshift+0x4a>
 800ecfa:	3904      	subs	r1, #4
 800ecfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed00:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed04:	459c      	cmp	ip, r3
 800ed06:	d8f9      	bhi.n	800ecfc <__lshift+0xc0>
 800ed08:	e7ea      	b.n	800ece0 <__lshift+0xa4>
 800ed0a:	bf00      	nop
 800ed0c:	0800f7f0 	.word	0x0800f7f0
 800ed10:	0800f801 	.word	0x0800f801

0800ed14 <__mcmp>:
 800ed14:	b530      	push	{r4, r5, lr}
 800ed16:	6902      	ldr	r2, [r0, #16]
 800ed18:	690c      	ldr	r4, [r1, #16]
 800ed1a:	1b12      	subs	r2, r2, r4
 800ed1c:	d10e      	bne.n	800ed3c <__mcmp+0x28>
 800ed1e:	f100 0314 	add.w	r3, r0, #20
 800ed22:	3114      	adds	r1, #20
 800ed24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ed28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ed2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ed30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ed34:	42a5      	cmp	r5, r4
 800ed36:	d003      	beq.n	800ed40 <__mcmp+0x2c>
 800ed38:	d305      	bcc.n	800ed46 <__mcmp+0x32>
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	4610      	mov	r0, r2
 800ed3e:	bd30      	pop	{r4, r5, pc}
 800ed40:	4283      	cmp	r3, r0
 800ed42:	d3f3      	bcc.n	800ed2c <__mcmp+0x18>
 800ed44:	e7fa      	b.n	800ed3c <__mcmp+0x28>
 800ed46:	f04f 32ff 	mov.w	r2, #4294967295
 800ed4a:	e7f7      	b.n	800ed3c <__mcmp+0x28>

0800ed4c <__mdiff>:
 800ed4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed50:	460c      	mov	r4, r1
 800ed52:	4606      	mov	r6, r0
 800ed54:	4611      	mov	r1, r2
 800ed56:	4620      	mov	r0, r4
 800ed58:	4690      	mov	r8, r2
 800ed5a:	f7ff ffdb 	bl	800ed14 <__mcmp>
 800ed5e:	1e05      	subs	r5, r0, #0
 800ed60:	d110      	bne.n	800ed84 <__mdiff+0x38>
 800ed62:	4629      	mov	r1, r5
 800ed64:	4630      	mov	r0, r6
 800ed66:	f7ff fd59 	bl	800e81c <_Balloc>
 800ed6a:	b930      	cbnz	r0, 800ed7a <__mdiff+0x2e>
 800ed6c:	4b3a      	ldr	r3, [pc, #232]	; (800ee58 <__mdiff+0x10c>)
 800ed6e:	4602      	mov	r2, r0
 800ed70:	f240 2137 	movw	r1, #567	; 0x237
 800ed74:	4839      	ldr	r0, [pc, #228]	; (800ee5c <__mdiff+0x110>)
 800ed76:	f000 f999 	bl	800f0ac <__assert_func>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed84:	bfa4      	itt	ge
 800ed86:	4643      	movge	r3, r8
 800ed88:	46a0      	movge	r8, r4
 800ed8a:	4630      	mov	r0, r6
 800ed8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ed90:	bfa6      	itte	ge
 800ed92:	461c      	movge	r4, r3
 800ed94:	2500      	movge	r5, #0
 800ed96:	2501      	movlt	r5, #1
 800ed98:	f7ff fd40 	bl	800e81c <_Balloc>
 800ed9c:	b920      	cbnz	r0, 800eda8 <__mdiff+0x5c>
 800ed9e:	4b2e      	ldr	r3, [pc, #184]	; (800ee58 <__mdiff+0x10c>)
 800eda0:	4602      	mov	r2, r0
 800eda2:	f240 2145 	movw	r1, #581	; 0x245
 800eda6:	e7e5      	b.n	800ed74 <__mdiff+0x28>
 800eda8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800edac:	6926      	ldr	r6, [r4, #16]
 800edae:	60c5      	str	r5, [r0, #12]
 800edb0:	f104 0914 	add.w	r9, r4, #20
 800edb4:	f108 0514 	add.w	r5, r8, #20
 800edb8:	f100 0e14 	add.w	lr, r0, #20
 800edbc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800edc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800edc4:	f108 0210 	add.w	r2, r8, #16
 800edc8:	46f2      	mov	sl, lr
 800edca:	2100      	movs	r1, #0
 800edcc:	f859 3b04 	ldr.w	r3, [r9], #4
 800edd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800edd4:	fa11 f88b 	uxtah	r8, r1, fp
 800edd8:	b299      	uxth	r1, r3
 800edda:	0c1b      	lsrs	r3, r3, #16
 800eddc:	eba8 0801 	sub.w	r8, r8, r1
 800ede0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ede4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ede8:	fa1f f888 	uxth.w	r8, r8
 800edec:	1419      	asrs	r1, r3, #16
 800edee:	454e      	cmp	r6, r9
 800edf0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800edf4:	f84a 3b04 	str.w	r3, [sl], #4
 800edf8:	d8e8      	bhi.n	800edcc <__mdiff+0x80>
 800edfa:	1b33      	subs	r3, r6, r4
 800edfc:	3b15      	subs	r3, #21
 800edfe:	f023 0303 	bic.w	r3, r3, #3
 800ee02:	3304      	adds	r3, #4
 800ee04:	3415      	adds	r4, #21
 800ee06:	42a6      	cmp	r6, r4
 800ee08:	bf38      	it	cc
 800ee0a:	2304      	movcc	r3, #4
 800ee0c:	441d      	add	r5, r3
 800ee0e:	4473      	add	r3, lr
 800ee10:	469e      	mov	lr, r3
 800ee12:	462e      	mov	r6, r5
 800ee14:	4566      	cmp	r6, ip
 800ee16:	d30e      	bcc.n	800ee36 <__mdiff+0xea>
 800ee18:	f10c 0203 	add.w	r2, ip, #3
 800ee1c:	1b52      	subs	r2, r2, r5
 800ee1e:	f022 0203 	bic.w	r2, r2, #3
 800ee22:	3d03      	subs	r5, #3
 800ee24:	45ac      	cmp	ip, r5
 800ee26:	bf38      	it	cc
 800ee28:	2200      	movcc	r2, #0
 800ee2a:	4413      	add	r3, r2
 800ee2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ee30:	b17a      	cbz	r2, 800ee52 <__mdiff+0x106>
 800ee32:	6107      	str	r7, [r0, #16]
 800ee34:	e7a4      	b.n	800ed80 <__mdiff+0x34>
 800ee36:	f856 8b04 	ldr.w	r8, [r6], #4
 800ee3a:	fa11 f288 	uxtah	r2, r1, r8
 800ee3e:	1414      	asrs	r4, r2, #16
 800ee40:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ee44:	b292      	uxth	r2, r2
 800ee46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ee4a:	f84e 2b04 	str.w	r2, [lr], #4
 800ee4e:	1421      	asrs	r1, r4, #16
 800ee50:	e7e0      	b.n	800ee14 <__mdiff+0xc8>
 800ee52:	3f01      	subs	r7, #1
 800ee54:	e7ea      	b.n	800ee2c <__mdiff+0xe0>
 800ee56:	bf00      	nop
 800ee58:	0800f7f0 	.word	0x0800f7f0
 800ee5c:	0800f801 	.word	0x0800f801

0800ee60 <__d2b>:
 800ee60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee64:	460f      	mov	r7, r1
 800ee66:	2101      	movs	r1, #1
 800ee68:	ec59 8b10 	vmov	r8, r9, d0
 800ee6c:	4616      	mov	r6, r2
 800ee6e:	f7ff fcd5 	bl	800e81c <_Balloc>
 800ee72:	4604      	mov	r4, r0
 800ee74:	b930      	cbnz	r0, 800ee84 <__d2b+0x24>
 800ee76:	4602      	mov	r2, r0
 800ee78:	4b24      	ldr	r3, [pc, #144]	; (800ef0c <__d2b+0xac>)
 800ee7a:	4825      	ldr	r0, [pc, #148]	; (800ef10 <__d2b+0xb0>)
 800ee7c:	f240 310f 	movw	r1, #783	; 0x30f
 800ee80:	f000 f914 	bl	800f0ac <__assert_func>
 800ee84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ee88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee8c:	bb2d      	cbnz	r5, 800eeda <__d2b+0x7a>
 800ee8e:	9301      	str	r3, [sp, #4]
 800ee90:	f1b8 0300 	subs.w	r3, r8, #0
 800ee94:	d026      	beq.n	800eee4 <__d2b+0x84>
 800ee96:	4668      	mov	r0, sp
 800ee98:	9300      	str	r3, [sp, #0]
 800ee9a:	f7ff fd87 	bl	800e9ac <__lo0bits>
 800ee9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eea2:	b1e8      	cbz	r0, 800eee0 <__d2b+0x80>
 800eea4:	f1c0 0320 	rsb	r3, r0, #32
 800eea8:	fa02 f303 	lsl.w	r3, r2, r3
 800eeac:	430b      	orrs	r3, r1
 800eeae:	40c2      	lsrs	r2, r0
 800eeb0:	6163      	str	r3, [r4, #20]
 800eeb2:	9201      	str	r2, [sp, #4]
 800eeb4:	9b01      	ldr	r3, [sp, #4]
 800eeb6:	61a3      	str	r3, [r4, #24]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	bf14      	ite	ne
 800eebc:	2202      	movne	r2, #2
 800eebe:	2201      	moveq	r2, #1
 800eec0:	6122      	str	r2, [r4, #16]
 800eec2:	b1bd      	cbz	r5, 800eef4 <__d2b+0x94>
 800eec4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eec8:	4405      	add	r5, r0
 800eeca:	603d      	str	r5, [r7, #0]
 800eecc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eed0:	6030      	str	r0, [r6, #0]
 800eed2:	4620      	mov	r0, r4
 800eed4:	b003      	add	sp, #12
 800eed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eeda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eede:	e7d6      	b.n	800ee8e <__d2b+0x2e>
 800eee0:	6161      	str	r1, [r4, #20]
 800eee2:	e7e7      	b.n	800eeb4 <__d2b+0x54>
 800eee4:	a801      	add	r0, sp, #4
 800eee6:	f7ff fd61 	bl	800e9ac <__lo0bits>
 800eeea:	9b01      	ldr	r3, [sp, #4]
 800eeec:	6163      	str	r3, [r4, #20]
 800eeee:	3020      	adds	r0, #32
 800eef0:	2201      	movs	r2, #1
 800eef2:	e7e5      	b.n	800eec0 <__d2b+0x60>
 800eef4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eef8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eefc:	6038      	str	r0, [r7, #0]
 800eefe:	6918      	ldr	r0, [r3, #16]
 800ef00:	f7ff fd34 	bl	800e96c <__hi0bits>
 800ef04:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ef08:	e7e2      	b.n	800eed0 <__d2b+0x70>
 800ef0a:	bf00      	nop
 800ef0c:	0800f7f0 	.word	0x0800f7f0
 800ef10:	0800f801 	.word	0x0800f801

0800ef14 <__sflush_r>:
 800ef14:	898a      	ldrh	r2, [r1, #12]
 800ef16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef1a:	4605      	mov	r5, r0
 800ef1c:	0710      	lsls	r0, r2, #28
 800ef1e:	460c      	mov	r4, r1
 800ef20:	d458      	bmi.n	800efd4 <__sflush_r+0xc0>
 800ef22:	684b      	ldr	r3, [r1, #4]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	dc05      	bgt.n	800ef34 <__sflush_r+0x20>
 800ef28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	dc02      	bgt.n	800ef34 <__sflush_r+0x20>
 800ef2e:	2000      	movs	r0, #0
 800ef30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef36:	2e00      	cmp	r6, #0
 800ef38:	d0f9      	beq.n	800ef2e <__sflush_r+0x1a>
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef40:	682f      	ldr	r7, [r5, #0]
 800ef42:	6a21      	ldr	r1, [r4, #32]
 800ef44:	602b      	str	r3, [r5, #0]
 800ef46:	d032      	beq.n	800efae <__sflush_r+0x9a>
 800ef48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef4a:	89a3      	ldrh	r3, [r4, #12]
 800ef4c:	075a      	lsls	r2, r3, #29
 800ef4e:	d505      	bpl.n	800ef5c <__sflush_r+0x48>
 800ef50:	6863      	ldr	r3, [r4, #4]
 800ef52:	1ac0      	subs	r0, r0, r3
 800ef54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef56:	b10b      	cbz	r3, 800ef5c <__sflush_r+0x48>
 800ef58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef5a:	1ac0      	subs	r0, r0, r3
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	4602      	mov	r2, r0
 800ef60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef62:	6a21      	ldr	r1, [r4, #32]
 800ef64:	4628      	mov	r0, r5
 800ef66:	47b0      	blx	r6
 800ef68:	1c43      	adds	r3, r0, #1
 800ef6a:	89a3      	ldrh	r3, [r4, #12]
 800ef6c:	d106      	bne.n	800ef7c <__sflush_r+0x68>
 800ef6e:	6829      	ldr	r1, [r5, #0]
 800ef70:	291d      	cmp	r1, #29
 800ef72:	d82b      	bhi.n	800efcc <__sflush_r+0xb8>
 800ef74:	4a29      	ldr	r2, [pc, #164]	; (800f01c <__sflush_r+0x108>)
 800ef76:	410a      	asrs	r2, r1
 800ef78:	07d6      	lsls	r6, r2, #31
 800ef7a:	d427      	bmi.n	800efcc <__sflush_r+0xb8>
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	6062      	str	r2, [r4, #4]
 800ef80:	04d9      	lsls	r1, r3, #19
 800ef82:	6922      	ldr	r2, [r4, #16]
 800ef84:	6022      	str	r2, [r4, #0]
 800ef86:	d504      	bpl.n	800ef92 <__sflush_r+0x7e>
 800ef88:	1c42      	adds	r2, r0, #1
 800ef8a:	d101      	bne.n	800ef90 <__sflush_r+0x7c>
 800ef8c:	682b      	ldr	r3, [r5, #0]
 800ef8e:	b903      	cbnz	r3, 800ef92 <__sflush_r+0x7e>
 800ef90:	6560      	str	r0, [r4, #84]	; 0x54
 800ef92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef94:	602f      	str	r7, [r5, #0]
 800ef96:	2900      	cmp	r1, #0
 800ef98:	d0c9      	beq.n	800ef2e <__sflush_r+0x1a>
 800ef9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef9e:	4299      	cmp	r1, r3
 800efa0:	d002      	beq.n	800efa8 <__sflush_r+0x94>
 800efa2:	4628      	mov	r0, r5
 800efa4:	f7ff fb3a 	bl	800e61c <_free_r>
 800efa8:	2000      	movs	r0, #0
 800efaa:	6360      	str	r0, [r4, #52]	; 0x34
 800efac:	e7c0      	b.n	800ef30 <__sflush_r+0x1c>
 800efae:	2301      	movs	r3, #1
 800efb0:	4628      	mov	r0, r5
 800efb2:	47b0      	blx	r6
 800efb4:	1c41      	adds	r1, r0, #1
 800efb6:	d1c8      	bne.n	800ef4a <__sflush_r+0x36>
 800efb8:	682b      	ldr	r3, [r5, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d0c5      	beq.n	800ef4a <__sflush_r+0x36>
 800efbe:	2b1d      	cmp	r3, #29
 800efc0:	d001      	beq.n	800efc6 <__sflush_r+0xb2>
 800efc2:	2b16      	cmp	r3, #22
 800efc4:	d101      	bne.n	800efca <__sflush_r+0xb6>
 800efc6:	602f      	str	r7, [r5, #0]
 800efc8:	e7b1      	b.n	800ef2e <__sflush_r+0x1a>
 800efca:	89a3      	ldrh	r3, [r4, #12]
 800efcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efd0:	81a3      	strh	r3, [r4, #12]
 800efd2:	e7ad      	b.n	800ef30 <__sflush_r+0x1c>
 800efd4:	690f      	ldr	r7, [r1, #16]
 800efd6:	2f00      	cmp	r7, #0
 800efd8:	d0a9      	beq.n	800ef2e <__sflush_r+0x1a>
 800efda:	0793      	lsls	r3, r2, #30
 800efdc:	680e      	ldr	r6, [r1, #0]
 800efde:	bf08      	it	eq
 800efe0:	694b      	ldreq	r3, [r1, #20]
 800efe2:	600f      	str	r7, [r1, #0]
 800efe4:	bf18      	it	ne
 800efe6:	2300      	movne	r3, #0
 800efe8:	eba6 0807 	sub.w	r8, r6, r7
 800efec:	608b      	str	r3, [r1, #8]
 800efee:	f1b8 0f00 	cmp.w	r8, #0
 800eff2:	dd9c      	ble.n	800ef2e <__sflush_r+0x1a>
 800eff4:	6a21      	ldr	r1, [r4, #32]
 800eff6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eff8:	4643      	mov	r3, r8
 800effa:	463a      	mov	r2, r7
 800effc:	4628      	mov	r0, r5
 800effe:	47b0      	blx	r6
 800f000:	2800      	cmp	r0, #0
 800f002:	dc06      	bgt.n	800f012 <__sflush_r+0xfe>
 800f004:	89a3      	ldrh	r3, [r4, #12]
 800f006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f00a:	81a3      	strh	r3, [r4, #12]
 800f00c:	f04f 30ff 	mov.w	r0, #4294967295
 800f010:	e78e      	b.n	800ef30 <__sflush_r+0x1c>
 800f012:	4407      	add	r7, r0
 800f014:	eba8 0800 	sub.w	r8, r8, r0
 800f018:	e7e9      	b.n	800efee <__sflush_r+0xda>
 800f01a:	bf00      	nop
 800f01c:	dfbffffe 	.word	0xdfbffffe

0800f020 <_fflush_r>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	690b      	ldr	r3, [r1, #16]
 800f024:	4605      	mov	r5, r0
 800f026:	460c      	mov	r4, r1
 800f028:	b913      	cbnz	r3, 800f030 <_fflush_r+0x10>
 800f02a:	2500      	movs	r5, #0
 800f02c:	4628      	mov	r0, r5
 800f02e:	bd38      	pop	{r3, r4, r5, pc}
 800f030:	b118      	cbz	r0, 800f03a <_fflush_r+0x1a>
 800f032:	6a03      	ldr	r3, [r0, #32]
 800f034:	b90b      	cbnz	r3, 800f03a <_fflush_r+0x1a>
 800f036:	f7fe fb7b 	bl	800d730 <__sinit>
 800f03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d0f3      	beq.n	800f02a <_fflush_r+0xa>
 800f042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f044:	07d0      	lsls	r0, r2, #31
 800f046:	d404      	bmi.n	800f052 <_fflush_r+0x32>
 800f048:	0599      	lsls	r1, r3, #22
 800f04a:	d402      	bmi.n	800f052 <_fflush_r+0x32>
 800f04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f04e:	f7fe fc66 	bl	800d91e <__retarget_lock_acquire_recursive>
 800f052:	4628      	mov	r0, r5
 800f054:	4621      	mov	r1, r4
 800f056:	f7ff ff5d 	bl	800ef14 <__sflush_r>
 800f05a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f05c:	07da      	lsls	r2, r3, #31
 800f05e:	4605      	mov	r5, r0
 800f060:	d4e4      	bmi.n	800f02c <_fflush_r+0xc>
 800f062:	89a3      	ldrh	r3, [r4, #12]
 800f064:	059b      	lsls	r3, r3, #22
 800f066:	d4e1      	bmi.n	800f02c <_fflush_r+0xc>
 800f068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f06a:	f7fe fc59 	bl	800d920 <__retarget_lock_release_recursive>
 800f06e:	e7dd      	b.n	800f02c <_fflush_r+0xc>

0800f070 <_sbrk_r>:
 800f070:	b538      	push	{r3, r4, r5, lr}
 800f072:	4d06      	ldr	r5, [pc, #24]	; (800f08c <_sbrk_r+0x1c>)
 800f074:	2300      	movs	r3, #0
 800f076:	4604      	mov	r4, r0
 800f078:	4608      	mov	r0, r1
 800f07a:	602b      	str	r3, [r5, #0]
 800f07c:	f7f3 f88e 	bl	800219c <_sbrk>
 800f080:	1c43      	adds	r3, r0, #1
 800f082:	d102      	bne.n	800f08a <_sbrk_r+0x1a>
 800f084:	682b      	ldr	r3, [r5, #0]
 800f086:	b103      	cbz	r3, 800f08a <_sbrk_r+0x1a>
 800f088:	6023      	str	r3, [r4, #0]
 800f08a:	bd38      	pop	{r3, r4, r5, pc}
 800f08c:	20002290 	.word	0x20002290

0800f090 <memcpy>:
 800f090:	440a      	add	r2, r1
 800f092:	4291      	cmp	r1, r2
 800f094:	f100 33ff 	add.w	r3, r0, #4294967295
 800f098:	d100      	bne.n	800f09c <memcpy+0xc>
 800f09a:	4770      	bx	lr
 800f09c:	b510      	push	{r4, lr}
 800f09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0a6:	4291      	cmp	r1, r2
 800f0a8:	d1f9      	bne.n	800f09e <memcpy+0xe>
 800f0aa:	bd10      	pop	{r4, pc}

0800f0ac <__assert_func>:
 800f0ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0ae:	4614      	mov	r4, r2
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	4b09      	ldr	r3, [pc, #36]	; (800f0d8 <__assert_func+0x2c>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	4605      	mov	r5, r0
 800f0b8:	68d8      	ldr	r0, [r3, #12]
 800f0ba:	b14c      	cbz	r4, 800f0d0 <__assert_func+0x24>
 800f0bc:	4b07      	ldr	r3, [pc, #28]	; (800f0dc <__assert_func+0x30>)
 800f0be:	9100      	str	r1, [sp, #0]
 800f0c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f0c4:	4906      	ldr	r1, [pc, #24]	; (800f0e0 <__assert_func+0x34>)
 800f0c6:	462b      	mov	r3, r5
 800f0c8:	f000 f844 	bl	800f154 <fiprintf>
 800f0cc:	f000 f854 	bl	800f178 <abort>
 800f0d0:	4b04      	ldr	r3, [pc, #16]	; (800f0e4 <__assert_func+0x38>)
 800f0d2:	461c      	mov	r4, r3
 800f0d4:	e7f3      	b.n	800f0be <__assert_func+0x12>
 800f0d6:	bf00      	nop
 800f0d8:	20000178 	.word	0x20000178
 800f0dc:	0800f966 	.word	0x0800f966
 800f0e0:	0800f973 	.word	0x0800f973
 800f0e4:	0800f9a1 	.word	0x0800f9a1

0800f0e8 <_calloc_r>:
 800f0e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f0ea:	fba1 2402 	umull	r2, r4, r1, r2
 800f0ee:	b94c      	cbnz	r4, 800f104 <_calloc_r+0x1c>
 800f0f0:	4611      	mov	r1, r2
 800f0f2:	9201      	str	r2, [sp, #4]
 800f0f4:	f7ff fb06 	bl	800e704 <_malloc_r>
 800f0f8:	9a01      	ldr	r2, [sp, #4]
 800f0fa:	4605      	mov	r5, r0
 800f0fc:	b930      	cbnz	r0, 800f10c <_calloc_r+0x24>
 800f0fe:	4628      	mov	r0, r5
 800f100:	b003      	add	sp, #12
 800f102:	bd30      	pop	{r4, r5, pc}
 800f104:	220c      	movs	r2, #12
 800f106:	6002      	str	r2, [r0, #0]
 800f108:	2500      	movs	r5, #0
 800f10a:	e7f8      	b.n	800f0fe <_calloc_r+0x16>
 800f10c:	4621      	mov	r1, r4
 800f10e:	f7fe fb88 	bl	800d822 <memset>
 800f112:	e7f4      	b.n	800f0fe <_calloc_r+0x16>

0800f114 <__ascii_mbtowc>:
 800f114:	b082      	sub	sp, #8
 800f116:	b901      	cbnz	r1, 800f11a <__ascii_mbtowc+0x6>
 800f118:	a901      	add	r1, sp, #4
 800f11a:	b142      	cbz	r2, 800f12e <__ascii_mbtowc+0x1a>
 800f11c:	b14b      	cbz	r3, 800f132 <__ascii_mbtowc+0x1e>
 800f11e:	7813      	ldrb	r3, [r2, #0]
 800f120:	600b      	str	r3, [r1, #0]
 800f122:	7812      	ldrb	r2, [r2, #0]
 800f124:	1e10      	subs	r0, r2, #0
 800f126:	bf18      	it	ne
 800f128:	2001      	movne	r0, #1
 800f12a:	b002      	add	sp, #8
 800f12c:	4770      	bx	lr
 800f12e:	4610      	mov	r0, r2
 800f130:	e7fb      	b.n	800f12a <__ascii_mbtowc+0x16>
 800f132:	f06f 0001 	mvn.w	r0, #1
 800f136:	e7f8      	b.n	800f12a <__ascii_mbtowc+0x16>

0800f138 <__ascii_wctomb>:
 800f138:	b149      	cbz	r1, 800f14e <__ascii_wctomb+0x16>
 800f13a:	2aff      	cmp	r2, #255	; 0xff
 800f13c:	bf85      	ittet	hi
 800f13e:	238a      	movhi	r3, #138	; 0x8a
 800f140:	6003      	strhi	r3, [r0, #0]
 800f142:	700a      	strbls	r2, [r1, #0]
 800f144:	f04f 30ff 	movhi.w	r0, #4294967295
 800f148:	bf98      	it	ls
 800f14a:	2001      	movls	r0, #1
 800f14c:	4770      	bx	lr
 800f14e:	4608      	mov	r0, r1
 800f150:	4770      	bx	lr
	...

0800f154 <fiprintf>:
 800f154:	b40e      	push	{r1, r2, r3}
 800f156:	b503      	push	{r0, r1, lr}
 800f158:	4601      	mov	r1, r0
 800f15a:	ab03      	add	r3, sp, #12
 800f15c:	4805      	ldr	r0, [pc, #20]	; (800f174 <fiprintf+0x20>)
 800f15e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f162:	6800      	ldr	r0, [r0, #0]
 800f164:	9301      	str	r3, [sp, #4]
 800f166:	f000 f837 	bl	800f1d8 <_vfiprintf_r>
 800f16a:	b002      	add	sp, #8
 800f16c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f170:	b003      	add	sp, #12
 800f172:	4770      	bx	lr
 800f174:	20000178 	.word	0x20000178

0800f178 <abort>:
 800f178:	b508      	push	{r3, lr}
 800f17a:	2006      	movs	r0, #6
 800f17c:	f000 fa04 	bl	800f588 <raise>
 800f180:	2001      	movs	r0, #1
 800f182:	f7f2 ff93 	bl	80020ac <_exit>

0800f186 <__sfputc_r>:
 800f186:	6893      	ldr	r3, [r2, #8]
 800f188:	3b01      	subs	r3, #1
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	b410      	push	{r4}
 800f18e:	6093      	str	r3, [r2, #8]
 800f190:	da08      	bge.n	800f1a4 <__sfputc_r+0x1e>
 800f192:	6994      	ldr	r4, [r2, #24]
 800f194:	42a3      	cmp	r3, r4
 800f196:	db01      	blt.n	800f19c <__sfputc_r+0x16>
 800f198:	290a      	cmp	r1, #10
 800f19a:	d103      	bne.n	800f1a4 <__sfputc_r+0x1e>
 800f19c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1a0:	f000 b934 	b.w	800f40c <__swbuf_r>
 800f1a4:	6813      	ldr	r3, [r2, #0]
 800f1a6:	1c58      	adds	r0, r3, #1
 800f1a8:	6010      	str	r0, [r2, #0]
 800f1aa:	7019      	strb	r1, [r3, #0]
 800f1ac:	4608      	mov	r0, r1
 800f1ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1b2:	4770      	bx	lr

0800f1b4 <__sfputs_r>:
 800f1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b6:	4606      	mov	r6, r0
 800f1b8:	460f      	mov	r7, r1
 800f1ba:	4614      	mov	r4, r2
 800f1bc:	18d5      	adds	r5, r2, r3
 800f1be:	42ac      	cmp	r4, r5
 800f1c0:	d101      	bne.n	800f1c6 <__sfputs_r+0x12>
 800f1c2:	2000      	movs	r0, #0
 800f1c4:	e007      	b.n	800f1d6 <__sfputs_r+0x22>
 800f1c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1ca:	463a      	mov	r2, r7
 800f1cc:	4630      	mov	r0, r6
 800f1ce:	f7ff ffda 	bl	800f186 <__sfputc_r>
 800f1d2:	1c43      	adds	r3, r0, #1
 800f1d4:	d1f3      	bne.n	800f1be <__sfputs_r+0xa>
 800f1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1d8 <_vfiprintf_r>:
 800f1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1dc:	460d      	mov	r5, r1
 800f1de:	b09d      	sub	sp, #116	; 0x74
 800f1e0:	4614      	mov	r4, r2
 800f1e2:	4698      	mov	r8, r3
 800f1e4:	4606      	mov	r6, r0
 800f1e6:	b118      	cbz	r0, 800f1f0 <_vfiprintf_r+0x18>
 800f1e8:	6a03      	ldr	r3, [r0, #32]
 800f1ea:	b90b      	cbnz	r3, 800f1f0 <_vfiprintf_r+0x18>
 800f1ec:	f7fe faa0 	bl	800d730 <__sinit>
 800f1f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1f2:	07d9      	lsls	r1, r3, #31
 800f1f4:	d405      	bmi.n	800f202 <_vfiprintf_r+0x2a>
 800f1f6:	89ab      	ldrh	r3, [r5, #12]
 800f1f8:	059a      	lsls	r2, r3, #22
 800f1fa:	d402      	bmi.n	800f202 <_vfiprintf_r+0x2a>
 800f1fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1fe:	f7fe fb8e 	bl	800d91e <__retarget_lock_acquire_recursive>
 800f202:	89ab      	ldrh	r3, [r5, #12]
 800f204:	071b      	lsls	r3, r3, #28
 800f206:	d501      	bpl.n	800f20c <_vfiprintf_r+0x34>
 800f208:	692b      	ldr	r3, [r5, #16]
 800f20a:	b99b      	cbnz	r3, 800f234 <_vfiprintf_r+0x5c>
 800f20c:	4629      	mov	r1, r5
 800f20e:	4630      	mov	r0, r6
 800f210:	f000 f93a 	bl	800f488 <__swsetup_r>
 800f214:	b170      	cbz	r0, 800f234 <_vfiprintf_r+0x5c>
 800f216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f218:	07dc      	lsls	r4, r3, #31
 800f21a:	d504      	bpl.n	800f226 <_vfiprintf_r+0x4e>
 800f21c:	f04f 30ff 	mov.w	r0, #4294967295
 800f220:	b01d      	add	sp, #116	; 0x74
 800f222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f226:	89ab      	ldrh	r3, [r5, #12]
 800f228:	0598      	lsls	r0, r3, #22
 800f22a:	d4f7      	bmi.n	800f21c <_vfiprintf_r+0x44>
 800f22c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f22e:	f7fe fb77 	bl	800d920 <__retarget_lock_release_recursive>
 800f232:	e7f3      	b.n	800f21c <_vfiprintf_r+0x44>
 800f234:	2300      	movs	r3, #0
 800f236:	9309      	str	r3, [sp, #36]	; 0x24
 800f238:	2320      	movs	r3, #32
 800f23a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f23e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f242:	2330      	movs	r3, #48	; 0x30
 800f244:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f3f8 <_vfiprintf_r+0x220>
 800f248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f24c:	f04f 0901 	mov.w	r9, #1
 800f250:	4623      	mov	r3, r4
 800f252:	469a      	mov	sl, r3
 800f254:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f258:	b10a      	cbz	r2, 800f25e <_vfiprintf_r+0x86>
 800f25a:	2a25      	cmp	r2, #37	; 0x25
 800f25c:	d1f9      	bne.n	800f252 <_vfiprintf_r+0x7a>
 800f25e:	ebba 0b04 	subs.w	fp, sl, r4
 800f262:	d00b      	beq.n	800f27c <_vfiprintf_r+0xa4>
 800f264:	465b      	mov	r3, fp
 800f266:	4622      	mov	r2, r4
 800f268:	4629      	mov	r1, r5
 800f26a:	4630      	mov	r0, r6
 800f26c:	f7ff ffa2 	bl	800f1b4 <__sfputs_r>
 800f270:	3001      	adds	r0, #1
 800f272:	f000 80a9 	beq.w	800f3c8 <_vfiprintf_r+0x1f0>
 800f276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f278:	445a      	add	r2, fp
 800f27a:	9209      	str	r2, [sp, #36]	; 0x24
 800f27c:	f89a 3000 	ldrb.w	r3, [sl]
 800f280:	2b00      	cmp	r3, #0
 800f282:	f000 80a1 	beq.w	800f3c8 <_vfiprintf_r+0x1f0>
 800f286:	2300      	movs	r3, #0
 800f288:	f04f 32ff 	mov.w	r2, #4294967295
 800f28c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f290:	f10a 0a01 	add.w	sl, sl, #1
 800f294:	9304      	str	r3, [sp, #16]
 800f296:	9307      	str	r3, [sp, #28]
 800f298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f29c:	931a      	str	r3, [sp, #104]	; 0x68
 800f29e:	4654      	mov	r4, sl
 800f2a0:	2205      	movs	r2, #5
 800f2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2a6:	4854      	ldr	r0, [pc, #336]	; (800f3f8 <_vfiprintf_r+0x220>)
 800f2a8:	f7f0 ff9a 	bl	80001e0 <memchr>
 800f2ac:	9a04      	ldr	r2, [sp, #16]
 800f2ae:	b9d8      	cbnz	r0, 800f2e8 <_vfiprintf_r+0x110>
 800f2b0:	06d1      	lsls	r1, r2, #27
 800f2b2:	bf44      	itt	mi
 800f2b4:	2320      	movmi	r3, #32
 800f2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2ba:	0713      	lsls	r3, r2, #28
 800f2bc:	bf44      	itt	mi
 800f2be:	232b      	movmi	r3, #43	; 0x2b
 800f2c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800f2c8:	2b2a      	cmp	r3, #42	; 0x2a
 800f2ca:	d015      	beq.n	800f2f8 <_vfiprintf_r+0x120>
 800f2cc:	9a07      	ldr	r2, [sp, #28]
 800f2ce:	4654      	mov	r4, sl
 800f2d0:	2000      	movs	r0, #0
 800f2d2:	f04f 0c0a 	mov.w	ip, #10
 800f2d6:	4621      	mov	r1, r4
 800f2d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2dc:	3b30      	subs	r3, #48	; 0x30
 800f2de:	2b09      	cmp	r3, #9
 800f2e0:	d94d      	bls.n	800f37e <_vfiprintf_r+0x1a6>
 800f2e2:	b1b0      	cbz	r0, 800f312 <_vfiprintf_r+0x13a>
 800f2e4:	9207      	str	r2, [sp, #28]
 800f2e6:	e014      	b.n	800f312 <_vfiprintf_r+0x13a>
 800f2e8:	eba0 0308 	sub.w	r3, r0, r8
 800f2ec:	fa09 f303 	lsl.w	r3, r9, r3
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	9304      	str	r3, [sp, #16]
 800f2f4:	46a2      	mov	sl, r4
 800f2f6:	e7d2      	b.n	800f29e <_vfiprintf_r+0xc6>
 800f2f8:	9b03      	ldr	r3, [sp, #12]
 800f2fa:	1d19      	adds	r1, r3, #4
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	9103      	str	r1, [sp, #12]
 800f300:	2b00      	cmp	r3, #0
 800f302:	bfbb      	ittet	lt
 800f304:	425b      	neglt	r3, r3
 800f306:	f042 0202 	orrlt.w	r2, r2, #2
 800f30a:	9307      	strge	r3, [sp, #28]
 800f30c:	9307      	strlt	r3, [sp, #28]
 800f30e:	bfb8      	it	lt
 800f310:	9204      	strlt	r2, [sp, #16]
 800f312:	7823      	ldrb	r3, [r4, #0]
 800f314:	2b2e      	cmp	r3, #46	; 0x2e
 800f316:	d10c      	bne.n	800f332 <_vfiprintf_r+0x15a>
 800f318:	7863      	ldrb	r3, [r4, #1]
 800f31a:	2b2a      	cmp	r3, #42	; 0x2a
 800f31c:	d134      	bne.n	800f388 <_vfiprintf_r+0x1b0>
 800f31e:	9b03      	ldr	r3, [sp, #12]
 800f320:	1d1a      	adds	r2, r3, #4
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	9203      	str	r2, [sp, #12]
 800f326:	2b00      	cmp	r3, #0
 800f328:	bfb8      	it	lt
 800f32a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f32e:	3402      	adds	r4, #2
 800f330:	9305      	str	r3, [sp, #20]
 800f332:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f408 <_vfiprintf_r+0x230>
 800f336:	7821      	ldrb	r1, [r4, #0]
 800f338:	2203      	movs	r2, #3
 800f33a:	4650      	mov	r0, sl
 800f33c:	f7f0 ff50 	bl	80001e0 <memchr>
 800f340:	b138      	cbz	r0, 800f352 <_vfiprintf_r+0x17a>
 800f342:	9b04      	ldr	r3, [sp, #16]
 800f344:	eba0 000a 	sub.w	r0, r0, sl
 800f348:	2240      	movs	r2, #64	; 0x40
 800f34a:	4082      	lsls	r2, r0
 800f34c:	4313      	orrs	r3, r2
 800f34e:	3401      	adds	r4, #1
 800f350:	9304      	str	r3, [sp, #16]
 800f352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f356:	4829      	ldr	r0, [pc, #164]	; (800f3fc <_vfiprintf_r+0x224>)
 800f358:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f35c:	2206      	movs	r2, #6
 800f35e:	f7f0 ff3f 	bl	80001e0 <memchr>
 800f362:	2800      	cmp	r0, #0
 800f364:	d03f      	beq.n	800f3e6 <_vfiprintf_r+0x20e>
 800f366:	4b26      	ldr	r3, [pc, #152]	; (800f400 <_vfiprintf_r+0x228>)
 800f368:	bb1b      	cbnz	r3, 800f3b2 <_vfiprintf_r+0x1da>
 800f36a:	9b03      	ldr	r3, [sp, #12]
 800f36c:	3307      	adds	r3, #7
 800f36e:	f023 0307 	bic.w	r3, r3, #7
 800f372:	3308      	adds	r3, #8
 800f374:	9303      	str	r3, [sp, #12]
 800f376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f378:	443b      	add	r3, r7
 800f37a:	9309      	str	r3, [sp, #36]	; 0x24
 800f37c:	e768      	b.n	800f250 <_vfiprintf_r+0x78>
 800f37e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f382:	460c      	mov	r4, r1
 800f384:	2001      	movs	r0, #1
 800f386:	e7a6      	b.n	800f2d6 <_vfiprintf_r+0xfe>
 800f388:	2300      	movs	r3, #0
 800f38a:	3401      	adds	r4, #1
 800f38c:	9305      	str	r3, [sp, #20]
 800f38e:	4619      	mov	r1, r3
 800f390:	f04f 0c0a 	mov.w	ip, #10
 800f394:	4620      	mov	r0, r4
 800f396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f39a:	3a30      	subs	r2, #48	; 0x30
 800f39c:	2a09      	cmp	r2, #9
 800f39e:	d903      	bls.n	800f3a8 <_vfiprintf_r+0x1d0>
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d0c6      	beq.n	800f332 <_vfiprintf_r+0x15a>
 800f3a4:	9105      	str	r1, [sp, #20]
 800f3a6:	e7c4      	b.n	800f332 <_vfiprintf_r+0x15a>
 800f3a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	e7f0      	b.n	800f394 <_vfiprintf_r+0x1bc>
 800f3b2:	ab03      	add	r3, sp, #12
 800f3b4:	9300      	str	r3, [sp, #0]
 800f3b6:	462a      	mov	r2, r5
 800f3b8:	4b12      	ldr	r3, [pc, #72]	; (800f404 <_vfiprintf_r+0x22c>)
 800f3ba:	a904      	add	r1, sp, #16
 800f3bc:	4630      	mov	r0, r6
 800f3be:	f7fd fd65 	bl	800ce8c <_printf_float>
 800f3c2:	4607      	mov	r7, r0
 800f3c4:	1c78      	adds	r0, r7, #1
 800f3c6:	d1d6      	bne.n	800f376 <_vfiprintf_r+0x19e>
 800f3c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3ca:	07d9      	lsls	r1, r3, #31
 800f3cc:	d405      	bmi.n	800f3da <_vfiprintf_r+0x202>
 800f3ce:	89ab      	ldrh	r3, [r5, #12]
 800f3d0:	059a      	lsls	r2, r3, #22
 800f3d2:	d402      	bmi.n	800f3da <_vfiprintf_r+0x202>
 800f3d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3d6:	f7fe faa3 	bl	800d920 <__retarget_lock_release_recursive>
 800f3da:	89ab      	ldrh	r3, [r5, #12]
 800f3dc:	065b      	lsls	r3, r3, #25
 800f3de:	f53f af1d 	bmi.w	800f21c <_vfiprintf_r+0x44>
 800f3e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3e4:	e71c      	b.n	800f220 <_vfiprintf_r+0x48>
 800f3e6:	ab03      	add	r3, sp, #12
 800f3e8:	9300      	str	r3, [sp, #0]
 800f3ea:	462a      	mov	r2, r5
 800f3ec:	4b05      	ldr	r3, [pc, #20]	; (800f404 <_vfiprintf_r+0x22c>)
 800f3ee:	a904      	add	r1, sp, #16
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	f7fd ffef 	bl	800d3d4 <_printf_i>
 800f3f6:	e7e4      	b.n	800f3c2 <_vfiprintf_r+0x1ea>
 800f3f8:	0800faa3 	.word	0x0800faa3
 800f3fc:	0800faad 	.word	0x0800faad
 800f400:	0800ce8d 	.word	0x0800ce8d
 800f404:	0800f1b5 	.word	0x0800f1b5
 800f408:	0800faa9 	.word	0x0800faa9

0800f40c <__swbuf_r>:
 800f40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f40e:	460e      	mov	r6, r1
 800f410:	4614      	mov	r4, r2
 800f412:	4605      	mov	r5, r0
 800f414:	b118      	cbz	r0, 800f41e <__swbuf_r+0x12>
 800f416:	6a03      	ldr	r3, [r0, #32]
 800f418:	b90b      	cbnz	r3, 800f41e <__swbuf_r+0x12>
 800f41a:	f7fe f989 	bl	800d730 <__sinit>
 800f41e:	69a3      	ldr	r3, [r4, #24]
 800f420:	60a3      	str	r3, [r4, #8]
 800f422:	89a3      	ldrh	r3, [r4, #12]
 800f424:	071a      	lsls	r2, r3, #28
 800f426:	d525      	bpl.n	800f474 <__swbuf_r+0x68>
 800f428:	6923      	ldr	r3, [r4, #16]
 800f42a:	b31b      	cbz	r3, 800f474 <__swbuf_r+0x68>
 800f42c:	6823      	ldr	r3, [r4, #0]
 800f42e:	6922      	ldr	r2, [r4, #16]
 800f430:	1a98      	subs	r0, r3, r2
 800f432:	6963      	ldr	r3, [r4, #20]
 800f434:	b2f6      	uxtb	r6, r6
 800f436:	4283      	cmp	r3, r0
 800f438:	4637      	mov	r7, r6
 800f43a:	dc04      	bgt.n	800f446 <__swbuf_r+0x3a>
 800f43c:	4621      	mov	r1, r4
 800f43e:	4628      	mov	r0, r5
 800f440:	f7ff fdee 	bl	800f020 <_fflush_r>
 800f444:	b9e0      	cbnz	r0, 800f480 <__swbuf_r+0x74>
 800f446:	68a3      	ldr	r3, [r4, #8]
 800f448:	3b01      	subs	r3, #1
 800f44a:	60a3      	str	r3, [r4, #8]
 800f44c:	6823      	ldr	r3, [r4, #0]
 800f44e:	1c5a      	adds	r2, r3, #1
 800f450:	6022      	str	r2, [r4, #0]
 800f452:	701e      	strb	r6, [r3, #0]
 800f454:	6962      	ldr	r2, [r4, #20]
 800f456:	1c43      	adds	r3, r0, #1
 800f458:	429a      	cmp	r2, r3
 800f45a:	d004      	beq.n	800f466 <__swbuf_r+0x5a>
 800f45c:	89a3      	ldrh	r3, [r4, #12]
 800f45e:	07db      	lsls	r3, r3, #31
 800f460:	d506      	bpl.n	800f470 <__swbuf_r+0x64>
 800f462:	2e0a      	cmp	r6, #10
 800f464:	d104      	bne.n	800f470 <__swbuf_r+0x64>
 800f466:	4621      	mov	r1, r4
 800f468:	4628      	mov	r0, r5
 800f46a:	f7ff fdd9 	bl	800f020 <_fflush_r>
 800f46e:	b938      	cbnz	r0, 800f480 <__swbuf_r+0x74>
 800f470:	4638      	mov	r0, r7
 800f472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f474:	4621      	mov	r1, r4
 800f476:	4628      	mov	r0, r5
 800f478:	f000 f806 	bl	800f488 <__swsetup_r>
 800f47c:	2800      	cmp	r0, #0
 800f47e:	d0d5      	beq.n	800f42c <__swbuf_r+0x20>
 800f480:	f04f 37ff 	mov.w	r7, #4294967295
 800f484:	e7f4      	b.n	800f470 <__swbuf_r+0x64>
	...

0800f488 <__swsetup_r>:
 800f488:	b538      	push	{r3, r4, r5, lr}
 800f48a:	4b2a      	ldr	r3, [pc, #168]	; (800f534 <__swsetup_r+0xac>)
 800f48c:	4605      	mov	r5, r0
 800f48e:	6818      	ldr	r0, [r3, #0]
 800f490:	460c      	mov	r4, r1
 800f492:	b118      	cbz	r0, 800f49c <__swsetup_r+0x14>
 800f494:	6a03      	ldr	r3, [r0, #32]
 800f496:	b90b      	cbnz	r3, 800f49c <__swsetup_r+0x14>
 800f498:	f7fe f94a 	bl	800d730 <__sinit>
 800f49c:	89a3      	ldrh	r3, [r4, #12]
 800f49e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4a2:	0718      	lsls	r0, r3, #28
 800f4a4:	d422      	bmi.n	800f4ec <__swsetup_r+0x64>
 800f4a6:	06d9      	lsls	r1, r3, #27
 800f4a8:	d407      	bmi.n	800f4ba <__swsetup_r+0x32>
 800f4aa:	2309      	movs	r3, #9
 800f4ac:	602b      	str	r3, [r5, #0]
 800f4ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f4b2:	81a3      	strh	r3, [r4, #12]
 800f4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b8:	e034      	b.n	800f524 <__swsetup_r+0x9c>
 800f4ba:	0758      	lsls	r0, r3, #29
 800f4bc:	d512      	bpl.n	800f4e4 <__swsetup_r+0x5c>
 800f4be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4c0:	b141      	cbz	r1, 800f4d4 <__swsetup_r+0x4c>
 800f4c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4c6:	4299      	cmp	r1, r3
 800f4c8:	d002      	beq.n	800f4d0 <__swsetup_r+0x48>
 800f4ca:	4628      	mov	r0, r5
 800f4cc:	f7ff f8a6 	bl	800e61c <_free_r>
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	6363      	str	r3, [r4, #52]	; 0x34
 800f4d4:	89a3      	ldrh	r3, [r4, #12]
 800f4d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f4da:	81a3      	strh	r3, [r4, #12]
 800f4dc:	2300      	movs	r3, #0
 800f4de:	6063      	str	r3, [r4, #4]
 800f4e0:	6923      	ldr	r3, [r4, #16]
 800f4e2:	6023      	str	r3, [r4, #0]
 800f4e4:	89a3      	ldrh	r3, [r4, #12]
 800f4e6:	f043 0308 	orr.w	r3, r3, #8
 800f4ea:	81a3      	strh	r3, [r4, #12]
 800f4ec:	6923      	ldr	r3, [r4, #16]
 800f4ee:	b94b      	cbnz	r3, 800f504 <__swsetup_r+0x7c>
 800f4f0:	89a3      	ldrh	r3, [r4, #12]
 800f4f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f4f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4fa:	d003      	beq.n	800f504 <__swsetup_r+0x7c>
 800f4fc:	4621      	mov	r1, r4
 800f4fe:	4628      	mov	r0, r5
 800f500:	f000 f884 	bl	800f60c <__smakebuf_r>
 800f504:	89a0      	ldrh	r0, [r4, #12]
 800f506:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f50a:	f010 0301 	ands.w	r3, r0, #1
 800f50e:	d00a      	beq.n	800f526 <__swsetup_r+0x9e>
 800f510:	2300      	movs	r3, #0
 800f512:	60a3      	str	r3, [r4, #8]
 800f514:	6963      	ldr	r3, [r4, #20]
 800f516:	425b      	negs	r3, r3
 800f518:	61a3      	str	r3, [r4, #24]
 800f51a:	6923      	ldr	r3, [r4, #16]
 800f51c:	b943      	cbnz	r3, 800f530 <__swsetup_r+0xa8>
 800f51e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f522:	d1c4      	bne.n	800f4ae <__swsetup_r+0x26>
 800f524:	bd38      	pop	{r3, r4, r5, pc}
 800f526:	0781      	lsls	r1, r0, #30
 800f528:	bf58      	it	pl
 800f52a:	6963      	ldrpl	r3, [r4, #20]
 800f52c:	60a3      	str	r3, [r4, #8]
 800f52e:	e7f4      	b.n	800f51a <__swsetup_r+0x92>
 800f530:	2000      	movs	r0, #0
 800f532:	e7f7      	b.n	800f524 <__swsetup_r+0x9c>
 800f534:	20000178 	.word	0x20000178

0800f538 <_raise_r>:
 800f538:	291f      	cmp	r1, #31
 800f53a:	b538      	push	{r3, r4, r5, lr}
 800f53c:	4604      	mov	r4, r0
 800f53e:	460d      	mov	r5, r1
 800f540:	d904      	bls.n	800f54c <_raise_r+0x14>
 800f542:	2316      	movs	r3, #22
 800f544:	6003      	str	r3, [r0, #0]
 800f546:	f04f 30ff 	mov.w	r0, #4294967295
 800f54a:	bd38      	pop	{r3, r4, r5, pc}
 800f54c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f54e:	b112      	cbz	r2, 800f556 <_raise_r+0x1e>
 800f550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f554:	b94b      	cbnz	r3, 800f56a <_raise_r+0x32>
 800f556:	4620      	mov	r0, r4
 800f558:	f000 f830 	bl	800f5bc <_getpid_r>
 800f55c:	462a      	mov	r2, r5
 800f55e:	4601      	mov	r1, r0
 800f560:	4620      	mov	r0, r4
 800f562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f566:	f000 b817 	b.w	800f598 <_kill_r>
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d00a      	beq.n	800f584 <_raise_r+0x4c>
 800f56e:	1c59      	adds	r1, r3, #1
 800f570:	d103      	bne.n	800f57a <_raise_r+0x42>
 800f572:	2316      	movs	r3, #22
 800f574:	6003      	str	r3, [r0, #0]
 800f576:	2001      	movs	r0, #1
 800f578:	e7e7      	b.n	800f54a <_raise_r+0x12>
 800f57a:	2400      	movs	r4, #0
 800f57c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f580:	4628      	mov	r0, r5
 800f582:	4798      	blx	r3
 800f584:	2000      	movs	r0, #0
 800f586:	e7e0      	b.n	800f54a <_raise_r+0x12>

0800f588 <raise>:
 800f588:	4b02      	ldr	r3, [pc, #8]	; (800f594 <raise+0xc>)
 800f58a:	4601      	mov	r1, r0
 800f58c:	6818      	ldr	r0, [r3, #0]
 800f58e:	f7ff bfd3 	b.w	800f538 <_raise_r>
 800f592:	bf00      	nop
 800f594:	20000178 	.word	0x20000178

0800f598 <_kill_r>:
 800f598:	b538      	push	{r3, r4, r5, lr}
 800f59a:	4d07      	ldr	r5, [pc, #28]	; (800f5b8 <_kill_r+0x20>)
 800f59c:	2300      	movs	r3, #0
 800f59e:	4604      	mov	r4, r0
 800f5a0:	4608      	mov	r0, r1
 800f5a2:	4611      	mov	r1, r2
 800f5a4:	602b      	str	r3, [r5, #0]
 800f5a6:	f7f2 fd71 	bl	800208c <_kill>
 800f5aa:	1c43      	adds	r3, r0, #1
 800f5ac:	d102      	bne.n	800f5b4 <_kill_r+0x1c>
 800f5ae:	682b      	ldr	r3, [r5, #0]
 800f5b0:	b103      	cbz	r3, 800f5b4 <_kill_r+0x1c>
 800f5b2:	6023      	str	r3, [r4, #0]
 800f5b4:	bd38      	pop	{r3, r4, r5, pc}
 800f5b6:	bf00      	nop
 800f5b8:	20002290 	.word	0x20002290

0800f5bc <_getpid_r>:
 800f5bc:	f7f2 bd5e 	b.w	800207c <_getpid>

0800f5c0 <__swhatbuf_r>:
 800f5c0:	b570      	push	{r4, r5, r6, lr}
 800f5c2:	460c      	mov	r4, r1
 800f5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5c8:	2900      	cmp	r1, #0
 800f5ca:	b096      	sub	sp, #88	; 0x58
 800f5cc:	4615      	mov	r5, r2
 800f5ce:	461e      	mov	r6, r3
 800f5d0:	da0d      	bge.n	800f5ee <__swhatbuf_r+0x2e>
 800f5d2:	89a3      	ldrh	r3, [r4, #12]
 800f5d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f5d8:	f04f 0100 	mov.w	r1, #0
 800f5dc:	bf0c      	ite	eq
 800f5de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f5e2:	2340      	movne	r3, #64	; 0x40
 800f5e4:	2000      	movs	r0, #0
 800f5e6:	6031      	str	r1, [r6, #0]
 800f5e8:	602b      	str	r3, [r5, #0]
 800f5ea:	b016      	add	sp, #88	; 0x58
 800f5ec:	bd70      	pop	{r4, r5, r6, pc}
 800f5ee:	466a      	mov	r2, sp
 800f5f0:	f000 f848 	bl	800f684 <_fstat_r>
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	dbec      	blt.n	800f5d2 <__swhatbuf_r+0x12>
 800f5f8:	9901      	ldr	r1, [sp, #4]
 800f5fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f5fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f602:	4259      	negs	r1, r3
 800f604:	4159      	adcs	r1, r3
 800f606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f60a:	e7eb      	b.n	800f5e4 <__swhatbuf_r+0x24>

0800f60c <__smakebuf_r>:
 800f60c:	898b      	ldrh	r3, [r1, #12]
 800f60e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f610:	079d      	lsls	r5, r3, #30
 800f612:	4606      	mov	r6, r0
 800f614:	460c      	mov	r4, r1
 800f616:	d507      	bpl.n	800f628 <__smakebuf_r+0x1c>
 800f618:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f61c:	6023      	str	r3, [r4, #0]
 800f61e:	6123      	str	r3, [r4, #16]
 800f620:	2301      	movs	r3, #1
 800f622:	6163      	str	r3, [r4, #20]
 800f624:	b002      	add	sp, #8
 800f626:	bd70      	pop	{r4, r5, r6, pc}
 800f628:	ab01      	add	r3, sp, #4
 800f62a:	466a      	mov	r2, sp
 800f62c:	f7ff ffc8 	bl	800f5c0 <__swhatbuf_r>
 800f630:	9900      	ldr	r1, [sp, #0]
 800f632:	4605      	mov	r5, r0
 800f634:	4630      	mov	r0, r6
 800f636:	f7ff f865 	bl	800e704 <_malloc_r>
 800f63a:	b948      	cbnz	r0, 800f650 <__smakebuf_r+0x44>
 800f63c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f640:	059a      	lsls	r2, r3, #22
 800f642:	d4ef      	bmi.n	800f624 <__smakebuf_r+0x18>
 800f644:	f023 0303 	bic.w	r3, r3, #3
 800f648:	f043 0302 	orr.w	r3, r3, #2
 800f64c:	81a3      	strh	r3, [r4, #12]
 800f64e:	e7e3      	b.n	800f618 <__smakebuf_r+0xc>
 800f650:	89a3      	ldrh	r3, [r4, #12]
 800f652:	6020      	str	r0, [r4, #0]
 800f654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f658:	81a3      	strh	r3, [r4, #12]
 800f65a:	9b00      	ldr	r3, [sp, #0]
 800f65c:	6163      	str	r3, [r4, #20]
 800f65e:	9b01      	ldr	r3, [sp, #4]
 800f660:	6120      	str	r0, [r4, #16]
 800f662:	b15b      	cbz	r3, 800f67c <__smakebuf_r+0x70>
 800f664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f668:	4630      	mov	r0, r6
 800f66a:	f000 f81d 	bl	800f6a8 <_isatty_r>
 800f66e:	b128      	cbz	r0, 800f67c <__smakebuf_r+0x70>
 800f670:	89a3      	ldrh	r3, [r4, #12]
 800f672:	f023 0303 	bic.w	r3, r3, #3
 800f676:	f043 0301 	orr.w	r3, r3, #1
 800f67a:	81a3      	strh	r3, [r4, #12]
 800f67c:	89a3      	ldrh	r3, [r4, #12]
 800f67e:	431d      	orrs	r5, r3
 800f680:	81a5      	strh	r5, [r4, #12]
 800f682:	e7cf      	b.n	800f624 <__smakebuf_r+0x18>

0800f684 <_fstat_r>:
 800f684:	b538      	push	{r3, r4, r5, lr}
 800f686:	4d07      	ldr	r5, [pc, #28]	; (800f6a4 <_fstat_r+0x20>)
 800f688:	2300      	movs	r3, #0
 800f68a:	4604      	mov	r4, r0
 800f68c:	4608      	mov	r0, r1
 800f68e:	4611      	mov	r1, r2
 800f690:	602b      	str	r3, [r5, #0]
 800f692:	f7f2 fd5a 	bl	800214a <_fstat>
 800f696:	1c43      	adds	r3, r0, #1
 800f698:	d102      	bne.n	800f6a0 <_fstat_r+0x1c>
 800f69a:	682b      	ldr	r3, [r5, #0]
 800f69c:	b103      	cbz	r3, 800f6a0 <_fstat_r+0x1c>
 800f69e:	6023      	str	r3, [r4, #0]
 800f6a0:	bd38      	pop	{r3, r4, r5, pc}
 800f6a2:	bf00      	nop
 800f6a4:	20002290 	.word	0x20002290

0800f6a8 <_isatty_r>:
 800f6a8:	b538      	push	{r3, r4, r5, lr}
 800f6aa:	4d06      	ldr	r5, [pc, #24]	; (800f6c4 <_isatty_r+0x1c>)
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	4604      	mov	r4, r0
 800f6b0:	4608      	mov	r0, r1
 800f6b2:	602b      	str	r3, [r5, #0]
 800f6b4:	f7f2 fd59 	bl	800216a <_isatty>
 800f6b8:	1c43      	adds	r3, r0, #1
 800f6ba:	d102      	bne.n	800f6c2 <_isatty_r+0x1a>
 800f6bc:	682b      	ldr	r3, [r5, #0]
 800f6be:	b103      	cbz	r3, 800f6c2 <_isatty_r+0x1a>
 800f6c0:	6023      	str	r3, [r4, #0]
 800f6c2:	bd38      	pop	{r3, r4, r5, pc}
 800f6c4:	20002290 	.word	0x20002290

0800f6c8 <_init>:
 800f6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ca:	bf00      	nop
 800f6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ce:	bc08      	pop	{r3}
 800f6d0:	469e      	mov	lr, r3
 800f6d2:	4770      	bx	lr

0800f6d4 <_fini>:
 800f6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6d6:	bf00      	nop
 800f6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6da:	bc08      	pop	{r3}
 800f6dc:	469e      	mov	lr, r3
 800f6de:	4770      	bx	lr
