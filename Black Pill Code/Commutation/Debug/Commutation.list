
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b030  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800b1d0  0800b1d0  0001b1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b55c  0800b55c  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  0800b55c  0800b55c  0001b55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b564  0800b564  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b564  0800b564  0001b564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b568  0800b568  0001b568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800b56c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010550  20000270  0800b7dc  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200107c0  0800b7dc  000207c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001114b  00000000  00000000  000202e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ca4  00000000  00000000  0003142e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  000340d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cbf  00000000  00000000  00035140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019998  00000000  00000000  00035dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014a65  00000000  00000000  0004f797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009be53  00000000  00000000  000641fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005438  00000000  00000000  00100050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00105488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000270 	.word	0x20000270
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b1b8 	.word	0x0800b1b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000274 	.word	0x20000274
 80001dc:	0800b1b8 	.word	0x0800b1b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <PrepareCommutation>:
HAL_StatusTypeDef StopSequence(void);
HAL_StatusTypeDef ChangePWM (void);

/* Private function ----------------------------------------------------------*/

HAL_StatusTypeDef PrepareCommutation () {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0

	// Read IDR for Hall Sensor status
	uint16_t Hall = (GPIOA->IDR & 0b111) - 1 + 6 * Registers[DirReg];
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <PrepareCommutation+0x78>)
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <PrepareCommutation+0x7c>)
 8000fa8:	885b      	ldrh	r3, [r3, #2]
 8000faa:	4619      	mov	r1, r3
 8000fac:	0049      	lsls	r1, r1, #1
 8000fae:	440b      	add	r3, r1
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	80fb      	strh	r3, [r7, #6]

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8000fbc:	88fa      	ldrh	r2, [r7, #6]
 8000fbe:	4915      	ldr	r1, [pc, #84]	; (8001014 <PrepareCommutation+0x80>)
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	440b      	add	r3, r1
 8000fca:	881a      	ldrh	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <PrepareCommutation+0x84>)
 8000fce:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 8000fd0:	88fa      	ldrh	r2, [r7, #6]
 8000fd2:	4910      	ldr	r1, [pc, #64]	; (8001014 <PrepareCommutation+0x80>)
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	440b      	add	r3, r1
 8000fde:	3304      	adds	r3, #4
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <PrepareCommutation+0x84>)
 8000fe4:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 8000fe6:	88fa      	ldrh	r2, [r7, #6]
 8000fe8:	490a      	ldr	r1, [pc, #40]	; (8001014 <PrepareCommutation+0x80>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	881a      	ldrh	r2, [r3, #0]
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <PrepareCommutation+0x84>)
 8000ffa:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8000ffc:	2300      	movs	r3, #0

}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40020000 	.word	0x40020000
 8001010:	20000090 	.word	0x20000090
 8001014:	20000000 	.word	0x20000000
 8001018:	40010000 	.word	0x40010000
 800101c:	00000000 	.word	0x00000000

08001020 <StartupSequence>:

	return HAL_OK;

}

HAL_StatusTypeDef StartupSequence () {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

	// Initialize some constantes
	Fapb1tclk = HAL_RCC_GetPCLK1Freq() * 2; 			// Get clock frequency for APB1 timer
 8001026:	f005 fe17 	bl	8006c58 <HAL_RCC_GetPCLK1Freq>
 800102a:	4603      	mov	r3, r0
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4a90      	ldr	r2, [pc, #576]	; (8001270 <StartupSequence+0x250>)
 8001030:	6013      	str	r3, [r2, #0]
	Fapb2tclk = HAL_RCC_GetPCLK2Freq() * 2;				// Get clock frequency for APB2 timer
 8001032:	f005 fe25 	bl	8006c80 <HAL_RCC_GetPCLK2Freq>
 8001036:	4603      	mov	r3, r0
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4a8e      	ldr	r2, [pc, #568]	; (8001274 <StartupSequence+0x254>)
 800103c:	6013      	str	r3, [r2, #0]
	RPMConst = (Fapb2tclk / (TIM9->PSC + 1)) * 1.35; 	// Calculate a constant to later be used for RPM calculation
 800103e:	4b8d      	ldr	r3, [pc, #564]	; (8001274 <StartupSequence+0x254>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4b8d      	ldr	r3, [pc, #564]	; (8001278 <StartupSequence+0x258>)
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	3301      	adds	r3, #1
 8001048:	fbb2 f3f3 	udiv	r3, r2, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa61 	bl	8000514 <__aeabi_ui2d>
 8001052:	a385      	add	r3, pc, #532	; (adr r3, 8001268 <StartupSequence+0x248>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fad6 	bl	8000608 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fda8 	bl	8000bb8 <__aeabi_d2uiz>
 8001068:	4603      	mov	r3, r0
 800106a:	4a84      	ldr	r2, [pc, #528]	; (800127c <StartupSequence+0x25c>)
 800106c:	6013      	str	r3, [r2, #0]

	// Make sure PWM is set for first commutation
	ChangePWM();
 800106e:	f000 f981 	bl	8001374 <ChangePWM>
	*/

	// Set registers for first commutation
	// Read IDR for Hall Sensor status
	// uint16_t Hall = (GPIOA->IDR & 0b111) + 6 * Direction + 3;
	uint16_t Hall = (GPIOA->IDR & 0b111) + 6 * Registers[DirReg] - 3;
 8001072:	4b83      	ldr	r3, [pc, #524]	; (8001280 <StartupSequence+0x260>)
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	b29b      	uxth	r3, r3
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	b29a      	uxth	r2, r3
 800107e:	4b81      	ldr	r3, [pc, #516]	; (8001284 <StartupSequence+0x264>)
 8001080:	885b      	ldrh	r3, [r3, #2]
 8001082:	4619      	mov	r1, r3
 8001084:	0049      	lsls	r1, r1, #1
 8001086:	440b      	add	r3, r1
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	b29b      	uxth	r3, r3
 800108c:	4413      	add	r3, r2
 800108e:	b29b      	uxth	r3, r3
 8001090:	3b03      	subs	r3, #3
 8001092:	80fb      	strh	r3, [r7, #6]

	// Set registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8001094:	88fa      	ldrh	r2, [r7, #6]
 8001096:	497c      	ldr	r1, [pc, #496]	; (8001288 <StartupSequence+0x268>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	440b      	add	r3, r1
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	4b79      	ldr	r3, [pc, #484]	; (800128c <StartupSequence+0x26c>)
 80010a6:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	4977      	ldr	r1, [pc, #476]	; (8001288 <StartupSequence+0x268>)
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	440b      	add	r3, r1
 80010b6:	3304      	adds	r3, #4
 80010b8:	881a      	ldrh	r2, [r3, #0]
 80010ba:	4b74      	ldr	r3, [pc, #464]	; (800128c <StartupSequence+0x26c>)
 80010bc:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 80010be:	88fa      	ldrh	r2, [r7, #6]
 80010c0:	4971      	ldr	r1, [pc, #452]	; (8001288 <StartupSequence+0x268>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	440b      	add	r3, r1
 80010cc:	3302      	adds	r3, #2
 80010ce:	881a      	ldrh	r2, [r3, #0]
 80010d0:	4b6e      	ldr	r3, [pc, #440]	; (800128c <StartupSequence+0x26c>)
 80010d2:	61da      	str	r2, [r3, #28]

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 80010d4:	2100      	movs	r1, #0
 80010d6:	486e      	ldr	r0, [pc, #440]	; (8001290 <StartupSequence+0x270>)
 80010d8:	f005 ff16 	bl	8006f08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 80010dc:	2104      	movs	r1, #4
 80010de:	486c      	ldr	r0, [pc, #432]	; (8001290 <StartupSequence+0x270>)
 80010e0:	f005 ff12 	bl	8006f08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 80010e4:	2108      	movs	r1, #8
 80010e6:	486a      	ldr	r0, [pc, #424]	; (8001290 <StartupSequence+0x270>)
 80010e8:	f005 ff0e 	bl	8006f08 <HAL_TIM_PWM_Start>

	// Start HallSensor timer in XOR mode
	HAL_TIMEx_HallSensor_Start (&htim2);
 80010ec:	4869      	ldr	r0, [pc, #420]	; (8001294 <StartupSequence+0x274>)
 80010ee:	f007 fa1b 	bl	8008528 <HAL_TIMEx_HallSensor_Start>

	// Start ADC timer
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010f2:	2100      	movs	r1, #0
 80010f4:	4868      	ldr	r0, [pc, #416]	; (8001298 <StartupSequence+0x278>)
 80010f6:	f005 ff07 	bl	8006f08 <HAL_TIM_PWM_Start>

	// Start Temp timer
	HAL_TIM_PWM_Start (&htim5, TIM_CHANNEL_1);
 80010fa:	2100      	movs	r1, #0
 80010fc:	4867      	ldr	r0, [pc, #412]	; (800129c <StartupSequence+0x27c>)
 80010fe:	f005 ff03 	bl	8006f08 <HAL_TIM_PWM_Start>

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 8001102:	4b62      	ldr	r3, [pc, #392]	; (800128c <StartupSequence+0x26c>)
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	4a61      	ldr	r2, [pc, #388]	; (800128c <StartupSequence+0x26c>)
 8001108:	f023 0320 	bic.w	r3, r3, #32
 800110c:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 800110e:	4b5f      	ldr	r3, [pc, #380]	; (800128c <StartupSequence+0x26c>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	4a5e      	ldr	r2, [pc, #376]	; (800128c <StartupSequence+0x26c>)
 8001114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001118:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 800111a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001128:	60d3      	str	r3, [r2, #12]
	TIM3->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 3
 800112a:	4b5d      	ldr	r3, [pc, #372]	; (80012a0 <StartupSequence+0x280>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	4a5c      	ldr	r2, [pc, #368]	; (80012a0 <StartupSequence+0x280>)
 8001130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001134:	60d3      	str	r3, [r2, #12]
	TIM5->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 5
 8001136:	4b5b      	ldr	r3, [pc, #364]	; (80012a4 <StartupSequence+0x284>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	4a5a      	ldr	r2, [pc, #360]	; (80012a4 <StartupSequence+0x284>)
 800113c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001140:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8001142:	4b4d      	ldr	r3, [pc, #308]	; (8001278 <StartupSequence+0x258>)
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	4a4c      	ldr	r2, [pc, #304]	; (8001278 <StartupSequence+0x258>)
 8001148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800114c:	60d3      	str	r3, [r2, #12]

	// Start all timers
	HAL_TIM_Base_Start_IT (&htim1);
 800114e:	4850      	ldr	r0, [pc, #320]	; (8001290 <StartupSequence+0x270>)
 8001150:	f005 fdfa 	bl	8006d48 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim2);
 8001154:	484f      	ldr	r0, [pc, #316]	; (8001294 <StartupSequence+0x274>)
 8001156:	f005 fdf7 	bl	8006d48 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim3);
 800115a:	484f      	ldr	r0, [pc, #316]	; (8001298 <StartupSequence+0x278>)
 800115c:	f005 fdf4 	bl	8006d48 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim5);
 8001160:	484e      	ldr	r0, [pc, #312]	; (800129c <StartupSequence+0x27c>)
 8001162:	f005 fdf1 	bl	8006d48 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim9);
 8001166:	4850      	ldr	r0, [pc, #320]	; (80012a8 <StartupSequence+0x288>)
 8001168:	f005 fdee 	bl	8006d48 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT (&htim9, TIM_CHANNEL_2);
 800116c:	2104      	movs	r1, #4
 800116e:	484e      	ldr	r0, [pc, #312]	; (80012a8 <StartupSequence+0x288>)
 8001170:	f006 f82e 	bl	80071d0 <HAL_TIM_IC_Start_IT>

	// Start ADC for current sensing
	ADC1->CR2 &= ~ADC_CR2_CONT; // Set to single conversion mode
 8001174:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <StartupSequence+0x28c>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	4a4c      	ldr	r2, [pc, #304]	; (80012ac <StartupSequence+0x28c>)
 800117a:	f023 0302 	bic.w	r3, r3, #2
 800117e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_CONT;  // Set to continuous mode
 8001180:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <StartupSequence+0x28c>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	4a49      	ldr	r2, [pc, #292]	; (80012ac <StartupSequence+0x28c>)
 8001186:	f043 0302 	orr.w	r3, r3, #2
 800118a:	6093      	str	r3, [r2, #8]
	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	HAL_ADC_Start_IT(&hadc1);
 800118c:	4848      	ldr	r0, [pc, #288]	; (80012b0 <StartupSequence+0x290>)
 800118e:	f001 fcd1 	bl	8002b34 <HAL_ADC_Start_IT>

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 8001192:	4b3e      	ldr	r3, [pc, #248]	; (800128c <StartupSequence+0x26c>)
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	4a3d      	ldr	r2, [pc, #244]	; (800128c <StartupSequence+0x26c>)
 8001198:	f023 0320 	bic.w	r3, r3, #32
 800119c:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 800119e:	4b3b      	ldr	r3, [pc, #236]	; (800128c <StartupSequence+0x26c>)
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	4a3a      	ldr	r2, [pc, #232]	; (800128c <StartupSequence+0x26c>)
 80011a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011a8:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 80011aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011b8:	6113      	str	r3, [r2, #16]
	TIM3->SR &= ~TIM_SR_TIF;		// Clear timer 3 interrupt flag
 80011ba:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <StartupSequence+0x280>)
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	4a38      	ldr	r2, [pc, #224]	; (80012a0 <StartupSequence+0x280>)
 80011c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011c4:	6113      	str	r3, [r2, #16]
	TIM5->SR &= ~TIM_SR_TIF;		// Clear timer 5 interrupt flag
 80011c6:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <StartupSequence+0x284>)
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	4a36      	ldr	r2, [pc, #216]	; (80012a4 <StartupSequence+0x284>)
 80011cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011d0:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 80011d2:	4b29      	ldr	r3, [pc, #164]	; (8001278 <StartupSequence+0x258>)
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	4a28      	ldr	r2, [pc, #160]	; (8001278 <StartupSequence+0x258>)
 80011d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011dc:	6113      	str	r3, [r2, #16]

	// Enable interrupts on the necessary timers
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 80011de:	4b2b      	ldr	r3, [pc, #172]	; (800128c <StartupSequence+0x26c>)
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	4a2a      	ldr	r2, [pc, #168]	; (800128c <StartupSequence+0x26c>)
 80011e4:	f043 0320 	orr.w	r3, r3, #32
 80011e8:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 80011ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f8:	60d3      	str	r3, [r2, #12]
	TIM3->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 3
 80011fa:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <StartupSequence+0x280>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	4a28      	ldr	r2, [pc, #160]	; (80012a0 <StartupSequence+0x280>)
 8001200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001204:	60d3      	str	r3, [r2, #12]
	TIM5->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 5
 8001206:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <StartupSequence+0x284>)
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	4a26      	ldr	r2, [pc, #152]	; (80012a4 <StartupSequence+0x284>)
 800120c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001210:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <StartupSequence+0x258>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	4a18      	ldr	r2, [pc, #96]	; (8001278 <StartupSequence+0x258>)
 8001218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121c:	60d3      	str	r3, [r2, #12]

	// Write some registers
	// ADC1->CR1  |= ADC_CR1_EOCIE;	// Enable ADC interrupts
	TIM1->CR2  |= TIM_CR2_CCPC; 	// Set CCPC in CR2 to preload CCxE, CCxNE and OCxM bits
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <StartupSequence+0x26c>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4a1a      	ldr	r2, [pc, #104]	; (800128c <StartupSequence+0x26c>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6053      	str	r3, [r2, #4]
	TIM1->BDTR &= ~TIM_BDTR_DTG;	// Reset DTG bits
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <StartupSequence+0x26c>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <StartupSequence+0x26c>)
 8001230:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= 0x800F;			// Set dead-time to 100ns and make sure to enable MOE bit
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <StartupSequence+0x26c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a14      	ldr	r2, [pc, #80]	; (800128c <StartupSequence+0x26c>)
 800123c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001240:	f043 030f 	orr.w	r3, r3, #15
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <StartupSequence+0x26c>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <StartupSequence+0x26c>)
 800124c:	f043 0320 	orr.w	r3, r3, #32
 8001250:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <StartupSequence+0x26c>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	4a0d      	ldr	r2, [pc, #52]	; (800128c <StartupSequence+0x26c>)
 8001258:	f043 0320 	orr.w	r3, r3, #32
 800125c:	60d3      	str	r3, [r2, #12]

	return HAL_OK;
 800125e:	2300      	movs	r3, #0

}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	9999999a 	.word	0x9999999a
 800126c:	3ff59999 	.word	0x3ff59999
 8001270:	2000028c 	.word	0x2000028c
 8001274:	20000290 	.word	0x20000290
 8001278:	40014000 	.word	0x40014000
 800127c:	20000294 	.word	0x20000294
 8001280:	40020000 	.word	0x40020000
 8001284:	20000090 	.word	0x20000090
 8001288:	20000000 	.word	0x20000000
 800128c:	40010000 	.word	0x40010000
 8001290:	200104c0 	.word	0x200104c0
 8001294:	20010508 	.word	0x20010508
 8001298:	20010550 	.word	0x20010550
 800129c:	200105e0 	.word	0x200105e0
 80012a0:	40000400 	.word	0x40000400
 80012a4:	40000c00 	.word	0x40000c00
 80012a8:	20010628 	.word	0x20010628
 80012ac:	40012000 	.word	0x40012000
 80012b0:	200102a4 	.word	0x200102a4

080012b4 <StopSequence>:

HAL_StatusTypeDef StopSequence(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

	// Stop HallSensor timer
	HAL_TIMEx_HallSensor_Stop (&htim2);
 80012b8:	4828      	ldr	r0, [pc, #160]	; (800135c <StopSequence+0xa8>)
 80012ba:	f007 f9b5 	bl	8008628 <HAL_TIMEx_HallSensor_Stop>

	// Disable all output channels
	TIM1->CCER  = 0x0000;
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <StopSequence+0xac>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = 0x0000;
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <StopSequence+0xac>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = 0x0000;
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <StopSequence+0xac>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	61da      	str	r2, [r3, #28]

	// Perform one last commutation event if not already disabled
	if ( (TIM1->DIER & TIM_DIER_COMIE) >= 1 ) { 		// If COMIE bit in DIER is set commutation events are still enabled
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <StopSequence+0xac>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 0320 	and.w	r3, r3, #32
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <StopSequence+0x34>

		TIM1->EGR |= TIM_EGR_COMG; 						// Trigger commutation event
 80012dc:	4b20      	ldr	r3, [pc, #128]	; (8001360 <StopSequence+0xac>)
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <StopSequence+0xac>)
 80012e2:	f043 0320 	orr.w	r3, r3, #32
 80012e6:	6153      	str	r3, [r2, #20]
		// while ( (TIM1->SR & TIM_SR_COMIF) >= 1 ); 	// Wait until commutation event has happened

	}

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <StopSequence+0xac>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <StopSequence+0xac>)
 80012ee:	f023 0320 	bic.w	r3, r3, #32
 80012f2:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <StopSequence+0xac>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a19      	ldr	r2, [pc, #100]	; (8001360 <StopSequence+0xac>)
 80012fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012fe:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8001300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800130e:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <StopSequence+0xb0>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4a13      	ldr	r2, [pc, #76]	; (8001364 <StopSequence+0xb0>)
 8001316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800131a:	60d3      	str	r3, [r2, #12]

	// Stop interrupts
	HAL_TIM_Base_Stop_IT (&htim1);
 800131c:	4812      	ldr	r0, [pc, #72]	; (8001368 <StopSequence+0xb4>)
 800131e:	f005 fd75 	bl	8006e0c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim2);
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <StopSequence+0xa8>)
 8001324:	f005 fd72 	bl	8006e0c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim9);
 8001328:	4810      	ldr	r0, [pc, #64]	; (800136c <StopSequence+0xb8>)
 800132a:	f005 fd6f 	bl	8006e0c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT (&htim9, TIM_CHANNEL_2);
 800132e:	2104      	movs	r1, #4
 8001330:	480e      	ldr	r0, [pc, #56]	; (800136c <StopSequence+0xb8>)
 8001332:	f006 f867 	bl	8007404 <HAL_TIM_IC_Stop_IT>

	// Stop PWM Timers
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_1);
 8001336:	2100      	movs	r1, #0
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <StopSequence+0xb4>)
 800133a:	f005 fe95 	bl	8007068 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_2);
 800133e:	2104      	movs	r1, #4
 8001340:	4809      	ldr	r0, [pc, #36]	; (8001368 <StopSequence+0xb4>)
 8001342:	f005 fe91 	bl	8007068 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_3);
 8001346:	2108      	movs	r1, #8
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <StopSequence+0xb4>)
 800134a:	f005 fe8d 	bl	8007068 <HAL_TIM_PWM_Stop>

	Registers[RPMReg] = 0;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <StopSequence+0xbc>)
 8001350:	2200      	movs	r2, #0
 8001352:	80da      	strh	r2, [r3, #6]

	return HAL_OK;
 8001354:	2300      	movs	r3, #0

}
 8001356:	4618      	mov	r0, r3
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20010508 	.word	0x20010508
 8001360:	40010000 	.word	0x40010000
 8001364:	40014000 	.word	0x40014000
 8001368:	200104c0 	.word	0x200104c0
 800136c:	20010628 	.word	0x20010628
 8001370:	20000090 	.word	0x20000090

08001374 <ChangePWM>:

HAL_StatusTypeDef ChangePWM (void) {
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0

	uint32_t PWM = (Registers[PWMReg] * TIM1->ARR) / 100; // Calculate required CCRx value
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <ChangePWM+0x6c>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <ChangePWM+0x70>)
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <ChangePWM+0x74>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	607b      	str	r3, [r7, #4]

	if (PWM >= TIM1->ARR - 60) {
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <ChangePWM+0x70>)
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	3b3c      	subs	r3, #60	; 0x3c
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	429a      	cmp	r2, r3
 800139c:	d303      	bcc.n	80013a6 <ChangePWM+0x32>
		PWM = TIM1->ARR - 60;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <ChangePWM+0x70>)
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	3b3c      	subs	r3, #60	; 0x3c
 80013a4:	607b      	str	r3, [r7, #4]
	}

	TIM1->CR1 |= TIM_CR1_UDIS; 	// Disable Update Events
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <ChangePWM+0x70>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <ChangePWM+0x70>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = PWM;	  		// Set new PWM for channel 1
 80013b2:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <ChangePWM+0x70>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = PWM;	  		// Set new PWM for channel 2
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <ChangePWM+0x70>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = PWM;	  		// Set new PWM for channel 3
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <ChangePWM+0x70>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_UDIS; // Enable Update Events
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <ChangePWM+0x70>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <ChangePWM+0x70>)
 80013ca:	f023 0302 	bic.w	r3, r3, #2
 80013ce:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 80013d0:	2300      	movs	r3, #0

}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000090 	.word	0x20000090
 80013e4:	40010000 	.word	0x40010000
 80013e8:	51eb851f 	.word	0x51eb851f

080013ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f2:	463b      	mov	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001400:	4a22      	ldr	r2, [pc, #136]	; (800148c <MX_ADC1_Init+0xa0>)
 8001402:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <MX_ADC1_Init+0x9c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001418:	2200      	movs	r2, #0
 800141a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_ADC1_Init+0x9c>)
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_ADC1_Init+0x9c>)
 800142e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_ADC1_Init+0x9c>)
 800143c:	2201      	movs	r2, #1
 800143e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_ADC1_Init+0x9c>)
 800144a:	2201      	movs	r2, #1
 800144c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800144e:	480e      	ldr	r0, [pc, #56]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001450:	f001 fb2c 	bl	8002aac <HAL_ADC_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800145a:	f000 fc3f 	bl	8001cdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800145e:	2309      	movs	r3, #9
 8001460:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001462:	2301      	movs	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001466:	2301      	movs	r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001470:	f001 fd42 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800147a:	f000 fc2f 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200102a4 	.word	0x200102a4
 800148c:	40012000 	.word	0x40012000

08001490 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_ADC_MspInit+0x8c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12f      	bne.n	8001512 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_ADC_MspInit+0x90>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a19      	ldr	r2, [pc, #100]	; (8001520 <HAL_ADC_MspInit+0x90>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <HAL_ADC_MspInit+0x90>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <HAL_ADC_MspInit+0x90>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <HAL_ADC_MspInit+0x90>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_ADC_MspInit+0x90>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014ea:	2302      	movs	r3, #2
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ee:	2303      	movs	r3, #3
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4809      	ldr	r0, [pc, #36]	; (8001524 <HAL_ADC_MspInit+0x94>)
 80014fe:	f002 f875 	bl	80035ec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2012      	movs	r0, #18
 8001508:	f002 f809 	bl	800351e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800150c:	2012      	movs	r0, #18
 800150e:	f002 f822 	bl	8003556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40012000 	.word	0x40012000
 8001520:	40023800 	.word	0x40023800
 8001524:	40020400 	.word	0x40020400

08001528 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

	TotalCurrent -= Current[Ci];
 8001530:	4b39      	ldr	r3, [pc, #228]	; (8001618 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a39      	ldr	r2, [pc, #228]	; (800161c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001536:	8812      	ldrh	r2, [r2, #0]
 8001538:	4611      	mov	r1, r2
 800153a:	4a39      	ldr	r2, [pc, #228]	; (8001620 <HAL_ADC_ConvCpltCallback+0xf8>)
 800153c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	4a35      	ldr	r2, [pc, #212]	; (8001618 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001544:	6013      	str	r3, [r2, #0]
	Current[Ci] = ADC1->DR;
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <HAL_ADC_ConvCpltCallback+0xfc>)
 8001548:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800154a:	4b34      	ldr	r3, [pc, #208]	; (800161c <HAL_ADC_ConvCpltCallback+0xf4>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	b289      	uxth	r1, r1
 8001552:	4b33      	ldr	r3, [pc, #204]	; (8001620 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001554:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	TotalCurrent += Current[Ci];
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_ADC_ConvCpltCallback+0xf4>)
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001560:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001564:	461a      	mov	r2, r3
 8001566:	4b2c      	ldr	r3, [pc, #176]	; (8001618 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a2a      	ldr	r2, [pc, #168]	; (8001618 <HAL_ADC_ConvCpltCallback+0xf0>)
 800156e:	6013      	str	r3, [r2, #0]

	Ci++;
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	3301      	adds	r3, #1
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b28      	ldr	r3, [pc, #160]	; (800161c <HAL_ADC_ConvCpltCallback+0xf4>)
 800157a:	801a      	strh	r2, [r3, #0]

	if ( Ci >= AvgSizeCur - 1 ) {
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_ADC_ConvCpltCallback+0xf4>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8001584:	4293      	cmp	r3, r2
 8001586:	d902      	bls.n	800158e <HAL_ADC_ConvCpltCallback+0x66>
		Ci = 0;
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_ADC_ConvCpltCallback+0xf4>)
 800158a:	2200      	movs	r2, #0
 800158c:	801a      	strh	r2, [r3, #0]
	}

	float current = (3.3 * (TotalCurrent / AvgSizeCur)) / 40960 / 0.015;
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	0bdb      	lsrs	r3, r3, #15
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffbd 	bl	8000514 <__aeabi_ui2d>
 800159a:	a31b      	add	r3, pc, #108	; (adr r3, 8001608 <HAL_ADC_ConvCpltCallback+0xe0>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff f832 	bl	8000608 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_ADC_ConvCpltCallback+0x100>)
 80015b2:	f7ff f953 	bl	800085c <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	a314      	add	r3, pc, #80	; (adr r3, 8001610 <HAL_ADC_ConvCpltCallback+0xe8>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7ff f94a 	bl	800085c <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fb12 	bl	8000bf8 <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	60fb      	str	r3, [r7, #12]
	Registers[CurReg] = current * 1000;
 80015d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015dc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800162c <HAL_ADC_ConvCpltCallback+0x104>
 80015e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e8:	ee17 3a90 	vmov	r3, s15
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_ADC_ConvCpltCallback+0x108>)
 80015f0:	809a      	strh	r2, [r3, #4]

	Counter++;
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_ADC_ConvCpltCallback+0x10c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <HAL_ADC_ConvCpltCallback+0x10c>)
 80015fa:	6013      	str	r3, [r2, #0]

}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	f3af 8000 	nop.w
 8001608:	66666666 	.word	0x66666666
 800160c:	400a6666 	.word	0x400a6666
 8001610:	eb851eb8 	.word	0xeb851eb8
 8001614:	3f8eb851 	.word	0x3f8eb851
 8001618:	20000298 	.word	0x20000298
 800161c:	200002a0 	.word	0x200002a0
 8001620:	200002a4 	.word	0x200002a4
 8001624:	40012000 	.word	0x40012000
 8001628:	40e40000 	.word	0x40e40000
 800162c:	447a0000 	.word	0x447a0000
 8001630:	20000090 	.word	0x20000090
 8001634:	2000029c 	.word	0x2000029c

08001638 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b50      	ldr	r3, [pc, #320]	; (8001794 <MX_GPIO_Init+0x15c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a4f      	ldr	r2, [pc, #316]	; (8001794 <MX_GPIO_Init+0x15c>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b4d      	ldr	r3, [pc, #308]	; (8001794 <MX_GPIO_Init+0x15c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b49      	ldr	r3, [pc, #292]	; (8001794 <MX_GPIO_Init+0x15c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a48      	ldr	r2, [pc, #288]	; (8001794 <MX_GPIO_Init+0x15c>)
 8001674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b46      	ldr	r3, [pc, #280]	; (8001794 <MX_GPIO_Init+0x15c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	4b42      	ldr	r3, [pc, #264]	; (8001794 <MX_GPIO_Init+0x15c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a41      	ldr	r2, [pc, #260]	; (8001794 <MX_GPIO_Init+0x15c>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <MX_GPIO_Init+0x15c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <MX_GPIO_Init+0x15c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a3a      	ldr	r2, [pc, #232]	; (8001794 <MX_GPIO_Init+0x15c>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b38      	ldr	r3, [pc, #224]	; (8001794 <MX_GPIO_Init+0x15c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c4:	4834      	ldr	r0, [pc, #208]	; (8001798 <MX_GPIO_Init+0x160>)
 80016c6:	f002 f915 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d0:	4832      	ldr	r0, [pc, #200]	; (800179c <MX_GPIO_Init+0x164>)
 80016d2:	f002 f90f 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	482a      	ldr	r0, [pc, #168]	; (8001798 <MX_GPIO_Init+0x160>)
 80016f0:	f001 ff7c 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fa:	2303      	movs	r3, #3
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4823      	ldr	r0, [pc, #140]	; (8001798 <MX_GPIO_Init+0x160>)
 800170a:	f001 ff6f 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800170e:	f649 03f0 	movw	r3, #39152	; 0x98f0
 8001712:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001714:	2303      	movs	r3, #3
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	481f      	ldr	r0, [pc, #124]	; (80017a0 <MX_GPIO_Init+0x168>)
 8001724:	f001 ff62 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_9;
 8001728:	f240 2325 	movw	r3, #549	; 0x225
 800172c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800172e:	2303      	movs	r3, #3
 8001730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4817      	ldr	r0, [pc, #92]	; (800179c <MX_GPIO_Init+0x164>)
 800173e:	f001 ff55 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4810      	ldr	r0, [pc, #64]	; (800179c <MX_GPIO_Init+0x164>)
 800175c:	f001 ff46 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001760:	2310      	movs	r3, #16
 8001762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001764:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800176a:	2302      	movs	r3, #2
 800176c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	4809      	ldr	r0, [pc, #36]	; (800179c <MX_GPIO_Init+0x164>)
 8001776:	f001 ff39 	bl	80035ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	200a      	movs	r0, #10
 8001780:	f001 fecd 	bl	800351e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001784:	200a      	movs	r0, #10
 8001786:	f001 fee6 	bl	8003556 <HAL_NVIC_EnableIRQ>

}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	; 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40020800 	.word	0x40020800
 800179c:	40020400 	.word	0x40020400
 80017a0:	40020000 	.word	0x40020000

080017a4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017aa:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <MX_I2C1_Init+0x54>)
 80017ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017b0:	4a12      	ldr	r2, [pc, #72]	; (80017fc <MX_I2C1_Init+0x58>)
 80017b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017bc:	2220      	movs	r2, #32
 80017be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <MX_I2C1_Init+0x50>)
 80017e2:	f002 f8c5 	bl	8003970 <HAL_I2C_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017ec:	f000 fa76 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20010304 	.word	0x20010304
 80017f8:	40005400 	.word	0x40005400
 80017fc:	000186a0 	.word	0x000186a0

08001800 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_I2C2_Init+0x50>)
 8001806:	4a13      	ldr	r2, [pc, #76]	; (8001854 <MX_I2C2_Init+0x54>)
 8001808:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_I2C2_Init+0x50>)
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <MX_I2C2_Init+0x58>)
 800180e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_I2C2_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_I2C2_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_I2C2_Init+0x50>)
 800181e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001822:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <MX_I2C2_Init+0x50>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_I2C2_Init+0x50>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <MX_I2C2_Init+0x50>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_I2C2_Init+0x50>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <MX_I2C2_Init+0x50>)
 800183e:	f002 f897 	bl	8003970 <HAL_I2C_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001848:	f000 fa48 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20010358 	.word	0x20010358
 8001854:	40005800 	.word	0x40005800
 8001858:	000186a0 	.word	0x000186a0

0800185c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08c      	sub	sp, #48	; 0x30
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a42      	ldr	r2, [pc, #264]	; (8001984 <HAL_I2C_MspInit+0x128>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d13c      	bne.n	80018f8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	4b41      	ldr	r3, [pc, #260]	; (8001988 <HAL_I2C_MspInit+0x12c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a40      	ldr	r2, [pc, #256]	; (8001988 <HAL_I2C_MspInit+0x12c>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <HAL_I2C_MspInit+0x12c>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	61bb      	str	r3, [r7, #24]
 8001898:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800189a:	23c0      	movs	r3, #192	; 0xc0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189e:	2312      	movs	r3, #18
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018aa:	2304      	movs	r3, #4
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4835      	ldr	r0, [pc, #212]	; (800198c <HAL_I2C_MspInit+0x130>)
 80018b6:	f001 fe99 	bl	80035ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	4b32      	ldr	r3, [pc, #200]	; (8001988 <HAL_I2C_MspInit+0x12c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a31      	ldr	r2, [pc, #196]	; (8001988 <HAL_I2C_MspInit+0x12c>)
 80018c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <HAL_I2C_MspInit+0x12c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	201f      	movs	r0, #31
 80018dc:	f001 fe1f 	bl	800351e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018e0:	201f      	movs	r0, #31
 80018e2:	f001 fe38 	bl	8003556 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	2020      	movs	r0, #32
 80018ec:	f001 fe17 	bl	800351e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80018f0:	2020      	movs	r0, #32
 80018f2:	f001 fe30 	bl	8003556 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018f6:	e041      	b.n	800197c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a24      	ldr	r2, [pc, #144]	; (8001990 <HAL_I2C_MspInit+0x134>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d13c      	bne.n	800197c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <HAL_I2C_MspInit+0x12c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a1f      	ldr	r2, [pc, #124]	; (8001988 <HAL_I2C_MspInit+0x12c>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_I2C_MspInit+0x12c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800191e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001924:	2312      	movs	r3, #18
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001928:	2301      	movs	r3, #1
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001930:	2304      	movs	r3, #4
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	4814      	ldr	r0, [pc, #80]	; (800198c <HAL_I2C_MspInit+0x130>)
 800193c:	f001 fe56 	bl	80035ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001940:	2308      	movs	r3, #8
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001944:	2312      	movs	r3, #18
 8001946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001948:	2301      	movs	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001950:	2309      	movs	r3, #9
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4619      	mov	r1, r3
 800195a:	480c      	ldr	r0, [pc, #48]	; (800198c <HAL_I2C_MspInit+0x130>)
 800195c:	f001 fe46 	bl	80035ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_I2C_MspInit+0x12c>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_I2C_MspInit+0x12c>)
 800196a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800196e:	6413      	str	r3, [r2, #64]	; 0x40
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_I2C_MspInit+0x12c>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	bf00      	nop
 800197e:	3730      	adds	r7, #48	; 0x30
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40005400 	.word	0x40005400
 8001988:	40023800 	.word	0x40023800
 800198c:	40020400 	.word	0x40020400
 8001990:	40005800 	.word	0x40005800

08001994 <HAL_I2C_ListenCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

	// Once the transfer is complete start listening again.
	if (i2cHandle->Instance == I2C1) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_I2C_ListenCpltCallback+0x20>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d102      	bne.n	80019ac <HAL_I2C_ListenCpltCallback+0x18>
		HAL_I2C_EnableListen_IT (i2cHandle);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f002 fd30 	bl	800440c <HAL_I2C_EnableListen_IT>
	}

}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40005400 	.word	0x40005400

080019b8 <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback (I2C_HandleTypeDef* i2cHandle, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	70fb      	strb	r3, [r7, #3]
 80019c4:	4613      	mov	r3, r2
 80019c6:	803b      	strh	r3, [r7, #0]

	if (i2cHandle->Instance == I2C1) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_I2C_AddrCallback+0x58>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d11a      	bne.n	8001a08 <HAL_I2C_AddrCallback+0x50>
		if ( TransferDirection == I2C_DIRECTION_TRANSMIT ) { // If the master wants to transmit the data
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d10d      	bne.n	80019f4 <HAL_I2C_AddrCallback+0x3c>

			// Reset number of recieved bytes and start recieving the first byte.
			RxCount = 0;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_I2C_AddrCallback+0x5c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_FIRST_FRAME);
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_I2C_AddrCallback+0x5c>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_I2C_AddrCallback+0x60>)
 80019e6:	18d1      	adds	r1, r2, r3
 80019e8:	2301      	movs	r3, #1
 80019ea:	2201      	movs	r2, #1
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f002 fc9a 	bl	8004326 <HAL_I2C_Slave_Seq_Receive_IT>

		}

	}

}
 80019f2:	e009      	b.n	8001a08 <HAL_I2C_AddrCallback+0x50>
			ret = HAL_I2C_Slave_Seq_Transmit_IT(i2cHandle, (uint8_t *) Registers, RegSize * 2, I2C_FIRST_FRAME);
 80019f4:	2301      	movs	r3, #1
 80019f6:	220a      	movs	r2, #10
 80019f8:	4908      	ldr	r1, [pc, #32]	; (8001a1c <HAL_I2C_AddrCallback+0x64>)
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f002 fc20 	bl	8004240 <HAL_I2C_Slave_Seq_Transmit_IT>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_I2C_AddrCallback+0x68>)
 8001a06:	701a      	strb	r2, [r3, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40005400 	.word	0x40005400
 8001a14:	200102ed 	.word	0x200102ed
 8001a18:	200102f0 	.word	0x200102f0
 8001a1c:	20000090 	.word	0x20000090
 8001a20:	200103b0 	.word	0x200103b0

08001a24 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d128      	bne.n	8001a88 <HAL_I2C_SlaveRxCpltCallback+0x64>

		RxCount++;
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a40:	701a      	strb	r2, [r3, #0]

		if ( RxCount < RxSize ) {
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d818      	bhi.n	8001a7c <HAL_I2C_SlaveRxCpltCallback+0x58>

			// If the number of recieved bytes is less than the total keep recieving and otherwise recieve te last byte.
			if (RxCount == RxSize - 1) {
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d10a      	bne.n	8001a68 <HAL_I2C_SlaveRxCpltCallback+0x44>
				HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_LAST_FRAME);
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001a5a:	18d1      	adds	r1, r2, r3
 8001a5c:	2320      	movs	r3, #32
 8001a5e:	2201      	movs	r2, #1
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f002 fc60 	bl	8004326 <HAL_I2C_Slave_Seq_Receive_IT>
 8001a66:	e009      	b.n	8001a7c <HAL_I2C_SlaveRxCpltCallback+0x58>
			} else {
				HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_NEXT_FRAME);
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001a70:	18d1      	adds	r1, r2, r3
 8001a72:	2304      	movs	r3, #4
 8001a74:	2201      	movs	r2, #1
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f002 fc55 	bl	8004326 <HAL_I2C_Slave_Seq_Receive_IT>
			}
		}

		// Once the maximum of recievable bytes has been reached start processing the data.
		if ( RxCount == RxSize) {
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d101      	bne.n	8001a88 <HAL_I2C_SlaveRxCpltCallback+0x64>
			ProcessData();
 8001a84:	f000 f83c 	bl	8001b00 <ProcessData>
		}

	}

}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40005400 	.word	0x40005400
 8001a94:	200102ed 	.word	0x200102ed
 8001a98:	200102f0 	.word	0x200102f0

08001a9c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback (I2C_HandleTypeDef* i2cHandle) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <HAL_I2C_ErrorCallback+0x58>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d11d      	bne.n	8001aea <HAL_I2C_ErrorCallback+0x4e>

		if ( HAL_I2C_GetError (i2cHandle) == 4) {
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f002 ff10 	bl	80048d4 <HAL_I2C_GetError>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d114      	bne.n	8001ae4 <HAL_I2C_ErrorCallback+0x48>

			__HAL_I2C_CLEAR_FLAG (i2cHandle, I2C_FLAG_AF); 	// Clear AF flag
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ac2:	615a      	str	r2, [r3, #20]

			if ( TxCount == 0) { 							// Error while recieving
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_I2C_ErrorCallback+0x5c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d105      	bne.n	8001ad8 <HAL_I2C_ErrorCallback+0x3c>
				I2C_Error = HAL_ERROR;						// Custom error to know if an error has occured. It is not cleared anywhere.
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_I2C_ErrorCallback+0x60>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
				ProcessData();								// Error 4 is an unexpected termination of the transfer so the recieved data can still be used.
 8001ad2:	f000 f815 	bl	8001b00 <ProcessData>
 8001ad6:	e005      	b.n	8001ae4 <HAL_I2C_ErrorCallback+0x48>
			} else { 										// Error while transmitting, this is ignored
				TxCount--;
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <HAL_I2C_ErrorCallback+0x5c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_I2C_ErrorCallback+0x5c>)
 8001ae2:	701a      	strb	r2, [r3, #0]
			}

		}

		// Start listening again since an error will most likely have terminated the transfer.
		HAL_I2C_EnableListen_IT(i2cHandle);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f002 fc91 	bl	800440c <HAL_I2C_EnableListen_IT>

	}

}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40005400 	.word	0x40005400
 8001af8:	200102ec 	.word	0x200102ec
 8001afc:	20010300 	.word	0x20010300

08001b00 <ProcessData>:

void ProcessData (void) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0

	// Initialize some variables
	StartReg = RxData[0]; 			// Start address of registers to be written
 8001b06:	4b29      	ldr	r3, [pc, #164]	; (8001bac <ProcessData+0xac>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <ProcessData+0xb0>)
 8001b0e:	601a      	str	r2, [r3, #0]
	NumReg = RxCount; 				// Number of registers to be written
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <ProcessData+0xb4>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <ProcessData+0xb8>)
 8001b18:	601a      	str	r2, [r3, #0]
	EndReg = StartReg + NumReg - 2; // Last register to be written
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <ProcessData+0xb0>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <ProcessData+0xb8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	3b02      	subs	r3, #2
 8001b26:	4a25      	ldr	r2, [pc, #148]	; (8001bbc <ProcessData+0xbc>)
 8001b28:	6013      	str	r3, [r2, #0]

	// If the last register to be writen is larger than the size of the register call the error handler
	if (EndReg > RegSize) {
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <ProcessData+0xbc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	dd01      	ble.n	8001b36 <ProcessData+0x36>
		Error_Handler();
 8001b32:	f000 f8d3 	bl	8001cdc <Error_Handler>
	}

	// Write data into the register using a for loop
	for (int i = 2; i < NumReg; i++) {
 8001b36:	2302      	movs	r3, #2
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	e00f      	b.n	8001b5c <ProcessData+0x5c>
		Registers[StartReg++] = RxData[i];
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	; (8001bac <ProcessData+0xac>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	7818      	ldrb	r0, [r3, #0]
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <ProcessData+0xb0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	4919      	ldr	r1, [pc, #100]	; (8001bb0 <ProcessData+0xb0>)
 8001b4c:	600a      	str	r2, [r1, #0]
 8001b4e:	b281      	uxth	r1, r0
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <ProcessData+0xc0>)
 8001b52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 2; i < NumReg; i++) {
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <ProcessData+0xb8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dbea      	blt.n	8001b3c <ProcessData+0x3c>
	}

	// If the PWM is higher than 0 but the motor is not turning then startup
	if ( Registers[PWMReg] > 0 && Registers[RPMReg] == 0) {
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <ProcessData+0xc0>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <ProcessData+0x7a>
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <ProcessData+0xc0>)
 8001b70:	88db      	ldrh	r3, [r3, #6]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <ProcessData+0x7a>
		StartupSequence();
 8001b76:	f7ff fa53 	bl	8001020 <StartupSequence>
	}

	// If the PWM is 0 and the motor is still turning shutdown
	if ( Registers[PWMReg] == 0 && Registers[RPMReg] > 0 ) {
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <ProcessData+0xc0>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d105      	bne.n	8001b8e <ProcessData+0x8e>
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <ProcessData+0xc0>)
 8001b84:	88db      	ldrh	r3, [r3, #6]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <ProcessData+0x8e>
		StopSequence();
 8001b8a:	f7ff fb93 	bl	80012b4 <StopSequence>
	}

	// Call some functions
	ChangePWM(); 				// Update PWM values
 8001b8e:	f7ff fbf1 	bl	8001374 <ChangePWM>
	memset(RxData, 0, RxSize); 	// Empty the RxData array for next transmission
 8001b92:	2204      	movs	r2, #4
 8001b94:	2100      	movs	r1, #0
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <ProcessData+0xac>)
 8001b98:	f007 fbbd 	bl	8009316 <memset>

	// Activate the buzzer everytime a transfer has been completed
	Buzzer = 1;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <ProcessData+0xc4>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200102f0 	.word	0x200102f0
 8001bb0:	200102f4 	.word	0x200102f4
 8001bb4:	200102ed 	.word	0x200102ed
 8001bb8:	200102f8 	.word	0x200102f8
 8001bbc:	200102fc 	.word	0x200102fc
 8001bc0:	20000090 	.word	0x20000090
 8001bc4:	200103ac 	.word	0x200103ac

08001bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bcc:	f000 fefc 	bl	80029c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd0:	f000 f81a 	bl	8001c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd4:	f7ff fd30 	bl	8001638 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001bd8:	f000 fad8 	bl	800218c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bdc:	f000 fb90 	bl	8002300 <MX_TIM2_Init>
  MX_TIM9_Init();
 8001be0:	f000 fcda 	bl	8002598 <MX_TIM9_Init>
  MX_I2C1_Init();
 8001be4:	f7ff fdde 	bl	80017a4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001be8:	f7ff fc00 	bl	80013ec <MX_ADC1_Init>
  MX_I2C2_Init();
 8001bec:	f7ff fe08 	bl	8001800 <MX_I2C2_Init>
  MX_TIM4_Init();
 8001bf0:	f000 fc26 	bl	8002440 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001bf4:	f000 fbce 	bl	8002394 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001bf8:	f000 fc76 	bl	80024e8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	HAL_I2C_EnableListen_IT (&hi2c1);
 8001bfc:	4801      	ldr	r0, [pc, #4]	; (8001c04 <main+0x3c>)
 8001bfe:	f002 fc05 	bl	800440c <HAL_I2C_EnableListen_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <main+0x3a>
 8001c04:	20010304 	.word	0x20010304

08001c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b094      	sub	sp, #80	; 0x50
 8001c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0e:	f107 0320 	add.w	r3, r7, #32
 8001c12:	2230      	movs	r2, #48	; 0x30
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f007 fb7d 	bl	8009316 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <SystemClock_Config+0xcc>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	4a27      	ldr	r2, [pc, #156]	; (8001cd4 <SystemClock_Config+0xcc>)
 8001c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3c:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <SystemClock_Config+0xcc>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <SystemClock_Config+0xd0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a21      	ldr	r2, [pc, #132]	; (8001cd8 <SystemClock_Config+0xd0>)
 8001c52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <SystemClock_Config+0xd0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c64:	2301      	movs	r3, #1
 8001c66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c78:	2319      	movs	r3, #25
 8001c7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001c7c:	23c0      	movs	r3, #192	; 0xc0
 8001c7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c80:	2302      	movs	r3, #2
 8001c82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c84:	2304      	movs	r3, #4
 8001c86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c88:	f107 0320 	add.w	r3, r7, #32
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f004 fbb3 	bl	80063f8 <HAL_RCC_OscConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c98:	f000 f820 	bl	8001cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	2103      	movs	r1, #3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f004 fe14 	bl	80068e8 <HAL_RCC_ClockConfig>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cc6:	f000 f809 	bl	8001cdc <Error_Handler>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3750      	adds	r7, #80	; 0x50
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40007000 	.word	0x40007000

08001cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce0:	b672      	cpsid	i
}
 8001ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <Error_Handler+0x8>
	...

08001ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_MspInit+0x4c>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <HAL_MspInit+0x4c>)
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_MspInit+0x4c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_MspInit+0x4c>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_MspInit+0x4c>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_MspInit+0x4c>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <NMI_Handler+0x4>

08001d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <HardFault_Handler+0x4>

08001d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <MemManage_Handler+0x4>

08001d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <BusFault_Handler+0x4>

08001d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <UsageFault_Handler+0x4>

08001d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d84:	f000 fe72 	bl	8002a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

	Buzzer = 1;
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <EXTI4_IRQHandler+0x14>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d96:	2010      	movs	r0, #16
 8001d98:	f001 fdc6 	bl	8003928 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	200103ac 	.word	0x200103ac

08001da4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <ADC_IRQHandler+0x10>)
 8001daa:	f000 ff81 	bl	8002cb0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200102a4 	.word	0x200102a4

08001db8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	if ( (TIM9->SR & TIM_SR_CC2IF) >= 1) { // If the CC2IF is set it means a input capture has happened
 8001dbc:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d03f      	beq.n	8001e48 <TIM1_BRK_TIM9_IRQHandler+0x90>

		Total -= RPM[i];
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a2a      	ldr	r2, [pc, #168]	; (8001e78 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001dce:	8812      	ldrh	r2, [r2, #0]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4a2a      	ldr	r2, [pc, #168]	; (8001e7c <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001dd4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001ddc:	6013      	str	r3, [r2, #0]
		RPM[i] = RPMConst / (TIM9->CCR2);
 8001dde:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <TIM1_BRK_TIM9_IRQHandler+0xc8>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de6:	fbb2 f1f3 	udiv	r1, r2, r3
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	b289      	uxth	r1, r1
 8001df2:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001df4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Total += RPM[i];
 8001df8:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001e00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001e0e:	6013      	str	r3, [r2, #0]

		i++;
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001e1a:	801a      	strh	r2, [r3, #0]

		if ( i >= AvgSize - 1 ) {
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	2b7e      	cmp	r3, #126	; 0x7e
 8001e22:	d902      	bls.n	8001e2a <TIM1_BRK_TIM9_IRQHandler+0x72>
			i = 0;
 8001e24:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	801a      	strh	r2, [r3, #0]
		}

		Registers[RPMReg] = Total / AvgSize;
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	09db      	lsrs	r3, r3, #7
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001e34:	80da      	strh	r2, [r3, #6]

		// If maximum RPM is exceeded -> shutdown
		if ( Registers[RPMReg] > MaximumRPM ) {
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001e38:	88db      	ldrh	r3, [r3, #6]
 8001e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d90e      	bls.n	8001e60 <TIM1_BRK_TIM9_IRQHandler+0xa8>
			StopSequence();
 8001e42:	f7ff fa37 	bl	80012b4 <StopSequence>
 8001e46:	e00b      	b.n	8001e60 <TIM1_BRK_TIM9_IRQHandler+0xa8>
		}
	} else {
		Registers[RPMReg] = 0; // If the CC2IF was not set it means the timer has overflowed and the motor is thus stationary
 8001e48:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	80da      	strh	r2, [r3, #6]
		Total = 0;
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
		memset(RPM, 0, AvgSize * 2);
 8001e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4808      	ldr	r0, [pc, #32]	; (8001e7c <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001e5c:	f007 fa5b 	bl	8009316 <memset>
	}


  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e60:	4809      	ldr	r0, [pc, #36]	; (8001e88 <TIM1_BRK_TIM9_IRQHandler+0xd0>)
 8001e62:	f005 fb7d 	bl	8007560 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001e66:	4809      	ldr	r0, [pc, #36]	; (8001e8c <TIM1_BRK_TIM9_IRQHandler+0xd4>)
 8001e68:	f005 fb7a 	bl	8007560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40014000 	.word	0x40014000
 8001e74:	200103b4 	.word	0x200103b4
 8001e78:	200104b8 	.word	0x200104b8
 8001e7c:	200103b8 	.word	0x200103b8
 8001e80:	20000294 	.word	0x20000294
 8001e84:	20000090 	.word	0x20000090
 8001e88:	200104c0 	.word	0x200104c0
 8001e8c:	20010628 	.word	0x20010628

08001e90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	TIM3->CR1 |= ITM_CR1_CEN;

	*/

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e96:	f005 fb63 	bl	8007560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200104c0 	.word	0x200104c0

08001ea4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	PrepareCommutation ();		// Set next Commutation states
 8001ea8:	f7ff f874 	bl	8000f94 <PrepareCommutation>

	TIM1->SR &= ~TIM_SR_COMIF; 	// Reset COMIF in SR register
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001eb2:	f023 0320 	bic.w	r3, r3, #32
 8001eb6:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 8001eba:	f005 fb51 	bl	8007560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	200104c0 	.word	0x200104c0

08001ecc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <TIM2_IRQHandler+0x20>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR to generate commutation interrupt
	TIM1->EGR |= TIM_EGR_COMG;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <TIM2_IRQHandler+0x24>)
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <TIM2_IRQHandler+0x24>)
 8001edc:	f043 0320 	orr.w	r3, r3, #32
 8001ee0:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ee2:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <TIM2_IRQHandler+0x28>)
 8001ee4:	f005 fb3c 	bl	8007560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40014000 	.word	0x40014000
 8001ef0:	40010000 	.word	0x40010000
 8001ef4:	20010508 	.word	0x20010508

08001ef8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	// Disable timer again
	TIM3->CR1 &= ~TIM_CR1_CEN;
	*/

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <TIM3_IRQHandler+0x10>)
 8001efe:	f005 fb2f 	bl	8007560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20010550 	.word	0x20010550

08001f0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <I2C1_EV_IRQHandler+0x10>)
 8001f12:	f002 fab1 	bl	8004478 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20010304 	.word	0x20010304

08001f20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <I2C1_ER_IRQHandler+0x10>)
 8001f26:	f002 fbfa 	bl	800471e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20010304 	.word	0x20010304

08001f34 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM5_IRQn 0 */

	uint8_t buff[2];
	float Temp = 0;
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	607b      	str	r3, [r7, #4]

	buff[0] = 0x05;
 8001f40:	2305      	movs	r3, #5
 8001f42:	703b      	strb	r3, [r7, #0]
	buff[1] = 0x00;
 8001f44:	2300      	movs	r3, #0
 8001f46:	707b      	strb	r3, [r7, #1]

	ret = HAL_I2C_Master_Transmit(&hi2c2, MCP9808_ADDR << 1, buff, 1, HAL_MAX_DELAY);
 8001f48:	463a      	mov	r2, r7
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2301      	movs	r3, #1
 8001f52:	2130      	movs	r1, #48	; 0x30
 8001f54:	481c      	ldr	r0, [pc, #112]	; (8001fc8 <TIM5_IRQHandler+0x94>)
 8001f56:	f001 fe4f 	bl	8003bf8 <HAL_I2C_Master_Transmit>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <TIM5_IRQHandler+0x98>)
 8001f60:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Receive(&hi2c2, MCP9808_ADDR << 1, buff, 2, HAL_MAX_DELAY);
 8001f62:	463a      	mov	r2, r7
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	2130      	movs	r1, #48	; 0x30
 8001f6e:	4816      	ldr	r0, [pc, #88]	; (8001fc8 <TIM5_IRQHandler+0x94>)
 8001f70:	f001 ff40 	bl	8003df4 <HAL_I2C_Master_Receive>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <TIM5_IRQHandler+0x98>)
 8001f7a:	701a      	strb	r2, [r3, #0]

	Temp = ((((int16_t)buff[0] << 11) + ((int16_t)buff[1] << 3)) >> 3) / 1600.0;
 8001f7c:	783b      	ldrb	r3, [r7, #0]
 8001f7e:	02da      	lsls	r2, r3, #11
 8001f80:	787b      	ldrb	r3, [r7, #1]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	10db      	asrs	r3, r3, #3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fad3 	bl	8000534 <__aeabi_i2d>
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <TIM5_IRQHandler+0x9c>)
 8001f94:	f7fe fc62 	bl	800085c <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f7fe fe2a 	bl	8000bf8 <__aeabi_d2f>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	607b      	str	r3, [r7, #4]
	Registers[TempReg] = Temp;
 8001fa8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb0:	ee17 3a90 	vmov	r3, s15
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <TIM5_IRQHandler+0xa0>)
 8001fb8:	811a      	strh	r2, [r3, #8]

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001fba:	4807      	ldr	r0, [pc, #28]	; (8001fd8 <TIM5_IRQHandler+0xa4>)
 8001fbc:	f005 fad0 	bl	8007560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20010358 	.word	0x20010358
 8001fcc:	200103b0 	.word	0x200103b0
 8001fd0:	40990000 	.word	0x40990000
 8001fd4:	20000090 	.word	0x20000090
 8001fd8:	200105e0 	.word	0x200105e0

08001fdc <_getpid>:
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <_kill>:
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
 8001ff6:	f007 f9e1 	bl	80093bc <__errno>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2216      	movs	r2, #22
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <_exit>:
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ffe7 	bl	8001fec <_kill>
 800201e:	e7fe      	b.n	800201e <_exit+0x12>

08002020 <_read>:
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	e00a      	b.n	8002048 <_read+0x28>
 8002032:	f3af 8000 	nop.w
 8002036:	4601      	mov	r1, r0
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	60ba      	str	r2, [r7, #8]
 800203e:	b2ca      	uxtb	r2, r1
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	3301      	adds	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	dbf0      	blt.n	8002032 <_read+0x12>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <_write>:
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e009      	b.n	8002080 <_write+0x26>
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	60ba      	str	r2, [r7, #8]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f3af 8000 	nop.w
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	dbf1      	blt.n	800206c <_write+0x12>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <_close>:
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_fstat>:
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	2300      	movs	r3, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <_isatty>:
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	2301      	movs	r3, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <_lseek>:
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	2300      	movs	r3, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <_sbrk>:
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <_sbrk+0x5c>)
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <_sbrk+0x60>)
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <_sbrk+0x22>
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <_sbrk+0x64>)
 800211a:	4a12      	ldr	r2, [pc, #72]	; (8002164 <_sbrk+0x68>)
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	d207      	bcs.n	800213c <_sbrk+0x40>
 800212c:	f007 f946 	bl	80093bc <__errno>
 8002130:	4603      	mov	r3, r0
 8002132:	220c      	movs	r2, #12
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800213a:	e009      	b.n	8002150 <_sbrk+0x54>
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <_sbrk+0x64>)
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20020000 	.word	0x20020000
 800215c:	00000400 	.word	0x00000400
 8002160:	200104bc 	.word	0x200104bc
 8002164:	200107c0 	.word	0x200107c0

08002168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <SystemInit+0x20>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <SystemInit+0x20>)
 8002174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b096      	sub	sp, #88	; 0x58
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002192:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ac:	f107 0320 	add.w	r3, r7, #32
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
 80021bc:	615a      	str	r2, [r3, #20]
 80021be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021c0:	463b      	mov	r3, r7
 80021c2:	2220      	movs	r2, #32
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f007 f8a5 	bl	8009316 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021cc:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <MX_TIM1_Init+0x16c>)
 80021ce:	4a4b      	ldr	r2, [pc, #300]	; (80022fc <MX_TIM1_Init+0x170>)
 80021d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021d2:	4b49      	ldr	r3, [pc, #292]	; (80022f8 <MX_TIM1_Init+0x16c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d8:	4b47      	ldr	r3, [pc, #284]	; (80022f8 <MX_TIM1_Init+0x16c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <MX_TIM1_Init+0x16c>)
 80021e0:	f240 727f 	movw	r2, #1919	; 0x77f
 80021e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e6:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <MX_TIM1_Init+0x16c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021ec:	4b42      	ldr	r3, [pc, #264]	; (80022f8 <MX_TIM1_Init+0x16c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f2:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <MX_TIM1_Init+0x16c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021f8:	483f      	ldr	r0, [pc, #252]	; (80022f8 <MX_TIM1_Init+0x16c>)
 80021fa:	f004 fd55 	bl	8006ca8 <HAL_TIM_Base_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002204:	f7ff fd6a 	bl	8001cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002208:	483b      	ldr	r0, [pc, #236]	; (80022f8 <MX_TIM1_Init+0x16c>)
 800220a:	f004 fe2e 	bl	8006e6a <HAL_TIM_PWM_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002214:	f7ff fd62 	bl	8001cdc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002218:	2304      	movs	r3, #4
 800221a:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800221c:	2300      	movs	r3, #0
 800221e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002220:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002224:	4619      	mov	r1, r3
 8002226:	4834      	ldr	r0, [pc, #208]	; (80022f8 <MX_TIM1_Init+0x16c>)
 8002228:	f005 fc00 	bl	8007a2c <HAL_TIM_SlaveConfigSynchro>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8002232:	f7ff fd53 	bl	8001cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800223e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002242:	4619      	mov	r1, r3
 8002244:	482c      	ldr	r0, [pc, #176]	; (80022f8 <MX_TIM1_Init+0x16c>)
 8002246:	f006 fa27 	bl	8008698 <HAL_TIMEx_MasterConfigSynchronization>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002250:	f7ff fd44 	bl	8001cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002254:	2360      	movs	r3, #96	; 0x60
 8002256:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800225c:	2300      	movs	r3, #0
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002270:	f107 0320 	add.w	r3, r7, #32
 8002274:	2200      	movs	r2, #0
 8002276:	4619      	mov	r1, r3
 8002278:	481f      	ldr	r0, [pc, #124]	; (80022f8 <MX_TIM1_Init+0x16c>)
 800227a:	f005 fb15 	bl	80078a8 <HAL_TIM_PWM_ConfigChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002284:	f7ff fd2a 	bl	8001cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002288:	f107 0320 	add.w	r3, r7, #32
 800228c:	2204      	movs	r2, #4
 800228e:	4619      	mov	r1, r3
 8002290:	4819      	ldr	r0, [pc, #100]	; (80022f8 <MX_TIM1_Init+0x16c>)
 8002292:	f005 fb09 	bl	80078a8 <HAL_TIM_PWM_ConfigChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800229c:	f7ff fd1e 	bl	8001cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022a0:	f107 0320 	add.w	r3, r7, #32
 80022a4:	2208      	movs	r2, #8
 80022a6:	4619      	mov	r1, r3
 80022a8:	4813      	ldr	r0, [pc, #76]	; (80022f8 <MX_TIM1_Init+0x16c>)
 80022aa:	f005 fafd 	bl	80078a8 <HAL_TIM_PWM_ConfigChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80022b4:	f7ff fd12 	bl	8001cdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022d6:	463b      	mov	r3, r7
 80022d8:	4619      	mov	r1, r3
 80022da:	4807      	ldr	r0, [pc, #28]	; (80022f8 <MX_TIM1_Init+0x16c>)
 80022dc:	f006 fa4a 	bl	8008774 <HAL_TIMEx_ConfigBreakDeadTime>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 80022e6:	f7ff fcf9 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022ea:	4803      	ldr	r0, [pc, #12]	; (80022f8 <MX_TIM1_Init+0x16c>)
 80022ec:	f000 fae6 	bl	80028bc <HAL_TIM_MspPostInit>

}
 80022f0:	bf00      	nop
 80022f2:	3758      	adds	r7, #88	; 0x58
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	200104c0 	.word	0x200104c0
 80022fc:	40010000 	.word	0x40010000

08002300 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8002306:	f107 0308 	add.w	r3, r7, #8
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002314:	463b      	mov	r3, r7
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <MX_TIM2_Init+0x90>)
 800231e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002322:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <MX_TIM2_Init+0x90>)
 8002326:	2200      	movs	r2, #0
 8002328:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232a:	4b19      	ldr	r3, [pc, #100]	; (8002390 <MX_TIM2_Init+0x90>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002330:	4b17      	ldr	r3, [pc, #92]	; (8002390 <MX_TIM2_Init+0x90>)
 8002332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002336:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <MX_TIM2_Init+0x90>)
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <MX_TIM2_Init+0x90>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8002354:	f107 0308 	add.w	r3, r7, #8
 8002358:	4619      	mov	r1, r3
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <MX_TIM2_Init+0x90>)
 800235c:	f006 f83a 	bl	80083d4 <HAL_TIMEx_HallSensor_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002366:	f7ff fcb9 	bl	8001cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800236a:	2350      	movs	r3, #80	; 0x50
 800236c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002372:	463b      	mov	r3, r7
 8002374:	4619      	mov	r1, r3
 8002376:	4806      	ldr	r0, [pc, #24]	; (8002390 <MX_TIM2_Init+0x90>)
 8002378:	f006 f98e 	bl	8008698 <HAL_TIMEx_MasterConfigSynchronization>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002382:	f7ff fcab 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20010508 	.word	0x20010508

08002394 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239a:	f107 0320 	add.w	r3, r7, #32
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
 80023b0:	611a      	str	r2, [r3, #16]
 80023b2:	615a      	str	r2, [r3, #20]
 80023b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <MX_TIM3_Init+0xa4>)
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <MX_TIM3_Init+0xa8>)
 80023ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <MX_TIM3_Init+0xa4>)
 80023be:	2200      	movs	r2, #0
 80023c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <MX_TIM3_Init+0xa4>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 959;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <MX_TIM3_Init+0xa4>)
 80023ca:	f240 32bf 	movw	r2, #959	; 0x3bf
 80023ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <MX_TIM3_Init+0xa4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <MX_TIM3_Init+0xa4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023dc:	4816      	ldr	r0, [pc, #88]	; (8002438 <MX_TIM3_Init+0xa4>)
 80023de:	f004 fd44 	bl	8006e6a <HAL_TIM_PWM_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80023e8:	f7ff fc78 	bl	8001cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023ec:	2320      	movs	r3, #32
 80023ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023f4:	f107 0320 	add.w	r3, r7, #32
 80023f8:	4619      	mov	r1, r3
 80023fa:	480f      	ldr	r0, [pc, #60]	; (8002438 <MX_TIM3_Init+0xa4>)
 80023fc:	f006 f94c 	bl	8008698 <HAL_TIMEx_MasterConfigSynchronization>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002406:	f7ff fc69 	bl	8001cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800240a:	2360      	movs	r3, #96	; 0x60
 800240c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	2200      	movs	r2, #0
 800241e:	4619      	mov	r1, r3
 8002420:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_TIM3_Init+0xa4>)
 8002422:	f005 fa41 	bl	80078a8 <HAL_TIM_PWM_ConfigChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800242c:	f7ff fc56 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	3728      	adds	r7, #40	; 0x28
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20010550 	.word	0x20010550
 800243c:	40000400 	.word	0x40000400

08002440 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002446:	f107 0310 	add.w	r3, r7, #16
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002450:	463b      	mov	r3, r7
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800245c:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <MX_TIM4_Init+0xa0>)
 800245e:	4a21      	ldr	r2, [pc, #132]	; (80024e4 <MX_TIM4_Init+0xa4>)
 8002460:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002462:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <MX_TIM4_Init+0xa0>)
 8002464:	2200      	movs	r2, #0
 8002466:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002468:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <MX_TIM4_Init+0xa0>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <MX_TIM4_Init+0xa0>)
 8002470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002474:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <MX_TIM4_Init+0xa0>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <MX_TIM4_Init+0xa0>)
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002482:	4817      	ldr	r0, [pc, #92]	; (80024e0 <MX_TIM4_Init+0xa0>)
 8002484:	f004 fe54 	bl	8007130 <HAL_TIM_IC_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800248e:	f7ff fc25 	bl	8001cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800249a:	f107 0310 	add.w	r3, r7, #16
 800249e:	4619      	mov	r1, r3
 80024a0:	480f      	ldr	r0, [pc, #60]	; (80024e0 <MX_TIM4_Init+0xa0>)
 80024a2:	f006 f8f9 	bl	8008698 <HAL_TIMEx_MasterConfigSynchronization>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80024ac:	f7ff fc16 	bl	8001cdc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024b0:	2300      	movs	r3, #0
 80024b2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024b4:	2301      	movs	r3, #1
 80024b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80024c0:	463b      	mov	r3, r7
 80024c2:	2208      	movs	r2, #8
 80024c4:	4619      	mov	r1, r3
 80024c6:	4806      	ldr	r0, [pc, #24]	; (80024e0 <MX_TIM4_Init+0xa0>)
 80024c8:	f005 f952 	bl	8007770 <HAL_TIM_IC_ConfigChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80024d2:	f7ff fc03 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20010598 	.word	0x20010598
 80024e4:	40000800 	.word	0x40000800

080024e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ee:	f107 0320 	add.w	r3, r7, #32
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]
 8002504:	611a      	str	r2, [r3, #16]
 8002506:	615a      	str	r2, [r3, #20]
 8002508:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <MX_TIM5_Init+0xa4>)
 800250c:	4a20      	ldr	r2, [pc, #128]	; (8002590 <MX_TIM5_Init+0xa8>)
 800250e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100;
 8002510:	4b1e      	ldr	r3, [pc, #120]	; (800258c <MX_TIM5_Init+0xa4>)
 8002512:	2264      	movs	r2, #100	; 0x64
 8002514:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <MX_TIM5_Init+0xa4>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 960000;
 800251c:	4b1b      	ldr	r3, [pc, #108]	; (800258c <MX_TIM5_Init+0xa4>)
 800251e:	4a1d      	ldr	r2, [pc, #116]	; (8002594 <MX_TIM5_Init+0xac>)
 8002520:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <MX_TIM5_Init+0xa4>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002528:	4b18      	ldr	r3, [pc, #96]	; (800258c <MX_TIM5_Init+0xa4>)
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800252e:	4817      	ldr	r0, [pc, #92]	; (800258c <MX_TIM5_Init+0xa4>)
 8002530:	f004 fc9b 	bl	8006e6a <HAL_TIM_PWM_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800253a:	f7ff fbcf 	bl	8001cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002546:	f107 0320 	add.w	r3, r7, #32
 800254a:	4619      	mov	r1, r3
 800254c:	480f      	ldr	r0, [pc, #60]	; (800258c <MX_TIM5_Init+0xa4>)
 800254e:	f006 f8a3 	bl	8008698 <HAL_TIMEx_MasterConfigSynchronization>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002558:	f7ff fbc0 	bl	8001cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800255c:	2360      	movs	r3, #96	; 0x60
 800255e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	2200      	movs	r2, #0
 8002570:	4619      	mov	r1, r3
 8002572:	4806      	ldr	r0, [pc, #24]	; (800258c <MX_TIM5_Init+0xa4>)
 8002574:	f005 f998 	bl	80078a8 <HAL_TIM_PWM_ConfigChannel>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800257e:	f7ff fbad 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002582:	bf00      	nop
 8002584:	3728      	adds	r7, #40	; 0x28
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200105e0 	.word	0x200105e0
 8002590:	40000c00 	.word	0x40000c00
 8002594:	000ea600 	.word	0x000ea600

08002598 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800259e:	463b      	mov	r3, r7
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <MX_TIM9_Init+0x78>)
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <MX_TIM9_Init+0x7c>)
 80025ae:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1499;
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <MX_TIM9_Init+0x78>)
 80025b2:	f240 52db 	movw	r2, #1499	; 0x5db
 80025b6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b8:	4b15      	ldr	r3, [pc, #84]	; (8002610 <MX_TIM9_Init+0x78>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 63999;
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <MX_TIM9_Init+0x78>)
 80025c0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80025c4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <MX_TIM9_Init+0x78>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025cc:	4b10      	ldr	r3, [pc, #64]	; (8002610 <MX_TIM9_Init+0x78>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80025d2:	480f      	ldr	r0, [pc, #60]	; (8002610 <MX_TIM9_Init+0x78>)
 80025d4:	f004 fdac 	bl	8007130 <HAL_TIM_IC_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80025de:	f7ff fb7d 	bl	8001cdc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025e2:	2300      	movs	r3, #0
 80025e4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025e6:	2301      	movs	r3, #1
 80025e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 80025ee:	2302      	movs	r3, #2
 80025f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025f2:	463b      	mov	r3, r7
 80025f4:	2204      	movs	r2, #4
 80025f6:	4619      	mov	r1, r3
 80025f8:	4805      	ldr	r0, [pc, #20]	; (8002610 <MX_TIM9_Init+0x78>)
 80025fa:	f005 f8b9 	bl	8007770 <HAL_TIM_IC_ConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 8002604:	f7ff fb6a 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20010628 	.word	0x20010628
 8002614:	40014000 	.word	0x40014000

08002618 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a16      	ldr	r2, [pc, #88]	; (8002680 <HAL_TIM_Base_MspInit+0x68>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d125      	bne.n	8002676 <HAL_TIM_Base_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <HAL_TIM_Base_MspInit+0x6c>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	4a14      	ldr	r2, [pc, #80]	; (8002684 <HAL_TIM_Base_MspInit+0x6c>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6453      	str	r3, [r2, #68]	; 0x44
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_TIM_Base_MspInit+0x6c>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	2018      	movs	r0, #24
 800264c:	f000 ff67 	bl	800351e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002650:	2018      	movs	r0, #24
 8002652:	f000 ff80 	bl	8003556 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	2019      	movs	r0, #25
 800265c:	f000 ff5f 	bl	800351e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002660:	2019      	movs	r0, #25
 8002662:	f000 ff78 	bl	8003556 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	201a      	movs	r0, #26
 800266c:	f000 ff57 	bl	800351e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002670:	201a      	movs	r0, #26
 8002672:	f000 ff70 	bl	8003556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40010000 	.word	0x40010000
 8002684:	40023800 	.word	0x40023800

08002688 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a8:	d133      	bne.n	8002712 <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a1a      	ldr	r2, [pc, #104]	; (800271c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b18      	ldr	r3, [pc, #96]	; (800271c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b14      	ldr	r3, [pc, #80]	; (800271c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a13      	ldr	r2, [pc, #76]	; (800271c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80026e2:	2307      	movs	r3, #7
 80026e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ea:	2301      	movs	r3, #1
 80026ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026f2:	2301      	movs	r3, #1
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4619      	mov	r1, r3
 80026fc:	4808      	ldr	r0, [pc, #32]	; (8002720 <HAL_TIMEx_HallSensor_MspInit+0x98>)
 80026fe:	f000 ff75 	bl	80035ec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	201c      	movs	r0, #28
 8002708:	f000 ff09 	bl	800351e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800270c:	201c      	movs	r0, #28
 800270e:	f000 ff22 	bl	8003556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002712:	bf00      	nop
 8002714:	3728      	adds	r7, #40	; 0x28
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	40020000 	.word	0x40020000

08002724 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <HAL_TIM_PWM_MspInit+0x80>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d116      	bne.n	8002764 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_TIM_PWM_MspInit+0x84>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a1a      	ldr	r2, [pc, #104]	; (80027a8 <HAL_TIM_PWM_MspInit+0x84>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <HAL_TIM_PWM_MspInit+0x84>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2100      	movs	r1, #0
 8002756:	201d      	movs	r0, #29
 8002758:	f000 fee1 	bl	800351e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800275c:	201d      	movs	r0, #29
 800275e:	f000 fefa 	bl	8003556 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002762:	e01a      	b.n	800279a <HAL_TIM_PWM_MspInit+0x76>
  else if(tim_pwmHandle->Instance==TIM5)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a10      	ldr	r2, [pc, #64]	; (80027ac <HAL_TIM_PWM_MspInit+0x88>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d115      	bne.n	800279a <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <HAL_TIM_PWM_MspInit+0x84>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a0c      	ldr	r2, [pc, #48]	; (80027a8 <HAL_TIM_PWM_MspInit+0x84>)
 8002778:	f043 0308 	orr.w	r3, r3, #8
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_TIM_PWM_MspInit+0x84>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	2100      	movs	r1, #0
 800278e:	2032      	movs	r0, #50	; 0x32
 8002790:	f000 fec5 	bl	800351e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002794:	2032      	movs	r0, #50	; 0x32
 8002796:	f000 fede 	bl	8003556 <HAL_NVIC_EnableIRQ>
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40000400 	.word	0x40000400
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40000c00 	.word	0x40000c00

080027b0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	; 0x30
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a36      	ldr	r2, [pc, #216]	; (80028a8 <HAL_TIM_IC_MspInit+0xf8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d12d      	bne.n	800282e <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	4b35      	ldr	r3, [pc, #212]	; (80028ac <HAL_TIM_IC_MspInit+0xfc>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a34      	ldr	r2, [pc, #208]	; (80028ac <HAL_TIM_IC_MspInit+0xfc>)
 80027dc:	f043 0304 	orr.w	r3, r3, #4
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
 80027e2:	4b32      	ldr	r3, [pc, #200]	; (80028ac <HAL_TIM_IC_MspInit+0xfc>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <HAL_TIM_IC_MspInit+0xfc>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a2d      	ldr	r2, [pc, #180]	; (80028ac <HAL_TIM_IC_MspInit+0xfc>)
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <HAL_TIM_IC_MspInit+0xfc>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800280a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800281c:	2302      	movs	r3, #2
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	4619      	mov	r1, r3
 8002826:	4822      	ldr	r0, [pc, #136]	; (80028b0 <HAL_TIM_IC_MspInit+0x100>)
 8002828:	f000 fee0 	bl	80035ec <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800282c:	e038      	b.n	80028a0 <HAL_TIM_IC_MspInit+0xf0>
  else if(tim_icHandle->Instance==TIM9)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a20      	ldr	r2, [pc, #128]	; (80028b4 <HAL_TIM_IC_MspInit+0x104>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d133      	bne.n	80028a0 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_TIM_IC_MspInit+0xfc>)
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	4a1a      	ldr	r2, [pc, #104]	; (80028ac <HAL_TIM_IC_MspInit+0xfc>)
 8002842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002846:	6453      	str	r3, [r2, #68]	; 0x44
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_TIM_IC_MspInit+0xfc>)
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <HAL_TIM_IC_MspInit+0xfc>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4a13      	ldr	r2, [pc, #76]	; (80028ac <HAL_TIM_IC_MspInit+0xfc>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6313      	str	r3, [r2, #48]	; 0x30
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_TIM_IC_MspInit+0xfc>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002870:	2308      	movs	r3, #8
 8002872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002878:	2301      	movs	r3, #1
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287c:	2300      	movs	r3, #0
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002880:	2303      	movs	r3, #3
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	4619      	mov	r1, r3
 800288a:	480b      	ldr	r0, [pc, #44]	; (80028b8 <HAL_TIM_IC_MspInit+0x108>)
 800288c:	f000 feae 	bl	80035ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002890:	2200      	movs	r2, #0
 8002892:	2100      	movs	r1, #0
 8002894:	2018      	movs	r0, #24
 8002896:	f000 fe42 	bl	800351e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800289a:	2018      	movs	r0, #24
 800289c:	f000 fe5b 	bl	8003556 <HAL_NVIC_EnableIRQ>
}
 80028a0:	bf00      	nop
 80028a2:	3730      	adds	r7, #48	; 0x30
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40000800 	.word	0x40000800
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020400 	.word	0x40020400
 80028b4:	40014000 	.word	0x40014000
 80028b8:	40020000 	.word	0x40020000

080028bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	; 0x28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a22      	ldr	r2, [pc, #136]	; (8002964 <HAL_TIM_MspPostInit+0xa8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d13d      	bne.n	800295a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	4b21      	ldr	r3, [pc, #132]	; (8002968 <HAL_TIM_MspPostInit+0xac>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a20      	ldr	r2, [pc, #128]	; (8002968 <HAL_TIM_MspPostInit+0xac>)
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <HAL_TIM_MspPostInit+0xac>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <HAL_TIM_MspPostInit+0xac>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a19      	ldr	r2, [pc, #100]	; (8002968 <HAL_TIM_MspPostInit+0xac>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b17      	ldr	r3, [pc, #92]	; (8002968 <HAL_TIM_MspPostInit+0xac>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002916:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800291a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002928:	2301      	movs	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	4619      	mov	r1, r3
 8002932:	480e      	ldr	r0, [pc, #56]	; (800296c <HAL_TIM_MspPostInit+0xb0>)
 8002934:	f000 fe5a 	bl	80035ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002938:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800293c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293e:	2302      	movs	r3, #2
 8002940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800294a:	2301      	movs	r3, #1
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4619      	mov	r1, r3
 8002954:	4806      	ldr	r0, [pc, #24]	; (8002970 <HAL_TIM_MspPostInit+0xb4>)
 8002956:	f000 fe49 	bl	80035ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800295a:	bf00      	nop
 800295c:	3728      	adds	r7, #40	; 0x28
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40010000 	.word	0x40010000
 8002968:	40023800 	.word	0x40023800
 800296c:	40020400 	.word	0x40020400
 8002970:	40020000 	.word	0x40020000

08002974 <Reset_Handler>:
 8002974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029ac <LoopFillZerobss+0x12>
 8002978:	480d      	ldr	r0, [pc, #52]	; (80029b0 <LoopFillZerobss+0x16>)
 800297a:	490e      	ldr	r1, [pc, #56]	; (80029b4 <LoopFillZerobss+0x1a>)
 800297c:	4a0e      	ldr	r2, [pc, #56]	; (80029b8 <LoopFillZerobss+0x1e>)
 800297e:	2300      	movs	r3, #0
 8002980:	e002      	b.n	8002988 <LoopCopyDataInit>

08002982 <CopyDataInit>:
 8002982:	58d4      	ldr	r4, [r2, r3]
 8002984:	50c4      	str	r4, [r0, r3]
 8002986:	3304      	adds	r3, #4

08002988 <LoopCopyDataInit>:
 8002988:	18c4      	adds	r4, r0, r3
 800298a:	428c      	cmp	r4, r1
 800298c:	d3f9      	bcc.n	8002982 <CopyDataInit>
 800298e:	4a0b      	ldr	r2, [pc, #44]	; (80029bc <LoopFillZerobss+0x22>)
 8002990:	4c0b      	ldr	r4, [pc, #44]	; (80029c0 <LoopFillZerobss+0x26>)
 8002992:	2300      	movs	r3, #0
 8002994:	e001      	b.n	800299a <LoopFillZerobss>

08002996 <FillZerobss>:
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	3204      	adds	r2, #4

0800299a <LoopFillZerobss>:
 800299a:	42a2      	cmp	r2, r4
 800299c:	d3fb      	bcc.n	8002996 <FillZerobss>
 800299e:	f7ff fbe3 	bl	8002168 <SystemInit>
 80029a2:	f006 fd11 	bl	80093c8 <__libc_init_array>
 80029a6:	f7ff f90f 	bl	8001bc8 <main>
 80029aa:	4770      	bx	lr
 80029ac:	20020000 	.word	0x20020000
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000270 	.word	0x20000270
 80029b8:	0800b56c 	.word	0x0800b56c
 80029bc:	20000270 	.word	0x20000270
 80029c0:	200107c0 	.word	0x200107c0

080029c4 <DMA1_Stream0_IRQHandler>:
 80029c4:	e7fe      	b.n	80029c4 <DMA1_Stream0_IRQHandler>
	...

080029c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029cc:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <HAL_Init+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0d      	ldr	r2, [pc, #52]	; (8002a08 <HAL_Init+0x40>)
 80029d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_Init+0x40>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <HAL_Init+0x40>)
 80029de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e4:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <HAL_Init+0x40>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <HAL_Init+0x40>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f0:	2003      	movs	r0, #3
 80029f2:	f000 fd89 	bl	8003508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029f6:	200f      	movs	r0, #15
 80029f8:	f000 f808 	bl	8002a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029fc:	f7ff f974 	bl	8001ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023c00 	.word	0x40023c00

08002a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_InitTick+0x54>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <HAL_InitTick+0x58>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fda1 	bl	8003572 <HAL_SYSTICK_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00e      	b.n	8002a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b0f      	cmp	r3, #15
 8002a3e:	d80a      	bhi.n	8002a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a40:	2200      	movs	r2, #0
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a48:	f000 fd69 	bl	800351e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a4c:	4a06      	ldr	r2, [pc, #24]	; (8002a68 <HAL_InitTick+0x5c>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	e000      	b.n	8002a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	2000009c 	.word	0x2000009c
 8002a64:	200000a4 	.word	0x200000a4
 8002a68:	200000a0 	.word	0x200000a0

08002a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_IncTick+0x20>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_IncTick+0x24>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_IncTick+0x24>)
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	200000a4 	.word	0x200000a4
 8002a90:	20010670 	.word	0x20010670

08002a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return uwTick;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_GetTick+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20010670 	.word	0x20010670

08002aac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e033      	b.n	8002b2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe fce0 	bl	8001490 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002af2:	f023 0302 	bic.w	r3, r3, #2
 8002af6:	f043 0202 	orr.w	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fb2c 	bl	800315c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f023 0303 	bic.w	r3, r3, #3
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
 8002b1a:	e001      	b.n	8002b20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_Start_IT+0x1a>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e0a1      	b.n	8002c92 <HAL_ADC_Start_IT+0x15e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d018      	beq.n	8002b96 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b74:	4b4a      	ldr	r3, [pc, #296]	; (8002ca0 <HAL_ADC_Start_IT+0x16c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a4a      	ldr	r2, [pc, #296]	; (8002ca4 <HAL_ADC_Start_IT+0x170>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	0c9a      	lsrs	r2, r3, #18
 8002b80:	4613      	mov	r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4413      	add	r3, r2
 8002b86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b88:	e002      	b.n	8002b90 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f9      	bne.n	8002b8a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d169      	bne.n	8002c78 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be2:	d106      	bne.n	8002bf2 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	f023 0206 	bic.w	r2, r3, #6
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44
 8002bf0:	e002      	b.n	8002bf8 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c00:	4b29      	ldr	r3, [pc, #164]	; (8002ca8 <HAL_ADC_Start_IT+0x174>)
 8002c02:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c0c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c1c:	f043 0320 	orr.w	r3, r3, #32
 8002c20:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10f      	bne.n	8002c4e <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d129      	bne.n	8002c90 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	e020      	b.n	8002c90 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a16      	ldr	r2, [pc, #88]	; (8002cac <HAL_ADC_Start_IT+0x178>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d11b      	bne.n	8002c90 <HAL_ADC_Start_IT+0x15c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d114      	bne.n	8002c90 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	e00b      	b.n	8002c90 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f043 0210 	orr.w	r2, r3, #16
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	f043 0201 	orr.w	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	2000009c 	.word	0x2000009c
 8002ca4:	431bde83 	.word	0x431bde83
 8002ca8:	40012300 	.word	0x40012300
 8002cac:	40012000 	.word	0x40012000

08002cb0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d049      	beq.n	8002d7a <HAL_ADC_IRQHandler+0xca>
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d046      	beq.n	8002d7a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d105      	bne.n	8002d04 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d12b      	bne.n	8002d6a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d127      	bne.n	8002d6a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d119      	bne.n	8002d6a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0220 	bic.w	r2, r2, #32
 8002d44:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe fbdc 	bl	8001528 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0212 	mvn.w	r2, #18
 8002d78:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d88:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d057      	beq.n	8002e40 <HAL_ADC_IRQHandler+0x190>
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d054      	beq.n	8002e40 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d139      	bne.n	8002e30 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d006      	beq.n	8002dd8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d12b      	bne.n	8002e30 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d124      	bne.n	8002e30 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d11d      	bne.n	8002e30 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d119      	bne.n	8002e30 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d105      	bne.n	8002e30 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f043 0201 	orr.w	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fa8f 	bl	8003354 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f06f 020c 	mvn.w	r2, #12
 8002e3e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d017      	beq.n	8002e86 <HAL_ADC_IRQHandler+0x1d6>
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d014      	beq.n	8002e86 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d10d      	bne.n	8002e86 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f82a 	bl	8002ed0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0201 	mvn.w	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e94:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d015      	beq.n	8002ec8 <HAL_ADC_IRQHandler+0x218>
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d012      	beq.n	8002ec8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	f043 0202 	orr.w	r2, r3, #2
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f06f 0220 	mvn.w	r2, #32
 8002eb6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f813 	bl	8002ee4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f06f 0220 	mvn.w	r2, #32
 8002ec6:	601a      	str	r2, [r3, #0]
  }
}
 8002ec8:	bf00      	nop
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x1c>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e113      	b.n	800313c <HAL_ADC_ConfigChannel+0x244>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b09      	cmp	r3, #9
 8002f22:	d925      	bls.n	8002f70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68d9      	ldr	r1, [r3, #12]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	3b1e      	subs	r3, #30
 8002f3a:	2207      	movs	r2, #7
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43da      	mvns	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	400a      	ands	r2, r1
 8002f48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68d9      	ldr	r1, [r3, #12]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4403      	add	r3, r0
 8002f62:	3b1e      	subs	r3, #30
 8002f64:	409a      	lsls	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	e022      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6919      	ldr	r1, [r3, #16]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	2207      	movs	r2, #7
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	400a      	ands	r2, r1
 8002f92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6919      	ldr	r1, [r3, #16]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4403      	add	r3, r0
 8002fac:	409a      	lsls	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d824      	bhi.n	8003008 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	3b05      	subs	r3, #5
 8002fd0:	221f      	movs	r2, #31
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	400a      	ands	r2, r1
 8002fde:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4618      	mov	r0, r3
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3b05      	subs	r3, #5
 8002ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	635a      	str	r2, [r3, #52]	; 0x34
 8003006:	e04c      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b0c      	cmp	r3, #12
 800300e:	d824      	bhi.n	800305a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	3b23      	subs	r3, #35	; 0x23
 8003022:	221f      	movs	r2, #31
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43da      	mvns	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	400a      	ands	r2, r1
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	b29b      	uxth	r3, r3
 800303e:	4618      	mov	r0, r3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	3b23      	subs	r3, #35	; 0x23
 800304c:	fa00 f203 	lsl.w	r2, r0, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
 8003058:	e023      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	3b41      	subs	r3, #65	; 0x41
 800306c:	221f      	movs	r2, #31
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	400a      	ands	r2, r1
 800307a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	4618      	mov	r0, r3
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	3b41      	subs	r3, #65	; 0x41
 8003096:	fa00 f203 	lsl.w	r2, r0, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030a2:	4b29      	ldr	r3, [pc, #164]	; (8003148 <HAL_ADC_ConfigChannel+0x250>)
 80030a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a28      	ldr	r2, [pc, #160]	; (800314c <HAL_ADC_ConfigChannel+0x254>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d10f      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x1d8>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b12      	cmp	r3, #18
 80030b6:	d10b      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1d      	ldr	r2, [pc, #116]	; (800314c <HAL_ADC_ConfigChannel+0x254>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d12b      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x23a>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <HAL_ADC_ConfigChannel+0x258>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d003      	beq.n	80030ec <HAL_ADC_ConfigChannel+0x1f4>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b11      	cmp	r3, #17
 80030ea:	d122      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a11      	ldr	r2, [pc, #68]	; (8003150 <HAL_ADC_ConfigChannel+0x258>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d111      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_ADC_ConfigChannel+0x25c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a11      	ldr	r2, [pc, #68]	; (8003158 <HAL_ADC_ConfigChannel+0x260>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	0c9a      	lsrs	r2, r3, #18
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003124:	e002      	b.n	800312c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3b01      	subs	r3, #1
 800312a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f9      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40012300 	.word	0x40012300
 800314c:	40012000 	.word	0x40012000
 8003150:	10000012 	.word	0x10000012
 8003154:	2000009c 	.word	0x2000009c
 8003158:	431bde83 	.word	0x431bde83

0800315c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003164:	4b79      	ldr	r3, [pc, #484]	; (800334c <ADC_Init+0x1f0>)
 8003166:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	431a      	orrs	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003190:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	021a      	lsls	r2, r3, #8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6899      	ldr	r1, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	4a58      	ldr	r2, [pc, #352]	; (8003350 <ADC_Init+0x1f4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d022      	beq.n	800323a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003202:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6899      	ldr	r1, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003224:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6899      	ldr	r1, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	e00f      	b.n	800325a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003258:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0202 	bic.w	r2, r2, #2
 8003268:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6899      	ldr	r1, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	7e1b      	ldrb	r3, [r3, #24]
 8003274:	005a      	lsls	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01b      	beq.n	80032c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003296:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6859      	ldr	r1, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	3b01      	subs	r3, #1
 80032b4:	035a      	lsls	r2, r3, #13
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	e007      	b.n	80032d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	051a      	lsls	r2, r3, #20
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003304:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6899      	ldr	r1, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003312:	025a      	lsls	r2, r3, #9
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6899      	ldr	r1, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	029a      	lsls	r2, r3, #10
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	609a      	str	r2, [r3, #8]
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	40012300 	.word	0x40012300
 8003350:	0f000001 	.word	0x0f000001

08003354 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <__NVIC_SetPriorityGrouping+0x44>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003384:	4013      	ands	r3, r2
 8003386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800339a:	4a04      	ldr	r2, [pc, #16]	; (80033ac <__NVIC_SetPriorityGrouping+0x44>)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	60d3      	str	r3, [r2, #12]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <__NVIC_GetPriorityGrouping+0x18>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	0a1b      	lsrs	r3, r3, #8
 80033ba:	f003 0307 	and.w	r3, r3, #7
}
 80033be:	4618      	mov	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	db0b      	blt.n	80033f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	f003 021f 	and.w	r2, r3, #31
 80033e4:	4907      	ldr	r1, [pc, #28]	; (8003404 <__NVIC_EnableIRQ+0x38>)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2001      	movs	r0, #1
 80033ee:	fa00 f202 	lsl.w	r2, r0, r2
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	e000e100 	.word	0xe000e100

08003408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	6039      	str	r1, [r7, #0]
 8003412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003418:	2b00      	cmp	r3, #0
 800341a:	db0a      	blt.n	8003432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	490c      	ldr	r1, [pc, #48]	; (8003454 <__NVIC_SetPriority+0x4c>)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	0112      	lsls	r2, r2, #4
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	440b      	add	r3, r1
 800342c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003430:	e00a      	b.n	8003448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	4908      	ldr	r1, [pc, #32]	; (8003458 <__NVIC_SetPriority+0x50>)
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	3b04      	subs	r3, #4
 8003440:	0112      	lsls	r2, r2, #4
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	440b      	add	r3, r1
 8003446:	761a      	strb	r2, [r3, #24]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000e100 	.word	0xe000e100
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	; 0x24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f1c3 0307 	rsb	r3, r3, #7
 8003476:	2b04      	cmp	r3, #4
 8003478:	bf28      	it	cs
 800347a:	2304      	movcs	r3, #4
 800347c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3304      	adds	r3, #4
 8003482:	2b06      	cmp	r3, #6
 8003484:	d902      	bls.n	800348c <NVIC_EncodePriority+0x30>
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3b03      	subs	r3, #3
 800348a:	e000      	b.n	800348e <NVIC_EncodePriority+0x32>
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43da      	mvns	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	401a      	ands	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	43d9      	mvns	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b4:	4313      	orrs	r3, r2
         );
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3724      	adds	r7, #36	; 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d4:	d301      	bcc.n	80034da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034d6:	2301      	movs	r3, #1
 80034d8:	e00f      	b.n	80034fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034da:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <SysTick_Config+0x40>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034e2:	210f      	movs	r1, #15
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034e8:	f7ff ff8e 	bl	8003408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <SysTick_Config+0x40>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <SysTick_Config+0x40>)
 80034f4:	2207      	movs	r2, #7
 80034f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	e000e010 	.word	0xe000e010

08003508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ff29 	bl	8003368 <__NVIC_SetPriorityGrouping>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003530:	f7ff ff3e 	bl	80033b0 <__NVIC_GetPriorityGrouping>
 8003534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	6978      	ldr	r0, [r7, #20]
 800353c:	f7ff ff8e 	bl	800345c <NVIC_EncodePriority>
 8003540:	4602      	mov	r2, r0
 8003542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff5d 	bl	8003408 <__NVIC_SetPriority>
}
 800354e:	bf00      	nop
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	4603      	mov	r3, r0
 800355e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff31 	bl	80033cc <__NVIC_EnableIRQ>
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff ffa2 	bl	80034c4 <SysTick_Config>
 8003580:	4603      	mov	r3, r0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d004      	beq.n	80035a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2280      	movs	r2, #128	; 0x80
 80035a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e00c      	b.n	80035c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2205      	movs	r2, #5
 80035ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035dc:	b2db      	uxtb	r3, r3
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	; 0x24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	e159      	b.n	80038bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003608:	2201      	movs	r2, #1
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	429a      	cmp	r2, r3
 8003622:	f040 8148 	bne.w	80038b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b01      	cmp	r3, #1
 8003630:	d005      	beq.n	800363e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800363a:	2b02      	cmp	r3, #2
 800363c:	d130      	bne.n	80036a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	2203      	movs	r2, #3
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003674:	2201      	movs	r2, #1
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 0201 	and.w	r2, r3, #1
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d017      	beq.n	80036dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	2203      	movs	r2, #3
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d123      	bne.n	8003730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	08da      	lsrs	r2, r3, #3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3208      	adds	r2, #8
 80036f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	220f      	movs	r2, #15
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	08da      	lsrs	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3208      	adds	r2, #8
 800372a:	69b9      	ldr	r1, [r7, #24]
 800372c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	2203      	movs	r2, #3
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0203 	and.w	r2, r3, #3
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80a2 	beq.w	80038b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	4b57      	ldr	r3, [pc, #348]	; (80038d4 <HAL_GPIO_Init+0x2e8>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	4a56      	ldr	r2, [pc, #344]	; (80038d4 <HAL_GPIO_Init+0x2e8>)
 800377c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003780:	6453      	str	r3, [r2, #68]	; 0x44
 8003782:	4b54      	ldr	r3, [pc, #336]	; (80038d4 <HAL_GPIO_Init+0x2e8>)
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800378e:	4a52      	ldr	r2, [pc, #328]	; (80038d8 <HAL_GPIO_Init+0x2ec>)
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	089b      	lsrs	r3, r3, #2
 8003794:	3302      	adds	r3, #2
 8003796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	220f      	movs	r2, #15
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a49      	ldr	r2, [pc, #292]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d019      	beq.n	80037ee <HAL_GPIO_Init+0x202>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a48      	ldr	r2, [pc, #288]	; (80038e0 <HAL_GPIO_Init+0x2f4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_GPIO_Init+0x1fe>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a47      	ldr	r2, [pc, #284]	; (80038e4 <HAL_GPIO_Init+0x2f8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00d      	beq.n	80037e6 <HAL_GPIO_Init+0x1fa>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a46      	ldr	r2, [pc, #280]	; (80038e8 <HAL_GPIO_Init+0x2fc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d007      	beq.n	80037e2 <HAL_GPIO_Init+0x1f6>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a45      	ldr	r2, [pc, #276]	; (80038ec <HAL_GPIO_Init+0x300>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <HAL_GPIO_Init+0x1f2>
 80037da:	2304      	movs	r3, #4
 80037dc:	e008      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037de:	2307      	movs	r3, #7
 80037e0:	e006      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037e2:	2303      	movs	r3, #3
 80037e4:	e004      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e002      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_GPIO_Init+0x204>
 80037ee:	2300      	movs	r3, #0
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	f002 0203 	and.w	r2, r2, #3
 80037f6:	0092      	lsls	r2, r2, #2
 80037f8:	4093      	lsls	r3, r2
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003800:	4935      	ldr	r1, [pc, #212]	; (80038d8 <HAL_GPIO_Init+0x2ec>)
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	089b      	lsrs	r3, r3, #2
 8003806:	3302      	adds	r3, #2
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800380e:	4b38      	ldr	r3, [pc, #224]	; (80038f0 <HAL_GPIO_Init+0x304>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	43db      	mvns	r3, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003832:	4a2f      	ldr	r2, [pc, #188]	; (80038f0 <HAL_GPIO_Init+0x304>)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003838:	4b2d      	ldr	r3, [pc, #180]	; (80038f0 <HAL_GPIO_Init+0x304>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800385c:	4a24      	ldr	r2, [pc, #144]	; (80038f0 <HAL_GPIO_Init+0x304>)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003862:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <HAL_GPIO_Init+0x304>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003886:	4a1a      	ldr	r2, [pc, #104]	; (80038f0 <HAL_GPIO_Init+0x304>)
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800388c:	4b18      	ldr	r3, [pc, #96]	; (80038f0 <HAL_GPIO_Init+0x304>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038b0:	4a0f      	ldr	r2, [pc, #60]	; (80038f0 <HAL_GPIO_Init+0x304>)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3301      	adds	r3, #1
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	2b0f      	cmp	r3, #15
 80038c0:	f67f aea2 	bls.w	8003608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3724      	adds	r7, #36	; 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40013800 	.word	0x40013800
 80038dc:	40020000 	.word	0x40020000
 80038e0:	40020400 	.word	0x40020400
 80038e4:	40020800 	.word	0x40020800
 80038e8:	40020c00 	.word	0x40020c00
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40013c00 	.word	0x40013c00

080038f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
 8003900:	4613      	mov	r3, r2
 8003902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003904:	787b      	ldrb	r3, [r7, #1]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003910:	e003      	b.n	800391a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003912:	887b      	ldrh	r3, [r7, #2]
 8003914:	041a      	lsls	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	619a      	str	r2, [r3, #24]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d006      	beq.n	800394c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f806 	bl	8003958 <HAL_GPIO_EXTI_Callback>
  }
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40013c00 	.word	0x40013c00

08003958 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e12b      	b.n	8003bda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fd ff60 	bl	800185c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2224      	movs	r2, #36	; 0x24
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039d4:	f003 f940 	bl	8006c58 <HAL_RCC_GetPCLK1Freq>
 80039d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4a81      	ldr	r2, [pc, #516]	; (8003be4 <HAL_I2C_Init+0x274>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d807      	bhi.n	80039f4 <HAL_I2C_Init+0x84>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a80      	ldr	r2, [pc, #512]	; (8003be8 <HAL_I2C_Init+0x278>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	bf94      	ite	ls
 80039ec:	2301      	movls	r3, #1
 80039ee:	2300      	movhi	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	e006      	b.n	8003a02 <HAL_I2C_Init+0x92>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a7d      	ldr	r2, [pc, #500]	; (8003bec <HAL_I2C_Init+0x27c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	bf94      	ite	ls
 80039fc:	2301      	movls	r3, #1
 80039fe:	2300      	movhi	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e0e7      	b.n	8003bda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4a78      	ldr	r2, [pc, #480]	; (8003bf0 <HAL_I2C_Init+0x280>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	0c9b      	lsrs	r3, r3, #18
 8003a14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a6a      	ldr	r2, [pc, #424]	; (8003be4 <HAL_I2C_Init+0x274>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d802      	bhi.n	8003a44 <HAL_I2C_Init+0xd4>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	3301      	adds	r3, #1
 8003a42:	e009      	b.n	8003a58 <HAL_I2C_Init+0xe8>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a4a:	fb02 f303 	mul.w	r3, r2, r3
 8003a4e:	4a69      	ldr	r2, [pc, #420]	; (8003bf4 <HAL_I2C_Init+0x284>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	099b      	lsrs	r3, r3, #6
 8003a56:	3301      	adds	r3, #1
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	495c      	ldr	r1, [pc, #368]	; (8003be4 <HAL_I2C_Init+0x274>)
 8003a74:	428b      	cmp	r3, r1
 8003a76:	d819      	bhi.n	8003aac <HAL_I2C_Init+0x13c>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1e59      	subs	r1, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a86:	1c59      	adds	r1, r3, #1
 8003a88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a8c:	400b      	ands	r3, r1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_I2C_Init+0x138>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1e59      	subs	r1, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa6:	e051      	b.n	8003b4c <HAL_I2C_Init+0x1dc>
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	e04f      	b.n	8003b4c <HAL_I2C_Init+0x1dc>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d111      	bne.n	8003ad8 <HAL_I2C_Init+0x168>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1e58      	subs	r0, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	440b      	add	r3, r1
 8003ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	e012      	b.n	8003afe <HAL_I2C_Init+0x18e>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1e58      	subs	r0, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	0099      	lsls	r1, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_I2C_Init+0x196>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e022      	b.n	8003b4c <HAL_I2C_Init+0x1dc>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10e      	bne.n	8003b2c <HAL_I2C_Init+0x1bc>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1e58      	subs	r0, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6859      	ldr	r1, [r3, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	440b      	add	r3, r1
 8003b1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b20:	3301      	adds	r3, #1
 8003b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b2a:	e00f      	b.n	8003b4c <HAL_I2C_Init+0x1dc>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1e58      	subs	r0, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6859      	ldr	r1, [r3, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	0099      	lsls	r1, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b42:	3301      	adds	r3, #1
 8003b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	6809      	ldr	r1, [r1, #0]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6911      	ldr	r1, [r2, #16]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	68d2      	ldr	r2, [r2, #12]
 8003b86:	4311      	orrs	r1, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	000186a0 	.word	0x000186a0
 8003be8:	001e847f 	.word	0x001e847f
 8003bec:	003d08ff 	.word	0x003d08ff
 8003bf0:	431bde83 	.word	0x431bde83
 8003bf4:	10624dd3 	.word	0x10624dd3

08003bf8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	461a      	mov	r2, r3
 8003c04:	460b      	mov	r3, r1
 8003c06:	817b      	strh	r3, [r7, #10]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c0c:	f7fe ff42 	bl	8002a94 <HAL_GetTick>
 8003c10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	f040 80e0 	bne.w	8003de0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	2319      	movs	r3, #25
 8003c26:	2201      	movs	r2, #1
 8003c28:	4970      	ldr	r1, [pc, #448]	; (8003dec <HAL_I2C_Master_Transmit+0x1f4>)
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f002 f9ba 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
 8003c38:	e0d3      	b.n	8003de2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_I2C_Master_Transmit+0x50>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e0cc      	b.n	8003de2 <HAL_I2C_Master_Transmit+0x1ea>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d007      	beq.n	8003c6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0201 	orr.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2221      	movs	r2, #33	; 0x21
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	893a      	ldrh	r2, [r7, #8]
 8003c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a50      	ldr	r2, [pc, #320]	; (8003df0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003cae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cb0:	8979      	ldrh	r1, [r7, #10]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	6a3a      	ldr	r2, [r7, #32]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f001 ff7c 	bl	8005bb4 <I2C_MasterRequestWrite>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e08d      	b.n	8003de2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003cdc:	e066      	b.n	8003dac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	6a39      	ldr	r1, [r7, #32]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f002 fa34 	bl	8006150 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d107      	bne.n	8003d06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e06b      	b.n	8003de2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	781a      	ldrb	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d11b      	bne.n	8003d80 <HAL_I2C_Master_Transmit+0x188>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d017      	beq.n	8003d80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	781a      	ldrb	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	6a39      	ldr	r1, [r7, #32]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f002 fa24 	bl	80061d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00d      	beq.n	8003dac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d107      	bne.n	8003da8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e01a      	b.n	8003de2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d194      	bne.n	8003cde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	00100002 	.word	0x00100002
 8003df0:	ffff0000 	.word	0xffff0000

08003df4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08c      	sub	sp, #48	; 0x30
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	460b      	mov	r3, r1
 8003e02:	817b      	strh	r3, [r7, #10]
 8003e04:	4613      	mov	r3, r2
 8003e06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e08:	f7fe fe44 	bl	8002a94 <HAL_GetTick>
 8003e0c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	f040 820b 	bne.w	8004232 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	2319      	movs	r3, #25
 8003e22:	2201      	movs	r2, #1
 8003e24:	497c      	ldr	r1, [pc, #496]	; (8004018 <HAL_I2C_Master_Receive+0x224>)
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f002 f8bc 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
 8003e34:	e1fe      	b.n	8004234 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_I2C_Master_Receive+0x50>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e1f7      	b.n	8004234 <HAL_I2C_Master_Receive+0x440>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d007      	beq.n	8003e6a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0201 	orr.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2222      	movs	r2, #34	; 0x22
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2210      	movs	r2, #16
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	893a      	ldrh	r2, [r7, #8]
 8003e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a5c      	ldr	r2, [pc, #368]	; (800401c <HAL_I2C_Master_Receive+0x228>)
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003eac:	8979      	ldrh	r1, [r7, #10]
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f001 ff00 	bl	8005cb8 <I2C_MasterRequestRead>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e1b8      	b.n	8004234 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d113      	bne.n	8003ef2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	623b      	str	r3, [r7, #32]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	623b      	str	r3, [r7, #32]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	623b      	str	r3, [r7, #32]
 8003ede:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e18c      	b.n	800420c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d11b      	bne.n	8003f32 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	e16c      	b.n	800420c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d11b      	bne.n	8003f72 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	e14c      	b.n	800420c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f98:	e138      	b.n	800420c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	f200 80f1 	bhi.w	8004186 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d123      	bne.n	8003ff4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f002 f981 	bl	80062b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e139      	b.n	8004234 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ff2:	e10b      	b.n	800420c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d14e      	bne.n	800409a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	2200      	movs	r2, #0
 8004004:	4906      	ldr	r1, [pc, #24]	; (8004020 <HAL_I2C_Master_Receive+0x22c>)
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f001 ffcc 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d008      	beq.n	8004024 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e10e      	b.n	8004234 <HAL_I2C_Master_Receive+0x440>
 8004016:	bf00      	nop
 8004018:	00100002 	.word	0x00100002
 800401c:	ffff0000 	.word	0xffff0000
 8004020:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004098:	e0b8      	b.n	800420c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a0:	2200      	movs	r2, #0
 80040a2:	4966      	ldr	r1, [pc, #408]	; (800423c <HAL_I2C_Master_Receive+0x448>)
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f001 ff7d 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0bf      	b.n	8004234 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	2200      	movs	r2, #0
 80040fe:	494f      	ldr	r1, [pc, #316]	; (800423c <HAL_I2C_Master_Receive+0x448>)
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f001 ff4f 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e091      	b.n	8004234 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004184:	e042      	b.n	800420c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f002 f894 	bl	80062b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e04c      	b.n	8004234 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d118      	bne.n	800420c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004210:	2b00      	cmp	r3, #0
 8004212:	f47f aec2 	bne.w	8003f9a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	e000      	b.n	8004234 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004232:	2302      	movs	r3, #2
  }
}
 8004234:	4618      	mov	r0, r3
 8004236:	3728      	adds	r7, #40	; 0x28
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	00010004 	.word	0x00010004

08004240 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	4613      	mov	r3, r2
 800424e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800425c:	2b28      	cmp	r3, #40	; 0x28
 800425e:	d15b      	bne.n	8004318 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e054      	b.n	800431a <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800427a:	2302      	movs	r3, #2
 800427c:	e04d      	b.n	800431a <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b01      	cmp	r3, #1
 8004292:	d007      	beq.n	80042a4 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2229      	movs	r2, #41	; 0x29
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004312:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	e000      	b.n	800431a <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8004318:	2302      	movs	r3, #2
  }
}
 800431a:	4618      	mov	r0, r3
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004326:	b480      	push	{r7}
 8004328:	b087      	sub	sp, #28
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	4613      	mov	r3, r2
 8004334:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004342:	2b28      	cmp	r3, #40	; 0x28
 8004344:	d15b      	bne.n	80043fe <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e054      	b.n	8004400 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8004360:	2302      	movs	r3, #2
 8004362:	e04d      	b.n	8004400 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b01      	cmp	r3, #1
 8004378:	d007      	beq.n	800438a <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0201 	orr.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004398:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	222a      	movs	r2, #42	; 0x2a
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	88fa      	ldrh	r2, [r7, #6]
 80043ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80043f8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e000      	b.n	8004400 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
  }
}
 8004400:	4618      	mov	r0, r3
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b20      	cmp	r3, #32
 800441e:	d124      	bne.n	800446a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2228      	movs	r2, #40	; 0x28
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b01      	cmp	r3, #1
 8004434:	d007      	beq.n	8004446 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004454:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004464:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	e000      	b.n	800446c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800446a:	2302      	movs	r3, #2
  }
}
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004498:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2b10      	cmp	r3, #16
 80044a6:	d003      	beq.n	80044b0 <HAL_I2C_EV_IRQHandler+0x38>
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	f040 80b1 	bne.w	8004612 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10d      	bne.n	80044e6 <HAL_I2C_EV_IRQHandler+0x6e>
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80044d0:	d003      	beq.n	80044da <HAL_I2C_EV_IRQHandler+0x62>
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80044d8:	d101      	bne.n	80044de <HAL_I2C_EV_IRQHandler+0x66>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <HAL_I2C_EV_IRQHandler+0x68>
 80044de:	2300      	movs	r3, #0
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	f000 8114 	beq.w	800470e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00b      	beq.n	8004508 <HAL_I2C_EV_IRQHandler+0x90>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d006      	beq.n	8004508 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f001 ff61 	bl	80063c2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fd3e 	bl	8004f82 <I2C_Master_SB>
 8004506:	e083      	b.n	8004610 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_I2C_EV_IRQHandler+0xac>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fdb6 	bl	800508e <I2C_Master_ADD10>
 8004522:	e075      	b.n	8004610 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d008      	beq.n	8004540 <HAL_I2C_EV_IRQHandler+0xc8>
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fdd2 	bl	80050e2 <I2C_Master_ADDR>
 800453e:	e067      	b.n	8004610 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d036      	beq.n	80045b8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004558:	f000 80db 	beq.w	8004712 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00d      	beq.n	8004582 <HAL_I2C_EV_IRQHandler+0x10a>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	2b00      	cmp	r3, #0
 800456e:	d008      	beq.n	8004582 <HAL_I2C_EV_IRQHandler+0x10a>
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f9b6 	bl	80048ec <I2C_MasterTransmit_TXE>
 8004580:	e046      	b.n	8004610 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80c2 	beq.w	8004712 <HAL_I2C_EV_IRQHandler+0x29a>
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80bc 	beq.w	8004712 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800459a:	7bbb      	ldrb	r3, [r7, #14]
 800459c:	2b21      	cmp	r3, #33	; 0x21
 800459e:	d103      	bne.n	80045a8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fa3f 	bl	8004a24 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045a6:	e0b4      	b.n	8004712 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	f040 80b1 	bne.w	8004712 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 faad 	bl	8004b10 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045b6:	e0ac      	b.n	8004712 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c6:	f000 80a4 	beq.w	8004712 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00d      	beq.n	80045f0 <HAL_I2C_EV_IRQHandler+0x178>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d008      	beq.n	80045f0 <HAL_I2C_EV_IRQHandler+0x178>
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d103      	bne.n	80045f0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fb25 	bl	8004c38 <I2C_MasterReceive_RXNE>
 80045ee:	e00f      	b.n	8004610 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 808b 	beq.w	8004712 <HAL_I2C_EV_IRQHandler+0x29a>
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8085 	beq.w	8004712 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fbd0 	bl	8004dae <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800460e:	e080      	b.n	8004712 <HAL_I2C_EV_IRQHandler+0x29a>
 8004610:	e07f      	b.n	8004712 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d004      	beq.n	8004624 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	e007      	b.n	8004634 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d011      	beq.n	8004662 <HAL_I2C_EV_IRQHandler+0x1ea>
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004658:	69b9      	ldr	r1, [r7, #24]
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 ff90 	bl	8005580 <I2C_Slave_ADDR>
 8004660:	e05a      	b.n	8004718 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_I2C_EV_IRQHandler+0x206>
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 ffca 	bl	8005610 <I2C_Slave_STOPF>
 800467c:	e04c      	b.n	8004718 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800467e:	7bbb      	ldrb	r3, [r7, #14]
 8004680:	2b21      	cmp	r3, #33	; 0x21
 8004682:	d002      	beq.n	800468a <HAL_I2C_EV_IRQHandler+0x212>
 8004684:	7bbb      	ldrb	r3, [r7, #14]
 8004686:	2b29      	cmp	r3, #41	; 0x29
 8004688:	d120      	bne.n	80046cc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <HAL_I2C_EV_IRQHandler+0x238>
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_I2C_EV_IRQHandler+0x238>
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d103      	bne.n	80046b0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 feab 	bl	8005404 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046ae:	e032      	b.n	8004716 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d02d      	beq.n	8004716 <HAL_I2C_EV_IRQHandler+0x29e>
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d028      	beq.n	8004716 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 feda 	bl	800547e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046ca:	e024      	b.n	8004716 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00d      	beq.n	80046f2 <HAL_I2C_EV_IRQHandler+0x27a>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_I2C_EV_IRQHandler+0x27a>
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fee8 	bl	80054c0 <I2C_SlaveReceive_RXNE>
 80046f0:	e012      	b.n	8004718 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00d      	beq.n	8004718 <HAL_I2C_EV_IRQHandler+0x2a0>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004702:	2b00      	cmp	r3, #0
 8004704:	d008      	beq.n	8004718 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 ff18 	bl	800553c <I2C_SlaveReceive_BTF>
 800470c:	e004      	b.n	8004718 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800470e:	bf00      	nop
 8004710:	e002      	b.n	8004718 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004712:	bf00      	nop
 8004714:	e000      	b.n	8004718 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004716:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b08a      	sub	sp, #40	; 0x28
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004736:	2300      	movs	r3, #0
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004740:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00d      	beq.n	8004768 <HAL_I2C_ER_IRQHandler+0x4a>
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d008      	beq.n	8004768 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004766:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <HAL_I2C_ER_IRQHandler+0x70>
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	f043 0302 	orr.w	r3, r3, #2
 8004782:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800478c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d03e      	beq.n	8004816 <HAL_I2C_ER_IRQHandler+0xf8>
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d039      	beq.n	8004816 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80047a2:	7efb      	ldrb	r3, [r7, #27]
 80047a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80047bc:	7ebb      	ldrb	r3, [r7, #26]
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d112      	bne.n	80047e8 <HAL_I2C_ER_IRQHandler+0xca>
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10f      	bne.n	80047e8 <HAL_I2C_ER_IRQHandler+0xca>
 80047c8:	7cfb      	ldrb	r3, [r7, #19]
 80047ca:	2b21      	cmp	r3, #33	; 0x21
 80047cc:	d008      	beq.n	80047e0 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80047ce:	7cfb      	ldrb	r3, [r7, #19]
 80047d0:	2b29      	cmp	r3, #41	; 0x29
 80047d2:	d005      	beq.n	80047e0 <HAL_I2C_ER_IRQHandler+0xc2>
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	2b28      	cmp	r3, #40	; 0x28
 80047d8:	d106      	bne.n	80047e8 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b21      	cmp	r3, #33	; 0x21
 80047de:	d103      	bne.n	80047e8 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f001 f845 	bl	8005870 <I2C_Slave_AF>
 80047e6:	e016      	b.n	8004816 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	f043 0304 	orr.w	r3, r3, #4
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047fa:	7efb      	ldrb	r3, [r7, #27]
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d002      	beq.n	8004806 <HAL_I2C_ER_IRQHandler+0xe8>
 8004800:	7efb      	ldrb	r3, [r7, #27]
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d107      	bne.n	8004816 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004814:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00d      	beq.n	800483c <HAL_I2C_ER_IRQHandler+0x11e>
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	f043 0308 	orr.w	r3, r3, #8
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800483a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 f87e 	bl	8005950 <I2C_ITError>
  }
}
 8004854:	bf00      	nop
 8004856:	3728      	adds	r7, #40	; 0x28
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004902:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490e:	2b00      	cmp	r3, #0
 8004910:	d150      	bne.n	80049b4 <I2C_MasterTransmit_TXE+0xc8>
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b21      	cmp	r3, #33	; 0x21
 8004916:	d14d      	bne.n	80049b4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b08      	cmp	r3, #8
 800491c:	d01d      	beq.n	800495a <I2C_MasterTransmit_TXE+0x6e>
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b20      	cmp	r3, #32
 8004922:	d01a      	beq.n	800495a <I2C_MasterTransmit_TXE+0x6e>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800492a:	d016      	beq.n	800495a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800493a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2211      	movs	r2, #17
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff ff82 	bl	800485c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004958:	e060      	b.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004968:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004978:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	d107      	bne.n	80049a4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff ff7b 	bl	8004898 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049a2:	e03b      	b.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff ff55 	bl	800485c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049b2:	e033      	b.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b21      	cmp	r3, #33	; 0x21
 80049b8:	d005      	beq.n	80049c6 <I2C_MasterTransmit_TXE+0xda>
 80049ba:	7bbb      	ldrb	r3, [r7, #14]
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d12d      	bne.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b22      	cmp	r3, #34	; 0x22
 80049c4:	d12a      	bne.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d108      	bne.n	80049e2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049de:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80049e0:	e01c      	b.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b40      	cmp	r3, #64	; 0x40
 80049ec:	d103      	bne.n	80049f6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f88e 	bl	8004b10 <I2C_MemoryTransmit_TXE_BTF>
}
 80049f4:	e012      	b.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	781a      	ldrb	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a1a:	e7ff      	b.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
 8004a1c:	bf00      	nop
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b21      	cmp	r3, #33	; 0x21
 8004a3c:	d164      	bne.n	8004b08 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d012      	beq.n	8004a6e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	781a      	ldrb	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004a6c:	e04c      	b.n	8004b08 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d01d      	beq.n	8004ab0 <I2C_MasterTransmit_BTF+0x8c>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d01a      	beq.n	8004ab0 <I2C_MasterTransmit_BTF+0x8c>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a80:	d016      	beq.n	8004ab0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a90:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2211      	movs	r2, #17
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fed7 	bl	800485c <HAL_I2C_MasterTxCpltCallback>
}
 8004aae:	e02b      	b.n	8004b08 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004abe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ace:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	d107      	bne.n	8004afa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fed0 	bl	8004898 <HAL_I2C_MemTxCpltCallback>
}
 8004af8:	e006      	b.n	8004b08 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff feaa 	bl	800485c <HAL_I2C_MasterTxCpltCallback>
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d11d      	bne.n	8004b64 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d10b      	bne.n	8004b48 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b40:	1c9a      	adds	r2, r3, #2
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004b46:	e073      	b.n	8004c30 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	121b      	asrs	r3, r3, #8
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b62:	e065      	b.n	8004c30 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d10b      	bne.n	8004b84 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b82:	e055      	b.n	8004c30 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d151      	bne.n	8004c30 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b22      	cmp	r3, #34	; 0x22
 8004b90:	d10d      	bne.n	8004bae <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bac:	e040      	b.n	8004c30 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b21      	cmp	r3, #33	; 0x21
 8004bbc:	d112      	bne.n	8004be4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	781a      	ldrb	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004be2:	e025      	b.n	8004c30 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d120      	bne.n	8004c30 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b21      	cmp	r3, #33	; 0x21
 8004bf2:	d11d      	bne.n	8004c30 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c02:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c12:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff fe34 	bl	8004898 <HAL_I2C_MemTxCpltCallback>
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b22      	cmp	r3, #34	; 0x22
 8004c4a:	f040 80ac 	bne.w	8004da6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d921      	bls.n	8004ca0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	f040 808c 	bne.w	8004da6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004c9e:	e082      	b.n	8004da6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d075      	beq.n	8004d94 <I2C_MasterReceive_RXNE+0x15c>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d002      	beq.n	8004cb4 <I2C_MasterReceive_RXNE+0x7c>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d16f      	bne.n	8004d94 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f001 facd 	bl	8006254 <I2C_WaitOnSTOPRequestThroughIT>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d142      	bne.n	8004d46 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cce:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cde:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b40      	cmp	r3, #64	; 0x40
 8004d18:	d10a      	bne.n	8004d30 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff fdbf 	bl	80048ac <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d2e:	e03a      	b.n	8004da6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2212      	movs	r2, #18
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff fd96 	bl	8004870 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d44:	e02f      	b.n	8004da6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d54:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7fc fe85 	bl	8001a9c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d92:	e008      	b.n	8004da6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da2:	605a      	str	r2, [r3, #4]
}
 8004da4:	e7ff      	b.n	8004da6 <I2C_MasterReceive_RXNE+0x16e>
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d11b      	bne.n	8004dfe <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004dfc:	e0bd      	b.n	8004f7a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d129      	bne.n	8004e5c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e16:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d00a      	beq.n	8004e34 <I2C_MasterReceive_BTF+0x86>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d007      	beq.n	8004e34 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e32:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e5a:	e08e      	b.n	8004f7a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d176      	bne.n	8004f54 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d002      	beq.n	8004e72 <I2C_MasterReceive_BTF+0xc4>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d108      	bne.n	8004e84 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e019      	b.n	8004eb8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d002      	beq.n	8004e90 <I2C_MasterReceive_BTF+0xe2>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d108      	bne.n	8004ea2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e00a      	b.n	8004eb8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	d007      	beq.n	8004eb8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f12:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b40      	cmp	r3, #64	; 0x40
 8004f26:	d10a      	bne.n	8004f3e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff fcb8 	bl	80048ac <HAL_I2C_MemRxCpltCallback>
}
 8004f3c:	e01d      	b.n	8004f7a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2212      	movs	r2, #18
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff fc8f 	bl	8004870 <HAL_I2C_MasterRxCpltCallback>
}
 8004f52:	e012      	b.n	8004f7a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b40      	cmp	r3, #64	; 0x40
 8004f94:	d117      	bne.n	8004fc6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fae:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004fb0:	e067      	b.n	8005082 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	f043 0301 	orr.w	r3, r3, #1
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	611a      	str	r2, [r3, #16]
}
 8004fc4:	e05d      	b.n	8005082 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fce:	d133      	bne.n	8005038 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b21      	cmp	r3, #33	; 0x21
 8004fda:	d109      	bne.n	8004ff0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fec:	611a      	str	r2, [r3, #16]
 8004fee:	e008      	b.n	8005002 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005006:	2b00      	cmp	r3, #0
 8005008:	d004      	beq.n	8005014 <I2C_Master_SB+0x92>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d108      	bne.n	8005026 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	d032      	beq.n	8005082 <I2C_Master_SB+0x100>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d02d      	beq.n	8005082 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005034:	605a      	str	r2, [r3, #4]
}
 8005036:	e024      	b.n	8005082 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10e      	bne.n	800505e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005044:	b29b      	uxth	r3, r3
 8005046:	11db      	asrs	r3, r3, #7
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f003 0306 	and.w	r3, r3, #6
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f063 030f 	orn	r3, r3, #15
 8005054:	b2da      	uxtb	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	611a      	str	r2, [r3, #16]
}
 800505c:	e011      	b.n	8005082 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005062:	2b01      	cmp	r3, #1
 8005064:	d10d      	bne.n	8005082 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506a:	b29b      	uxth	r3, r3
 800506c:	11db      	asrs	r3, r3, #7
 800506e:	b2db      	uxtb	r3, r3
 8005070:	f003 0306 	and.w	r3, r3, #6
 8005074:	b2db      	uxtb	r3, r3
 8005076:	f063 030e 	orn	r3, r3, #14
 800507a:	b2da      	uxtb	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	611a      	str	r2, [r3, #16]
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	b2da      	uxtb	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d004      	beq.n	80050b4 <I2C_Master_ADD10+0x26>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d108      	bne.n	80050c6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00c      	beq.n	80050d6 <I2C_Master_ADD10+0x48>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d4:	605a      	str	r2, [r3, #4]
  }
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b091      	sub	sp, #68	; 0x44
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b22      	cmp	r3, #34	; 0x22
 800510a:	f040 8169 	bne.w	80053e0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10f      	bne.n	8005136 <I2C_Master_ADDR+0x54>
 8005116:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800511a:	2b40      	cmp	r3, #64	; 0x40
 800511c:	d10b      	bne.n	8005136 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511e:	2300      	movs	r3, #0
 8005120:	633b      	str	r3, [r7, #48]	; 0x30
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	633b      	str	r3, [r7, #48]	; 0x30
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	633b      	str	r3, [r7, #48]	; 0x30
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	e160      	b.n	80053f8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800513a:	2b00      	cmp	r3, #0
 800513c:	d11d      	bne.n	800517a <I2C_Master_ADDR+0x98>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005146:	d118      	bne.n	800517a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005148:	2300      	movs	r3, #0
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800516c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	651a      	str	r2, [r3, #80]	; 0x50
 8005178:	e13e      	b.n	80053f8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d113      	bne.n	80051ac <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005184:	2300      	movs	r3, #0
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	e115      	b.n	80053d8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	f040 808a 	bne.w	80052cc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80051b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051be:	d137      	bne.n	8005230 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ce:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051de:	d113      	bne.n	8005208 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ee:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f0:	2300      	movs	r3, #0
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	e0e7      	b.n	80053d8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005208:	2300      	movs	r3, #0
 800520a:	623b      	str	r3, [r7, #32]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	623b      	str	r3, [r7, #32]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	623b      	str	r3, [r7, #32]
 800521c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e0d3      	b.n	80053d8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	2b08      	cmp	r3, #8
 8005234:	d02e      	beq.n	8005294 <I2C_Master_ADDR+0x1b2>
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	2b20      	cmp	r3, #32
 800523a:	d02b      	beq.n	8005294 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800523c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523e:	2b12      	cmp	r3, #18
 8005240:	d102      	bne.n	8005248 <I2C_Master_ADDR+0x166>
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	2b01      	cmp	r3, #1
 8005246:	d125      	bne.n	8005294 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	2b04      	cmp	r3, #4
 800524c:	d00e      	beq.n	800526c <I2C_Master_ADDR+0x18a>
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	2b02      	cmp	r3, #2
 8005252:	d00b      	beq.n	800526c <I2C_Master_ADDR+0x18a>
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	2b10      	cmp	r3, #16
 8005258:	d008      	beq.n	800526c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	e007      	b.n	800527c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800527a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527c:	2300      	movs	r3, #0
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	e0a1      	b.n	80053d8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052a4:	2300      	movs	r3, #0
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	61bb      	str	r3, [r7, #24]
 80052b8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e085      	b.n	80053d8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d14d      	bne.n	8005372 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d016      	beq.n	800530a <I2C_Master_ADDR+0x228>
 80052dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d013      	beq.n	800530a <I2C_Master_ADDR+0x228>
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d010      	beq.n	800530a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e007      	b.n	800531a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005318:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005328:	d117      	bne.n	800535a <I2C_Master_ADDR+0x278>
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005330:	d00b      	beq.n	800534a <I2C_Master_ADDR+0x268>
 8005332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005334:	2b01      	cmp	r3, #1
 8005336:	d008      	beq.n	800534a <I2C_Master_ADDR+0x268>
 8005338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533a:	2b08      	cmp	r3, #8
 800533c:	d005      	beq.n	800534a <I2C_Master_ADDR+0x268>
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	2b10      	cmp	r3, #16
 8005342:	d002      	beq.n	800534a <I2C_Master_ADDR+0x268>
 8005344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005346:	2b20      	cmp	r3, #32
 8005348:	d107      	bne.n	800535a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005358:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	e032      	b.n	80053d8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005380:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800538c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005390:	d117      	bne.n	80053c2 <I2C_Master_ADDR+0x2e0>
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005394:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005398:	d00b      	beq.n	80053b2 <I2C_Master_ADDR+0x2d0>
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	2b01      	cmp	r3, #1
 800539e:	d008      	beq.n	80053b2 <I2C_Master_ADDR+0x2d0>
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d005      	beq.n	80053b2 <I2C_Master_ADDR+0x2d0>
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	d002      	beq.n	80053b2 <I2C_Master_ADDR+0x2d0>
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d107      	bne.n	80053c2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c2:	2300      	movs	r3, #0
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80053de:	e00b      	b.n	80053f8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
}
 80053f6:	e7ff      	b.n	80053f8 <I2C_Master_ADDR+0x316>
 80053f8:	bf00      	nop
 80053fa:	3744      	adds	r7, #68	; 0x44
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005412:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d02b      	beq.n	8005476 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	781a      	ldrb	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d114      	bne.n	8005476 <I2C_SlaveTransmit_TXE+0x72>
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b29      	cmp	r3, #41	; 0x29
 8005450:	d111      	bne.n	8005476 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005460:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2221      	movs	r2, #33	; 0x21
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2228      	movs	r2, #40	; 0x28
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff fa07 	bl	8004884 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005476:	bf00      	nop
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d011      	beq.n	80054b4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	781a      	ldrb	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d02c      	beq.n	8005534 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d114      	bne.n	8005534 <I2C_SlaveReceive_RXNE+0x74>
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	2b2a      	cmp	r3, #42	; 0x2a
 800550e:	d111      	bne.n	8005534 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2222      	movs	r2, #34	; 0x22
 8005524:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2228      	movs	r2, #40	; 0x28
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fc fa78 	bl	8001a24 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005534:	bf00      	nop
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d012      	beq.n	8005574 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800558a:	2300      	movs	r3, #0
 800558c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800559a:	2b28      	cmp	r3, #40	; 0x28
 800559c:	d125      	bne.n	80055ea <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ac:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d103      	bne.n	80055ce <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	81bb      	strh	r3, [r7, #12]
 80055cc:	e002      	b.n	80055d4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80055dc:	89ba      	ldrh	r2, [r7, #12]
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	4619      	mov	r1, r3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fc f9e8 	bl	80019b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80055e8:	e00e      	b.n	8005608 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ea:	2300      	movs	r3, #0
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005608:	bf00      	nop
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800562e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005630:	2300      	movs	r3, #0
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	60bb      	str	r3, [r7, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800565c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566c:	d172      	bne.n	8005754 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800566e:	7bfb      	ldrb	r3, [r7, #15]
 8005670:	2b22      	cmp	r3, #34	; 0x22
 8005672:	d002      	beq.n	800567a <I2C_Slave_STOPF+0x6a>
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b2a      	cmp	r3, #42	; 0x2a
 8005678:	d135      	bne.n	80056e6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d005      	beq.n	800569e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	f043 0204 	orr.w	r2, r3, #4
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fd ff8b 	bl	80035ce <HAL_DMA_GetState>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d049      	beq.n	8005752 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	4a69      	ldr	r2, [pc, #420]	; (8005868 <I2C_Slave_STOPF+0x258>)
 80056c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fd ff5d 	bl	800358a <HAL_DMA_Abort_IT>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d03d      	beq.n	8005752 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056e4:	e035      	b.n	8005752 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d005      	beq.n	800570a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f043 0204 	orr.w	r2, r3, #4
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005718:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571e:	4618      	mov	r0, r3
 8005720:	f7fd ff55 	bl	80035ce <HAL_DMA_GetState>
 8005724:	4603      	mov	r3, r0
 8005726:	2b01      	cmp	r3, #1
 8005728:	d014      	beq.n	8005754 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572e:	4a4e      	ldr	r2, [pc, #312]	; (8005868 <I2C_Slave_STOPF+0x258>)
 8005730:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005736:	4618      	mov	r0, r3
 8005738:	f7fd ff27 	bl	800358a <HAL_DMA_Abort_IT>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d008      	beq.n	8005754 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800574c:	4610      	mov	r0, r2
 800574e:	4798      	blx	r3
 8005750:	e000      	b.n	8005754 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005752:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d03e      	beq.n	80057dc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b04      	cmp	r3, #4
 800576a:	d112      	bne.n	8005792 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579c:	2b40      	cmp	r3, #64	; 0x40
 800579e:	d112      	bne.n	80057c6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d005      	beq.n	80057dc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	f043 0204 	orr.w	r2, r3, #4
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f8b3 	bl	8005950 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80057ea:	e039      	b.n	8005860 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2b2a      	cmp	r3, #42	; 0x2a
 80057f0:	d109      	bne.n	8005806 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2228      	movs	r2, #40	; 0x28
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7fc f90f 	bl	8001a24 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b28      	cmp	r3, #40	; 0x28
 8005810:	d111      	bne.n	8005836 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a15      	ldr	r2, [pc, #84]	; (800586c <I2C_Slave_STOPF+0x25c>)
 8005816:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fc f8b0 	bl	8001994 <HAL_I2C_ListenCpltCallback>
}
 8005834:	e014      	b.n	8005860 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	2b22      	cmp	r3, #34	; 0x22
 800583c:	d002      	beq.n	8005844 <I2C_Slave_STOPF+0x234>
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	2b22      	cmp	r3, #34	; 0x22
 8005842:	d10d      	bne.n	8005860 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc f8e2 	bl	8001a24 <HAL_I2C_SlaveRxCpltCallback>
}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	08005e55 	.word	0x08005e55
 800586c:	ffff0000 	.word	0xffff0000

08005870 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b08      	cmp	r3, #8
 800588a:	d002      	beq.n	8005892 <I2C_Slave_AF+0x22>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b20      	cmp	r3, #32
 8005890:	d129      	bne.n	80058e6 <I2C_Slave_AF+0x76>
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	2b28      	cmp	r3, #40	; 0x28
 8005896:	d126      	bne.n	80058e6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a2c      	ldr	r2, [pc, #176]	; (800594c <I2C_Slave_AF+0xdc>)
 800589c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058ac:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058b6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fc f858 	bl	8001994 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80058e4:	e02e      	b.n	8005944 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	2b21      	cmp	r3, #33	; 0x21
 80058ea:	d126      	bne.n	800593a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a17      	ldr	r2, [pc, #92]	; (800594c <I2C_Slave_AF+0xdc>)
 80058f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2221      	movs	r2, #33	; 0x21
 80058f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005916:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005920:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005930:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fe ffa6 	bl	8004884 <HAL_I2C_SlaveTxCpltCallback>
}
 8005938:	e004      	b.n	8005944 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005942:	615a      	str	r2, [r3, #20]
}
 8005944:	bf00      	nop
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	ffff0000 	.word	0xffff0000

08005950 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800595e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005966:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005968:	7bbb      	ldrb	r3, [r7, #14]
 800596a:	2b10      	cmp	r3, #16
 800596c:	d002      	beq.n	8005974 <I2C_ITError+0x24>
 800596e:	7bbb      	ldrb	r3, [r7, #14]
 8005970:	2b40      	cmp	r3, #64	; 0x40
 8005972:	d10a      	bne.n	800598a <I2C_ITError+0x3a>
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	2b22      	cmp	r3, #34	; 0x22
 8005978:	d107      	bne.n	800598a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005988:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005990:	2b28      	cmp	r3, #40	; 0x28
 8005992:	d107      	bne.n	80059a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2228      	movs	r2, #40	; 0x28
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059a2:	e015      	b.n	80059d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b2:	d00a      	beq.n	80059ca <I2C_ITError+0x7a>
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	2b60      	cmp	r3, #96	; 0x60
 80059b8:	d007      	beq.n	80059ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059de:	d162      	bne.n	8005aa6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d020      	beq.n	8005a40 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a02:	4a6a      	ldr	r2, [pc, #424]	; (8005bac <I2C_ITError+0x25c>)
 8005a04:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fd fdbd 	bl	800358a <HAL_DMA_Abort_IT>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 8089 	beq.w	8005b2a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0201 	bic.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	4798      	blx	r3
 8005a3e:	e074      	b.n	8005b2a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	4a59      	ldr	r2, [pc, #356]	; (8005bac <I2C_ITError+0x25c>)
 8005a46:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fd fd9c 	bl	800358a <HAL_DMA_Abort_IT>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d068      	beq.n	8005b2a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a62:	2b40      	cmp	r3, #64	; 0x40
 8005a64:	d10b      	bne.n	8005a7e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0201 	bic.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	4798      	blx	r3
 8005aa4:	e041      	b.n	8005b2a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b60      	cmp	r3, #96	; 0x60
 8005ab0:	d125      	bne.n	8005afe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d10b      	bne.n	8005ae6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0201 	bic.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fe fee2 	bl	80048c0 <HAL_I2C_AbortCpltCallback>
 8005afc:	e015      	b.n	8005b2a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	d10b      	bne.n	8005b24 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691a      	ldr	r2, [r3, #16]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7fb ffb9 	bl	8001a9c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10e      	bne.n	8005b58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d109      	bne.n	8005b58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b66:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d113      	bne.n	8005ba4 <I2C_ITError+0x254>
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	2b28      	cmp	r3, #40	; 0x28
 8005b80:	d110      	bne.n	8005ba4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a0a      	ldr	r2, [pc, #40]	; (8005bb0 <I2C_ITError+0x260>)
 8005b86:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb fef8 	bl	8001994 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ba4:	bf00      	nop
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	08005e55 	.word	0x08005e55
 8005bb0:	ffff0000 	.word	0xffff0000

08005bb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	607a      	str	r2, [r7, #4]
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d006      	beq.n	8005bde <I2C_MasterRequestWrite+0x2a>
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d003      	beq.n	8005bde <I2C_MasterRequestWrite+0x2a>
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bdc:	d108      	bne.n	8005bf0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e00b      	b.n	8005c08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf4:	2b12      	cmp	r3, #18
 8005bf6:	d107      	bne.n	8005c08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f9c5 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00d      	beq.n	8005c3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c2e:	d103      	bne.n	8005c38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e035      	b.n	8005ca8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c44:	d108      	bne.n	8005c58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c46:	897b      	ldrh	r3, [r7, #10]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c54:	611a      	str	r2, [r3, #16]
 8005c56:	e01b      	b.n	8005c90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c58:	897b      	ldrh	r3, [r7, #10]
 8005c5a:	11db      	asrs	r3, r3, #7
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	f003 0306 	and.w	r3, r3, #6
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f063 030f 	orn	r3, r3, #15
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	490e      	ldr	r1, [pc, #56]	; (8005cb0 <I2C_MasterRequestWrite+0xfc>)
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 f9eb 	bl	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e010      	b.n	8005ca8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c86:	897b      	ldrh	r3, [r7, #10]
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4907      	ldr	r1, [pc, #28]	; (8005cb4 <I2C_MasterRequestWrite+0x100>)
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 f9db 	bl	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	00010008 	.word	0x00010008
 8005cb4:	00010002 	.word	0x00010002

08005cb8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	607a      	str	r2, [r7, #4]
 8005cc2:	603b      	str	r3, [r7, #0]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cdc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d006      	beq.n	8005cf2 <I2C_MasterRequestRead+0x3a>
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d003      	beq.n	8005cf2 <I2C_MasterRequestRead+0x3a>
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cf0:	d108      	bne.n	8005d04 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	e00b      	b.n	8005d1c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	2b11      	cmp	r3, #17
 8005d0a:	d107      	bne.n	8005d1c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f93b 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00d      	beq.n	8005d50 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d42:	d103      	bne.n	8005d4c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e079      	b.n	8005e44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d58:	d108      	bne.n	8005d6c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d5a:	897b      	ldrh	r3, [r7, #10]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	611a      	str	r2, [r3, #16]
 8005d6a:	e05f      	b.n	8005e2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d6c:	897b      	ldrh	r3, [r7, #10]
 8005d6e:	11db      	asrs	r3, r3, #7
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f003 0306 	and.w	r3, r3, #6
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	f063 030f 	orn	r3, r3, #15
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4930      	ldr	r1, [pc, #192]	; (8005e4c <I2C_MasterRequestRead+0x194>)
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 f961 	bl	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e054      	b.n	8005e44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d9a:	897b      	ldrh	r3, [r7, #10]
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4929      	ldr	r1, [pc, #164]	; (8005e50 <I2C_MasterRequestRead+0x198>)
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 f951 	bl	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e044      	b.n	8005e44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dba:	2300      	movs	r3, #0
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dde:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f8d9 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00d      	beq.n	8005e14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e06:	d103      	bne.n	8005e10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e017      	b.n	8005e44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e14:	897b      	ldrh	r3, [r7, #10]
 8005e16:	11db      	asrs	r3, r3, #7
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	f003 0306 	and.w	r3, r3, #6
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f063 030e 	orn	r3, r3, #14
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	4907      	ldr	r1, [pc, #28]	; (8005e50 <I2C_MasterRequestRead+0x198>)
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f90d 	bl	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	00010008 	.word	0x00010008
 8005e50:	00010002 	.word	0x00010002

08005e54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e6e:	4b4b      	ldr	r3, [pc, #300]	; (8005f9c <I2C_DMAAbort+0x148>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	08db      	lsrs	r3, r3, #3
 8005e74:	4a4a      	ldr	r2, [pc, #296]	; (8005fa0 <I2C_DMAAbort+0x14c>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	0a1a      	lsrs	r2, r3, #8
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	00da      	lsls	r2, r3, #3
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f043 0220 	orr.w	r2, r3, #32
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005e9a:	e00a      	b.n	8005eb2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eb0:	d0ea      	beq.n	8005e88 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ece:	2200      	movs	r2, #0
 8005ed0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	2200      	movs	r2, #0
 8005f06:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b60      	cmp	r3, #96	; 0x60
 8005f22:	d10e      	bne.n	8005f42 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2200      	movs	r2, #0
 8005f38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f3a:	6978      	ldr	r0, [r7, #20]
 8005f3c:	f7fe fcc0 	bl	80048c0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f40:	e027      	b.n	8005f92 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f42:	7cfb      	ldrb	r3, [r7, #19]
 8005f44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f48:	2b28      	cmp	r3, #40	; 0x28
 8005f4a:	d117      	bne.n	8005f7c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2228      	movs	r2, #40	; 0x28
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f7a:	e007      	b.n	8005f8c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f8c:	6978      	ldr	r0, [r7, #20]
 8005f8e:	f7fb fd85 	bl	8001a9c <HAL_I2C_ErrorCallback>
}
 8005f92:	bf00      	nop
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	2000009c 	.word	0x2000009c
 8005fa0:	14f8b589 	.word	0x14f8b589

08005fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fb4:	e025      	b.n	8006002 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fbc:	d021      	beq.n	8006002 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbe:	f7fc fd69 	bl	8002a94 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d116      	bne.n	8006002 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	f043 0220 	orr.w	r2, r3, #32
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e023      	b.n	800604a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	0c1b      	lsrs	r3, r3, #16
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d10d      	bne.n	8006028 <I2C_WaitOnFlagUntilTimeout+0x84>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	43da      	mvns	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4013      	ands	r3, r2
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	bf0c      	ite	eq
 800601e:	2301      	moveq	r3, #1
 8006020:	2300      	movne	r3, #0
 8006022:	b2db      	uxtb	r3, r3
 8006024:	461a      	mov	r2, r3
 8006026:	e00c      	b.n	8006042 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	43da      	mvns	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4013      	ands	r3, r2
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	bf0c      	ite	eq
 800603a:	2301      	moveq	r3, #1
 800603c:	2300      	movne	r3, #0
 800603e:	b2db      	uxtb	r3, r3
 8006040:	461a      	mov	r2, r3
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	429a      	cmp	r2, r3
 8006046:	d0b6      	beq.n	8005fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006060:	e051      	b.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800606c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006070:	d123      	bne.n	80060ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006080:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800608a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f043 0204 	orr.w	r2, r3, #4
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e046      	b.n	8006148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060c0:	d021      	beq.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c2:	f7fc fce7 	bl	8002a94 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d302      	bcc.n	80060d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d116      	bne.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f043 0220 	orr.w	r2, r3, #32
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e020      	b.n	8006148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	0c1b      	lsrs	r3, r3, #16
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	d10c      	bne.n	800612a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	43da      	mvns	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4013      	ands	r3, r2
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf14      	ite	ne
 8006122:	2301      	movne	r3, #1
 8006124:	2300      	moveq	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	e00b      	b.n	8006142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	43da      	mvns	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	4013      	ands	r3, r2
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	bf14      	ite	ne
 800613c:	2301      	movne	r3, #1
 800613e:	2300      	moveq	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d18d      	bne.n	8006062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800615c:	e02d      	b.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f900 	bl	8006364 <I2C_IsAcknowledgeFailed>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e02d      	b.n	80061ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006174:	d021      	beq.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006176:	f7fc fc8d 	bl	8002a94 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	429a      	cmp	r2, r3
 8006184:	d302      	bcc.n	800618c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d116      	bne.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f043 0220 	orr.w	r2, r3, #32
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e007      	b.n	80061ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c4:	2b80      	cmp	r3, #128	; 0x80
 80061c6:	d1ca      	bne.n	800615e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061de:	e02d      	b.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f8bf 	bl	8006364 <I2C_IsAcknowledgeFailed>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e02d      	b.n	800624c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f6:	d021      	beq.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f8:	f7fc fc4c 	bl	8002a94 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	429a      	cmp	r2, r3
 8006206:	d302      	bcc.n	800620e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d116      	bne.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	f043 0220 	orr.w	r2, r3, #32
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e007      	b.n	800624c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b04      	cmp	r3, #4
 8006248:	d1ca      	bne.n	80061e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006260:	4b13      	ldr	r3, [pc, #76]	; (80062b0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	08db      	lsrs	r3, r3, #3
 8006266:	4a13      	ldr	r2, [pc, #76]	; (80062b4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006268:	fba2 2303 	umull	r2, r3, r2, r3
 800626c:	0a1a      	lsrs	r2, r3, #8
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3b01      	subs	r3, #1
 800627a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d107      	bne.n	8006292 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f043 0220 	orr.w	r2, r3, #32
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e008      	b.n	80062a4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800629c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062a0:	d0e9      	beq.n	8006276 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	2000009c 	.word	0x2000009c
 80062b4:	14f8b589 	.word	0x14f8b589

080062b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062c4:	e042      	b.n	800634c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b10      	cmp	r3, #16
 80062d2:	d119      	bne.n	8006308 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0210 	mvn.w	r2, #16
 80062dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2220      	movs	r2, #32
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e029      	b.n	800635c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006308:	f7fc fbc4 	bl	8002a94 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	429a      	cmp	r2, r3
 8006316:	d302      	bcc.n	800631e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d116      	bne.n	800634c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006338:	f043 0220 	orr.w	r2, r3, #32
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e007      	b.n	800635c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d1b5      	bne.n	80062c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637a:	d11b      	bne.n	80063b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006384:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2220      	movs	r2, #32
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	f043 0204 	orr.w	r2, r3, #4
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e000      	b.n	80063b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80063d2:	d103      	bne.n	80063dc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80063da:	e007      	b.n	80063ec <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80063e4:	d102      	bne.n	80063ec <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2208      	movs	r2, #8
 80063ea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e267      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d075      	beq.n	8006502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006416:	4b88      	ldr	r3, [pc, #544]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 030c 	and.w	r3, r3, #12
 800641e:	2b04      	cmp	r3, #4
 8006420:	d00c      	beq.n	800643c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006422:	4b85      	ldr	r3, [pc, #532]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800642a:	2b08      	cmp	r3, #8
 800642c:	d112      	bne.n	8006454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800642e:	4b82      	ldr	r3, [pc, #520]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800643a:	d10b      	bne.n	8006454 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800643c:	4b7e      	ldr	r3, [pc, #504]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d05b      	beq.n	8006500 <HAL_RCC_OscConfig+0x108>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d157      	bne.n	8006500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e242      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645c:	d106      	bne.n	800646c <HAL_RCC_OscConfig+0x74>
 800645e:	4b76      	ldr	r3, [pc, #472]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a75      	ldr	r2, [pc, #468]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 8006464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006468:	6013      	str	r3, [r2, #0]
 800646a:	e01d      	b.n	80064a8 <HAL_RCC_OscConfig+0xb0>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006474:	d10c      	bne.n	8006490 <HAL_RCC_OscConfig+0x98>
 8006476:	4b70      	ldr	r3, [pc, #448]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a6f      	ldr	r2, [pc, #444]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 800647c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	4b6d      	ldr	r3, [pc, #436]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a6c      	ldr	r2, [pc, #432]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 8006488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	e00b      	b.n	80064a8 <HAL_RCC_OscConfig+0xb0>
 8006490:	4b69      	ldr	r3, [pc, #420]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a68      	ldr	r2, [pc, #416]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 8006496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	4b66      	ldr	r3, [pc, #408]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a65      	ldr	r2, [pc, #404]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 80064a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d013      	beq.n	80064d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b0:	f7fc faf0 	bl	8002a94 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064b8:	f7fc faec 	bl	8002a94 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b64      	cmp	r3, #100	; 0x64
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e207      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ca:	4b5b      	ldr	r3, [pc, #364]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0f0      	beq.n	80064b8 <HAL_RCC_OscConfig+0xc0>
 80064d6:	e014      	b.n	8006502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d8:	f7fc fadc 	bl	8002a94 <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064e0:	f7fc fad8 	bl	8002a94 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b64      	cmp	r3, #100	; 0x64
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e1f3      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064f2:	4b51      	ldr	r3, [pc, #324]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1f0      	bne.n	80064e0 <HAL_RCC_OscConfig+0xe8>
 80064fe:	e000      	b.n	8006502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d063      	beq.n	80065d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800650e:	4b4a      	ldr	r3, [pc, #296]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f003 030c 	and.w	r3, r3, #12
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00b      	beq.n	8006532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800651a:	4b47      	ldr	r3, [pc, #284]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006522:	2b08      	cmp	r3, #8
 8006524:	d11c      	bne.n	8006560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006526:	4b44      	ldr	r3, [pc, #272]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d116      	bne.n	8006560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006532:	4b41      	ldr	r3, [pc, #260]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d005      	beq.n	800654a <HAL_RCC_OscConfig+0x152>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d001      	beq.n	800654a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e1c7      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800654a:	4b3b      	ldr	r3, [pc, #236]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	4937      	ldr	r1, [pc, #220]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 800655a:	4313      	orrs	r3, r2
 800655c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800655e:	e03a      	b.n	80065d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d020      	beq.n	80065aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006568:	4b34      	ldr	r3, [pc, #208]	; (800663c <HAL_RCC_OscConfig+0x244>)
 800656a:	2201      	movs	r2, #1
 800656c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656e:	f7fc fa91 	bl	8002a94 <HAL_GetTick>
 8006572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006574:	e008      	b.n	8006588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006576:	f7fc fa8d 	bl	8002a94 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e1a8      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006588:	4b2b      	ldr	r3, [pc, #172]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0f0      	beq.n	8006576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006594:	4b28      	ldr	r3, [pc, #160]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	4925      	ldr	r1, [pc, #148]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	600b      	str	r3, [r1, #0]
 80065a8:	e015      	b.n	80065d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065aa:	4b24      	ldr	r3, [pc, #144]	; (800663c <HAL_RCC_OscConfig+0x244>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b0:	f7fc fa70 	bl	8002a94 <HAL_GetTick>
 80065b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065b6:	e008      	b.n	80065ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065b8:	f7fc fa6c 	bl	8002a94 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e187      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ca:	4b1b      	ldr	r3, [pc, #108]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1f0      	bne.n	80065b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0308 	and.w	r3, r3, #8
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d036      	beq.n	8006650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d016      	beq.n	8006618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ea:	4b15      	ldr	r3, [pc, #84]	; (8006640 <HAL_RCC_OscConfig+0x248>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f0:	f7fc fa50 	bl	8002a94 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065f8:	f7fc fa4c 	bl	8002a94 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e167      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800660a:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <HAL_RCC_OscConfig+0x240>)
 800660c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0f0      	beq.n	80065f8 <HAL_RCC_OscConfig+0x200>
 8006616:	e01b      	b.n	8006650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006618:	4b09      	ldr	r3, [pc, #36]	; (8006640 <HAL_RCC_OscConfig+0x248>)
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800661e:	f7fc fa39 	bl	8002a94 <HAL_GetTick>
 8006622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006624:	e00e      	b.n	8006644 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006626:	f7fc fa35 	bl	8002a94 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d907      	bls.n	8006644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e150      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
 8006638:	40023800 	.word	0x40023800
 800663c:	42470000 	.word	0x42470000
 8006640:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006644:	4b88      	ldr	r3, [pc, #544]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1ea      	bne.n	8006626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 8097 	beq.w	800678c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800665e:	2300      	movs	r3, #0
 8006660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006662:	4b81      	ldr	r3, [pc, #516]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10f      	bne.n	800668e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800666e:	2300      	movs	r3, #0
 8006670:	60bb      	str	r3, [r7, #8]
 8006672:	4b7d      	ldr	r3, [pc, #500]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	4a7c      	ldr	r2, [pc, #496]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800667c:	6413      	str	r3, [r2, #64]	; 0x40
 800667e:	4b7a      	ldr	r3, [pc, #488]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006686:	60bb      	str	r3, [r7, #8]
 8006688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800668a:	2301      	movs	r3, #1
 800668c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800668e:	4b77      	ldr	r3, [pc, #476]	; (800686c <HAL_RCC_OscConfig+0x474>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006696:	2b00      	cmp	r3, #0
 8006698:	d118      	bne.n	80066cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800669a:	4b74      	ldr	r3, [pc, #464]	; (800686c <HAL_RCC_OscConfig+0x474>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a73      	ldr	r2, [pc, #460]	; (800686c <HAL_RCC_OscConfig+0x474>)
 80066a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066a6:	f7fc f9f5 	bl	8002a94 <HAL_GetTick>
 80066aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ac:	e008      	b.n	80066c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ae:	f7fc f9f1 	bl	8002a94 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e10c      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066c0:	4b6a      	ldr	r3, [pc, #424]	; (800686c <HAL_RCC_OscConfig+0x474>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0f0      	beq.n	80066ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d106      	bne.n	80066e2 <HAL_RCC_OscConfig+0x2ea>
 80066d4:	4b64      	ldr	r3, [pc, #400]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 80066d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d8:	4a63      	ldr	r2, [pc, #396]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	6713      	str	r3, [r2, #112]	; 0x70
 80066e0:	e01c      	b.n	800671c <HAL_RCC_OscConfig+0x324>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2b05      	cmp	r3, #5
 80066e8:	d10c      	bne.n	8006704 <HAL_RCC_OscConfig+0x30c>
 80066ea:	4b5f      	ldr	r3, [pc, #380]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	4a5e      	ldr	r2, [pc, #376]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 80066f0:	f043 0304 	orr.w	r3, r3, #4
 80066f4:	6713      	str	r3, [r2, #112]	; 0x70
 80066f6:	4b5c      	ldr	r3, [pc, #368]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 80066f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fa:	4a5b      	ldr	r2, [pc, #364]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 80066fc:	f043 0301 	orr.w	r3, r3, #1
 8006700:	6713      	str	r3, [r2, #112]	; 0x70
 8006702:	e00b      	b.n	800671c <HAL_RCC_OscConfig+0x324>
 8006704:	4b58      	ldr	r3, [pc, #352]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006708:	4a57      	ldr	r2, [pc, #348]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 800670a:	f023 0301 	bic.w	r3, r3, #1
 800670e:	6713      	str	r3, [r2, #112]	; 0x70
 8006710:	4b55      	ldr	r3, [pc, #340]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006714:	4a54      	ldr	r2, [pc, #336]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006716:	f023 0304 	bic.w	r3, r3, #4
 800671a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d015      	beq.n	8006750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006724:	f7fc f9b6 	bl	8002a94 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800672a:	e00a      	b.n	8006742 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800672c:	f7fc f9b2 	bl	8002a94 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	f241 3288 	movw	r2, #5000	; 0x1388
 800673a:	4293      	cmp	r3, r2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e0cb      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006742:	4b49      	ldr	r3, [pc, #292]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0ee      	beq.n	800672c <HAL_RCC_OscConfig+0x334>
 800674e:	e014      	b.n	800677a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006750:	f7fc f9a0 	bl	8002a94 <HAL_GetTick>
 8006754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006756:	e00a      	b.n	800676e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006758:	f7fc f99c 	bl	8002a94 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	f241 3288 	movw	r2, #5000	; 0x1388
 8006766:	4293      	cmp	r3, r2
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e0b5      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800676e:	4b3e      	ldr	r3, [pc, #248]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1ee      	bne.n	8006758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d105      	bne.n	800678c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006780:	4b39      	ldr	r3, [pc, #228]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	4a38      	ldr	r2, [pc, #224]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800678a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 80a1 	beq.w	80068d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006796:	4b34      	ldr	r3, [pc, #208]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 030c 	and.w	r3, r3, #12
 800679e:	2b08      	cmp	r3, #8
 80067a0:	d05c      	beq.n	800685c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d141      	bne.n	800682e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067aa:	4b31      	ldr	r3, [pc, #196]	; (8006870 <HAL_RCC_OscConfig+0x478>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b0:	f7fc f970 	bl	8002a94 <HAL_GetTick>
 80067b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b6:	e008      	b.n	80067ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067b8:	f7fc f96c 	bl	8002a94 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e087      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ca:	4b27      	ldr	r3, [pc, #156]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1f0      	bne.n	80067b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69da      	ldr	r2, [r3, #28]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	019b      	lsls	r3, r3, #6
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ec:	085b      	lsrs	r3, r3, #1
 80067ee:	3b01      	subs	r3, #1
 80067f0:	041b      	lsls	r3, r3, #16
 80067f2:	431a      	orrs	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	061b      	lsls	r3, r3, #24
 80067fa:	491b      	ldr	r1, [pc, #108]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006800:	4b1b      	ldr	r3, [pc, #108]	; (8006870 <HAL_RCC_OscConfig+0x478>)
 8006802:	2201      	movs	r2, #1
 8006804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006806:	f7fc f945 	bl	8002a94 <HAL_GetTick>
 800680a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800680c:	e008      	b.n	8006820 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800680e:	f7fc f941 	bl	8002a94 <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	2b02      	cmp	r3, #2
 800681a:	d901      	bls.n	8006820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e05c      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006820:	4b11      	ldr	r3, [pc, #68]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0f0      	beq.n	800680e <HAL_RCC_OscConfig+0x416>
 800682c:	e054      	b.n	80068d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800682e:	4b10      	ldr	r3, [pc, #64]	; (8006870 <HAL_RCC_OscConfig+0x478>)
 8006830:	2200      	movs	r2, #0
 8006832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006834:	f7fc f92e 	bl	8002a94 <HAL_GetTick>
 8006838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800683c:	f7fc f92a 	bl	8002a94 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e045      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800684e:	4b06      	ldr	r3, [pc, #24]	; (8006868 <HAL_RCC_OscConfig+0x470>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1f0      	bne.n	800683c <HAL_RCC_OscConfig+0x444>
 800685a:	e03d      	b.n	80068d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d107      	bne.n	8006874 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e038      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
 8006868:	40023800 	.word	0x40023800
 800686c:	40007000 	.word	0x40007000
 8006870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006874:	4b1b      	ldr	r3, [pc, #108]	; (80068e4 <HAL_RCC_OscConfig+0x4ec>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d028      	beq.n	80068d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800688c:	429a      	cmp	r2, r3
 800688e:	d121      	bne.n	80068d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800689a:	429a      	cmp	r2, r3
 800689c:	d11a      	bne.n	80068d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068a4:	4013      	ands	r3, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d111      	bne.n	80068d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	3b01      	subs	r3, #1
 80068be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d107      	bne.n	80068d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d001      	beq.n	80068d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	40023800 	.word	0x40023800

080068e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e0cc      	b.n	8006a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068fc:	4b68      	ldr	r3, [pc, #416]	; (8006aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	429a      	cmp	r2, r3
 8006908:	d90c      	bls.n	8006924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800690a:	4b65      	ldr	r3, [pc, #404]	; (8006aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006912:	4b63      	ldr	r3, [pc, #396]	; (8006aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	429a      	cmp	r2, r3
 800691e:	d001      	beq.n	8006924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e0b8      	b.n	8006a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d020      	beq.n	8006972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b00      	cmp	r3, #0
 800693a:	d005      	beq.n	8006948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800693c:	4b59      	ldr	r3, [pc, #356]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	4a58      	ldr	r2, [pc, #352]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0308 	and.w	r3, r3, #8
 8006950:	2b00      	cmp	r3, #0
 8006952:	d005      	beq.n	8006960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006954:	4b53      	ldr	r3, [pc, #332]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	4a52      	ldr	r2, [pc, #328]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800695a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800695e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006960:	4b50      	ldr	r3, [pc, #320]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	494d      	ldr	r1, [pc, #308]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800696e:	4313      	orrs	r3, r2
 8006970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d044      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d107      	bne.n	8006996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006986:	4b47      	ldr	r3, [pc, #284]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d119      	bne.n	80069c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e07f      	b.n	8006a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d003      	beq.n	80069a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d107      	bne.n	80069b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069a6:	4b3f      	ldr	r3, [pc, #252]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d109      	bne.n	80069c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e06f      	b.n	8006a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069b6:	4b3b      	ldr	r3, [pc, #236]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e067      	b.n	8006a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069c6:	4b37      	ldr	r3, [pc, #220]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f023 0203 	bic.w	r2, r3, #3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	4934      	ldr	r1, [pc, #208]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069d8:	f7fc f85c 	bl	8002a94 <HAL_GetTick>
 80069dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069de:	e00a      	b.n	80069f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069e0:	f7fc f858 	bl	8002a94 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e04f      	b.n	8006a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f6:	4b2b      	ldr	r3, [pc, #172]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 020c 	and.w	r2, r3, #12
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d1eb      	bne.n	80069e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a08:	4b25      	ldr	r3, [pc, #148]	; (8006aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d20c      	bcs.n	8006a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a16:	4b22      	ldr	r3, [pc, #136]	; (8006aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a1e:	4b20      	ldr	r3, [pc, #128]	; (8006aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d001      	beq.n	8006a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e032      	b.n	8006a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d008      	beq.n	8006a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a3c:	4b19      	ldr	r3, [pc, #100]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	4916      	ldr	r1, [pc, #88]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d009      	beq.n	8006a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a5a:	4b12      	ldr	r3, [pc, #72]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	490e      	ldr	r1, [pc, #56]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a6e:	f000 f821 	bl	8006ab4 <HAL_RCC_GetSysClockFreq>
 8006a72:	4602      	mov	r2, r0
 8006a74:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	091b      	lsrs	r3, r3, #4
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	490a      	ldr	r1, [pc, #40]	; (8006aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a80:	5ccb      	ldrb	r3, [r1, r3]
 8006a82:	fa22 f303 	lsr.w	r3, r2, r3
 8006a86:	4a09      	ldr	r2, [pc, #36]	; (8006aac <HAL_RCC_ClockConfig+0x1c4>)
 8006a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a8a:	4b09      	ldr	r3, [pc, #36]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fb ffbc 	bl	8002a0c <HAL_InitTick>

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40023c00 	.word	0x40023c00
 8006aa4:	40023800 	.word	0x40023800
 8006aa8:	0800b1d0 	.word	0x0800b1d0
 8006aac:	2000009c 	.word	0x2000009c
 8006ab0:	200000a0 	.word	0x200000a0

08006ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ab8:	b090      	sub	sp, #64	; 0x40
 8006aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006acc:	4b59      	ldr	r3, [pc, #356]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f003 030c 	and.w	r3, r3, #12
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d00d      	beq.n	8006af4 <HAL_RCC_GetSysClockFreq+0x40>
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	f200 80a1 	bhi.w	8006c20 <HAL_RCC_GetSysClockFreq+0x16c>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d002      	beq.n	8006ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	d003      	beq.n	8006aee <HAL_RCC_GetSysClockFreq+0x3a>
 8006ae6:	e09b      	b.n	8006c20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ae8:	4b53      	ldr	r3, [pc, #332]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x184>)
 8006aea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006aec:	e09b      	b.n	8006c26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006aee:	4b53      	ldr	r3, [pc, #332]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x188>)
 8006af0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006af2:	e098      	b.n	8006c26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006af4:	4b4f      	ldr	r3, [pc, #316]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006afc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006afe:	4b4d      	ldr	r3, [pc, #308]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d028      	beq.n	8006b5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b0a:	4b4a      	ldr	r3, [pc, #296]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	099b      	lsrs	r3, r3, #6
 8006b10:	2200      	movs	r2, #0
 8006b12:	623b      	str	r3, [r7, #32]
 8006b14:	627a      	str	r2, [r7, #36]	; 0x24
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4b47      	ldr	r3, [pc, #284]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x188>)
 8006b20:	fb03 f201 	mul.w	r2, r3, r1
 8006b24:	2300      	movs	r3, #0
 8006b26:	fb00 f303 	mul.w	r3, r0, r3
 8006b2a:	4413      	add	r3, r2
 8006b2c:	4a43      	ldr	r2, [pc, #268]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x188>)
 8006b2e:	fba0 1202 	umull	r1, r2, r0, r2
 8006b32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b34:	460a      	mov	r2, r1
 8006b36:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b3a:	4413      	add	r3, r2
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b40:	2200      	movs	r2, #0
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	61fa      	str	r2, [r7, #28]
 8006b46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006b4e:	f7fa f8a3 	bl	8000c98 <__aeabi_uldivmod>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4613      	mov	r3, r2
 8006b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b5a:	e053      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b5c:	4b35      	ldr	r3, [pc, #212]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	099b      	lsrs	r3, r3, #6
 8006b62:	2200      	movs	r2, #0
 8006b64:	613b      	str	r3, [r7, #16]
 8006b66:	617a      	str	r2, [r7, #20]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006b6e:	f04f 0b00 	mov.w	fp, #0
 8006b72:	4652      	mov	r2, sl
 8006b74:	465b      	mov	r3, fp
 8006b76:	f04f 0000 	mov.w	r0, #0
 8006b7a:	f04f 0100 	mov.w	r1, #0
 8006b7e:	0159      	lsls	r1, r3, #5
 8006b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b84:	0150      	lsls	r0, r2, #5
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	ebb2 080a 	subs.w	r8, r2, sl
 8006b8e:	eb63 090b 	sbc.w	r9, r3, fp
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	f04f 0300 	mov.w	r3, #0
 8006b9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006b9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006ba2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006ba6:	ebb2 0408 	subs.w	r4, r2, r8
 8006baa:	eb63 0509 	sbc.w	r5, r3, r9
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	00eb      	lsls	r3, r5, #3
 8006bb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bbc:	00e2      	lsls	r2, r4, #3
 8006bbe:	4614      	mov	r4, r2
 8006bc0:	461d      	mov	r5, r3
 8006bc2:	eb14 030a 	adds.w	r3, r4, sl
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	eb45 030b 	adc.w	r3, r5, fp
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bda:	4629      	mov	r1, r5
 8006bdc:	028b      	lsls	r3, r1, #10
 8006bde:	4621      	mov	r1, r4
 8006be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006be4:	4621      	mov	r1, r4
 8006be6:	028a      	lsls	r2, r1, #10
 8006be8:	4610      	mov	r0, r2
 8006bea:	4619      	mov	r1, r3
 8006bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bee:	2200      	movs	r2, #0
 8006bf0:	60bb      	str	r3, [r7, #8]
 8006bf2:	60fa      	str	r2, [r7, #12]
 8006bf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bf8:	f7fa f84e 	bl	8000c98 <__aeabi_uldivmod>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4613      	mov	r3, r2
 8006c02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c04:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	0c1b      	lsrs	r3, r3, #16
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	3301      	adds	r3, #1
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006c14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006c1e:	e002      	b.n	8006c26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c20:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x184>)
 8006c22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3740      	adds	r7, #64	; 0x40
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c32:	bf00      	nop
 8006c34:	40023800 	.word	0x40023800
 8006c38:	00f42400 	.word	0x00f42400
 8006c3c:	017d7840 	.word	0x017d7840

08006c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c44:	4b03      	ldr	r3, [pc, #12]	; (8006c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c46:	681b      	ldr	r3, [r3, #0]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	2000009c 	.word	0x2000009c

08006c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c5c:	f7ff fff0 	bl	8006c40 <HAL_RCC_GetHCLKFreq>
 8006c60:	4602      	mov	r2, r0
 8006c62:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	0a9b      	lsrs	r3, r3, #10
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	4903      	ldr	r1, [pc, #12]	; (8006c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c6e:	5ccb      	ldrb	r3, [r1, r3]
 8006c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	40023800 	.word	0x40023800
 8006c7c:	0800b1e0 	.word	0x0800b1e0

08006c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c84:	f7ff ffdc 	bl	8006c40 <HAL_RCC_GetHCLKFreq>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	0b5b      	lsrs	r3, r3, #13
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	4903      	ldr	r1, [pc, #12]	; (8006ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c96:	5ccb      	ldrb	r3, [r1, r3]
 8006c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	40023800 	.word	0x40023800
 8006ca4:	0800b1e0 	.word	0x0800b1e0

08006ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e041      	b.n	8006d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fb fca2 	bl	8002618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	f000 ff14 	bl	8007b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d001      	beq.n	8006d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e044      	b.n	8006dea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2202      	movs	r2, #2
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0201 	orr.w	r2, r2, #1
 8006d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a1e      	ldr	r2, [pc, #120]	; (8006df8 <HAL_TIM_Base_Start_IT+0xb0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d018      	beq.n	8006db4 <HAL_TIM_Base_Start_IT+0x6c>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d8a:	d013      	beq.n	8006db4 <HAL_TIM_Base_Start_IT+0x6c>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a1a      	ldr	r2, [pc, #104]	; (8006dfc <HAL_TIM_Base_Start_IT+0xb4>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00e      	beq.n	8006db4 <HAL_TIM_Base_Start_IT+0x6c>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a19      	ldr	r2, [pc, #100]	; (8006e00 <HAL_TIM_Base_Start_IT+0xb8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d009      	beq.n	8006db4 <HAL_TIM_Base_Start_IT+0x6c>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a17      	ldr	r2, [pc, #92]	; (8006e04 <HAL_TIM_Base_Start_IT+0xbc>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d004      	beq.n	8006db4 <HAL_TIM_Base_Start_IT+0x6c>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a16      	ldr	r2, [pc, #88]	; (8006e08 <HAL_TIM_Base_Start_IT+0xc0>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d111      	bne.n	8006dd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b06      	cmp	r3, #6
 8006dc4:	d010      	beq.n	8006de8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 0201 	orr.w	r2, r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd6:	e007      	b.n	8006de8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0201 	orr.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	40010000 	.word	0x40010000
 8006dfc:	40000400 	.word	0x40000400
 8006e00:	40000800 	.word	0x40000800
 8006e04:	40000c00 	.word	0x40000c00
 8006e08:	40014000 	.word	0x40014000

08006e0c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0201 	bic.w	r2, r2, #1
 8006e22:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6a1a      	ldr	r2, [r3, #32]
 8006e2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10f      	bne.n	8006e54 <HAL_TIM_Base_Stop_IT+0x48>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6a1a      	ldr	r2, [r3, #32]
 8006e3a:	f240 4344 	movw	r3, #1092	; 0x444
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d107      	bne.n	8006e54 <HAL_TIM_Base_Stop_IT+0x48>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0201 	bic.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e041      	b.n	8006f00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7fb fc47 	bl	8002724 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2202      	movs	r2, #2
 8006e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f000 fe33 	bl	8007b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d109      	bne.n	8006f2c <HAL_TIM_PWM_Start+0x24>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	bf14      	ite	ne
 8006f24:	2301      	movne	r3, #1
 8006f26:	2300      	moveq	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	e022      	b.n	8006f72 <HAL_TIM_PWM_Start+0x6a>
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	d109      	bne.n	8006f46 <HAL_TIM_PWM_Start+0x3e>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	bf14      	ite	ne
 8006f3e:	2301      	movne	r3, #1
 8006f40:	2300      	moveq	r3, #0
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	e015      	b.n	8006f72 <HAL_TIM_PWM_Start+0x6a>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b08      	cmp	r3, #8
 8006f4a:	d109      	bne.n	8006f60 <HAL_TIM_PWM_Start+0x58>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	bf14      	ite	ne
 8006f58:	2301      	movne	r3, #1
 8006f5a:	2300      	moveq	r3, #0
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	e008      	b.n	8006f72 <HAL_TIM_PWM_Start+0x6a>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	bf14      	ite	ne
 8006f6c:	2301      	movne	r3, #1
 8006f6e:	2300      	moveq	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e068      	b.n	800704c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d104      	bne.n	8006f8a <HAL_TIM_PWM_Start+0x82>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f88:	e013      	b.n	8006fb2 <HAL_TIM_PWM_Start+0xaa>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	d104      	bne.n	8006f9a <HAL_TIM_PWM_Start+0x92>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f98:	e00b      	b.n	8006fb2 <HAL_TIM_PWM_Start+0xaa>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d104      	bne.n	8006faa <HAL_TIM_PWM_Start+0xa2>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fa8:	e003      	b.n	8006fb2 <HAL_TIM_PWM_Start+0xaa>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2202      	movs	r2, #2
 8006fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 f9e5 	bl	800838a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a23      	ldr	r2, [pc, #140]	; (8007054 <HAL_TIM_PWM_Start+0x14c>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d107      	bne.n	8006fda <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a1d      	ldr	r2, [pc, #116]	; (8007054 <HAL_TIM_PWM_Start+0x14c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d018      	beq.n	8007016 <HAL_TIM_PWM_Start+0x10e>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fec:	d013      	beq.n	8007016 <HAL_TIM_PWM_Start+0x10e>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a19      	ldr	r2, [pc, #100]	; (8007058 <HAL_TIM_PWM_Start+0x150>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00e      	beq.n	8007016 <HAL_TIM_PWM_Start+0x10e>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a17      	ldr	r2, [pc, #92]	; (800705c <HAL_TIM_PWM_Start+0x154>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d009      	beq.n	8007016 <HAL_TIM_PWM_Start+0x10e>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a16      	ldr	r2, [pc, #88]	; (8007060 <HAL_TIM_PWM_Start+0x158>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d004      	beq.n	8007016 <HAL_TIM_PWM_Start+0x10e>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a14      	ldr	r2, [pc, #80]	; (8007064 <HAL_TIM_PWM_Start+0x15c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d111      	bne.n	800703a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b06      	cmp	r3, #6
 8007026:	d010      	beq.n	800704a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007038:	e007      	b.n	800704a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0201 	orr.w	r2, r2, #1
 8007048:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	40010000 	.word	0x40010000
 8007058:	40000400 	.word	0x40000400
 800705c:	40000800 	.word	0x40000800
 8007060:	40000c00 	.word	0x40000c00
 8007064:	40014000 	.word	0x40014000

08007068 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2200      	movs	r2, #0
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	4618      	mov	r0, r3
 800707c:	f001 f985 	bl	800838a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a29      	ldr	r2, [pc, #164]	; (800712c <HAL_TIM_PWM_Stop+0xc4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d117      	bne.n	80070ba <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6a1a      	ldr	r2, [r3, #32]
 8007090:	f241 1311 	movw	r3, #4369	; 0x1111
 8007094:	4013      	ands	r3, r2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10f      	bne.n	80070ba <HAL_TIM_PWM_Stop+0x52>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6a1a      	ldr	r2, [r3, #32]
 80070a0:	f240 4344 	movw	r3, #1092	; 0x444
 80070a4:	4013      	ands	r3, r2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d107      	bne.n	80070ba <HAL_TIM_PWM_Stop+0x52>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6a1a      	ldr	r2, [r3, #32]
 80070c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80070c4:	4013      	ands	r3, r2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10f      	bne.n	80070ea <HAL_TIM_PWM_Stop+0x82>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6a1a      	ldr	r2, [r3, #32]
 80070d0:	f240 4344 	movw	r3, #1092	; 0x444
 80070d4:	4013      	ands	r3, r2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d107      	bne.n	80070ea <HAL_TIM_PWM_Stop+0x82>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0201 	bic.w	r2, r2, #1
 80070e8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_PWM_Stop+0x92>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070f8:	e013      	b.n	8007122 <HAL_TIM_PWM_Stop+0xba>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d104      	bne.n	800710a <HAL_TIM_PWM_Stop+0xa2>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007108:	e00b      	b.n	8007122 <HAL_TIM_PWM_Stop+0xba>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b08      	cmp	r3, #8
 800710e:	d104      	bne.n	800711a <HAL_TIM_PWM_Stop+0xb2>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007118:	e003      	b.n	8007122 <HAL_TIM_PWM_Stop+0xba>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40010000 	.word	0x40010000

08007130 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e041      	b.n	80071c6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fb fb2a 	bl	80027b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3304      	adds	r3, #4
 800716c:	4619      	mov	r1, r3
 800716e:	4610      	mov	r0, r2
 8007170:	f000 fcd0 	bl	8007b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d104      	bne.n	80071ee <HAL_TIM_IC_Start_IT+0x1e>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	e013      	b.n	8007216 <HAL_TIM_IC_Start_IT+0x46>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b04      	cmp	r3, #4
 80071f2:	d104      	bne.n	80071fe <HAL_TIM_IC_Start_IT+0x2e>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	e00b      	b.n	8007216 <HAL_TIM_IC_Start_IT+0x46>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b08      	cmp	r3, #8
 8007202:	d104      	bne.n	800720e <HAL_TIM_IC_Start_IT+0x3e>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800720a:	b2db      	uxtb	r3, r3
 800720c:	e003      	b.n	8007216 <HAL_TIM_IC_Start_IT+0x46>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007214:	b2db      	uxtb	r3, r3
 8007216:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d104      	bne.n	8007228 <HAL_TIM_IC_Start_IT+0x58>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007224:	b2db      	uxtb	r3, r3
 8007226:	e013      	b.n	8007250 <HAL_TIM_IC_Start_IT+0x80>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b04      	cmp	r3, #4
 800722c:	d104      	bne.n	8007238 <HAL_TIM_IC_Start_IT+0x68>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007234:	b2db      	uxtb	r3, r3
 8007236:	e00b      	b.n	8007250 <HAL_TIM_IC_Start_IT+0x80>
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b08      	cmp	r3, #8
 800723c:	d104      	bne.n	8007248 <HAL_TIM_IC_Start_IT+0x78>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007244:	b2db      	uxtb	r3, r3
 8007246:	e003      	b.n	8007250 <HAL_TIM_IC_Start_IT+0x80>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800724e:	b2db      	uxtb	r3, r3
 8007250:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d102      	bne.n	800725e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007258:	7b7b      	ldrb	r3, [r7, #13]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d001      	beq.n	8007262 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e0c2      	b.n	80073e8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d104      	bne.n	8007272 <HAL_TIM_IC_Start_IT+0xa2>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007270:	e013      	b.n	800729a <HAL_TIM_IC_Start_IT+0xca>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b04      	cmp	r3, #4
 8007276:	d104      	bne.n	8007282 <HAL_TIM_IC_Start_IT+0xb2>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007280:	e00b      	b.n	800729a <HAL_TIM_IC_Start_IT+0xca>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b08      	cmp	r3, #8
 8007286:	d104      	bne.n	8007292 <HAL_TIM_IC_Start_IT+0xc2>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007290:	e003      	b.n	800729a <HAL_TIM_IC_Start_IT+0xca>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2202      	movs	r2, #2
 8007296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <HAL_TIM_IC_Start_IT+0xda>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072a8:	e013      	b.n	80072d2 <HAL_TIM_IC_Start_IT+0x102>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d104      	bne.n	80072ba <HAL_TIM_IC_Start_IT+0xea>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072b8:	e00b      	b.n	80072d2 <HAL_TIM_IC_Start_IT+0x102>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d104      	bne.n	80072ca <HAL_TIM_IC_Start_IT+0xfa>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072c8:	e003      	b.n	80072d2 <HAL_TIM_IC_Start_IT+0x102>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b0c      	cmp	r3, #12
 80072d6:	d841      	bhi.n	800735c <HAL_TIM_IC_Start_IT+0x18c>
 80072d8:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <HAL_TIM_IC_Start_IT+0x110>)
 80072da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072de:	bf00      	nop
 80072e0:	08007315 	.word	0x08007315
 80072e4:	0800735d 	.word	0x0800735d
 80072e8:	0800735d 	.word	0x0800735d
 80072ec:	0800735d 	.word	0x0800735d
 80072f0:	08007327 	.word	0x08007327
 80072f4:	0800735d 	.word	0x0800735d
 80072f8:	0800735d 	.word	0x0800735d
 80072fc:	0800735d 	.word	0x0800735d
 8007300:	08007339 	.word	0x08007339
 8007304:	0800735d 	.word	0x0800735d
 8007308:	0800735d 	.word	0x0800735d
 800730c:	0800735d 	.word	0x0800735d
 8007310:	0800734b 	.word	0x0800734b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0202 	orr.w	r2, r2, #2
 8007322:	60da      	str	r2, [r3, #12]
      break;
 8007324:	e01d      	b.n	8007362 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f042 0204 	orr.w	r2, r2, #4
 8007334:	60da      	str	r2, [r3, #12]
      break;
 8007336:	e014      	b.n	8007362 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f042 0208 	orr.w	r2, r2, #8
 8007346:	60da      	str	r2, [r3, #12]
      break;
 8007348:	e00b      	b.n	8007362 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f042 0210 	orr.w	r2, r2, #16
 8007358:	60da      	str	r2, [r3, #12]
      break;
 800735a:	e002      	b.n	8007362 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	73fb      	strb	r3, [r7, #15]
      break;
 8007360:	bf00      	nop
  }

  if (status == HAL_OK)
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d13e      	bne.n	80073e6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2201      	movs	r2, #1
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	4618      	mov	r0, r3
 8007372:	f001 f80a 	bl	800838a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1d      	ldr	r2, [pc, #116]	; (80073f0 <HAL_TIM_IC_Start_IT+0x220>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d018      	beq.n	80073b2 <HAL_TIM_IC_Start_IT+0x1e2>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007388:	d013      	beq.n	80073b2 <HAL_TIM_IC_Start_IT+0x1e2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a19      	ldr	r2, [pc, #100]	; (80073f4 <HAL_TIM_IC_Start_IT+0x224>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d00e      	beq.n	80073b2 <HAL_TIM_IC_Start_IT+0x1e2>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a17      	ldr	r2, [pc, #92]	; (80073f8 <HAL_TIM_IC_Start_IT+0x228>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d009      	beq.n	80073b2 <HAL_TIM_IC_Start_IT+0x1e2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a16      	ldr	r2, [pc, #88]	; (80073fc <HAL_TIM_IC_Start_IT+0x22c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d004      	beq.n	80073b2 <HAL_TIM_IC_Start_IT+0x1e2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a14      	ldr	r2, [pc, #80]	; (8007400 <HAL_TIM_IC_Start_IT+0x230>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d111      	bne.n	80073d6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2b06      	cmp	r3, #6
 80073c2:	d010      	beq.n	80073e6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0201 	orr.w	r2, r2, #1
 80073d2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d4:	e007      	b.n	80073e6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 0201 	orr.w	r2, r2, #1
 80073e4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40010000 	.word	0x40010000
 80073f4:	40000400 	.word	0x40000400
 80073f8:	40000800 	.word	0x40000800
 80073fc:	40000c00 	.word	0x40000c00
 8007400:	40014000 	.word	0x40014000

08007404 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b0c      	cmp	r3, #12
 8007416:	d841      	bhi.n	800749c <HAL_TIM_IC_Stop_IT+0x98>
 8007418:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <HAL_TIM_IC_Stop_IT+0x1c>)
 800741a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741e:	bf00      	nop
 8007420:	08007455 	.word	0x08007455
 8007424:	0800749d 	.word	0x0800749d
 8007428:	0800749d 	.word	0x0800749d
 800742c:	0800749d 	.word	0x0800749d
 8007430:	08007467 	.word	0x08007467
 8007434:	0800749d 	.word	0x0800749d
 8007438:	0800749d 	.word	0x0800749d
 800743c:	0800749d 	.word	0x0800749d
 8007440:	08007479 	.word	0x08007479
 8007444:	0800749d 	.word	0x0800749d
 8007448:	0800749d 	.word	0x0800749d
 800744c:	0800749d 	.word	0x0800749d
 8007450:	0800748b 	.word	0x0800748b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0202 	bic.w	r2, r2, #2
 8007462:	60da      	str	r2, [r3, #12]
      break;
 8007464:	e01d      	b.n	80074a2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 0204 	bic.w	r2, r2, #4
 8007474:	60da      	str	r2, [r3, #12]
      break;
 8007476:	e014      	b.n	80074a2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0208 	bic.w	r2, r2, #8
 8007486:	60da      	str	r2, [r3, #12]
      break;
 8007488:	e00b      	b.n	80074a2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0210 	bic.w	r2, r2, #16
 8007498:	60da      	str	r2, [r3, #12]
      break;
 800749a:	e002      	b.n	80074a2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]
      break;
 80074a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d156      	bne.n	8007556 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2200      	movs	r2, #0
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 ff6a 	bl	800838a <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6a1a      	ldr	r2, [r3, #32]
 80074bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80074c0:	4013      	ands	r3, r2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10f      	bne.n	80074e6 <HAL_TIM_IC_Stop_IT+0xe2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6a1a      	ldr	r2, [r3, #32]
 80074cc:	f240 4344 	movw	r3, #1092	; 0x444
 80074d0:	4013      	ands	r3, r2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d107      	bne.n	80074e6 <HAL_TIM_IC_Stop_IT+0xe2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0201 	bic.w	r2, r2, #1
 80074e4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d104      	bne.n	80074f6 <HAL_TIM_IC_Stop_IT+0xf2>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f4:	e013      	b.n	800751e <HAL_TIM_IC_Stop_IT+0x11a>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d104      	bne.n	8007506 <HAL_TIM_IC_Stop_IT+0x102>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007504:	e00b      	b.n	800751e <HAL_TIM_IC_Stop_IT+0x11a>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b08      	cmp	r3, #8
 800750a:	d104      	bne.n	8007516 <HAL_TIM_IC_Stop_IT+0x112>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007514:	e003      	b.n	800751e <HAL_TIM_IC_Stop_IT+0x11a>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d104      	bne.n	800752e <HAL_TIM_IC_Stop_IT+0x12a>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800752c:	e013      	b.n	8007556 <HAL_TIM_IC_Stop_IT+0x152>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b04      	cmp	r3, #4
 8007532:	d104      	bne.n	800753e <HAL_TIM_IC_Stop_IT+0x13a>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800753c:	e00b      	b.n	8007556 <HAL_TIM_IC_Stop_IT+0x152>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b08      	cmp	r3, #8
 8007542:	d104      	bne.n	800754e <HAL_TIM_IC_Stop_IT+0x14a>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800754c:	e003      	b.n	8007556 <HAL_TIM_IC_Stop_IT+0x152>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b02      	cmp	r3, #2
 8007574:	d122      	bne.n	80075bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b02      	cmp	r3, #2
 8007582:	d11b      	bne.n	80075bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0202 	mvn.w	r2, #2
 800758c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	f003 0303 	and.w	r3, r3, #3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa98 	bl	8007ad8 <HAL_TIM_IC_CaptureCallback>
 80075a8:	e005      	b.n	80075b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa8a 	bl	8007ac4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fa9b 	bl	8007aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0304 	and.w	r3, r3, #4
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d122      	bne.n	8007610 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	d11b      	bne.n	8007610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f06f 0204 	mvn.w	r2, #4
 80075e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2202      	movs	r2, #2
 80075e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa6e 	bl	8007ad8 <HAL_TIM_IC_CaptureCallback>
 80075fc:	e005      	b.n	800760a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fa60 	bl	8007ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fa71 	bl	8007aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b08      	cmp	r3, #8
 800761c:	d122      	bne.n	8007664 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	2b08      	cmp	r3, #8
 800762a:	d11b      	bne.n	8007664 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f06f 0208 	mvn.w	r2, #8
 8007634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2204      	movs	r2, #4
 800763a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	f003 0303 	and.w	r3, r3, #3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fa44 	bl	8007ad8 <HAL_TIM_IC_CaptureCallback>
 8007650:	e005      	b.n	800765e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa36 	bl	8007ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fa47 	bl	8007aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	f003 0310 	and.w	r3, r3, #16
 800766e:	2b10      	cmp	r3, #16
 8007670:	d122      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f003 0310 	and.w	r3, r3, #16
 800767c:	2b10      	cmp	r3, #16
 800767e:	d11b      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f06f 0210 	mvn.w	r2, #16
 8007688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2208      	movs	r2, #8
 800768e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fa1a 	bl	8007ad8 <HAL_TIM_IC_CaptureCallback>
 80076a4:	e005      	b.n	80076b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fa0c 	bl	8007ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fa1d 	bl	8007aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d10e      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d107      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f06f 0201 	mvn.w	r2, #1
 80076dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f9e6 	bl	8007ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ee:	2b80      	cmp	r3, #128	; 0x80
 80076f0:	d10e      	bne.n	8007710 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076fc:	2b80      	cmp	r3, #128	; 0x80
 80076fe:	d107      	bne.n	8007710 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f001 f88e 	bl	800882c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	d10e      	bne.n	800773c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007728:	2b40      	cmp	r3, #64	; 0x40
 800772a:	d107      	bne.n	800773c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f9e2 	bl	8007b00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b20      	cmp	r3, #32
 8007748:	d10e      	bne.n	8007768 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b20      	cmp	r3, #32
 8007756:	d107      	bne.n	8007768 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f06f 0220 	mvn.w	r2, #32
 8007760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f001 f858 	bl	8008818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007768:	bf00      	nop
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_TIM_IC_ConfigChannel+0x1e>
 800778a:	2302      	movs	r3, #2
 800778c:	e088      	b.n	80078a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d11b      	bne.n	80077d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6818      	ldr	r0, [r3, #0]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	6819      	ldr	r1, [r3, #0]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f000 fc50 	bl	8008050 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699a      	ldr	r2, [r3, #24]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 020c 	bic.w	r2, r2, #12
 80077be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6999      	ldr	r1, [r3, #24]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	619a      	str	r2, [r3, #24]
 80077d2:	e060      	b.n	8007896 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d11c      	bne.n	8007814 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	6819      	ldr	r1, [r3, #0]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f000 fcc8 	bl	800817e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	699a      	ldr	r2, [r3, #24]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80077fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6999      	ldr	r1, [r3, #24]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	021a      	lsls	r2, r3, #8
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	619a      	str	r2, [r3, #24]
 8007812:	e040      	b.n	8007896 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b08      	cmp	r3, #8
 8007818:	d11b      	bne.n	8007852 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	6819      	ldr	r1, [r3, #0]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f000 fd15 	bl	8008258 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69da      	ldr	r2, [r3, #28]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 020c 	bic.w	r2, r2, #12
 800783c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	69d9      	ldr	r1, [r3, #28]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	61da      	str	r2, [r3, #28]
 8007850:	e021      	b.n	8007896 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b0c      	cmp	r3, #12
 8007856:	d11c      	bne.n	8007892 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	6819      	ldr	r1, [r3, #0]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f000 fd32 	bl	80082d0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69da      	ldr	r2, [r3, #28]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800787a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	69d9      	ldr	r1, [r3, #28]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	021a      	lsls	r2, r3, #8
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	61da      	str	r2, [r3, #28]
 8007890:	e001      	b.n	8007896 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800789e:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d101      	bne.n	80078c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078c2:	2302      	movs	r3, #2
 80078c4:	e0ae      	b.n	8007a24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b0c      	cmp	r3, #12
 80078d2:	f200 809f 	bhi.w	8007a14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	08007911 	.word	0x08007911
 80078e0:	08007a15 	.word	0x08007a15
 80078e4:	08007a15 	.word	0x08007a15
 80078e8:	08007a15 	.word	0x08007a15
 80078ec:	08007951 	.word	0x08007951
 80078f0:	08007a15 	.word	0x08007a15
 80078f4:	08007a15 	.word	0x08007a15
 80078f8:	08007a15 	.word	0x08007a15
 80078fc:	08007993 	.word	0x08007993
 8007900:	08007a15 	.word	0x08007a15
 8007904:	08007a15 	.word	0x08007a15
 8007908:	08007a15 	.word	0x08007a15
 800790c:	080079d3 	.word	0x080079d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68b9      	ldr	r1, [r7, #8]
 8007916:	4618      	mov	r0, r3
 8007918:	f000 f97c 	bl	8007c14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699a      	ldr	r2, [r3, #24]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0208 	orr.w	r2, r2, #8
 800792a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	699a      	ldr	r2, [r3, #24]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 0204 	bic.w	r2, r2, #4
 800793a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6999      	ldr	r1, [r3, #24]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	691a      	ldr	r2, [r3, #16]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	619a      	str	r2, [r3, #24]
      break;
 800794e:	e064      	b.n	8007a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68b9      	ldr	r1, [r7, #8]
 8007956:	4618      	mov	r0, r3
 8007958:	f000 f9c2 	bl	8007ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800796a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699a      	ldr	r2, [r3, #24]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800797a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6999      	ldr	r1, [r3, #24]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	021a      	lsls	r2, r3, #8
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	619a      	str	r2, [r3, #24]
      break;
 8007990:	e043      	b.n	8007a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68b9      	ldr	r1, [r7, #8]
 8007998:	4618      	mov	r0, r3
 800799a:	f000 fa0d 	bl	8007db8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	69da      	ldr	r2, [r3, #28]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f042 0208 	orr.w	r2, r2, #8
 80079ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	69da      	ldr	r2, [r3, #28]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 0204 	bic.w	r2, r2, #4
 80079bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69d9      	ldr	r1, [r3, #28]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	691a      	ldr	r2, [r3, #16]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	61da      	str	r2, [r3, #28]
      break;
 80079d0:	e023      	b.n	8007a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68b9      	ldr	r1, [r7, #8]
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 fa57 	bl	8007e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69da      	ldr	r2, [r3, #28]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69da      	ldr	r2, [r3, #28]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69d9      	ldr	r1, [r3, #28]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	021a      	lsls	r2, r3, #8
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	61da      	str	r2, [r3, #28]
      break;
 8007a12:	e002      	b.n	8007a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	75fb      	strb	r3, [r7, #23]
      break;
 8007a18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d101      	bne.n	8007a44 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007a40:	2302      	movs	r3, #2
 8007a42:	e031      	b.n	8007aa8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fa68 	bl	8007f2c <TIM_SlaveTimer_SetConfig>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d009      	beq.n	8007a76 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e018      	b.n	8007aa8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a84:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68da      	ldr	r2, [r3, #12]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a94:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a34      	ldr	r2, [pc, #208]	; (8007bf8 <TIM_Base_SetConfig+0xe4>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d00f      	beq.n	8007b4c <TIM_Base_SetConfig+0x38>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b32:	d00b      	beq.n	8007b4c <TIM_Base_SetConfig+0x38>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a31      	ldr	r2, [pc, #196]	; (8007bfc <TIM_Base_SetConfig+0xe8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d007      	beq.n	8007b4c <TIM_Base_SetConfig+0x38>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a30      	ldr	r2, [pc, #192]	; (8007c00 <TIM_Base_SetConfig+0xec>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d003      	beq.n	8007b4c <TIM_Base_SetConfig+0x38>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a2f      	ldr	r2, [pc, #188]	; (8007c04 <TIM_Base_SetConfig+0xf0>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d108      	bne.n	8007b5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a25      	ldr	r2, [pc, #148]	; (8007bf8 <TIM_Base_SetConfig+0xe4>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d01b      	beq.n	8007b9e <TIM_Base_SetConfig+0x8a>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b6c:	d017      	beq.n	8007b9e <TIM_Base_SetConfig+0x8a>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a22      	ldr	r2, [pc, #136]	; (8007bfc <TIM_Base_SetConfig+0xe8>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d013      	beq.n	8007b9e <TIM_Base_SetConfig+0x8a>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a21      	ldr	r2, [pc, #132]	; (8007c00 <TIM_Base_SetConfig+0xec>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d00f      	beq.n	8007b9e <TIM_Base_SetConfig+0x8a>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a20      	ldr	r2, [pc, #128]	; (8007c04 <TIM_Base_SetConfig+0xf0>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d00b      	beq.n	8007b9e <TIM_Base_SetConfig+0x8a>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a1f      	ldr	r2, [pc, #124]	; (8007c08 <TIM_Base_SetConfig+0xf4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d007      	beq.n	8007b9e <TIM_Base_SetConfig+0x8a>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a1e      	ldr	r2, [pc, #120]	; (8007c0c <TIM_Base_SetConfig+0xf8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d003      	beq.n	8007b9e <TIM_Base_SetConfig+0x8a>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a1d      	ldr	r2, [pc, #116]	; (8007c10 <TIM_Base_SetConfig+0xfc>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d108      	bne.n	8007bb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a08      	ldr	r2, [pc, #32]	; (8007bf8 <TIM_Base_SetConfig+0xe4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d103      	bne.n	8007be4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	615a      	str	r2, [r3, #20]
}
 8007bea:	bf00      	nop
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40000400 	.word	0x40000400
 8007c00:	40000800 	.word	0x40000800
 8007c04:	40000c00 	.word	0x40000c00
 8007c08:	40014000 	.word	0x40014000
 8007c0c:	40014400 	.word	0x40014400
 8007c10:	40014800 	.word	0x40014800

08007c14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	f023 0201 	bic.w	r2, r3, #1
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 0303 	bic.w	r3, r3, #3
 8007c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f023 0302 	bic.w	r3, r3, #2
 8007c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a1c      	ldr	r2, [pc, #112]	; (8007cdc <TIM_OC1_SetConfig+0xc8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d10c      	bne.n	8007c8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f023 0308 	bic.w	r3, r3, #8
 8007c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f023 0304 	bic.w	r3, r3, #4
 8007c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a13      	ldr	r2, [pc, #76]	; (8007cdc <TIM_OC1_SetConfig+0xc8>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d111      	bne.n	8007cb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	621a      	str	r2, [r3, #32]
}
 8007cd0:	bf00      	nop
 8007cd2:	371c      	adds	r7, #28
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	40010000 	.word	0x40010000

08007ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	f023 0210 	bic.w	r2, r3, #16
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f023 0320 	bic.w	r3, r3, #32
 8007d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a1e      	ldr	r2, [pc, #120]	; (8007db4 <TIM_OC2_SetConfig+0xd4>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d10d      	bne.n	8007d5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	011b      	lsls	r3, r3, #4
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <TIM_OC2_SetConfig+0xd4>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d113      	bne.n	8007d8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	621a      	str	r2, [r3, #32]
}
 8007da6:	bf00      	nop
 8007da8:	371c      	adds	r7, #28
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	40010000 	.word	0x40010000

08007db8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0303 	bic.w	r3, r3, #3
 8007dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	021b      	lsls	r3, r3, #8
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a1d      	ldr	r2, [pc, #116]	; (8007e88 <TIM_OC3_SetConfig+0xd0>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d10d      	bne.n	8007e32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	021b      	lsls	r3, r3, #8
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a14      	ldr	r2, [pc, #80]	; (8007e88 <TIM_OC3_SetConfig+0xd0>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d113      	bne.n	8007e62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	011b      	lsls	r3, r3, #4
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	011b      	lsls	r3, r3, #4
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	621a      	str	r2, [r3, #32]
}
 8007e7c:	bf00      	nop
 8007e7e:	371c      	adds	r7, #28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	40010000 	.word	0x40010000

08007e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	031b      	lsls	r3, r3, #12
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a10      	ldr	r2, [pc, #64]	; (8007f28 <TIM_OC4_SetConfig+0x9c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d109      	bne.n	8007f00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ef2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	019b      	lsls	r3, r3, #6
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	621a      	str	r2, [r3, #32]
}
 8007f1a:	bf00      	nop
 8007f1c:	371c      	adds	r7, #28
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	40010000 	.word	0x40010000

08007f2c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f48:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	f023 0307 	bic.w	r3, r3, #7
 8007f5a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	2b70      	cmp	r3, #112	; 0x70
 8007f74:	d01a      	beq.n	8007fac <TIM_SlaveTimer_SetConfig+0x80>
 8007f76:	2b70      	cmp	r3, #112	; 0x70
 8007f78:	d860      	bhi.n	800803c <TIM_SlaveTimer_SetConfig+0x110>
 8007f7a:	2b60      	cmp	r3, #96	; 0x60
 8007f7c:	d054      	beq.n	8008028 <TIM_SlaveTimer_SetConfig+0xfc>
 8007f7e:	2b60      	cmp	r3, #96	; 0x60
 8007f80:	d85c      	bhi.n	800803c <TIM_SlaveTimer_SetConfig+0x110>
 8007f82:	2b50      	cmp	r3, #80	; 0x50
 8007f84:	d046      	beq.n	8008014 <TIM_SlaveTimer_SetConfig+0xe8>
 8007f86:	2b50      	cmp	r3, #80	; 0x50
 8007f88:	d858      	bhi.n	800803c <TIM_SlaveTimer_SetConfig+0x110>
 8007f8a:	2b40      	cmp	r3, #64	; 0x40
 8007f8c:	d019      	beq.n	8007fc2 <TIM_SlaveTimer_SetConfig+0x96>
 8007f8e:	2b40      	cmp	r3, #64	; 0x40
 8007f90:	d854      	bhi.n	800803c <TIM_SlaveTimer_SetConfig+0x110>
 8007f92:	2b30      	cmp	r3, #48	; 0x30
 8007f94:	d055      	beq.n	8008042 <TIM_SlaveTimer_SetConfig+0x116>
 8007f96:	2b30      	cmp	r3, #48	; 0x30
 8007f98:	d850      	bhi.n	800803c <TIM_SlaveTimer_SetConfig+0x110>
 8007f9a:	2b20      	cmp	r3, #32
 8007f9c:	d051      	beq.n	8008042 <TIM_SlaveTimer_SetConfig+0x116>
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	d84c      	bhi.n	800803c <TIM_SlaveTimer_SetConfig+0x110>
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d04d      	beq.n	8008042 <TIM_SlaveTimer_SetConfig+0x116>
 8007fa6:	2b10      	cmp	r3, #16
 8007fa8:	d04b      	beq.n	8008042 <TIM_SlaveTimer_SetConfig+0x116>
 8007faa:	e047      	b.n	800803c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6818      	ldr	r0, [r3, #0]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	68d9      	ldr	r1, [r3, #12]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	f000 f9c5 	bl	800834a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007fc0:	e040      	b.n	8008044 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b05      	cmp	r3, #5
 8007fc8:	d101      	bne.n	8007fce <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e03b      	b.n	8008046 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6a1a      	ldr	r2, [r3, #32]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0201 	bic.w	r2, r2, #1
 8007fe4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ff4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	011b      	lsls	r3, r3, #4
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	621a      	str	r2, [r3, #32]
      break;
 8008012:	e017      	b.n	8008044 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6818      	ldr	r0, [r3, #0]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	6899      	ldr	r1, [r3, #8]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	461a      	mov	r2, r3
 8008022:	f000 f87d 	bl	8008120 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008026:	e00d      	b.n	8008044 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6818      	ldr	r0, [r3, #0]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	6899      	ldr	r1, [r3, #8]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	461a      	mov	r2, r3
 8008036:	f000 f8df 	bl	80081f8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800803a:	e003      	b.n	8008044 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	75fb      	strb	r3, [r7, #23]
      break;
 8008040:	e000      	b.n	8008044 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008042:	bf00      	nop
  }

  return status;
 8008044:	7dfb      	ldrb	r3, [r7, #23]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	f023 0201 	bic.w	r2, r3, #1
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4a24      	ldr	r2, [pc, #144]	; (800810c <TIM_TI1_SetConfig+0xbc>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d013      	beq.n	80080a6 <TIM_TI1_SetConfig+0x56>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008084:	d00f      	beq.n	80080a6 <TIM_TI1_SetConfig+0x56>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4a21      	ldr	r2, [pc, #132]	; (8008110 <TIM_TI1_SetConfig+0xc0>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d00b      	beq.n	80080a6 <TIM_TI1_SetConfig+0x56>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	4a20      	ldr	r2, [pc, #128]	; (8008114 <TIM_TI1_SetConfig+0xc4>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d007      	beq.n	80080a6 <TIM_TI1_SetConfig+0x56>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4a1f      	ldr	r2, [pc, #124]	; (8008118 <TIM_TI1_SetConfig+0xc8>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d003      	beq.n	80080a6 <TIM_TI1_SetConfig+0x56>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	4a1e      	ldr	r2, [pc, #120]	; (800811c <TIM_TI1_SetConfig+0xcc>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d101      	bne.n	80080aa <TIM_TI1_SetConfig+0x5a>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <TIM_TI1_SetConfig+0x5c>
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d008      	beq.n	80080c2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f023 0303 	bic.w	r3, r3, #3
 80080b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	e003      	b.n	80080ca <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f043 0301 	orr.w	r3, r3, #1
 80080c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	011b      	lsls	r3, r3, #4
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f023 030a 	bic.w	r3, r3, #10
 80080e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f003 030a 	and.w	r3, r3, #10
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	621a      	str	r2, [r3, #32]
}
 80080fe:	bf00      	nop
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	40010000 	.word	0x40010000
 8008110:	40000400 	.word	0x40000400
 8008114:	40000800 	.word	0x40000800
 8008118:	40000c00 	.word	0x40000c00
 800811c:	40014000 	.word	0x40014000

08008120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008120:	b480      	push	{r7}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	f023 0201 	bic.w	r2, r3, #1
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800814a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	011b      	lsls	r3, r3, #4
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	4313      	orrs	r3, r2
 8008154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f023 030a 	bic.w	r3, r3, #10
 800815c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	4313      	orrs	r3, r2
 8008164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	621a      	str	r2, [r3, #32]
}
 8008172:	bf00      	nop
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800817e:	b480      	push	{r7}
 8008180:	b087      	sub	sp, #28
 8008182:	af00      	add	r7, sp, #0
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	607a      	str	r2, [r7, #4]
 800818a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	f023 0210 	bic.w	r2, r3, #16
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	021b      	lsls	r3, r3, #8
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	031b      	lsls	r3, r3, #12
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	4313      	orrs	r3, r2
 80081de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	621a      	str	r2, [r3, #32]
}
 80081ec:	bf00      	nop
 80081ee:	371c      	adds	r7, #28
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	f023 0210 	bic.w	r2, r3, #16
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008222:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	031b      	lsls	r3, r3, #12
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008234:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	011b      	lsls	r3, r3, #4
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	621a      	str	r2, [r3, #32]
}
 800824c:	bf00      	nop
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
 8008264:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f023 0303 	bic.w	r3, r3, #3
 8008284:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4313      	orrs	r3, r2
 800828c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008294:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	011b      	lsls	r3, r3, #4
 800829a:	b2db      	uxtb	r3, r3
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	4313      	orrs	r3, r2
 80082a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80082a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	021b      	lsls	r3, r3, #8
 80082ae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	621a      	str	r2, [r3, #32]
}
 80082c4:	bf00      	nop
 80082c6:	371c      	adds	r7, #28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	021b      	lsls	r3, r3, #8
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	4313      	orrs	r3, r2
 8008306:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800830e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	031b      	lsls	r3, r3, #12
 8008314:	b29b      	uxth	r3, r3
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	4313      	orrs	r3, r2
 800831a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008322:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	031b      	lsls	r3, r3, #12
 8008328:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4313      	orrs	r3, r2
 8008330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	621a      	str	r2, [r3, #32]
}
 800833e:	bf00      	nop
 8008340:	371c      	adds	r7, #28
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800834a:	b480      	push	{r7}
 800834c:	b087      	sub	sp, #28
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	607a      	str	r2, [r7, #4]
 8008356:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008364:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	021a      	lsls	r2, r3, #8
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	431a      	orrs	r2, r3
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	4313      	orrs	r3, r2
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	4313      	orrs	r3, r2
 8008376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	609a      	str	r2, [r3, #8]
}
 800837e:	bf00      	nop
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800838a:	b480      	push	{r7}
 800838c:	b087      	sub	sp, #28
 800838e:	af00      	add	r7, sp, #0
 8008390:	60f8      	str	r0, [r7, #12]
 8008392:	60b9      	str	r1, [r7, #8]
 8008394:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	f003 031f 	and.w	r3, r3, #31
 800839c:	2201      	movs	r2, #1
 800839e:	fa02 f303 	lsl.w	r3, r2, r3
 80083a2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6a1a      	ldr	r2, [r3, #32]
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	43db      	mvns	r3, r3
 80083ac:	401a      	ands	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6a1a      	ldr	r2, [r3, #32]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f003 031f 	and.w	r3, r3, #31
 80083bc:	6879      	ldr	r1, [r7, #4]
 80083be:	fa01 f303 	lsl.w	r3, r1, r3
 80083c2:	431a      	orrs	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	621a      	str	r2, [r3, #32]
}
 80083c8:	bf00      	nop
 80083ca:	371c      	adds	r7, #28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08a      	sub	sp, #40	; 0x28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e09a      	b.n	800851e <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d106      	bne.n	8008402 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7fa f943 	bl	8002688 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2202      	movs	r2, #2
 8008406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3304      	adds	r3, #4
 8008412:	4619      	mov	r1, r3
 8008414:	4610      	mov	r0, r2
 8008416:	f7ff fb7d 	bl	8007b14 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	6819      	ldr	r1, [r3, #0]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	2203      	movs	r2, #3
 8008428:	f7ff fe12 	bl	8008050 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	699a      	ldr	r2, [r3, #24]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 020c 	bic.w	r2, r2, #12
 800843a:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6999      	ldr	r1, [r3, #24]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	430a      	orrs	r2, r1
 800844c:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800845c:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800846c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800847c:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0207 	bic.w	r2, r2, #7
 800848c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f042 0204 	orr.w	r2, r2, #4
 800849c:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800849e:	2300      	movs	r3, #0
 80084a0:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80084a2:	2300      	movs	r3, #0
 80084a4:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80084a6:	2370      	movs	r3, #112	; 0x70
 80084a8:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80084aa:	2300      	movs	r3, #0
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80084ae:	2300      	movs	r3, #0
 80084b0:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f107 020c 	add.w	r2, r7, #12
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7ff fc0a 	bl	8007ce0 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80084da:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80084ea:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3728      	adds	r7, #40	; 0x28
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
	...

08008528 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008536:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800853e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008546:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800854e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008550:	7bfb      	ldrb	r3, [r7, #15]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d108      	bne.n	8008568 <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d105      	bne.n	8008568 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800855c:	7b7b      	ldrb	r3, [r7, #13]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d102      	bne.n	8008568 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008562:	7b3b      	ldrb	r3, [r7, #12]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d001      	beq.n	800856c <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e04f      	b.n	800860c <HAL_TIMEx_HallSensor_Start+0xe4>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2202      	movs	r2, #2
 8008578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2201      	movs	r2, #1
 8008592:	2100      	movs	r1, #0
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff fef8 	bl	800838a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a1d      	ldr	r2, [pc, #116]	; (8008614 <HAL_TIMEx_HallSensor_Start+0xec>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d018      	beq.n	80085d6 <HAL_TIMEx_HallSensor_Start+0xae>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ac:	d013      	beq.n	80085d6 <HAL_TIMEx_HallSensor_Start+0xae>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a19      	ldr	r2, [pc, #100]	; (8008618 <HAL_TIMEx_HallSensor_Start+0xf0>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d00e      	beq.n	80085d6 <HAL_TIMEx_HallSensor_Start+0xae>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a17      	ldr	r2, [pc, #92]	; (800861c <HAL_TIMEx_HallSensor_Start+0xf4>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d009      	beq.n	80085d6 <HAL_TIMEx_HallSensor_Start+0xae>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a16      	ldr	r2, [pc, #88]	; (8008620 <HAL_TIMEx_HallSensor_Start+0xf8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d004      	beq.n	80085d6 <HAL_TIMEx_HallSensor_Start+0xae>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a14      	ldr	r2, [pc, #80]	; (8008624 <HAL_TIMEx_HallSensor_Start+0xfc>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d111      	bne.n	80085fa <HAL_TIMEx_HallSensor_Start+0xd2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f003 0307 	and.w	r3, r3, #7
 80085e0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2b06      	cmp	r3, #6
 80085e6:	d010      	beq.n	800860a <HAL_TIMEx_HallSensor_Start+0xe2>
    {
      __HAL_TIM_ENABLE(htim);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f042 0201 	orr.w	r2, r2, #1
 80085f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085f8:	e007      	b.n	800860a <HAL_TIMEx_HallSensor_Start+0xe2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f042 0201 	orr.w	r2, r2, #1
 8008608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	40010000 	.word	0x40010000
 8008618:	40000400 	.word	0x40000400
 800861c:	40000800 	.word	0x40000800
 8008620:	40000c00 	.word	0x40000c00
 8008624:	40014000 	.word	0x40014000

08008628 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2200      	movs	r2, #0
 8008636:	2100      	movs	r1, #0
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff fea6 	bl	800838a <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6a1a      	ldr	r2, [r3, #32]
 8008644:	f241 1311 	movw	r3, #4369	; 0x1111
 8008648:	4013      	ands	r3, r2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10f      	bne.n	800866e <HAL_TIMEx_HallSensor_Stop+0x46>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6a1a      	ldr	r2, [r3, #32]
 8008654:	f240 4344 	movw	r3, #1092	; 0x444
 8008658:	4013      	ands	r3, r2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d107      	bne.n	800866e <HAL_TIMEx_HallSensor_Stop+0x46>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0201 	bic.w	r2, r2, #1
 800866c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d101      	bne.n	80086b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086ac:	2302      	movs	r3, #2
 80086ae:	e050      	b.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2202      	movs	r2, #2
 80086bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a1c      	ldr	r2, [pc, #112]	; (8008760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d018      	beq.n	8008726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086fc:	d013      	beq.n	8008726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a18      	ldr	r2, [pc, #96]	; (8008764 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00e      	beq.n	8008726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a16      	ldr	r2, [pc, #88]	; (8008768 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d009      	beq.n	8008726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a15      	ldr	r2, [pc, #84]	; (800876c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d004      	beq.n	8008726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a13      	ldr	r2, [pc, #76]	; (8008770 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d10c      	bne.n	8008740 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800872c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	4313      	orrs	r3, r2
 8008736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	40010000 	.word	0x40010000
 8008764:	40000400 	.word	0x40000400
 8008768:	40000800 	.word	0x40000800
 800876c:	40000c00 	.word	0x40000c00
 8008770:	40014000 	.word	0x40014000

08008774 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800877e:	2300      	movs	r3, #0
 8008780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008788:	2b01      	cmp	r3, #1
 800878a:	d101      	bne.n	8008790 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800878c:	2302      	movs	r3, #2
 800878e:	e03d      	b.n	800880c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	4313      	orrs	r3, r2
 80087c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <__cvt>:
 8008840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008844:	ec55 4b10 	vmov	r4, r5, d0
 8008848:	2d00      	cmp	r5, #0
 800884a:	460e      	mov	r6, r1
 800884c:	4619      	mov	r1, r3
 800884e:	462b      	mov	r3, r5
 8008850:	bfbb      	ittet	lt
 8008852:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008856:	461d      	movlt	r5, r3
 8008858:	2300      	movge	r3, #0
 800885a:	232d      	movlt	r3, #45	; 0x2d
 800885c:	700b      	strb	r3, [r1, #0]
 800885e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008860:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008864:	4691      	mov	r9, r2
 8008866:	f023 0820 	bic.w	r8, r3, #32
 800886a:	bfbc      	itt	lt
 800886c:	4622      	movlt	r2, r4
 800886e:	4614      	movlt	r4, r2
 8008870:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008874:	d005      	beq.n	8008882 <__cvt+0x42>
 8008876:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800887a:	d100      	bne.n	800887e <__cvt+0x3e>
 800887c:	3601      	adds	r6, #1
 800887e:	2102      	movs	r1, #2
 8008880:	e000      	b.n	8008884 <__cvt+0x44>
 8008882:	2103      	movs	r1, #3
 8008884:	ab03      	add	r3, sp, #12
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	ab02      	add	r3, sp, #8
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	ec45 4b10 	vmov	d0, r4, r5
 8008890:	4653      	mov	r3, sl
 8008892:	4632      	mov	r2, r6
 8008894:	f000 fe48 	bl	8009528 <_dtoa_r>
 8008898:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800889c:	4607      	mov	r7, r0
 800889e:	d102      	bne.n	80088a6 <__cvt+0x66>
 80088a0:	f019 0f01 	tst.w	r9, #1
 80088a4:	d022      	beq.n	80088ec <__cvt+0xac>
 80088a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088aa:	eb07 0906 	add.w	r9, r7, r6
 80088ae:	d110      	bne.n	80088d2 <__cvt+0x92>
 80088b0:	783b      	ldrb	r3, [r7, #0]
 80088b2:	2b30      	cmp	r3, #48	; 0x30
 80088b4:	d10a      	bne.n	80088cc <__cvt+0x8c>
 80088b6:	2200      	movs	r2, #0
 80088b8:	2300      	movs	r3, #0
 80088ba:	4620      	mov	r0, r4
 80088bc:	4629      	mov	r1, r5
 80088be:	f7f8 f90b 	bl	8000ad8 <__aeabi_dcmpeq>
 80088c2:	b918      	cbnz	r0, 80088cc <__cvt+0x8c>
 80088c4:	f1c6 0601 	rsb	r6, r6, #1
 80088c8:	f8ca 6000 	str.w	r6, [sl]
 80088cc:	f8da 3000 	ldr.w	r3, [sl]
 80088d0:	4499      	add	r9, r3
 80088d2:	2200      	movs	r2, #0
 80088d4:	2300      	movs	r3, #0
 80088d6:	4620      	mov	r0, r4
 80088d8:	4629      	mov	r1, r5
 80088da:	f7f8 f8fd 	bl	8000ad8 <__aeabi_dcmpeq>
 80088de:	b108      	cbz	r0, 80088e4 <__cvt+0xa4>
 80088e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80088e4:	2230      	movs	r2, #48	; 0x30
 80088e6:	9b03      	ldr	r3, [sp, #12]
 80088e8:	454b      	cmp	r3, r9
 80088ea:	d307      	bcc.n	80088fc <__cvt+0xbc>
 80088ec:	9b03      	ldr	r3, [sp, #12]
 80088ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088f0:	1bdb      	subs	r3, r3, r7
 80088f2:	4638      	mov	r0, r7
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	b004      	add	sp, #16
 80088f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088fc:	1c59      	adds	r1, r3, #1
 80088fe:	9103      	str	r1, [sp, #12]
 8008900:	701a      	strb	r2, [r3, #0]
 8008902:	e7f0      	b.n	80088e6 <__cvt+0xa6>

08008904 <__exponent>:
 8008904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008906:	4603      	mov	r3, r0
 8008908:	2900      	cmp	r1, #0
 800890a:	bfb8      	it	lt
 800890c:	4249      	neglt	r1, r1
 800890e:	f803 2b02 	strb.w	r2, [r3], #2
 8008912:	bfb4      	ite	lt
 8008914:	222d      	movlt	r2, #45	; 0x2d
 8008916:	222b      	movge	r2, #43	; 0x2b
 8008918:	2909      	cmp	r1, #9
 800891a:	7042      	strb	r2, [r0, #1]
 800891c:	dd2a      	ble.n	8008974 <__exponent+0x70>
 800891e:	f10d 0207 	add.w	r2, sp, #7
 8008922:	4617      	mov	r7, r2
 8008924:	260a      	movs	r6, #10
 8008926:	4694      	mov	ip, r2
 8008928:	fb91 f5f6 	sdiv	r5, r1, r6
 800892c:	fb06 1415 	mls	r4, r6, r5, r1
 8008930:	3430      	adds	r4, #48	; 0x30
 8008932:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008936:	460c      	mov	r4, r1
 8008938:	2c63      	cmp	r4, #99	; 0x63
 800893a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800893e:	4629      	mov	r1, r5
 8008940:	dcf1      	bgt.n	8008926 <__exponent+0x22>
 8008942:	3130      	adds	r1, #48	; 0x30
 8008944:	f1ac 0402 	sub.w	r4, ip, #2
 8008948:	f802 1c01 	strb.w	r1, [r2, #-1]
 800894c:	1c41      	adds	r1, r0, #1
 800894e:	4622      	mov	r2, r4
 8008950:	42ba      	cmp	r2, r7
 8008952:	d30a      	bcc.n	800896a <__exponent+0x66>
 8008954:	f10d 0209 	add.w	r2, sp, #9
 8008958:	eba2 020c 	sub.w	r2, r2, ip
 800895c:	42bc      	cmp	r4, r7
 800895e:	bf88      	it	hi
 8008960:	2200      	movhi	r2, #0
 8008962:	4413      	add	r3, r2
 8008964:	1a18      	subs	r0, r3, r0
 8008966:	b003      	add	sp, #12
 8008968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800896a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800896e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008972:	e7ed      	b.n	8008950 <__exponent+0x4c>
 8008974:	2330      	movs	r3, #48	; 0x30
 8008976:	3130      	adds	r1, #48	; 0x30
 8008978:	7083      	strb	r3, [r0, #2]
 800897a:	70c1      	strb	r1, [r0, #3]
 800897c:	1d03      	adds	r3, r0, #4
 800897e:	e7f1      	b.n	8008964 <__exponent+0x60>

08008980 <_printf_float>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	ed2d 8b02 	vpush	{d8}
 8008988:	b08d      	sub	sp, #52	; 0x34
 800898a:	460c      	mov	r4, r1
 800898c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008990:	4616      	mov	r6, r2
 8008992:	461f      	mov	r7, r3
 8008994:	4605      	mov	r5, r0
 8008996:	f000 fcc7 	bl	8009328 <_localeconv_r>
 800899a:	f8d0 a000 	ldr.w	sl, [r0]
 800899e:	4650      	mov	r0, sl
 80089a0:	f7f7 fc6e 	bl	8000280 <strlen>
 80089a4:	2300      	movs	r3, #0
 80089a6:	930a      	str	r3, [sp, #40]	; 0x28
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	9305      	str	r3, [sp, #20]
 80089ac:	f8d8 3000 	ldr.w	r3, [r8]
 80089b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80089b4:	3307      	adds	r3, #7
 80089b6:	f023 0307 	bic.w	r3, r3, #7
 80089ba:	f103 0208 	add.w	r2, r3, #8
 80089be:	f8c8 2000 	str.w	r2, [r8]
 80089c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089ca:	9307      	str	r3, [sp, #28]
 80089cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80089d0:	ee08 0a10 	vmov	s16, r0
 80089d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80089d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089dc:	4b9e      	ldr	r3, [pc, #632]	; (8008c58 <_printf_float+0x2d8>)
 80089de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089e2:	f7f8 f8ab 	bl	8000b3c <__aeabi_dcmpun>
 80089e6:	bb88      	cbnz	r0, 8008a4c <_printf_float+0xcc>
 80089e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089ec:	4b9a      	ldr	r3, [pc, #616]	; (8008c58 <_printf_float+0x2d8>)
 80089ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089f2:	f7f8 f885 	bl	8000b00 <__aeabi_dcmple>
 80089f6:	bb48      	cbnz	r0, 8008a4c <_printf_float+0xcc>
 80089f8:	2200      	movs	r2, #0
 80089fa:	2300      	movs	r3, #0
 80089fc:	4640      	mov	r0, r8
 80089fe:	4649      	mov	r1, r9
 8008a00:	f7f8 f874 	bl	8000aec <__aeabi_dcmplt>
 8008a04:	b110      	cbz	r0, 8008a0c <_printf_float+0x8c>
 8008a06:	232d      	movs	r3, #45	; 0x2d
 8008a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a0c:	4a93      	ldr	r2, [pc, #588]	; (8008c5c <_printf_float+0x2dc>)
 8008a0e:	4b94      	ldr	r3, [pc, #592]	; (8008c60 <_printf_float+0x2e0>)
 8008a10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008a14:	bf94      	ite	ls
 8008a16:	4690      	movls	r8, r2
 8008a18:	4698      	movhi	r8, r3
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	6123      	str	r3, [r4, #16]
 8008a1e:	9b05      	ldr	r3, [sp, #20]
 8008a20:	f023 0304 	bic.w	r3, r3, #4
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	f04f 0900 	mov.w	r9, #0
 8008a2a:	9700      	str	r7, [sp, #0]
 8008a2c:	4633      	mov	r3, r6
 8008a2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a30:	4621      	mov	r1, r4
 8008a32:	4628      	mov	r0, r5
 8008a34:	f000 f9da 	bl	8008dec <_printf_common>
 8008a38:	3001      	adds	r0, #1
 8008a3a:	f040 8090 	bne.w	8008b5e <_printf_float+0x1de>
 8008a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a42:	b00d      	add	sp, #52	; 0x34
 8008a44:	ecbd 8b02 	vpop	{d8}
 8008a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4c:	4642      	mov	r2, r8
 8008a4e:	464b      	mov	r3, r9
 8008a50:	4640      	mov	r0, r8
 8008a52:	4649      	mov	r1, r9
 8008a54:	f7f8 f872 	bl	8000b3c <__aeabi_dcmpun>
 8008a58:	b140      	cbz	r0, 8008a6c <_printf_float+0xec>
 8008a5a:	464b      	mov	r3, r9
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	bfbc      	itt	lt
 8008a60:	232d      	movlt	r3, #45	; 0x2d
 8008a62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a66:	4a7f      	ldr	r2, [pc, #508]	; (8008c64 <_printf_float+0x2e4>)
 8008a68:	4b7f      	ldr	r3, [pc, #508]	; (8008c68 <_printf_float+0x2e8>)
 8008a6a:	e7d1      	b.n	8008a10 <_printf_float+0x90>
 8008a6c:	6863      	ldr	r3, [r4, #4]
 8008a6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008a72:	9206      	str	r2, [sp, #24]
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	d13f      	bne.n	8008af8 <_printf_float+0x178>
 8008a78:	2306      	movs	r3, #6
 8008a7a:	6063      	str	r3, [r4, #4]
 8008a7c:	9b05      	ldr	r3, [sp, #20]
 8008a7e:	6861      	ldr	r1, [r4, #4]
 8008a80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008a84:	2300      	movs	r3, #0
 8008a86:	9303      	str	r3, [sp, #12]
 8008a88:	ab0a      	add	r3, sp, #40	; 0x28
 8008a8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008a8e:	ab09      	add	r3, sp, #36	; 0x24
 8008a90:	ec49 8b10 	vmov	d0, r8, r9
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	6022      	str	r2, [r4, #0]
 8008a98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f7ff fecf 	bl	8008840 <__cvt>
 8008aa2:	9b06      	ldr	r3, [sp, #24]
 8008aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aa6:	2b47      	cmp	r3, #71	; 0x47
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	d108      	bne.n	8008abe <_printf_float+0x13e>
 8008aac:	1cc8      	adds	r0, r1, #3
 8008aae:	db02      	blt.n	8008ab6 <_printf_float+0x136>
 8008ab0:	6863      	ldr	r3, [r4, #4]
 8008ab2:	4299      	cmp	r1, r3
 8008ab4:	dd41      	ble.n	8008b3a <_printf_float+0x1ba>
 8008ab6:	f1ab 0302 	sub.w	r3, fp, #2
 8008aba:	fa5f fb83 	uxtb.w	fp, r3
 8008abe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ac2:	d820      	bhi.n	8008b06 <_printf_float+0x186>
 8008ac4:	3901      	subs	r1, #1
 8008ac6:	465a      	mov	r2, fp
 8008ac8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008acc:	9109      	str	r1, [sp, #36]	; 0x24
 8008ace:	f7ff ff19 	bl	8008904 <__exponent>
 8008ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ad4:	1813      	adds	r3, r2, r0
 8008ad6:	2a01      	cmp	r2, #1
 8008ad8:	4681      	mov	r9, r0
 8008ada:	6123      	str	r3, [r4, #16]
 8008adc:	dc02      	bgt.n	8008ae4 <_printf_float+0x164>
 8008ade:	6822      	ldr	r2, [r4, #0]
 8008ae0:	07d2      	lsls	r2, r2, #31
 8008ae2:	d501      	bpl.n	8008ae8 <_printf_float+0x168>
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	6123      	str	r3, [r4, #16]
 8008ae8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d09c      	beq.n	8008a2a <_printf_float+0xaa>
 8008af0:	232d      	movs	r3, #45	; 0x2d
 8008af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008af6:	e798      	b.n	8008a2a <_printf_float+0xaa>
 8008af8:	9a06      	ldr	r2, [sp, #24]
 8008afa:	2a47      	cmp	r2, #71	; 0x47
 8008afc:	d1be      	bne.n	8008a7c <_printf_float+0xfc>
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1bc      	bne.n	8008a7c <_printf_float+0xfc>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e7b9      	b.n	8008a7a <_printf_float+0xfa>
 8008b06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b0a:	d118      	bne.n	8008b3e <_printf_float+0x1be>
 8008b0c:	2900      	cmp	r1, #0
 8008b0e:	6863      	ldr	r3, [r4, #4]
 8008b10:	dd0b      	ble.n	8008b2a <_printf_float+0x1aa>
 8008b12:	6121      	str	r1, [r4, #16]
 8008b14:	b913      	cbnz	r3, 8008b1c <_printf_float+0x19c>
 8008b16:	6822      	ldr	r2, [r4, #0]
 8008b18:	07d0      	lsls	r0, r2, #31
 8008b1a:	d502      	bpl.n	8008b22 <_printf_float+0x1a2>
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	440b      	add	r3, r1
 8008b20:	6123      	str	r3, [r4, #16]
 8008b22:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b24:	f04f 0900 	mov.w	r9, #0
 8008b28:	e7de      	b.n	8008ae8 <_printf_float+0x168>
 8008b2a:	b913      	cbnz	r3, 8008b32 <_printf_float+0x1b2>
 8008b2c:	6822      	ldr	r2, [r4, #0]
 8008b2e:	07d2      	lsls	r2, r2, #31
 8008b30:	d501      	bpl.n	8008b36 <_printf_float+0x1b6>
 8008b32:	3302      	adds	r3, #2
 8008b34:	e7f4      	b.n	8008b20 <_printf_float+0x1a0>
 8008b36:	2301      	movs	r3, #1
 8008b38:	e7f2      	b.n	8008b20 <_printf_float+0x1a0>
 8008b3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b40:	4299      	cmp	r1, r3
 8008b42:	db05      	blt.n	8008b50 <_printf_float+0x1d0>
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	6121      	str	r1, [r4, #16]
 8008b48:	07d8      	lsls	r0, r3, #31
 8008b4a:	d5ea      	bpl.n	8008b22 <_printf_float+0x1a2>
 8008b4c:	1c4b      	adds	r3, r1, #1
 8008b4e:	e7e7      	b.n	8008b20 <_printf_float+0x1a0>
 8008b50:	2900      	cmp	r1, #0
 8008b52:	bfd4      	ite	le
 8008b54:	f1c1 0202 	rsble	r2, r1, #2
 8008b58:	2201      	movgt	r2, #1
 8008b5a:	4413      	add	r3, r2
 8008b5c:	e7e0      	b.n	8008b20 <_printf_float+0x1a0>
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	055a      	lsls	r2, r3, #21
 8008b62:	d407      	bmi.n	8008b74 <_printf_float+0x1f4>
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	4642      	mov	r2, r8
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	47b8      	blx	r7
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d12c      	bne.n	8008bcc <_printf_float+0x24c>
 8008b72:	e764      	b.n	8008a3e <_printf_float+0xbe>
 8008b74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b78:	f240 80e0 	bls.w	8008d3c <_printf_float+0x3bc>
 8008b7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b80:	2200      	movs	r2, #0
 8008b82:	2300      	movs	r3, #0
 8008b84:	f7f7 ffa8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d034      	beq.n	8008bf6 <_printf_float+0x276>
 8008b8c:	4a37      	ldr	r2, [pc, #220]	; (8008c6c <_printf_float+0x2ec>)
 8008b8e:	2301      	movs	r3, #1
 8008b90:	4631      	mov	r1, r6
 8008b92:	4628      	mov	r0, r5
 8008b94:	47b8      	blx	r7
 8008b96:	3001      	adds	r0, #1
 8008b98:	f43f af51 	beq.w	8008a3e <_printf_float+0xbe>
 8008b9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	db02      	blt.n	8008baa <_printf_float+0x22a>
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	07d8      	lsls	r0, r3, #31
 8008ba8:	d510      	bpl.n	8008bcc <_printf_float+0x24c>
 8008baa:	ee18 3a10 	vmov	r3, s16
 8008bae:	4652      	mov	r2, sl
 8008bb0:	4631      	mov	r1, r6
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	47b8      	blx	r7
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	f43f af41 	beq.w	8008a3e <_printf_float+0xbe>
 8008bbc:	f04f 0800 	mov.w	r8, #0
 8008bc0:	f104 091a 	add.w	r9, r4, #26
 8008bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	4543      	cmp	r3, r8
 8008bca:	dc09      	bgt.n	8008be0 <_printf_float+0x260>
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	079b      	lsls	r3, r3, #30
 8008bd0:	f100 8107 	bmi.w	8008de2 <_printf_float+0x462>
 8008bd4:	68e0      	ldr	r0, [r4, #12]
 8008bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bd8:	4298      	cmp	r0, r3
 8008bda:	bfb8      	it	lt
 8008bdc:	4618      	movlt	r0, r3
 8008bde:	e730      	b.n	8008a42 <_printf_float+0xc2>
 8008be0:	2301      	movs	r3, #1
 8008be2:	464a      	mov	r2, r9
 8008be4:	4631      	mov	r1, r6
 8008be6:	4628      	mov	r0, r5
 8008be8:	47b8      	blx	r7
 8008bea:	3001      	adds	r0, #1
 8008bec:	f43f af27 	beq.w	8008a3e <_printf_float+0xbe>
 8008bf0:	f108 0801 	add.w	r8, r8, #1
 8008bf4:	e7e6      	b.n	8008bc4 <_printf_float+0x244>
 8008bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	dc39      	bgt.n	8008c70 <_printf_float+0x2f0>
 8008bfc:	4a1b      	ldr	r2, [pc, #108]	; (8008c6c <_printf_float+0x2ec>)
 8008bfe:	2301      	movs	r3, #1
 8008c00:	4631      	mov	r1, r6
 8008c02:	4628      	mov	r0, r5
 8008c04:	47b8      	blx	r7
 8008c06:	3001      	adds	r0, #1
 8008c08:	f43f af19 	beq.w	8008a3e <_printf_float+0xbe>
 8008c0c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008c10:	4313      	orrs	r3, r2
 8008c12:	d102      	bne.n	8008c1a <_printf_float+0x29a>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	07d9      	lsls	r1, r3, #31
 8008c18:	d5d8      	bpl.n	8008bcc <_printf_float+0x24c>
 8008c1a:	ee18 3a10 	vmov	r3, s16
 8008c1e:	4652      	mov	r2, sl
 8008c20:	4631      	mov	r1, r6
 8008c22:	4628      	mov	r0, r5
 8008c24:	47b8      	blx	r7
 8008c26:	3001      	adds	r0, #1
 8008c28:	f43f af09 	beq.w	8008a3e <_printf_float+0xbe>
 8008c2c:	f04f 0900 	mov.w	r9, #0
 8008c30:	f104 0a1a 	add.w	sl, r4, #26
 8008c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c36:	425b      	negs	r3, r3
 8008c38:	454b      	cmp	r3, r9
 8008c3a:	dc01      	bgt.n	8008c40 <_printf_float+0x2c0>
 8008c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3e:	e792      	b.n	8008b66 <_printf_float+0x1e6>
 8008c40:	2301      	movs	r3, #1
 8008c42:	4652      	mov	r2, sl
 8008c44:	4631      	mov	r1, r6
 8008c46:	4628      	mov	r0, r5
 8008c48:	47b8      	blx	r7
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	f43f aef7 	beq.w	8008a3e <_printf_float+0xbe>
 8008c50:	f109 0901 	add.w	r9, r9, #1
 8008c54:	e7ee      	b.n	8008c34 <_printf_float+0x2b4>
 8008c56:	bf00      	nop
 8008c58:	7fefffff 	.word	0x7fefffff
 8008c5c:	0800b1e8 	.word	0x0800b1e8
 8008c60:	0800b1ec 	.word	0x0800b1ec
 8008c64:	0800b1f0 	.word	0x0800b1f0
 8008c68:	0800b1f4 	.word	0x0800b1f4
 8008c6c:	0800b1f8 	.word	0x0800b1f8
 8008c70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c74:	429a      	cmp	r2, r3
 8008c76:	bfa8      	it	ge
 8008c78:	461a      	movge	r2, r3
 8008c7a:	2a00      	cmp	r2, #0
 8008c7c:	4691      	mov	r9, r2
 8008c7e:	dc37      	bgt.n	8008cf0 <_printf_float+0x370>
 8008c80:	f04f 0b00 	mov.w	fp, #0
 8008c84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c88:	f104 021a 	add.w	r2, r4, #26
 8008c8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c8e:	9305      	str	r3, [sp, #20]
 8008c90:	eba3 0309 	sub.w	r3, r3, r9
 8008c94:	455b      	cmp	r3, fp
 8008c96:	dc33      	bgt.n	8008d00 <_printf_float+0x380>
 8008c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	db3b      	blt.n	8008d18 <_printf_float+0x398>
 8008ca0:	6823      	ldr	r3, [r4, #0]
 8008ca2:	07da      	lsls	r2, r3, #31
 8008ca4:	d438      	bmi.n	8008d18 <_printf_float+0x398>
 8008ca6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008caa:	eba2 0903 	sub.w	r9, r2, r3
 8008cae:	9b05      	ldr	r3, [sp, #20]
 8008cb0:	1ad2      	subs	r2, r2, r3
 8008cb2:	4591      	cmp	r9, r2
 8008cb4:	bfa8      	it	ge
 8008cb6:	4691      	movge	r9, r2
 8008cb8:	f1b9 0f00 	cmp.w	r9, #0
 8008cbc:	dc35      	bgt.n	8008d2a <_printf_float+0x3aa>
 8008cbe:	f04f 0800 	mov.w	r8, #0
 8008cc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cc6:	f104 0a1a 	add.w	sl, r4, #26
 8008cca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cce:	1a9b      	subs	r3, r3, r2
 8008cd0:	eba3 0309 	sub.w	r3, r3, r9
 8008cd4:	4543      	cmp	r3, r8
 8008cd6:	f77f af79 	ble.w	8008bcc <_printf_float+0x24c>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	4652      	mov	r2, sl
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	47b8      	blx	r7
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	f43f aeaa 	beq.w	8008a3e <_printf_float+0xbe>
 8008cea:	f108 0801 	add.w	r8, r8, #1
 8008cee:	e7ec      	b.n	8008cca <_printf_float+0x34a>
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	4642      	mov	r2, r8
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	47b8      	blx	r7
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	d1c0      	bne.n	8008c80 <_printf_float+0x300>
 8008cfe:	e69e      	b.n	8008a3e <_printf_float+0xbe>
 8008d00:	2301      	movs	r3, #1
 8008d02:	4631      	mov	r1, r6
 8008d04:	4628      	mov	r0, r5
 8008d06:	9205      	str	r2, [sp, #20]
 8008d08:	47b8      	blx	r7
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	f43f ae97 	beq.w	8008a3e <_printf_float+0xbe>
 8008d10:	9a05      	ldr	r2, [sp, #20]
 8008d12:	f10b 0b01 	add.w	fp, fp, #1
 8008d16:	e7b9      	b.n	8008c8c <_printf_float+0x30c>
 8008d18:	ee18 3a10 	vmov	r3, s16
 8008d1c:	4652      	mov	r2, sl
 8008d1e:	4631      	mov	r1, r6
 8008d20:	4628      	mov	r0, r5
 8008d22:	47b8      	blx	r7
 8008d24:	3001      	adds	r0, #1
 8008d26:	d1be      	bne.n	8008ca6 <_printf_float+0x326>
 8008d28:	e689      	b.n	8008a3e <_printf_float+0xbe>
 8008d2a:	9a05      	ldr	r2, [sp, #20]
 8008d2c:	464b      	mov	r3, r9
 8008d2e:	4442      	add	r2, r8
 8008d30:	4631      	mov	r1, r6
 8008d32:	4628      	mov	r0, r5
 8008d34:	47b8      	blx	r7
 8008d36:	3001      	adds	r0, #1
 8008d38:	d1c1      	bne.n	8008cbe <_printf_float+0x33e>
 8008d3a:	e680      	b.n	8008a3e <_printf_float+0xbe>
 8008d3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d3e:	2a01      	cmp	r2, #1
 8008d40:	dc01      	bgt.n	8008d46 <_printf_float+0x3c6>
 8008d42:	07db      	lsls	r3, r3, #31
 8008d44:	d53a      	bpl.n	8008dbc <_printf_float+0x43c>
 8008d46:	2301      	movs	r3, #1
 8008d48:	4642      	mov	r2, r8
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	47b8      	blx	r7
 8008d50:	3001      	adds	r0, #1
 8008d52:	f43f ae74 	beq.w	8008a3e <_printf_float+0xbe>
 8008d56:	ee18 3a10 	vmov	r3, s16
 8008d5a:	4652      	mov	r2, sl
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b8      	blx	r7
 8008d62:	3001      	adds	r0, #1
 8008d64:	f43f ae6b 	beq.w	8008a3e <_printf_float+0xbe>
 8008d68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008d74:	f7f7 feb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d78:	b9d8      	cbnz	r0, 8008db2 <_printf_float+0x432>
 8008d7a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008d7e:	f108 0201 	add.w	r2, r8, #1
 8008d82:	4631      	mov	r1, r6
 8008d84:	4628      	mov	r0, r5
 8008d86:	47b8      	blx	r7
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d10e      	bne.n	8008daa <_printf_float+0x42a>
 8008d8c:	e657      	b.n	8008a3e <_printf_float+0xbe>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	4652      	mov	r2, sl
 8008d92:	4631      	mov	r1, r6
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b8      	blx	r7
 8008d98:	3001      	adds	r0, #1
 8008d9a:	f43f ae50 	beq.w	8008a3e <_printf_float+0xbe>
 8008d9e:	f108 0801 	add.w	r8, r8, #1
 8008da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da4:	3b01      	subs	r3, #1
 8008da6:	4543      	cmp	r3, r8
 8008da8:	dcf1      	bgt.n	8008d8e <_printf_float+0x40e>
 8008daa:	464b      	mov	r3, r9
 8008dac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008db0:	e6da      	b.n	8008b68 <_printf_float+0x1e8>
 8008db2:	f04f 0800 	mov.w	r8, #0
 8008db6:	f104 0a1a 	add.w	sl, r4, #26
 8008dba:	e7f2      	b.n	8008da2 <_printf_float+0x422>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	4642      	mov	r2, r8
 8008dc0:	e7df      	b.n	8008d82 <_printf_float+0x402>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	464a      	mov	r2, r9
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	4628      	mov	r0, r5
 8008dca:	47b8      	blx	r7
 8008dcc:	3001      	adds	r0, #1
 8008dce:	f43f ae36 	beq.w	8008a3e <_printf_float+0xbe>
 8008dd2:	f108 0801 	add.w	r8, r8, #1
 8008dd6:	68e3      	ldr	r3, [r4, #12]
 8008dd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dda:	1a5b      	subs	r3, r3, r1
 8008ddc:	4543      	cmp	r3, r8
 8008dde:	dcf0      	bgt.n	8008dc2 <_printf_float+0x442>
 8008de0:	e6f8      	b.n	8008bd4 <_printf_float+0x254>
 8008de2:	f04f 0800 	mov.w	r8, #0
 8008de6:	f104 0919 	add.w	r9, r4, #25
 8008dea:	e7f4      	b.n	8008dd6 <_printf_float+0x456>

08008dec <_printf_common>:
 8008dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df0:	4616      	mov	r6, r2
 8008df2:	4699      	mov	r9, r3
 8008df4:	688a      	ldr	r2, [r1, #8]
 8008df6:	690b      	ldr	r3, [r1, #16]
 8008df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	bfb8      	it	lt
 8008e00:	4613      	movlt	r3, r2
 8008e02:	6033      	str	r3, [r6, #0]
 8008e04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e08:	4607      	mov	r7, r0
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	b10a      	cbz	r2, 8008e12 <_printf_common+0x26>
 8008e0e:	3301      	adds	r3, #1
 8008e10:	6033      	str	r3, [r6, #0]
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	0699      	lsls	r1, r3, #26
 8008e16:	bf42      	ittt	mi
 8008e18:	6833      	ldrmi	r3, [r6, #0]
 8008e1a:	3302      	addmi	r3, #2
 8008e1c:	6033      	strmi	r3, [r6, #0]
 8008e1e:	6825      	ldr	r5, [r4, #0]
 8008e20:	f015 0506 	ands.w	r5, r5, #6
 8008e24:	d106      	bne.n	8008e34 <_printf_common+0x48>
 8008e26:	f104 0a19 	add.w	sl, r4, #25
 8008e2a:	68e3      	ldr	r3, [r4, #12]
 8008e2c:	6832      	ldr	r2, [r6, #0]
 8008e2e:	1a9b      	subs	r3, r3, r2
 8008e30:	42ab      	cmp	r3, r5
 8008e32:	dc26      	bgt.n	8008e82 <_printf_common+0x96>
 8008e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e38:	1e13      	subs	r3, r2, #0
 8008e3a:	6822      	ldr	r2, [r4, #0]
 8008e3c:	bf18      	it	ne
 8008e3e:	2301      	movne	r3, #1
 8008e40:	0692      	lsls	r2, r2, #26
 8008e42:	d42b      	bmi.n	8008e9c <_printf_common+0xb0>
 8008e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e48:	4649      	mov	r1, r9
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	47c0      	blx	r8
 8008e4e:	3001      	adds	r0, #1
 8008e50:	d01e      	beq.n	8008e90 <_printf_common+0xa4>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	6922      	ldr	r2, [r4, #16]
 8008e56:	f003 0306 	and.w	r3, r3, #6
 8008e5a:	2b04      	cmp	r3, #4
 8008e5c:	bf02      	ittt	eq
 8008e5e:	68e5      	ldreq	r5, [r4, #12]
 8008e60:	6833      	ldreq	r3, [r6, #0]
 8008e62:	1aed      	subeq	r5, r5, r3
 8008e64:	68a3      	ldr	r3, [r4, #8]
 8008e66:	bf0c      	ite	eq
 8008e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e6c:	2500      	movne	r5, #0
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	bfc4      	itt	gt
 8008e72:	1a9b      	subgt	r3, r3, r2
 8008e74:	18ed      	addgt	r5, r5, r3
 8008e76:	2600      	movs	r6, #0
 8008e78:	341a      	adds	r4, #26
 8008e7a:	42b5      	cmp	r5, r6
 8008e7c:	d11a      	bne.n	8008eb4 <_printf_common+0xc8>
 8008e7e:	2000      	movs	r0, #0
 8008e80:	e008      	b.n	8008e94 <_printf_common+0xa8>
 8008e82:	2301      	movs	r3, #1
 8008e84:	4652      	mov	r2, sl
 8008e86:	4649      	mov	r1, r9
 8008e88:	4638      	mov	r0, r7
 8008e8a:	47c0      	blx	r8
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	d103      	bne.n	8008e98 <_printf_common+0xac>
 8008e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e98:	3501      	adds	r5, #1
 8008e9a:	e7c6      	b.n	8008e2a <_printf_common+0x3e>
 8008e9c:	18e1      	adds	r1, r4, r3
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	2030      	movs	r0, #48	; 0x30
 8008ea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ea6:	4422      	add	r2, r4
 8008ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008eb0:	3302      	adds	r3, #2
 8008eb2:	e7c7      	b.n	8008e44 <_printf_common+0x58>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	4622      	mov	r2, r4
 8008eb8:	4649      	mov	r1, r9
 8008eba:	4638      	mov	r0, r7
 8008ebc:	47c0      	blx	r8
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	d0e6      	beq.n	8008e90 <_printf_common+0xa4>
 8008ec2:	3601      	adds	r6, #1
 8008ec4:	e7d9      	b.n	8008e7a <_printf_common+0x8e>
	...

08008ec8 <_printf_i>:
 8008ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ecc:	7e0f      	ldrb	r7, [r1, #24]
 8008ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ed0:	2f78      	cmp	r7, #120	; 0x78
 8008ed2:	4691      	mov	r9, r2
 8008ed4:	4680      	mov	r8, r0
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	469a      	mov	sl, r3
 8008eda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ede:	d807      	bhi.n	8008ef0 <_printf_i+0x28>
 8008ee0:	2f62      	cmp	r7, #98	; 0x62
 8008ee2:	d80a      	bhi.n	8008efa <_printf_i+0x32>
 8008ee4:	2f00      	cmp	r7, #0
 8008ee6:	f000 80d4 	beq.w	8009092 <_printf_i+0x1ca>
 8008eea:	2f58      	cmp	r7, #88	; 0x58
 8008eec:	f000 80c0 	beq.w	8009070 <_printf_i+0x1a8>
 8008ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ef8:	e03a      	b.n	8008f70 <_printf_i+0xa8>
 8008efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008efe:	2b15      	cmp	r3, #21
 8008f00:	d8f6      	bhi.n	8008ef0 <_printf_i+0x28>
 8008f02:	a101      	add	r1, pc, #4	; (adr r1, 8008f08 <_printf_i+0x40>)
 8008f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f08:	08008f61 	.word	0x08008f61
 8008f0c:	08008f75 	.word	0x08008f75
 8008f10:	08008ef1 	.word	0x08008ef1
 8008f14:	08008ef1 	.word	0x08008ef1
 8008f18:	08008ef1 	.word	0x08008ef1
 8008f1c:	08008ef1 	.word	0x08008ef1
 8008f20:	08008f75 	.word	0x08008f75
 8008f24:	08008ef1 	.word	0x08008ef1
 8008f28:	08008ef1 	.word	0x08008ef1
 8008f2c:	08008ef1 	.word	0x08008ef1
 8008f30:	08008ef1 	.word	0x08008ef1
 8008f34:	08009079 	.word	0x08009079
 8008f38:	08008fa1 	.word	0x08008fa1
 8008f3c:	08009033 	.word	0x08009033
 8008f40:	08008ef1 	.word	0x08008ef1
 8008f44:	08008ef1 	.word	0x08008ef1
 8008f48:	0800909b 	.word	0x0800909b
 8008f4c:	08008ef1 	.word	0x08008ef1
 8008f50:	08008fa1 	.word	0x08008fa1
 8008f54:	08008ef1 	.word	0x08008ef1
 8008f58:	08008ef1 	.word	0x08008ef1
 8008f5c:	0800903b 	.word	0x0800903b
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	1d1a      	adds	r2, r3, #4
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	602a      	str	r2, [r5, #0]
 8008f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f70:	2301      	movs	r3, #1
 8008f72:	e09f      	b.n	80090b4 <_printf_i+0x1ec>
 8008f74:	6820      	ldr	r0, [r4, #0]
 8008f76:	682b      	ldr	r3, [r5, #0]
 8008f78:	0607      	lsls	r7, r0, #24
 8008f7a:	f103 0104 	add.w	r1, r3, #4
 8008f7e:	6029      	str	r1, [r5, #0]
 8008f80:	d501      	bpl.n	8008f86 <_printf_i+0xbe>
 8008f82:	681e      	ldr	r6, [r3, #0]
 8008f84:	e003      	b.n	8008f8e <_printf_i+0xc6>
 8008f86:	0646      	lsls	r6, r0, #25
 8008f88:	d5fb      	bpl.n	8008f82 <_printf_i+0xba>
 8008f8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f8e:	2e00      	cmp	r6, #0
 8008f90:	da03      	bge.n	8008f9a <_printf_i+0xd2>
 8008f92:	232d      	movs	r3, #45	; 0x2d
 8008f94:	4276      	negs	r6, r6
 8008f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f9a:	485a      	ldr	r0, [pc, #360]	; (8009104 <_printf_i+0x23c>)
 8008f9c:	230a      	movs	r3, #10
 8008f9e:	e012      	b.n	8008fc6 <_printf_i+0xfe>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	6820      	ldr	r0, [r4, #0]
 8008fa4:	1d19      	adds	r1, r3, #4
 8008fa6:	6029      	str	r1, [r5, #0]
 8008fa8:	0605      	lsls	r5, r0, #24
 8008faa:	d501      	bpl.n	8008fb0 <_printf_i+0xe8>
 8008fac:	681e      	ldr	r6, [r3, #0]
 8008fae:	e002      	b.n	8008fb6 <_printf_i+0xee>
 8008fb0:	0641      	lsls	r1, r0, #25
 8008fb2:	d5fb      	bpl.n	8008fac <_printf_i+0xe4>
 8008fb4:	881e      	ldrh	r6, [r3, #0]
 8008fb6:	4853      	ldr	r0, [pc, #332]	; (8009104 <_printf_i+0x23c>)
 8008fb8:	2f6f      	cmp	r7, #111	; 0x6f
 8008fba:	bf0c      	ite	eq
 8008fbc:	2308      	moveq	r3, #8
 8008fbe:	230a      	movne	r3, #10
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fc6:	6865      	ldr	r5, [r4, #4]
 8008fc8:	60a5      	str	r5, [r4, #8]
 8008fca:	2d00      	cmp	r5, #0
 8008fcc:	bfa2      	ittt	ge
 8008fce:	6821      	ldrge	r1, [r4, #0]
 8008fd0:	f021 0104 	bicge.w	r1, r1, #4
 8008fd4:	6021      	strge	r1, [r4, #0]
 8008fd6:	b90e      	cbnz	r6, 8008fdc <_printf_i+0x114>
 8008fd8:	2d00      	cmp	r5, #0
 8008fda:	d04b      	beq.n	8009074 <_printf_i+0x1ac>
 8008fdc:	4615      	mov	r5, r2
 8008fde:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fe2:	fb03 6711 	mls	r7, r3, r1, r6
 8008fe6:	5dc7      	ldrb	r7, [r0, r7]
 8008fe8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fec:	4637      	mov	r7, r6
 8008fee:	42bb      	cmp	r3, r7
 8008ff0:	460e      	mov	r6, r1
 8008ff2:	d9f4      	bls.n	8008fde <_printf_i+0x116>
 8008ff4:	2b08      	cmp	r3, #8
 8008ff6:	d10b      	bne.n	8009010 <_printf_i+0x148>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	07de      	lsls	r6, r3, #31
 8008ffc:	d508      	bpl.n	8009010 <_printf_i+0x148>
 8008ffe:	6923      	ldr	r3, [r4, #16]
 8009000:	6861      	ldr	r1, [r4, #4]
 8009002:	4299      	cmp	r1, r3
 8009004:	bfde      	ittt	le
 8009006:	2330      	movle	r3, #48	; 0x30
 8009008:	f805 3c01 	strble.w	r3, [r5, #-1]
 800900c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009010:	1b52      	subs	r2, r2, r5
 8009012:	6122      	str	r2, [r4, #16]
 8009014:	f8cd a000 	str.w	sl, [sp]
 8009018:	464b      	mov	r3, r9
 800901a:	aa03      	add	r2, sp, #12
 800901c:	4621      	mov	r1, r4
 800901e:	4640      	mov	r0, r8
 8009020:	f7ff fee4 	bl	8008dec <_printf_common>
 8009024:	3001      	adds	r0, #1
 8009026:	d14a      	bne.n	80090be <_printf_i+0x1f6>
 8009028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800902c:	b004      	add	sp, #16
 800902e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	f043 0320 	orr.w	r3, r3, #32
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	4833      	ldr	r0, [pc, #204]	; (8009108 <_printf_i+0x240>)
 800903c:	2778      	movs	r7, #120	; 0x78
 800903e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	6829      	ldr	r1, [r5, #0]
 8009046:	061f      	lsls	r7, r3, #24
 8009048:	f851 6b04 	ldr.w	r6, [r1], #4
 800904c:	d402      	bmi.n	8009054 <_printf_i+0x18c>
 800904e:	065f      	lsls	r7, r3, #25
 8009050:	bf48      	it	mi
 8009052:	b2b6      	uxthmi	r6, r6
 8009054:	07df      	lsls	r7, r3, #31
 8009056:	bf48      	it	mi
 8009058:	f043 0320 	orrmi.w	r3, r3, #32
 800905c:	6029      	str	r1, [r5, #0]
 800905e:	bf48      	it	mi
 8009060:	6023      	strmi	r3, [r4, #0]
 8009062:	b91e      	cbnz	r6, 800906c <_printf_i+0x1a4>
 8009064:	6823      	ldr	r3, [r4, #0]
 8009066:	f023 0320 	bic.w	r3, r3, #32
 800906a:	6023      	str	r3, [r4, #0]
 800906c:	2310      	movs	r3, #16
 800906e:	e7a7      	b.n	8008fc0 <_printf_i+0xf8>
 8009070:	4824      	ldr	r0, [pc, #144]	; (8009104 <_printf_i+0x23c>)
 8009072:	e7e4      	b.n	800903e <_printf_i+0x176>
 8009074:	4615      	mov	r5, r2
 8009076:	e7bd      	b.n	8008ff4 <_printf_i+0x12c>
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	6826      	ldr	r6, [r4, #0]
 800907c:	6961      	ldr	r1, [r4, #20]
 800907e:	1d18      	adds	r0, r3, #4
 8009080:	6028      	str	r0, [r5, #0]
 8009082:	0635      	lsls	r5, r6, #24
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	d501      	bpl.n	800908c <_printf_i+0x1c4>
 8009088:	6019      	str	r1, [r3, #0]
 800908a:	e002      	b.n	8009092 <_printf_i+0x1ca>
 800908c:	0670      	lsls	r0, r6, #25
 800908e:	d5fb      	bpl.n	8009088 <_printf_i+0x1c0>
 8009090:	8019      	strh	r1, [r3, #0]
 8009092:	2300      	movs	r3, #0
 8009094:	6123      	str	r3, [r4, #16]
 8009096:	4615      	mov	r5, r2
 8009098:	e7bc      	b.n	8009014 <_printf_i+0x14c>
 800909a:	682b      	ldr	r3, [r5, #0]
 800909c:	1d1a      	adds	r2, r3, #4
 800909e:	602a      	str	r2, [r5, #0]
 80090a0:	681d      	ldr	r5, [r3, #0]
 80090a2:	6862      	ldr	r2, [r4, #4]
 80090a4:	2100      	movs	r1, #0
 80090a6:	4628      	mov	r0, r5
 80090a8:	f7f7 f89a 	bl	80001e0 <memchr>
 80090ac:	b108      	cbz	r0, 80090b2 <_printf_i+0x1ea>
 80090ae:	1b40      	subs	r0, r0, r5
 80090b0:	6060      	str	r0, [r4, #4]
 80090b2:	6863      	ldr	r3, [r4, #4]
 80090b4:	6123      	str	r3, [r4, #16]
 80090b6:	2300      	movs	r3, #0
 80090b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090bc:	e7aa      	b.n	8009014 <_printf_i+0x14c>
 80090be:	6923      	ldr	r3, [r4, #16]
 80090c0:	462a      	mov	r2, r5
 80090c2:	4649      	mov	r1, r9
 80090c4:	4640      	mov	r0, r8
 80090c6:	47d0      	blx	sl
 80090c8:	3001      	adds	r0, #1
 80090ca:	d0ad      	beq.n	8009028 <_printf_i+0x160>
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	079b      	lsls	r3, r3, #30
 80090d0:	d413      	bmi.n	80090fa <_printf_i+0x232>
 80090d2:	68e0      	ldr	r0, [r4, #12]
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	4298      	cmp	r0, r3
 80090d8:	bfb8      	it	lt
 80090da:	4618      	movlt	r0, r3
 80090dc:	e7a6      	b.n	800902c <_printf_i+0x164>
 80090de:	2301      	movs	r3, #1
 80090e0:	4632      	mov	r2, r6
 80090e2:	4649      	mov	r1, r9
 80090e4:	4640      	mov	r0, r8
 80090e6:	47d0      	blx	sl
 80090e8:	3001      	adds	r0, #1
 80090ea:	d09d      	beq.n	8009028 <_printf_i+0x160>
 80090ec:	3501      	adds	r5, #1
 80090ee:	68e3      	ldr	r3, [r4, #12]
 80090f0:	9903      	ldr	r1, [sp, #12]
 80090f2:	1a5b      	subs	r3, r3, r1
 80090f4:	42ab      	cmp	r3, r5
 80090f6:	dcf2      	bgt.n	80090de <_printf_i+0x216>
 80090f8:	e7eb      	b.n	80090d2 <_printf_i+0x20a>
 80090fa:	2500      	movs	r5, #0
 80090fc:	f104 0619 	add.w	r6, r4, #25
 8009100:	e7f5      	b.n	80090ee <_printf_i+0x226>
 8009102:	bf00      	nop
 8009104:	0800b1fa 	.word	0x0800b1fa
 8009108:	0800b20b 	.word	0x0800b20b

0800910c <std>:
 800910c:	2300      	movs	r3, #0
 800910e:	b510      	push	{r4, lr}
 8009110:	4604      	mov	r4, r0
 8009112:	e9c0 3300 	strd	r3, r3, [r0]
 8009116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800911a:	6083      	str	r3, [r0, #8]
 800911c:	8181      	strh	r1, [r0, #12]
 800911e:	6643      	str	r3, [r0, #100]	; 0x64
 8009120:	81c2      	strh	r2, [r0, #14]
 8009122:	6183      	str	r3, [r0, #24]
 8009124:	4619      	mov	r1, r3
 8009126:	2208      	movs	r2, #8
 8009128:	305c      	adds	r0, #92	; 0x5c
 800912a:	f000 f8f4 	bl	8009316 <memset>
 800912e:	4b0d      	ldr	r3, [pc, #52]	; (8009164 <std+0x58>)
 8009130:	6263      	str	r3, [r4, #36]	; 0x24
 8009132:	4b0d      	ldr	r3, [pc, #52]	; (8009168 <std+0x5c>)
 8009134:	62a3      	str	r3, [r4, #40]	; 0x28
 8009136:	4b0d      	ldr	r3, [pc, #52]	; (800916c <std+0x60>)
 8009138:	62e3      	str	r3, [r4, #44]	; 0x2c
 800913a:	4b0d      	ldr	r3, [pc, #52]	; (8009170 <std+0x64>)
 800913c:	6323      	str	r3, [r4, #48]	; 0x30
 800913e:	4b0d      	ldr	r3, [pc, #52]	; (8009174 <std+0x68>)
 8009140:	6224      	str	r4, [r4, #32]
 8009142:	429c      	cmp	r4, r3
 8009144:	d006      	beq.n	8009154 <std+0x48>
 8009146:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800914a:	4294      	cmp	r4, r2
 800914c:	d002      	beq.n	8009154 <std+0x48>
 800914e:	33d0      	adds	r3, #208	; 0xd0
 8009150:	429c      	cmp	r4, r3
 8009152:	d105      	bne.n	8009160 <std+0x54>
 8009154:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800915c:	f000 b958 	b.w	8009410 <__retarget_lock_init_recursive>
 8009160:	bd10      	pop	{r4, pc}
 8009162:	bf00      	nop
 8009164:	08009291 	.word	0x08009291
 8009168:	080092b3 	.word	0x080092b3
 800916c:	080092eb 	.word	0x080092eb
 8009170:	0800930f 	.word	0x0800930f
 8009174:	20010674 	.word	0x20010674

08009178 <stdio_exit_handler>:
 8009178:	4a02      	ldr	r2, [pc, #8]	; (8009184 <stdio_exit_handler+0xc>)
 800917a:	4903      	ldr	r1, [pc, #12]	; (8009188 <stdio_exit_handler+0x10>)
 800917c:	4803      	ldr	r0, [pc, #12]	; (800918c <stdio_exit_handler+0x14>)
 800917e:	f000 b869 	b.w	8009254 <_fwalk_sglue>
 8009182:	bf00      	nop
 8009184:	200000a8 	.word	0x200000a8
 8009188:	0800ab11 	.word	0x0800ab11
 800918c:	200000b4 	.word	0x200000b4

08009190 <cleanup_stdio>:
 8009190:	6841      	ldr	r1, [r0, #4]
 8009192:	4b0c      	ldr	r3, [pc, #48]	; (80091c4 <cleanup_stdio+0x34>)
 8009194:	4299      	cmp	r1, r3
 8009196:	b510      	push	{r4, lr}
 8009198:	4604      	mov	r4, r0
 800919a:	d001      	beq.n	80091a0 <cleanup_stdio+0x10>
 800919c:	f001 fcb8 	bl	800ab10 <_fflush_r>
 80091a0:	68a1      	ldr	r1, [r4, #8]
 80091a2:	4b09      	ldr	r3, [pc, #36]	; (80091c8 <cleanup_stdio+0x38>)
 80091a4:	4299      	cmp	r1, r3
 80091a6:	d002      	beq.n	80091ae <cleanup_stdio+0x1e>
 80091a8:	4620      	mov	r0, r4
 80091aa:	f001 fcb1 	bl	800ab10 <_fflush_r>
 80091ae:	68e1      	ldr	r1, [r4, #12]
 80091b0:	4b06      	ldr	r3, [pc, #24]	; (80091cc <cleanup_stdio+0x3c>)
 80091b2:	4299      	cmp	r1, r3
 80091b4:	d004      	beq.n	80091c0 <cleanup_stdio+0x30>
 80091b6:	4620      	mov	r0, r4
 80091b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091bc:	f001 bca8 	b.w	800ab10 <_fflush_r>
 80091c0:	bd10      	pop	{r4, pc}
 80091c2:	bf00      	nop
 80091c4:	20010674 	.word	0x20010674
 80091c8:	200106dc 	.word	0x200106dc
 80091cc:	20010744 	.word	0x20010744

080091d0 <global_stdio_init.part.0>:
 80091d0:	b510      	push	{r4, lr}
 80091d2:	4b0b      	ldr	r3, [pc, #44]	; (8009200 <global_stdio_init.part.0+0x30>)
 80091d4:	4c0b      	ldr	r4, [pc, #44]	; (8009204 <global_stdio_init.part.0+0x34>)
 80091d6:	4a0c      	ldr	r2, [pc, #48]	; (8009208 <global_stdio_init.part.0+0x38>)
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	4620      	mov	r0, r4
 80091dc:	2200      	movs	r2, #0
 80091de:	2104      	movs	r1, #4
 80091e0:	f7ff ff94 	bl	800910c <std>
 80091e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80091e8:	2201      	movs	r2, #1
 80091ea:	2109      	movs	r1, #9
 80091ec:	f7ff ff8e 	bl	800910c <std>
 80091f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80091f4:	2202      	movs	r2, #2
 80091f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091fa:	2112      	movs	r1, #18
 80091fc:	f7ff bf86 	b.w	800910c <std>
 8009200:	200107ac 	.word	0x200107ac
 8009204:	20010674 	.word	0x20010674
 8009208:	08009179 	.word	0x08009179

0800920c <__sfp_lock_acquire>:
 800920c:	4801      	ldr	r0, [pc, #4]	; (8009214 <__sfp_lock_acquire+0x8>)
 800920e:	f000 b900 	b.w	8009412 <__retarget_lock_acquire_recursive>
 8009212:	bf00      	nop
 8009214:	200107b5 	.word	0x200107b5

08009218 <__sfp_lock_release>:
 8009218:	4801      	ldr	r0, [pc, #4]	; (8009220 <__sfp_lock_release+0x8>)
 800921a:	f000 b8fb 	b.w	8009414 <__retarget_lock_release_recursive>
 800921e:	bf00      	nop
 8009220:	200107b5 	.word	0x200107b5

08009224 <__sinit>:
 8009224:	b510      	push	{r4, lr}
 8009226:	4604      	mov	r4, r0
 8009228:	f7ff fff0 	bl	800920c <__sfp_lock_acquire>
 800922c:	6a23      	ldr	r3, [r4, #32]
 800922e:	b11b      	cbz	r3, 8009238 <__sinit+0x14>
 8009230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009234:	f7ff bff0 	b.w	8009218 <__sfp_lock_release>
 8009238:	4b04      	ldr	r3, [pc, #16]	; (800924c <__sinit+0x28>)
 800923a:	6223      	str	r3, [r4, #32]
 800923c:	4b04      	ldr	r3, [pc, #16]	; (8009250 <__sinit+0x2c>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1f5      	bne.n	8009230 <__sinit+0xc>
 8009244:	f7ff ffc4 	bl	80091d0 <global_stdio_init.part.0>
 8009248:	e7f2      	b.n	8009230 <__sinit+0xc>
 800924a:	bf00      	nop
 800924c:	08009191 	.word	0x08009191
 8009250:	200107ac 	.word	0x200107ac

08009254 <_fwalk_sglue>:
 8009254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009258:	4607      	mov	r7, r0
 800925a:	4688      	mov	r8, r1
 800925c:	4614      	mov	r4, r2
 800925e:	2600      	movs	r6, #0
 8009260:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009264:	f1b9 0901 	subs.w	r9, r9, #1
 8009268:	d505      	bpl.n	8009276 <_fwalk_sglue+0x22>
 800926a:	6824      	ldr	r4, [r4, #0]
 800926c:	2c00      	cmp	r4, #0
 800926e:	d1f7      	bne.n	8009260 <_fwalk_sglue+0xc>
 8009270:	4630      	mov	r0, r6
 8009272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009276:	89ab      	ldrh	r3, [r5, #12]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d907      	bls.n	800928c <_fwalk_sglue+0x38>
 800927c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009280:	3301      	adds	r3, #1
 8009282:	d003      	beq.n	800928c <_fwalk_sglue+0x38>
 8009284:	4629      	mov	r1, r5
 8009286:	4638      	mov	r0, r7
 8009288:	47c0      	blx	r8
 800928a:	4306      	orrs	r6, r0
 800928c:	3568      	adds	r5, #104	; 0x68
 800928e:	e7e9      	b.n	8009264 <_fwalk_sglue+0x10>

08009290 <__sread>:
 8009290:	b510      	push	{r4, lr}
 8009292:	460c      	mov	r4, r1
 8009294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009298:	f000 f86c 	bl	8009374 <_read_r>
 800929c:	2800      	cmp	r0, #0
 800929e:	bfab      	itete	ge
 80092a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092a2:	89a3      	ldrhlt	r3, [r4, #12]
 80092a4:	181b      	addge	r3, r3, r0
 80092a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092aa:	bfac      	ite	ge
 80092ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80092ae:	81a3      	strhlt	r3, [r4, #12]
 80092b0:	bd10      	pop	{r4, pc}

080092b2 <__swrite>:
 80092b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b6:	461f      	mov	r7, r3
 80092b8:	898b      	ldrh	r3, [r1, #12]
 80092ba:	05db      	lsls	r3, r3, #23
 80092bc:	4605      	mov	r5, r0
 80092be:	460c      	mov	r4, r1
 80092c0:	4616      	mov	r6, r2
 80092c2:	d505      	bpl.n	80092d0 <__swrite+0x1e>
 80092c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c8:	2302      	movs	r3, #2
 80092ca:	2200      	movs	r2, #0
 80092cc:	f000 f840 	bl	8009350 <_lseek_r>
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092da:	81a3      	strh	r3, [r4, #12]
 80092dc:	4632      	mov	r2, r6
 80092de:	463b      	mov	r3, r7
 80092e0:	4628      	mov	r0, r5
 80092e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092e6:	f000 b857 	b.w	8009398 <_write_r>

080092ea <__sseek>:
 80092ea:	b510      	push	{r4, lr}
 80092ec:	460c      	mov	r4, r1
 80092ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f2:	f000 f82d 	bl	8009350 <_lseek_r>
 80092f6:	1c43      	adds	r3, r0, #1
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	bf15      	itete	ne
 80092fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80092fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009302:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009306:	81a3      	strheq	r3, [r4, #12]
 8009308:	bf18      	it	ne
 800930a:	81a3      	strhne	r3, [r4, #12]
 800930c:	bd10      	pop	{r4, pc}

0800930e <__sclose>:
 800930e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009312:	f000 b80d 	b.w	8009330 <_close_r>

08009316 <memset>:
 8009316:	4402      	add	r2, r0
 8009318:	4603      	mov	r3, r0
 800931a:	4293      	cmp	r3, r2
 800931c:	d100      	bne.n	8009320 <memset+0xa>
 800931e:	4770      	bx	lr
 8009320:	f803 1b01 	strb.w	r1, [r3], #1
 8009324:	e7f9      	b.n	800931a <memset+0x4>
	...

08009328 <_localeconv_r>:
 8009328:	4800      	ldr	r0, [pc, #0]	; (800932c <_localeconv_r+0x4>)
 800932a:	4770      	bx	lr
 800932c:	200001f4 	.word	0x200001f4

08009330 <_close_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d06      	ldr	r5, [pc, #24]	; (800934c <_close_r+0x1c>)
 8009334:	2300      	movs	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	602b      	str	r3, [r5, #0]
 800933c:	f7f8 fea9 	bl	8002092 <_close>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d102      	bne.n	800934a <_close_r+0x1a>
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	b103      	cbz	r3, 800934a <_close_r+0x1a>
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	200107b0 	.word	0x200107b0

08009350 <_lseek_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4d07      	ldr	r5, [pc, #28]	; (8009370 <_lseek_r+0x20>)
 8009354:	4604      	mov	r4, r0
 8009356:	4608      	mov	r0, r1
 8009358:	4611      	mov	r1, r2
 800935a:	2200      	movs	r2, #0
 800935c:	602a      	str	r2, [r5, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	f7f8 febe 	bl	80020e0 <_lseek>
 8009364:	1c43      	adds	r3, r0, #1
 8009366:	d102      	bne.n	800936e <_lseek_r+0x1e>
 8009368:	682b      	ldr	r3, [r5, #0]
 800936a:	b103      	cbz	r3, 800936e <_lseek_r+0x1e>
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	200107b0 	.word	0x200107b0

08009374 <_read_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4d07      	ldr	r5, [pc, #28]	; (8009394 <_read_r+0x20>)
 8009378:	4604      	mov	r4, r0
 800937a:	4608      	mov	r0, r1
 800937c:	4611      	mov	r1, r2
 800937e:	2200      	movs	r2, #0
 8009380:	602a      	str	r2, [r5, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	f7f8 fe4c 	bl	8002020 <_read>
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	d102      	bne.n	8009392 <_read_r+0x1e>
 800938c:	682b      	ldr	r3, [r5, #0]
 800938e:	b103      	cbz	r3, 8009392 <_read_r+0x1e>
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	bd38      	pop	{r3, r4, r5, pc}
 8009394:	200107b0 	.word	0x200107b0

08009398 <_write_r>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	4d07      	ldr	r5, [pc, #28]	; (80093b8 <_write_r+0x20>)
 800939c:	4604      	mov	r4, r0
 800939e:	4608      	mov	r0, r1
 80093a0:	4611      	mov	r1, r2
 80093a2:	2200      	movs	r2, #0
 80093a4:	602a      	str	r2, [r5, #0]
 80093a6:	461a      	mov	r2, r3
 80093a8:	f7f8 fe57 	bl	800205a <_write>
 80093ac:	1c43      	adds	r3, r0, #1
 80093ae:	d102      	bne.n	80093b6 <_write_r+0x1e>
 80093b0:	682b      	ldr	r3, [r5, #0]
 80093b2:	b103      	cbz	r3, 80093b6 <_write_r+0x1e>
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	bd38      	pop	{r3, r4, r5, pc}
 80093b8:	200107b0 	.word	0x200107b0

080093bc <__errno>:
 80093bc:	4b01      	ldr	r3, [pc, #4]	; (80093c4 <__errno+0x8>)
 80093be:	6818      	ldr	r0, [r3, #0]
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	20000100 	.word	0x20000100

080093c8 <__libc_init_array>:
 80093c8:	b570      	push	{r4, r5, r6, lr}
 80093ca:	4d0d      	ldr	r5, [pc, #52]	; (8009400 <__libc_init_array+0x38>)
 80093cc:	4c0d      	ldr	r4, [pc, #52]	; (8009404 <__libc_init_array+0x3c>)
 80093ce:	1b64      	subs	r4, r4, r5
 80093d0:	10a4      	asrs	r4, r4, #2
 80093d2:	2600      	movs	r6, #0
 80093d4:	42a6      	cmp	r6, r4
 80093d6:	d109      	bne.n	80093ec <__libc_init_array+0x24>
 80093d8:	4d0b      	ldr	r5, [pc, #44]	; (8009408 <__libc_init_array+0x40>)
 80093da:	4c0c      	ldr	r4, [pc, #48]	; (800940c <__libc_init_array+0x44>)
 80093dc:	f001 feec 	bl	800b1b8 <_init>
 80093e0:	1b64      	subs	r4, r4, r5
 80093e2:	10a4      	asrs	r4, r4, #2
 80093e4:	2600      	movs	r6, #0
 80093e6:	42a6      	cmp	r6, r4
 80093e8:	d105      	bne.n	80093f6 <__libc_init_array+0x2e>
 80093ea:	bd70      	pop	{r4, r5, r6, pc}
 80093ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80093f0:	4798      	blx	r3
 80093f2:	3601      	adds	r6, #1
 80093f4:	e7ee      	b.n	80093d4 <__libc_init_array+0xc>
 80093f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093fa:	4798      	blx	r3
 80093fc:	3601      	adds	r6, #1
 80093fe:	e7f2      	b.n	80093e6 <__libc_init_array+0x1e>
 8009400:	0800b564 	.word	0x0800b564
 8009404:	0800b564 	.word	0x0800b564
 8009408:	0800b564 	.word	0x0800b564
 800940c:	0800b568 	.word	0x0800b568

08009410 <__retarget_lock_init_recursive>:
 8009410:	4770      	bx	lr

08009412 <__retarget_lock_acquire_recursive>:
 8009412:	4770      	bx	lr

08009414 <__retarget_lock_release_recursive>:
 8009414:	4770      	bx	lr

08009416 <quorem>:
 8009416:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941a:	6903      	ldr	r3, [r0, #16]
 800941c:	690c      	ldr	r4, [r1, #16]
 800941e:	42a3      	cmp	r3, r4
 8009420:	4607      	mov	r7, r0
 8009422:	db7e      	blt.n	8009522 <quorem+0x10c>
 8009424:	3c01      	subs	r4, #1
 8009426:	f101 0814 	add.w	r8, r1, #20
 800942a:	f100 0514 	add.w	r5, r0, #20
 800942e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009438:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800943c:	3301      	adds	r3, #1
 800943e:	429a      	cmp	r2, r3
 8009440:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009444:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009448:	fbb2 f6f3 	udiv	r6, r2, r3
 800944c:	d331      	bcc.n	80094b2 <quorem+0x9c>
 800944e:	f04f 0e00 	mov.w	lr, #0
 8009452:	4640      	mov	r0, r8
 8009454:	46ac      	mov	ip, r5
 8009456:	46f2      	mov	sl, lr
 8009458:	f850 2b04 	ldr.w	r2, [r0], #4
 800945c:	b293      	uxth	r3, r2
 800945e:	fb06 e303 	mla	r3, r6, r3, lr
 8009462:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009466:	0c1a      	lsrs	r2, r3, #16
 8009468:	b29b      	uxth	r3, r3
 800946a:	ebaa 0303 	sub.w	r3, sl, r3
 800946e:	f8dc a000 	ldr.w	sl, [ip]
 8009472:	fa13 f38a 	uxtah	r3, r3, sl
 8009476:	fb06 220e 	mla	r2, r6, lr, r2
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	9b00      	ldr	r3, [sp, #0]
 800947e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009482:	b292      	uxth	r2, r2
 8009484:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009488:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800948c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009490:	4581      	cmp	r9, r0
 8009492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009496:	f84c 3b04 	str.w	r3, [ip], #4
 800949a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800949e:	d2db      	bcs.n	8009458 <quorem+0x42>
 80094a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80094a4:	b92b      	cbnz	r3, 80094b2 <quorem+0x9c>
 80094a6:	9b01      	ldr	r3, [sp, #4]
 80094a8:	3b04      	subs	r3, #4
 80094aa:	429d      	cmp	r5, r3
 80094ac:	461a      	mov	r2, r3
 80094ae:	d32c      	bcc.n	800950a <quorem+0xf4>
 80094b0:	613c      	str	r4, [r7, #16]
 80094b2:	4638      	mov	r0, r7
 80094b4:	f001 f9a6 	bl	800a804 <__mcmp>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	db22      	blt.n	8009502 <quorem+0xec>
 80094bc:	3601      	adds	r6, #1
 80094be:	4629      	mov	r1, r5
 80094c0:	2000      	movs	r0, #0
 80094c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80094c6:	f8d1 c000 	ldr.w	ip, [r1]
 80094ca:	b293      	uxth	r3, r2
 80094cc:	1ac3      	subs	r3, r0, r3
 80094ce:	0c12      	lsrs	r2, r2, #16
 80094d0:	fa13 f38c 	uxtah	r3, r3, ip
 80094d4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80094d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094dc:	b29b      	uxth	r3, r3
 80094de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094e2:	45c1      	cmp	r9, r8
 80094e4:	f841 3b04 	str.w	r3, [r1], #4
 80094e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094ec:	d2e9      	bcs.n	80094c2 <quorem+0xac>
 80094ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094f6:	b922      	cbnz	r2, 8009502 <quorem+0xec>
 80094f8:	3b04      	subs	r3, #4
 80094fa:	429d      	cmp	r5, r3
 80094fc:	461a      	mov	r2, r3
 80094fe:	d30a      	bcc.n	8009516 <quorem+0x100>
 8009500:	613c      	str	r4, [r7, #16]
 8009502:	4630      	mov	r0, r6
 8009504:	b003      	add	sp, #12
 8009506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950a:	6812      	ldr	r2, [r2, #0]
 800950c:	3b04      	subs	r3, #4
 800950e:	2a00      	cmp	r2, #0
 8009510:	d1ce      	bne.n	80094b0 <quorem+0x9a>
 8009512:	3c01      	subs	r4, #1
 8009514:	e7c9      	b.n	80094aa <quorem+0x94>
 8009516:	6812      	ldr	r2, [r2, #0]
 8009518:	3b04      	subs	r3, #4
 800951a:	2a00      	cmp	r2, #0
 800951c:	d1f0      	bne.n	8009500 <quorem+0xea>
 800951e:	3c01      	subs	r4, #1
 8009520:	e7eb      	b.n	80094fa <quorem+0xe4>
 8009522:	2000      	movs	r0, #0
 8009524:	e7ee      	b.n	8009504 <quorem+0xee>
	...

08009528 <_dtoa_r>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	ed2d 8b04 	vpush	{d8-d9}
 8009530:	69c5      	ldr	r5, [r0, #28]
 8009532:	b093      	sub	sp, #76	; 0x4c
 8009534:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009538:	ec57 6b10 	vmov	r6, r7, d0
 800953c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009540:	9107      	str	r1, [sp, #28]
 8009542:	4604      	mov	r4, r0
 8009544:	920a      	str	r2, [sp, #40]	; 0x28
 8009546:	930d      	str	r3, [sp, #52]	; 0x34
 8009548:	b975      	cbnz	r5, 8009568 <_dtoa_r+0x40>
 800954a:	2010      	movs	r0, #16
 800954c:	f000 fe2a 	bl	800a1a4 <malloc>
 8009550:	4602      	mov	r2, r0
 8009552:	61e0      	str	r0, [r4, #28]
 8009554:	b920      	cbnz	r0, 8009560 <_dtoa_r+0x38>
 8009556:	4bae      	ldr	r3, [pc, #696]	; (8009810 <_dtoa_r+0x2e8>)
 8009558:	21ef      	movs	r1, #239	; 0xef
 800955a:	48ae      	ldr	r0, [pc, #696]	; (8009814 <_dtoa_r+0x2ec>)
 800955c:	f001 fb1e 	bl	800ab9c <__assert_func>
 8009560:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009564:	6005      	str	r5, [r0, #0]
 8009566:	60c5      	str	r5, [r0, #12]
 8009568:	69e3      	ldr	r3, [r4, #28]
 800956a:	6819      	ldr	r1, [r3, #0]
 800956c:	b151      	cbz	r1, 8009584 <_dtoa_r+0x5c>
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	604a      	str	r2, [r1, #4]
 8009572:	2301      	movs	r3, #1
 8009574:	4093      	lsls	r3, r2
 8009576:	608b      	str	r3, [r1, #8]
 8009578:	4620      	mov	r0, r4
 800957a:	f000 ff07 	bl	800a38c <_Bfree>
 800957e:	69e3      	ldr	r3, [r4, #28]
 8009580:	2200      	movs	r2, #0
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	1e3b      	subs	r3, r7, #0
 8009586:	bfbb      	ittet	lt
 8009588:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800958c:	9303      	strlt	r3, [sp, #12]
 800958e:	2300      	movge	r3, #0
 8009590:	2201      	movlt	r2, #1
 8009592:	bfac      	ite	ge
 8009594:	f8c8 3000 	strge.w	r3, [r8]
 8009598:	f8c8 2000 	strlt.w	r2, [r8]
 800959c:	4b9e      	ldr	r3, [pc, #632]	; (8009818 <_dtoa_r+0x2f0>)
 800959e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80095a2:	ea33 0308 	bics.w	r3, r3, r8
 80095a6:	d11b      	bne.n	80095e0 <_dtoa_r+0xb8>
 80095a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80095b4:	4333      	orrs	r3, r6
 80095b6:	f000 8593 	beq.w	800a0e0 <_dtoa_r+0xbb8>
 80095ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095bc:	b963      	cbnz	r3, 80095d8 <_dtoa_r+0xb0>
 80095be:	4b97      	ldr	r3, [pc, #604]	; (800981c <_dtoa_r+0x2f4>)
 80095c0:	e027      	b.n	8009612 <_dtoa_r+0xea>
 80095c2:	4b97      	ldr	r3, [pc, #604]	; (8009820 <_dtoa_r+0x2f8>)
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	3308      	adds	r3, #8
 80095c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095ca:	6013      	str	r3, [r2, #0]
 80095cc:	9800      	ldr	r0, [sp, #0]
 80095ce:	b013      	add	sp, #76	; 0x4c
 80095d0:	ecbd 8b04 	vpop	{d8-d9}
 80095d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d8:	4b90      	ldr	r3, [pc, #576]	; (800981c <_dtoa_r+0x2f4>)
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	3303      	adds	r3, #3
 80095de:	e7f3      	b.n	80095c8 <_dtoa_r+0xa0>
 80095e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095e4:	2200      	movs	r2, #0
 80095e6:	ec51 0b17 	vmov	r0, r1, d7
 80095ea:	eeb0 8a47 	vmov.f32	s16, s14
 80095ee:	eef0 8a67 	vmov.f32	s17, s15
 80095f2:	2300      	movs	r3, #0
 80095f4:	f7f7 fa70 	bl	8000ad8 <__aeabi_dcmpeq>
 80095f8:	4681      	mov	r9, r0
 80095fa:	b160      	cbz	r0, 8009616 <_dtoa_r+0xee>
 80095fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095fe:	2301      	movs	r3, #1
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 8568 	beq.w	800a0da <_dtoa_r+0xbb2>
 800960a:	4b86      	ldr	r3, [pc, #536]	; (8009824 <_dtoa_r+0x2fc>)
 800960c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	3b01      	subs	r3, #1
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	e7da      	b.n	80095cc <_dtoa_r+0xa4>
 8009616:	aa10      	add	r2, sp, #64	; 0x40
 8009618:	a911      	add	r1, sp, #68	; 0x44
 800961a:	4620      	mov	r0, r4
 800961c:	eeb0 0a48 	vmov.f32	s0, s16
 8009620:	eef0 0a68 	vmov.f32	s1, s17
 8009624:	f001 f994 	bl	800a950 <__d2b>
 8009628:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800962c:	4682      	mov	sl, r0
 800962e:	2d00      	cmp	r5, #0
 8009630:	d07f      	beq.n	8009732 <_dtoa_r+0x20a>
 8009632:	ee18 3a90 	vmov	r3, s17
 8009636:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800963a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800963e:	ec51 0b18 	vmov	r0, r1, d8
 8009642:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009646:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800964a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800964e:	4619      	mov	r1, r3
 8009650:	2200      	movs	r2, #0
 8009652:	4b75      	ldr	r3, [pc, #468]	; (8009828 <_dtoa_r+0x300>)
 8009654:	f7f6 fe20 	bl	8000298 <__aeabi_dsub>
 8009658:	a367      	add	r3, pc, #412	; (adr r3, 80097f8 <_dtoa_r+0x2d0>)
 800965a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965e:	f7f6 ffd3 	bl	8000608 <__aeabi_dmul>
 8009662:	a367      	add	r3, pc, #412	; (adr r3, 8009800 <_dtoa_r+0x2d8>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	f7f6 fe18 	bl	800029c <__adddf3>
 800966c:	4606      	mov	r6, r0
 800966e:	4628      	mov	r0, r5
 8009670:	460f      	mov	r7, r1
 8009672:	f7f6 ff5f 	bl	8000534 <__aeabi_i2d>
 8009676:	a364      	add	r3, pc, #400	; (adr r3, 8009808 <_dtoa_r+0x2e0>)
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	f7f6 ffc4 	bl	8000608 <__aeabi_dmul>
 8009680:	4602      	mov	r2, r0
 8009682:	460b      	mov	r3, r1
 8009684:	4630      	mov	r0, r6
 8009686:	4639      	mov	r1, r7
 8009688:	f7f6 fe08 	bl	800029c <__adddf3>
 800968c:	4606      	mov	r6, r0
 800968e:	460f      	mov	r7, r1
 8009690:	f7f7 fa6a 	bl	8000b68 <__aeabi_d2iz>
 8009694:	2200      	movs	r2, #0
 8009696:	4683      	mov	fp, r0
 8009698:	2300      	movs	r3, #0
 800969a:	4630      	mov	r0, r6
 800969c:	4639      	mov	r1, r7
 800969e:	f7f7 fa25 	bl	8000aec <__aeabi_dcmplt>
 80096a2:	b148      	cbz	r0, 80096b8 <_dtoa_r+0x190>
 80096a4:	4658      	mov	r0, fp
 80096a6:	f7f6 ff45 	bl	8000534 <__aeabi_i2d>
 80096aa:	4632      	mov	r2, r6
 80096ac:	463b      	mov	r3, r7
 80096ae:	f7f7 fa13 	bl	8000ad8 <__aeabi_dcmpeq>
 80096b2:	b908      	cbnz	r0, 80096b8 <_dtoa_r+0x190>
 80096b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80096b8:	f1bb 0f16 	cmp.w	fp, #22
 80096bc:	d857      	bhi.n	800976e <_dtoa_r+0x246>
 80096be:	4b5b      	ldr	r3, [pc, #364]	; (800982c <_dtoa_r+0x304>)
 80096c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	ec51 0b18 	vmov	r0, r1, d8
 80096cc:	f7f7 fa0e 	bl	8000aec <__aeabi_dcmplt>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d04e      	beq.n	8009772 <_dtoa_r+0x24a>
 80096d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80096d8:	2300      	movs	r3, #0
 80096da:	930c      	str	r3, [sp, #48]	; 0x30
 80096dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096de:	1b5b      	subs	r3, r3, r5
 80096e0:	1e5a      	subs	r2, r3, #1
 80096e2:	bf45      	ittet	mi
 80096e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80096e8:	9305      	strmi	r3, [sp, #20]
 80096ea:	2300      	movpl	r3, #0
 80096ec:	2300      	movmi	r3, #0
 80096ee:	9206      	str	r2, [sp, #24]
 80096f0:	bf54      	ite	pl
 80096f2:	9305      	strpl	r3, [sp, #20]
 80096f4:	9306      	strmi	r3, [sp, #24]
 80096f6:	f1bb 0f00 	cmp.w	fp, #0
 80096fa:	db3c      	blt.n	8009776 <_dtoa_r+0x24e>
 80096fc:	9b06      	ldr	r3, [sp, #24]
 80096fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009702:	445b      	add	r3, fp
 8009704:	9306      	str	r3, [sp, #24]
 8009706:	2300      	movs	r3, #0
 8009708:	9308      	str	r3, [sp, #32]
 800970a:	9b07      	ldr	r3, [sp, #28]
 800970c:	2b09      	cmp	r3, #9
 800970e:	d868      	bhi.n	80097e2 <_dtoa_r+0x2ba>
 8009710:	2b05      	cmp	r3, #5
 8009712:	bfc4      	itt	gt
 8009714:	3b04      	subgt	r3, #4
 8009716:	9307      	strgt	r3, [sp, #28]
 8009718:	9b07      	ldr	r3, [sp, #28]
 800971a:	f1a3 0302 	sub.w	r3, r3, #2
 800971e:	bfcc      	ite	gt
 8009720:	2500      	movgt	r5, #0
 8009722:	2501      	movle	r5, #1
 8009724:	2b03      	cmp	r3, #3
 8009726:	f200 8085 	bhi.w	8009834 <_dtoa_r+0x30c>
 800972a:	e8df f003 	tbb	[pc, r3]
 800972e:	3b2e      	.short	0x3b2e
 8009730:	5839      	.short	0x5839
 8009732:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009736:	441d      	add	r5, r3
 8009738:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800973c:	2b20      	cmp	r3, #32
 800973e:	bfc1      	itttt	gt
 8009740:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009744:	fa08 f803 	lslgt.w	r8, r8, r3
 8009748:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800974c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009750:	bfd6      	itet	le
 8009752:	f1c3 0320 	rsble	r3, r3, #32
 8009756:	ea48 0003 	orrgt.w	r0, r8, r3
 800975a:	fa06 f003 	lslle.w	r0, r6, r3
 800975e:	f7f6 fed9 	bl	8000514 <__aeabi_ui2d>
 8009762:	2201      	movs	r2, #1
 8009764:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009768:	3d01      	subs	r5, #1
 800976a:	920e      	str	r2, [sp, #56]	; 0x38
 800976c:	e76f      	b.n	800964e <_dtoa_r+0x126>
 800976e:	2301      	movs	r3, #1
 8009770:	e7b3      	b.n	80096da <_dtoa_r+0x1b2>
 8009772:	900c      	str	r0, [sp, #48]	; 0x30
 8009774:	e7b2      	b.n	80096dc <_dtoa_r+0x1b4>
 8009776:	9b05      	ldr	r3, [sp, #20]
 8009778:	eba3 030b 	sub.w	r3, r3, fp
 800977c:	9305      	str	r3, [sp, #20]
 800977e:	f1cb 0300 	rsb	r3, fp, #0
 8009782:	9308      	str	r3, [sp, #32]
 8009784:	2300      	movs	r3, #0
 8009786:	930b      	str	r3, [sp, #44]	; 0x2c
 8009788:	e7bf      	b.n	800970a <_dtoa_r+0x1e2>
 800978a:	2300      	movs	r3, #0
 800978c:	9309      	str	r3, [sp, #36]	; 0x24
 800978e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009790:	2b00      	cmp	r3, #0
 8009792:	dc52      	bgt.n	800983a <_dtoa_r+0x312>
 8009794:	2301      	movs	r3, #1
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	9304      	str	r3, [sp, #16]
 800979a:	461a      	mov	r2, r3
 800979c:	920a      	str	r2, [sp, #40]	; 0x28
 800979e:	e00b      	b.n	80097b8 <_dtoa_r+0x290>
 80097a0:	2301      	movs	r3, #1
 80097a2:	e7f3      	b.n	800978c <_dtoa_r+0x264>
 80097a4:	2300      	movs	r3, #0
 80097a6:	9309      	str	r3, [sp, #36]	; 0x24
 80097a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097aa:	445b      	add	r3, fp
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	3301      	adds	r3, #1
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	9304      	str	r3, [sp, #16]
 80097b4:	bfb8      	it	lt
 80097b6:	2301      	movlt	r3, #1
 80097b8:	69e0      	ldr	r0, [r4, #28]
 80097ba:	2100      	movs	r1, #0
 80097bc:	2204      	movs	r2, #4
 80097be:	f102 0614 	add.w	r6, r2, #20
 80097c2:	429e      	cmp	r6, r3
 80097c4:	d93d      	bls.n	8009842 <_dtoa_r+0x31a>
 80097c6:	6041      	str	r1, [r0, #4]
 80097c8:	4620      	mov	r0, r4
 80097ca:	f000 fd9f 	bl	800a30c <_Balloc>
 80097ce:	9000      	str	r0, [sp, #0]
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d139      	bne.n	8009848 <_dtoa_r+0x320>
 80097d4:	4b16      	ldr	r3, [pc, #88]	; (8009830 <_dtoa_r+0x308>)
 80097d6:	4602      	mov	r2, r0
 80097d8:	f240 11af 	movw	r1, #431	; 0x1af
 80097dc:	e6bd      	b.n	800955a <_dtoa_r+0x32>
 80097de:	2301      	movs	r3, #1
 80097e0:	e7e1      	b.n	80097a6 <_dtoa_r+0x27e>
 80097e2:	2501      	movs	r5, #1
 80097e4:	2300      	movs	r3, #0
 80097e6:	9307      	str	r3, [sp, #28]
 80097e8:	9509      	str	r5, [sp, #36]	; 0x24
 80097ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	9304      	str	r3, [sp, #16]
 80097f2:	2200      	movs	r2, #0
 80097f4:	2312      	movs	r3, #18
 80097f6:	e7d1      	b.n	800979c <_dtoa_r+0x274>
 80097f8:	636f4361 	.word	0x636f4361
 80097fc:	3fd287a7 	.word	0x3fd287a7
 8009800:	8b60c8b3 	.word	0x8b60c8b3
 8009804:	3fc68a28 	.word	0x3fc68a28
 8009808:	509f79fb 	.word	0x509f79fb
 800980c:	3fd34413 	.word	0x3fd34413
 8009810:	0800b229 	.word	0x0800b229
 8009814:	0800b240 	.word	0x0800b240
 8009818:	7ff00000 	.word	0x7ff00000
 800981c:	0800b225 	.word	0x0800b225
 8009820:	0800b21c 	.word	0x0800b21c
 8009824:	0800b1f9 	.word	0x0800b1f9
 8009828:	3ff80000 	.word	0x3ff80000
 800982c:	0800b330 	.word	0x0800b330
 8009830:	0800b298 	.word	0x0800b298
 8009834:	2301      	movs	r3, #1
 8009836:	9309      	str	r3, [sp, #36]	; 0x24
 8009838:	e7d7      	b.n	80097ea <_dtoa_r+0x2c2>
 800983a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	9304      	str	r3, [sp, #16]
 8009840:	e7ba      	b.n	80097b8 <_dtoa_r+0x290>
 8009842:	3101      	adds	r1, #1
 8009844:	0052      	lsls	r2, r2, #1
 8009846:	e7ba      	b.n	80097be <_dtoa_r+0x296>
 8009848:	69e3      	ldr	r3, [r4, #28]
 800984a:	9a00      	ldr	r2, [sp, #0]
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	9b04      	ldr	r3, [sp, #16]
 8009850:	2b0e      	cmp	r3, #14
 8009852:	f200 80a8 	bhi.w	80099a6 <_dtoa_r+0x47e>
 8009856:	2d00      	cmp	r5, #0
 8009858:	f000 80a5 	beq.w	80099a6 <_dtoa_r+0x47e>
 800985c:	f1bb 0f00 	cmp.w	fp, #0
 8009860:	dd38      	ble.n	80098d4 <_dtoa_r+0x3ac>
 8009862:	4bc0      	ldr	r3, [pc, #768]	; (8009b64 <_dtoa_r+0x63c>)
 8009864:	f00b 020f 	and.w	r2, fp, #15
 8009868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800986c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009870:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009874:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009878:	d019      	beq.n	80098ae <_dtoa_r+0x386>
 800987a:	4bbb      	ldr	r3, [pc, #748]	; (8009b68 <_dtoa_r+0x640>)
 800987c:	ec51 0b18 	vmov	r0, r1, d8
 8009880:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009884:	f7f6 ffea 	bl	800085c <__aeabi_ddiv>
 8009888:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800988c:	f008 080f 	and.w	r8, r8, #15
 8009890:	2503      	movs	r5, #3
 8009892:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009b68 <_dtoa_r+0x640>
 8009896:	f1b8 0f00 	cmp.w	r8, #0
 800989a:	d10a      	bne.n	80098b2 <_dtoa_r+0x38a>
 800989c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098a0:	4632      	mov	r2, r6
 80098a2:	463b      	mov	r3, r7
 80098a4:	f7f6 ffda 	bl	800085c <__aeabi_ddiv>
 80098a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098ac:	e02b      	b.n	8009906 <_dtoa_r+0x3de>
 80098ae:	2502      	movs	r5, #2
 80098b0:	e7ef      	b.n	8009892 <_dtoa_r+0x36a>
 80098b2:	f018 0f01 	tst.w	r8, #1
 80098b6:	d008      	beq.n	80098ca <_dtoa_r+0x3a2>
 80098b8:	4630      	mov	r0, r6
 80098ba:	4639      	mov	r1, r7
 80098bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80098c0:	f7f6 fea2 	bl	8000608 <__aeabi_dmul>
 80098c4:	3501      	adds	r5, #1
 80098c6:	4606      	mov	r6, r0
 80098c8:	460f      	mov	r7, r1
 80098ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80098ce:	f109 0908 	add.w	r9, r9, #8
 80098d2:	e7e0      	b.n	8009896 <_dtoa_r+0x36e>
 80098d4:	f000 809f 	beq.w	8009a16 <_dtoa_r+0x4ee>
 80098d8:	f1cb 0600 	rsb	r6, fp, #0
 80098dc:	4ba1      	ldr	r3, [pc, #644]	; (8009b64 <_dtoa_r+0x63c>)
 80098de:	4fa2      	ldr	r7, [pc, #648]	; (8009b68 <_dtoa_r+0x640>)
 80098e0:	f006 020f 	and.w	r2, r6, #15
 80098e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	ec51 0b18 	vmov	r0, r1, d8
 80098f0:	f7f6 fe8a 	bl	8000608 <__aeabi_dmul>
 80098f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098f8:	1136      	asrs	r6, r6, #4
 80098fa:	2300      	movs	r3, #0
 80098fc:	2502      	movs	r5, #2
 80098fe:	2e00      	cmp	r6, #0
 8009900:	d17e      	bne.n	8009a00 <_dtoa_r+0x4d8>
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1d0      	bne.n	80098a8 <_dtoa_r+0x380>
 8009906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009908:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 8084 	beq.w	8009a1a <_dtoa_r+0x4f2>
 8009912:	4b96      	ldr	r3, [pc, #600]	; (8009b6c <_dtoa_r+0x644>)
 8009914:	2200      	movs	r2, #0
 8009916:	4640      	mov	r0, r8
 8009918:	4649      	mov	r1, r9
 800991a:	f7f7 f8e7 	bl	8000aec <__aeabi_dcmplt>
 800991e:	2800      	cmp	r0, #0
 8009920:	d07b      	beq.n	8009a1a <_dtoa_r+0x4f2>
 8009922:	9b04      	ldr	r3, [sp, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d078      	beq.n	8009a1a <_dtoa_r+0x4f2>
 8009928:	9b01      	ldr	r3, [sp, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	dd39      	ble.n	80099a2 <_dtoa_r+0x47a>
 800992e:	4b90      	ldr	r3, [pc, #576]	; (8009b70 <_dtoa_r+0x648>)
 8009930:	2200      	movs	r2, #0
 8009932:	4640      	mov	r0, r8
 8009934:	4649      	mov	r1, r9
 8009936:	f7f6 fe67 	bl	8000608 <__aeabi_dmul>
 800993a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800993e:	9e01      	ldr	r6, [sp, #4]
 8009940:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8009944:	3501      	adds	r5, #1
 8009946:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800994a:	4628      	mov	r0, r5
 800994c:	f7f6 fdf2 	bl	8000534 <__aeabi_i2d>
 8009950:	4642      	mov	r2, r8
 8009952:	464b      	mov	r3, r9
 8009954:	f7f6 fe58 	bl	8000608 <__aeabi_dmul>
 8009958:	4b86      	ldr	r3, [pc, #536]	; (8009b74 <_dtoa_r+0x64c>)
 800995a:	2200      	movs	r2, #0
 800995c:	f7f6 fc9e 	bl	800029c <__adddf3>
 8009960:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009968:	9303      	str	r3, [sp, #12]
 800996a:	2e00      	cmp	r6, #0
 800996c:	d158      	bne.n	8009a20 <_dtoa_r+0x4f8>
 800996e:	4b82      	ldr	r3, [pc, #520]	; (8009b78 <_dtoa_r+0x650>)
 8009970:	2200      	movs	r2, #0
 8009972:	4640      	mov	r0, r8
 8009974:	4649      	mov	r1, r9
 8009976:	f7f6 fc8f 	bl	8000298 <__aeabi_dsub>
 800997a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800997e:	4680      	mov	r8, r0
 8009980:	4689      	mov	r9, r1
 8009982:	f7f7 f8d1 	bl	8000b28 <__aeabi_dcmpgt>
 8009986:	2800      	cmp	r0, #0
 8009988:	f040 8296 	bne.w	8009eb8 <_dtoa_r+0x990>
 800998c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009990:	4640      	mov	r0, r8
 8009992:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009996:	4649      	mov	r1, r9
 8009998:	f7f7 f8a8 	bl	8000aec <__aeabi_dcmplt>
 800999c:	2800      	cmp	r0, #0
 800999e:	f040 8289 	bne.w	8009eb4 <_dtoa_r+0x98c>
 80099a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80099a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f2c0 814e 	blt.w	8009c4a <_dtoa_r+0x722>
 80099ae:	f1bb 0f0e 	cmp.w	fp, #14
 80099b2:	f300 814a 	bgt.w	8009c4a <_dtoa_r+0x722>
 80099b6:	4b6b      	ldr	r3, [pc, #428]	; (8009b64 <_dtoa_r+0x63c>)
 80099b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f280 80dc 	bge.w	8009b80 <_dtoa_r+0x658>
 80099c8:	9b04      	ldr	r3, [sp, #16]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f300 80d8 	bgt.w	8009b80 <_dtoa_r+0x658>
 80099d0:	f040 826f 	bne.w	8009eb2 <_dtoa_r+0x98a>
 80099d4:	4b68      	ldr	r3, [pc, #416]	; (8009b78 <_dtoa_r+0x650>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	4640      	mov	r0, r8
 80099da:	4649      	mov	r1, r9
 80099dc:	f7f6 fe14 	bl	8000608 <__aeabi_dmul>
 80099e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099e4:	f7f7 f896 	bl	8000b14 <__aeabi_dcmpge>
 80099e8:	9e04      	ldr	r6, [sp, #16]
 80099ea:	4637      	mov	r7, r6
 80099ec:	2800      	cmp	r0, #0
 80099ee:	f040 8245 	bne.w	8009e7c <_dtoa_r+0x954>
 80099f2:	9d00      	ldr	r5, [sp, #0]
 80099f4:	2331      	movs	r3, #49	; 0x31
 80099f6:	f805 3b01 	strb.w	r3, [r5], #1
 80099fa:	f10b 0b01 	add.w	fp, fp, #1
 80099fe:	e241      	b.n	8009e84 <_dtoa_r+0x95c>
 8009a00:	07f2      	lsls	r2, r6, #31
 8009a02:	d505      	bpl.n	8009a10 <_dtoa_r+0x4e8>
 8009a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a08:	f7f6 fdfe 	bl	8000608 <__aeabi_dmul>
 8009a0c:	3501      	adds	r5, #1
 8009a0e:	2301      	movs	r3, #1
 8009a10:	1076      	asrs	r6, r6, #1
 8009a12:	3708      	adds	r7, #8
 8009a14:	e773      	b.n	80098fe <_dtoa_r+0x3d6>
 8009a16:	2502      	movs	r5, #2
 8009a18:	e775      	b.n	8009906 <_dtoa_r+0x3de>
 8009a1a:	9e04      	ldr	r6, [sp, #16]
 8009a1c:	465f      	mov	r7, fp
 8009a1e:	e792      	b.n	8009946 <_dtoa_r+0x41e>
 8009a20:	9900      	ldr	r1, [sp, #0]
 8009a22:	4b50      	ldr	r3, [pc, #320]	; (8009b64 <_dtoa_r+0x63c>)
 8009a24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a28:	4431      	add	r1, r6
 8009a2a:	9102      	str	r1, [sp, #8]
 8009a2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a2e:	eeb0 9a47 	vmov.f32	s18, s14
 8009a32:	eef0 9a67 	vmov.f32	s19, s15
 8009a36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a3e:	2900      	cmp	r1, #0
 8009a40:	d044      	beq.n	8009acc <_dtoa_r+0x5a4>
 8009a42:	494e      	ldr	r1, [pc, #312]	; (8009b7c <_dtoa_r+0x654>)
 8009a44:	2000      	movs	r0, #0
 8009a46:	f7f6 ff09 	bl	800085c <__aeabi_ddiv>
 8009a4a:	ec53 2b19 	vmov	r2, r3, d9
 8009a4e:	f7f6 fc23 	bl	8000298 <__aeabi_dsub>
 8009a52:	9d00      	ldr	r5, [sp, #0]
 8009a54:	ec41 0b19 	vmov	d9, r0, r1
 8009a58:	4649      	mov	r1, r9
 8009a5a:	4640      	mov	r0, r8
 8009a5c:	f7f7 f884 	bl	8000b68 <__aeabi_d2iz>
 8009a60:	4606      	mov	r6, r0
 8009a62:	f7f6 fd67 	bl	8000534 <__aeabi_i2d>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4640      	mov	r0, r8
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	f7f6 fc13 	bl	8000298 <__aeabi_dsub>
 8009a72:	3630      	adds	r6, #48	; 0x30
 8009a74:	f805 6b01 	strb.w	r6, [r5], #1
 8009a78:	ec53 2b19 	vmov	r2, r3, d9
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	4689      	mov	r9, r1
 8009a80:	f7f7 f834 	bl	8000aec <__aeabi_dcmplt>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d164      	bne.n	8009b52 <_dtoa_r+0x62a>
 8009a88:	4642      	mov	r2, r8
 8009a8a:	464b      	mov	r3, r9
 8009a8c:	4937      	ldr	r1, [pc, #220]	; (8009b6c <_dtoa_r+0x644>)
 8009a8e:	2000      	movs	r0, #0
 8009a90:	f7f6 fc02 	bl	8000298 <__aeabi_dsub>
 8009a94:	ec53 2b19 	vmov	r2, r3, d9
 8009a98:	f7f7 f828 	bl	8000aec <__aeabi_dcmplt>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	f040 80b6 	bne.w	8009c0e <_dtoa_r+0x6e6>
 8009aa2:	9b02      	ldr	r3, [sp, #8]
 8009aa4:	429d      	cmp	r5, r3
 8009aa6:	f43f af7c 	beq.w	80099a2 <_dtoa_r+0x47a>
 8009aaa:	4b31      	ldr	r3, [pc, #196]	; (8009b70 <_dtoa_r+0x648>)
 8009aac:	ec51 0b19 	vmov	r0, r1, d9
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f7f6 fda9 	bl	8000608 <__aeabi_dmul>
 8009ab6:	4b2e      	ldr	r3, [pc, #184]	; (8009b70 <_dtoa_r+0x648>)
 8009ab8:	ec41 0b19 	vmov	d9, r0, r1
 8009abc:	2200      	movs	r2, #0
 8009abe:	4640      	mov	r0, r8
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	f7f6 fda1 	bl	8000608 <__aeabi_dmul>
 8009ac6:	4680      	mov	r8, r0
 8009ac8:	4689      	mov	r9, r1
 8009aca:	e7c5      	b.n	8009a58 <_dtoa_r+0x530>
 8009acc:	ec51 0b17 	vmov	r0, r1, d7
 8009ad0:	f7f6 fd9a 	bl	8000608 <__aeabi_dmul>
 8009ad4:	9b02      	ldr	r3, [sp, #8]
 8009ad6:	9d00      	ldr	r5, [sp, #0]
 8009ad8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ada:	ec41 0b19 	vmov	d9, r0, r1
 8009ade:	4649      	mov	r1, r9
 8009ae0:	4640      	mov	r0, r8
 8009ae2:	f7f7 f841 	bl	8000b68 <__aeabi_d2iz>
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	f7f6 fd24 	bl	8000534 <__aeabi_i2d>
 8009aec:	3630      	adds	r6, #48	; 0x30
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	4640      	mov	r0, r8
 8009af4:	4649      	mov	r1, r9
 8009af6:	f7f6 fbcf 	bl	8000298 <__aeabi_dsub>
 8009afa:	f805 6b01 	strb.w	r6, [r5], #1
 8009afe:	9b02      	ldr	r3, [sp, #8]
 8009b00:	429d      	cmp	r5, r3
 8009b02:	4680      	mov	r8, r0
 8009b04:	4689      	mov	r9, r1
 8009b06:	f04f 0200 	mov.w	r2, #0
 8009b0a:	d124      	bne.n	8009b56 <_dtoa_r+0x62e>
 8009b0c:	4b1b      	ldr	r3, [pc, #108]	; (8009b7c <_dtoa_r+0x654>)
 8009b0e:	ec51 0b19 	vmov	r0, r1, d9
 8009b12:	f7f6 fbc3 	bl	800029c <__adddf3>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	f7f7 f803 	bl	8000b28 <__aeabi_dcmpgt>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d173      	bne.n	8009c0e <_dtoa_r+0x6e6>
 8009b26:	ec53 2b19 	vmov	r2, r3, d9
 8009b2a:	4914      	ldr	r1, [pc, #80]	; (8009b7c <_dtoa_r+0x654>)
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	f7f6 fbb3 	bl	8000298 <__aeabi_dsub>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4640      	mov	r0, r8
 8009b38:	4649      	mov	r1, r9
 8009b3a:	f7f6 ffd7 	bl	8000aec <__aeabi_dcmplt>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	f43f af2f 	beq.w	80099a2 <_dtoa_r+0x47a>
 8009b44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b46:	1e6b      	subs	r3, r5, #1
 8009b48:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b4e:	2b30      	cmp	r3, #48	; 0x30
 8009b50:	d0f8      	beq.n	8009b44 <_dtoa_r+0x61c>
 8009b52:	46bb      	mov	fp, r7
 8009b54:	e04a      	b.n	8009bec <_dtoa_r+0x6c4>
 8009b56:	4b06      	ldr	r3, [pc, #24]	; (8009b70 <_dtoa_r+0x648>)
 8009b58:	f7f6 fd56 	bl	8000608 <__aeabi_dmul>
 8009b5c:	4680      	mov	r8, r0
 8009b5e:	4689      	mov	r9, r1
 8009b60:	e7bd      	b.n	8009ade <_dtoa_r+0x5b6>
 8009b62:	bf00      	nop
 8009b64:	0800b330 	.word	0x0800b330
 8009b68:	0800b308 	.word	0x0800b308
 8009b6c:	3ff00000 	.word	0x3ff00000
 8009b70:	40240000 	.word	0x40240000
 8009b74:	401c0000 	.word	0x401c0000
 8009b78:	40140000 	.word	0x40140000
 8009b7c:	3fe00000 	.word	0x3fe00000
 8009b80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b84:	9d00      	ldr	r5, [sp, #0]
 8009b86:	4642      	mov	r2, r8
 8009b88:	464b      	mov	r3, r9
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	4639      	mov	r1, r7
 8009b8e:	f7f6 fe65 	bl	800085c <__aeabi_ddiv>
 8009b92:	f7f6 ffe9 	bl	8000b68 <__aeabi_d2iz>
 8009b96:	9001      	str	r0, [sp, #4]
 8009b98:	f7f6 fccc 	bl	8000534 <__aeabi_i2d>
 8009b9c:	4642      	mov	r2, r8
 8009b9e:	464b      	mov	r3, r9
 8009ba0:	f7f6 fd32 	bl	8000608 <__aeabi_dmul>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	4630      	mov	r0, r6
 8009baa:	4639      	mov	r1, r7
 8009bac:	f7f6 fb74 	bl	8000298 <__aeabi_dsub>
 8009bb0:	9e01      	ldr	r6, [sp, #4]
 8009bb2:	9f04      	ldr	r7, [sp, #16]
 8009bb4:	3630      	adds	r6, #48	; 0x30
 8009bb6:	f805 6b01 	strb.w	r6, [r5], #1
 8009bba:	9e00      	ldr	r6, [sp, #0]
 8009bbc:	1bae      	subs	r6, r5, r6
 8009bbe:	42b7      	cmp	r7, r6
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	d134      	bne.n	8009c30 <_dtoa_r+0x708>
 8009bc6:	f7f6 fb69 	bl	800029c <__adddf3>
 8009bca:	4642      	mov	r2, r8
 8009bcc:	464b      	mov	r3, r9
 8009bce:	4606      	mov	r6, r0
 8009bd0:	460f      	mov	r7, r1
 8009bd2:	f7f6 ffa9 	bl	8000b28 <__aeabi_dcmpgt>
 8009bd6:	b9c8      	cbnz	r0, 8009c0c <_dtoa_r+0x6e4>
 8009bd8:	4642      	mov	r2, r8
 8009bda:	464b      	mov	r3, r9
 8009bdc:	4630      	mov	r0, r6
 8009bde:	4639      	mov	r1, r7
 8009be0:	f7f6 ff7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009be4:	b110      	cbz	r0, 8009bec <_dtoa_r+0x6c4>
 8009be6:	9b01      	ldr	r3, [sp, #4]
 8009be8:	07db      	lsls	r3, r3, #31
 8009bea:	d40f      	bmi.n	8009c0c <_dtoa_r+0x6e4>
 8009bec:	4651      	mov	r1, sl
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f000 fbcc 	bl	800a38c <_Bfree>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bf8:	702b      	strb	r3, [r5, #0]
 8009bfa:	f10b 0301 	add.w	r3, fp, #1
 8009bfe:	6013      	str	r3, [r2, #0]
 8009c00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f43f ace2 	beq.w	80095cc <_dtoa_r+0xa4>
 8009c08:	601d      	str	r5, [r3, #0]
 8009c0a:	e4df      	b.n	80095cc <_dtoa_r+0xa4>
 8009c0c:	465f      	mov	r7, fp
 8009c0e:	462b      	mov	r3, r5
 8009c10:	461d      	mov	r5, r3
 8009c12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c16:	2a39      	cmp	r2, #57	; 0x39
 8009c18:	d106      	bne.n	8009c28 <_dtoa_r+0x700>
 8009c1a:	9a00      	ldr	r2, [sp, #0]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d1f7      	bne.n	8009c10 <_dtoa_r+0x6e8>
 8009c20:	9900      	ldr	r1, [sp, #0]
 8009c22:	2230      	movs	r2, #48	; 0x30
 8009c24:	3701      	adds	r7, #1
 8009c26:	700a      	strb	r2, [r1, #0]
 8009c28:	781a      	ldrb	r2, [r3, #0]
 8009c2a:	3201      	adds	r2, #1
 8009c2c:	701a      	strb	r2, [r3, #0]
 8009c2e:	e790      	b.n	8009b52 <_dtoa_r+0x62a>
 8009c30:	4ba3      	ldr	r3, [pc, #652]	; (8009ec0 <_dtoa_r+0x998>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	f7f6 fce8 	bl	8000608 <__aeabi_dmul>
 8009c38:	2200      	movs	r2, #0
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	4606      	mov	r6, r0
 8009c3e:	460f      	mov	r7, r1
 8009c40:	f7f6 ff4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d09e      	beq.n	8009b86 <_dtoa_r+0x65e>
 8009c48:	e7d0      	b.n	8009bec <_dtoa_r+0x6c4>
 8009c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c4c:	2a00      	cmp	r2, #0
 8009c4e:	f000 80ca 	beq.w	8009de6 <_dtoa_r+0x8be>
 8009c52:	9a07      	ldr	r2, [sp, #28]
 8009c54:	2a01      	cmp	r2, #1
 8009c56:	f300 80ad 	bgt.w	8009db4 <_dtoa_r+0x88c>
 8009c5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c5c:	2a00      	cmp	r2, #0
 8009c5e:	f000 80a5 	beq.w	8009dac <_dtoa_r+0x884>
 8009c62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c66:	9e08      	ldr	r6, [sp, #32]
 8009c68:	9d05      	ldr	r5, [sp, #20]
 8009c6a:	9a05      	ldr	r2, [sp, #20]
 8009c6c:	441a      	add	r2, r3
 8009c6e:	9205      	str	r2, [sp, #20]
 8009c70:	9a06      	ldr	r2, [sp, #24]
 8009c72:	2101      	movs	r1, #1
 8009c74:	441a      	add	r2, r3
 8009c76:	4620      	mov	r0, r4
 8009c78:	9206      	str	r2, [sp, #24]
 8009c7a:	f000 fc3d 	bl	800a4f8 <__i2b>
 8009c7e:	4607      	mov	r7, r0
 8009c80:	b165      	cbz	r5, 8009c9c <_dtoa_r+0x774>
 8009c82:	9b06      	ldr	r3, [sp, #24]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	dd09      	ble.n	8009c9c <_dtoa_r+0x774>
 8009c88:	42ab      	cmp	r3, r5
 8009c8a:	9a05      	ldr	r2, [sp, #20]
 8009c8c:	bfa8      	it	ge
 8009c8e:	462b      	movge	r3, r5
 8009c90:	1ad2      	subs	r2, r2, r3
 8009c92:	9205      	str	r2, [sp, #20]
 8009c94:	9a06      	ldr	r2, [sp, #24]
 8009c96:	1aed      	subs	r5, r5, r3
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	9306      	str	r3, [sp, #24]
 8009c9c:	9b08      	ldr	r3, [sp, #32]
 8009c9e:	b1f3      	cbz	r3, 8009cde <_dtoa_r+0x7b6>
 8009ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f000 80a3 	beq.w	8009dee <_dtoa_r+0x8c6>
 8009ca8:	2e00      	cmp	r6, #0
 8009caa:	dd10      	ble.n	8009cce <_dtoa_r+0x7a6>
 8009cac:	4639      	mov	r1, r7
 8009cae:	4632      	mov	r2, r6
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f000 fce1 	bl	800a678 <__pow5mult>
 8009cb6:	4652      	mov	r2, sl
 8009cb8:	4601      	mov	r1, r0
 8009cba:	4607      	mov	r7, r0
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f000 fc31 	bl	800a524 <__multiply>
 8009cc2:	4651      	mov	r1, sl
 8009cc4:	4680      	mov	r8, r0
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f000 fb60 	bl	800a38c <_Bfree>
 8009ccc:	46c2      	mov	sl, r8
 8009cce:	9b08      	ldr	r3, [sp, #32]
 8009cd0:	1b9a      	subs	r2, r3, r6
 8009cd2:	d004      	beq.n	8009cde <_dtoa_r+0x7b6>
 8009cd4:	4651      	mov	r1, sl
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f000 fcce 	bl	800a678 <__pow5mult>
 8009cdc:	4682      	mov	sl, r0
 8009cde:	2101      	movs	r1, #1
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f000 fc09 	bl	800a4f8 <__i2b>
 8009ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	4606      	mov	r6, r0
 8009cec:	f340 8081 	ble.w	8009df2 <_dtoa_r+0x8ca>
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	4601      	mov	r1, r0
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 fcbf 	bl	800a678 <__pow5mult>
 8009cfa:	9b07      	ldr	r3, [sp, #28]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	4606      	mov	r6, r0
 8009d00:	dd7a      	ble.n	8009df8 <_dtoa_r+0x8d0>
 8009d02:	f04f 0800 	mov.w	r8, #0
 8009d06:	6933      	ldr	r3, [r6, #16]
 8009d08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d0c:	6918      	ldr	r0, [r3, #16]
 8009d0e:	f000 fba5 	bl	800a45c <__hi0bits>
 8009d12:	f1c0 0020 	rsb	r0, r0, #32
 8009d16:	9b06      	ldr	r3, [sp, #24]
 8009d18:	4418      	add	r0, r3
 8009d1a:	f010 001f 	ands.w	r0, r0, #31
 8009d1e:	f000 8094 	beq.w	8009e4a <_dtoa_r+0x922>
 8009d22:	f1c0 0320 	rsb	r3, r0, #32
 8009d26:	2b04      	cmp	r3, #4
 8009d28:	f340 8085 	ble.w	8009e36 <_dtoa_r+0x90e>
 8009d2c:	9b05      	ldr	r3, [sp, #20]
 8009d2e:	f1c0 001c 	rsb	r0, r0, #28
 8009d32:	4403      	add	r3, r0
 8009d34:	9305      	str	r3, [sp, #20]
 8009d36:	9b06      	ldr	r3, [sp, #24]
 8009d38:	4403      	add	r3, r0
 8009d3a:	4405      	add	r5, r0
 8009d3c:	9306      	str	r3, [sp, #24]
 8009d3e:	9b05      	ldr	r3, [sp, #20]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	dd05      	ble.n	8009d50 <_dtoa_r+0x828>
 8009d44:	4651      	mov	r1, sl
 8009d46:	461a      	mov	r2, r3
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f000 fcef 	bl	800a72c <__lshift>
 8009d4e:	4682      	mov	sl, r0
 8009d50:	9b06      	ldr	r3, [sp, #24]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	dd05      	ble.n	8009d62 <_dtoa_r+0x83a>
 8009d56:	4631      	mov	r1, r6
 8009d58:	461a      	mov	r2, r3
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f000 fce6 	bl	800a72c <__lshift>
 8009d60:	4606      	mov	r6, r0
 8009d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d072      	beq.n	8009e4e <_dtoa_r+0x926>
 8009d68:	4631      	mov	r1, r6
 8009d6a:	4650      	mov	r0, sl
 8009d6c:	f000 fd4a 	bl	800a804 <__mcmp>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	da6c      	bge.n	8009e4e <_dtoa_r+0x926>
 8009d74:	2300      	movs	r3, #0
 8009d76:	4651      	mov	r1, sl
 8009d78:	220a      	movs	r2, #10
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f000 fb28 	bl	800a3d0 <__multadd>
 8009d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d82:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009d86:	4682      	mov	sl, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 81b0 	beq.w	800a0ee <_dtoa_r+0xbc6>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	4639      	mov	r1, r7
 8009d92:	220a      	movs	r2, #10
 8009d94:	4620      	mov	r0, r4
 8009d96:	f000 fb1b 	bl	800a3d0 <__multadd>
 8009d9a:	9b01      	ldr	r3, [sp, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	4607      	mov	r7, r0
 8009da0:	f300 8096 	bgt.w	8009ed0 <_dtoa_r+0x9a8>
 8009da4:	9b07      	ldr	r3, [sp, #28]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	dc59      	bgt.n	8009e5e <_dtoa_r+0x936>
 8009daa:	e091      	b.n	8009ed0 <_dtoa_r+0x9a8>
 8009dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009dae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009db2:	e758      	b.n	8009c66 <_dtoa_r+0x73e>
 8009db4:	9b04      	ldr	r3, [sp, #16]
 8009db6:	1e5e      	subs	r6, r3, #1
 8009db8:	9b08      	ldr	r3, [sp, #32]
 8009dba:	42b3      	cmp	r3, r6
 8009dbc:	bfbf      	itttt	lt
 8009dbe:	9b08      	ldrlt	r3, [sp, #32]
 8009dc0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009dc2:	9608      	strlt	r6, [sp, #32]
 8009dc4:	1af3      	sublt	r3, r6, r3
 8009dc6:	bfb4      	ite	lt
 8009dc8:	18d2      	addlt	r2, r2, r3
 8009dca:	1b9e      	subge	r6, r3, r6
 8009dcc:	9b04      	ldr	r3, [sp, #16]
 8009dce:	bfbc      	itt	lt
 8009dd0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009dd2:	2600      	movlt	r6, #0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	bfb7      	itett	lt
 8009dd8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009ddc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009de0:	1a9d      	sublt	r5, r3, r2
 8009de2:	2300      	movlt	r3, #0
 8009de4:	e741      	b.n	8009c6a <_dtoa_r+0x742>
 8009de6:	9e08      	ldr	r6, [sp, #32]
 8009de8:	9d05      	ldr	r5, [sp, #20]
 8009dea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009dec:	e748      	b.n	8009c80 <_dtoa_r+0x758>
 8009dee:	9a08      	ldr	r2, [sp, #32]
 8009df0:	e770      	b.n	8009cd4 <_dtoa_r+0x7ac>
 8009df2:	9b07      	ldr	r3, [sp, #28]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	dc19      	bgt.n	8009e2c <_dtoa_r+0x904>
 8009df8:	9b02      	ldr	r3, [sp, #8]
 8009dfa:	b9bb      	cbnz	r3, 8009e2c <_dtoa_r+0x904>
 8009dfc:	9b03      	ldr	r3, [sp, #12]
 8009dfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e02:	b99b      	cbnz	r3, 8009e2c <_dtoa_r+0x904>
 8009e04:	9b03      	ldr	r3, [sp, #12]
 8009e06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e0a:	0d1b      	lsrs	r3, r3, #20
 8009e0c:	051b      	lsls	r3, r3, #20
 8009e0e:	b183      	cbz	r3, 8009e32 <_dtoa_r+0x90a>
 8009e10:	9b05      	ldr	r3, [sp, #20]
 8009e12:	3301      	adds	r3, #1
 8009e14:	9305      	str	r3, [sp, #20]
 8009e16:	9b06      	ldr	r3, [sp, #24]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	9306      	str	r3, [sp, #24]
 8009e1c:	f04f 0801 	mov.w	r8, #1
 8009e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f47f af6f 	bne.w	8009d06 <_dtoa_r+0x7de>
 8009e28:	2001      	movs	r0, #1
 8009e2a:	e774      	b.n	8009d16 <_dtoa_r+0x7ee>
 8009e2c:	f04f 0800 	mov.w	r8, #0
 8009e30:	e7f6      	b.n	8009e20 <_dtoa_r+0x8f8>
 8009e32:	4698      	mov	r8, r3
 8009e34:	e7f4      	b.n	8009e20 <_dtoa_r+0x8f8>
 8009e36:	d082      	beq.n	8009d3e <_dtoa_r+0x816>
 8009e38:	9a05      	ldr	r2, [sp, #20]
 8009e3a:	331c      	adds	r3, #28
 8009e3c:	441a      	add	r2, r3
 8009e3e:	9205      	str	r2, [sp, #20]
 8009e40:	9a06      	ldr	r2, [sp, #24]
 8009e42:	441a      	add	r2, r3
 8009e44:	441d      	add	r5, r3
 8009e46:	9206      	str	r2, [sp, #24]
 8009e48:	e779      	b.n	8009d3e <_dtoa_r+0x816>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	e7f4      	b.n	8009e38 <_dtoa_r+0x910>
 8009e4e:	9b04      	ldr	r3, [sp, #16]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	dc37      	bgt.n	8009ec4 <_dtoa_r+0x99c>
 8009e54:	9b07      	ldr	r3, [sp, #28]
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	dd34      	ble.n	8009ec4 <_dtoa_r+0x99c>
 8009e5a:	9b04      	ldr	r3, [sp, #16]
 8009e5c:	9301      	str	r3, [sp, #4]
 8009e5e:	9b01      	ldr	r3, [sp, #4]
 8009e60:	b963      	cbnz	r3, 8009e7c <_dtoa_r+0x954>
 8009e62:	4631      	mov	r1, r6
 8009e64:	2205      	movs	r2, #5
 8009e66:	4620      	mov	r0, r4
 8009e68:	f000 fab2 	bl	800a3d0 <__multadd>
 8009e6c:	4601      	mov	r1, r0
 8009e6e:	4606      	mov	r6, r0
 8009e70:	4650      	mov	r0, sl
 8009e72:	f000 fcc7 	bl	800a804 <__mcmp>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	f73f adbb 	bgt.w	80099f2 <_dtoa_r+0x4ca>
 8009e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e7e:	9d00      	ldr	r5, [sp, #0]
 8009e80:	ea6f 0b03 	mvn.w	fp, r3
 8009e84:	f04f 0800 	mov.w	r8, #0
 8009e88:	4631      	mov	r1, r6
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f000 fa7e 	bl	800a38c <_Bfree>
 8009e90:	2f00      	cmp	r7, #0
 8009e92:	f43f aeab 	beq.w	8009bec <_dtoa_r+0x6c4>
 8009e96:	f1b8 0f00 	cmp.w	r8, #0
 8009e9a:	d005      	beq.n	8009ea8 <_dtoa_r+0x980>
 8009e9c:	45b8      	cmp	r8, r7
 8009e9e:	d003      	beq.n	8009ea8 <_dtoa_r+0x980>
 8009ea0:	4641      	mov	r1, r8
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 fa72 	bl	800a38c <_Bfree>
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	4620      	mov	r0, r4
 8009eac:	f000 fa6e 	bl	800a38c <_Bfree>
 8009eb0:	e69c      	b.n	8009bec <_dtoa_r+0x6c4>
 8009eb2:	2600      	movs	r6, #0
 8009eb4:	4637      	mov	r7, r6
 8009eb6:	e7e1      	b.n	8009e7c <_dtoa_r+0x954>
 8009eb8:	46bb      	mov	fp, r7
 8009eba:	4637      	mov	r7, r6
 8009ebc:	e599      	b.n	80099f2 <_dtoa_r+0x4ca>
 8009ebe:	bf00      	nop
 8009ec0:	40240000 	.word	0x40240000
 8009ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f000 80c8 	beq.w	800a05c <_dtoa_r+0xb34>
 8009ecc:	9b04      	ldr	r3, [sp, #16]
 8009ece:	9301      	str	r3, [sp, #4]
 8009ed0:	2d00      	cmp	r5, #0
 8009ed2:	dd05      	ble.n	8009ee0 <_dtoa_r+0x9b8>
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	462a      	mov	r2, r5
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f000 fc27 	bl	800a72c <__lshift>
 8009ede:	4607      	mov	r7, r0
 8009ee0:	f1b8 0f00 	cmp.w	r8, #0
 8009ee4:	d05b      	beq.n	8009f9e <_dtoa_r+0xa76>
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f000 fa0f 	bl	800a30c <_Balloc>
 8009eee:	4605      	mov	r5, r0
 8009ef0:	b928      	cbnz	r0, 8009efe <_dtoa_r+0x9d6>
 8009ef2:	4b83      	ldr	r3, [pc, #524]	; (800a100 <_dtoa_r+0xbd8>)
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009efa:	f7ff bb2e 	b.w	800955a <_dtoa_r+0x32>
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	3202      	adds	r2, #2
 8009f02:	0092      	lsls	r2, r2, #2
 8009f04:	f107 010c 	add.w	r1, r7, #12
 8009f08:	300c      	adds	r0, #12
 8009f0a:	f000 fe39 	bl	800ab80 <memcpy>
 8009f0e:	2201      	movs	r2, #1
 8009f10:	4629      	mov	r1, r5
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 fc0a 	bl	800a72c <__lshift>
 8009f18:	9b00      	ldr	r3, [sp, #0]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	9304      	str	r3, [sp, #16]
 8009f1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f22:	4413      	add	r3, r2
 8009f24:	9308      	str	r3, [sp, #32]
 8009f26:	9b02      	ldr	r3, [sp, #8]
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	46b8      	mov	r8, r7
 8009f2e:	9306      	str	r3, [sp, #24]
 8009f30:	4607      	mov	r7, r0
 8009f32:	9b04      	ldr	r3, [sp, #16]
 8009f34:	4631      	mov	r1, r6
 8009f36:	3b01      	subs	r3, #1
 8009f38:	4650      	mov	r0, sl
 8009f3a:	9301      	str	r3, [sp, #4]
 8009f3c:	f7ff fa6b 	bl	8009416 <quorem>
 8009f40:	4641      	mov	r1, r8
 8009f42:	9002      	str	r0, [sp, #8]
 8009f44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f48:	4650      	mov	r0, sl
 8009f4a:	f000 fc5b 	bl	800a804 <__mcmp>
 8009f4e:	463a      	mov	r2, r7
 8009f50:	9005      	str	r0, [sp, #20]
 8009f52:	4631      	mov	r1, r6
 8009f54:	4620      	mov	r0, r4
 8009f56:	f000 fc71 	bl	800a83c <__mdiff>
 8009f5a:	68c2      	ldr	r2, [r0, #12]
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	bb02      	cbnz	r2, 8009fa2 <_dtoa_r+0xa7a>
 8009f60:	4601      	mov	r1, r0
 8009f62:	4650      	mov	r0, sl
 8009f64:	f000 fc4e 	bl	800a804 <__mcmp>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f70:	f000 fa0c 	bl	800a38c <_Bfree>
 8009f74:	9b07      	ldr	r3, [sp, #28]
 8009f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f78:	9d04      	ldr	r5, [sp, #16]
 8009f7a:	ea43 0102 	orr.w	r1, r3, r2
 8009f7e:	9b06      	ldr	r3, [sp, #24]
 8009f80:	4319      	orrs	r1, r3
 8009f82:	d110      	bne.n	8009fa6 <_dtoa_r+0xa7e>
 8009f84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f88:	d029      	beq.n	8009fde <_dtoa_r+0xab6>
 8009f8a:	9b05      	ldr	r3, [sp, #20]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	dd02      	ble.n	8009f96 <_dtoa_r+0xa6e>
 8009f90:	9b02      	ldr	r3, [sp, #8]
 8009f92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009f96:	9b01      	ldr	r3, [sp, #4]
 8009f98:	f883 9000 	strb.w	r9, [r3]
 8009f9c:	e774      	b.n	8009e88 <_dtoa_r+0x960>
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	e7ba      	b.n	8009f18 <_dtoa_r+0x9f0>
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	e7e1      	b.n	8009f6a <_dtoa_r+0xa42>
 8009fa6:	9b05      	ldr	r3, [sp, #20]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	db04      	blt.n	8009fb6 <_dtoa_r+0xa8e>
 8009fac:	9907      	ldr	r1, [sp, #28]
 8009fae:	430b      	orrs	r3, r1
 8009fb0:	9906      	ldr	r1, [sp, #24]
 8009fb2:	430b      	orrs	r3, r1
 8009fb4:	d120      	bne.n	8009ff8 <_dtoa_r+0xad0>
 8009fb6:	2a00      	cmp	r2, #0
 8009fb8:	dded      	ble.n	8009f96 <_dtoa_r+0xa6e>
 8009fba:	4651      	mov	r1, sl
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 fbb4 	bl	800a72c <__lshift>
 8009fc4:	4631      	mov	r1, r6
 8009fc6:	4682      	mov	sl, r0
 8009fc8:	f000 fc1c 	bl	800a804 <__mcmp>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	dc03      	bgt.n	8009fd8 <_dtoa_r+0xab0>
 8009fd0:	d1e1      	bne.n	8009f96 <_dtoa_r+0xa6e>
 8009fd2:	f019 0f01 	tst.w	r9, #1
 8009fd6:	d0de      	beq.n	8009f96 <_dtoa_r+0xa6e>
 8009fd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009fdc:	d1d8      	bne.n	8009f90 <_dtoa_r+0xa68>
 8009fde:	9a01      	ldr	r2, [sp, #4]
 8009fe0:	2339      	movs	r3, #57	; 0x39
 8009fe2:	7013      	strb	r3, [r2, #0]
 8009fe4:	462b      	mov	r3, r5
 8009fe6:	461d      	mov	r5, r3
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009fee:	2a39      	cmp	r2, #57	; 0x39
 8009ff0:	d06c      	beq.n	800a0cc <_dtoa_r+0xba4>
 8009ff2:	3201      	adds	r2, #1
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	e747      	b.n	8009e88 <_dtoa_r+0x960>
 8009ff8:	2a00      	cmp	r2, #0
 8009ffa:	dd07      	ble.n	800a00c <_dtoa_r+0xae4>
 8009ffc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a000:	d0ed      	beq.n	8009fde <_dtoa_r+0xab6>
 800a002:	9a01      	ldr	r2, [sp, #4]
 800a004:	f109 0301 	add.w	r3, r9, #1
 800a008:	7013      	strb	r3, [r2, #0]
 800a00a:	e73d      	b.n	8009e88 <_dtoa_r+0x960>
 800a00c:	9b04      	ldr	r3, [sp, #16]
 800a00e:	9a08      	ldr	r2, [sp, #32]
 800a010:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a014:	4293      	cmp	r3, r2
 800a016:	d043      	beq.n	800a0a0 <_dtoa_r+0xb78>
 800a018:	4651      	mov	r1, sl
 800a01a:	2300      	movs	r3, #0
 800a01c:	220a      	movs	r2, #10
 800a01e:	4620      	mov	r0, r4
 800a020:	f000 f9d6 	bl	800a3d0 <__multadd>
 800a024:	45b8      	cmp	r8, r7
 800a026:	4682      	mov	sl, r0
 800a028:	f04f 0300 	mov.w	r3, #0
 800a02c:	f04f 020a 	mov.w	r2, #10
 800a030:	4641      	mov	r1, r8
 800a032:	4620      	mov	r0, r4
 800a034:	d107      	bne.n	800a046 <_dtoa_r+0xb1e>
 800a036:	f000 f9cb 	bl	800a3d0 <__multadd>
 800a03a:	4680      	mov	r8, r0
 800a03c:	4607      	mov	r7, r0
 800a03e:	9b04      	ldr	r3, [sp, #16]
 800a040:	3301      	adds	r3, #1
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	e775      	b.n	8009f32 <_dtoa_r+0xa0a>
 800a046:	f000 f9c3 	bl	800a3d0 <__multadd>
 800a04a:	4639      	mov	r1, r7
 800a04c:	4680      	mov	r8, r0
 800a04e:	2300      	movs	r3, #0
 800a050:	220a      	movs	r2, #10
 800a052:	4620      	mov	r0, r4
 800a054:	f000 f9bc 	bl	800a3d0 <__multadd>
 800a058:	4607      	mov	r7, r0
 800a05a:	e7f0      	b.n	800a03e <_dtoa_r+0xb16>
 800a05c:	9b04      	ldr	r3, [sp, #16]
 800a05e:	9301      	str	r3, [sp, #4]
 800a060:	9d00      	ldr	r5, [sp, #0]
 800a062:	4631      	mov	r1, r6
 800a064:	4650      	mov	r0, sl
 800a066:	f7ff f9d6 	bl	8009416 <quorem>
 800a06a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a06e:	9b00      	ldr	r3, [sp, #0]
 800a070:	f805 9b01 	strb.w	r9, [r5], #1
 800a074:	1aea      	subs	r2, r5, r3
 800a076:	9b01      	ldr	r3, [sp, #4]
 800a078:	4293      	cmp	r3, r2
 800a07a:	dd07      	ble.n	800a08c <_dtoa_r+0xb64>
 800a07c:	4651      	mov	r1, sl
 800a07e:	2300      	movs	r3, #0
 800a080:	220a      	movs	r2, #10
 800a082:	4620      	mov	r0, r4
 800a084:	f000 f9a4 	bl	800a3d0 <__multadd>
 800a088:	4682      	mov	sl, r0
 800a08a:	e7ea      	b.n	800a062 <_dtoa_r+0xb3a>
 800a08c:	9b01      	ldr	r3, [sp, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	bfc8      	it	gt
 800a092:	461d      	movgt	r5, r3
 800a094:	9b00      	ldr	r3, [sp, #0]
 800a096:	bfd8      	it	le
 800a098:	2501      	movle	r5, #1
 800a09a:	441d      	add	r5, r3
 800a09c:	f04f 0800 	mov.w	r8, #0
 800a0a0:	4651      	mov	r1, sl
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f000 fb41 	bl	800a72c <__lshift>
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	4682      	mov	sl, r0
 800a0ae:	f000 fba9 	bl	800a804 <__mcmp>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	dc96      	bgt.n	8009fe4 <_dtoa_r+0xabc>
 800a0b6:	d102      	bne.n	800a0be <_dtoa_r+0xb96>
 800a0b8:	f019 0f01 	tst.w	r9, #1
 800a0bc:	d192      	bne.n	8009fe4 <_dtoa_r+0xabc>
 800a0be:	462b      	mov	r3, r5
 800a0c0:	461d      	mov	r5, r3
 800a0c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0c6:	2a30      	cmp	r2, #48	; 0x30
 800a0c8:	d0fa      	beq.n	800a0c0 <_dtoa_r+0xb98>
 800a0ca:	e6dd      	b.n	8009e88 <_dtoa_r+0x960>
 800a0cc:	9a00      	ldr	r2, [sp, #0]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d189      	bne.n	8009fe6 <_dtoa_r+0xabe>
 800a0d2:	f10b 0b01 	add.w	fp, fp, #1
 800a0d6:	2331      	movs	r3, #49	; 0x31
 800a0d8:	e796      	b.n	800a008 <_dtoa_r+0xae0>
 800a0da:	4b0a      	ldr	r3, [pc, #40]	; (800a104 <_dtoa_r+0xbdc>)
 800a0dc:	f7ff ba99 	b.w	8009612 <_dtoa_r+0xea>
 800a0e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f47f aa6d 	bne.w	80095c2 <_dtoa_r+0x9a>
 800a0e8:	4b07      	ldr	r3, [pc, #28]	; (800a108 <_dtoa_r+0xbe0>)
 800a0ea:	f7ff ba92 	b.w	8009612 <_dtoa_r+0xea>
 800a0ee:	9b01      	ldr	r3, [sp, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	dcb5      	bgt.n	800a060 <_dtoa_r+0xb38>
 800a0f4:	9b07      	ldr	r3, [sp, #28]
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	f73f aeb1 	bgt.w	8009e5e <_dtoa_r+0x936>
 800a0fc:	e7b0      	b.n	800a060 <_dtoa_r+0xb38>
 800a0fe:	bf00      	nop
 800a100:	0800b298 	.word	0x0800b298
 800a104:	0800b1f8 	.word	0x0800b1f8
 800a108:	0800b21c 	.word	0x0800b21c

0800a10c <_free_r>:
 800a10c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a10e:	2900      	cmp	r1, #0
 800a110:	d044      	beq.n	800a19c <_free_r+0x90>
 800a112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a116:	9001      	str	r0, [sp, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f1a1 0404 	sub.w	r4, r1, #4
 800a11e:	bfb8      	it	lt
 800a120:	18e4      	addlt	r4, r4, r3
 800a122:	f000 f8e7 	bl	800a2f4 <__malloc_lock>
 800a126:	4a1e      	ldr	r2, [pc, #120]	; (800a1a0 <_free_r+0x94>)
 800a128:	9801      	ldr	r0, [sp, #4]
 800a12a:	6813      	ldr	r3, [r2, #0]
 800a12c:	b933      	cbnz	r3, 800a13c <_free_r+0x30>
 800a12e:	6063      	str	r3, [r4, #4]
 800a130:	6014      	str	r4, [r2, #0]
 800a132:	b003      	add	sp, #12
 800a134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a138:	f000 b8e2 	b.w	800a300 <__malloc_unlock>
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	d908      	bls.n	800a152 <_free_r+0x46>
 800a140:	6825      	ldr	r5, [r4, #0]
 800a142:	1961      	adds	r1, r4, r5
 800a144:	428b      	cmp	r3, r1
 800a146:	bf01      	itttt	eq
 800a148:	6819      	ldreq	r1, [r3, #0]
 800a14a:	685b      	ldreq	r3, [r3, #4]
 800a14c:	1949      	addeq	r1, r1, r5
 800a14e:	6021      	streq	r1, [r4, #0]
 800a150:	e7ed      	b.n	800a12e <_free_r+0x22>
 800a152:	461a      	mov	r2, r3
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	b10b      	cbz	r3, 800a15c <_free_r+0x50>
 800a158:	42a3      	cmp	r3, r4
 800a15a:	d9fa      	bls.n	800a152 <_free_r+0x46>
 800a15c:	6811      	ldr	r1, [r2, #0]
 800a15e:	1855      	adds	r5, r2, r1
 800a160:	42a5      	cmp	r5, r4
 800a162:	d10b      	bne.n	800a17c <_free_r+0x70>
 800a164:	6824      	ldr	r4, [r4, #0]
 800a166:	4421      	add	r1, r4
 800a168:	1854      	adds	r4, r2, r1
 800a16a:	42a3      	cmp	r3, r4
 800a16c:	6011      	str	r1, [r2, #0]
 800a16e:	d1e0      	bne.n	800a132 <_free_r+0x26>
 800a170:	681c      	ldr	r4, [r3, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	6053      	str	r3, [r2, #4]
 800a176:	440c      	add	r4, r1
 800a178:	6014      	str	r4, [r2, #0]
 800a17a:	e7da      	b.n	800a132 <_free_r+0x26>
 800a17c:	d902      	bls.n	800a184 <_free_r+0x78>
 800a17e:	230c      	movs	r3, #12
 800a180:	6003      	str	r3, [r0, #0]
 800a182:	e7d6      	b.n	800a132 <_free_r+0x26>
 800a184:	6825      	ldr	r5, [r4, #0]
 800a186:	1961      	adds	r1, r4, r5
 800a188:	428b      	cmp	r3, r1
 800a18a:	bf04      	itt	eq
 800a18c:	6819      	ldreq	r1, [r3, #0]
 800a18e:	685b      	ldreq	r3, [r3, #4]
 800a190:	6063      	str	r3, [r4, #4]
 800a192:	bf04      	itt	eq
 800a194:	1949      	addeq	r1, r1, r5
 800a196:	6021      	streq	r1, [r4, #0]
 800a198:	6054      	str	r4, [r2, #4]
 800a19a:	e7ca      	b.n	800a132 <_free_r+0x26>
 800a19c:	b003      	add	sp, #12
 800a19e:	bd30      	pop	{r4, r5, pc}
 800a1a0:	200107b8 	.word	0x200107b8

0800a1a4 <malloc>:
 800a1a4:	4b02      	ldr	r3, [pc, #8]	; (800a1b0 <malloc+0xc>)
 800a1a6:	4601      	mov	r1, r0
 800a1a8:	6818      	ldr	r0, [r3, #0]
 800a1aa:	f000 b823 	b.w	800a1f4 <_malloc_r>
 800a1ae:	bf00      	nop
 800a1b0:	20000100 	.word	0x20000100

0800a1b4 <sbrk_aligned>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	4e0e      	ldr	r6, [pc, #56]	; (800a1f0 <sbrk_aligned+0x3c>)
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	6831      	ldr	r1, [r6, #0]
 800a1bc:	4605      	mov	r5, r0
 800a1be:	b911      	cbnz	r1, 800a1c6 <sbrk_aligned+0x12>
 800a1c0:	f000 fcce 	bl	800ab60 <_sbrk_r>
 800a1c4:	6030      	str	r0, [r6, #0]
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	f000 fcc9 	bl	800ab60 <_sbrk_r>
 800a1ce:	1c43      	adds	r3, r0, #1
 800a1d0:	d00a      	beq.n	800a1e8 <sbrk_aligned+0x34>
 800a1d2:	1cc4      	adds	r4, r0, #3
 800a1d4:	f024 0403 	bic.w	r4, r4, #3
 800a1d8:	42a0      	cmp	r0, r4
 800a1da:	d007      	beq.n	800a1ec <sbrk_aligned+0x38>
 800a1dc:	1a21      	subs	r1, r4, r0
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f000 fcbe 	bl	800ab60 <_sbrk_r>
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d101      	bne.n	800a1ec <sbrk_aligned+0x38>
 800a1e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	bd70      	pop	{r4, r5, r6, pc}
 800a1f0:	200107bc 	.word	0x200107bc

0800a1f4 <_malloc_r>:
 800a1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f8:	1ccd      	adds	r5, r1, #3
 800a1fa:	f025 0503 	bic.w	r5, r5, #3
 800a1fe:	3508      	adds	r5, #8
 800a200:	2d0c      	cmp	r5, #12
 800a202:	bf38      	it	cc
 800a204:	250c      	movcc	r5, #12
 800a206:	2d00      	cmp	r5, #0
 800a208:	4607      	mov	r7, r0
 800a20a:	db01      	blt.n	800a210 <_malloc_r+0x1c>
 800a20c:	42a9      	cmp	r1, r5
 800a20e:	d905      	bls.n	800a21c <_malloc_r+0x28>
 800a210:	230c      	movs	r3, #12
 800a212:	603b      	str	r3, [r7, #0]
 800a214:	2600      	movs	r6, #0
 800a216:	4630      	mov	r0, r6
 800a218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a21c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2f0 <_malloc_r+0xfc>
 800a220:	f000 f868 	bl	800a2f4 <__malloc_lock>
 800a224:	f8d8 3000 	ldr.w	r3, [r8]
 800a228:	461c      	mov	r4, r3
 800a22a:	bb5c      	cbnz	r4, 800a284 <_malloc_r+0x90>
 800a22c:	4629      	mov	r1, r5
 800a22e:	4638      	mov	r0, r7
 800a230:	f7ff ffc0 	bl	800a1b4 <sbrk_aligned>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	4604      	mov	r4, r0
 800a238:	d155      	bne.n	800a2e6 <_malloc_r+0xf2>
 800a23a:	f8d8 4000 	ldr.w	r4, [r8]
 800a23e:	4626      	mov	r6, r4
 800a240:	2e00      	cmp	r6, #0
 800a242:	d145      	bne.n	800a2d0 <_malloc_r+0xdc>
 800a244:	2c00      	cmp	r4, #0
 800a246:	d048      	beq.n	800a2da <_malloc_r+0xe6>
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	4631      	mov	r1, r6
 800a24c:	4638      	mov	r0, r7
 800a24e:	eb04 0903 	add.w	r9, r4, r3
 800a252:	f000 fc85 	bl	800ab60 <_sbrk_r>
 800a256:	4581      	cmp	r9, r0
 800a258:	d13f      	bne.n	800a2da <_malloc_r+0xe6>
 800a25a:	6821      	ldr	r1, [r4, #0]
 800a25c:	1a6d      	subs	r5, r5, r1
 800a25e:	4629      	mov	r1, r5
 800a260:	4638      	mov	r0, r7
 800a262:	f7ff ffa7 	bl	800a1b4 <sbrk_aligned>
 800a266:	3001      	adds	r0, #1
 800a268:	d037      	beq.n	800a2da <_malloc_r+0xe6>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	442b      	add	r3, r5
 800a26e:	6023      	str	r3, [r4, #0]
 800a270:	f8d8 3000 	ldr.w	r3, [r8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d038      	beq.n	800a2ea <_malloc_r+0xf6>
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	42a2      	cmp	r2, r4
 800a27c:	d12b      	bne.n	800a2d6 <_malloc_r+0xe2>
 800a27e:	2200      	movs	r2, #0
 800a280:	605a      	str	r2, [r3, #4]
 800a282:	e00f      	b.n	800a2a4 <_malloc_r+0xb0>
 800a284:	6822      	ldr	r2, [r4, #0]
 800a286:	1b52      	subs	r2, r2, r5
 800a288:	d41f      	bmi.n	800a2ca <_malloc_r+0xd6>
 800a28a:	2a0b      	cmp	r2, #11
 800a28c:	d917      	bls.n	800a2be <_malloc_r+0xca>
 800a28e:	1961      	adds	r1, r4, r5
 800a290:	42a3      	cmp	r3, r4
 800a292:	6025      	str	r5, [r4, #0]
 800a294:	bf18      	it	ne
 800a296:	6059      	strne	r1, [r3, #4]
 800a298:	6863      	ldr	r3, [r4, #4]
 800a29a:	bf08      	it	eq
 800a29c:	f8c8 1000 	streq.w	r1, [r8]
 800a2a0:	5162      	str	r2, [r4, r5]
 800a2a2:	604b      	str	r3, [r1, #4]
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	f104 060b 	add.w	r6, r4, #11
 800a2aa:	f000 f829 	bl	800a300 <__malloc_unlock>
 800a2ae:	f026 0607 	bic.w	r6, r6, #7
 800a2b2:	1d23      	adds	r3, r4, #4
 800a2b4:	1af2      	subs	r2, r6, r3
 800a2b6:	d0ae      	beq.n	800a216 <_malloc_r+0x22>
 800a2b8:	1b9b      	subs	r3, r3, r6
 800a2ba:	50a3      	str	r3, [r4, r2]
 800a2bc:	e7ab      	b.n	800a216 <_malloc_r+0x22>
 800a2be:	42a3      	cmp	r3, r4
 800a2c0:	6862      	ldr	r2, [r4, #4]
 800a2c2:	d1dd      	bne.n	800a280 <_malloc_r+0x8c>
 800a2c4:	f8c8 2000 	str.w	r2, [r8]
 800a2c8:	e7ec      	b.n	800a2a4 <_malloc_r+0xb0>
 800a2ca:	4623      	mov	r3, r4
 800a2cc:	6864      	ldr	r4, [r4, #4]
 800a2ce:	e7ac      	b.n	800a22a <_malloc_r+0x36>
 800a2d0:	4634      	mov	r4, r6
 800a2d2:	6876      	ldr	r6, [r6, #4]
 800a2d4:	e7b4      	b.n	800a240 <_malloc_r+0x4c>
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	e7cc      	b.n	800a274 <_malloc_r+0x80>
 800a2da:	230c      	movs	r3, #12
 800a2dc:	603b      	str	r3, [r7, #0]
 800a2de:	4638      	mov	r0, r7
 800a2e0:	f000 f80e 	bl	800a300 <__malloc_unlock>
 800a2e4:	e797      	b.n	800a216 <_malloc_r+0x22>
 800a2e6:	6025      	str	r5, [r4, #0]
 800a2e8:	e7dc      	b.n	800a2a4 <_malloc_r+0xb0>
 800a2ea:	605b      	str	r3, [r3, #4]
 800a2ec:	deff      	udf	#255	; 0xff
 800a2ee:	bf00      	nop
 800a2f0:	200107b8 	.word	0x200107b8

0800a2f4 <__malloc_lock>:
 800a2f4:	4801      	ldr	r0, [pc, #4]	; (800a2fc <__malloc_lock+0x8>)
 800a2f6:	f7ff b88c 	b.w	8009412 <__retarget_lock_acquire_recursive>
 800a2fa:	bf00      	nop
 800a2fc:	200107b4 	.word	0x200107b4

0800a300 <__malloc_unlock>:
 800a300:	4801      	ldr	r0, [pc, #4]	; (800a308 <__malloc_unlock+0x8>)
 800a302:	f7ff b887 	b.w	8009414 <__retarget_lock_release_recursive>
 800a306:	bf00      	nop
 800a308:	200107b4 	.word	0x200107b4

0800a30c <_Balloc>:
 800a30c:	b570      	push	{r4, r5, r6, lr}
 800a30e:	69c6      	ldr	r6, [r0, #28]
 800a310:	4604      	mov	r4, r0
 800a312:	460d      	mov	r5, r1
 800a314:	b976      	cbnz	r6, 800a334 <_Balloc+0x28>
 800a316:	2010      	movs	r0, #16
 800a318:	f7ff ff44 	bl	800a1a4 <malloc>
 800a31c:	4602      	mov	r2, r0
 800a31e:	61e0      	str	r0, [r4, #28]
 800a320:	b920      	cbnz	r0, 800a32c <_Balloc+0x20>
 800a322:	4b18      	ldr	r3, [pc, #96]	; (800a384 <_Balloc+0x78>)
 800a324:	4818      	ldr	r0, [pc, #96]	; (800a388 <_Balloc+0x7c>)
 800a326:	216b      	movs	r1, #107	; 0x6b
 800a328:	f000 fc38 	bl	800ab9c <__assert_func>
 800a32c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a330:	6006      	str	r6, [r0, #0]
 800a332:	60c6      	str	r6, [r0, #12]
 800a334:	69e6      	ldr	r6, [r4, #28]
 800a336:	68f3      	ldr	r3, [r6, #12]
 800a338:	b183      	cbz	r3, 800a35c <_Balloc+0x50>
 800a33a:	69e3      	ldr	r3, [r4, #28]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a342:	b9b8      	cbnz	r0, 800a374 <_Balloc+0x68>
 800a344:	2101      	movs	r1, #1
 800a346:	fa01 f605 	lsl.w	r6, r1, r5
 800a34a:	1d72      	adds	r2, r6, #5
 800a34c:	0092      	lsls	r2, r2, #2
 800a34e:	4620      	mov	r0, r4
 800a350:	f000 fc42 	bl	800abd8 <_calloc_r>
 800a354:	b160      	cbz	r0, 800a370 <_Balloc+0x64>
 800a356:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a35a:	e00e      	b.n	800a37a <_Balloc+0x6e>
 800a35c:	2221      	movs	r2, #33	; 0x21
 800a35e:	2104      	movs	r1, #4
 800a360:	4620      	mov	r0, r4
 800a362:	f000 fc39 	bl	800abd8 <_calloc_r>
 800a366:	69e3      	ldr	r3, [r4, #28]
 800a368:	60f0      	str	r0, [r6, #12]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1e4      	bne.n	800a33a <_Balloc+0x2e>
 800a370:	2000      	movs	r0, #0
 800a372:	bd70      	pop	{r4, r5, r6, pc}
 800a374:	6802      	ldr	r2, [r0, #0]
 800a376:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a37a:	2300      	movs	r3, #0
 800a37c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a380:	e7f7      	b.n	800a372 <_Balloc+0x66>
 800a382:	bf00      	nop
 800a384:	0800b229 	.word	0x0800b229
 800a388:	0800b2a9 	.word	0x0800b2a9

0800a38c <_Bfree>:
 800a38c:	b570      	push	{r4, r5, r6, lr}
 800a38e:	69c6      	ldr	r6, [r0, #28]
 800a390:	4605      	mov	r5, r0
 800a392:	460c      	mov	r4, r1
 800a394:	b976      	cbnz	r6, 800a3b4 <_Bfree+0x28>
 800a396:	2010      	movs	r0, #16
 800a398:	f7ff ff04 	bl	800a1a4 <malloc>
 800a39c:	4602      	mov	r2, r0
 800a39e:	61e8      	str	r0, [r5, #28]
 800a3a0:	b920      	cbnz	r0, 800a3ac <_Bfree+0x20>
 800a3a2:	4b09      	ldr	r3, [pc, #36]	; (800a3c8 <_Bfree+0x3c>)
 800a3a4:	4809      	ldr	r0, [pc, #36]	; (800a3cc <_Bfree+0x40>)
 800a3a6:	218f      	movs	r1, #143	; 0x8f
 800a3a8:	f000 fbf8 	bl	800ab9c <__assert_func>
 800a3ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3b0:	6006      	str	r6, [r0, #0]
 800a3b2:	60c6      	str	r6, [r0, #12]
 800a3b4:	b13c      	cbz	r4, 800a3c6 <_Bfree+0x3a>
 800a3b6:	69eb      	ldr	r3, [r5, #28]
 800a3b8:	6862      	ldr	r2, [r4, #4]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3c0:	6021      	str	r1, [r4, #0]
 800a3c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3c6:	bd70      	pop	{r4, r5, r6, pc}
 800a3c8:	0800b229 	.word	0x0800b229
 800a3cc:	0800b2a9 	.word	0x0800b2a9

0800a3d0 <__multadd>:
 800a3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d4:	690d      	ldr	r5, [r1, #16]
 800a3d6:	4607      	mov	r7, r0
 800a3d8:	460c      	mov	r4, r1
 800a3da:	461e      	mov	r6, r3
 800a3dc:	f101 0c14 	add.w	ip, r1, #20
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	f8dc 3000 	ldr.w	r3, [ip]
 800a3e6:	b299      	uxth	r1, r3
 800a3e8:	fb02 6101 	mla	r1, r2, r1, r6
 800a3ec:	0c1e      	lsrs	r6, r3, #16
 800a3ee:	0c0b      	lsrs	r3, r1, #16
 800a3f0:	fb02 3306 	mla	r3, r2, r6, r3
 800a3f4:	b289      	uxth	r1, r1
 800a3f6:	3001      	adds	r0, #1
 800a3f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3fc:	4285      	cmp	r5, r0
 800a3fe:	f84c 1b04 	str.w	r1, [ip], #4
 800a402:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a406:	dcec      	bgt.n	800a3e2 <__multadd+0x12>
 800a408:	b30e      	cbz	r6, 800a44e <__multadd+0x7e>
 800a40a:	68a3      	ldr	r3, [r4, #8]
 800a40c:	42ab      	cmp	r3, r5
 800a40e:	dc19      	bgt.n	800a444 <__multadd+0x74>
 800a410:	6861      	ldr	r1, [r4, #4]
 800a412:	4638      	mov	r0, r7
 800a414:	3101      	adds	r1, #1
 800a416:	f7ff ff79 	bl	800a30c <_Balloc>
 800a41a:	4680      	mov	r8, r0
 800a41c:	b928      	cbnz	r0, 800a42a <__multadd+0x5a>
 800a41e:	4602      	mov	r2, r0
 800a420:	4b0c      	ldr	r3, [pc, #48]	; (800a454 <__multadd+0x84>)
 800a422:	480d      	ldr	r0, [pc, #52]	; (800a458 <__multadd+0x88>)
 800a424:	21ba      	movs	r1, #186	; 0xba
 800a426:	f000 fbb9 	bl	800ab9c <__assert_func>
 800a42a:	6922      	ldr	r2, [r4, #16]
 800a42c:	3202      	adds	r2, #2
 800a42e:	f104 010c 	add.w	r1, r4, #12
 800a432:	0092      	lsls	r2, r2, #2
 800a434:	300c      	adds	r0, #12
 800a436:	f000 fba3 	bl	800ab80 <memcpy>
 800a43a:	4621      	mov	r1, r4
 800a43c:	4638      	mov	r0, r7
 800a43e:	f7ff ffa5 	bl	800a38c <_Bfree>
 800a442:	4644      	mov	r4, r8
 800a444:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a448:	3501      	adds	r5, #1
 800a44a:	615e      	str	r6, [r3, #20]
 800a44c:	6125      	str	r5, [r4, #16]
 800a44e:	4620      	mov	r0, r4
 800a450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a454:	0800b298 	.word	0x0800b298
 800a458:	0800b2a9 	.word	0x0800b2a9

0800a45c <__hi0bits>:
 800a45c:	0c03      	lsrs	r3, r0, #16
 800a45e:	041b      	lsls	r3, r3, #16
 800a460:	b9d3      	cbnz	r3, 800a498 <__hi0bits+0x3c>
 800a462:	0400      	lsls	r0, r0, #16
 800a464:	2310      	movs	r3, #16
 800a466:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a46a:	bf04      	itt	eq
 800a46c:	0200      	lsleq	r0, r0, #8
 800a46e:	3308      	addeq	r3, #8
 800a470:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a474:	bf04      	itt	eq
 800a476:	0100      	lsleq	r0, r0, #4
 800a478:	3304      	addeq	r3, #4
 800a47a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a47e:	bf04      	itt	eq
 800a480:	0080      	lsleq	r0, r0, #2
 800a482:	3302      	addeq	r3, #2
 800a484:	2800      	cmp	r0, #0
 800a486:	db05      	blt.n	800a494 <__hi0bits+0x38>
 800a488:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a48c:	f103 0301 	add.w	r3, r3, #1
 800a490:	bf08      	it	eq
 800a492:	2320      	moveq	r3, #32
 800a494:	4618      	mov	r0, r3
 800a496:	4770      	bx	lr
 800a498:	2300      	movs	r3, #0
 800a49a:	e7e4      	b.n	800a466 <__hi0bits+0xa>

0800a49c <__lo0bits>:
 800a49c:	6803      	ldr	r3, [r0, #0]
 800a49e:	f013 0207 	ands.w	r2, r3, #7
 800a4a2:	d00c      	beq.n	800a4be <__lo0bits+0x22>
 800a4a4:	07d9      	lsls	r1, r3, #31
 800a4a6:	d422      	bmi.n	800a4ee <__lo0bits+0x52>
 800a4a8:	079a      	lsls	r2, r3, #30
 800a4aa:	bf49      	itett	mi
 800a4ac:	085b      	lsrmi	r3, r3, #1
 800a4ae:	089b      	lsrpl	r3, r3, #2
 800a4b0:	6003      	strmi	r3, [r0, #0]
 800a4b2:	2201      	movmi	r2, #1
 800a4b4:	bf5c      	itt	pl
 800a4b6:	6003      	strpl	r3, [r0, #0]
 800a4b8:	2202      	movpl	r2, #2
 800a4ba:	4610      	mov	r0, r2
 800a4bc:	4770      	bx	lr
 800a4be:	b299      	uxth	r1, r3
 800a4c0:	b909      	cbnz	r1, 800a4c6 <__lo0bits+0x2a>
 800a4c2:	0c1b      	lsrs	r3, r3, #16
 800a4c4:	2210      	movs	r2, #16
 800a4c6:	b2d9      	uxtb	r1, r3
 800a4c8:	b909      	cbnz	r1, 800a4ce <__lo0bits+0x32>
 800a4ca:	3208      	adds	r2, #8
 800a4cc:	0a1b      	lsrs	r3, r3, #8
 800a4ce:	0719      	lsls	r1, r3, #28
 800a4d0:	bf04      	itt	eq
 800a4d2:	091b      	lsreq	r3, r3, #4
 800a4d4:	3204      	addeq	r2, #4
 800a4d6:	0799      	lsls	r1, r3, #30
 800a4d8:	bf04      	itt	eq
 800a4da:	089b      	lsreq	r3, r3, #2
 800a4dc:	3202      	addeq	r2, #2
 800a4de:	07d9      	lsls	r1, r3, #31
 800a4e0:	d403      	bmi.n	800a4ea <__lo0bits+0x4e>
 800a4e2:	085b      	lsrs	r3, r3, #1
 800a4e4:	f102 0201 	add.w	r2, r2, #1
 800a4e8:	d003      	beq.n	800a4f2 <__lo0bits+0x56>
 800a4ea:	6003      	str	r3, [r0, #0]
 800a4ec:	e7e5      	b.n	800a4ba <__lo0bits+0x1e>
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	e7e3      	b.n	800a4ba <__lo0bits+0x1e>
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	e7e1      	b.n	800a4ba <__lo0bits+0x1e>
	...

0800a4f8 <__i2b>:
 800a4f8:	b510      	push	{r4, lr}
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	f7ff ff05 	bl	800a30c <_Balloc>
 800a502:	4602      	mov	r2, r0
 800a504:	b928      	cbnz	r0, 800a512 <__i2b+0x1a>
 800a506:	4b05      	ldr	r3, [pc, #20]	; (800a51c <__i2b+0x24>)
 800a508:	4805      	ldr	r0, [pc, #20]	; (800a520 <__i2b+0x28>)
 800a50a:	f240 1145 	movw	r1, #325	; 0x145
 800a50e:	f000 fb45 	bl	800ab9c <__assert_func>
 800a512:	2301      	movs	r3, #1
 800a514:	6144      	str	r4, [r0, #20]
 800a516:	6103      	str	r3, [r0, #16]
 800a518:	bd10      	pop	{r4, pc}
 800a51a:	bf00      	nop
 800a51c:	0800b298 	.word	0x0800b298
 800a520:	0800b2a9 	.word	0x0800b2a9

0800a524 <__multiply>:
 800a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a528:	4691      	mov	r9, r2
 800a52a:	690a      	ldr	r2, [r1, #16]
 800a52c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a530:	429a      	cmp	r2, r3
 800a532:	bfb8      	it	lt
 800a534:	460b      	movlt	r3, r1
 800a536:	460c      	mov	r4, r1
 800a538:	bfbc      	itt	lt
 800a53a:	464c      	movlt	r4, r9
 800a53c:	4699      	movlt	r9, r3
 800a53e:	6927      	ldr	r7, [r4, #16]
 800a540:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a544:	68a3      	ldr	r3, [r4, #8]
 800a546:	6861      	ldr	r1, [r4, #4]
 800a548:	eb07 060a 	add.w	r6, r7, sl
 800a54c:	42b3      	cmp	r3, r6
 800a54e:	b085      	sub	sp, #20
 800a550:	bfb8      	it	lt
 800a552:	3101      	addlt	r1, #1
 800a554:	f7ff feda 	bl	800a30c <_Balloc>
 800a558:	b930      	cbnz	r0, 800a568 <__multiply+0x44>
 800a55a:	4602      	mov	r2, r0
 800a55c:	4b44      	ldr	r3, [pc, #272]	; (800a670 <__multiply+0x14c>)
 800a55e:	4845      	ldr	r0, [pc, #276]	; (800a674 <__multiply+0x150>)
 800a560:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a564:	f000 fb1a 	bl	800ab9c <__assert_func>
 800a568:	f100 0514 	add.w	r5, r0, #20
 800a56c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a570:	462b      	mov	r3, r5
 800a572:	2200      	movs	r2, #0
 800a574:	4543      	cmp	r3, r8
 800a576:	d321      	bcc.n	800a5bc <__multiply+0x98>
 800a578:	f104 0314 	add.w	r3, r4, #20
 800a57c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a580:	f109 0314 	add.w	r3, r9, #20
 800a584:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a588:	9202      	str	r2, [sp, #8]
 800a58a:	1b3a      	subs	r2, r7, r4
 800a58c:	3a15      	subs	r2, #21
 800a58e:	f022 0203 	bic.w	r2, r2, #3
 800a592:	3204      	adds	r2, #4
 800a594:	f104 0115 	add.w	r1, r4, #21
 800a598:	428f      	cmp	r7, r1
 800a59a:	bf38      	it	cc
 800a59c:	2204      	movcc	r2, #4
 800a59e:	9201      	str	r2, [sp, #4]
 800a5a0:	9a02      	ldr	r2, [sp, #8]
 800a5a2:	9303      	str	r3, [sp, #12]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d80c      	bhi.n	800a5c2 <__multiply+0x9e>
 800a5a8:	2e00      	cmp	r6, #0
 800a5aa:	dd03      	ble.n	800a5b4 <__multiply+0x90>
 800a5ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d05b      	beq.n	800a66c <__multiply+0x148>
 800a5b4:	6106      	str	r6, [r0, #16]
 800a5b6:	b005      	add	sp, #20
 800a5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5bc:	f843 2b04 	str.w	r2, [r3], #4
 800a5c0:	e7d8      	b.n	800a574 <__multiply+0x50>
 800a5c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a5c6:	f1ba 0f00 	cmp.w	sl, #0
 800a5ca:	d024      	beq.n	800a616 <__multiply+0xf2>
 800a5cc:	f104 0e14 	add.w	lr, r4, #20
 800a5d0:	46a9      	mov	r9, r5
 800a5d2:	f04f 0c00 	mov.w	ip, #0
 800a5d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a5da:	f8d9 1000 	ldr.w	r1, [r9]
 800a5de:	fa1f fb82 	uxth.w	fp, r2
 800a5e2:	b289      	uxth	r1, r1
 800a5e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a5e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a5ec:	f8d9 2000 	ldr.w	r2, [r9]
 800a5f0:	4461      	add	r1, ip
 800a5f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a5fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a5fe:	b289      	uxth	r1, r1
 800a600:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a604:	4577      	cmp	r7, lr
 800a606:	f849 1b04 	str.w	r1, [r9], #4
 800a60a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a60e:	d8e2      	bhi.n	800a5d6 <__multiply+0xb2>
 800a610:	9a01      	ldr	r2, [sp, #4]
 800a612:	f845 c002 	str.w	ip, [r5, r2]
 800a616:	9a03      	ldr	r2, [sp, #12]
 800a618:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a61c:	3304      	adds	r3, #4
 800a61e:	f1b9 0f00 	cmp.w	r9, #0
 800a622:	d021      	beq.n	800a668 <__multiply+0x144>
 800a624:	6829      	ldr	r1, [r5, #0]
 800a626:	f104 0c14 	add.w	ip, r4, #20
 800a62a:	46ae      	mov	lr, r5
 800a62c:	f04f 0a00 	mov.w	sl, #0
 800a630:	f8bc b000 	ldrh.w	fp, [ip]
 800a634:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a638:	fb09 220b 	mla	r2, r9, fp, r2
 800a63c:	4452      	add	r2, sl
 800a63e:	b289      	uxth	r1, r1
 800a640:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a644:	f84e 1b04 	str.w	r1, [lr], #4
 800a648:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a64c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a650:	f8be 1000 	ldrh.w	r1, [lr]
 800a654:	fb09 110a 	mla	r1, r9, sl, r1
 800a658:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a65c:	4567      	cmp	r7, ip
 800a65e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a662:	d8e5      	bhi.n	800a630 <__multiply+0x10c>
 800a664:	9a01      	ldr	r2, [sp, #4]
 800a666:	50a9      	str	r1, [r5, r2]
 800a668:	3504      	adds	r5, #4
 800a66a:	e799      	b.n	800a5a0 <__multiply+0x7c>
 800a66c:	3e01      	subs	r6, #1
 800a66e:	e79b      	b.n	800a5a8 <__multiply+0x84>
 800a670:	0800b298 	.word	0x0800b298
 800a674:	0800b2a9 	.word	0x0800b2a9

0800a678 <__pow5mult>:
 800a678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a67c:	4615      	mov	r5, r2
 800a67e:	f012 0203 	ands.w	r2, r2, #3
 800a682:	4606      	mov	r6, r0
 800a684:	460f      	mov	r7, r1
 800a686:	d007      	beq.n	800a698 <__pow5mult+0x20>
 800a688:	4c25      	ldr	r4, [pc, #148]	; (800a720 <__pow5mult+0xa8>)
 800a68a:	3a01      	subs	r2, #1
 800a68c:	2300      	movs	r3, #0
 800a68e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a692:	f7ff fe9d 	bl	800a3d0 <__multadd>
 800a696:	4607      	mov	r7, r0
 800a698:	10ad      	asrs	r5, r5, #2
 800a69a:	d03d      	beq.n	800a718 <__pow5mult+0xa0>
 800a69c:	69f4      	ldr	r4, [r6, #28]
 800a69e:	b97c      	cbnz	r4, 800a6c0 <__pow5mult+0x48>
 800a6a0:	2010      	movs	r0, #16
 800a6a2:	f7ff fd7f 	bl	800a1a4 <malloc>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	61f0      	str	r0, [r6, #28]
 800a6aa:	b928      	cbnz	r0, 800a6b8 <__pow5mult+0x40>
 800a6ac:	4b1d      	ldr	r3, [pc, #116]	; (800a724 <__pow5mult+0xac>)
 800a6ae:	481e      	ldr	r0, [pc, #120]	; (800a728 <__pow5mult+0xb0>)
 800a6b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a6b4:	f000 fa72 	bl	800ab9c <__assert_func>
 800a6b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6bc:	6004      	str	r4, [r0, #0]
 800a6be:	60c4      	str	r4, [r0, #12]
 800a6c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a6c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6c8:	b94c      	cbnz	r4, 800a6de <__pow5mult+0x66>
 800a6ca:	f240 2171 	movw	r1, #625	; 0x271
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f7ff ff12 	bl	800a4f8 <__i2b>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6da:	4604      	mov	r4, r0
 800a6dc:	6003      	str	r3, [r0, #0]
 800a6de:	f04f 0900 	mov.w	r9, #0
 800a6e2:	07eb      	lsls	r3, r5, #31
 800a6e4:	d50a      	bpl.n	800a6fc <__pow5mult+0x84>
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	4622      	mov	r2, r4
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	f7ff ff1a 	bl	800a524 <__multiply>
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	4680      	mov	r8, r0
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	f7ff fe49 	bl	800a38c <_Bfree>
 800a6fa:	4647      	mov	r7, r8
 800a6fc:	106d      	asrs	r5, r5, #1
 800a6fe:	d00b      	beq.n	800a718 <__pow5mult+0xa0>
 800a700:	6820      	ldr	r0, [r4, #0]
 800a702:	b938      	cbnz	r0, 800a714 <__pow5mult+0x9c>
 800a704:	4622      	mov	r2, r4
 800a706:	4621      	mov	r1, r4
 800a708:	4630      	mov	r0, r6
 800a70a:	f7ff ff0b 	bl	800a524 <__multiply>
 800a70e:	6020      	str	r0, [r4, #0]
 800a710:	f8c0 9000 	str.w	r9, [r0]
 800a714:	4604      	mov	r4, r0
 800a716:	e7e4      	b.n	800a6e2 <__pow5mult+0x6a>
 800a718:	4638      	mov	r0, r7
 800a71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a71e:	bf00      	nop
 800a720:	0800b3f8 	.word	0x0800b3f8
 800a724:	0800b229 	.word	0x0800b229
 800a728:	0800b2a9 	.word	0x0800b2a9

0800a72c <__lshift>:
 800a72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a730:	460c      	mov	r4, r1
 800a732:	6849      	ldr	r1, [r1, #4]
 800a734:	6923      	ldr	r3, [r4, #16]
 800a736:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a73a:	68a3      	ldr	r3, [r4, #8]
 800a73c:	4607      	mov	r7, r0
 800a73e:	4691      	mov	r9, r2
 800a740:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a744:	f108 0601 	add.w	r6, r8, #1
 800a748:	42b3      	cmp	r3, r6
 800a74a:	db0b      	blt.n	800a764 <__lshift+0x38>
 800a74c:	4638      	mov	r0, r7
 800a74e:	f7ff fddd 	bl	800a30c <_Balloc>
 800a752:	4605      	mov	r5, r0
 800a754:	b948      	cbnz	r0, 800a76a <__lshift+0x3e>
 800a756:	4602      	mov	r2, r0
 800a758:	4b28      	ldr	r3, [pc, #160]	; (800a7fc <__lshift+0xd0>)
 800a75a:	4829      	ldr	r0, [pc, #164]	; (800a800 <__lshift+0xd4>)
 800a75c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a760:	f000 fa1c 	bl	800ab9c <__assert_func>
 800a764:	3101      	adds	r1, #1
 800a766:	005b      	lsls	r3, r3, #1
 800a768:	e7ee      	b.n	800a748 <__lshift+0x1c>
 800a76a:	2300      	movs	r3, #0
 800a76c:	f100 0114 	add.w	r1, r0, #20
 800a770:	f100 0210 	add.w	r2, r0, #16
 800a774:	4618      	mov	r0, r3
 800a776:	4553      	cmp	r3, sl
 800a778:	db33      	blt.n	800a7e2 <__lshift+0xb6>
 800a77a:	6920      	ldr	r0, [r4, #16]
 800a77c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a780:	f104 0314 	add.w	r3, r4, #20
 800a784:	f019 091f 	ands.w	r9, r9, #31
 800a788:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a78c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a790:	d02b      	beq.n	800a7ea <__lshift+0xbe>
 800a792:	f1c9 0e20 	rsb	lr, r9, #32
 800a796:	468a      	mov	sl, r1
 800a798:	2200      	movs	r2, #0
 800a79a:	6818      	ldr	r0, [r3, #0]
 800a79c:	fa00 f009 	lsl.w	r0, r0, r9
 800a7a0:	4310      	orrs	r0, r2
 800a7a2:	f84a 0b04 	str.w	r0, [sl], #4
 800a7a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7aa:	459c      	cmp	ip, r3
 800a7ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800a7b0:	d8f3      	bhi.n	800a79a <__lshift+0x6e>
 800a7b2:	ebac 0304 	sub.w	r3, ip, r4
 800a7b6:	3b15      	subs	r3, #21
 800a7b8:	f023 0303 	bic.w	r3, r3, #3
 800a7bc:	3304      	adds	r3, #4
 800a7be:	f104 0015 	add.w	r0, r4, #21
 800a7c2:	4584      	cmp	ip, r0
 800a7c4:	bf38      	it	cc
 800a7c6:	2304      	movcc	r3, #4
 800a7c8:	50ca      	str	r2, [r1, r3]
 800a7ca:	b10a      	cbz	r2, 800a7d0 <__lshift+0xa4>
 800a7cc:	f108 0602 	add.w	r6, r8, #2
 800a7d0:	3e01      	subs	r6, #1
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	612e      	str	r6, [r5, #16]
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	f7ff fdd8 	bl	800a38c <_Bfree>
 800a7dc:	4628      	mov	r0, r5
 800a7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	e7c5      	b.n	800a776 <__lshift+0x4a>
 800a7ea:	3904      	subs	r1, #4
 800a7ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7f4:	459c      	cmp	ip, r3
 800a7f6:	d8f9      	bhi.n	800a7ec <__lshift+0xc0>
 800a7f8:	e7ea      	b.n	800a7d0 <__lshift+0xa4>
 800a7fa:	bf00      	nop
 800a7fc:	0800b298 	.word	0x0800b298
 800a800:	0800b2a9 	.word	0x0800b2a9

0800a804 <__mcmp>:
 800a804:	b530      	push	{r4, r5, lr}
 800a806:	6902      	ldr	r2, [r0, #16]
 800a808:	690c      	ldr	r4, [r1, #16]
 800a80a:	1b12      	subs	r2, r2, r4
 800a80c:	d10e      	bne.n	800a82c <__mcmp+0x28>
 800a80e:	f100 0314 	add.w	r3, r0, #20
 800a812:	3114      	adds	r1, #20
 800a814:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a818:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a81c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a820:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a824:	42a5      	cmp	r5, r4
 800a826:	d003      	beq.n	800a830 <__mcmp+0x2c>
 800a828:	d305      	bcc.n	800a836 <__mcmp+0x32>
 800a82a:	2201      	movs	r2, #1
 800a82c:	4610      	mov	r0, r2
 800a82e:	bd30      	pop	{r4, r5, pc}
 800a830:	4283      	cmp	r3, r0
 800a832:	d3f3      	bcc.n	800a81c <__mcmp+0x18>
 800a834:	e7fa      	b.n	800a82c <__mcmp+0x28>
 800a836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a83a:	e7f7      	b.n	800a82c <__mcmp+0x28>

0800a83c <__mdiff>:
 800a83c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a840:	460c      	mov	r4, r1
 800a842:	4606      	mov	r6, r0
 800a844:	4611      	mov	r1, r2
 800a846:	4620      	mov	r0, r4
 800a848:	4690      	mov	r8, r2
 800a84a:	f7ff ffdb 	bl	800a804 <__mcmp>
 800a84e:	1e05      	subs	r5, r0, #0
 800a850:	d110      	bne.n	800a874 <__mdiff+0x38>
 800a852:	4629      	mov	r1, r5
 800a854:	4630      	mov	r0, r6
 800a856:	f7ff fd59 	bl	800a30c <_Balloc>
 800a85a:	b930      	cbnz	r0, 800a86a <__mdiff+0x2e>
 800a85c:	4b3a      	ldr	r3, [pc, #232]	; (800a948 <__mdiff+0x10c>)
 800a85e:	4602      	mov	r2, r0
 800a860:	f240 2137 	movw	r1, #567	; 0x237
 800a864:	4839      	ldr	r0, [pc, #228]	; (800a94c <__mdiff+0x110>)
 800a866:	f000 f999 	bl	800ab9c <__assert_func>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a874:	bfa4      	itt	ge
 800a876:	4643      	movge	r3, r8
 800a878:	46a0      	movge	r8, r4
 800a87a:	4630      	mov	r0, r6
 800a87c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a880:	bfa6      	itte	ge
 800a882:	461c      	movge	r4, r3
 800a884:	2500      	movge	r5, #0
 800a886:	2501      	movlt	r5, #1
 800a888:	f7ff fd40 	bl	800a30c <_Balloc>
 800a88c:	b920      	cbnz	r0, 800a898 <__mdiff+0x5c>
 800a88e:	4b2e      	ldr	r3, [pc, #184]	; (800a948 <__mdiff+0x10c>)
 800a890:	4602      	mov	r2, r0
 800a892:	f240 2145 	movw	r1, #581	; 0x245
 800a896:	e7e5      	b.n	800a864 <__mdiff+0x28>
 800a898:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a89c:	6926      	ldr	r6, [r4, #16]
 800a89e:	60c5      	str	r5, [r0, #12]
 800a8a0:	f104 0914 	add.w	r9, r4, #20
 800a8a4:	f108 0514 	add.w	r5, r8, #20
 800a8a8:	f100 0e14 	add.w	lr, r0, #20
 800a8ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a8b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a8b4:	f108 0210 	add.w	r2, r8, #16
 800a8b8:	46f2      	mov	sl, lr
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a8c4:	fa11 f88b 	uxtah	r8, r1, fp
 800a8c8:	b299      	uxth	r1, r3
 800a8ca:	0c1b      	lsrs	r3, r3, #16
 800a8cc:	eba8 0801 	sub.w	r8, r8, r1
 800a8d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a8d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a8d8:	fa1f f888 	uxth.w	r8, r8
 800a8dc:	1419      	asrs	r1, r3, #16
 800a8de:	454e      	cmp	r6, r9
 800a8e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a8e4:	f84a 3b04 	str.w	r3, [sl], #4
 800a8e8:	d8e8      	bhi.n	800a8bc <__mdiff+0x80>
 800a8ea:	1b33      	subs	r3, r6, r4
 800a8ec:	3b15      	subs	r3, #21
 800a8ee:	f023 0303 	bic.w	r3, r3, #3
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	3415      	adds	r4, #21
 800a8f6:	42a6      	cmp	r6, r4
 800a8f8:	bf38      	it	cc
 800a8fa:	2304      	movcc	r3, #4
 800a8fc:	441d      	add	r5, r3
 800a8fe:	4473      	add	r3, lr
 800a900:	469e      	mov	lr, r3
 800a902:	462e      	mov	r6, r5
 800a904:	4566      	cmp	r6, ip
 800a906:	d30e      	bcc.n	800a926 <__mdiff+0xea>
 800a908:	f10c 0203 	add.w	r2, ip, #3
 800a90c:	1b52      	subs	r2, r2, r5
 800a90e:	f022 0203 	bic.w	r2, r2, #3
 800a912:	3d03      	subs	r5, #3
 800a914:	45ac      	cmp	ip, r5
 800a916:	bf38      	it	cc
 800a918:	2200      	movcc	r2, #0
 800a91a:	4413      	add	r3, r2
 800a91c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a920:	b17a      	cbz	r2, 800a942 <__mdiff+0x106>
 800a922:	6107      	str	r7, [r0, #16]
 800a924:	e7a4      	b.n	800a870 <__mdiff+0x34>
 800a926:	f856 8b04 	ldr.w	r8, [r6], #4
 800a92a:	fa11 f288 	uxtah	r2, r1, r8
 800a92e:	1414      	asrs	r4, r2, #16
 800a930:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a934:	b292      	uxth	r2, r2
 800a936:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a93a:	f84e 2b04 	str.w	r2, [lr], #4
 800a93e:	1421      	asrs	r1, r4, #16
 800a940:	e7e0      	b.n	800a904 <__mdiff+0xc8>
 800a942:	3f01      	subs	r7, #1
 800a944:	e7ea      	b.n	800a91c <__mdiff+0xe0>
 800a946:	bf00      	nop
 800a948:	0800b298 	.word	0x0800b298
 800a94c:	0800b2a9 	.word	0x0800b2a9

0800a950 <__d2b>:
 800a950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a954:	460f      	mov	r7, r1
 800a956:	2101      	movs	r1, #1
 800a958:	ec59 8b10 	vmov	r8, r9, d0
 800a95c:	4616      	mov	r6, r2
 800a95e:	f7ff fcd5 	bl	800a30c <_Balloc>
 800a962:	4604      	mov	r4, r0
 800a964:	b930      	cbnz	r0, 800a974 <__d2b+0x24>
 800a966:	4602      	mov	r2, r0
 800a968:	4b24      	ldr	r3, [pc, #144]	; (800a9fc <__d2b+0xac>)
 800a96a:	4825      	ldr	r0, [pc, #148]	; (800aa00 <__d2b+0xb0>)
 800a96c:	f240 310f 	movw	r1, #783	; 0x30f
 800a970:	f000 f914 	bl	800ab9c <__assert_func>
 800a974:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a97c:	bb2d      	cbnz	r5, 800a9ca <__d2b+0x7a>
 800a97e:	9301      	str	r3, [sp, #4]
 800a980:	f1b8 0300 	subs.w	r3, r8, #0
 800a984:	d026      	beq.n	800a9d4 <__d2b+0x84>
 800a986:	4668      	mov	r0, sp
 800a988:	9300      	str	r3, [sp, #0]
 800a98a:	f7ff fd87 	bl	800a49c <__lo0bits>
 800a98e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a992:	b1e8      	cbz	r0, 800a9d0 <__d2b+0x80>
 800a994:	f1c0 0320 	rsb	r3, r0, #32
 800a998:	fa02 f303 	lsl.w	r3, r2, r3
 800a99c:	430b      	orrs	r3, r1
 800a99e:	40c2      	lsrs	r2, r0
 800a9a0:	6163      	str	r3, [r4, #20]
 800a9a2:	9201      	str	r2, [sp, #4]
 800a9a4:	9b01      	ldr	r3, [sp, #4]
 800a9a6:	61a3      	str	r3, [r4, #24]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	bf14      	ite	ne
 800a9ac:	2202      	movne	r2, #2
 800a9ae:	2201      	moveq	r2, #1
 800a9b0:	6122      	str	r2, [r4, #16]
 800a9b2:	b1bd      	cbz	r5, 800a9e4 <__d2b+0x94>
 800a9b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a9b8:	4405      	add	r5, r0
 800a9ba:	603d      	str	r5, [r7, #0]
 800a9bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a9c0:	6030      	str	r0, [r6, #0]
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	b003      	add	sp, #12
 800a9c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9ce:	e7d6      	b.n	800a97e <__d2b+0x2e>
 800a9d0:	6161      	str	r1, [r4, #20]
 800a9d2:	e7e7      	b.n	800a9a4 <__d2b+0x54>
 800a9d4:	a801      	add	r0, sp, #4
 800a9d6:	f7ff fd61 	bl	800a49c <__lo0bits>
 800a9da:	9b01      	ldr	r3, [sp, #4]
 800a9dc:	6163      	str	r3, [r4, #20]
 800a9de:	3020      	adds	r0, #32
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	e7e5      	b.n	800a9b0 <__d2b+0x60>
 800a9e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a9ec:	6038      	str	r0, [r7, #0]
 800a9ee:	6918      	ldr	r0, [r3, #16]
 800a9f0:	f7ff fd34 	bl	800a45c <__hi0bits>
 800a9f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9f8:	e7e2      	b.n	800a9c0 <__d2b+0x70>
 800a9fa:	bf00      	nop
 800a9fc:	0800b298 	.word	0x0800b298
 800aa00:	0800b2a9 	.word	0x0800b2a9

0800aa04 <__sflush_r>:
 800aa04:	898a      	ldrh	r2, [r1, #12]
 800aa06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0a:	4605      	mov	r5, r0
 800aa0c:	0710      	lsls	r0, r2, #28
 800aa0e:	460c      	mov	r4, r1
 800aa10:	d458      	bmi.n	800aac4 <__sflush_r+0xc0>
 800aa12:	684b      	ldr	r3, [r1, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	dc05      	bgt.n	800aa24 <__sflush_r+0x20>
 800aa18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	dc02      	bgt.n	800aa24 <__sflush_r+0x20>
 800aa1e:	2000      	movs	r0, #0
 800aa20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa26:	2e00      	cmp	r6, #0
 800aa28:	d0f9      	beq.n	800aa1e <__sflush_r+0x1a>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa30:	682f      	ldr	r7, [r5, #0]
 800aa32:	6a21      	ldr	r1, [r4, #32]
 800aa34:	602b      	str	r3, [r5, #0]
 800aa36:	d032      	beq.n	800aa9e <__sflush_r+0x9a>
 800aa38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa3a:	89a3      	ldrh	r3, [r4, #12]
 800aa3c:	075a      	lsls	r2, r3, #29
 800aa3e:	d505      	bpl.n	800aa4c <__sflush_r+0x48>
 800aa40:	6863      	ldr	r3, [r4, #4]
 800aa42:	1ac0      	subs	r0, r0, r3
 800aa44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa46:	b10b      	cbz	r3, 800aa4c <__sflush_r+0x48>
 800aa48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa4a:	1ac0      	subs	r0, r0, r3
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4602      	mov	r2, r0
 800aa50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa52:	6a21      	ldr	r1, [r4, #32]
 800aa54:	4628      	mov	r0, r5
 800aa56:	47b0      	blx	r6
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	89a3      	ldrh	r3, [r4, #12]
 800aa5c:	d106      	bne.n	800aa6c <__sflush_r+0x68>
 800aa5e:	6829      	ldr	r1, [r5, #0]
 800aa60:	291d      	cmp	r1, #29
 800aa62:	d82b      	bhi.n	800aabc <__sflush_r+0xb8>
 800aa64:	4a29      	ldr	r2, [pc, #164]	; (800ab0c <__sflush_r+0x108>)
 800aa66:	410a      	asrs	r2, r1
 800aa68:	07d6      	lsls	r6, r2, #31
 800aa6a:	d427      	bmi.n	800aabc <__sflush_r+0xb8>
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	6062      	str	r2, [r4, #4]
 800aa70:	04d9      	lsls	r1, r3, #19
 800aa72:	6922      	ldr	r2, [r4, #16]
 800aa74:	6022      	str	r2, [r4, #0]
 800aa76:	d504      	bpl.n	800aa82 <__sflush_r+0x7e>
 800aa78:	1c42      	adds	r2, r0, #1
 800aa7a:	d101      	bne.n	800aa80 <__sflush_r+0x7c>
 800aa7c:	682b      	ldr	r3, [r5, #0]
 800aa7e:	b903      	cbnz	r3, 800aa82 <__sflush_r+0x7e>
 800aa80:	6560      	str	r0, [r4, #84]	; 0x54
 800aa82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa84:	602f      	str	r7, [r5, #0]
 800aa86:	2900      	cmp	r1, #0
 800aa88:	d0c9      	beq.n	800aa1e <__sflush_r+0x1a>
 800aa8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa8e:	4299      	cmp	r1, r3
 800aa90:	d002      	beq.n	800aa98 <__sflush_r+0x94>
 800aa92:	4628      	mov	r0, r5
 800aa94:	f7ff fb3a 	bl	800a10c <_free_r>
 800aa98:	2000      	movs	r0, #0
 800aa9a:	6360      	str	r0, [r4, #52]	; 0x34
 800aa9c:	e7c0      	b.n	800aa20 <__sflush_r+0x1c>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	47b0      	blx	r6
 800aaa4:	1c41      	adds	r1, r0, #1
 800aaa6:	d1c8      	bne.n	800aa3a <__sflush_r+0x36>
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d0c5      	beq.n	800aa3a <__sflush_r+0x36>
 800aaae:	2b1d      	cmp	r3, #29
 800aab0:	d001      	beq.n	800aab6 <__sflush_r+0xb2>
 800aab2:	2b16      	cmp	r3, #22
 800aab4:	d101      	bne.n	800aaba <__sflush_r+0xb6>
 800aab6:	602f      	str	r7, [r5, #0]
 800aab8:	e7b1      	b.n	800aa1e <__sflush_r+0x1a>
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aac0:	81a3      	strh	r3, [r4, #12]
 800aac2:	e7ad      	b.n	800aa20 <__sflush_r+0x1c>
 800aac4:	690f      	ldr	r7, [r1, #16]
 800aac6:	2f00      	cmp	r7, #0
 800aac8:	d0a9      	beq.n	800aa1e <__sflush_r+0x1a>
 800aaca:	0793      	lsls	r3, r2, #30
 800aacc:	680e      	ldr	r6, [r1, #0]
 800aace:	bf08      	it	eq
 800aad0:	694b      	ldreq	r3, [r1, #20]
 800aad2:	600f      	str	r7, [r1, #0]
 800aad4:	bf18      	it	ne
 800aad6:	2300      	movne	r3, #0
 800aad8:	eba6 0807 	sub.w	r8, r6, r7
 800aadc:	608b      	str	r3, [r1, #8]
 800aade:	f1b8 0f00 	cmp.w	r8, #0
 800aae2:	dd9c      	ble.n	800aa1e <__sflush_r+0x1a>
 800aae4:	6a21      	ldr	r1, [r4, #32]
 800aae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aae8:	4643      	mov	r3, r8
 800aaea:	463a      	mov	r2, r7
 800aaec:	4628      	mov	r0, r5
 800aaee:	47b0      	blx	r6
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	dc06      	bgt.n	800ab02 <__sflush_r+0xfe>
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aafa:	81a3      	strh	r3, [r4, #12]
 800aafc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab00:	e78e      	b.n	800aa20 <__sflush_r+0x1c>
 800ab02:	4407      	add	r7, r0
 800ab04:	eba8 0800 	sub.w	r8, r8, r0
 800ab08:	e7e9      	b.n	800aade <__sflush_r+0xda>
 800ab0a:	bf00      	nop
 800ab0c:	dfbffffe 	.word	0xdfbffffe

0800ab10 <_fflush_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	690b      	ldr	r3, [r1, #16]
 800ab14:	4605      	mov	r5, r0
 800ab16:	460c      	mov	r4, r1
 800ab18:	b913      	cbnz	r3, 800ab20 <_fflush_r+0x10>
 800ab1a:	2500      	movs	r5, #0
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	bd38      	pop	{r3, r4, r5, pc}
 800ab20:	b118      	cbz	r0, 800ab2a <_fflush_r+0x1a>
 800ab22:	6a03      	ldr	r3, [r0, #32]
 800ab24:	b90b      	cbnz	r3, 800ab2a <_fflush_r+0x1a>
 800ab26:	f7fe fb7d 	bl	8009224 <__sinit>
 800ab2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d0f3      	beq.n	800ab1a <_fflush_r+0xa>
 800ab32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab34:	07d0      	lsls	r0, r2, #31
 800ab36:	d404      	bmi.n	800ab42 <_fflush_r+0x32>
 800ab38:	0599      	lsls	r1, r3, #22
 800ab3a:	d402      	bmi.n	800ab42 <_fflush_r+0x32>
 800ab3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab3e:	f7fe fc68 	bl	8009412 <__retarget_lock_acquire_recursive>
 800ab42:	4628      	mov	r0, r5
 800ab44:	4621      	mov	r1, r4
 800ab46:	f7ff ff5d 	bl	800aa04 <__sflush_r>
 800ab4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab4c:	07da      	lsls	r2, r3, #31
 800ab4e:	4605      	mov	r5, r0
 800ab50:	d4e4      	bmi.n	800ab1c <_fflush_r+0xc>
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	059b      	lsls	r3, r3, #22
 800ab56:	d4e1      	bmi.n	800ab1c <_fflush_r+0xc>
 800ab58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab5a:	f7fe fc5b 	bl	8009414 <__retarget_lock_release_recursive>
 800ab5e:	e7dd      	b.n	800ab1c <_fflush_r+0xc>

0800ab60 <_sbrk_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4d06      	ldr	r5, [pc, #24]	; (800ab7c <_sbrk_r+0x1c>)
 800ab64:	2300      	movs	r3, #0
 800ab66:	4604      	mov	r4, r0
 800ab68:	4608      	mov	r0, r1
 800ab6a:	602b      	str	r3, [r5, #0]
 800ab6c:	f7f7 fac6 	bl	80020fc <_sbrk>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d102      	bne.n	800ab7a <_sbrk_r+0x1a>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	b103      	cbz	r3, 800ab7a <_sbrk_r+0x1a>
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	200107b0 	.word	0x200107b0

0800ab80 <memcpy>:
 800ab80:	440a      	add	r2, r1
 800ab82:	4291      	cmp	r1, r2
 800ab84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ab88:	d100      	bne.n	800ab8c <memcpy+0xc>
 800ab8a:	4770      	bx	lr
 800ab8c:	b510      	push	{r4, lr}
 800ab8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab96:	4291      	cmp	r1, r2
 800ab98:	d1f9      	bne.n	800ab8e <memcpy+0xe>
 800ab9a:	bd10      	pop	{r4, pc}

0800ab9c <__assert_func>:
 800ab9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab9e:	4614      	mov	r4, r2
 800aba0:	461a      	mov	r2, r3
 800aba2:	4b09      	ldr	r3, [pc, #36]	; (800abc8 <__assert_func+0x2c>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4605      	mov	r5, r0
 800aba8:	68d8      	ldr	r0, [r3, #12]
 800abaa:	b14c      	cbz	r4, 800abc0 <__assert_func+0x24>
 800abac:	4b07      	ldr	r3, [pc, #28]	; (800abcc <__assert_func+0x30>)
 800abae:	9100      	str	r1, [sp, #0]
 800abb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abb4:	4906      	ldr	r1, [pc, #24]	; (800abd0 <__assert_func+0x34>)
 800abb6:	462b      	mov	r3, r5
 800abb8:	f000 f844 	bl	800ac44 <fiprintf>
 800abbc:	f000 f854 	bl	800ac68 <abort>
 800abc0:	4b04      	ldr	r3, [pc, #16]	; (800abd4 <__assert_func+0x38>)
 800abc2:	461c      	mov	r4, r3
 800abc4:	e7f3      	b.n	800abae <__assert_func+0x12>
 800abc6:	bf00      	nop
 800abc8:	20000100 	.word	0x20000100
 800abcc:	0800b40e 	.word	0x0800b40e
 800abd0:	0800b41b 	.word	0x0800b41b
 800abd4:	0800b449 	.word	0x0800b449

0800abd8 <_calloc_r>:
 800abd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abda:	fba1 2402 	umull	r2, r4, r1, r2
 800abde:	b94c      	cbnz	r4, 800abf4 <_calloc_r+0x1c>
 800abe0:	4611      	mov	r1, r2
 800abe2:	9201      	str	r2, [sp, #4]
 800abe4:	f7ff fb06 	bl	800a1f4 <_malloc_r>
 800abe8:	9a01      	ldr	r2, [sp, #4]
 800abea:	4605      	mov	r5, r0
 800abec:	b930      	cbnz	r0, 800abfc <_calloc_r+0x24>
 800abee:	4628      	mov	r0, r5
 800abf0:	b003      	add	sp, #12
 800abf2:	bd30      	pop	{r4, r5, pc}
 800abf4:	220c      	movs	r2, #12
 800abf6:	6002      	str	r2, [r0, #0]
 800abf8:	2500      	movs	r5, #0
 800abfa:	e7f8      	b.n	800abee <_calloc_r+0x16>
 800abfc:	4621      	mov	r1, r4
 800abfe:	f7fe fb8a 	bl	8009316 <memset>
 800ac02:	e7f4      	b.n	800abee <_calloc_r+0x16>

0800ac04 <__ascii_mbtowc>:
 800ac04:	b082      	sub	sp, #8
 800ac06:	b901      	cbnz	r1, 800ac0a <__ascii_mbtowc+0x6>
 800ac08:	a901      	add	r1, sp, #4
 800ac0a:	b142      	cbz	r2, 800ac1e <__ascii_mbtowc+0x1a>
 800ac0c:	b14b      	cbz	r3, 800ac22 <__ascii_mbtowc+0x1e>
 800ac0e:	7813      	ldrb	r3, [r2, #0]
 800ac10:	600b      	str	r3, [r1, #0]
 800ac12:	7812      	ldrb	r2, [r2, #0]
 800ac14:	1e10      	subs	r0, r2, #0
 800ac16:	bf18      	it	ne
 800ac18:	2001      	movne	r0, #1
 800ac1a:	b002      	add	sp, #8
 800ac1c:	4770      	bx	lr
 800ac1e:	4610      	mov	r0, r2
 800ac20:	e7fb      	b.n	800ac1a <__ascii_mbtowc+0x16>
 800ac22:	f06f 0001 	mvn.w	r0, #1
 800ac26:	e7f8      	b.n	800ac1a <__ascii_mbtowc+0x16>

0800ac28 <__ascii_wctomb>:
 800ac28:	b149      	cbz	r1, 800ac3e <__ascii_wctomb+0x16>
 800ac2a:	2aff      	cmp	r2, #255	; 0xff
 800ac2c:	bf85      	ittet	hi
 800ac2e:	238a      	movhi	r3, #138	; 0x8a
 800ac30:	6003      	strhi	r3, [r0, #0]
 800ac32:	700a      	strbls	r2, [r1, #0]
 800ac34:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ac38:	bf98      	it	ls
 800ac3a:	2001      	movls	r0, #1
 800ac3c:	4770      	bx	lr
 800ac3e:	4608      	mov	r0, r1
 800ac40:	4770      	bx	lr
	...

0800ac44 <fiprintf>:
 800ac44:	b40e      	push	{r1, r2, r3}
 800ac46:	b503      	push	{r0, r1, lr}
 800ac48:	4601      	mov	r1, r0
 800ac4a:	ab03      	add	r3, sp, #12
 800ac4c:	4805      	ldr	r0, [pc, #20]	; (800ac64 <fiprintf+0x20>)
 800ac4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac52:	6800      	ldr	r0, [r0, #0]
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	f000 f837 	bl	800acc8 <_vfiprintf_r>
 800ac5a:	b002      	add	sp, #8
 800ac5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac60:	b003      	add	sp, #12
 800ac62:	4770      	bx	lr
 800ac64:	20000100 	.word	0x20000100

0800ac68 <abort>:
 800ac68:	b508      	push	{r3, lr}
 800ac6a:	2006      	movs	r0, #6
 800ac6c:	f000 fa04 	bl	800b078 <raise>
 800ac70:	2001      	movs	r0, #1
 800ac72:	f7f7 f9cb 	bl	800200c <_exit>

0800ac76 <__sfputc_r>:
 800ac76:	6893      	ldr	r3, [r2, #8]
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	b410      	push	{r4}
 800ac7e:	6093      	str	r3, [r2, #8]
 800ac80:	da08      	bge.n	800ac94 <__sfputc_r+0x1e>
 800ac82:	6994      	ldr	r4, [r2, #24]
 800ac84:	42a3      	cmp	r3, r4
 800ac86:	db01      	blt.n	800ac8c <__sfputc_r+0x16>
 800ac88:	290a      	cmp	r1, #10
 800ac8a:	d103      	bne.n	800ac94 <__sfputc_r+0x1e>
 800ac8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac90:	f000 b934 	b.w	800aefc <__swbuf_r>
 800ac94:	6813      	ldr	r3, [r2, #0]
 800ac96:	1c58      	adds	r0, r3, #1
 800ac98:	6010      	str	r0, [r2, #0]
 800ac9a:	7019      	strb	r1, [r3, #0]
 800ac9c:	4608      	mov	r0, r1
 800ac9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <__sfputs_r>:
 800aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca6:	4606      	mov	r6, r0
 800aca8:	460f      	mov	r7, r1
 800acaa:	4614      	mov	r4, r2
 800acac:	18d5      	adds	r5, r2, r3
 800acae:	42ac      	cmp	r4, r5
 800acb0:	d101      	bne.n	800acb6 <__sfputs_r+0x12>
 800acb2:	2000      	movs	r0, #0
 800acb4:	e007      	b.n	800acc6 <__sfputs_r+0x22>
 800acb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acba:	463a      	mov	r2, r7
 800acbc:	4630      	mov	r0, r6
 800acbe:	f7ff ffda 	bl	800ac76 <__sfputc_r>
 800acc2:	1c43      	adds	r3, r0, #1
 800acc4:	d1f3      	bne.n	800acae <__sfputs_r+0xa>
 800acc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800acc8 <_vfiprintf_r>:
 800acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800accc:	460d      	mov	r5, r1
 800acce:	b09d      	sub	sp, #116	; 0x74
 800acd0:	4614      	mov	r4, r2
 800acd2:	4698      	mov	r8, r3
 800acd4:	4606      	mov	r6, r0
 800acd6:	b118      	cbz	r0, 800ace0 <_vfiprintf_r+0x18>
 800acd8:	6a03      	ldr	r3, [r0, #32]
 800acda:	b90b      	cbnz	r3, 800ace0 <_vfiprintf_r+0x18>
 800acdc:	f7fe faa2 	bl	8009224 <__sinit>
 800ace0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ace2:	07d9      	lsls	r1, r3, #31
 800ace4:	d405      	bmi.n	800acf2 <_vfiprintf_r+0x2a>
 800ace6:	89ab      	ldrh	r3, [r5, #12]
 800ace8:	059a      	lsls	r2, r3, #22
 800acea:	d402      	bmi.n	800acf2 <_vfiprintf_r+0x2a>
 800acec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acee:	f7fe fb90 	bl	8009412 <__retarget_lock_acquire_recursive>
 800acf2:	89ab      	ldrh	r3, [r5, #12]
 800acf4:	071b      	lsls	r3, r3, #28
 800acf6:	d501      	bpl.n	800acfc <_vfiprintf_r+0x34>
 800acf8:	692b      	ldr	r3, [r5, #16]
 800acfa:	b99b      	cbnz	r3, 800ad24 <_vfiprintf_r+0x5c>
 800acfc:	4629      	mov	r1, r5
 800acfe:	4630      	mov	r0, r6
 800ad00:	f000 f93a 	bl	800af78 <__swsetup_r>
 800ad04:	b170      	cbz	r0, 800ad24 <_vfiprintf_r+0x5c>
 800ad06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad08:	07dc      	lsls	r4, r3, #31
 800ad0a:	d504      	bpl.n	800ad16 <_vfiprintf_r+0x4e>
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad10:	b01d      	add	sp, #116	; 0x74
 800ad12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad16:	89ab      	ldrh	r3, [r5, #12]
 800ad18:	0598      	lsls	r0, r3, #22
 800ad1a:	d4f7      	bmi.n	800ad0c <_vfiprintf_r+0x44>
 800ad1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad1e:	f7fe fb79 	bl	8009414 <__retarget_lock_release_recursive>
 800ad22:	e7f3      	b.n	800ad0c <_vfiprintf_r+0x44>
 800ad24:	2300      	movs	r3, #0
 800ad26:	9309      	str	r3, [sp, #36]	; 0x24
 800ad28:	2320      	movs	r3, #32
 800ad2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad32:	2330      	movs	r3, #48	; 0x30
 800ad34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aee8 <_vfiprintf_r+0x220>
 800ad38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad3c:	f04f 0901 	mov.w	r9, #1
 800ad40:	4623      	mov	r3, r4
 800ad42:	469a      	mov	sl, r3
 800ad44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad48:	b10a      	cbz	r2, 800ad4e <_vfiprintf_r+0x86>
 800ad4a:	2a25      	cmp	r2, #37	; 0x25
 800ad4c:	d1f9      	bne.n	800ad42 <_vfiprintf_r+0x7a>
 800ad4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ad52:	d00b      	beq.n	800ad6c <_vfiprintf_r+0xa4>
 800ad54:	465b      	mov	r3, fp
 800ad56:	4622      	mov	r2, r4
 800ad58:	4629      	mov	r1, r5
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f7ff ffa2 	bl	800aca4 <__sfputs_r>
 800ad60:	3001      	adds	r0, #1
 800ad62:	f000 80a9 	beq.w	800aeb8 <_vfiprintf_r+0x1f0>
 800ad66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad68:	445a      	add	r2, fp
 800ad6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f000 80a1 	beq.w	800aeb8 <_vfiprintf_r+0x1f0>
 800ad76:	2300      	movs	r3, #0
 800ad78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad80:	f10a 0a01 	add.w	sl, sl, #1
 800ad84:	9304      	str	r3, [sp, #16]
 800ad86:	9307      	str	r3, [sp, #28]
 800ad88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad8c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad8e:	4654      	mov	r4, sl
 800ad90:	2205      	movs	r2, #5
 800ad92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad96:	4854      	ldr	r0, [pc, #336]	; (800aee8 <_vfiprintf_r+0x220>)
 800ad98:	f7f5 fa22 	bl	80001e0 <memchr>
 800ad9c:	9a04      	ldr	r2, [sp, #16]
 800ad9e:	b9d8      	cbnz	r0, 800add8 <_vfiprintf_r+0x110>
 800ada0:	06d1      	lsls	r1, r2, #27
 800ada2:	bf44      	itt	mi
 800ada4:	2320      	movmi	r3, #32
 800ada6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adaa:	0713      	lsls	r3, r2, #28
 800adac:	bf44      	itt	mi
 800adae:	232b      	movmi	r3, #43	; 0x2b
 800adb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adb4:	f89a 3000 	ldrb.w	r3, [sl]
 800adb8:	2b2a      	cmp	r3, #42	; 0x2a
 800adba:	d015      	beq.n	800ade8 <_vfiprintf_r+0x120>
 800adbc:	9a07      	ldr	r2, [sp, #28]
 800adbe:	4654      	mov	r4, sl
 800adc0:	2000      	movs	r0, #0
 800adc2:	f04f 0c0a 	mov.w	ip, #10
 800adc6:	4621      	mov	r1, r4
 800adc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adcc:	3b30      	subs	r3, #48	; 0x30
 800adce:	2b09      	cmp	r3, #9
 800add0:	d94d      	bls.n	800ae6e <_vfiprintf_r+0x1a6>
 800add2:	b1b0      	cbz	r0, 800ae02 <_vfiprintf_r+0x13a>
 800add4:	9207      	str	r2, [sp, #28]
 800add6:	e014      	b.n	800ae02 <_vfiprintf_r+0x13a>
 800add8:	eba0 0308 	sub.w	r3, r0, r8
 800addc:	fa09 f303 	lsl.w	r3, r9, r3
 800ade0:	4313      	orrs	r3, r2
 800ade2:	9304      	str	r3, [sp, #16]
 800ade4:	46a2      	mov	sl, r4
 800ade6:	e7d2      	b.n	800ad8e <_vfiprintf_r+0xc6>
 800ade8:	9b03      	ldr	r3, [sp, #12]
 800adea:	1d19      	adds	r1, r3, #4
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	9103      	str	r1, [sp, #12]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	bfbb      	ittet	lt
 800adf4:	425b      	neglt	r3, r3
 800adf6:	f042 0202 	orrlt.w	r2, r2, #2
 800adfa:	9307      	strge	r3, [sp, #28]
 800adfc:	9307      	strlt	r3, [sp, #28]
 800adfe:	bfb8      	it	lt
 800ae00:	9204      	strlt	r2, [sp, #16]
 800ae02:	7823      	ldrb	r3, [r4, #0]
 800ae04:	2b2e      	cmp	r3, #46	; 0x2e
 800ae06:	d10c      	bne.n	800ae22 <_vfiprintf_r+0x15a>
 800ae08:	7863      	ldrb	r3, [r4, #1]
 800ae0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae0c:	d134      	bne.n	800ae78 <_vfiprintf_r+0x1b0>
 800ae0e:	9b03      	ldr	r3, [sp, #12]
 800ae10:	1d1a      	adds	r2, r3, #4
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	9203      	str	r2, [sp, #12]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	bfb8      	it	lt
 800ae1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ae1e:	3402      	adds	r4, #2
 800ae20:	9305      	str	r3, [sp, #20]
 800ae22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aef8 <_vfiprintf_r+0x230>
 800ae26:	7821      	ldrb	r1, [r4, #0]
 800ae28:	2203      	movs	r2, #3
 800ae2a:	4650      	mov	r0, sl
 800ae2c:	f7f5 f9d8 	bl	80001e0 <memchr>
 800ae30:	b138      	cbz	r0, 800ae42 <_vfiprintf_r+0x17a>
 800ae32:	9b04      	ldr	r3, [sp, #16]
 800ae34:	eba0 000a 	sub.w	r0, r0, sl
 800ae38:	2240      	movs	r2, #64	; 0x40
 800ae3a:	4082      	lsls	r2, r0
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	3401      	adds	r4, #1
 800ae40:	9304      	str	r3, [sp, #16]
 800ae42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae46:	4829      	ldr	r0, [pc, #164]	; (800aeec <_vfiprintf_r+0x224>)
 800ae48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae4c:	2206      	movs	r2, #6
 800ae4e:	f7f5 f9c7 	bl	80001e0 <memchr>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d03f      	beq.n	800aed6 <_vfiprintf_r+0x20e>
 800ae56:	4b26      	ldr	r3, [pc, #152]	; (800aef0 <_vfiprintf_r+0x228>)
 800ae58:	bb1b      	cbnz	r3, 800aea2 <_vfiprintf_r+0x1da>
 800ae5a:	9b03      	ldr	r3, [sp, #12]
 800ae5c:	3307      	adds	r3, #7
 800ae5e:	f023 0307 	bic.w	r3, r3, #7
 800ae62:	3308      	adds	r3, #8
 800ae64:	9303      	str	r3, [sp, #12]
 800ae66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae68:	443b      	add	r3, r7
 800ae6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae6c:	e768      	b.n	800ad40 <_vfiprintf_r+0x78>
 800ae6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae72:	460c      	mov	r4, r1
 800ae74:	2001      	movs	r0, #1
 800ae76:	e7a6      	b.n	800adc6 <_vfiprintf_r+0xfe>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	3401      	adds	r4, #1
 800ae7c:	9305      	str	r3, [sp, #20]
 800ae7e:	4619      	mov	r1, r3
 800ae80:	f04f 0c0a 	mov.w	ip, #10
 800ae84:	4620      	mov	r0, r4
 800ae86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae8a:	3a30      	subs	r2, #48	; 0x30
 800ae8c:	2a09      	cmp	r2, #9
 800ae8e:	d903      	bls.n	800ae98 <_vfiprintf_r+0x1d0>
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d0c6      	beq.n	800ae22 <_vfiprintf_r+0x15a>
 800ae94:	9105      	str	r1, [sp, #20]
 800ae96:	e7c4      	b.n	800ae22 <_vfiprintf_r+0x15a>
 800ae98:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e7f0      	b.n	800ae84 <_vfiprintf_r+0x1bc>
 800aea2:	ab03      	add	r3, sp, #12
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	462a      	mov	r2, r5
 800aea8:	4b12      	ldr	r3, [pc, #72]	; (800aef4 <_vfiprintf_r+0x22c>)
 800aeaa:	a904      	add	r1, sp, #16
 800aeac:	4630      	mov	r0, r6
 800aeae:	f7fd fd67 	bl	8008980 <_printf_float>
 800aeb2:	4607      	mov	r7, r0
 800aeb4:	1c78      	adds	r0, r7, #1
 800aeb6:	d1d6      	bne.n	800ae66 <_vfiprintf_r+0x19e>
 800aeb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aeba:	07d9      	lsls	r1, r3, #31
 800aebc:	d405      	bmi.n	800aeca <_vfiprintf_r+0x202>
 800aebe:	89ab      	ldrh	r3, [r5, #12]
 800aec0:	059a      	lsls	r2, r3, #22
 800aec2:	d402      	bmi.n	800aeca <_vfiprintf_r+0x202>
 800aec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aec6:	f7fe faa5 	bl	8009414 <__retarget_lock_release_recursive>
 800aeca:	89ab      	ldrh	r3, [r5, #12]
 800aecc:	065b      	lsls	r3, r3, #25
 800aece:	f53f af1d 	bmi.w	800ad0c <_vfiprintf_r+0x44>
 800aed2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aed4:	e71c      	b.n	800ad10 <_vfiprintf_r+0x48>
 800aed6:	ab03      	add	r3, sp, #12
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	462a      	mov	r2, r5
 800aedc:	4b05      	ldr	r3, [pc, #20]	; (800aef4 <_vfiprintf_r+0x22c>)
 800aede:	a904      	add	r1, sp, #16
 800aee0:	4630      	mov	r0, r6
 800aee2:	f7fd fff1 	bl	8008ec8 <_printf_i>
 800aee6:	e7e4      	b.n	800aeb2 <_vfiprintf_r+0x1ea>
 800aee8:	0800b54b 	.word	0x0800b54b
 800aeec:	0800b555 	.word	0x0800b555
 800aef0:	08008981 	.word	0x08008981
 800aef4:	0800aca5 	.word	0x0800aca5
 800aef8:	0800b551 	.word	0x0800b551

0800aefc <__swbuf_r>:
 800aefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefe:	460e      	mov	r6, r1
 800af00:	4614      	mov	r4, r2
 800af02:	4605      	mov	r5, r0
 800af04:	b118      	cbz	r0, 800af0e <__swbuf_r+0x12>
 800af06:	6a03      	ldr	r3, [r0, #32]
 800af08:	b90b      	cbnz	r3, 800af0e <__swbuf_r+0x12>
 800af0a:	f7fe f98b 	bl	8009224 <__sinit>
 800af0e:	69a3      	ldr	r3, [r4, #24]
 800af10:	60a3      	str	r3, [r4, #8]
 800af12:	89a3      	ldrh	r3, [r4, #12]
 800af14:	071a      	lsls	r2, r3, #28
 800af16:	d525      	bpl.n	800af64 <__swbuf_r+0x68>
 800af18:	6923      	ldr	r3, [r4, #16]
 800af1a:	b31b      	cbz	r3, 800af64 <__swbuf_r+0x68>
 800af1c:	6823      	ldr	r3, [r4, #0]
 800af1e:	6922      	ldr	r2, [r4, #16]
 800af20:	1a98      	subs	r0, r3, r2
 800af22:	6963      	ldr	r3, [r4, #20]
 800af24:	b2f6      	uxtb	r6, r6
 800af26:	4283      	cmp	r3, r0
 800af28:	4637      	mov	r7, r6
 800af2a:	dc04      	bgt.n	800af36 <__swbuf_r+0x3a>
 800af2c:	4621      	mov	r1, r4
 800af2e:	4628      	mov	r0, r5
 800af30:	f7ff fdee 	bl	800ab10 <_fflush_r>
 800af34:	b9e0      	cbnz	r0, 800af70 <__swbuf_r+0x74>
 800af36:	68a3      	ldr	r3, [r4, #8]
 800af38:	3b01      	subs	r3, #1
 800af3a:	60a3      	str	r3, [r4, #8]
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	1c5a      	adds	r2, r3, #1
 800af40:	6022      	str	r2, [r4, #0]
 800af42:	701e      	strb	r6, [r3, #0]
 800af44:	6962      	ldr	r2, [r4, #20]
 800af46:	1c43      	adds	r3, r0, #1
 800af48:	429a      	cmp	r2, r3
 800af4a:	d004      	beq.n	800af56 <__swbuf_r+0x5a>
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	07db      	lsls	r3, r3, #31
 800af50:	d506      	bpl.n	800af60 <__swbuf_r+0x64>
 800af52:	2e0a      	cmp	r6, #10
 800af54:	d104      	bne.n	800af60 <__swbuf_r+0x64>
 800af56:	4621      	mov	r1, r4
 800af58:	4628      	mov	r0, r5
 800af5a:	f7ff fdd9 	bl	800ab10 <_fflush_r>
 800af5e:	b938      	cbnz	r0, 800af70 <__swbuf_r+0x74>
 800af60:	4638      	mov	r0, r7
 800af62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af64:	4621      	mov	r1, r4
 800af66:	4628      	mov	r0, r5
 800af68:	f000 f806 	bl	800af78 <__swsetup_r>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d0d5      	beq.n	800af1c <__swbuf_r+0x20>
 800af70:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800af74:	e7f4      	b.n	800af60 <__swbuf_r+0x64>
	...

0800af78 <__swsetup_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	4b2a      	ldr	r3, [pc, #168]	; (800b024 <__swsetup_r+0xac>)
 800af7c:	4605      	mov	r5, r0
 800af7e:	6818      	ldr	r0, [r3, #0]
 800af80:	460c      	mov	r4, r1
 800af82:	b118      	cbz	r0, 800af8c <__swsetup_r+0x14>
 800af84:	6a03      	ldr	r3, [r0, #32]
 800af86:	b90b      	cbnz	r3, 800af8c <__swsetup_r+0x14>
 800af88:	f7fe f94c 	bl	8009224 <__sinit>
 800af8c:	89a3      	ldrh	r3, [r4, #12]
 800af8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af92:	0718      	lsls	r0, r3, #28
 800af94:	d422      	bmi.n	800afdc <__swsetup_r+0x64>
 800af96:	06d9      	lsls	r1, r3, #27
 800af98:	d407      	bmi.n	800afaa <__swsetup_r+0x32>
 800af9a:	2309      	movs	r3, #9
 800af9c:	602b      	str	r3, [r5, #0]
 800af9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800afa2:	81a3      	strh	r3, [r4, #12]
 800afa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afa8:	e034      	b.n	800b014 <__swsetup_r+0x9c>
 800afaa:	0758      	lsls	r0, r3, #29
 800afac:	d512      	bpl.n	800afd4 <__swsetup_r+0x5c>
 800afae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afb0:	b141      	cbz	r1, 800afc4 <__swsetup_r+0x4c>
 800afb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afb6:	4299      	cmp	r1, r3
 800afb8:	d002      	beq.n	800afc0 <__swsetup_r+0x48>
 800afba:	4628      	mov	r0, r5
 800afbc:	f7ff f8a6 	bl	800a10c <_free_r>
 800afc0:	2300      	movs	r3, #0
 800afc2:	6363      	str	r3, [r4, #52]	; 0x34
 800afc4:	89a3      	ldrh	r3, [r4, #12]
 800afc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800afca:	81a3      	strh	r3, [r4, #12]
 800afcc:	2300      	movs	r3, #0
 800afce:	6063      	str	r3, [r4, #4]
 800afd0:	6923      	ldr	r3, [r4, #16]
 800afd2:	6023      	str	r3, [r4, #0]
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	f043 0308 	orr.w	r3, r3, #8
 800afda:	81a3      	strh	r3, [r4, #12]
 800afdc:	6923      	ldr	r3, [r4, #16]
 800afde:	b94b      	cbnz	r3, 800aff4 <__swsetup_r+0x7c>
 800afe0:	89a3      	ldrh	r3, [r4, #12]
 800afe2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afea:	d003      	beq.n	800aff4 <__swsetup_r+0x7c>
 800afec:	4621      	mov	r1, r4
 800afee:	4628      	mov	r0, r5
 800aff0:	f000 f884 	bl	800b0fc <__smakebuf_r>
 800aff4:	89a0      	ldrh	r0, [r4, #12]
 800aff6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800affa:	f010 0301 	ands.w	r3, r0, #1
 800affe:	d00a      	beq.n	800b016 <__swsetup_r+0x9e>
 800b000:	2300      	movs	r3, #0
 800b002:	60a3      	str	r3, [r4, #8]
 800b004:	6963      	ldr	r3, [r4, #20]
 800b006:	425b      	negs	r3, r3
 800b008:	61a3      	str	r3, [r4, #24]
 800b00a:	6923      	ldr	r3, [r4, #16]
 800b00c:	b943      	cbnz	r3, 800b020 <__swsetup_r+0xa8>
 800b00e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b012:	d1c4      	bne.n	800af9e <__swsetup_r+0x26>
 800b014:	bd38      	pop	{r3, r4, r5, pc}
 800b016:	0781      	lsls	r1, r0, #30
 800b018:	bf58      	it	pl
 800b01a:	6963      	ldrpl	r3, [r4, #20]
 800b01c:	60a3      	str	r3, [r4, #8]
 800b01e:	e7f4      	b.n	800b00a <__swsetup_r+0x92>
 800b020:	2000      	movs	r0, #0
 800b022:	e7f7      	b.n	800b014 <__swsetup_r+0x9c>
 800b024:	20000100 	.word	0x20000100

0800b028 <_raise_r>:
 800b028:	291f      	cmp	r1, #31
 800b02a:	b538      	push	{r3, r4, r5, lr}
 800b02c:	4604      	mov	r4, r0
 800b02e:	460d      	mov	r5, r1
 800b030:	d904      	bls.n	800b03c <_raise_r+0x14>
 800b032:	2316      	movs	r3, #22
 800b034:	6003      	str	r3, [r0, #0]
 800b036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b03a:	bd38      	pop	{r3, r4, r5, pc}
 800b03c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b03e:	b112      	cbz	r2, 800b046 <_raise_r+0x1e>
 800b040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b044:	b94b      	cbnz	r3, 800b05a <_raise_r+0x32>
 800b046:	4620      	mov	r0, r4
 800b048:	f000 f830 	bl	800b0ac <_getpid_r>
 800b04c:	462a      	mov	r2, r5
 800b04e:	4601      	mov	r1, r0
 800b050:	4620      	mov	r0, r4
 800b052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b056:	f000 b817 	b.w	800b088 <_kill_r>
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d00a      	beq.n	800b074 <_raise_r+0x4c>
 800b05e:	1c59      	adds	r1, r3, #1
 800b060:	d103      	bne.n	800b06a <_raise_r+0x42>
 800b062:	2316      	movs	r3, #22
 800b064:	6003      	str	r3, [r0, #0]
 800b066:	2001      	movs	r0, #1
 800b068:	e7e7      	b.n	800b03a <_raise_r+0x12>
 800b06a:	2400      	movs	r4, #0
 800b06c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b070:	4628      	mov	r0, r5
 800b072:	4798      	blx	r3
 800b074:	2000      	movs	r0, #0
 800b076:	e7e0      	b.n	800b03a <_raise_r+0x12>

0800b078 <raise>:
 800b078:	4b02      	ldr	r3, [pc, #8]	; (800b084 <raise+0xc>)
 800b07a:	4601      	mov	r1, r0
 800b07c:	6818      	ldr	r0, [r3, #0]
 800b07e:	f7ff bfd3 	b.w	800b028 <_raise_r>
 800b082:	bf00      	nop
 800b084:	20000100 	.word	0x20000100

0800b088 <_kill_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	4d07      	ldr	r5, [pc, #28]	; (800b0a8 <_kill_r+0x20>)
 800b08c:	2300      	movs	r3, #0
 800b08e:	4604      	mov	r4, r0
 800b090:	4608      	mov	r0, r1
 800b092:	4611      	mov	r1, r2
 800b094:	602b      	str	r3, [r5, #0]
 800b096:	f7f6 ffa9 	bl	8001fec <_kill>
 800b09a:	1c43      	adds	r3, r0, #1
 800b09c:	d102      	bne.n	800b0a4 <_kill_r+0x1c>
 800b09e:	682b      	ldr	r3, [r5, #0]
 800b0a0:	b103      	cbz	r3, 800b0a4 <_kill_r+0x1c>
 800b0a2:	6023      	str	r3, [r4, #0]
 800b0a4:	bd38      	pop	{r3, r4, r5, pc}
 800b0a6:	bf00      	nop
 800b0a8:	200107b0 	.word	0x200107b0

0800b0ac <_getpid_r>:
 800b0ac:	f7f6 bf96 	b.w	8001fdc <_getpid>

0800b0b0 <__swhatbuf_r>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b8:	2900      	cmp	r1, #0
 800b0ba:	b096      	sub	sp, #88	; 0x58
 800b0bc:	4615      	mov	r5, r2
 800b0be:	461e      	mov	r6, r3
 800b0c0:	da0d      	bge.n	800b0de <__swhatbuf_r+0x2e>
 800b0c2:	89a3      	ldrh	r3, [r4, #12]
 800b0c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b0c8:	f04f 0100 	mov.w	r1, #0
 800b0cc:	bf0c      	ite	eq
 800b0ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b0d2:	2340      	movne	r3, #64	; 0x40
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	6031      	str	r1, [r6, #0]
 800b0d8:	602b      	str	r3, [r5, #0]
 800b0da:	b016      	add	sp, #88	; 0x58
 800b0dc:	bd70      	pop	{r4, r5, r6, pc}
 800b0de:	466a      	mov	r2, sp
 800b0e0:	f000 f848 	bl	800b174 <_fstat_r>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	dbec      	blt.n	800b0c2 <__swhatbuf_r+0x12>
 800b0e8:	9901      	ldr	r1, [sp, #4]
 800b0ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b0ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b0f2:	4259      	negs	r1, r3
 800b0f4:	4159      	adcs	r1, r3
 800b0f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0fa:	e7eb      	b.n	800b0d4 <__swhatbuf_r+0x24>

0800b0fc <__smakebuf_r>:
 800b0fc:	898b      	ldrh	r3, [r1, #12]
 800b0fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b100:	079d      	lsls	r5, r3, #30
 800b102:	4606      	mov	r6, r0
 800b104:	460c      	mov	r4, r1
 800b106:	d507      	bpl.n	800b118 <__smakebuf_r+0x1c>
 800b108:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	6123      	str	r3, [r4, #16]
 800b110:	2301      	movs	r3, #1
 800b112:	6163      	str	r3, [r4, #20]
 800b114:	b002      	add	sp, #8
 800b116:	bd70      	pop	{r4, r5, r6, pc}
 800b118:	ab01      	add	r3, sp, #4
 800b11a:	466a      	mov	r2, sp
 800b11c:	f7ff ffc8 	bl	800b0b0 <__swhatbuf_r>
 800b120:	9900      	ldr	r1, [sp, #0]
 800b122:	4605      	mov	r5, r0
 800b124:	4630      	mov	r0, r6
 800b126:	f7ff f865 	bl	800a1f4 <_malloc_r>
 800b12a:	b948      	cbnz	r0, 800b140 <__smakebuf_r+0x44>
 800b12c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b130:	059a      	lsls	r2, r3, #22
 800b132:	d4ef      	bmi.n	800b114 <__smakebuf_r+0x18>
 800b134:	f023 0303 	bic.w	r3, r3, #3
 800b138:	f043 0302 	orr.w	r3, r3, #2
 800b13c:	81a3      	strh	r3, [r4, #12]
 800b13e:	e7e3      	b.n	800b108 <__smakebuf_r+0xc>
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	6020      	str	r0, [r4, #0]
 800b144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b148:	81a3      	strh	r3, [r4, #12]
 800b14a:	9b00      	ldr	r3, [sp, #0]
 800b14c:	6163      	str	r3, [r4, #20]
 800b14e:	9b01      	ldr	r3, [sp, #4]
 800b150:	6120      	str	r0, [r4, #16]
 800b152:	b15b      	cbz	r3, 800b16c <__smakebuf_r+0x70>
 800b154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b158:	4630      	mov	r0, r6
 800b15a:	f000 f81d 	bl	800b198 <_isatty_r>
 800b15e:	b128      	cbz	r0, 800b16c <__smakebuf_r+0x70>
 800b160:	89a3      	ldrh	r3, [r4, #12]
 800b162:	f023 0303 	bic.w	r3, r3, #3
 800b166:	f043 0301 	orr.w	r3, r3, #1
 800b16a:	81a3      	strh	r3, [r4, #12]
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	431d      	orrs	r5, r3
 800b170:	81a5      	strh	r5, [r4, #12]
 800b172:	e7cf      	b.n	800b114 <__smakebuf_r+0x18>

0800b174 <_fstat_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4d07      	ldr	r5, [pc, #28]	; (800b194 <_fstat_r+0x20>)
 800b178:	2300      	movs	r3, #0
 800b17a:	4604      	mov	r4, r0
 800b17c:	4608      	mov	r0, r1
 800b17e:	4611      	mov	r1, r2
 800b180:	602b      	str	r3, [r5, #0]
 800b182:	f7f6 ff92 	bl	80020aa <_fstat>
 800b186:	1c43      	adds	r3, r0, #1
 800b188:	d102      	bne.n	800b190 <_fstat_r+0x1c>
 800b18a:	682b      	ldr	r3, [r5, #0]
 800b18c:	b103      	cbz	r3, 800b190 <_fstat_r+0x1c>
 800b18e:	6023      	str	r3, [r4, #0]
 800b190:	bd38      	pop	{r3, r4, r5, pc}
 800b192:	bf00      	nop
 800b194:	200107b0 	.word	0x200107b0

0800b198 <_isatty_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4d06      	ldr	r5, [pc, #24]	; (800b1b4 <_isatty_r+0x1c>)
 800b19c:	2300      	movs	r3, #0
 800b19e:	4604      	mov	r4, r0
 800b1a0:	4608      	mov	r0, r1
 800b1a2:	602b      	str	r3, [r5, #0]
 800b1a4:	f7f6 ff91 	bl	80020ca <_isatty>
 800b1a8:	1c43      	adds	r3, r0, #1
 800b1aa:	d102      	bne.n	800b1b2 <_isatty_r+0x1a>
 800b1ac:	682b      	ldr	r3, [r5, #0]
 800b1ae:	b103      	cbz	r3, 800b1b2 <_isatty_r+0x1a>
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	bd38      	pop	{r3, r4, r5, pc}
 800b1b4:	200107b0 	.word	0x200107b0

0800b1b8 <_init>:
 800b1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ba:	bf00      	nop
 800b1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1be:	bc08      	pop	{r3}
 800b1c0:	469e      	mov	lr, r3
 800b1c2:	4770      	bx	lr

0800b1c4 <_fini>:
 800b1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c6:	bf00      	nop
 800b1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ca:	bc08      	pop	{r3}
 800b1cc:	469e      	mov	lr, r3
 800b1ce:	4770      	bx	lr
