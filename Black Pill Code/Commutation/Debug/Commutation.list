
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800b130  0800b130  0001b130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4bc  0800b4bc  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4bc  0800b4bc  0001b4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4c4  0800b4c4  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4c4  0800b4c4  0001b4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4c8  0800b4c8  0001b4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0800b4cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010550  2000026c  0800b738  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200107bc  0800b738  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011152  00000000  00000000  000202df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cb4  00000000  00000000  00031431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  000340e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb3  00000000  00000000  00035140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001998e  00000000  00000000  00035df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015288  00000000  00000000  0004f781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009be12  00000000  00000000  00064a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005404  00000000  00000000  0010081c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00105c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000026c 	.word	0x2000026c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b118 	.word	0x0800b118

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000270 	.word	0x20000270
 80001dc:	0800b118 	.word	0x0800b118

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <PrepareCommutation>:
uint8_t StopSequence(void);
uint8_t ChangePWM (void);

/* Private function ----------------------------------------------------------*/

uint8_t PrepareCommutation (char Direction) {
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]

	// Read IDR for Hall Sensor status
	uint16_t Hall = (GPIOA->IDR & 0b111) - 1 + 6 * Direction;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <PrepareCommutation+0x7c>)
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	4619      	mov	r1, r3
 8000fb0:	0049      	lsls	r1, r1, #1
 8000fb2:	440b      	add	r3, r1
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4413      	add	r3, r2
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	81fb      	strh	r3, [r7, #14]

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8000fc0:	89fa      	ldrh	r2, [r7, #14]
 8000fc2:	4914      	ldr	r1, [pc, #80]	; (8001014 <PrepareCommutation+0x80>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	440b      	add	r3, r1
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <PrepareCommutation+0x84>)
 8000fd2:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 8000fd4:	89fa      	ldrh	r2, [r7, #14]
 8000fd6:	490f      	ldr	r1, [pc, #60]	; (8001014 <PrepareCommutation+0x80>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	881a      	ldrh	r2, [r3, #0]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <PrepareCommutation+0x84>)
 8000fe8:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 8000fea:	89fa      	ldrh	r2, [r7, #14]
 8000fec:	4909      	ldr	r1, [pc, #36]	; (8001014 <PrepareCommutation+0x80>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	881a      	ldrh	r2, [r3, #0]
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <PrepareCommutation+0x84>)
 8000ffe:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8001000:	2300      	movs	r3, #0

}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40020000 	.word	0x40020000
 8001014:	20000000 	.word	0x20000000
 8001018:	40010000 	.word	0x40010000
 800101c:	00000000 	.word	0x00000000

08001020 <StartupSequence>:

uint8_t StartupSequence (char Direction) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]

	// Initialize some variables
	Fapb1tclk = HAL_RCC_GetPCLK1Freq() * 2;
 800102a:	f005 fdc5 	bl	8006bb8 <HAL_RCC_GetPCLK1Freq>
 800102e:	4603      	mov	r3, r0
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4a79      	ldr	r2, [pc, #484]	; (8001218 <StartupSequence+0x1f8>)
 8001034:	6013      	str	r3, [r2, #0]
	Fapb2tclk = HAL_RCC_GetPCLK2Freq() * 2;
 8001036:	f005 fdd3 	bl	8006be0 <HAL_RCC_GetPCLK2Freq>
 800103a:	4603      	mov	r3, r0
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4a77      	ldr	r2, [pc, #476]	; (800121c <StartupSequence+0x1fc>)
 8001040:	6013      	str	r3, [r2, #0]
	RPMConst = (Fapb2tclk / (TIM9->PSC + 1)) * 1.35;
 8001042:	4b76      	ldr	r3, [pc, #472]	; (800121c <StartupSequence+0x1fc>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b76      	ldr	r3, [pc, #472]	; (8001220 <StartupSequence+0x200>)
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	3301      	adds	r3, #1
 800104c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa5f 	bl	8000514 <__aeabi_ui2d>
 8001056:	a36e      	add	r3, pc, #440	; (adr r3, 8001210 <StartupSequence+0x1f0>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff fad4 	bl	8000608 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fda6 	bl	8000bb8 <__aeabi_d2uiz>
 800106c:	4603      	mov	r3, r0
 800106e:	4a6d      	ldr	r2, [pc, #436]	; (8001224 <StartupSequence+0x204>)
 8001070:	6013      	str	r3, [r2, #0]

	ChangePWM();
 8001072:	f000 f94b 	bl	800130c <ChangePWM>
	}
	*/


	// Read IDR for Hall Sensor status
	uint16_t Hall = (GPIOA->IDR & 0b111) + 6 * Direction + 3;
 8001076:	4b6c      	ldr	r3, [pc, #432]	; (8001228 <StartupSequence+0x208>)
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	b29b      	uxth	r3, r3
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	b29a      	uxth	r2, r3
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	b29b      	uxth	r3, r3
 8001086:	4619      	mov	r1, r3
 8001088:	0049      	lsls	r1, r1, #1
 800108a:	440b      	add	r3, r1
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	b29b      	uxth	r3, r3
 8001090:	4413      	add	r3, r2
 8001092:	b29b      	uxth	r3, r3
 8001094:	3303      	adds	r3, #3
 8001096:	81fb      	strh	r3, [r7, #14]
	// uint16_t Hall = (GPIOA->IDR & 0b111) + 6 * Direction - 3;

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8001098:	89fa      	ldrh	r2, [r7, #14]
 800109a:	4964      	ldr	r1, [pc, #400]	; (800122c <StartupSequence+0x20c>)
 800109c:	4613      	mov	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	440b      	add	r3, r1
 80010a6:	881a      	ldrh	r2, [r3, #0]
 80010a8:	4b61      	ldr	r3, [pc, #388]	; (8001230 <StartupSequence+0x210>)
 80010aa:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 80010ac:	89fa      	ldrh	r2, [r7, #14]
 80010ae:	495f      	ldr	r1, [pc, #380]	; (800122c <StartupSequence+0x20c>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	440b      	add	r3, r1
 80010ba:	3304      	adds	r3, #4
 80010bc:	881a      	ldrh	r2, [r3, #0]
 80010be:	4b5c      	ldr	r3, [pc, #368]	; (8001230 <StartupSequence+0x210>)
 80010c0:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 80010c2:	89fa      	ldrh	r2, [r7, #14]
 80010c4:	4959      	ldr	r1, [pc, #356]	; (800122c <StartupSequence+0x20c>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	440b      	add	r3, r1
 80010d0:	3302      	adds	r3, #2
 80010d2:	881a      	ldrh	r2, [r3, #0]
 80010d4:	4b56      	ldr	r3, [pc, #344]	; (8001230 <StartupSequence+0x210>)
 80010d6:	61da      	str	r2, [r3, #28]


	// Start HallSensor timer
	HAL_TIMEx_HallSensor_Start (&htim2);
 80010d8:	4856      	ldr	r0, [pc, #344]	; (8001234 <StartupSequence+0x214>)
 80010da:	f007 f9d5 	bl	8008488 <HAL_TIMEx_HallSensor_Start>

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 80010de:	2100      	movs	r1, #0
 80010e0:	4855      	ldr	r0, [pc, #340]	; (8001238 <StartupSequence+0x218>)
 80010e2:	f005 fec1 	bl	8006e68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 80010e6:	2104      	movs	r1, #4
 80010e8:	4853      	ldr	r0, [pc, #332]	; (8001238 <StartupSequence+0x218>)
 80010ea:	f005 febd 	bl	8006e68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 80010ee:	2108      	movs	r1, #8
 80010f0:	4851      	ldr	r0, [pc, #324]	; (8001238 <StartupSequence+0x218>)
 80010f2:	f005 feb9 	bl	8006e68 <HAL_TIM_PWM_Start>

	// Start Temp timer
	// HAL_TIM_PWM_Start (&htim5, TIM_CHANNEL_1);

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 80010f6:	4b4e      	ldr	r3, [pc, #312]	; (8001230 <StartupSequence+0x210>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	4a4d      	ldr	r2, [pc, #308]	; (8001230 <StartupSequence+0x210>)
 80010fc:	f023 0320 	bic.w	r3, r3, #32
 8001100:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 8001102:	4b4b      	ldr	r3, [pc, #300]	; (8001230 <StartupSequence+0x210>)
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	4a4a      	ldr	r2, [pc, #296]	; (8001230 <StartupSequence+0x210>)
 8001108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800110c:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 800110e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800111c:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 800111e:	4b40      	ldr	r3, [pc, #256]	; (8001220 <StartupSequence+0x200>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	4a3f      	ldr	r2, [pc, #252]	; (8001220 <StartupSequence+0x200>)
 8001124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001128:	60d3      	str	r3, [r2, #12]

	// Start Interrupts
	HAL_TIM_Base_Start_IT (&htim1);
 800112a:	4843      	ldr	r0, [pc, #268]	; (8001238 <StartupSequence+0x218>)
 800112c:	f005 fdbc 	bl	8006ca8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim2);
 8001130:	4840      	ldr	r0, [pc, #256]	; (8001234 <StartupSequence+0x214>)
 8001132:	f005 fdb9 	bl	8006ca8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim3);
 8001136:	4841      	ldr	r0, [pc, #260]	; (800123c <StartupSequence+0x21c>)
 8001138:	f005 fdb6 	bl	8006ca8 <HAL_TIM_Base_Start_IT>
	// HAL_TIM_Base_Start_IT (&htim5);
	HAL_TIM_Base_Start_IT (&htim9);
 800113c:	4840      	ldr	r0, [pc, #256]	; (8001240 <StartupSequence+0x220>)
 800113e:	f005 fdb3 	bl	8006ca8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT (&htim9, TIM_CHANNEL_2);
 8001142:	2104      	movs	r1, #4
 8001144:	483e      	ldr	r0, [pc, #248]	; (8001240 <StartupSequence+0x220>)
 8001146:	f005 fff3 	bl	8007130 <HAL_TIM_IC_Start_IT>

	// Start ADC for current
	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	HAL_ADC_Start_IT(&hadc1);
 800114a:	483e      	ldr	r0, [pc, #248]	; (8001244 <StartupSequence+0x224>)
 800114c:	f001 fc9e 	bl	8002a8c <HAL_ADC_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001150:	2100      	movs	r1, #0
 8001152:	483a      	ldr	r0, [pc, #232]	; (800123c <StartupSequence+0x21c>)
 8001154:	f005 fe88 	bl	8006e68 <HAL_TIM_PWM_Start>

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 8001158:	4b35      	ldr	r3, [pc, #212]	; (8001230 <StartupSequence+0x210>)
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	4a34      	ldr	r2, [pc, #208]	; (8001230 <StartupSequence+0x210>)
 800115e:	f023 0320 	bic.w	r3, r3, #32
 8001162:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 8001164:	4b32      	ldr	r3, [pc, #200]	; (8001230 <StartupSequence+0x210>)
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	4a31      	ldr	r2, [pc, #196]	; (8001230 <StartupSequence+0x210>)
 800116a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800116e:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 8001170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800117e:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 8001180:	4b27      	ldr	r3, [pc, #156]	; (8001220 <StartupSequence+0x200>)
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	4a26      	ldr	r2, [pc, #152]	; (8001220 <StartupSequence+0x200>)
 8001186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800118a:	6113      	str	r3, [r2, #16]

	// Enable interrupts
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <StartupSequence+0x210>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	4a27      	ldr	r2, [pc, #156]	; (8001230 <StartupSequence+0x210>)
 8001192:	f043 0320 	orr.w	r3, r3, #32
 8001196:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 8001198:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a6:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <StartupSequence+0x200>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <StartupSequence+0x200>)
 80011ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b2:	60d3      	str	r3, [r2, #12]

	// Write some registers
	ADC1->CR1  |= ADC_CR1_EOCIE;	// Enable ADC interrupts
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <StartupSequence+0x228>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a23      	ldr	r2, [pc, #140]	; (8001248 <StartupSequence+0x228>)
 80011ba:	f043 0320 	orr.w	r3, r3, #32
 80011be:	6053      	str	r3, [r2, #4]
	TIM1->CR2  |= TIM_CR2_CCPC; 	// Set CCPC in CR2 to preload CCxE, CCxNE and OCxM bits
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <StartupSequence+0x210>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <StartupSequence+0x210>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6053      	str	r3, [r2, #4]
	TIM1->BDTR &= ~TIM_BDTR_DTG;	// Reset DTG bits
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <StartupSequence+0x210>)
 80011ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d0:	4a17      	ldr	r2, [pc, #92]	; (8001230 <StartupSequence+0x210>)
 80011d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011d6:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= 0x800F;			// Set dead-time to 100ns and make sure to enable MOE bit
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <StartupSequence+0x210>)
 80011da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <StartupSequence+0x210>)
 80011de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011e2:	f043 030f 	orr.w	r3, r3, #15
 80011e6:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <StartupSequence+0x210>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	4a10      	ldr	r2, [pc, #64]	; (8001230 <StartupSequence+0x210>)
 80011ee:	f043 0320 	orr.w	r3, r3, #32
 80011f2:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <StartupSequence+0x210>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <StartupSequence+0x210>)
 80011fa:	f043 0320 	orr.w	r3, r3, #32
 80011fe:	60d3      	str	r3, [r2, #12]

	return HAL_OK;
 8001200:	2300      	movs	r3, #0

}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	f3af 8000 	nop.w
 8001210:	9999999a 	.word	0x9999999a
 8001214:	3ff59999 	.word	0x3ff59999
 8001218:	20000288 	.word	0x20000288
 800121c:	2000028c 	.word	0x2000028c
 8001220:	40014000 	.word	0x40014000
 8001224:	20000290 	.word	0x20000290
 8001228:	40020000 	.word	0x40020000
 800122c:	20000000 	.word	0x20000000
 8001230:	40010000 	.word	0x40010000
 8001234:	20010504 	.word	0x20010504
 8001238:	200104bc 	.word	0x200104bc
 800123c:	2001054c 	.word	0x2001054c
 8001240:	20010624 	.word	0x20010624
 8001244:	200102a0 	.word	0x200102a0
 8001248:	40012000 	.word	0x40012000

0800124c <StopSequence>:

uint8_t StopSequence(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

	// Stop HallSensor timer
	HAL_TIMEx_HallSensor_Stop (&htim2);
 8001250:	4828      	ldr	r0, [pc, #160]	; (80012f4 <StopSequence+0xa8>)
 8001252:	f007 f999 	bl	8008588 <HAL_TIMEx_HallSensor_Stop>

	// Disable all output channels
	TIM1->CCER  = 0x0000;
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <StopSequence+0xac>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = 0x0000;
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <StopSequence+0xac>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = 0x0000;
 8001262:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <StopSequence+0xac>)
 8001264:	2200      	movs	r2, #0
 8001266:	61da      	str	r2, [r3, #28]

	// Perform one last commutation event if not already disabled
	if ( (TIM1->DIER & TIM_DIER_COMIE) >= 1 ) { 		// If COMIE bit in DIER is set commutation events are still enabled
 8001268:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <StopSequence+0xac>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f003 0320 	and.w	r3, r3, #32
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <StopSequence+0x34>

		TIM1->EGR |= TIM_EGR_COMG; 						// Trigger commutation event
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <StopSequence+0xac>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <StopSequence+0xac>)
 800127a:	f043 0320 	orr.w	r3, r3, #32
 800127e:	6153      	str	r3, [r2, #20]
		// while ( (TIM1->SR & TIM_SR_COMIF) >= 1 ); 	// Wait until commutation event has happened

	}

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <StopSequence+0xac>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <StopSequence+0xac>)
 8001286:	f023 0320 	bic.w	r3, r3, #32
 800128a:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <StopSequence+0xac>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <StopSequence+0xac>)
 8001292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001296:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8001298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012a6:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <StopSequence+0xb0>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	4a13      	ldr	r2, [pc, #76]	; (80012fc <StopSequence+0xb0>)
 80012ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012b2:	60d3      	str	r3, [r2, #12]

	// Stop interrupts
	HAL_TIM_Base_Stop_IT (&htim1);
 80012b4:	4812      	ldr	r0, [pc, #72]	; (8001300 <StopSequence+0xb4>)
 80012b6:	f005 fd59 	bl	8006d6c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim2);
 80012ba:	480e      	ldr	r0, [pc, #56]	; (80012f4 <StopSequence+0xa8>)
 80012bc:	f005 fd56 	bl	8006d6c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim9);
 80012c0:	4810      	ldr	r0, [pc, #64]	; (8001304 <StopSequence+0xb8>)
 80012c2:	f005 fd53 	bl	8006d6c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT (&htim9, TIM_CHANNEL_2);
 80012c6:	2104      	movs	r1, #4
 80012c8:	480e      	ldr	r0, [pc, #56]	; (8001304 <StopSequence+0xb8>)
 80012ca:	f006 f84b 	bl	8007364 <HAL_TIM_IC_Stop_IT>

	// Stop PWM Timers
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_1);
 80012ce:	2100      	movs	r1, #0
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <StopSequence+0xb4>)
 80012d2:	f005 fe79 	bl	8006fc8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_2);
 80012d6:	2104      	movs	r1, #4
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <StopSequence+0xb4>)
 80012da:	f005 fe75 	bl	8006fc8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_3);
 80012de:	2108      	movs	r1, #8
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <StopSequence+0xb4>)
 80012e2:	f005 fe71 	bl	8006fc8 <HAL_TIM_PWM_Stop>

	Registers[RPMReg] = 0;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <StopSequence+0xbc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	80da      	strh	r2, [r3, #6]

	return HAL_OK;
 80012ec:	2300      	movs	r3, #0

}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20010504 	.word	0x20010504
 80012f8:	40010000 	.word	0x40010000
 80012fc:	40014000 	.word	0x40014000
 8001300:	200104bc 	.word	0x200104bc
 8001304:	20010624 	.word	0x20010624
 8001308:	20000090 	.word	0x20000090

0800130c <ChangePWM>:

uint8_t ChangePWM (void) {
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0

	uint32_t PWM = (Registers[PWMReg] * TIM1->ARR) / 100; // Calculate required CCRx value
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <ChangePWM+0x6c>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <ChangePWM+0x70>)
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	fb02 f303 	mul.w	r3, r2, r3
 8001320:	4a17      	ldr	r2, [pc, #92]	; (8001380 <ChangePWM+0x74>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	607b      	str	r3, [r7, #4]

	if (PWM >= TIM1->ARR - 60) {
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <ChangePWM+0x70>)
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132e:	3b3c      	subs	r3, #60	; 0x3c
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	d303      	bcc.n	800133e <ChangePWM+0x32>
		PWM = TIM1->ARR - 60;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <ChangePWM+0x70>)
 8001338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133a:	3b3c      	subs	r3, #60	; 0x3c
 800133c:	607b      	str	r3, [r7, #4]
	}

	TIM1->CR1 |= TIM_CR1_UDIS; 	// Disable Update Events
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <ChangePWM+0x70>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <ChangePWM+0x70>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = PWM;	  		// Set new PWM for channel 1
 800134a:	4a0c      	ldr	r2, [pc, #48]	; (800137c <ChangePWM+0x70>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = PWM;	  		// Set new PWM for channel 2
 8001350:	4a0a      	ldr	r2, [pc, #40]	; (800137c <ChangePWM+0x70>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = PWM;	  		// Set new PWM for channel 3
 8001356:	4a09      	ldr	r2, [pc, #36]	; (800137c <ChangePWM+0x70>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_UDIS; // Enable Update Events
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <ChangePWM+0x70>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <ChangePWM+0x70>)
 8001362:	f023 0302 	bic.w	r3, r3, #2
 8001366:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 8001368:	2300      	movs	r3, #0

}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000090 	.word	0x20000090
 800137c:	40010000 	.word	0x40010000
 8001380:	51eb851f 	.word	0x51eb851f

08001384 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_ADC1_Init+0x9c>)
 8001398:	4a22      	ldr	r2, [pc, #136]	; (8001424 <MX_ADC1_Init+0xa0>)
 800139a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_ADC1_Init+0x9c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013e6:	480e      	ldr	r0, [pc, #56]	; (8001420 <MX_ADC1_Init+0x9c>)
 80013e8:	f001 fb0c 	bl	8002a04 <HAL_ADC_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80013f2:	f000 fc47 	bl	8001c84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013f6:	2309      	movs	r3, #9
 80013f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80013fe:	2301      	movs	r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <MX_ADC1_Init+0x9c>)
 8001408:	f001 fd30 	bl	8002e6c <HAL_ADC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001412:	f000 fc37 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200102a0 	.word	0x200102a0
 8001424:	40012000 	.word	0x40012000

08001428 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <HAL_ADC_MspInit+0x8c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d12f      	bne.n	80014aa <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <HAL_ADC_MspInit+0x90>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <HAL_ADC_MspInit+0x90>)
 8001454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_ADC_MspInit+0x90>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_ADC_MspInit+0x90>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <HAL_ADC_MspInit+0x90>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_ADC_MspInit+0x90>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001482:	2302      	movs	r3, #2
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001486:	2303      	movs	r3, #3
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	4809      	ldr	r0, [pc, #36]	; (80014bc <HAL_ADC_MspInit+0x94>)
 8001496:	f002 f863 	bl	8003560 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2012      	movs	r0, #18
 80014a0:	f001 fff7 	bl	8003492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80014a4:	2012      	movs	r0, #18
 80014a6:	f002 f810 	bl	80034ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40012000 	.word	0x40012000
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020400 	.word	0x40020400

080014c0 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

	TotalCurrent -= Current[Ci];
 80014c8:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a39      	ldr	r2, [pc, #228]	; (80015b4 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014ce:	8812      	ldrh	r2, [r2, #0]
 80014d0:	4611      	mov	r1, r2
 80014d2:	4a39      	ldr	r2, [pc, #228]	; (80015b8 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014d4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	4a35      	ldr	r2, [pc, #212]	; (80015b0 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014dc:	6013      	str	r3, [r2, #0]
	Current[Ci] = HAL_ADC_GetValue(&hadc1);
 80014de:	4837      	ldr	r0, [pc, #220]	; (80015bc <HAL_ADC_ConvCpltCallback+0xfc>)
 80014e0:	f001 fca2 	bl	8002e28 <HAL_ADC_GetValue>
 80014e4:	4601      	mov	r1, r0
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	b289      	uxth	r1, r1
 80014ee:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	TotalCurrent += Current[Ci];
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014fc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001500:	461a      	mov	r2, r3
 8001502:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	4a29      	ldr	r2, [pc, #164]	; (80015b0 <HAL_ADC_ConvCpltCallback+0xf0>)
 800150a:	6013      	str	r3, [r2, #0]

	Ci++;
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <HAL_ADC_ConvCpltCallback+0xf4>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001516:	801a      	strh	r2, [r3, #0]

	if ( Ci >= AvgSizeCur - 1 ) {
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_ADC_ConvCpltCallback+0xf4>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8001520:	4293      	cmp	r3, r2
 8001522:	d902      	bls.n	800152a <HAL_ADC_ConvCpltCallback+0x6a>
		Ci = 0;
 8001524:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001526:	2200      	movs	r2, #0
 8001528:	801a      	strh	r2, [r3, #0]
	}

	float current = (3.3 * (TotalCurrent / AvgSizeCur)) / 40960 / 0.015;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_ADC_ConvCpltCallback+0xf0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	0bdb      	lsrs	r3, r3, #15
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ffef 	bl	8000514 <__aeabi_ui2d>
 8001536:	a31a      	add	r3, pc, #104	; (adr r3, 80015a0 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7ff f864 	bl	8000608 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <HAL_ADC_ConvCpltCallback+0x100>)
 800154e:	f7ff f985 	bl	800085c <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	a313      	add	r3, pc, #76	; (adr r3, 80015a8 <HAL_ADC_ConvCpltCallback+0xe8>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f97c 	bl	800085c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff fb44 	bl	8000bf8 <__aeabi_d2f>
 8001570:	4603      	mov	r3, r0
 8001572:	60fb      	str	r3, [r7, #12]
	Registers[CurReg] = current * 1000;
 8001574:	edd7 7a03 	vldr	s15, [r7, #12]
 8001578:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80015c4 <HAL_ADC_ConvCpltCallback+0x104>
 800157c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001584:	ee17 3a90 	vmov	r3, s15
 8001588:	b29a      	uxth	r2, r3
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <HAL_ADC_ConvCpltCallback+0x108>)
 800158c:	809a      	strh	r2, [r3, #4]

	Counter++;
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_ADC_ConvCpltCallback+0x10c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <HAL_ADC_ConvCpltCallback+0x10c>)
 8001596:	6013      	str	r3, [r2, #0]

}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	66666666 	.word	0x66666666
 80015a4:	400a6666 	.word	0x400a6666
 80015a8:	eb851eb8 	.word	0xeb851eb8
 80015ac:	3f8eb851 	.word	0x3f8eb851
 80015b0:	20000294 	.word	0x20000294
 80015b4:	2000029c 	.word	0x2000029c
 80015b8:	200002a0 	.word	0x200002a0
 80015bc:	200102a0 	.word	0x200102a0
 80015c0:	40e40000 	.word	0x40e40000
 80015c4:	447a0000 	.word	0x447a0000
 80015c8:	20000090 	.word	0x20000090
 80015cc:	20000298 	.word	0x20000298

080015d0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b50      	ldr	r3, [pc, #320]	; (800172c <MX_GPIO_Init+0x15c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a4f      	ldr	r2, [pc, #316]	; (800172c <MX_GPIO_Init+0x15c>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b4d      	ldr	r3, [pc, #308]	; (800172c <MX_GPIO_Init+0x15c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b49      	ldr	r3, [pc, #292]	; (800172c <MX_GPIO_Init+0x15c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a48      	ldr	r2, [pc, #288]	; (800172c <MX_GPIO_Init+0x15c>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b46      	ldr	r3, [pc, #280]	; (800172c <MX_GPIO_Init+0x15c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b42      	ldr	r3, [pc, #264]	; (800172c <MX_GPIO_Init+0x15c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a41      	ldr	r2, [pc, #260]	; (800172c <MX_GPIO_Init+0x15c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b3f      	ldr	r3, [pc, #252]	; (800172c <MX_GPIO_Init+0x15c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b3b      	ldr	r3, [pc, #236]	; (800172c <MX_GPIO_Init+0x15c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a3a      	ldr	r2, [pc, #232]	; (800172c <MX_GPIO_Init+0x15c>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b38      	ldr	r3, [pc, #224]	; (800172c <MX_GPIO_Init+0x15c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165c:	4834      	ldr	r0, [pc, #208]	; (8001730 <MX_GPIO_Init+0x160>)
 800165e:	f002 f903 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001668:	4832      	ldr	r0, [pc, #200]	; (8001734 <MX_GPIO_Init+0x164>)
 800166a:	f002 f8fd 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800166e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	482a      	ldr	r0, [pc, #168]	; (8001730 <MX_GPIO_Init+0x160>)
 8001688:	f001 ff6a 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800168c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001692:	2303      	movs	r3, #3
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4823      	ldr	r0, [pc, #140]	; (8001730 <MX_GPIO_Init+0x160>)
 80016a2:	f001 ff5d 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80016a6:	f649 03f0 	movw	r3, #39152	; 0x98f0
 80016aa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ac:	2303      	movs	r3, #3
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	481f      	ldr	r0, [pc, #124]	; (8001738 <MX_GPIO_Init+0x168>)
 80016bc:	f001 ff50 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_9;
 80016c0:	f240 2325 	movw	r3, #549	; 0x225
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c6:	2303      	movs	r3, #3
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4817      	ldr	r0, [pc, #92]	; (8001734 <MX_GPIO_Init+0x164>)
 80016d6:	f001 ff43 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	4810      	ldr	r0, [pc, #64]	; (8001734 <MX_GPIO_Init+0x164>)
 80016f4:	f001 ff34 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016f8:	2310      	movs	r3, #16
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001702:	2302      	movs	r3, #2
 8001704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4809      	ldr	r0, [pc, #36]	; (8001734 <MX_GPIO_Init+0x164>)
 800170e:	f001 ff27 	bl	8003560 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	200a      	movs	r0, #10
 8001718:	f001 febb 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800171c:	200a      	movs	r0, #10
 800171e:	f001 fed4 	bl	80034ca <HAL_NVIC_EnableIRQ>

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40020800 	.word	0x40020800
 8001734:	40020400 	.word	0x40020400
 8001738:	40020000 	.word	0x40020000

0800173c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <MX_I2C1_Init+0x50>)
 8001742:	4a13      	ldr	r2, [pc, #76]	; (8001790 <MX_I2C1_Init+0x54>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_I2C1_Init+0x50>)
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <MX_I2C1_Init+0x58>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_I2C1_Init+0x50>)
 8001754:	2220      	movs	r2, #32
 8001756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_I2C1_Init+0x50>)
 800175a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800175e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <MX_I2C1_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_I2C1_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <MX_I2C1_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_I2C1_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_I2C1_Init+0x50>)
 800177a:	f002 f8b3 	bl	80038e4 <HAL_I2C_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001784:	f000 fa7e 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20010300 	.word	0x20010300
 8001790:	40005400 	.word	0x40005400
 8001794:	000186a0 	.word	0x000186a0

08001798 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_I2C2_Init+0x50>)
 800179e:	4a13      	ldr	r2, [pc, #76]	; (80017ec <MX_I2C2_Init+0x54>)
 80017a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <MX_I2C2_Init+0x58>)
 80017a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017d6:	f002 f885 	bl	80038e4 <HAL_I2C_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017e0:	f000 fa50 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20010354 	.word	0x20010354
 80017ec:	40005800 	.word	0x40005800
 80017f0:	000186a0 	.word	0x000186a0

080017f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	; 0x30
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a42      	ldr	r2, [pc, #264]	; (800191c <HAL_I2C_MspInit+0x128>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d13c      	bne.n	8001890 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <HAL_I2C_MspInit+0x12c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a40      	ldr	r2, [pc, #256]	; (8001920 <HAL_I2C_MspInit+0x12c>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b3e      	ldr	r3, [pc, #248]	; (8001920 <HAL_I2C_MspInit+0x12c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001832:	23c0      	movs	r3, #192	; 0xc0
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001836:	2312      	movs	r3, #18
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183a:	2301      	movs	r3, #1
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001842:	2304      	movs	r3, #4
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	4835      	ldr	r0, [pc, #212]	; (8001924 <HAL_I2C_MspInit+0x130>)
 800184e:	f001 fe87 	bl	8003560 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	4b32      	ldr	r3, [pc, #200]	; (8001920 <HAL_I2C_MspInit+0x12c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a31      	ldr	r2, [pc, #196]	; (8001920 <HAL_I2C_MspInit+0x12c>)
 800185c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <HAL_I2C_MspInit+0x12c>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	201f      	movs	r0, #31
 8001874:	f001 fe0d 	bl	8003492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001878:	201f      	movs	r0, #31
 800187a:	f001 fe26 	bl	80034ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	2020      	movs	r0, #32
 8001884:	f001 fe05 	bl	8003492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001888:	2020      	movs	r0, #32
 800188a:	f001 fe1e 	bl	80034ca <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800188e:	e041      	b.n	8001914 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a24      	ldr	r2, [pc, #144]	; (8001928 <HAL_I2C_MspInit+0x134>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d13c      	bne.n	8001914 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_I2C_MspInit+0x12c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a1f      	ldr	r2, [pc, #124]	; (8001920 <HAL_I2C_MspInit+0x12c>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_I2C_MspInit+0x12c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018bc:	2312      	movs	r3, #18
 80018be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018c8:	2304      	movs	r3, #4
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	4814      	ldr	r0, [pc, #80]	; (8001924 <HAL_I2C_MspInit+0x130>)
 80018d4:	f001 fe44 	bl	8003560 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018d8:	2308      	movs	r3, #8
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018dc:	2312      	movs	r3, #18
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80018e8:	2309      	movs	r3, #9
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	480c      	ldr	r0, [pc, #48]	; (8001924 <HAL_I2C_MspInit+0x130>)
 80018f4:	f001 fe34 	bl	8003560 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_I2C_MspInit+0x12c>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	4a07      	ldr	r2, [pc, #28]	; (8001920 <HAL_I2C_MspInit+0x12c>)
 8001902:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001906:	6413      	str	r3, [r2, #64]	; 0x40
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_I2C_MspInit+0x12c>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	bf00      	nop
 8001916:	3730      	adds	r7, #48	; 0x30
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40005400 	.word	0x40005400
 8001920:	40023800 	.word	0x40023800
 8001924:	40020400 	.word	0x40020400
 8001928:	40005800 	.word	0x40005800

0800192c <HAL_I2C_ListenCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_I2C_ListenCpltCallback+0x20>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d102      	bne.n	8001944 <HAL_I2C_ListenCpltCallback+0x18>
		HAL_I2C_EnableListen_IT (i2cHandle);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f002 fd1e 	bl	8004380 <HAL_I2C_EnableListen_IT>
	}

}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40005400 	.word	0x40005400

08001950 <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback (I2C_HandleTypeDef* i2cHandle, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
 800195c:	4613      	mov	r3, r2
 800195e:	803b      	strh	r3, [r7, #0]

	if (i2cHandle->Instance == I2C1) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <HAL_I2C_AddrCallback+0x68>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d122      	bne.n	80019b0 <HAL_I2C_AddrCallback+0x60>
		if ( TransferDirection == I2C_DIRECTION_TRANSMIT ) { // If the master wants to transmit the data
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d10d      	bne.n	800198c <HAL_I2C_AddrCallback+0x3c>

			RxCount = 0;
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_I2C_AddrCallback+0x6c>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_FIRST_FRAME);
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_I2C_AddrCallback+0x6c>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_I2C_AddrCallback+0x70>)
 800197e:	18d1      	adds	r1, r2, r3
 8001980:	2301      	movs	r3, #1
 8001982:	2201      	movs	r2, #1
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f002 fc88 	bl	800429a <HAL_I2C_Slave_Seq_Receive_IT>

		}

	}

}
 800198a:	e011      	b.n	80019b0 <HAL_I2C_AddrCallback+0x60>
			TxCount = 0;
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_I2C_AddrCallback+0x74>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
			StartReg = RxData[0];
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_I2C_AddrCallback+0x70>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_I2C_AddrCallback+0x78>)
 800199a:	601a      	str	r2, [r3, #0]
			ret = HAL_I2C_Slave_Seq_Transmit_IT(i2cHandle, (uint8_t *) Registers, RegSize * 2, I2C_FIRST_FRAME);
 800199c:	2301      	movs	r3, #1
 800199e:	2208      	movs	r2, #8
 80019a0:	490a      	ldr	r1, [pc, #40]	; (80019cc <HAL_I2C_AddrCallback+0x7c>)
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f002 fc06 	bl	80041b4 <HAL_I2C_Slave_Seq_Transmit_IT>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_I2C_AddrCallback+0x80>)
 80019ae:	701a      	strb	r2, [r3, #0]
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40005400 	.word	0x40005400
 80019bc:	200102e9 	.word	0x200102e9
 80019c0:	200102ec 	.word	0x200102ec
 80019c4:	200102e8 	.word	0x200102e8
 80019c8:	200102f0 	.word	0x200102f0
 80019cc:	20000090 	.word	0x20000090
 80019d0:	200103ac 	.word	0x200103ac

080019d4 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
		// HAL_I2C_Slave_Seq_Transmit_IT (i2cHandle, (uint8_t *) (Registers[TxCount + StartReg] >> 8), 1, I2C_NEXT_FRAME);
		// HAL_I2C_Slave_Seq_Transmit_IT (i2cHandle, (uint8_t *) (Registers[TxCount + StartReg] & 0xFF), 1, I2C_NEXT_FRAME);

	}

}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef* i2cHandle) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d128      	bne.n	8001a4c <HAL_I2C_SlaveRxCpltCallback+0x64>

		RxCount++;
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a04:	701a      	strb	r2, [r3, #0]

		if ( RxCount < RxSize ) {
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d818      	bhi.n	8001a40 <HAL_I2C_SlaveRxCpltCallback+0x58>

			if (RxCount == RxSize - 1) {
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d10a      	bne.n	8001a2c <HAL_I2C_SlaveRxCpltCallback+0x44>
				HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_LAST_FRAME);
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001a1e:	18d1      	adds	r1, r2, r3
 8001a20:	2320      	movs	r3, #32
 8001a22:	2201      	movs	r2, #1
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f002 fc38 	bl	800429a <HAL_I2C_Slave_Seq_Receive_IT>
 8001a2a:	e009      	b.n	8001a40 <HAL_I2C_SlaveRxCpltCallback+0x58>
			} else {
				HAL_I2C_Slave_Sequential_Receive_IT (i2cHandle, RxData + RxCount, 1, I2C_NEXT_FRAME);
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001a34:	18d1      	adds	r1, r2, r3
 8001a36:	2304      	movs	r3, #4
 8001a38:	2201      	movs	r2, #1
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f002 fc2d 	bl	800429a <HAL_I2C_Slave_Seq_Receive_IT>
			}
		}

		if ( RxCount == RxSize) {
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d101      	bne.n	8001a4c <HAL_I2C_SlaveRxCpltCallback+0x64>
			ProcessData();
 8001a48:	f000 f83c 	bl	8001ac4 <ProcessData>
		}

	}

}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40005400 	.word	0x40005400
 8001a58:	200102e9 	.word	0x200102e9
 8001a5c:	200102ec 	.word	0x200102ec

08001a60 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback (I2C_HandleTypeDef* i2cHandle) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

	if (i2cHandle->Instance == I2C1) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <HAL_I2C_ErrorCallback+0x58>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d11d      	bne.n	8001aae <HAL_I2C_ErrorCallback+0x4e>

		if ( HAL_I2C_GetError (i2cHandle) == 4) {
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f002 fede 	bl	8004834 <HAL_I2C_GetError>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d114      	bne.n	8001aa8 <HAL_I2C_ErrorCallback+0x48>

			__HAL_I2C_CLEAR_FLAG (i2cHandle, I2C_FLAG_AF); 	// Clear AF flag
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a86:	615a      	str	r2, [r3, #20]

			if ( TxCount == 0) { 						// Error while recieving
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <HAL_I2C_ErrorCallback+0x5c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <HAL_I2C_ErrorCallback+0x3c>
				I2C_Error = HAL_ERROR;
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_I2C_ErrorCallback+0x60>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
				ProcessData();
 8001a96:	f000 f815 	bl	8001ac4 <ProcessData>
 8001a9a:	e005      	b.n	8001aa8 <HAL_I2C_ErrorCallback+0x48>
			} else { 									// Error while transmitting
				TxCount--;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <HAL_I2C_ErrorCallback+0x5c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_I2C_ErrorCallback+0x5c>)
 8001aa6:	701a      	strb	r2, [r3, #0]
			}

		}

		HAL_I2C_EnableListen_IT(i2cHandle);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f002 fc69 	bl	8004380 <HAL_I2C_EnableListen_IT>

	}

}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40005400 	.word	0x40005400
 8001abc:	200102e8 	.word	0x200102e8
 8001ac0:	200102fc 	.word	0x200102fc

08001ac4 <ProcessData>:

void ProcessData (void) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0

	StartReg = RxData[0]; 			// Start address of registers to be written
 8001aca:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <ProcessData+0x90>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <ProcessData+0x94>)
 8001ad2:	601a      	str	r2, [r3, #0]
	NumReg = RxCount - 1; 			// Number of registers to be written
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <ProcessData+0x98>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	4a21      	ldr	r2, [pc, #132]	; (8001b60 <ProcessData+0x9c>)
 8001adc:	6013      	str	r3, [r2, #0]
	EndReg = StartReg + NumReg - 1; // Last register to be written
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <ProcessData+0x94>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <ProcessData+0x9c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <ProcessData+0xa0>)
 8001aec:	6013      	str	r3, [r2, #0]
	if (EndReg > RxSize) {
		//Error_Handler();
	}

	// Write data into the register using a for loop
	for (int i = 2; i < NumReg + 1; i++) {
 8001aee:	2302      	movs	r3, #2
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	e00f      	b.n	8001b14 <ProcessData+0x50>
		Registers[StartReg++] = RxData[i];
 8001af4:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <ProcessData+0x90>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	7818      	ldrb	r0, [r3, #0]
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <ProcessData+0x94>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	4915      	ldr	r1, [pc, #84]	; (8001b58 <ProcessData+0x94>)
 8001b04:	600a      	str	r2, [r1, #0]
 8001b06:	b281      	uxth	r1, r0
 8001b08:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <ProcessData+0xa4>)
 8001b0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 2; i < NumReg + 1; i++) {
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3301      	adds	r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <ProcessData+0x9c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	ddea      	ble.n	8001af4 <ProcessData+0x30>
	}

	// If the PWM is higher than 0 but the motor is not turning then startup
	if ( Registers[PWMReg] > 0 && Registers[RPMReg] == 0) {
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <ProcessData+0xa4>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <ProcessData+0x76>
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <ProcessData+0xa4>)
 8001b28:	88db      	ldrh	r3, [r3, #6]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d105      	bne.n	8001b3a <ProcessData+0x76>
		StartupSequence(Registers[DirReg]);
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <ProcessData+0xa4>)
 8001b30:	885b      	ldrh	r3, [r3, #2]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fa73 	bl	8001020 <StartupSequence>
	}

	// If the PWM is 0 but the motor is still turning shutdown
	if ( Registers[PWMReg] == 0 && Registers[RPMReg] > 0 ) {
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <ProcessData+0xa4>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
		// StopSequence();
	}

	// Call some functions
	ChangePWM(); 				// Update PWM values
 8001b40:	f7ff fbe4 	bl	800130c <ChangePWM>
	// memset(RxData, 0, RxSize); 	// Empty the RxData array

	Buzzer = 1;
 8001b44:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <ProcessData+0xa8>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200102ec 	.word	0x200102ec
 8001b58:	200102f0 	.word	0x200102f0
 8001b5c:	200102e9 	.word	0x200102e9
 8001b60:	200102f4 	.word	0x200102f4
 8001b64:	200102f8 	.word	0x200102f8
 8001b68:	20000090 	.word	0x20000090
 8001b6c:	200103a8 	.word	0x200103a8

08001b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b74:	f000 fed4 	bl	8002920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b78:	f000 f81a 	bl	8001bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b7c:	f7ff fd28 	bl	80015d0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001b80:	f000 fac0 	bl	8002104 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b84:	f000 fb78 	bl	8002278 <MX_TIM2_Init>
  MX_TIM9_Init();
 8001b88:	f000 fcc2 	bl	8002510 <MX_TIM9_Init>
  MX_I2C1_Init();
 8001b8c:	f7ff fdd6 	bl	800173c <MX_I2C1_Init>
  MX_ADC1_Init();
 8001b90:	f7ff fbf8 	bl	8001384 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001b94:	f7ff fe00 	bl	8001798 <MX_I2C2_Init>
  MX_TIM4_Init();
 8001b98:	f000 fc0e 	bl	80023b8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001b9c:	f000 fbb6 	bl	800230c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001ba0:	f000 fc5e 	bl	8002460 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	HAL_I2C_EnableListen_IT (&hi2c1);
 8001ba4:	4801      	ldr	r0, [pc, #4]	; (8001bac <main+0x3c>)
 8001ba6:	f002 fbeb 	bl	8004380 <HAL_I2C_EnableListen_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <main+0x3a>
 8001bac:	20010300 	.word	0x20010300

08001bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b094      	sub	sp, #80	; 0x50
 8001bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	2230      	movs	r2, #48	; 0x30
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f007 fb59 	bl	8009276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <SystemClock_Config+0xcc>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	4a27      	ldr	r2, [pc, #156]	; (8001c7c <SystemClock_Config+0xcc>)
 8001bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be2:	6413      	str	r3, [r2, #64]	; 0x40
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <SystemClock_Config+0xcc>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <SystemClock_Config+0xd0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <SystemClock_Config+0xd0>)
 8001bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <SystemClock_Config+0xd0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c16:	2302      	movs	r3, #2
 8001c18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c20:	2319      	movs	r3, #25
 8001c22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001c24:	23c0      	movs	r3, #192	; 0xc0
 8001c26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c30:	f107 0320 	add.w	r3, r7, #32
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 fb8f 	bl	8006358 <HAL_RCC_OscConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c40:	f000 f820 	bl	8001c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c44:	230f      	movs	r3, #15
 8001c46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	2103      	movs	r1, #3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 fdf0 	bl	8006848 <HAL_RCC_ClockConfig>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c6e:	f000 f809 	bl	8001c84 <Error_Handler>
  }
}
 8001c72:	bf00      	nop
 8001c74:	3750      	adds	r7, #80	; 0x50
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000

08001c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <Error_Handler+0x8>
	...

08001c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_MspInit+0x4c>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	4a0f      	ldr	r2, [pc, #60]	; (8001cdc <HAL_MspInit+0x4c>)
 8001ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <HAL_MspInit+0x4c>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	603b      	str	r3, [r7, #0]
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_MspInit+0x4c>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_MspInit+0x4c>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_MspInit+0x4c>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800

08001ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <NMI_Handler+0x4>

08001ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <HardFault_Handler+0x4>

08001cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <MemManage_Handler+0x4>

08001cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <BusFault_Handler+0x4>

08001cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <UsageFault_Handler+0x4>

08001cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d2c:	f000 fe4a 	bl	80029c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

	Buzzer = 1;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <EXTI4_IRQHandler+0x14>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d3e:	2010      	movs	r0, #16
 8001d40:	f001 fdac 	bl	800389c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200103a8 	.word	0x200103a8

08001d4c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <ADC_IRQHandler+0x10>)
 8001d52:	f000 ff59 	bl	8002c08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200102a0 	.word	0x200102a0

08001d60 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	if ( (TIM9->SR & TIM_SR_CC2IF) >= 1) { // If the CC2IF is set it means a input capture has happened
 8001d64:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d03f      	beq.n	8001df0 <TIM1_BRK_TIM9_IRQHandler+0x90>

		Total -= RPM[i];
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a2a      	ldr	r2, [pc, #168]	; (8001e20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d76:	8812      	ldrh	r2, [r2, #0]
 8001d78:	4611      	mov	r1, r2
 8001d7a:	4a2a      	ldr	r2, [pc, #168]	; (8001e24 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001d7c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	4a26      	ldr	r2, [pc, #152]	; (8001e1c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001d84:	6013      	str	r3, [r2, #0]
		RPM[i] = RPMConst / (TIM9->CCR2);
 8001d86:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <TIM1_BRK_TIM9_IRQHandler+0xc8>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8e:	fbb2 f1f3 	udiv	r1, r2, r3
 8001d92:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	b289      	uxth	r1, r1
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001d9c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Total += RPM[i];
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001da8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001db6:	6013      	str	r3, [r2, #0]

		i++;
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001dc2:	801a      	strh	r2, [r3, #0]

		if ( i >= AvgSize - 1 ) {
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	2b7e      	cmp	r3, #126	; 0x7e
 8001dca:	d902      	bls.n	8001dd2 <TIM1_BRK_TIM9_IRQHandler+0x72>
			i = 0;
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	801a      	strh	r2, [r3, #0]
		}

		Registers[RPMReg] = Total / AvgSize;
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	09db      	lsrs	r3, r3, #7
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001ddc:	80da      	strh	r2, [r3, #6]

		// If maximum RPM is exceeded -> shutdown
		if ( Registers[RPMReg] > MaximumRPM ) {
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001de0:	88db      	ldrh	r3, [r3, #6]
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d90e      	bls.n	8001e08 <TIM1_BRK_TIM9_IRQHandler+0xa8>
			StopSequence();
 8001dea:	f7ff fa2f 	bl	800124c <StopSequence>
 8001dee:	e00b      	b.n	8001e08 <TIM1_BRK_TIM9_IRQHandler+0xa8>
		}
	} else {
		Registers[RPMReg] = 0; // If the CC2IF was not set it means the timer has overflowed and the motor is thus stationary
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	80da      	strh	r2, [r3, #6]
		Total = 0;
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
		memset(RPM, 0, AvgSize * 2);
 8001dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e00:	2100      	movs	r1, #0
 8001e02:	4808      	ldr	r0, [pc, #32]	; (8001e24 <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001e04:	f007 fa37 	bl	8009276 <memset>
	}


  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e08:	4809      	ldr	r0, [pc, #36]	; (8001e30 <TIM1_BRK_TIM9_IRQHandler+0xd0>)
 8001e0a:	f005 fb59 	bl	80074c0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001e0e:	4809      	ldr	r0, [pc, #36]	; (8001e34 <TIM1_BRK_TIM9_IRQHandler+0xd4>)
 8001e10:	f005 fb56 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40014000 	.word	0x40014000
 8001e1c:	200103b0 	.word	0x200103b0
 8001e20:	200104b4 	.word	0x200104b4
 8001e24:	200103b4 	.word	0x200103b4
 8001e28:	20000290 	.word	0x20000290
 8001e2c:	20000090 	.word	0x20000090
 8001e30:	200104bc 	.word	0x200104bc
 8001e34:	20010624 	.word	0x20010624

08001e38 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	PrepareCommutation (Registers[DirReg]); // Set next Commutation states
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 8001e3e:	885b      	ldrh	r3, [r3, #2]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff f8a6 	bl	8000f94 <PrepareCommutation>

	TIM1->SR &= ~TIM_SR_COMIF; 				// Reset COMIF in SR register
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001e4e:	f023 0320 	bic.w	r3, r3, #32
 8001e52:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e54:	4804      	ldr	r0, [pc, #16]	; (8001e68 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 8001e56:	f005 fb33 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000090 	.word	0x20000090
 8001e64:	40010000 	.word	0x40010000
 8001e68:	200104bc 	.word	0x200104bc

08001e6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <TIM2_IRQHandler+0x20>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR
	TIM1->EGR |= TIM_EGR_COMG;
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <TIM2_IRQHandler+0x24>)
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <TIM2_IRQHandler+0x24>)
 8001e7c:	f043 0320 	orr.w	r3, r3, #32
 8001e80:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e82:	4804      	ldr	r0, [pc, #16]	; (8001e94 <TIM2_IRQHandler+0x28>)
 8001e84:	f005 fb1c 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40014000 	.word	0x40014000
 8001e90:	40010000 	.word	0x40010000
 8001e94:	20010504 	.word	0x20010504

08001e98 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <I2C1_EV_IRQHandler+0x10>)
 8001e9e:	f002 faa5 	bl	80043ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20010300 	.word	0x20010300

08001eac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <I2C1_ER_IRQHandler+0x10>)
 8001eb2:	f002 fbee 	bl	8004692 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20010300 	.word	0x20010300

08001ec0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM5_IRQn 0 */

	uint8_t buff[2];
	float Temp = 0;
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]

	buff[0] = 0x05;
 8001ecc:	2305      	movs	r3, #5
 8001ece:	703b      	strb	r3, [r7, #0]
	buff[1] = 0x00;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	707b      	strb	r3, [r7, #1]

	ret = HAL_I2C_Master_Transmit(&hi2c2, MCP9808_ADDR << 1, buff, 1, HAL_MAX_DELAY);
 8001ed4:	463a      	mov	r2, r7
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2301      	movs	r3, #1
 8001ede:	2130      	movs	r1, #48	; 0x30
 8001ee0:	4818      	ldr	r0, [pc, #96]	; (8001f44 <TIM5_IRQHandler+0x84>)
 8001ee2:	f001 fe43 	bl	8003b6c <HAL_I2C_Master_Transmit>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <TIM5_IRQHandler+0x88>)
 8001eec:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Receive(&hi2c2, MCP9808_ADDR << 1, buff, 2, HAL_MAX_DELAY);
 8001eee:	463a      	mov	r2, r7
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	2130      	movs	r1, #48	; 0x30
 8001efa:	4812      	ldr	r0, [pc, #72]	; (8001f44 <TIM5_IRQHandler+0x84>)
 8001efc:	f001 ff34 	bl	8003d68 <HAL_I2C_Master_Receive>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <TIM5_IRQHandler+0x88>)
 8001f06:	701a      	strb	r2, [r3, #0]

	Temp = ((((int16_t)buff[0] << 11) + ((int16_t)buff[1] << 3)) >> 3) / 1600.0;
 8001f08:	783b      	ldrb	r3, [r7, #0]
 8001f0a:	02da      	lsls	r2, r3, #11
 8001f0c:	787b      	ldrb	r3, [r7, #1]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	10db      	asrs	r3, r3, #3
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fb0d 	bl	8000534 <__aeabi_i2d>
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <TIM5_IRQHandler+0x8c>)
 8001f20:	f7fe fc9c 	bl	800085c <__aeabi_ddiv>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fe64 	bl	8000bf8 <__aeabi_d2f>
 8001f30:	4603      	mov	r3, r0
 8001f32:	607b      	str	r3, [r7, #4]

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f34:	4806      	ldr	r0, [pc, #24]	; (8001f50 <TIM5_IRQHandler+0x90>)
 8001f36:	f005 fac3 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20010354 	.word	0x20010354
 8001f48:	200103ac 	.word	0x200103ac
 8001f4c:	40990000 	.word	0x40990000
 8001f50:	200105dc 	.word	0x200105dc

08001f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return 1;
 8001f58:	2301      	movs	r3, #1
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_kill>:

int _kill(int pid, int sig)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f6e:	f007 f9d5 	bl	800931c <__errno>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2216      	movs	r2, #22
 8001f76:	601a      	str	r2, [r3, #0]
  return -1;
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_exit>:

void _exit (int status)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ffe7 	bl	8001f64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f96:	e7fe      	b.n	8001f96 <_exit+0x12>

08001f98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	e00a      	b.n	8001fc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001faa:	f3af 8000 	nop.w
 8001fae:	4601      	mov	r1, r0
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	60ba      	str	r2, [r7, #8]
 8001fb6:	b2ca      	uxtb	r2, r1
 8001fb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	dbf0      	blt.n	8001faa <_read+0x12>
  }

  return len;
 8001fc8:	687b      	ldr	r3, [r7, #4]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e009      	b.n	8001ff8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	60ba      	str	r2, [r7, #8]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	dbf1      	blt.n	8001fe4 <_write+0x12>
  }
  return len;
 8002000:	687b      	ldr	r3, [r7, #4]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <_close>:

int _close(int file)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002032:	605a      	str	r2, [r3, #4]
  return 0;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_isatty>:

int _isatty(int file)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800204a:	2301      	movs	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <_sbrk+0x5c>)
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <_sbrk+0x60>)
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <_sbrk+0x64>)
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <_sbrk+0x68>)
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d207      	bcs.n	80020b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a4:	f007 f93a 	bl	800931c <__errno>
 80020a8:	4603      	mov	r3, r0
 80020aa:	220c      	movs	r2, #12
 80020ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	e009      	b.n	80020c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <_sbrk+0x64>)
 80020c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20020000 	.word	0x20020000
 80020d4:	00000400 	.word	0x00000400
 80020d8:	200104b8 	.word	0x200104b8
 80020dc:	200107c0 	.word	0x200107c0

080020e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <SystemInit+0x20>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	4a05      	ldr	r2, [pc, #20]	; (8002100 <SystemInit+0x20>)
 80020ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b096      	sub	sp, #88	; 0x58
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800210a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002124:	f107 0320 	add.w	r3, r7, #32
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
 8002134:	615a      	str	r2, [r3, #20]
 8002136:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002138:	463b      	mov	r3, r7
 800213a:	2220      	movs	r2, #32
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f007 f899 	bl	8009276 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002144:	4b4a      	ldr	r3, [pc, #296]	; (8002270 <MX_TIM1_Init+0x16c>)
 8002146:	4a4b      	ldr	r2, [pc, #300]	; (8002274 <MX_TIM1_Init+0x170>)
 8002148:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800214a:	4b49      	ldr	r3, [pc, #292]	; (8002270 <MX_TIM1_Init+0x16c>)
 800214c:	2200      	movs	r2, #0
 800214e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002150:	4b47      	ldr	r3, [pc, #284]	; (8002270 <MX_TIM1_Init+0x16c>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 8002156:	4b46      	ldr	r3, [pc, #280]	; (8002270 <MX_TIM1_Init+0x16c>)
 8002158:	f240 727f 	movw	r2, #1919	; 0x77f
 800215c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215e:	4b44      	ldr	r3, [pc, #272]	; (8002270 <MX_TIM1_Init+0x16c>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002164:	4b42      	ldr	r3, [pc, #264]	; (8002270 <MX_TIM1_Init+0x16c>)
 8002166:	2200      	movs	r2, #0
 8002168:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216a:	4b41      	ldr	r3, [pc, #260]	; (8002270 <MX_TIM1_Init+0x16c>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002170:	483f      	ldr	r0, [pc, #252]	; (8002270 <MX_TIM1_Init+0x16c>)
 8002172:	f004 fd49 	bl	8006c08 <HAL_TIM_Base_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800217c:	f7ff fd82 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002180:	483b      	ldr	r0, [pc, #236]	; (8002270 <MX_TIM1_Init+0x16c>)
 8002182:	f004 fe22 	bl	8006dca <HAL_TIM_PWM_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 800218c:	f7ff fd7a 	bl	8001c84 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002190:	2304      	movs	r3, #4
 8002192:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002194:	2300      	movs	r3, #0
 8002196:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002198:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800219c:	4619      	mov	r1, r3
 800219e:	4834      	ldr	r0, [pc, #208]	; (8002270 <MX_TIM1_Init+0x16c>)
 80021a0:	f005 fbf4 	bl	800798c <HAL_TIM_SlaveConfigSynchro>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80021aa:	f7ff fd6b 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021ba:	4619      	mov	r1, r3
 80021bc:	482c      	ldr	r0, [pc, #176]	; (8002270 <MX_TIM1_Init+0x16c>)
 80021be:	f006 fa1b 	bl	80085f8 <HAL_TIMEx_MasterConfigSynchronization>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80021c8:	f7ff fd5c 	bl	8001c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021cc:	2360      	movs	r3, #96	; 0x60
 80021ce:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e8:	f107 0320 	add.w	r3, r7, #32
 80021ec:	2200      	movs	r2, #0
 80021ee:	4619      	mov	r1, r3
 80021f0:	481f      	ldr	r0, [pc, #124]	; (8002270 <MX_TIM1_Init+0x16c>)
 80021f2:	f005 fb09 	bl	8007808 <HAL_TIM_PWM_ConfigChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80021fc:	f7ff fd42 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002200:	f107 0320 	add.w	r3, r7, #32
 8002204:	2204      	movs	r2, #4
 8002206:	4619      	mov	r1, r3
 8002208:	4819      	ldr	r0, [pc, #100]	; (8002270 <MX_TIM1_Init+0x16c>)
 800220a:	f005 fafd 	bl	8007808 <HAL_TIM_PWM_ConfigChannel>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002214:	f7ff fd36 	bl	8001c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002218:	f107 0320 	add.w	r3, r7, #32
 800221c:	2208      	movs	r2, #8
 800221e:	4619      	mov	r1, r3
 8002220:	4813      	ldr	r0, [pc, #76]	; (8002270 <MX_TIM1_Init+0x16c>)
 8002222:	f005 faf1 	bl	8007808 <HAL_TIM_PWM_ConfigChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800222c:	f7ff fd2a 	bl	8001c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002248:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800224e:	463b      	mov	r3, r7
 8002250:	4619      	mov	r1, r3
 8002252:	4807      	ldr	r0, [pc, #28]	; (8002270 <MX_TIM1_Init+0x16c>)
 8002254:	f006 fa3e 	bl	80086d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 800225e:	f7ff fd11 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002262:	4803      	ldr	r0, [pc, #12]	; (8002270 <MX_TIM1_Init+0x16c>)
 8002264:	f000 fad6 	bl	8002814 <HAL_TIM_MspPostInit>

}
 8002268:	bf00      	nop
 800226a:	3758      	adds	r7, #88	; 0x58
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	200104bc 	.word	0x200104bc
 8002274:	40010000 	.word	0x40010000

08002278 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800227e:	f107 0308 	add.w	r3, r7, #8
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228c:	463b      	mov	r3, r7
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <MX_TIM2_Init+0x90>)
 8002296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800229a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <MX_TIM2_Init+0x90>)
 800229e:	2200      	movs	r2, #0
 80022a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <MX_TIM2_Init+0x90>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <MX_TIM2_Init+0x90>)
 80022aa:	f04f 32ff 	mov.w	r2, #4294967295
 80022ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <MX_TIM2_Init+0x90>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <MX_TIM2_Init+0x90>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	4619      	mov	r1, r3
 80022d2:	480d      	ldr	r0, [pc, #52]	; (8002308 <MX_TIM2_Init+0x90>)
 80022d4:	f006 f82e 	bl	8008334 <HAL_TIMEx_HallSensor_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80022de:	f7ff fcd1 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80022e2:	2350      	movs	r3, #80	; 0x50
 80022e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ea:	463b      	mov	r3, r7
 80022ec:	4619      	mov	r1, r3
 80022ee:	4806      	ldr	r0, [pc, #24]	; (8002308 <MX_TIM2_Init+0x90>)
 80022f0:	f006 f982 	bl	80085f8 <HAL_TIMEx_MasterConfigSynchronization>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80022fa:	f7ff fcc3 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20010504 	.word	0x20010504

0800230c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002312:	f107 0320 	add.w	r3, r7, #32
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
 8002328:	611a      	str	r2, [r3, #16]
 800232a:	615a      	str	r2, [r3, #20]
 800232c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <MX_TIM3_Init+0xa4>)
 8002330:	4a20      	ldr	r2, [pc, #128]	; (80023b4 <MX_TIM3_Init+0xa8>)
 8002332:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <MX_TIM3_Init+0xa4>)
 8002336:	2200      	movs	r2, #0
 8002338:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <MX_TIM3_Init+0xa4>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 959;
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <MX_TIM3_Init+0xa4>)
 8002342:	f240 32bf 	movw	r2, #959	; 0x3bf
 8002346:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <MX_TIM3_Init+0xa4>)
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <MX_TIM3_Init+0xa4>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002354:	4816      	ldr	r0, [pc, #88]	; (80023b0 <MX_TIM3_Init+0xa4>)
 8002356:	f004 fd38 	bl	8006dca <HAL_TIM_PWM_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002360:	f7ff fc90 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002364:	2320      	movs	r3, #32
 8002366:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800236c:	f107 0320 	add.w	r3, r7, #32
 8002370:	4619      	mov	r1, r3
 8002372:	480f      	ldr	r0, [pc, #60]	; (80023b0 <MX_TIM3_Init+0xa4>)
 8002374:	f006 f940 	bl	80085f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800237e:	f7ff fc81 	bl	8001c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002382:	2360      	movs	r3, #96	; 0x60
 8002384:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	2200      	movs	r2, #0
 8002396:	4619      	mov	r1, r3
 8002398:	4805      	ldr	r0, [pc, #20]	; (80023b0 <MX_TIM3_Init+0xa4>)
 800239a:	f005 fa35 	bl	8007808 <HAL_TIM_PWM_ConfigChannel>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80023a4:	f7ff fc6e 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023a8:	bf00      	nop
 80023aa:	3728      	adds	r7, #40	; 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	2001054c 	.word	0x2001054c
 80023b4:	40000400 	.word	0x40000400

080023b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023be:	f107 0310 	add.w	r3, r7, #16
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023c8:	463b      	mov	r3, r7
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023d4:	4b20      	ldr	r3, [pc, #128]	; (8002458 <MX_TIM4_Init+0xa0>)
 80023d6:	4a21      	ldr	r2, [pc, #132]	; (800245c <MX_TIM4_Init+0xa4>)
 80023d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023da:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <MX_TIM4_Init+0xa0>)
 80023dc:	2200      	movs	r2, #0
 80023de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <MX_TIM4_Init+0xa0>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <MX_TIM4_Init+0xa0>)
 80023e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <MX_TIM4_Init+0xa0>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f4:	4b18      	ldr	r3, [pc, #96]	; (8002458 <MX_TIM4_Init+0xa0>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80023fa:	4817      	ldr	r0, [pc, #92]	; (8002458 <MX_TIM4_Init+0xa0>)
 80023fc:	f004 fe48 	bl	8007090 <HAL_TIM_IC_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002406:	f7ff fc3d 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002412:	f107 0310 	add.w	r3, r7, #16
 8002416:	4619      	mov	r1, r3
 8002418:	480f      	ldr	r0, [pc, #60]	; (8002458 <MX_TIM4_Init+0xa0>)
 800241a:	f006 f8ed 	bl	80085f8 <HAL_TIMEx_MasterConfigSynchronization>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002424:	f7ff fc2e 	bl	8001c84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002428:	2300      	movs	r3, #0
 800242a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800242c:	2301      	movs	r3, #1
 800242e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002438:	463b      	mov	r3, r7
 800243a:	2208      	movs	r2, #8
 800243c:	4619      	mov	r1, r3
 800243e:	4806      	ldr	r0, [pc, #24]	; (8002458 <MX_TIM4_Init+0xa0>)
 8002440:	f005 f946 	bl	80076d0 <HAL_TIM_IC_ConfigChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800244a:	f7ff fc1b 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20010594 	.word	0x20010594
 800245c:	40000800 	.word	0x40000800

08002460 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	; 0x28
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002466:	f107 0320 	add.w	r3, r7, #32
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	615a      	str	r2, [r3, #20]
 8002480:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <MX_TIM5_Init+0xa4>)
 8002484:	4a20      	ldr	r2, [pc, #128]	; (8002508 <MX_TIM5_Init+0xa8>)
 8002486:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100;
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <MX_TIM5_Init+0xa4>)
 800248a:	2264      	movs	r2, #100	; 0x64
 800248c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <MX_TIM5_Init+0xa4>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 960000;
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <MX_TIM5_Init+0xa4>)
 8002496:	4a1d      	ldr	r2, [pc, #116]	; (800250c <MX_TIM5_Init+0xac>)
 8002498:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <MX_TIM5_Init+0xa4>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a0:	4b18      	ldr	r3, [pc, #96]	; (8002504 <MX_TIM5_Init+0xa4>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80024a6:	4817      	ldr	r0, [pc, #92]	; (8002504 <MX_TIM5_Init+0xa4>)
 80024a8:	f004 fc8f 	bl	8006dca <HAL_TIM_PWM_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80024b2:	f7ff fbe7 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024be:	f107 0320 	add.w	r3, r7, #32
 80024c2:	4619      	mov	r1, r3
 80024c4:	480f      	ldr	r0, [pc, #60]	; (8002504 <MX_TIM5_Init+0xa4>)
 80024c6:	f006 f897 	bl	80085f8 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80024d0:	f7ff fbd8 	bl	8001c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d4:	2360      	movs	r3, #96	; 0x60
 80024d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	2200      	movs	r2, #0
 80024e8:	4619      	mov	r1, r3
 80024ea:	4806      	ldr	r0, [pc, #24]	; (8002504 <MX_TIM5_Init+0xa4>)
 80024ec:	f005 f98c 	bl	8007808 <HAL_TIM_PWM_ConfigChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80024f6:	f7ff fbc5 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	3728      	adds	r7, #40	; 0x28
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200105dc 	.word	0x200105dc
 8002508:	40000c00 	.word	0x40000c00
 800250c:	000ea600 	.word	0x000ea600

08002510 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002516:	463b      	mov	r3, r7
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <MX_TIM9_Init+0x78>)
 8002524:	4a19      	ldr	r2, [pc, #100]	; (800258c <MX_TIM9_Init+0x7c>)
 8002526:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1499;
 8002528:	4b17      	ldr	r3, [pc, #92]	; (8002588 <MX_TIM9_Init+0x78>)
 800252a:	f240 52db 	movw	r2, #1499	; 0x5db
 800252e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002530:	4b15      	ldr	r3, [pc, #84]	; (8002588 <MX_TIM9_Init+0x78>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 63999;
 8002536:	4b14      	ldr	r3, [pc, #80]	; (8002588 <MX_TIM9_Init+0x78>)
 8002538:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800253c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <MX_TIM9_Init+0x78>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <MX_TIM9_Init+0x78>)
 8002546:	2200      	movs	r2, #0
 8002548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 800254a:	480f      	ldr	r0, [pc, #60]	; (8002588 <MX_TIM9_Init+0x78>)
 800254c:	f004 fda0 	bl	8007090 <HAL_TIM_IC_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8002556:	f7ff fb95 	bl	8001c84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800255a:	2300      	movs	r3, #0
 800255c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800255e:	2301      	movs	r3, #1
 8002560:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 8002566:	2302      	movs	r3, #2
 8002568:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800256a:	463b      	mov	r3, r7
 800256c:	2204      	movs	r2, #4
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <MX_TIM9_Init+0x78>)
 8002572:	f005 f8ad 	bl	80076d0 <HAL_TIM_IC_ConfigChannel>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 800257c:	f7ff fb82 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20010624 	.word	0x20010624
 800258c:	40014000 	.word	0x40014000

08002590 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <HAL_TIM_Base_MspInit+0x58>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d11d      	bne.n	80025de <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_TIM_Base_MspInit+0x5c>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a10      	ldr	r2, [pc, #64]	; (80025ec <HAL_TIM_Base_MspInit+0x5c>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <HAL_TIM_Base_MspInit+0x5c>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	2018      	movs	r0, #24
 80025c4:	f000 ff65 	bl	8003492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80025c8:	2018      	movs	r0, #24
 80025ca:	f000 ff7e 	bl	80034ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	201a      	movs	r0, #26
 80025d4:	f000 ff5d 	bl	8003492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80025d8:	201a      	movs	r0, #26
 80025da:	f000 ff76 	bl	80034ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40010000 	.word	0x40010000
 80025ec:	40023800 	.word	0x40023800

080025f0 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002610:	d133      	bne.n	800267a <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a1a      	ldr	r2, [pc, #104]	; (8002684 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b18      	ldr	r3, [pc, #96]	; (8002684 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a13      	ldr	r2, [pc, #76]	; (8002684 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800264a:	2307      	movs	r3, #7
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002652:	2301      	movs	r3, #1
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800265a:	2301      	movs	r3, #1
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	4808      	ldr	r0, [pc, #32]	; (8002688 <HAL_TIMEx_HallSensor_MspInit+0x98>)
 8002666:	f000 ff7b 	bl	8003560 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	201c      	movs	r0, #28
 8002670:	f000 ff0f 	bl	8003492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002674:	201c      	movs	r0, #28
 8002676:	f000 ff28 	bl	80034ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800267a:	bf00      	nop
 800267c:	3728      	adds	r7, #40	; 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a18      	ldr	r2, [pc, #96]	; (80026fc <HAL_TIM_PWM_MspInit+0x70>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10e      	bne.n	80026bc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <HAL_TIM_PWM_MspInit+0x74>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a16      	ldr	r2, [pc, #88]	; (8002700 <HAL_TIM_PWM_MspInit+0x74>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b14      	ldr	r3, [pc, #80]	; (8002700 <HAL_TIM_PWM_MspInit+0x74>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80026ba:	e01a      	b.n	80026f2 <HAL_TIM_PWM_MspInit+0x66>
  else if(tim_pwmHandle->Instance==TIM5)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a10      	ldr	r2, [pc, #64]	; (8002704 <HAL_TIM_PWM_MspInit+0x78>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d115      	bne.n	80026f2 <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <HAL_TIM_PWM_MspInit+0x74>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_TIM_PWM_MspInit+0x74>)
 80026d0:	f043 0308 	orr.w	r3, r3, #8
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_TIM_PWM_MspInit+0x74>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	2032      	movs	r0, #50	; 0x32
 80026e8:	f000 fed3 	bl	8003492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80026ec:	2032      	movs	r0, #50	; 0x32
 80026ee:	f000 feec 	bl	80034ca <HAL_NVIC_EnableIRQ>
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40000400 	.word	0x40000400
 8002700:	40023800 	.word	0x40023800
 8002704:	40000c00 	.word	0x40000c00

08002708 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08c      	sub	sp, #48	; 0x30
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a36      	ldr	r2, [pc, #216]	; (8002800 <HAL_TIM_IC_MspInit+0xf8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d12d      	bne.n	8002786 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	4b35      	ldr	r3, [pc, #212]	; (8002804 <HAL_TIM_IC_MspInit+0xfc>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a34      	ldr	r2, [pc, #208]	; (8002804 <HAL_TIM_IC_MspInit+0xfc>)
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b32      	ldr	r3, [pc, #200]	; (8002804 <HAL_TIM_IC_MspInit+0xfc>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	4b2e      	ldr	r3, [pc, #184]	; (8002804 <HAL_TIM_IC_MspInit+0xfc>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a2d      	ldr	r2, [pc, #180]	; (8002804 <HAL_TIM_IC_MspInit+0xfc>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_TIM_IC_MspInit+0xfc>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002770:	2300      	movs	r3, #0
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002774:	2302      	movs	r3, #2
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	4619      	mov	r1, r3
 800277e:	4822      	ldr	r0, [pc, #136]	; (8002808 <HAL_TIM_IC_MspInit+0x100>)
 8002780:	f000 feee 	bl	8003560 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002784:	e038      	b.n	80027f8 <HAL_TIM_IC_MspInit+0xf0>
  else if(tim_icHandle->Instance==TIM9)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a20      	ldr	r2, [pc, #128]	; (800280c <HAL_TIM_IC_MspInit+0x104>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d133      	bne.n	80027f8 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_TIM_IC_MspInit+0xfc>)
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	4a1a      	ldr	r2, [pc, #104]	; (8002804 <HAL_TIM_IC_MspInit+0xfc>)
 800279a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279e:	6453      	str	r3, [r2, #68]	; 0x44
 80027a0:	4b18      	ldr	r3, [pc, #96]	; (8002804 <HAL_TIM_IC_MspInit+0xfc>)
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <HAL_TIM_IC_MspInit+0xfc>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	4a13      	ldr	r2, [pc, #76]	; (8002804 <HAL_TIM_IC_MspInit+0xfc>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6313      	str	r3, [r2, #48]	; 0x30
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_TIM_IC_MspInit+0xfc>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027c8:	2308      	movs	r3, #8
 80027ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d0:	2301      	movs	r3, #1
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d4:	2300      	movs	r3, #0
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80027d8:	2303      	movs	r3, #3
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	f107 031c 	add.w	r3, r7, #28
 80027e0:	4619      	mov	r1, r3
 80027e2:	480b      	ldr	r0, [pc, #44]	; (8002810 <HAL_TIM_IC_MspInit+0x108>)
 80027e4:	f000 febc 	bl	8003560 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2100      	movs	r1, #0
 80027ec:	2018      	movs	r0, #24
 80027ee:	f000 fe50 	bl	8003492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80027f2:	2018      	movs	r0, #24
 80027f4:	f000 fe69 	bl	80034ca <HAL_NVIC_EnableIRQ>
}
 80027f8:	bf00      	nop
 80027fa:	3730      	adds	r7, #48	; 0x30
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40000800 	.word	0x40000800
 8002804:	40023800 	.word	0x40023800
 8002808:	40020400 	.word	0x40020400
 800280c:	40014000 	.word	0x40014000
 8002810:	40020000 	.word	0x40020000

08002814 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a22      	ldr	r2, [pc, #136]	; (80028bc <HAL_TIM_MspPostInit+0xa8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d13d      	bne.n	80028b2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_TIM_MspPostInit+0xac>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <HAL_TIM_MspPostInit+0xac>)
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <HAL_TIM_MspPostInit+0xac>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <HAL_TIM_MspPostInit+0xac>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <HAL_TIM_MspPostInit+0xac>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_TIM_MspPostInit+0xac>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800286e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287c:	2300      	movs	r3, #0
 800287e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002880:	2301      	movs	r3, #1
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	4619      	mov	r1, r3
 800288a:	480e      	ldr	r0, [pc, #56]	; (80028c4 <HAL_TIM_MspPostInit+0xb0>)
 800288c:	f000 fe68 	bl	8003560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002890:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	4806      	ldr	r0, [pc, #24]	; (80028c8 <HAL_TIM_MspPostInit+0xb4>)
 80028ae:	f000 fe57 	bl	8003560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028b2:	bf00      	nop
 80028b4:	3728      	adds	r7, #40	; 0x28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40010000 	.word	0x40010000
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020400 	.word	0x40020400
 80028c8:	40020000 	.word	0x40020000

080028cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002904 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028d0:	480d      	ldr	r0, [pc, #52]	; (8002908 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028d2:	490e      	ldr	r1, [pc, #56]	; (800290c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028d4:	4a0e      	ldr	r2, [pc, #56]	; (8002910 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d8:	e002      	b.n	80028e0 <LoopCopyDataInit>

080028da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028de:	3304      	adds	r3, #4

080028e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e4:	d3f9      	bcc.n	80028da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028e6:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028e8:	4c0b      	ldr	r4, [pc, #44]	; (8002918 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028ec:	e001      	b.n	80028f2 <LoopFillZerobss>

080028ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f0:	3204      	adds	r2, #4

080028f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f4:	d3fb      	bcc.n	80028ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028f6:	f7ff fbf3 	bl	80020e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028fa:	f006 fd15 	bl	8009328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028fe:	f7ff f937 	bl	8001b70 <main>
  bx  lr    
 8002902:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002904:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800290c:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8002910:	0800b4cc 	.word	0x0800b4cc
  ldr r2, =_sbss
 8002914:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8002918:	200107bc 	.word	0x200107bc

0800291c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800291c:	e7fe      	b.n	800291c <DMA1_Stream0_IRQHandler>
	...

08002920 <HAL_Init>:
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
 8002924:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <HAL_Init+0x40>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0d      	ldr	r2, [pc, #52]	; (8002960 <HAL_Init+0x40>)
 800292a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_Init+0x40>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <HAL_Init+0x40>)
 8002936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_Init+0x40>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a07      	ldr	r2, [pc, #28]	; (8002960 <HAL_Init+0x40>)
 8002942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	2003      	movs	r0, #3
 800294a:	f000 fd97 	bl	800347c <HAL_NVIC_SetPriorityGrouping>
 800294e:	200f      	movs	r0, #15
 8002950:	f000 f808 	bl	8002964 <HAL_InitTick>
 8002954:	f7ff f99c 	bl	8001c90 <HAL_MspInit>
 8002958:	2300      	movs	r3, #0
 800295a:	4618      	mov	r0, r3
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40023c00 	.word	0x40023c00

08002964 <HAL_InitTick>:
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_InitTick+0x54>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_InitTick+0x58>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4619      	mov	r1, r3
 8002976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800297a:	fbb3 f3f1 	udiv	r3, r3, r1
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fdaf 	bl	80034e6 <HAL_SYSTICK_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_InitTick+0x2e>
 800298e:	2301      	movs	r3, #1
 8002990:	e00e      	b.n	80029b0 <HAL_InitTick+0x4c>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b0f      	cmp	r3, #15
 8002996:	d80a      	bhi.n	80029ae <HAL_InitTick+0x4a>
 8002998:	2200      	movs	r2, #0
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	f000 fd77 	bl	8003492 <HAL_NVIC_SetPriority>
 80029a4:	4a06      	ldr	r2, [pc, #24]	; (80029c0 <HAL_InitTick+0x5c>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <HAL_InitTick+0x4c>
 80029ae:	2301      	movs	r3, #1
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000098 	.word	0x20000098
 80029bc:	200000a0 	.word	0x200000a0
 80029c0:	2000009c 	.word	0x2000009c

080029c4 <HAL_IncTick>:
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_IncTick+0x20>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_IncTick+0x24>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <HAL_IncTick+0x24>)
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	200000a0 	.word	0x200000a0
 80029e8:	2001066c 	.word	0x2001066c

080029ec <HAL_GetTick>:
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <HAL_GetTick+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	2001066c 	.word	0x2001066c

08002a04 <HAL_ADC_Init>:
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_Init+0x16>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e033      	b.n	8002a82 <HAL_ADC_Init+0x7e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_ADC_Init+0x32>
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe fd00 	bl	8001428 <HAL_ADC_MspInit>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d118      	bne.n	8002a74 <HAL_ADC_Init+0x70>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a4a:	f023 0302 	bic.w	r3, r3, #2
 8002a4e:	f043 0202 	orr.w	r2, r3, #2
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fb3a 	bl	80030d0 <ADC_Init>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	645a      	str	r2, [r3, #68]	; 0x44
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f023 0303 	bic.w	r3, r3, #3
 8002a6a:	f043 0201 	orr.w	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40
 8002a72:	e001      	b.n	8002a78 <HAL_ADC_Init+0x74>
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_ADC_Start_IT>:
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_Start_IT+0x1a>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e0a1      	b.n	8002bea <HAL_ADC_Start_IT+0x15e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d018      	beq.n	8002aee <HAL_ADC_Start_IT+0x62>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <HAL_ADC_Start_IT+0x16c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a4a      	ldr	r2, [pc, #296]	; (8002bfc <HAL_ADC_Start_IT+0x170>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0c9a      	lsrs	r2, r3, #18
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	e002      	b.n	8002ae8 <HAL_ADC_Start_IT+0x5c>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f9      	bne.n	8002ae2 <HAL_ADC_Start_IT+0x56>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d169      	bne.n	8002bd0 <HAL_ADC_Start_IT+0x144>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <HAL_ADC_Start_IT+0xa2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b3a:	d106      	bne.n	8002b4a <HAL_ADC_Start_IT+0xbe>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	f023 0206 	bic.w	r2, r3, #6
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	645a      	str	r2, [r3, #68]	; 0x44
 8002b48:	e002      	b.n	8002b50 <HAL_ADC_Start_IT+0xc4>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b58:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <HAL_ADC_Start_IT+0x174>)
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b74:	f043 0320 	orr.w	r3, r3, #32
 8002b78:	6053      	str	r3, [r2, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10f      	bne.n	8002ba6 <HAL_ADC_Start_IT+0x11a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d129      	bne.n	8002be8 <HAL_ADC_Start_IT+0x15c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	e020      	b.n	8002be8 <HAL_ADC_Start_IT+0x15c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <HAL_ADC_Start_IT+0x178>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d11b      	bne.n	8002be8 <HAL_ADC_Start_IT+0x15c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d114      	bne.n	8002be8 <HAL_ADC_Start_IT+0x15c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	e00b      	b.n	8002be8 <HAL_ADC_Start_IT+0x15c>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f043 0210 	orr.w	r2, r3, #16
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	645a      	str	r2, [r3, #68]	; 0x44
 8002be8:	2300      	movs	r3, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000098 	.word	0x20000098
 8002bfc:	431bde83 	.word	0x431bde83
 8002c00:	40012300 	.word	0x40012300
 8002c04:	40012000 	.word	0x40012000

08002c08 <HAL_ADC_IRQHandler>:
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	2300      	movs	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d049      	beq.n	8002cd2 <HAL_ADC_IRQHandler+0xca>
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d046      	beq.n	8002cd2 <HAL_ADC_IRQHandler+0xca>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d105      	bne.n	8002c5c <HAL_ADC_IRQHandler+0x54>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d12b      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0xba>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	7e1b      	ldrb	r3, [r3, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d127      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0xba>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <HAL_ADC_IRQHandler+0x86>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d119      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0xba>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0220 	bic.w	r2, r2, #32
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0xba>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe fbfc 	bl	80014c0 <HAL_ADC_ConvCpltCallback>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0212 	mvn.w	r2, #18
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d057      	beq.n	8002d98 <HAL_ADC_IRQHandler+0x190>
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d054      	beq.n	8002d98 <HAL_ADC_IRQHandler+0x190>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_ADC_IRQHandler+0xfe>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d139      	bne.n	8002d88 <HAL_ADC_IRQHandler+0x180>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_ADC_IRQHandler+0x128>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d12b      	bne.n	8002d88 <HAL_ADC_IRQHandler+0x180>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d124      	bne.n	8002d88 <HAL_ADC_IRQHandler+0x180>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d11d      	bne.n	8002d88 <HAL_ADC_IRQHandler+0x180>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7e1b      	ldrb	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d119      	bne.n	8002d88 <HAL_ADC_IRQHandler+0x180>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <HAL_ADC_IRQHandler+0x180>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fa9d 	bl	80032c8 <HAL_ADCEx_InjectedConvCpltCallback>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f06f 020c 	mvn.w	r2, #12
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d017      	beq.n	8002dde <HAL_ADC_IRQHandler+0x1d6>
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d014      	beq.n	8002dde <HAL_ADC_IRQHandler+0x1d6>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d10d      	bne.n	8002dde <HAL_ADC_IRQHandler+0x1d6>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f837 	bl	8002e42 <HAL_ADC_LevelOutOfWindowCallback>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0201 	mvn.w	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d015      	beq.n	8002e20 <HAL_ADC_IRQHandler+0x218>
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d012      	beq.n	8002e20 <HAL_ADC_IRQHandler+0x218>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f043 0202 	orr.w	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f06f 0220 	mvn.w	r2, #32
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f820 	bl	8002e56 <HAL_ADC_ErrorCallback>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f06f 0220 	mvn.w	r2, #32
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	bf00      	nop
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_ADC_GetValue>:
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_ADC_LevelOutOfWindowCallback>:
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_ADC_ErrorCallback>:
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_ADC_ConfigChannel>:
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x1c>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e113      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x244>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b09      	cmp	r3, #9
 8002e96:	d925      	bls.n	8002ee4 <HAL_ADC_ConfigChannel+0x78>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68d9      	ldr	r1, [r3, #12]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b1e      	subs	r3, #30
 8002eae:	2207      	movs	r2, #7
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43da      	mvns	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	400a      	ands	r2, r1
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68d9      	ldr	r1, [r3, #12]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	4618      	mov	r0, r3
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4403      	add	r3, r0
 8002ed6:	3b1e      	subs	r3, #30
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	e022      	b.n	8002f2a <HAL_ADC_ConfigChannel+0xbe>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6919      	ldr	r1, [r3, #16]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	2207      	movs	r2, #7
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	400a      	ands	r2, r1
 8002f06:	611a      	str	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6919      	ldr	r1, [r3, #16]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	4618      	mov	r0, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4403      	add	r3, r0
 8002f20:	409a      	lsls	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	611a      	str	r2, [r3, #16]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d824      	bhi.n	8002f7c <HAL_ADC_ConfigChannel+0x110>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	3b05      	subs	r3, #5
 8002f44:	221f      	movs	r2, #31
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	400a      	ands	r2, r1
 8002f52:	635a      	str	r2, [r3, #52]	; 0x34
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	4618      	mov	r0, r3
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b05      	subs	r3, #5
 8002f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	635a      	str	r2, [r3, #52]	; 0x34
 8002f7a:	e04c      	b.n	8003016 <HAL_ADC_ConfigChannel+0x1aa>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d824      	bhi.n	8002fce <HAL_ADC_ConfigChannel+0x162>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	3b23      	subs	r3, #35	; 0x23
 8002f96:	221f      	movs	r2, #31
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3b23      	subs	r3, #35	; 0x23
 8002fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
 8002fcc:	e023      	b.n	8003016 <HAL_ADC_ConfigChannel+0x1aa>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	3b41      	subs	r3, #65	; 0x41
 8002fe0:	221f      	movs	r2, #31
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	400a      	ands	r2, r1
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	3b41      	subs	r3, #65	; 0x41
 800300a:	fa00 f203 	lsl.w	r2, r0, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	62da      	str	r2, [r3, #44]	; 0x2c
 8003016:	4b29      	ldr	r3, [pc, #164]	; (80030bc <HAL_ADC_ConfigChannel+0x250>)
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a28      	ldr	r2, [pc, #160]	; (80030c0 <HAL_ADC_ConfigChannel+0x254>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10f      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x1d8>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b12      	cmp	r3, #18
 800302a:	d10b      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x1d8>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	605a      	str	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1d      	ldr	r2, [pc, #116]	; (80030c0 <HAL_ADC_ConfigChannel+0x254>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d12b      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x23a>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <HAL_ADC_ConfigChannel+0x258>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d003      	beq.n	8003060 <HAL_ADC_ConfigChannel+0x1f4>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b11      	cmp	r3, #17
 800305e:	d122      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x23a>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	605a      	str	r2, [r3, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <HAL_ADC_ConfigChannel+0x258>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d111      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x23a>
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <HAL_ADC_ConfigChannel+0x25c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a11      	ldr	r2, [pc, #68]	; (80030cc <HAL_ADC_ConfigChannel+0x260>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	0c9a      	lsrs	r2, r3, #18
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	e002      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x234>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	3b01      	subs	r3, #1
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f9      	bne.n	800309a <HAL_ADC_ConfigChannel+0x22e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80030ae:	2300      	movs	r3, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40012300 	.word	0x40012300
 80030c0:	40012000 	.word	0x40012000
 80030c4:	10000012 	.word	0x10000012
 80030c8:	20000098 	.word	0x20000098
 80030cc:	431bde83 	.word	0x431bde83

080030d0 <ADC_Init>:
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	4b79      	ldr	r3, [pc, #484]	; (80032c0 <ADC_Init+0x1f0>)
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	021a      	lsls	r2, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6899      	ldr	r1, [r3, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	4a58      	ldr	r2, [pc, #352]	; (80032c4 <ADC_Init+0x1f4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d022      	beq.n	80031ae <ADC_Init+0xde>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6899      	ldr	r1, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6899      	ldr	r1, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	e00f      	b.n	80031ce <ADC_Init+0xfe>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031cc:	609a      	str	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0202 	bic.w	r2, r2, #2
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6899      	ldr	r1, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7e1b      	ldrb	r3, [r3, #24]
 80031e8:	005a      	lsls	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01b      	beq.n	8003234 <ADC_Init+0x164>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	3b01      	subs	r3, #1
 8003228:	035a      	lsls	r2, r3, #13
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	e007      	b.n	8003244 <ADC_Init+0x174>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003242:	605a      	str	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	3b01      	subs	r3, #1
 8003260:	051a      	lsls	r2, r3, #20
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	62da      	str	r2, [r3, #44]	; 0x2c
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6899      	ldr	r1, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003286:	025a      	lsls	r2, r3, #9
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	029a      	lsls	r2, r3, #10
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	40012300 	.word	0x40012300
 80032c4:	0f000001 	.word	0x0f000001

080032c8 <HAL_ADCEx_InjectedConvCpltCallback>:
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <__NVIC_SetPriorityGrouping>:
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <__NVIC_SetPriorityGrouping+0x44>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032f8:	4013      	ands	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	021a      	lsls	r2, r3, #8
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4313      	orrs	r3, r2
 8003304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	4a04      	ldr	r2, [pc, #16]	; (8003320 <__NVIC_SetPriorityGrouping+0x44>)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	60d3      	str	r3, [r2, #12]
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <__NVIC_GetPriorityGrouping>:
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <__NVIC_GetPriorityGrouping+0x18>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	4618      	mov	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <__NVIC_EnableIRQ>:
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	2b00      	cmp	r3, #0
 8003350:	db0b      	blt.n	800336a <__NVIC_EnableIRQ+0x2a>
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	f003 021f 	and.w	r2, r3, #31
 8003358:	4907      	ldr	r1, [pc, #28]	; (8003378 <__NVIC_EnableIRQ+0x38>)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	2001      	movs	r0, #1
 8003362:	fa00 f202 	lsl.w	r2, r0, r2
 8003366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	e000e100 	.word	0xe000e100

0800337c <__NVIC_SetPriority>:
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	6039      	str	r1, [r7, #0]
 8003386:	71fb      	strb	r3, [r7, #7]
 8003388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338c:	2b00      	cmp	r3, #0
 800338e:	db0a      	blt.n	80033a6 <__NVIC_SetPriority+0x2a>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	490c      	ldr	r1, [pc, #48]	; (80033c8 <__NVIC_SetPriority+0x4c>)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	0112      	lsls	r2, r2, #4
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	440b      	add	r3, r1
 80033a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80033a4:	e00a      	b.n	80033bc <__NVIC_SetPriority+0x40>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	4908      	ldr	r1, [pc, #32]	; (80033cc <__NVIC_SetPriority+0x50>)
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	3b04      	subs	r3, #4
 80033b4:	0112      	lsls	r2, r2, #4
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	440b      	add	r3, r1
 80033ba:	761a      	strb	r2, [r3, #24]
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000e100 	.word	0xe000e100
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <NVIC_EncodePriority>:
 80033d0:	b480      	push	{r7}
 80033d2:	b089      	sub	sp, #36	; 0x24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f1c3 0307 	rsb	r3, r3, #7
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	bf28      	it	cs
 80033ee:	2304      	movcs	r3, #4
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3304      	adds	r3, #4
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d902      	bls.n	8003400 <NVIC_EncodePriority+0x30>
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3b03      	subs	r3, #3
 80033fe:	e000      	b.n	8003402 <NVIC_EncodePriority+0x32>
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	f04f 32ff 	mov.w	r2, #4294967295
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43da      	mvns	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	401a      	ands	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	409a      	lsls	r2, r3
 8003418:	f04f 31ff 	mov.w	r1, #4294967295
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fa01 f303 	lsl.w	r3, r1, r3
 8003422:	43d9      	mvns	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	400b      	ands	r3, r1
 8003428:	4313      	orrs	r3, r2
 800342a:	4618      	mov	r0, r3
 800342c:	3724      	adds	r7, #36	; 0x24
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <SysTick_Config>:
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003448:	d301      	bcc.n	800344e <SysTick_Config+0x16>
 800344a:	2301      	movs	r3, #1
 800344c:	e00f      	b.n	800346e <SysTick_Config+0x36>
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <SysTick_Config+0x40>)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	6053      	str	r3, [r2, #4]
 8003456:	210f      	movs	r1, #15
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	f7ff ff8e 	bl	800337c <__NVIC_SetPriority>
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <SysTick_Config+0x40>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	4b04      	ldr	r3, [pc, #16]	; (8003478 <SysTick_Config+0x40>)
 8003468:	2207      	movs	r2, #7
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	2300      	movs	r3, #0
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	e000e010 	.word	0xe000e010

0800347c <HAL_NVIC_SetPriorityGrouping>:
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ff29 	bl	80032dc <__NVIC_SetPriorityGrouping>
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_SetPriority>:
 8003492:	b580      	push	{r7, lr}
 8003494:	b086      	sub	sp, #24
 8003496:	af00      	add	r7, sp, #0
 8003498:	4603      	mov	r3, r0
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	f7ff ff3e 	bl	8003324 <__NVIC_GetPriorityGrouping>
 80034a8:	6178      	str	r0, [r7, #20]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	6978      	ldr	r0, [r7, #20]
 80034b0:	f7ff ff8e 	bl	80033d0 <NVIC_EncodePriority>
 80034b4:	4602      	mov	r2, r0
 80034b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff5d 	bl	800337c <__NVIC_SetPriority>
 80034c2:	bf00      	nop
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_EnableIRQ>:
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	71fb      	strb	r3, [r7, #7]
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff31 	bl	8003340 <__NVIC_EnableIRQ>
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_SYSTICK_Config>:
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff ffa2 	bl	8003438 <SysTick_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_DMA_Abort_IT>:
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d004      	beq.n	800351c <HAL_DMA_Abort_IT+0x1e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2280      	movs	r2, #128	; 0x80
 8003516:	655a      	str	r2, [r3, #84]	; 0x54
 8003518:	2301      	movs	r3, #1
 800351a:	e00c      	b.n	8003536 <HAL_DMA_Abort_IT+0x38>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2205      	movs	r2, #5
 8003520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_DMA_GetState>:
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003550:	b2db      	uxtb	r3, r3
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <HAL_GPIO_Init>:
 8003560:	b480      	push	{r7}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	e159      	b.n	8003830 <HAL_GPIO_Init+0x2d0>
 800357c:	2201      	movs	r2, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	429a      	cmp	r2, r3
 8003596:	f040 8148 	bne.w	800382a <HAL_GPIO_Init+0x2ca>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d005      	beq.n	80035b2 <HAL_GPIO_Init+0x52>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d130      	bne.n	8003614 <HAL_GPIO_Init+0xb4>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	61bb      	str	r3, [r7, #24]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	2203      	movs	r2, #3
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	609a      	str	r2, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	2201      	movs	r2, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 0201 	and.w	r2, r3, #1
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	605a      	str	r2, [r3, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b03      	cmp	r3, #3
 800361e:	d017      	beq.n	8003650 <HAL_GPIO_Init+0xf0>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	2203      	movs	r2, #3
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	60da      	str	r2, [r3, #12]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d123      	bne.n	80036a4 <HAL_GPIO_Init+0x144>
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	08da      	lsrs	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3208      	adds	r2, #8
 8003664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	220f      	movs	r2, #15
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	08da      	lsrs	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3208      	adds	r2, #8
 800369e:	69b9      	ldr	r1, [r7, #24]
 80036a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	2203      	movs	r2, #3
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0203 	and.w	r2, r3, #3
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80a2 	beq.w	800382a <HAL_GPIO_Init+0x2ca>
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	4b57      	ldr	r3, [pc, #348]	; (8003848 <HAL_GPIO_Init+0x2e8>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	4a56      	ldr	r2, [pc, #344]	; (8003848 <HAL_GPIO_Init+0x2e8>)
 80036f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f4:	6453      	str	r3, [r2, #68]	; 0x44
 80036f6:	4b54      	ldr	r3, [pc, #336]	; (8003848 <HAL_GPIO_Init+0x2e8>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a52      	ldr	r2, [pc, #328]	; (800384c <HAL_GPIO_Init+0x2ec>)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	089b      	lsrs	r3, r3, #2
 8003708:	3302      	adds	r3, #2
 800370a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	220f      	movs	r2, #15
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a49      	ldr	r2, [pc, #292]	; (8003850 <HAL_GPIO_Init+0x2f0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d019      	beq.n	8003762 <HAL_GPIO_Init+0x202>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a48      	ldr	r2, [pc, #288]	; (8003854 <HAL_GPIO_Init+0x2f4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <HAL_GPIO_Init+0x1fe>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a47      	ldr	r2, [pc, #284]	; (8003858 <HAL_GPIO_Init+0x2f8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00d      	beq.n	800375a <HAL_GPIO_Init+0x1fa>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a46      	ldr	r2, [pc, #280]	; (800385c <HAL_GPIO_Init+0x2fc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <HAL_GPIO_Init+0x1f6>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a45      	ldr	r2, [pc, #276]	; (8003860 <HAL_GPIO_Init+0x300>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d101      	bne.n	8003752 <HAL_GPIO_Init+0x1f2>
 800374e:	2304      	movs	r3, #4
 8003750:	e008      	b.n	8003764 <HAL_GPIO_Init+0x204>
 8003752:	2307      	movs	r3, #7
 8003754:	e006      	b.n	8003764 <HAL_GPIO_Init+0x204>
 8003756:	2303      	movs	r3, #3
 8003758:	e004      	b.n	8003764 <HAL_GPIO_Init+0x204>
 800375a:	2302      	movs	r3, #2
 800375c:	e002      	b.n	8003764 <HAL_GPIO_Init+0x204>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <HAL_GPIO_Init+0x204>
 8003762:	2300      	movs	r3, #0
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	f002 0203 	and.w	r2, r2, #3
 800376a:	0092      	lsls	r2, r2, #2
 800376c:	4093      	lsls	r3, r2
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	4935      	ldr	r1, [pc, #212]	; (800384c <HAL_GPIO_Init+0x2ec>)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	089b      	lsrs	r3, r3, #2
 800377a:	3302      	adds	r3, #2
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003782:	4b38      	ldr	r3, [pc, #224]	; (8003864 <HAL_GPIO_Init+0x304>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	43db      	mvns	r3, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4013      	ands	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_Init+0x246>
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	4a2f      	ldr	r2, [pc, #188]	; (8003864 <HAL_GPIO_Init+0x304>)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	6093      	str	r3, [r2, #8]
 80037ac:	4b2d      	ldr	r3, [pc, #180]	; (8003864 <HAL_GPIO_Init+0x304>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x270>
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
 80037d0:	4a24      	ldr	r2, [pc, #144]	; (8003864 <HAL_GPIO_Init+0x304>)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	60d3      	str	r3, [r2, #12]
 80037d6:	4b23      	ldr	r3, [pc, #140]	; (8003864 <HAL_GPIO_Init+0x304>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x29a>
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <HAL_GPIO_Init+0x304>)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	6053      	str	r3, [r2, #4]
 8003800:	4b18      	ldr	r3, [pc, #96]	; (8003864 <HAL_GPIO_Init+0x304>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_GPIO_Init+0x2c4>
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	4a0f      	ldr	r2, [pc, #60]	; (8003864 <HAL_GPIO_Init+0x304>)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	3301      	adds	r3, #1
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b0f      	cmp	r3, #15
 8003834:	f67f aea2 	bls.w	800357c <HAL_GPIO_Init+0x1c>
 8003838:	bf00      	nop
 800383a:	bf00      	nop
 800383c:	3724      	adds	r7, #36	; 0x24
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800
 800384c:	40013800 	.word	0x40013800
 8003850:	40020000 	.word	0x40020000
 8003854:	40020400 	.word	0x40020400
 8003858:	40020800 	.word	0x40020800
 800385c:	40020c00 	.word	0x40020c00
 8003860:	40021000 	.word	0x40021000
 8003864:	40013c00 	.word	0x40013c00

08003868 <HAL_GPIO_WritePin>:
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	807b      	strh	r3, [r7, #2]
 8003874:	4613      	mov	r3, r2
 8003876:	707b      	strb	r3, [r7, #1]
 8003878:	787b      	ldrb	r3, [r7, #1]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_WritePin+0x1e>
 800387e:	887a      	ldrh	r2, [r7, #2]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	619a      	str	r2, [r3, #24]
 8003884:	e003      	b.n	800388e <HAL_GPIO_WritePin+0x26>
 8003886:	887b      	ldrh	r3, [r7, #2]
 8003888:	041a      	lsls	r2, r3, #16
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	619a      	str	r2, [r3, #24]
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <HAL_GPIO_EXTI_IRQHandler>:
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	80fb      	strh	r3, [r7, #6]
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d006      	beq.n	80038c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80038b2:	4a05      	ldr	r2, [pc, #20]	; (80038c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	6153      	str	r3, [r2, #20]
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f806 	bl	80038cc <HAL_GPIO_EXTI_Callback>
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40013c00 	.word	0x40013c00

080038cc <HAL_GPIO_EXTI_Callback>:
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	80fb      	strh	r3, [r7, #6]
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_I2C_Init>:
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_I2C_Init+0x12>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e12b      	b.n	8003b4e <HAL_I2C_Init+0x26a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_I2C_Init+0x2c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fd ff72 	bl	80017f4 <HAL_I2C_MspInit>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2224      	movs	r2, #36	; 0x24
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f003 f936 	bl	8006bb8 <HAL_RCC_GetPCLK1Freq>
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4a81      	ldr	r2, [pc, #516]	; (8003b58 <HAL_I2C_Init+0x274>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d807      	bhi.n	8003968 <HAL_I2C_Init+0x84>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4a80      	ldr	r2, [pc, #512]	; (8003b5c <HAL_I2C_Init+0x278>)
 800395c:	4293      	cmp	r3, r2
 800395e:	bf94      	ite	ls
 8003960:	2301      	movls	r3, #1
 8003962:	2300      	movhi	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	e006      	b.n	8003976 <HAL_I2C_Init+0x92>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a7d      	ldr	r2, [pc, #500]	; (8003b60 <HAL_I2C_Init+0x27c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	bf94      	ite	ls
 8003970:	2301      	movls	r3, #1
 8003972:	2300      	movhi	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_I2C_Init+0x9a>
 800397a:	2301      	movs	r3, #1
 800397c:	e0e7      	b.n	8003b4e <HAL_I2C_Init+0x26a>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4a78      	ldr	r2, [pc, #480]	; (8003b64 <HAL_I2C_Init+0x280>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	0c9b      	lsrs	r3, r3, #18
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4a6a      	ldr	r2, [pc, #424]	; (8003b58 <HAL_I2C_Init+0x274>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d802      	bhi.n	80039b8 <HAL_I2C_Init+0xd4>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	3301      	adds	r3, #1
 80039b6:	e009      	b.n	80039cc <HAL_I2C_Init+0xe8>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	4a69      	ldr	r2, [pc, #420]	; (8003b68 <HAL_I2C_Init+0x284>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	099b      	lsrs	r3, r3, #6
 80039ca:	3301      	adds	r3, #1
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	430b      	orrs	r3, r1
 80039d2:	6213      	str	r3, [r2, #32]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	495c      	ldr	r1, [pc, #368]	; (8003b58 <HAL_I2C_Init+0x274>)
 80039e8:	428b      	cmp	r3, r1
 80039ea:	d819      	bhi.n	8003a20 <HAL_I2C_Init+0x13c>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1e59      	subs	r1, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fa:	1c59      	adds	r1, r3, #1
 80039fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a00:	400b      	ands	r3, r1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_I2C_Init+0x138>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1e59      	subs	r1, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a14:	3301      	adds	r3, #1
 8003a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1a:	e051      	b.n	8003ac0 <HAL_I2C_Init+0x1dc>
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	e04f      	b.n	8003ac0 <HAL_I2C_Init+0x1dc>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d111      	bne.n	8003a4c <HAL_I2C_Init+0x168>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1e58      	subs	r0, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	440b      	add	r3, r1
 8003a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	e012      	b.n	8003a72 <HAL_I2C_Init+0x18e>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1e58      	subs	r0, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6859      	ldr	r1, [r3, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	0099      	lsls	r1, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a62:	3301      	adds	r3, #1
 8003a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2301      	moveq	r3, #1
 8003a6e:	2300      	movne	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_I2C_Init+0x196>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e022      	b.n	8003ac0 <HAL_I2C_Init+0x1dc>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10e      	bne.n	8003aa0 <HAL_I2C_Init+0x1bc>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1e58      	subs	r0, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6859      	ldr	r1, [r3, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	440b      	add	r3, r1
 8003a90:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a94:	3301      	adds	r3, #1
 8003a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a9e:	e00f      	b.n	8003ac0 <HAL_I2C_Init+0x1dc>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1e58      	subs	r0, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	0099      	lsls	r1, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	6809      	ldr	r1, [r1, #0]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61cb      	str	r3, [r1, #28]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003aee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6911      	ldr	r1, [r2, #16]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68d2      	ldr	r2, [r2, #12]
 8003afa:	4311      	orrs	r1, r2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	430b      	orrs	r3, r1
 8003b02:	6093      	str	r3, [r2, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	60da      	str	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	000186a0 	.word	0x000186a0
 8003b5c:	001e847f 	.word	0x001e847f
 8003b60:	003d08ff 	.word	0x003d08ff
 8003b64:	431bde83 	.word	0x431bde83
 8003b68:	10624dd3 	.word	0x10624dd3

08003b6c <HAL_I2C_Master_Transmit>:
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	461a      	mov	r2, r3
 8003b78:	460b      	mov	r3, r1
 8003b7a:	817b      	strh	r3, [r7, #10]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	813b      	strh	r3, [r7, #8]
 8003b80:	f7fe ff34 	bl	80029ec <HAL_GetTick>
 8003b84:	6178      	str	r0, [r7, #20]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	f040 80e0 	bne.w	8003d54 <HAL_I2C_Master_Transmit+0x1e8>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	2319      	movs	r3, #25
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	4970      	ldr	r1, [pc, #448]	; (8003d60 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f002 f9b0 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Master_Transmit+0x42>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e0d3      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1ea>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_I2C_Master_Transmit+0x50>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e0cc      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1ea>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d007      	beq.n	8003be2 <HAL_I2C_Master_Transmit+0x76>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2221      	movs	r2, #33	; 0x21
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	893a      	ldrh	r2, [r7, #8]
 8003c12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a50      	ldr	r2, [pc, #320]	; (8003d64 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c24:	8979      	ldrh	r1, [r7, #10]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	6a3a      	ldr	r2, [r7, #32]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f001 ff72 	bl	8005b14 <I2C_MasterRequestWrite>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_I2C_Master_Transmit+0xce>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e08d      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1ea>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	e066      	b.n	8003d20 <HAL_I2C_Master_Transmit+0x1b4>
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	6a39      	ldr	r1, [r7, #32]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f002 fa2a 	bl	80060b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00d      	beq.n	8003c7e <HAL_I2C_Master_Transmit+0x112>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d107      	bne.n	8003c7a <HAL_I2C_Master_Transmit+0x10e>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e06b      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1ea>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	781a      	ldrb	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	611a      	str	r2, [r3, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	625a      	str	r2, [r3, #36]	; 0x24
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	; 0x28
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d11b      	bne.n	8003cf4 <HAL_I2C_Master_Transmit+0x188>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d017      	beq.n	8003cf4 <HAL_I2C_Master_Transmit+0x188>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	781a      	ldrb	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	611a      	str	r2, [r3, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	625a      	str	r2, [r3, #36]	; 0x24
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	; 0x28
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	6a39      	ldr	r1, [r7, #32]
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f002 fa1a 	bl	8006132 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00d      	beq.n	8003d20 <HAL_I2C_Master_Transmit+0x1b4>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d107      	bne.n	8003d1c <HAL_I2C_Master_Transmit+0x1b0>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e01a      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1ea>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d194      	bne.n	8003c52 <HAL_I2C_Master_Transmit+0xe6>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d50:	2300      	movs	r3, #0
 8003d52:	e000      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1ea>
 8003d54:	2302      	movs	r3, #2
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	00100002 	.word	0x00100002
 8003d64:	ffff0000 	.word	0xffff0000

08003d68 <HAL_I2C_Master_Receive>:
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08c      	sub	sp, #48	; 0x30
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	461a      	mov	r2, r3
 8003d74:	460b      	mov	r3, r1
 8003d76:	817b      	strh	r3, [r7, #10]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	813b      	strh	r3, [r7, #8]
 8003d7c:	f7fe fe36 	bl	80029ec <HAL_GetTick>
 8003d80:	6278      	str	r0, [r7, #36]	; 0x24
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	f040 820b 	bne.w	80041a6 <HAL_I2C_Master_Receive+0x43e>
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	2319      	movs	r3, #25
 8003d96:	2201      	movs	r2, #1
 8003d98:	497c      	ldr	r1, [pc, #496]	; (8003f8c <HAL_I2C_Master_Receive+0x224>)
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f002 f8b2 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_Master_Receive+0x42>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e1fe      	b.n	80041a8 <HAL_I2C_Master_Receive+0x440>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_I2C_Master_Receive+0x50>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e1f7      	b.n	80041a8 <HAL_I2C_Master_Receive+0x440>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d007      	beq.n	8003dde <HAL_I2C_Master_Receive+0x76>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0201 	orr.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2222      	movs	r2, #34	; 0x22
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2210      	movs	r2, #16
 8003dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	625a      	str	r2, [r3, #36]	; 0x24
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	893a      	ldrh	r2, [r7, #8]
 8003e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	851a      	strh	r2, [r3, #40]	; 0x28
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4a5c      	ldr	r2, [pc, #368]	; (8003f90 <HAL_I2C_Master_Receive+0x228>)
 8003e1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e20:	8979      	ldrh	r1, [r7, #10]
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f001 fef6 	bl	8005c18 <I2C_MasterRequestRead>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_I2C_Master_Receive+0xce>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e1b8      	b.n	80041a8 <HAL_I2C_Master_Receive+0x440>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d113      	bne.n	8003e66 <HAL_I2C_Master_Receive+0xfe>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	623b      	str	r3, [r7, #32]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	623b      	str	r3, [r7, #32]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	623b      	str	r3, [r7, #32]
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e18c      	b.n	8004180 <HAL_I2C_Master_Receive+0x418>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d11b      	bne.n	8003ea6 <HAL_I2C_Master_Receive+0x13e>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	e16c      	b.n	8004180 <HAL_I2C_Master_Receive+0x418>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d11b      	bne.n	8003ee6 <HAL_I2C_Master_Receive+0x17e>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	e14c      	b.n	8004180 <HAL_I2C_Master_Receive+0x418>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	e138      	b.n	8004180 <HAL_I2C_Master_Receive+0x418>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	f200 80f1 	bhi.w	80040fa <HAL_I2C_Master_Receive+0x392>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d123      	bne.n	8003f68 <HAL_I2C_Master_Receive+0x200>
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f002 f977 	bl	8006218 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_I2C_Master_Receive+0x1cc>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e139      	b.n	80041a8 <HAL_I2C_Master_Receive+0x440>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	625a      	str	r2, [r3, #36]	; 0x24
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	851a      	strh	r2, [r3, #40]	; 0x28
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f66:	e10b      	b.n	8004180 <HAL_I2C_Master_Receive+0x418>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d14e      	bne.n	800400e <HAL_I2C_Master_Receive+0x2a6>
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	2200      	movs	r2, #0
 8003f78:	4906      	ldr	r1, [pc, #24]	; (8003f94 <HAL_I2C_Master_Receive+0x22c>)
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f001 ffc2 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_I2C_Master_Receive+0x230>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e10e      	b.n	80041a8 <HAL_I2C_Master_Receive+0x440>
 8003f8a:	bf00      	nop
 8003f8c:	00100002 	.word	0x00100002
 8003f90:	ffff0000 	.word	0xffff0000
 8003f94:	00010004 	.word	0x00010004
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	851a      	strh	r2, [r3, #40]	; 0x28
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	; 0x28
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800400c:	e0b8      	b.n	8004180 <HAL_I2C_Master_Receive+0x418>
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	2200      	movs	r2, #0
 8004016:	4966      	ldr	r1, [pc, #408]	; (80041b0 <HAL_I2C_Master_Receive+0x448>)
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f001 ff73 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <HAL_I2C_Master_Receive+0x2c0>
 8004024:	2301      	movs	r3, #1
 8004026:	e0bf      	b.n	80041a8 <HAL_I2C_Master_Receive+0x440>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	625a      	str	r2, [r3, #36]	; 0x24
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	851a      	strh	r2, [r3, #40]	; 0x28
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	855a      	strh	r2, [r3, #42]	; 0x2a
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	2200      	movs	r2, #0
 8004072:	494f      	ldr	r1, [pc, #316]	; (80041b0 <HAL_I2C_Master_Receive+0x448>)
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f001 ff45 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_I2C_Master_Receive+0x31c>
 8004080:	2301      	movs	r3, #1
 8004082:	e091      	b.n	80041a8 <HAL_I2C_Master_Receive+0x440>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	701a      	strb	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	851a      	strh	r2, [r3, #40]	; 0x28
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040f8:	e042      	b.n	8004180 <HAL_I2C_Master_Receive+0x418>
 80040fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f002 f88a 	bl	8006218 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_Master_Receive+0x3a6>
 800410a:	2301      	movs	r3, #1
 800410c:	e04c      	b.n	80041a8 <HAL_I2C_Master_Receive+0x440>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	625a      	str	r2, [r3, #36]	; 0x24
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	851a      	strh	r2, [r3, #40]	; 0x28
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b04      	cmp	r3, #4
 800414c:	d118      	bne.n	8004180 <HAL_I2C_Master_Receive+0x418>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	625a      	str	r2, [r3, #36]	; 0x24
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	; 0x28
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	f47f aec2 	bne.w	8003f0e <HAL_I2C_Master_Receive+0x1a6>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <HAL_I2C_Master_Receive+0x440>
 80041a6:	2302      	movs	r3, #2
 80041a8:	4618      	mov	r0, r3
 80041aa:	3728      	adds	r7, #40	; 0x28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	00010004 	.word	0x00010004

080041b4 <HAL_I2C_Slave_Seq_Transmit_IT>:
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	80fb      	strh	r3, [r7, #6]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041d0:	2b28      	cmp	r3, #40	; 0x28
 80041d2:	d15b      	bne.n	800428c <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e054      	b.n	800428e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e04d      	b.n	800428e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d007      	beq.n	8004218 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2229      	movs	r2, #41	; 0x29
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	641a      	str	r2, [r3, #64]	; 0x40
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	625a      	str	r2, [r3, #36]	; 0x24
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	855a      	strh	r2, [r3, #42]	; 0x2a
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	; 0x28
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	62da      	str	r2, [r3, #44]	; 0x2c
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004286:	605a      	str	r2, [r3, #4]
 8004288:	2300      	movs	r3, #0
 800428a:	e000      	b.n	800428e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800428c:	2302      	movs	r3, #2
 800428e:	4618      	mov	r0, r3
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <HAL_I2C_Slave_Seq_Receive_IT>:
 800429a:	b480      	push	{r7}
 800429c:	b087      	sub	sp, #28
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	603b      	str	r3, [r7, #0]
 80042a6:	4613      	mov	r3, r2
 80042a8:	80fb      	strh	r3, [r7, #6]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042b6:	2b28      	cmp	r3, #40	; 0x28
 80042b8:	d15b      	bne.n	8004372 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80042c0:	88fb      	ldrh	r3, [r7, #6]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_I2C_Slave_Seq_Receive_IT+0x30>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e054      	b.n	8004374 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e04d      	b.n	8004374 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d007      	beq.n	80042fe <HAL_I2C_Slave_Seq_Receive_IT+0x64>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	222a      	movs	r2, #42	; 0x2a
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	88fa      	ldrh	r2, [r7, #6]
 800432e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	851a      	strh	r2, [r3, #40]	; 0x28
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	2300      	movs	r3, #0
 8004370:	e000      	b.n	8004374 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8004372:	2302      	movs	r3, #2
 8004374:	4618      	mov	r0, r3
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_I2C_EnableListen_IT>:
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b20      	cmp	r3, #32
 8004392:	d124      	bne.n	80043de <HAL_I2C_EnableListen_IT+0x5e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2228      	movs	r2, #40	; 0x28
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d007      	beq.n	80043ba <HAL_I2C_EnableListen_IT+0x3a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0201 	orr.w	r2, r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	2300      	movs	r3, #0
 80043dc:	e000      	b.n	80043e0 <HAL_I2C_EnableListen_IT+0x60>
 80043de:	2302      	movs	r3, #2
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_I2C_EV_IRQHandler>:
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	2300      	movs	r3, #0
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800440c:	73fb      	strb	r3, [r7, #15]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	73bb      	strb	r3, [r7, #14]
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	2b10      	cmp	r3, #16
 800441a:	d003      	beq.n	8004424 <HAL_I2C_EV_IRQHandler+0x38>
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b40      	cmp	r3, #64	; 0x40
 8004420:	f040 80b1 	bne.w	8004586 <HAL_I2C_EV_IRQHandler+0x19a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	61fb      	str	r3, [r7, #28]
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10d      	bne.n	800445a <HAL_I2C_EV_IRQHandler+0x6e>
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004444:	d003      	beq.n	800444e <HAL_I2C_EV_IRQHandler+0x62>
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800444c:	d101      	bne.n	8004452 <HAL_I2C_EV_IRQHandler+0x66>
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <HAL_I2C_EV_IRQHandler+0x68>
 8004452:	2300      	movs	r3, #0
 8004454:	2b01      	cmp	r3, #1
 8004456:	f000 8114 	beq.w	8004682 <HAL_I2C_EV_IRQHandler+0x296>
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <HAL_I2C_EV_IRQHandler+0x90>
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800446a:	2b00      	cmp	r3, #0
 800446c:	d006      	beq.n	800447c <HAL_I2C_EV_IRQHandler+0x90>
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f001 ff57 	bl	8006322 <I2C_ConvertOtherXferOptions>
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fd34 	bl	8004ee2 <I2C_Master_SB>
 800447a:	e083      	b.n	8004584 <HAL_I2C_EV_IRQHandler+0x198>
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <HAL_I2C_EV_IRQHandler+0xac>
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_I2C_EV_IRQHandler+0xac>
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fdac 	bl	8004fee <I2C_Master_ADD10>
 8004496:	e075      	b.n	8004584 <HAL_I2C_EV_IRQHandler+0x198>
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d008      	beq.n	80044b4 <HAL_I2C_EV_IRQHandler+0xc8>
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_I2C_EV_IRQHandler+0xc8>
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fdc8 	bl	8005042 <I2C_Master_ADDR>
 80044b2:	e067      	b.n	8004584 <HAL_I2C_EV_IRQHandler+0x198>
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d036      	beq.n	800452c <HAL_I2C_EV_IRQHandler+0x140>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044cc:	f000 80db 	beq.w	8004686 <HAL_I2C_EV_IRQHandler+0x29a>
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <HAL_I2C_EV_IRQHandler+0x10a>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_I2C_EV_IRQHandler+0x10a>
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <HAL_I2C_EV_IRQHandler+0x10a>
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f9ac 	bl	800484c <I2C_MasterTransmit_TXE>
 80044f4:	e046      	b.n	8004584 <HAL_I2C_EV_IRQHandler+0x198>
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80c2 	beq.w	8004686 <HAL_I2C_EV_IRQHandler+0x29a>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80bc 	beq.w	8004686 <HAL_I2C_EV_IRQHandler+0x29a>
 800450e:	7bbb      	ldrb	r3, [r7, #14]
 8004510:	2b21      	cmp	r3, #33	; 0x21
 8004512:	d103      	bne.n	800451c <HAL_I2C_EV_IRQHandler+0x130>
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fa35 	bl	8004984 <I2C_MasterTransmit_BTF>
 800451a:	e0b4      	b.n	8004686 <HAL_I2C_EV_IRQHandler+0x29a>
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	f040 80b1 	bne.w	8004686 <HAL_I2C_EV_IRQHandler+0x29a>
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 faa3 	bl	8004a70 <I2C_MemoryTransmit_TXE_BTF>
 800452a:	e0ac      	b.n	8004686 <HAL_I2C_EV_IRQHandler+0x29a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800453a:	f000 80a4 	beq.w	8004686 <HAL_I2C_EV_IRQHandler+0x29a>
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00d      	beq.n	8004564 <HAL_I2C_EV_IRQHandler+0x178>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454e:	2b00      	cmp	r3, #0
 8004550:	d008      	beq.n	8004564 <HAL_I2C_EV_IRQHandler+0x178>
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d103      	bne.n	8004564 <HAL_I2C_EV_IRQHandler+0x178>
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fb1b 	bl	8004b98 <I2C_MasterReceive_RXNE>
 8004562:	e00f      	b.n	8004584 <HAL_I2C_EV_IRQHandler+0x198>
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 808b 	beq.w	8004686 <HAL_I2C_EV_IRQHandler+0x29a>
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 8085 	beq.w	8004686 <HAL_I2C_EV_IRQHandler+0x29a>
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fbc6 	bl	8004d0e <I2C_MasterReceive_BTF>
 8004582:	e080      	b.n	8004686 <HAL_I2C_EV_IRQHandler+0x29a>
 8004584:	e07f      	b.n	8004686 <HAL_I2C_EV_IRQHandler+0x29a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d004      	beq.n	8004598 <HAL_I2C_EV_IRQHandler+0x1ac>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	e007      	b.n	80045a8 <HAL_I2C_EV_IRQHandler+0x1bc>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	61fb      	str	r3, [r7, #28]
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d011      	beq.n	80045d6 <HAL_I2C_EV_IRQHandler+0x1ea>
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00c      	beq.n	80045d6 <HAL_I2C_EV_IRQHandler+0x1ea>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_I2C_EV_IRQHandler+0x1e0>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	69b9      	ldr	r1, [r7, #24]
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 ff86 	bl	80054e0 <I2C_Slave_ADDR>
 80045d4:	e05a      	b.n	800468c <HAL_I2C_EV_IRQHandler+0x2a0>
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_I2C_EV_IRQHandler+0x206>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_I2C_EV_IRQHandler+0x206>
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 ffc0 	bl	8005570 <I2C_Slave_STOPF>
 80045f0:	e04c      	b.n	800468c <HAL_I2C_EV_IRQHandler+0x2a0>
 80045f2:	7bbb      	ldrb	r3, [r7, #14]
 80045f4:	2b21      	cmp	r3, #33	; 0x21
 80045f6:	d002      	beq.n	80045fe <HAL_I2C_EV_IRQHandler+0x212>
 80045f8:	7bbb      	ldrb	r3, [r7, #14]
 80045fa:	2b29      	cmp	r3, #41	; 0x29
 80045fc:	d120      	bne.n	8004640 <HAL_I2C_EV_IRQHandler+0x254>
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00d      	beq.n	8004624 <HAL_I2C_EV_IRQHandler+0x238>
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460e:	2b00      	cmp	r3, #0
 8004610:	d008      	beq.n	8004624 <HAL_I2C_EV_IRQHandler+0x238>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d103      	bne.n	8004624 <HAL_I2C_EV_IRQHandler+0x238>
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fea1 	bl	8005364 <I2C_SlaveTransmit_TXE>
 8004622:	e032      	b.n	800468a <HAL_I2C_EV_IRQHandler+0x29e>
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d02d      	beq.n	800468a <HAL_I2C_EV_IRQHandler+0x29e>
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004634:	2b00      	cmp	r3, #0
 8004636:	d028      	beq.n	800468a <HAL_I2C_EV_IRQHandler+0x29e>
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fed0 	bl	80053de <I2C_SlaveTransmit_BTF>
 800463e:	e024      	b.n	800468a <HAL_I2C_EV_IRQHandler+0x29e>
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00d      	beq.n	8004666 <HAL_I2C_EV_IRQHandler+0x27a>
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_I2C_EV_IRQHandler+0x27a>
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d103      	bne.n	8004666 <HAL_I2C_EV_IRQHandler+0x27a>
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fede 	bl	8005420 <I2C_SlaveReceive_RXNE>
 8004664:	e012      	b.n	800468c <HAL_I2C_EV_IRQHandler+0x2a0>
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00d      	beq.n	800468c <HAL_I2C_EV_IRQHandler+0x2a0>
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_I2C_EV_IRQHandler+0x2a0>
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 ff0e 	bl	800549c <I2C_SlaveReceive_BTF>
 8004680:	e004      	b.n	800468c <HAL_I2C_EV_IRQHandler+0x2a0>
 8004682:	bf00      	nop
 8004684:	e002      	b.n	800468c <HAL_I2C_EV_IRQHandler+0x2a0>
 8004686:	bf00      	nop
 8004688:	e000      	b.n	800468c <HAL_I2C_EV_IRQHandler+0x2a0>
 800468a:	bf00      	nop
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_I2C_ER_IRQHandler>:
 8004692:	b580      	push	{r7, lr}
 8004694:	b08a      	sub	sp, #40	; 0x28
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	623b      	str	r3, [r7, #32]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	61fb      	str	r3, [r7, #28]
 80046aa:	2300      	movs	r3, #0
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b4:	76fb      	strb	r3, [r7, #27]
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00d      	beq.n	80046dc <HAL_I2C_ER_IRQHandler+0x4a>
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <HAL_I2C_ER_IRQHandler+0x4a>
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046da:	615a      	str	r2, [r3, #20]
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00d      	beq.n	8004702 <HAL_I2C_ER_IRQHandler+0x70>
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_I2C_ER_IRQHandler+0x70>
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	f043 0302 	orr.w	r3, r3, #2
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004700:	615a      	str	r2, [r3, #20]
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d03e      	beq.n	800478a <HAL_I2C_ER_IRQHandler+0xf8>
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d039      	beq.n	800478a <HAL_I2C_ER_IRQHandler+0xf8>
 8004716:	7efb      	ldrb	r3, [r7, #27]
 8004718:	76bb      	strb	r3, [r7, #26]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004728:	74fb      	strb	r3, [r7, #19]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	7ebb      	ldrb	r3, [r7, #26]
 8004732:	2b20      	cmp	r3, #32
 8004734:	d112      	bne.n	800475c <HAL_I2C_ER_IRQHandler+0xca>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10f      	bne.n	800475c <HAL_I2C_ER_IRQHandler+0xca>
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	2b21      	cmp	r3, #33	; 0x21
 8004740:	d008      	beq.n	8004754 <HAL_I2C_ER_IRQHandler+0xc2>
 8004742:	7cfb      	ldrb	r3, [r7, #19]
 8004744:	2b29      	cmp	r3, #41	; 0x29
 8004746:	d005      	beq.n	8004754 <HAL_I2C_ER_IRQHandler+0xc2>
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	2b28      	cmp	r3, #40	; 0x28
 800474c:	d106      	bne.n	800475c <HAL_I2C_ER_IRQHandler+0xca>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b21      	cmp	r3, #33	; 0x21
 8004752:	d103      	bne.n	800475c <HAL_I2C_ER_IRQHandler+0xca>
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f001 f83b 	bl	80057d0 <I2C_Slave_AF>
 800475a:	e016      	b.n	800478a <HAL_I2C_ER_IRQHandler+0xf8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004764:	615a      	str	r2, [r3, #20]
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	f043 0304 	orr.w	r3, r3, #4
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
 800476e:	7efb      	ldrb	r3, [r7, #27]
 8004770:	2b10      	cmp	r3, #16
 8004772:	d002      	beq.n	800477a <HAL_I2C_ER_IRQHandler+0xe8>
 8004774:	7efb      	ldrb	r3, [r7, #27]
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	d107      	bne.n	800478a <HAL_I2C_ER_IRQHandler+0xf8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00d      	beq.n	80047b0 <HAL_I2C_ER_IRQHandler+0x11e>
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <HAL_I2C_ER_IRQHandler+0x11e>
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	f043 0308 	orr.w	r3, r3, #8
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80047ae:	615a      	str	r2, [r3, #20]
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d008      	beq.n	80047c8 <HAL_I2C_ER_IRQHandler+0x136>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f001 f874 	bl	80058b0 <I2C_ITError>
 80047c8:	bf00      	nop
 80047ca:	3728      	adds	r7, #40	; 0x28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_I2C_MasterTxCpltCallback>:
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_I2C_MasterRxCpltCallback>:
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_I2C_MemTxCpltCallback>:
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_I2C_MemRxCpltCallback>:
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_I2C_AbortCpltCallback>:
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_I2C_GetError>:
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <I2C_MasterTransmit_TXE>:
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485a:	73fb      	strb	r3, [r7, #15]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004862:	73bb      	strb	r3, [r7, #14]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486e:	2b00      	cmp	r3, #0
 8004870:	d150      	bne.n	8004914 <I2C_MasterTransmit_TXE+0xc8>
 8004872:	7bfb      	ldrb	r3, [r7, #15]
 8004874:	2b21      	cmp	r3, #33	; 0x21
 8004876:	d14d      	bne.n	8004914 <I2C_MasterTransmit_TXE+0xc8>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b08      	cmp	r3, #8
 800487c:	d01d      	beq.n	80048ba <I2C_MasterTransmit_TXE+0x6e>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b20      	cmp	r3, #32
 8004882:	d01a      	beq.n	80048ba <I2C_MasterTransmit_TXE+0x6e>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800488a:	d016      	beq.n	80048ba <I2C_MasterTransmit_TXE+0x6e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800489a:	605a      	str	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2211      	movs	r2, #17
 80048a0:	631a      	str	r2, [r3, #48]	; 0x30
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff ff8c 	bl	80047d0 <HAL_I2C_MasterTxCpltCallback>
 80048b8:	e060      	b.n	800497c <I2C_MasterTransmit_TXE+0x130>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048c8:	605a      	str	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	d107      	bne.n	8004904 <I2C_MasterTransmit_TXE+0xb8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff ff7b 	bl	80047f8 <HAL_I2C_MemTxCpltCallback>
 8004902:	e03b      	b.n	800497c <I2C_MasterTransmit_TXE+0x130>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff ff5f 	bl	80047d0 <HAL_I2C_MasterTxCpltCallback>
 8004912:	e033      	b.n	800497c <I2C_MasterTransmit_TXE+0x130>
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	2b21      	cmp	r3, #33	; 0x21
 8004918:	d005      	beq.n	8004926 <I2C_MasterTransmit_TXE+0xda>
 800491a:	7bbb      	ldrb	r3, [r7, #14]
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d12d      	bne.n	800497c <I2C_MasterTransmit_TXE+0x130>
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b22      	cmp	r3, #34	; 0x22
 8004924:	d12a      	bne.n	800497c <I2C_MasterTransmit_TXE+0x130>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d108      	bne.n	8004942 <I2C_MasterTransmit_TXE+0xf6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493e:	605a      	str	r2, [r3, #4]
 8004940:	e01c      	b.n	800497c <I2C_MasterTransmit_TXE+0x130>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b40      	cmp	r3, #64	; 0x40
 800494c:	d103      	bne.n	8004956 <I2C_MasterTransmit_TXE+0x10a>
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f88e 	bl	8004a70 <I2C_MemoryTransmit_TXE_BTF>
 8004954:	e012      	b.n	800497c <I2C_MasterTransmit_TXE+0x130>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	781a      	ldrb	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	611a      	str	r2, [r3, #16]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	625a      	str	r2, [r3, #36]	; 0x24
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	855a      	strh	r2, [r3, #42]	; 0x2a
 800497a:	e7ff      	b.n	800497c <I2C_MasterTransmit_TXE+0x130>
 800497c:	bf00      	nop
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <I2C_MasterTransmit_BTF>:
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b21      	cmp	r3, #33	; 0x21
 800499c:	d164      	bne.n	8004a68 <I2C_MasterTransmit_BTF+0xe4>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d012      	beq.n	80049ce <I2C_MasterTransmit_BTF+0x4a>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	611a      	str	r2, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049cc:	e04c      	b.n	8004a68 <I2C_MasterTransmit_BTF+0xe4>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d01d      	beq.n	8004a10 <I2C_MasterTransmit_BTF+0x8c>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d01a      	beq.n	8004a10 <I2C_MasterTransmit_BTF+0x8c>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049e0:	d016      	beq.n	8004a10 <I2C_MasterTransmit_BTF+0x8c>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049f0:	605a      	str	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2211      	movs	r2, #17
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff fee1 	bl	80047d0 <HAL_I2C_MasterTxCpltCallback>
 8004a0e:	e02b      	b.n	8004a68 <I2C_MasterTransmit_BTF+0xe4>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a1e:	605a      	str	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b40      	cmp	r3, #64	; 0x40
 8004a48:	d107      	bne.n	8004a5a <I2C_MasterTransmit_BTF+0xd6>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff fed0 	bl	80047f8 <HAL_I2C_MemTxCpltCallback>
 8004a58:	e006      	b.n	8004a68 <I2C_MasterTransmit_BTF+0xe4>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff feb4 	bl	80047d0 <HAL_I2C_MasterTxCpltCallback>
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <I2C_MemoryTransmit_TXE_BTF>:
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7e:	73fb      	strb	r3, [r7, #15]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d11d      	bne.n	8004ac4 <I2C_MemoryTransmit_TXE_BTF+0x54>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d10b      	bne.n	8004aa8 <I2C_MemoryTransmit_TXE_BTF+0x38>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	611a      	str	r2, [r3, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa0:	1c9a      	adds	r2, r3, #2
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	651a      	str	r2, [r3, #80]	; 0x50
 8004aa6:	e073      	b.n	8004b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	121b      	asrs	r3, r3, #8
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	611a      	str	r2, [r3, #16]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	651a      	str	r2, [r3, #80]	; 0x50
 8004ac2:	e065      	b.n	8004b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d10b      	bne.n	8004ae4 <I2C_MemoryTransmit_TXE_BTF+0x74>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	611a      	str	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	651a      	str	r2, [r3, #80]	; 0x50
 8004ae2:	e055      	b.n	8004b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d151      	bne.n	8004b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b22      	cmp	r3, #34	; 0x22
 8004af0:	d10d      	bne.n	8004b0e <I2C_MemoryTransmit_TXE_BTF+0x9e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	651a      	str	r2, [r3, #80]	; 0x50
 8004b0c:	e040      	b.n	8004b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d015      	beq.n	8004b44 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b21      	cmp	r3, #33	; 0x21
 8004b1c:	d112      	bne.n	8004b44 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	781a      	ldrb	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	611a      	str	r2, [r3, #16]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	625a      	str	r2, [r3, #36]	; 0x24
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b42:	e025      	b.n	8004b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d120      	bne.n	8004b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	2b21      	cmp	r3, #33	; 0x21
 8004b52:	d11d      	bne.n	8004b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b62:	605a      	str	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	631a      	str	r2, [r3, #48]	; 0x30
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff fe34 	bl	80047f8 <HAL_I2C_MemTxCpltCallback>
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <I2C_MasterReceive_RXNE>:
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b22      	cmp	r3, #34	; 0x22
 8004baa:	f040 80ac 	bne.w	8004d06 <I2C_MasterReceive_RXNE+0x16e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d921      	bls.n	8004c00 <I2C_MasterReceive_RXNE+0x68>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	f040 808c 	bne.w	8004d06 <I2C_MasterReceive_RXNE+0x16e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	e082      	b.n	8004d06 <I2C_MasterReceive_RXNE+0x16e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d075      	beq.n	8004cf4 <I2C_MasterReceive_RXNE+0x15c>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d002      	beq.n	8004c14 <I2C_MasterReceive_RXNE+0x7c>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d16f      	bne.n	8004cf4 <I2C_MasterReceive_RXNE+0x15c>
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f001 facd 	bl	80061b4 <I2C_WaitOnSTOPRequestThroughIT>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d142      	bne.n	8004ca6 <I2C_MasterReceive_RXNE+0x10e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c3e:	605a      	str	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	625a      	str	r2, [r3, #36]	; 0x24
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b40      	cmp	r3, #64	; 0x40
 8004c78:	d10a      	bne.n	8004c90 <I2C_MasterReceive_RXNE+0xf8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff fdbf 	bl	800480c <HAL_I2C_MemRxCpltCallback>
 8004c8e:	e03a      	b.n	8004d06 <I2C_MasterReceive_RXNE+0x16e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2212      	movs	r2, #18
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff fda0 	bl	80047e4 <HAL_I2C_MasterRxCpltCallback>
 8004ca4:	e02f      	b.n	8004d06 <I2C_MasterReceive_RXNE+0x16e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7fc feb7 	bl	8001a60 <HAL_I2C_ErrorCallback>
 8004cf2:	e008      	b.n	8004d06 <I2C_MasterReceive_RXNE+0x16e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d02:	605a      	str	r2, [r3, #4]
 8004d04:	e7ff      	b.n	8004d06 <I2C_MasterReceive_RXNE+0x16e>
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <I2C_MasterReceive_BTF>:
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d11b      	bne.n	8004d5e <I2C_MasterReceive_BTF+0x50>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d34:	605a      	str	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	625a      	str	r2, [r3, #36]	; 0x24
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d5c:	e0bd      	b.n	8004eda <I2C_MasterReceive_BTF+0x1cc>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d129      	bne.n	8004dbc <I2C_MasterReceive_BTF+0xae>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d76:	605a      	str	r2, [r3, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d00a      	beq.n	8004d94 <I2C_MasterReceive_BTF+0x86>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d007      	beq.n	8004d94 <I2C_MasterReceive_BTF+0x86>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dba:	e08e      	b.n	8004eda <I2C_MasterReceive_BTF+0x1cc>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d176      	bne.n	8004eb4 <I2C_MasterReceive_BTF+0x1a6>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d002      	beq.n	8004dd2 <I2C_MasterReceive_BTF+0xc4>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d108      	bne.n	8004de4 <I2C_MasterReceive_BTF+0xd6>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e019      	b.n	8004e18 <I2C_MasterReceive_BTF+0x10a>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d002      	beq.n	8004df0 <I2C_MasterReceive_BTF+0xe2>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d108      	bne.n	8004e02 <I2C_MasterReceive_BTF+0xf4>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	e00a      	b.n	8004e18 <I2C_MasterReceive_BTF+0x10a>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	d007      	beq.n	8004e18 <I2C_MasterReceive_BTF+0x10a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e72:	605a      	str	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b40      	cmp	r3, #64	; 0x40
 8004e86:	d10a      	bne.n	8004e9e <I2C_MasterReceive_BTF+0x190>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff fcb8 	bl	800480c <HAL_I2C_MemRxCpltCallback>
 8004e9c:	e01d      	b.n	8004eda <I2C_MasterReceive_BTF+0x1cc>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2212      	movs	r2, #18
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff fc99 	bl	80047e4 <HAL_I2C_MasterRxCpltCallback>
 8004eb2:	e012      	b.n	8004eda <I2C_MasterReceive_BTF+0x1cc>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eda:	bf00      	nop
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <I2C_Master_SB>:
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d117      	bne.n	8004f26 <I2C_Master_SB+0x44>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <I2C_Master_SB+0x30>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f0e:	611a      	str	r2, [r3, #16]
 8004f10:	e067      	b.n	8004fe2 <I2C_Master_SB+0x100>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	611a      	str	r2, [r3, #16]
 8004f24:	e05d      	b.n	8004fe2 <I2C_Master_SB+0x100>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f2e:	d133      	bne.n	8004f98 <I2C_Master_SB+0xb6>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b21      	cmp	r3, #33	; 0x21
 8004f3a:	d109      	bne.n	8004f50 <I2C_Master_SB+0x6e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f4c:	611a      	str	r2, [r3, #16]
 8004f4e:	e008      	b.n	8004f62 <I2C_Master_SB+0x80>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	611a      	str	r2, [r3, #16]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <I2C_Master_SB+0x92>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d108      	bne.n	8004f86 <I2C_Master_SB+0xa4>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d032      	beq.n	8004fe2 <I2C_Master_SB+0x100>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d02d      	beq.n	8004fe2 <I2C_Master_SB+0x100>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f94:	605a      	str	r2, [r3, #4]
 8004f96:	e024      	b.n	8004fe2 <I2C_Master_SB+0x100>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10e      	bne.n	8004fbe <I2C_Master_SB+0xdc>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	11db      	asrs	r3, r3, #7
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	f003 0306 	and.w	r3, r3, #6
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	f063 030f 	orn	r3, r3, #15
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	611a      	str	r2, [r3, #16]
 8004fbc:	e011      	b.n	8004fe2 <I2C_Master_SB+0x100>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d10d      	bne.n	8004fe2 <I2C_Master_SB+0x100>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	11db      	asrs	r3, r3, #7
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	f003 0306 	and.w	r3, r3, #6
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	f063 030e 	orn	r3, r3, #14
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	611a      	str	r2, [r3, #16]
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <I2C_Master_ADD10>:
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	611a      	str	r2, [r3, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005006:	2b00      	cmp	r3, #0
 8005008:	d004      	beq.n	8005014 <I2C_Master_ADD10+0x26>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d108      	bne.n	8005026 <I2C_Master_ADD10+0x38>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00c      	beq.n	8005036 <I2C_Master_ADD10+0x48>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <I2C_Master_ADD10+0x48>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <I2C_Master_ADDR>:
 8005042:	b480      	push	{r7}
 8005044:	b091      	sub	sp, #68	; 0x44
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005050:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	63bb      	str	r3, [r7, #56]	; 0x38
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b22      	cmp	r3, #34	; 0x22
 800506a:	f040 8169 	bne.w	8005340 <I2C_Master_ADDR+0x2fe>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10f      	bne.n	8005096 <I2C_Master_ADDR+0x54>
 8005076:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d10b      	bne.n	8005096 <I2C_Master_ADDR+0x54>
 800507e:	2300      	movs	r3, #0
 8005080:	633b      	str	r3, [r7, #48]	; 0x30
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	633b      	str	r3, [r7, #48]	; 0x30
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	633b      	str	r3, [r7, #48]	; 0x30
 8005092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005094:	e160      	b.n	8005358 <I2C_Master_ADDR+0x316>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800509a:	2b00      	cmp	r3, #0
 800509c:	d11d      	bne.n	80050da <I2C_Master_ADDR+0x98>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050a6:	d118      	bne.n	80050da <I2C_Master_ADDR+0x98>
 80050a8:	2300      	movs	r3, #0
 80050aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	651a      	str	r2, [r3, #80]	; 0x50
 80050d8:	e13e      	b.n	8005358 <I2C_Master_ADDR+0x316>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d113      	bne.n	800510c <I2C_Master_ADDR+0xca>
 80050e4:	2300      	movs	r3, #0
 80050e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e115      	b.n	8005338 <I2C_Master_ADDR+0x2f6>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	f040 808a 	bne.w	800522c <I2C_Master_ADDR+0x1ea>
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800511e:	d137      	bne.n	8005190 <I2C_Master_ADDR+0x14e>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800513a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513e:	d113      	bne.n	8005168 <I2C_Master_ADDR+0x126>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	2300      	movs	r3, #0
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	e0e7      	b.n	8005338 <I2C_Master_ADDR+0x2f6>
 8005168:	2300      	movs	r3, #0
 800516a:	623b      	str	r3, [r7, #32]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	623b      	str	r3, [r7, #32]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	623b      	str	r3, [r7, #32]
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e0d3      	b.n	8005338 <I2C_Master_ADDR+0x2f6>
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	2b08      	cmp	r3, #8
 8005194:	d02e      	beq.n	80051f4 <I2C_Master_ADDR+0x1b2>
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	2b20      	cmp	r3, #32
 800519a:	d02b      	beq.n	80051f4 <I2C_Master_ADDR+0x1b2>
 800519c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519e:	2b12      	cmp	r3, #18
 80051a0:	d102      	bne.n	80051a8 <I2C_Master_ADDR+0x166>
 80051a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d125      	bne.n	80051f4 <I2C_Master_ADDR+0x1b2>
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d00e      	beq.n	80051cc <I2C_Master_ADDR+0x18a>
 80051ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d00b      	beq.n	80051cc <I2C_Master_ADDR+0x18a>
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	2b10      	cmp	r3, #16
 80051b8:	d008      	beq.n	80051cc <I2C_Master_ADDR+0x18a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e007      	b.n	80051dc <I2C_Master_ADDR+0x19a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	2300      	movs	r3, #0
 80051de:	61fb      	str	r3, [r7, #28]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	61fb      	str	r3, [r7, #28]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	61fb      	str	r3, [r7, #28]
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	e0a1      	b.n	8005338 <I2C_Master_ADDR+0x2f6>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	2300      	movs	r3, #0
 8005206:	61bb      	str	r3, [r7, #24]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	61bb      	str	r3, [r7, #24]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	e085      	b.n	8005338 <I2C_Master_ADDR+0x2f6>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d14d      	bne.n	80052d2 <I2C_Master_ADDR+0x290>
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	2b04      	cmp	r3, #4
 800523a:	d016      	beq.n	800526a <I2C_Master_ADDR+0x228>
 800523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523e:	2b02      	cmp	r3, #2
 8005240:	d013      	beq.n	800526a <I2C_Master_ADDR+0x228>
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	2b10      	cmp	r3, #16
 8005246:	d010      	beq.n	800526a <I2C_Master_ADDR+0x228>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	e007      	b.n	800527a <I2C_Master_ADDR+0x238>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005288:	d117      	bne.n	80052ba <I2C_Master_ADDR+0x278>
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005290:	d00b      	beq.n	80052aa <I2C_Master_ADDR+0x268>
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	2b01      	cmp	r3, #1
 8005296:	d008      	beq.n	80052aa <I2C_Master_ADDR+0x268>
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	2b08      	cmp	r3, #8
 800529c:	d005      	beq.n	80052aa <I2C_Master_ADDR+0x268>
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d002      	beq.n	80052aa <I2C_Master_ADDR+0x268>
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d107      	bne.n	80052ba <I2C_Master_ADDR+0x278>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	e032      	b.n	8005338 <I2C_Master_ADDR+0x2f6>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f0:	d117      	bne.n	8005322 <I2C_Master_ADDR+0x2e0>
 80052f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052f8:	d00b      	beq.n	8005312 <I2C_Master_ADDR+0x2d0>
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d008      	beq.n	8005312 <I2C_Master_ADDR+0x2d0>
 8005300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005302:	2b08      	cmp	r3, #8
 8005304:	d005      	beq.n	8005312 <I2C_Master_ADDR+0x2d0>
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	2b10      	cmp	r3, #16
 800530a:	d002      	beq.n	8005312 <I2C_Master_ADDR+0x2d0>
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530e:	2b20      	cmp	r3, #32
 8005310:	d107      	bne.n	8005322 <I2C_Master_ADDR+0x2e0>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005320:	605a      	str	r2, [r3, #4]
 8005322:	2300      	movs	r3, #0
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	651a      	str	r2, [r3, #80]	; 0x50
 800533e:	e00b      	b.n	8005358 <I2C_Master_ADDR+0x316>
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	e7ff      	b.n	8005358 <I2C_Master_ADDR+0x316>
 8005358:	bf00      	nop
 800535a:	3744      	adds	r7, #68	; 0x44
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <I2C_SlaveTransmit_TXE>:
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005372:	73fb      	strb	r3, [r7, #15]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d02b      	beq.n	80053d6 <I2C_SlaveTransmit_TXE+0x72>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	781a      	ldrb	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	611a      	str	r2, [r3, #16]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	625a      	str	r2, [r3, #36]	; 0x24
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d114      	bne.n	80053d6 <I2C_SlaveTransmit_TXE+0x72>
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	2b29      	cmp	r3, #41	; 0x29
 80053b0:	d111      	bne.n	80053d6 <I2C_SlaveTransmit_TXE+0x72>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c0:	605a      	str	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2221      	movs	r2, #33	; 0x21
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2228      	movs	r2, #40	; 0x28
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7fc faff 	bl	80019d4 <HAL_I2C_SlaveTxCpltCallback>
 80053d6:	bf00      	nop
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <I2C_SlaveTransmit_BTF>:
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d011      	beq.n	8005414 <I2C_SlaveTransmit_BTF+0x36>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	781a      	ldrb	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	611a      	str	r2, [r3, #16]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	625a      	str	r2, [r3, #36]	; 0x24
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <I2C_SlaveReceive_RXNE>:
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542e:	73fb      	strb	r3, [r7, #15]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d02c      	beq.n	8005494 <I2C_SlaveReceive_RXNE+0x74>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	625a      	str	r2, [r3, #36]	; 0x24
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d114      	bne.n	8005494 <I2C_SlaveReceive_RXNE+0x74>
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	2b2a      	cmp	r3, #42	; 0x2a
 800546e:	d111      	bne.n	8005494 <I2C_SlaveReceive_RXNE+0x74>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800547e:	605a      	str	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2222      	movs	r2, #34	; 0x22
 8005484:	631a      	str	r2, [r3, #48]	; 0x30
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2228      	movs	r2, #40	; 0x28
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fc faaa 	bl	80019e8 <HAL_I2C_SlaveRxCpltCallback>
 8005494:	bf00      	nop
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <I2C_SlaveReceive_BTF>:
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d012      	beq.n	80054d4 <I2C_SlaveReceive_BTF+0x38>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	701a      	strb	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <I2C_Slave_ADDR>:
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
 80054ea:	2300      	movs	r3, #0
 80054ec:	73fb      	strb	r3, [r7, #15]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054fa:	2b28      	cmp	r3, #40	; 0x28
 80054fc:	d125      	bne.n	800554a <I2C_Slave_ADDR+0x6a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550c:	605a      	str	r2, [r3, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <I2C_Slave_ADDR+0x3c>
 8005518:	2301      	movs	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b00      	cmp	r3, #0
 8005524:	d103      	bne.n	800552e <I2C_Slave_ADDR+0x4e>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	81bb      	strh	r3, [r7, #12]
 800552c:	e002      	b.n	8005534 <I2C_Slave_ADDR+0x54>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	81bb      	strh	r3, [r7, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800553c:	89ba      	ldrh	r2, [r7, #12]
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fc fa04 	bl	8001950 <HAL_I2C_AddrCallback>
 8005548:	e00e      	b.n	8005568 <I2C_Slave_ADDR+0x88>
 800554a:	2300      	movs	r3, #0
 800554c:	60bb      	str	r3, [r7, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	60bb      	str	r3, [r7, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005568:	bf00      	nop
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <I2C_Slave_STOPF>:
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557e:	73fb      	strb	r3, [r7, #15]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800558e:	605a      	str	r2, [r3, #4]
 8005590:	2300      	movs	r3, #0
 8005592:	60bb      	str	r3, [r7, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	60bb      	str	r3, [r7, #8]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055cc:	d172      	bne.n	80056b4 <I2C_Slave_STOPF+0x144>
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b22      	cmp	r3, #34	; 0x22
 80055d2:	d002      	beq.n	80055da <I2C_Slave_STOPF+0x6a>
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	2b2a      	cmp	r3, #42	; 0x2a
 80055d8:	d135      	bne.n	8005646 <I2C_Slave_STOPF+0xd6>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d005      	beq.n	80055fe <I2C_Slave_STOPF+0x8e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f043 0204 	orr.w	r2, r3, #4
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	4618      	mov	r0, r3
 8005614:	f7fd ff95 	bl	8003542 <HAL_DMA_GetState>
 8005618:	4603      	mov	r3, r0
 800561a:	2b01      	cmp	r3, #1
 800561c:	d049      	beq.n	80056b2 <I2C_Slave_STOPF+0x142>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	4a69      	ldr	r2, [pc, #420]	; (80057c8 <I2C_Slave_STOPF+0x258>)
 8005624:	651a      	str	r2, [r3, #80]	; 0x50
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	4618      	mov	r0, r3
 800562c:	f7fd ff67 	bl	80034fe <HAL_DMA_Abort_IT>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d03d      	beq.n	80056b2 <I2C_Slave_STOPF+0x142>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005640:	4610      	mov	r0, r2
 8005642:	4798      	blx	r3
 8005644:	e035      	b.n	80056b2 <I2C_Slave_STOPF+0x142>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	b29a      	uxth	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <I2C_Slave_STOPF+0xfa>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	f043 0204 	orr.w	r2, r3, #4
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005678:	605a      	str	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	4618      	mov	r0, r3
 8005680:	f7fd ff5f 	bl	8003542 <HAL_DMA_GetState>
 8005684:	4603      	mov	r3, r0
 8005686:	2b01      	cmp	r3, #1
 8005688:	d014      	beq.n	80056b4 <I2C_Slave_STOPF+0x144>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568e:	4a4e      	ldr	r2, [pc, #312]	; (80057c8 <I2C_Slave_STOPF+0x258>)
 8005690:	651a      	str	r2, [r3, #80]	; 0x50
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	4618      	mov	r0, r3
 8005698:	f7fd ff31 	bl	80034fe <HAL_DMA_Abort_IT>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <I2C_Slave_STOPF+0x144>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
 80056b0:	e000      	b.n	80056b4 <I2C_Slave_STOPF+0x144>
 80056b2:	bf00      	nop
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d03e      	beq.n	800573c <I2C_Slave_STOPF+0x1cc>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d112      	bne.n	80056f2 <I2C_Slave_STOPF+0x182>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	625a      	str	r2, [r3, #36]	; 0x24
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d112      	bne.n	8005726 <I2C_Slave_STOPF+0x1b6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	625a      	str	r2, [r3, #36]	; 0x24
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <I2C_Slave_STOPF+0x1cc>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005734:	f043 0204 	orr.w	r2, r3, #4
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	641a      	str	r2, [r3, #64]	; 0x40
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <I2C_Slave_STOPF+0x1dc>
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f8b3 	bl	80058b0 <I2C_ITError>
 800574a:	e039      	b.n	80057c0 <I2C_Slave_STOPF+0x250>
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	2b2a      	cmp	r3, #42	; 0x2a
 8005750:	d109      	bne.n	8005766 <I2C_Slave_STOPF+0x1f6>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2228      	movs	r2, #40	; 0x28
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fc f941 	bl	80019e8 <HAL_I2C_SlaveRxCpltCallback>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b28      	cmp	r3, #40	; 0x28
 8005770:	d111      	bne.n	8005796 <I2C_Slave_STOPF+0x226>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a15      	ldr	r2, [pc, #84]	; (80057cc <I2C_Slave_STOPF+0x25c>)
 8005776:	62da      	str	r2, [r3, #44]	; 0x2c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	631a      	str	r2, [r3, #48]	; 0x30
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fc f8cc 	bl	800192c <HAL_I2C_ListenCpltCallback>
 8005794:	e014      	b.n	80057c0 <I2C_Slave_STOPF+0x250>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	2b22      	cmp	r3, #34	; 0x22
 800579c:	d002      	beq.n	80057a4 <I2C_Slave_STOPF+0x234>
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b22      	cmp	r3, #34	; 0x22
 80057a2:	d10d      	bne.n	80057c0 <I2C_Slave_STOPF+0x250>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fc f914 	bl	80019e8 <HAL_I2C_SlaveRxCpltCallback>
 80057c0:	bf00      	nop
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	08005db5 	.word	0x08005db5
 80057cc:	ffff0000 	.word	0xffff0000

080057d0 <I2C_Slave_AF>:
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057de:	73fb      	strb	r3, [r7, #15]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	60bb      	str	r3, [r7, #8]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d002      	beq.n	80057f2 <I2C_Slave_AF+0x22>
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d129      	bne.n	8005846 <I2C_Slave_AF+0x76>
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	2b28      	cmp	r3, #40	; 0x28
 80057f6:	d126      	bne.n	8005846 <I2C_Slave_AF+0x76>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a2c      	ldr	r2, [pc, #176]	; (80058ac <I2C_Slave_AF+0xdc>)
 80057fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005816:	615a      	str	r2, [r3, #20]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	631a      	str	r2, [r3, #48]	; 0x30
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fc f874 	bl	800192c <HAL_I2C_ListenCpltCallback>
 8005844:	e02e      	b.n	80058a4 <I2C_Slave_AF+0xd4>
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	2b21      	cmp	r3, #33	; 0x21
 800584a:	d126      	bne.n	800589a <I2C_Slave_AF+0xca>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a17      	ldr	r2, [pc, #92]	; (80058ac <I2C_Slave_AF+0xdc>)
 8005850:	62da      	str	r2, [r3, #44]	; 0x2c
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2221      	movs	r2, #33	; 0x21
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005876:	605a      	str	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005880:	615a      	str	r2, [r3, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fc f89e 	bl	80019d4 <HAL_I2C_SlaveTxCpltCallback>
 8005898:	e004      	b.n	80058a4 <I2C_Slave_AF+0xd4>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058a2:	615a      	str	r2, [r3, #20]
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	ffff0000 	.word	0xffff0000

080058b0 <I2C_ITError>:
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058be:	73fb      	strb	r3, [r7, #15]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058c6:	73bb      	strb	r3, [r7, #14]
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
 80058ca:	2b10      	cmp	r3, #16
 80058cc:	d002      	beq.n	80058d4 <I2C_ITError+0x24>
 80058ce:	7bbb      	ldrb	r3, [r7, #14]
 80058d0:	2b40      	cmp	r3, #64	; 0x40
 80058d2:	d10a      	bne.n	80058ea <I2C_ITError+0x3a>
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b22      	cmp	r3, #34	; 0x22
 80058d8:	d107      	bne.n	80058ea <I2C_ITError+0x3a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058f0:	2b28      	cmp	r3, #40	; 0x28
 80058f2:	d107      	bne.n	8005904 <I2C_ITError+0x54>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	631a      	str	r2, [r3, #48]	; 0x30
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2228      	movs	r2, #40	; 0x28
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005902:	e015      	b.n	8005930 <I2C_ITError+0x80>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005912:	d00a      	beq.n	800592a <I2C_ITError+0x7a>
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	2b60      	cmp	r3, #96	; 0x60
 8005918:	d007      	beq.n	800592a <I2C_ITError+0x7a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2220      	movs	r2, #32
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800593a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593e:	d162      	bne.n	8005a06 <I2C_ITError+0x156>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800594e:	605a      	str	r2, [r3, #4]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b01      	cmp	r3, #1
 800595c:	d020      	beq.n	80059a0 <I2C_ITError+0xf0>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005962:	4a6a      	ldr	r2, [pc, #424]	; (8005b0c <I2C_ITError+0x25c>)
 8005964:	651a      	str	r2, [r3, #80]	; 0x50
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596a:	4618      	mov	r0, r3
 800596c:	f7fd fdc7 	bl	80034fe <HAL_DMA_Abort_IT>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 8089 	beq.w	8005a8a <I2C_ITError+0x1da>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0201 	bic.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800599a:	4610      	mov	r0, r2
 800599c:	4798      	blx	r3
 800599e:	e074      	b.n	8005a8a <I2C_ITError+0x1da>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	4a59      	ldr	r2, [pc, #356]	; (8005b0c <I2C_ITError+0x25c>)
 80059a6:	651a      	str	r2, [r3, #80]	; 0x50
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fd fda6 	bl	80034fe <HAL_DMA_Abort_IT>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d068      	beq.n	8005a8a <I2C_ITError+0x1da>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c2:	2b40      	cmp	r3, #64	; 0x40
 80059c4:	d10b      	bne.n	80059de <I2C_ITError+0x12e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	625a      	str	r2, [r3, #36]	; 0x24
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0201 	bic.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a00:	4610      	mov	r0, r2
 8005a02:	4798      	blx	r3
 8005a04:	e041      	b.n	8005a8a <I2C_ITError+0x1da>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b60      	cmp	r3, #96	; 0x60
 8005a10:	d125      	bne.n	8005a5e <I2C_ITError+0x1ae>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	641a      	str	r2, [r3, #64]	; 0x40
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b40      	cmp	r3, #64	; 0x40
 8005a2c:	d10b      	bne.n	8005a46 <I2C_ITError+0x196>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0201 	bic.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fe fee2 	bl	8004820 <HAL_I2C_AbortCpltCallback>
 8005a5c:	e015      	b.n	8005a8a <I2C_ITError+0x1da>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d10b      	bne.n	8005a84 <I2C_ITError+0x1d4>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691a      	ldr	r2, [r3, #16]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	625a      	str	r2, [r3, #36]	; 0x24
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7fb ffeb 	bl	8001a60 <HAL_I2C_ErrorCallback>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	60bb      	str	r3, [r7, #8]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10e      	bne.n	8005ab8 <I2C_ITError+0x208>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d109      	bne.n	8005ab8 <I2C_ITError+0x208>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <I2C_ITError+0x208>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f003 0308 	and.w	r3, r3, #8
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <I2C_ITError+0x218>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ac6:	605a      	str	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ace:	73fb      	strb	r3, [r7, #15]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d113      	bne.n	8005b04 <I2C_ITError+0x254>
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	2b28      	cmp	r3, #40	; 0x28
 8005ae0:	d110      	bne.n	8005b04 <I2C_ITError+0x254>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a0a      	ldr	r2, [pc, #40]	; (8005b10 <I2C_ITError+0x260>)
 8005ae6:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fb ff14 	bl	800192c <HAL_I2C_ListenCpltCallback>
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	08005db5 	.word	0x08005db5
 8005b10:	ffff0000 	.word	0xffff0000

08005b14 <I2C_MasterRequestWrite>:
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	607a      	str	r2, [r7, #4]
 8005b1e:	603b      	str	r3, [r7, #0]
 8005b20:	460b      	mov	r3, r1
 8005b22:	817b      	strh	r3, [r7, #10]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d006      	beq.n	8005b3e <I2C_MasterRequestWrite+0x2a>
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d003      	beq.n	8005b3e <I2C_MasterRequestWrite+0x2a>
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b3c:	d108      	bne.n	8005b50 <I2C_MasterRequestWrite+0x3c>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	e00b      	b.n	8005b68 <I2C_MasterRequestWrite+0x54>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	2b12      	cmp	r3, #18
 8005b56:	d107      	bne.n	8005b68 <I2C_MasterRequestWrite+0x54>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 f9c5 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00d      	beq.n	8005b9c <I2C_MasterRequestWrite+0x88>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8e:	d103      	bne.n	8005b98 <I2C_MasterRequestWrite+0x84>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b96:	641a      	str	r2, [r3, #64]	; 0x40
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e035      	b.n	8005c08 <I2C_MasterRequestWrite+0xf4>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ba4:	d108      	bne.n	8005bb8 <I2C_MasterRequestWrite+0xa4>
 8005ba6:	897b      	ldrh	r3, [r7, #10]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	461a      	mov	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bb4:	611a      	str	r2, [r3, #16]
 8005bb6:	e01b      	b.n	8005bf0 <I2C_MasterRequestWrite+0xdc>
 8005bb8:	897b      	ldrh	r3, [r7, #10]
 8005bba:	11db      	asrs	r3, r3, #7
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f003 0306 	and.w	r3, r3, #6
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	f063 030f 	orn	r3, r3, #15
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	611a      	str	r2, [r3, #16]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	490e      	ldr	r1, [pc, #56]	; (8005c10 <I2C_MasterRequestWrite+0xfc>)
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 f9eb 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <I2C_MasterRequestWrite+0xd2>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e010      	b.n	8005c08 <I2C_MasterRequestWrite+0xf4>
 8005be6:	897b      	ldrh	r3, [r7, #10]
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	611a      	str	r2, [r3, #16]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4907      	ldr	r1, [pc, #28]	; (8005c14 <I2C_MasterRequestWrite+0x100>)
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 f9db 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <I2C_MasterRequestWrite+0xf2>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <I2C_MasterRequestWrite+0xf4>
 8005c06:	2300      	movs	r3, #0
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	00010008 	.word	0x00010008
 8005c14:	00010002 	.word	0x00010002

08005c18 <I2C_MasterRequestRead>:
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	607a      	str	r2, [r7, #4]
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	460b      	mov	r3, r1
 8005c26:	817b      	strh	r3, [r7, #10]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d006      	beq.n	8005c52 <I2C_MasterRequestRead+0x3a>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d003      	beq.n	8005c52 <I2C_MasterRequestRead+0x3a>
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c50:	d108      	bne.n	8005c64 <I2C_MasterRequestRead+0x4c>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	e00b      	b.n	8005c7c <I2C_MasterRequestRead+0x64>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	2b11      	cmp	r3, #17
 8005c6a:	d107      	bne.n	8005c7c <I2C_MasterRequestRead+0x64>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f93b 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00d      	beq.n	8005cb0 <I2C_MasterRequestRead+0x98>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca2:	d103      	bne.n	8005cac <I2C_MasterRequestRead+0x94>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005caa:	641a      	str	r2, [r3, #64]	; 0x40
 8005cac:	2303      	movs	r3, #3
 8005cae:	e079      	b.n	8005da4 <I2C_MasterRequestRead+0x18c>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cb8:	d108      	bne.n	8005ccc <I2C_MasterRequestRead+0xb4>
 8005cba:	897b      	ldrh	r3, [r7, #10]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	f043 0301 	orr.w	r3, r3, #1
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	611a      	str	r2, [r3, #16]
 8005cca:	e05f      	b.n	8005d8c <I2C_MasterRequestRead+0x174>
 8005ccc:	897b      	ldrh	r3, [r7, #10]
 8005cce:	11db      	asrs	r3, r3, #7
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	f003 0306 	and.w	r3, r3, #6
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	f063 030f 	orn	r3, r3, #15
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	611a      	str	r2, [r3, #16]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	4930      	ldr	r1, [pc, #192]	; (8005dac <I2C_MasterRequestRead+0x194>)
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f961 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <I2C_MasterRequestRead+0xe2>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e054      	b.n	8005da4 <I2C_MasterRequestRead+0x18c>
 8005cfa:	897b      	ldrh	r3, [r7, #10]
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	611a      	str	r2, [r3, #16]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	4929      	ldr	r1, [pc, #164]	; (8005db0 <I2C_MasterRequestRead+0x198>)
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f951 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <I2C_MasterRequestRead+0x102>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e044      	b.n	8005da4 <I2C_MasterRequestRead+0x18c>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f8d9 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00d      	beq.n	8005d74 <I2C_MasterRequestRead+0x15c>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d66:	d103      	bne.n	8005d70 <I2C_MasterRequestRead+0x158>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d6e:	641a      	str	r2, [r3, #64]	; 0x40
 8005d70:	2303      	movs	r3, #3
 8005d72:	e017      	b.n	8005da4 <I2C_MasterRequestRead+0x18c>
 8005d74:	897b      	ldrh	r3, [r7, #10]
 8005d76:	11db      	asrs	r3, r3, #7
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	f003 0306 	and.w	r3, r3, #6
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	f063 030e 	orn	r3, r3, #14
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	611a      	str	r2, [r3, #16]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	4907      	ldr	r1, [pc, #28]	; (8005db0 <I2C_MasterRequestRead+0x198>)
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 f90d 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <I2C_MasterRequestRead+0x18a>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e000      	b.n	8005da4 <I2C_MasterRequestRead+0x18c>
 8005da2:	2300      	movs	r3, #0
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	00010008 	.word	0x00010008
 8005db0:	00010002 	.word	0x00010002

08005db4 <I2C_DMAAbort>:
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	617b      	str	r3, [r7, #20]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dcc:	74fb      	strb	r3, [r7, #19]
 8005dce:	4b4b      	ldr	r3, [pc, #300]	; (8005efc <I2C_DMAAbort+0x148>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	08db      	lsrs	r3, r3, #3
 8005dd4:	4a4a      	ldr	r2, [pc, #296]	; (8005f00 <I2C_DMAAbort+0x14c>)
 8005dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dda:	0a1a      	lsrs	r2, r3, #8
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	00da      	lsls	r2, r3, #3
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <I2C_DMAAbort+0x48>
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	f043 0220 	orr.w	r2, r3, #32
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40
 8005dfa:	e00a      	b.n	8005e12 <I2C_DMAAbort+0x5e>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e10:	d0ea      	beq.n	8005de8 <I2C_DMAAbort+0x34>
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <I2C_DMAAbort+0x6e>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1e:	2200      	movs	r2, #0
 8005e20:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <I2C_DMAAbort+0x7e>
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	2200      	movs	r2, #0
 8005e30:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2200      	movs	r2, #0
 8005e46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <I2C_DMAAbort+0xa4>
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e54:	2200      	movs	r2, #0
 8005e56:	651a      	str	r2, [r3, #80]	; 0x50
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <I2C_DMAAbort+0xb4>
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	2200      	movs	r2, #0
 8005e66:	651a      	str	r2, [r3, #80]	; 0x50
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0201 	bic.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b60      	cmp	r3, #96	; 0x60
 8005e82:	d10e      	bne.n	8005ea2 <I2C_DMAAbort+0xee>
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2200      	movs	r2, #0
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
 8005e9a:	6978      	ldr	r0, [r7, #20]
 8005e9c:	f7fe fcc0 	bl	8004820 <HAL_I2C_AbortCpltCallback>
 8005ea0:	e027      	b.n	8005ef2 <I2C_DMAAbort+0x13e>
 8005ea2:	7cfb      	ldrb	r3, [r7, #19]
 8005ea4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ea8:	2b28      	cmp	r3, #40	; 0x28
 8005eaa:	d117      	bne.n	8005edc <I2C_DMAAbort+0x128>
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2228      	movs	r2, #40	; 0x28
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005eda:	e007      	b.n	8005eec <I2C_DMAAbort+0x138>
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eec:	6978      	ldr	r0, [r7, #20]
 8005eee:	f7fb fdb7 	bl	8001a60 <HAL_I2C_ErrorCallback>
 8005ef2:	bf00      	nop
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000098 	.word	0x20000098
 8005f00:	14f8b589 	.word	0x14f8b589

08005f04 <I2C_WaitOnFlagUntilTimeout>:
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	4613      	mov	r3, r2
 8005f12:	71fb      	strb	r3, [r7, #7]
 8005f14:	e025      	b.n	8005f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1c:	d021      	beq.n	8005f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005f1e:	f7fc fd65 	bl	80029ec <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d302      	bcc.n	8005f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d116      	bne.n	8005f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	631a      	str	r2, [r3, #48]	; 0x30
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	f043 0220 	orr.w	r2, r3, #32
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e023      	b.n	8005faa <I2C_WaitOnFlagUntilTimeout+0xa6>
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	0c1b      	lsrs	r3, r3, #16
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d10d      	bne.n	8005f88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	43da      	mvns	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4013      	ands	r3, r2
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	bf0c      	ite	eq
 8005f7e:	2301      	moveq	r3, #1
 8005f80:	2300      	movne	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	e00c      	b.n	8005fa2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	43da      	mvns	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4013      	ands	r3, r2
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	bf0c      	ite	eq
 8005f9a:	2301      	moveq	r3, #1
 8005f9c:	2300      	movne	r3, #0
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d0b6      	beq.n	8005f16 <I2C_WaitOnFlagUntilTimeout+0x12>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	607a      	str	r2, [r7, #4]
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	e051      	b.n	8006066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd0:	d123      	bne.n	800601a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fea:	615a      	str	r2, [r3, #20]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f043 0204 	orr.w	r2, r3, #4
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	641a      	str	r2, [r3, #64]	; 0x40
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006016:	2301      	movs	r3, #1
 8006018:	e046      	b.n	80060a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006020:	d021      	beq.n	8006066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8006022:	f7fc fce3 	bl	80029ec <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	429a      	cmp	r2, r3
 8006030:	d302      	bcc.n	8006038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d116      	bne.n	8006066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	631a      	str	r2, [r3, #48]	; 0x30
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f043 0220 	orr.w	r2, r3, #32
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	641a      	str	r2, [r3, #64]	; 0x40
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006062:	2301      	movs	r3, #1
 8006064:	e020      	b.n	80060a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	0c1b      	lsrs	r3, r3, #16
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b01      	cmp	r3, #1
 800606e:	d10c      	bne.n	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	43da      	mvns	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4013      	ands	r3, r2
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	bf14      	ite	ne
 8006082:	2301      	movne	r3, #1
 8006084:	2300      	moveq	r3, #0
 8006086:	b2db      	uxtb	r3, r3
 8006088:	e00b      	b.n	80060a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	43da      	mvns	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4013      	ands	r3, r2
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d18d      	bne.n	8005fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80060a6:	2300      	movs	r3, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <I2C_WaitOnTXEFlagUntilTimeout>:
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	e02d      	b.n	800611a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 f900 	bl	80062c4 <I2C_IsAcknowledgeFailed>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e02d      	b.n	800612a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d021      	beq.n	800611a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80060d6:	f7fc fc89 	bl	80029ec <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d302      	bcc.n	80060ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d116      	bne.n	800611a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	631a      	str	r2, [r3, #48]	; 0x30
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	f043 0220 	orr.w	r2, r3, #32
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	641a      	str	r2, [r3, #64]	; 0x40
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006116:	2301      	movs	r3, #1
 8006118:	e007      	b.n	800612a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006124:	2b80      	cmp	r3, #128	; 0x80
 8006126:	d1ca      	bne.n	80060be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8006128:	2300      	movs	r3, #0
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <I2C_WaitOnBTFFlagUntilTimeout>:
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	607a      	str	r2, [r7, #4]
 800613e:	e02d      	b.n	800619c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f8bf 	bl	80062c4 <I2C_IsAcknowledgeFailed>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 800614c:	2301      	movs	r3, #1
 800614e:	e02d      	b.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d021      	beq.n	800619c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8006158:	f7fc fc48 	bl	80029ec <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	429a      	cmp	r2, r3
 8006166:	d302      	bcc.n	800616e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d116      	bne.n	800619c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	631a      	str	r2, [r3, #48]	; 0x30
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006188:	f043 0220 	orr.w	r2, r3, #32
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	641a      	str	r2, [r3, #64]	; 0x40
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006198:	2301      	movs	r3, #1
 800619a:	e007      	b.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d1ca      	bne.n	8006140 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 80061aa:	2300      	movs	r3, #0
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <I2C_WaitOnSTOPRequestThroughIT>:
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	2300      	movs	r3, #0
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	4b13      	ldr	r3, [pc, #76]	; (8006210 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	08db      	lsrs	r3, r3, #3
 80061c6:	4a13      	ldr	r2, [pc, #76]	; (8006214 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80061c8:	fba2 2303 	umull	r2, r3, r2, r3
 80061cc:	0a1a      	lsrs	r2, r3, #8
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3b01      	subs	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d107      	bne.n	80061f2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	f043 0220 	orr.w	r2, r3, #32
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	641a      	str	r2, [r3, #64]	; 0x40
 80061ee:	2301      	movs	r3, #1
 80061f0:	e008      	b.n	8006204 <I2C_WaitOnSTOPRequestThroughIT+0x50>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006200:	d0e9      	beq.n	80061d6 <I2C_WaitOnSTOPRequestThroughIT+0x22>
 8006202:	2300      	movs	r3, #0
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	20000098 	.word	0x20000098
 8006214:	14f8b589 	.word	0x14f8b589

08006218 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	e042      	b.n	80062ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b10      	cmp	r3, #16
 8006232:	d119      	bne.n	8006268 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0210 	mvn.w	r2, #16
 800623c:	615a      	str	r2, [r3, #20]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	641a      	str	r2, [r3, #64]	; 0x40
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006264:	2301      	movs	r3, #1
 8006266:	e029      	b.n	80062bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8006268:	f7fc fbc0 	bl	80029ec <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	429a      	cmp	r2, r3
 8006276:	d302      	bcc.n	800627e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d116      	bne.n	80062ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	; 0x30
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006298:	f043 0220 	orr.w	r2, r3, #32
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	641a      	str	r2, [r3, #64]	; 0x40
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062a8:	2301      	movs	r3, #1
 80062aa:	e007      	b.n	80062bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b40      	cmp	r3, #64	; 0x40
 80062b8:	d1b5      	bne.n	8006226 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 80062ba:	2300      	movs	r3, #0
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <I2C_IsAcknowledgeFailed>:
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062da:	d11b      	bne.n	8006314 <I2C_IsAcknowledgeFailed+0x50>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062e4:	615a      	str	r2, [r3, #20]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	f043 0204 	orr.w	r2, r3, #4
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	641a      	str	r2, [r3, #64]	; 0x40
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <I2C_IsAcknowledgeFailed+0x52>
 8006314:	2300      	movs	r3, #0
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <I2C_ConvertOtherXferOptions>:
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006332:	d103      	bne.n	800633c <I2C_ConvertOtherXferOptions+0x1a>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	62da      	str	r2, [r3, #44]	; 0x2c
 800633a:	e007      	b.n	800634c <I2C_ConvertOtherXferOptions+0x2a>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006344:	d102      	bne.n	800634c <I2C_ConvertOtherXferOptions+0x2a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2208      	movs	r2, #8
 800634a:	62da      	str	r2, [r3, #44]	; 0x2c
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_RCC_OscConfig>:
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_RCC_OscConfig+0x12>
 8006366:	2301      	movs	r3, #1
 8006368:	e267      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d075      	beq.n	8006462 <HAL_RCC_OscConfig+0x10a>
 8006376:	4b88      	ldr	r3, [pc, #544]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 030c 	and.w	r3, r3, #12
 800637e:	2b04      	cmp	r3, #4
 8006380:	d00c      	beq.n	800639c <HAL_RCC_OscConfig+0x44>
 8006382:	4b85      	ldr	r3, [pc, #532]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 030c 	and.w	r3, r3, #12
 800638a:	2b08      	cmp	r3, #8
 800638c:	d112      	bne.n	80063b4 <HAL_RCC_OscConfig+0x5c>
 800638e:	4b82      	ldr	r3, [pc, #520]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800639a:	d10b      	bne.n	80063b4 <HAL_RCC_OscConfig+0x5c>
 800639c:	4b7e      	ldr	r3, [pc, #504]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d05b      	beq.n	8006460 <HAL_RCC_OscConfig+0x108>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d157      	bne.n	8006460 <HAL_RCC_OscConfig+0x108>
 80063b0:	2301      	movs	r3, #1
 80063b2:	e242      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063bc:	d106      	bne.n	80063cc <HAL_RCC_OscConfig+0x74>
 80063be:	4b76      	ldr	r3, [pc, #472]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a75      	ldr	r2, [pc, #468]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	e01d      	b.n	8006408 <HAL_RCC_OscConfig+0xb0>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063d4:	d10c      	bne.n	80063f0 <HAL_RCC_OscConfig+0x98>
 80063d6:	4b70      	ldr	r3, [pc, #448]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a6f      	ldr	r2, [pc, #444]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	4b6d      	ldr	r3, [pc, #436]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a6c      	ldr	r2, [pc, #432]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	e00b      	b.n	8006408 <HAL_RCC_OscConfig+0xb0>
 80063f0:	4b69      	ldr	r3, [pc, #420]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a68      	ldr	r2, [pc, #416]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	4b66      	ldr	r3, [pc, #408]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a65      	ldr	r2, [pc, #404]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d013      	beq.n	8006438 <HAL_RCC_OscConfig+0xe0>
 8006410:	f7fc faec 	bl	80029ec <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0xd2>
 8006418:	f7fc fae8 	bl	80029ec <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b64      	cmp	r3, #100	; 0x64
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0xd2>
 8006426:	2303      	movs	r3, #3
 8006428:	e207      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 800642a:	4b5b      	ldr	r3, [pc, #364]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0f0      	beq.n	8006418 <HAL_RCC_OscConfig+0xc0>
 8006436:	e014      	b.n	8006462 <HAL_RCC_OscConfig+0x10a>
 8006438:	f7fc fad8 	bl	80029ec <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0xfa>
 8006440:	f7fc fad4 	bl	80029ec <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b64      	cmp	r3, #100	; 0x64
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0xfa>
 800644e:	2303      	movs	r3, #3
 8006450:	e1f3      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 8006452:	4b51      	ldr	r3, [pc, #324]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1f0      	bne.n	8006440 <HAL_RCC_OscConfig+0xe8>
 800645e:	e000      	b.n	8006462 <HAL_RCC_OscConfig+0x10a>
 8006460:	bf00      	nop
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d063      	beq.n	8006536 <HAL_RCC_OscConfig+0x1de>
 800646e:	4b4a      	ldr	r3, [pc, #296]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 030c 	and.w	r3, r3, #12
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <HAL_RCC_OscConfig+0x13a>
 800647a:	4b47      	ldr	r3, [pc, #284]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 030c 	and.w	r3, r3, #12
 8006482:	2b08      	cmp	r3, #8
 8006484:	d11c      	bne.n	80064c0 <HAL_RCC_OscConfig+0x168>
 8006486:	4b44      	ldr	r3, [pc, #272]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d116      	bne.n	80064c0 <HAL_RCC_OscConfig+0x168>
 8006492:	4b41      	ldr	r3, [pc, #260]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d005      	beq.n	80064aa <HAL_RCC_OscConfig+0x152>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d001      	beq.n	80064aa <HAL_RCC_OscConfig+0x152>
 80064a6:	2301      	movs	r3, #1
 80064a8:	e1c7      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 80064aa:	4b3b      	ldr	r3, [pc, #236]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4937      	ldr	r1, [pc, #220]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	600b      	str	r3, [r1, #0]
 80064be:	e03a      	b.n	8006536 <HAL_RCC_OscConfig+0x1de>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d020      	beq.n	800650a <HAL_RCC_OscConfig+0x1b2>
 80064c8:	4b34      	ldr	r3, [pc, #208]	; (800659c <HAL_RCC_OscConfig+0x244>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	f7fc fa8d 	bl	80029ec <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_OscConfig+0x190>
 80064d6:	f7fc fa89 	bl	80029ec <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x190>
 80064e4:	2303      	movs	r3, #3
 80064e6:	e1a8      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 80064e8:	4b2b      	ldr	r3, [pc, #172]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f0      	beq.n	80064d6 <HAL_RCC_OscConfig+0x17e>
 80064f4:	4b28      	ldr	r3, [pc, #160]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	4925      	ldr	r1, [pc, #148]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006504:	4313      	orrs	r3, r2
 8006506:	600b      	str	r3, [r1, #0]
 8006508:	e015      	b.n	8006536 <HAL_RCC_OscConfig+0x1de>
 800650a:	4b24      	ldr	r3, [pc, #144]	; (800659c <HAL_RCC_OscConfig+0x244>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	f7fc fa6c 	bl	80029ec <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x1d2>
 8006518:	f7fc fa68 	bl	80029ec <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x1d2>
 8006526:	2303      	movs	r3, #3
 8006528:	e187      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 800652a:	4b1b      	ldr	r3, [pc, #108]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <HAL_RCC_OscConfig+0x1c0>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0308 	and.w	r3, r3, #8
 800653e:	2b00      	cmp	r3, #0
 8006540:	d036      	beq.n	80065b0 <HAL_RCC_OscConfig+0x258>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d016      	beq.n	8006578 <HAL_RCC_OscConfig+0x220>
 800654a:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <HAL_RCC_OscConfig+0x248>)
 800654c:	2201      	movs	r2, #1
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	f7fc fa4c 	bl	80029ec <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]
 8006556:	e008      	b.n	800656a <HAL_RCC_OscConfig+0x212>
 8006558:	f7fc fa48 	bl	80029ec <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x212>
 8006566:	2303      	movs	r3, #3
 8006568:	e167      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 800656a:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800656c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f0      	beq.n	8006558 <HAL_RCC_OscConfig+0x200>
 8006576:	e01b      	b.n	80065b0 <HAL_RCC_OscConfig+0x258>
 8006578:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <HAL_RCC_OscConfig+0x248>)
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	f7fc fa35 	bl	80029ec <HAL_GetTick>
 8006582:	6138      	str	r0, [r7, #16]
 8006584:	e00e      	b.n	80065a4 <HAL_RCC_OscConfig+0x24c>
 8006586:	f7fc fa31 	bl	80029ec <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d907      	bls.n	80065a4 <HAL_RCC_OscConfig+0x24c>
 8006594:	2303      	movs	r3, #3
 8006596:	e150      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 8006598:	40023800 	.word	0x40023800
 800659c:	42470000 	.word	0x42470000
 80065a0:	42470e80 	.word	0x42470e80
 80065a4:	4b88      	ldr	r3, [pc, #544]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1ea      	bne.n	8006586 <HAL_RCC_OscConfig+0x22e>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8097 	beq.w	80066ec <HAL_RCC_OscConfig+0x394>
 80065be:	2300      	movs	r3, #0
 80065c0:	75fb      	strb	r3, [r7, #23]
 80065c2:	4b81      	ldr	r3, [pc, #516]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10f      	bne.n	80065ee <HAL_RCC_OscConfig+0x296>
 80065ce:	2300      	movs	r3, #0
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	4b7d      	ldr	r3, [pc, #500]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	4a7c      	ldr	r2, [pc, #496]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065dc:	6413      	str	r3, [r2, #64]	; 0x40
 80065de:	4b7a      	ldr	r3, [pc, #488]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e6:	60bb      	str	r3, [r7, #8]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2301      	movs	r3, #1
 80065ec:	75fb      	strb	r3, [r7, #23]
 80065ee:	4b77      	ldr	r3, [pc, #476]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d118      	bne.n	800662c <HAL_RCC_OscConfig+0x2d4>
 80065fa:	4b74      	ldr	r3, [pc, #464]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a73      	ldr	r2, [pc, #460]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 8006600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	f7fc f9f1 	bl	80029ec <HAL_GetTick>
 800660a:	6138      	str	r0, [r7, #16]
 800660c:	e008      	b.n	8006620 <HAL_RCC_OscConfig+0x2c8>
 800660e:	f7fc f9ed 	bl	80029ec <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x2c8>
 800661c:	2303      	movs	r3, #3
 800661e:	e10c      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 8006620:	4b6a      	ldr	r3, [pc, #424]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0f0      	beq.n	800660e <HAL_RCC_OscConfig+0x2b6>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d106      	bne.n	8006642 <HAL_RCC_OscConfig+0x2ea>
 8006634:	4b64      	ldr	r3, [pc, #400]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	4a63      	ldr	r2, [pc, #396]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	6713      	str	r3, [r2, #112]	; 0x70
 8006640:	e01c      	b.n	800667c <HAL_RCC_OscConfig+0x324>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	2b05      	cmp	r3, #5
 8006648:	d10c      	bne.n	8006664 <HAL_RCC_OscConfig+0x30c>
 800664a:	4b5f      	ldr	r3, [pc, #380]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800664c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664e:	4a5e      	ldr	r2, [pc, #376]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006650:	f043 0304 	orr.w	r3, r3, #4
 8006654:	6713      	str	r3, [r2, #112]	; 0x70
 8006656:	4b5c      	ldr	r3, [pc, #368]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665a:	4a5b      	ldr	r2, [pc, #364]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	6713      	str	r3, [r2, #112]	; 0x70
 8006662:	e00b      	b.n	800667c <HAL_RCC_OscConfig+0x324>
 8006664:	4b58      	ldr	r3, [pc, #352]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	4a57      	ldr	r2, [pc, #348]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800666a:	f023 0301 	bic.w	r3, r3, #1
 800666e:	6713      	str	r3, [r2, #112]	; 0x70
 8006670:	4b55      	ldr	r3, [pc, #340]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006674:	4a54      	ldr	r2, [pc, #336]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006676:	f023 0304 	bic.w	r3, r3, #4
 800667a:	6713      	str	r3, [r2, #112]	; 0x70
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d015      	beq.n	80066b0 <HAL_RCC_OscConfig+0x358>
 8006684:	f7fc f9b2 	bl	80029ec <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]
 800668a:	e00a      	b.n	80066a2 <HAL_RCC_OscConfig+0x34a>
 800668c:	f7fc f9ae 	bl	80029ec <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	f241 3288 	movw	r2, #5000	; 0x1388
 800669a:	4293      	cmp	r3, r2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x34a>
 800669e:	2303      	movs	r3, #3
 80066a0:	e0cb      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 80066a2:	4b49      	ldr	r3, [pc, #292]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0ee      	beq.n	800668c <HAL_RCC_OscConfig+0x334>
 80066ae:	e014      	b.n	80066da <HAL_RCC_OscConfig+0x382>
 80066b0:	f7fc f99c 	bl	80029ec <HAL_GetTick>
 80066b4:	6138      	str	r0, [r7, #16]
 80066b6:	e00a      	b.n	80066ce <HAL_RCC_OscConfig+0x376>
 80066b8:	f7fc f998 	bl	80029ec <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x376>
 80066ca:	2303      	movs	r3, #3
 80066cc:	e0b5      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 80066ce:	4b3e      	ldr	r3, [pc, #248]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1ee      	bne.n	80066b8 <HAL_RCC_OscConfig+0x360>
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d105      	bne.n	80066ec <HAL_RCC_OscConfig+0x394>
 80066e0:	4b39      	ldr	r3, [pc, #228]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	4a38      	ldr	r2, [pc, #224]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ea:	6413      	str	r3, [r2, #64]	; 0x40
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80a1 	beq.w	8006838 <HAL_RCC_OscConfig+0x4e0>
 80066f6:	4b34      	ldr	r3, [pc, #208]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 030c 	and.w	r3, r3, #12
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d05c      	beq.n	80067bc <HAL_RCC_OscConfig+0x464>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d141      	bne.n	800678e <HAL_RCC_OscConfig+0x436>
 800670a:	4b31      	ldr	r3, [pc, #196]	; (80067d0 <HAL_RCC_OscConfig+0x478>)
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	f7fc f96c 	bl	80029ec <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x3d2>
 8006718:	f7fc f968 	bl	80029ec <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x3d2>
 8006726:	2303      	movs	r3, #3
 8006728:	e087      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 800672a:	4b27      	ldr	r3, [pc, #156]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1f0      	bne.n	8006718 <HAL_RCC_OscConfig+0x3c0>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69da      	ldr	r2, [r3, #28]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	019b      	lsls	r3, r3, #6
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	3b01      	subs	r3, #1
 8006750:	041b      	lsls	r3, r3, #16
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	061b      	lsls	r3, r3, #24
 800675a:	491b      	ldr	r1, [pc, #108]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800675c:	4313      	orrs	r3, r2
 800675e:	604b      	str	r3, [r1, #4]
 8006760:	4b1b      	ldr	r3, [pc, #108]	; (80067d0 <HAL_RCC_OscConfig+0x478>)
 8006762:	2201      	movs	r2, #1
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	f7fc f941 	bl	80029ec <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x428>
 800676e:	f7fc f93d 	bl	80029ec <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x428>
 800677c:	2303      	movs	r3, #3
 800677e:	e05c      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 8006780:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0f0      	beq.n	800676e <HAL_RCC_OscConfig+0x416>
 800678c:	e054      	b.n	8006838 <HAL_RCC_OscConfig+0x4e0>
 800678e:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <HAL_RCC_OscConfig+0x478>)
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	f7fc f92a 	bl	80029ec <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x456>
 800679c:	f7fc f926 	bl	80029ec <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x456>
 80067aa:	2303      	movs	r3, #3
 80067ac:	e045      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 80067ae:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1f0      	bne.n	800679c <HAL_RCC_OscConfig+0x444>
 80067ba:	e03d      	b.n	8006838 <HAL_RCC_OscConfig+0x4e0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d107      	bne.n	80067d4 <HAL_RCC_OscConfig+0x47c>
 80067c4:	2301      	movs	r3, #1
 80067c6:	e038      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 80067c8:	40023800 	.word	0x40023800
 80067cc:	40007000 	.word	0x40007000
 80067d0:	42470060 	.word	0x42470060
 80067d4:	4b1b      	ldr	r3, [pc, #108]	; (8006844 <HAL_RCC_OscConfig+0x4ec>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d028      	beq.n	8006834 <HAL_RCC_OscConfig+0x4dc>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d121      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d11a      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006804:	4013      	ands	r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800680a:	0192      	lsls	r2, r2, #6
 800680c:	4293      	cmp	r3, r2
 800680e:	d111      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	3b01      	subs	r3, #1
 800681e:	041b      	lsls	r3, r3, #16
 8006820:	429a      	cmp	r2, r3
 8006822:	d107      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	061b      	lsls	r3, r3, #24
 8006830:	429a      	cmp	r2, r3
 8006832:	d001      	beq.n	8006838 <HAL_RCC_OscConfig+0x4e0>
 8006834:	2301      	movs	r3, #1
 8006836:	e000      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 8006838:	2300      	movs	r3, #0
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	40023800 	.word	0x40023800

08006848 <HAL_RCC_ClockConfig>:
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_RCC_ClockConfig+0x14>
 8006858:	2301      	movs	r3, #1
 800685a:	e0cc      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
 800685c:	4b68      	ldr	r3, [pc, #416]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d90c      	bls.n	8006884 <HAL_RCC_ClockConfig+0x3c>
 800686a:	4b65      	ldr	r3, [pc, #404]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	4b63      	ldr	r3, [pc, #396]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d001      	beq.n	8006884 <HAL_RCC_ClockConfig+0x3c>
 8006880:	2301      	movs	r3, #1
 8006882:	e0b8      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d020      	beq.n	80068d2 <HAL_RCC_ClockConfig+0x8a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x60>
 800689c:	4b59      	ldr	r3, [pc, #356]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	4a58      	ldr	r2, [pc, #352]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068a6:	6093      	str	r3, [r2, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_RCC_ClockConfig+0x78>
 80068b4:	4b53      	ldr	r3, [pc, #332]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	4a52      	ldr	r2, [pc, #328]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068be:	6093      	str	r3, [r2, #8]
 80068c0:	4b50      	ldr	r3, [pc, #320]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	494d      	ldr	r1, [pc, #308]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	608b      	str	r3, [r1, #8]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d044      	beq.n	8006968 <HAL_RCC_ClockConfig+0x120>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d107      	bne.n	80068f6 <HAL_RCC_ClockConfig+0xae>
 80068e6:	4b47      	ldr	r3, [pc, #284]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d119      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e07f      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d003      	beq.n	8006906 <HAL_RCC_ClockConfig+0xbe>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b03      	cmp	r3, #3
 8006904:	d107      	bne.n	8006916 <HAL_RCC_ClockConfig+0xce>
 8006906:	4b3f      	ldr	r3, [pc, #252]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
 8006912:	2301      	movs	r3, #1
 8006914:	e06f      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
 8006916:	4b3b      	ldr	r3, [pc, #236]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
 8006922:	2301      	movs	r3, #1
 8006924:	e067      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
 8006926:	4b37      	ldr	r3, [pc, #220]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f023 0203 	bic.w	r2, r3, #3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4934      	ldr	r1, [pc, #208]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006934:	4313      	orrs	r3, r2
 8006936:	608b      	str	r3, [r1, #8]
 8006938:	f7fc f858 	bl	80029ec <HAL_GetTick>
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	e00a      	b.n	8006956 <HAL_RCC_ClockConfig+0x10e>
 8006940:	f7fc f854 	bl	80029ec <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	f241 3288 	movw	r2, #5000	; 0x1388
 800694e:	4293      	cmp	r3, r2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_ClockConfig+0x10e>
 8006952:	2303      	movs	r3, #3
 8006954:	e04f      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
 8006956:	4b2b      	ldr	r3, [pc, #172]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 020c 	and.w	r2, r3, #12
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	429a      	cmp	r2, r3
 8006966:	d1eb      	bne.n	8006940 <HAL_RCC_ClockConfig+0xf8>
 8006968:	4b25      	ldr	r3, [pc, #148]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d20c      	bcs.n	8006990 <HAL_RCC_ClockConfig+0x148>
 8006976:	4b22      	ldr	r3, [pc, #136]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	4b20      	ldr	r3, [pc, #128]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0307 	and.w	r3, r3, #7
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d001      	beq.n	8006990 <HAL_RCC_ClockConfig+0x148>
 800698c:	2301      	movs	r3, #1
 800698e:	e032      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d008      	beq.n	80069ae <HAL_RCC_ClockConfig+0x166>
 800699c:	4b19      	ldr	r3, [pc, #100]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	4916      	ldr	r1, [pc, #88]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	608b      	str	r3, [r1, #8]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d009      	beq.n	80069ce <HAL_RCC_ClockConfig+0x186>
 80069ba:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	490e      	ldr	r1, [pc, #56]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	608b      	str	r3, [r1, #8]
 80069ce:	f000 f821 	bl	8006a14 <HAL_RCC_GetSysClockFreq>
 80069d2:	4602      	mov	r2, r0
 80069d4:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	091b      	lsrs	r3, r3, #4
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	490a      	ldr	r1, [pc, #40]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 80069e0:	5ccb      	ldrb	r3, [r1, r3]
 80069e2:	fa22 f303 	lsr.w	r3, r2, r3
 80069e6:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <HAL_RCC_ClockConfig+0x1c8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fb ffb8 	bl	8002964 <HAL_InitTick>
 80069f4:	2300      	movs	r3, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	40023c00 	.word	0x40023c00
 8006a04:	40023800 	.word	0x40023800
 8006a08:	0800b130 	.word	0x0800b130
 8006a0c:	20000098 	.word	0x20000098
 8006a10:	2000009c 	.word	0x2000009c

08006a14 <HAL_RCC_GetSysClockFreq>:
 8006a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a18:	b090      	sub	sp, #64	; 0x40
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a20:	2300      	movs	r3, #0
 8006a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a24:	2300      	movs	r3, #0
 8006a26:	633b      	str	r3, [r7, #48]	; 0x30
 8006a28:	2300      	movs	r3, #0
 8006a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a2c:	4b59      	ldr	r3, [pc, #356]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 030c 	and.w	r3, r3, #12
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d00d      	beq.n	8006a54 <HAL_RCC_GetSysClockFreq+0x40>
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	f200 80a1 	bhi.w	8006b80 <HAL_RCC_GetSysClockFreq+0x16c>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <HAL_RCC_GetSysClockFreq+0x34>
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d003      	beq.n	8006a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8006a46:	e09b      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x16c>
 8006a48:	4b53      	ldr	r3, [pc, #332]	; (8006b98 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a4c:	e09b      	b.n	8006b86 <HAL_RCC_GetSysClockFreq+0x172>
 8006a4e:	4b53      	ldr	r3, [pc, #332]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8006a50:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a52:	e098      	b.n	8006b86 <HAL_RCC_GetSysClockFreq+0x172>
 8006a54:	4b4f      	ldr	r3, [pc, #316]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5e:	4b4d      	ldr	r3, [pc, #308]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d028      	beq.n	8006abc <HAL_RCC_GetSysClockFreq+0xa8>
 8006a6a:	4b4a      	ldr	r3, [pc, #296]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	099b      	lsrs	r3, r3, #6
 8006a70:	2200      	movs	r2, #0
 8006a72:	623b      	str	r3, [r7, #32]
 8006a74:	627a      	str	r2, [r7, #36]	; 0x24
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4b47      	ldr	r3, [pc, #284]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8006a80:	fb03 f201 	mul.w	r2, r3, r1
 8006a84:	2300      	movs	r3, #0
 8006a86:	fb00 f303 	mul.w	r3, r0, r3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	4a43      	ldr	r2, [pc, #268]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8006a8e:	fba0 1202 	umull	r1, r2, r0, r2
 8006a92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a94:	460a      	mov	r2, r1
 8006a96:	62ba      	str	r2, [r7, #40]	; 0x28
 8006a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a9a:	4413      	add	r3, r2
 8006a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	61bb      	str	r3, [r7, #24]
 8006aa4:	61fa      	str	r2, [r7, #28]
 8006aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006aaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006aae:	f7fa f8f3 	bl	8000c98 <__aeabi_uldivmod>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aba:	e053      	b.n	8006b64 <HAL_RCC_GetSysClockFreq+0x150>
 8006abc:	4b35      	ldr	r3, [pc, #212]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	099b      	lsrs	r3, r3, #6
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	617a      	str	r2, [r7, #20]
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006ace:	f04f 0b00 	mov.w	fp, #0
 8006ad2:	4652      	mov	r2, sl
 8006ad4:	465b      	mov	r3, fp
 8006ad6:	f04f 0000 	mov.w	r0, #0
 8006ada:	f04f 0100 	mov.w	r1, #0
 8006ade:	0159      	lsls	r1, r3, #5
 8006ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ae4:	0150      	lsls	r0, r2, #5
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	ebb2 080a 	subs.w	r8, r2, sl
 8006aee:	eb63 090b 	sbc.w	r9, r3, fp
 8006af2:	f04f 0200 	mov.w	r2, #0
 8006af6:	f04f 0300 	mov.w	r3, #0
 8006afa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006afe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006b02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006b06:	ebb2 0408 	subs.w	r4, r2, r8
 8006b0a:	eb63 0509 	sbc.w	r5, r3, r9
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	f04f 0300 	mov.w	r3, #0
 8006b16:	00eb      	lsls	r3, r5, #3
 8006b18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b1c:	00e2      	lsls	r2, r4, #3
 8006b1e:	4614      	mov	r4, r2
 8006b20:	461d      	mov	r5, r3
 8006b22:	eb14 030a 	adds.w	r3, r4, sl
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	eb45 030b 	adc.w	r3, r5, fp
 8006b2c:	607b      	str	r3, [r7, #4]
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	028b      	lsls	r3, r1, #10
 8006b3e:	4621      	mov	r1, r4
 8006b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b44:	4621      	mov	r1, r4
 8006b46:	028a      	lsls	r2, r1, #10
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4e:	2200      	movs	r2, #0
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	60fa      	str	r2, [r7, #12]
 8006b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b58:	f7fa f89e 	bl	8000c98 <__aeabi_uldivmod>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4613      	mov	r3, r2
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b64:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	0c1b      	lsrs	r3, r3, #16
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	3301      	adds	r3, #1
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	633b      	str	r3, [r7, #48]	; 0x30
 8006b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b7e:	e002      	b.n	8006b86 <HAL_RCC_GetSysClockFreq+0x172>
 8006b80:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <HAL_RCC_GetSysClockFreq+0x184>)
 8006b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b84:	bf00      	nop
 8006b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3740      	adds	r7, #64	; 0x40
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b92:	bf00      	nop
 8006b94:	40023800 	.word	0x40023800
 8006b98:	00f42400 	.word	0x00f42400
 8006b9c:	017d7840 	.word	0x017d7840

08006ba0 <HAL_RCC_GetHCLKFreq>:
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	4b03      	ldr	r3, [pc, #12]	; (8006bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	20000098 	.word	0x20000098

08006bb8 <HAL_RCC_GetPCLK1Freq>:
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	f7ff fff0 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	0a9b      	lsrs	r3, r3, #10
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	4903      	ldr	r1, [pc, #12]	; (8006bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bce:	5ccb      	ldrb	r3, [r1, r3]
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	0800b140 	.word	0x0800b140

08006be0 <HAL_RCC_GetPCLK2Freq>:
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	f7ff ffdc 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8006be8:	4602      	mov	r2, r0
 8006bea:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	0b5b      	lsrs	r3, r3, #13
 8006bf0:	f003 0307 	and.w	r3, r3, #7
 8006bf4:	4903      	ldr	r1, [pc, #12]	; (8006c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bf6:	5ccb      	ldrb	r3, [r1, r3]
 8006bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40023800 	.word	0x40023800
 8006c04:	0800b140 	.word	0x0800b140

08006c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e041      	b.n	8006c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d106      	bne.n	8006c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7fb fcae 	bl	8002590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3304      	adds	r3, #4
 8006c44:	4619      	mov	r1, r3
 8006c46:	4610      	mov	r0, r2
 8006c48:	f000 ff14 	bl	8007a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d001      	beq.n	8006cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e044      	b.n	8006d4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1e      	ldr	r2, [pc, #120]	; (8006d58 <HAL_TIM_Base_Start_IT+0xb0>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d018      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x6c>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cea:	d013      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x6c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a1a      	ldr	r2, [pc, #104]	; (8006d5c <HAL_TIM_Base_Start_IT+0xb4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00e      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x6c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a19      	ldr	r2, [pc, #100]	; (8006d60 <HAL_TIM_Base_Start_IT+0xb8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d009      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x6c>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a17      	ldr	r2, [pc, #92]	; (8006d64 <HAL_TIM_Base_Start_IT+0xbc>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d004      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x6c>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a16      	ldr	r2, [pc, #88]	; (8006d68 <HAL_TIM_Base_Start_IT+0xc0>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d111      	bne.n	8006d38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 0307 	and.w	r3, r3, #7
 8006d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b06      	cmp	r3, #6
 8006d24:	d010      	beq.n	8006d48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f042 0201 	orr.w	r2, r2, #1
 8006d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d36:	e007      	b.n	8006d48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f042 0201 	orr.w	r2, r2, #1
 8006d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40000400 	.word	0x40000400
 8006d60:	40000800 	.word	0x40000800
 8006d64:	40000c00 	.word	0x40000c00
 8006d68:	40014000 	.word	0x40014000

08006d6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0201 	bic.w	r2, r2, #1
 8006d82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6a1a      	ldr	r2, [r3, #32]
 8006d8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d8e:	4013      	ands	r3, r2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10f      	bne.n	8006db4 <HAL_TIM_Base_Stop_IT+0x48>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6a1a      	ldr	r2, [r3, #32]
 8006d9a:	f240 4344 	movw	r3, #1092	; 0x444
 8006d9e:	4013      	ands	r3, r2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d107      	bne.n	8006db4 <HAL_TIM_Base_Stop_IT+0x48>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0201 	bic.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e041      	b.n	8006e60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d106      	bne.n	8006df6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7fb fc4b 	bl	800268c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3304      	adds	r3, #4
 8006e06:	4619      	mov	r1, r3
 8006e08:	4610      	mov	r0, r2
 8006e0a:	f000 fe33 	bl	8007a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d109      	bne.n	8006e8c <HAL_TIM_PWM_Start+0x24>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	bf14      	ite	ne
 8006e84:	2301      	movne	r3, #1
 8006e86:	2300      	moveq	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	e022      	b.n	8006ed2 <HAL_TIM_PWM_Start+0x6a>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d109      	bne.n	8006ea6 <HAL_TIM_PWM_Start+0x3e>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	bf14      	ite	ne
 8006e9e:	2301      	movne	r3, #1
 8006ea0:	2300      	moveq	r3, #0
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	e015      	b.n	8006ed2 <HAL_TIM_PWM_Start+0x6a>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d109      	bne.n	8006ec0 <HAL_TIM_PWM_Start+0x58>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	bf14      	ite	ne
 8006eb8:	2301      	movne	r3, #1
 8006eba:	2300      	moveq	r3, #0
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	e008      	b.n	8006ed2 <HAL_TIM_PWM_Start+0x6a>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	bf14      	ite	ne
 8006ecc:	2301      	movne	r3, #1
 8006ece:	2300      	moveq	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e068      	b.n	8006fac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d104      	bne.n	8006eea <HAL_TIM_PWM_Start+0x82>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ee8:	e013      	b.n	8006f12 <HAL_TIM_PWM_Start+0xaa>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d104      	bne.n	8006efa <HAL_TIM_PWM_Start+0x92>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ef8:	e00b      	b.n	8006f12 <HAL_TIM_PWM_Start+0xaa>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d104      	bne.n	8006f0a <HAL_TIM_PWM_Start+0xa2>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f08:	e003      	b.n	8006f12 <HAL_TIM_PWM_Start+0xaa>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2201      	movs	r2, #1
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f001 f9e5 	bl	80082ea <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a23      	ldr	r2, [pc, #140]	; (8006fb4 <HAL_TIM_PWM_Start+0x14c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d107      	bne.n	8006f3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a1d      	ldr	r2, [pc, #116]	; (8006fb4 <HAL_TIM_PWM_Start+0x14c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d018      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x10e>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4c:	d013      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x10e>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a19      	ldr	r2, [pc, #100]	; (8006fb8 <HAL_TIM_PWM_Start+0x150>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00e      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x10e>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a17      	ldr	r2, [pc, #92]	; (8006fbc <HAL_TIM_PWM_Start+0x154>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d009      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x10e>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a16      	ldr	r2, [pc, #88]	; (8006fc0 <HAL_TIM_PWM_Start+0x158>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d004      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x10e>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a14      	ldr	r2, [pc, #80]	; (8006fc4 <HAL_TIM_PWM_Start+0x15c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d111      	bne.n	8006f9a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b06      	cmp	r3, #6
 8006f86:	d010      	beq.n	8006faa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0201 	orr.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f98:	e007      	b.n	8006faa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f042 0201 	orr.w	r2, r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	40010000 	.word	0x40010000
 8006fb8:	40000400 	.word	0x40000400
 8006fbc:	40000800 	.word	0x40000800
 8006fc0:	40000c00 	.word	0x40000c00
 8006fc4:	40014000 	.word	0x40014000

08006fc8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 f985 	bl	80082ea <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a29      	ldr	r2, [pc, #164]	; (800708c <HAL_TIM_PWM_Stop+0xc4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d117      	bne.n	800701a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6a1a      	ldr	r2, [r3, #32]
 8006ff0:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10f      	bne.n	800701a <HAL_TIM_PWM_Stop+0x52>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6a1a      	ldr	r2, [r3, #32]
 8007000:	f240 4344 	movw	r3, #1092	; 0x444
 8007004:	4013      	ands	r3, r2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d107      	bne.n	800701a <HAL_TIM_PWM_Stop+0x52>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007018:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6a1a      	ldr	r2, [r3, #32]
 8007020:	f241 1311 	movw	r3, #4369	; 0x1111
 8007024:	4013      	ands	r3, r2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10f      	bne.n	800704a <HAL_TIM_PWM_Stop+0x82>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6a1a      	ldr	r2, [r3, #32]
 8007030:	f240 4344 	movw	r3, #1092	; 0x444
 8007034:	4013      	ands	r3, r2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d107      	bne.n	800704a <HAL_TIM_PWM_Stop+0x82>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0201 	bic.w	r2, r2, #1
 8007048:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <HAL_TIM_PWM_Stop+0x92>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007058:	e013      	b.n	8007082 <HAL_TIM_PWM_Stop+0xba>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b04      	cmp	r3, #4
 800705e:	d104      	bne.n	800706a <HAL_TIM_PWM_Stop+0xa2>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007068:	e00b      	b.n	8007082 <HAL_TIM_PWM_Stop+0xba>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b08      	cmp	r3, #8
 800706e:	d104      	bne.n	800707a <HAL_TIM_PWM_Stop+0xb2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007078:	e003      	b.n	8007082 <HAL_TIM_PWM_Stop+0xba>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	40010000 	.word	0x40010000

08007090 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e041      	b.n	8007126 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d106      	bne.n	80070bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7fb fb26 	bl	8002708 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3304      	adds	r3, #4
 80070cc:	4619      	mov	r1, r3
 80070ce:	4610      	mov	r0, r2
 80070d0:	f000 fcd0 	bl	8007a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
	...

08007130 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d104      	bne.n	800714e <HAL_TIM_IC_Start_IT+0x1e>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800714a:	b2db      	uxtb	r3, r3
 800714c:	e013      	b.n	8007176 <HAL_TIM_IC_Start_IT+0x46>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b04      	cmp	r3, #4
 8007152:	d104      	bne.n	800715e <HAL_TIM_IC_Start_IT+0x2e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800715a:	b2db      	uxtb	r3, r3
 800715c:	e00b      	b.n	8007176 <HAL_TIM_IC_Start_IT+0x46>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b08      	cmp	r3, #8
 8007162:	d104      	bne.n	800716e <HAL_TIM_IC_Start_IT+0x3e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800716a:	b2db      	uxtb	r3, r3
 800716c:	e003      	b.n	8007176 <HAL_TIM_IC_Start_IT+0x46>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007174:	b2db      	uxtb	r3, r3
 8007176:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d104      	bne.n	8007188 <HAL_TIM_IC_Start_IT+0x58>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007184:	b2db      	uxtb	r3, r3
 8007186:	e013      	b.n	80071b0 <HAL_TIM_IC_Start_IT+0x80>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2b04      	cmp	r3, #4
 800718c:	d104      	bne.n	8007198 <HAL_TIM_IC_Start_IT+0x68>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007194:	b2db      	uxtb	r3, r3
 8007196:	e00b      	b.n	80071b0 <HAL_TIM_IC_Start_IT+0x80>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2b08      	cmp	r3, #8
 800719c:	d104      	bne.n	80071a8 <HAL_TIM_IC_Start_IT+0x78>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	e003      	b.n	80071b0 <HAL_TIM_IC_Start_IT+0x80>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d102      	bne.n	80071be <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80071b8:	7b7b      	ldrb	r3, [r7, #13]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d001      	beq.n	80071c2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e0c2      	b.n	8007348 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d104      	bne.n	80071d2 <HAL_TIM_IC_Start_IT+0xa2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071d0:	e013      	b.n	80071fa <HAL_TIM_IC_Start_IT+0xca>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d104      	bne.n	80071e2 <HAL_TIM_IC_Start_IT+0xb2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e0:	e00b      	b.n	80071fa <HAL_TIM_IC_Start_IT+0xca>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d104      	bne.n	80071f2 <HAL_TIM_IC_Start_IT+0xc2>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f0:	e003      	b.n	80071fa <HAL_TIM_IC_Start_IT+0xca>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2202      	movs	r2, #2
 80071f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d104      	bne.n	800720a <HAL_TIM_IC_Start_IT+0xda>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007208:	e013      	b.n	8007232 <HAL_TIM_IC_Start_IT+0x102>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b04      	cmp	r3, #4
 800720e:	d104      	bne.n	800721a <HAL_TIM_IC_Start_IT+0xea>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007218:	e00b      	b.n	8007232 <HAL_TIM_IC_Start_IT+0x102>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b08      	cmp	r3, #8
 800721e:	d104      	bne.n	800722a <HAL_TIM_IC_Start_IT+0xfa>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007228:	e003      	b.n	8007232 <HAL_TIM_IC_Start_IT+0x102>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2202      	movs	r2, #2
 800722e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b0c      	cmp	r3, #12
 8007236:	d841      	bhi.n	80072bc <HAL_TIM_IC_Start_IT+0x18c>
 8007238:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <HAL_TIM_IC_Start_IT+0x110>)
 800723a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723e:	bf00      	nop
 8007240:	08007275 	.word	0x08007275
 8007244:	080072bd 	.word	0x080072bd
 8007248:	080072bd 	.word	0x080072bd
 800724c:	080072bd 	.word	0x080072bd
 8007250:	08007287 	.word	0x08007287
 8007254:	080072bd 	.word	0x080072bd
 8007258:	080072bd 	.word	0x080072bd
 800725c:	080072bd 	.word	0x080072bd
 8007260:	08007299 	.word	0x08007299
 8007264:	080072bd 	.word	0x080072bd
 8007268:	080072bd 	.word	0x080072bd
 800726c:	080072bd 	.word	0x080072bd
 8007270:	080072ab 	.word	0x080072ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0202 	orr.w	r2, r2, #2
 8007282:	60da      	str	r2, [r3, #12]
      break;
 8007284:	e01d      	b.n	80072c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f042 0204 	orr.w	r2, r2, #4
 8007294:	60da      	str	r2, [r3, #12]
      break;
 8007296:	e014      	b.n	80072c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0208 	orr.w	r2, r2, #8
 80072a6:	60da      	str	r2, [r3, #12]
      break;
 80072a8:	e00b      	b.n	80072c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68da      	ldr	r2, [r3, #12]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f042 0210 	orr.w	r2, r2, #16
 80072b8:	60da      	str	r2, [r3, #12]
      break;
 80072ba:	e002      	b.n	80072c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	73fb      	strb	r3, [r7, #15]
      break;
 80072c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d13e      	bne.n	8007346 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2201      	movs	r2, #1
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f001 f80a 	bl	80082ea <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a1d      	ldr	r2, [pc, #116]	; (8007350 <HAL_TIM_IC_Start_IT+0x220>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d018      	beq.n	8007312 <HAL_TIM_IC_Start_IT+0x1e2>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e8:	d013      	beq.n	8007312 <HAL_TIM_IC_Start_IT+0x1e2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a19      	ldr	r2, [pc, #100]	; (8007354 <HAL_TIM_IC_Start_IT+0x224>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d00e      	beq.n	8007312 <HAL_TIM_IC_Start_IT+0x1e2>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a17      	ldr	r2, [pc, #92]	; (8007358 <HAL_TIM_IC_Start_IT+0x228>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d009      	beq.n	8007312 <HAL_TIM_IC_Start_IT+0x1e2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a16      	ldr	r2, [pc, #88]	; (800735c <HAL_TIM_IC_Start_IT+0x22c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d004      	beq.n	8007312 <HAL_TIM_IC_Start_IT+0x1e2>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a14      	ldr	r2, [pc, #80]	; (8007360 <HAL_TIM_IC_Start_IT+0x230>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d111      	bne.n	8007336 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	2b06      	cmp	r3, #6
 8007322:	d010      	beq.n	8007346 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f042 0201 	orr.w	r2, r2, #1
 8007332:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007334:	e007      	b.n	8007346 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f042 0201 	orr.w	r2, r2, #1
 8007344:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007346:	7bfb      	ldrb	r3, [r7, #15]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	40010000 	.word	0x40010000
 8007354:	40000400 	.word	0x40000400
 8007358:	40000800 	.word	0x40000800
 800735c:	40000c00 	.word	0x40000c00
 8007360:	40014000 	.word	0x40014000

08007364 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b0c      	cmp	r3, #12
 8007376:	d841      	bhi.n	80073fc <HAL_TIM_IC_Stop_IT+0x98>
 8007378:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <HAL_TIM_IC_Stop_IT+0x1c>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	080073b5 	.word	0x080073b5
 8007384:	080073fd 	.word	0x080073fd
 8007388:	080073fd 	.word	0x080073fd
 800738c:	080073fd 	.word	0x080073fd
 8007390:	080073c7 	.word	0x080073c7
 8007394:	080073fd 	.word	0x080073fd
 8007398:	080073fd 	.word	0x080073fd
 800739c:	080073fd 	.word	0x080073fd
 80073a0:	080073d9 	.word	0x080073d9
 80073a4:	080073fd 	.word	0x080073fd
 80073a8:	080073fd 	.word	0x080073fd
 80073ac:	080073fd 	.word	0x080073fd
 80073b0:	080073eb 	.word	0x080073eb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0202 	bic.w	r2, r2, #2
 80073c2:	60da      	str	r2, [r3, #12]
      break;
 80073c4:	e01d      	b.n	8007402 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68da      	ldr	r2, [r3, #12]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0204 	bic.w	r2, r2, #4
 80073d4:	60da      	str	r2, [r3, #12]
      break;
 80073d6:	e014      	b.n	8007402 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68da      	ldr	r2, [r3, #12]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0208 	bic.w	r2, r2, #8
 80073e6:	60da      	str	r2, [r3, #12]
      break;
 80073e8:	e00b      	b.n	8007402 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 0210 	bic.w	r2, r2, #16
 80073f8:	60da      	str	r2, [r3, #12]
      break;
 80073fa:	e002      	b.n	8007402 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007400:	bf00      	nop
  }

  if (status == HAL_OK)
 8007402:	7bfb      	ldrb	r3, [r7, #15]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d156      	bne.n	80074b6 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2200      	movs	r2, #0
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	4618      	mov	r0, r3
 8007412:	f000 ff6a 	bl	80082ea <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6a1a      	ldr	r2, [r3, #32]
 800741c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007420:	4013      	ands	r3, r2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10f      	bne.n	8007446 <HAL_TIM_IC_Stop_IT+0xe2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6a1a      	ldr	r2, [r3, #32]
 800742c:	f240 4344 	movw	r3, #1092	; 0x444
 8007430:	4013      	ands	r3, r2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d107      	bne.n	8007446 <HAL_TIM_IC_Stop_IT+0xe2>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 0201 	bic.w	r2, r2, #1
 8007444:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d104      	bne.n	8007456 <HAL_TIM_IC_Stop_IT+0xf2>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007454:	e013      	b.n	800747e <HAL_TIM_IC_Stop_IT+0x11a>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b04      	cmp	r3, #4
 800745a:	d104      	bne.n	8007466 <HAL_TIM_IC_Stop_IT+0x102>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007464:	e00b      	b.n	800747e <HAL_TIM_IC_Stop_IT+0x11a>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b08      	cmp	r3, #8
 800746a:	d104      	bne.n	8007476 <HAL_TIM_IC_Stop_IT+0x112>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007474:	e003      	b.n	800747e <HAL_TIM_IC_Stop_IT+0x11a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d104      	bne.n	800748e <HAL_TIM_IC_Stop_IT+0x12a>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800748c:	e013      	b.n	80074b6 <HAL_TIM_IC_Stop_IT+0x152>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b04      	cmp	r3, #4
 8007492:	d104      	bne.n	800749e <HAL_TIM_IC_Stop_IT+0x13a>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800749c:	e00b      	b.n	80074b6 <HAL_TIM_IC_Stop_IT+0x152>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d104      	bne.n	80074ae <HAL_TIM_IC_Stop_IT+0x14a>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ac:	e003      	b.n	80074b6 <HAL_TIM_IC_Stop_IT+0x152>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d122      	bne.n	800751c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d11b      	bne.n	800751c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f06f 0202 	mvn.w	r2, #2
 80074ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa98 	bl	8007a38 <HAL_TIM_IC_CaptureCallback>
 8007508:	e005      	b.n	8007516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fa8a 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fa9b 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b04      	cmp	r3, #4
 8007528:	d122      	bne.n	8007570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b04      	cmp	r3, #4
 8007536:	d11b      	bne.n	8007570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0204 	mvn.w	r2, #4
 8007540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa6e 	bl	8007a38 <HAL_TIM_IC_CaptureCallback>
 800755c:	e005      	b.n	800756a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fa60 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fa71 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b08      	cmp	r3, #8
 800757c:	d122      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b08      	cmp	r3, #8
 800758a:	d11b      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f06f 0208 	mvn.w	r2, #8
 8007594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2204      	movs	r2, #4
 800759a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa44 	bl	8007a38 <HAL_TIM_IC_CaptureCallback>
 80075b0:	e005      	b.n	80075be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fa36 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fa47 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	2b10      	cmp	r3, #16
 80075d0:	d122      	bne.n	8007618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d11b      	bne.n	8007618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f06f 0210 	mvn.w	r2, #16
 80075e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2208      	movs	r2, #8
 80075ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fa1a 	bl	8007a38 <HAL_TIM_IC_CaptureCallback>
 8007604:	e005      	b.n	8007612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa0c 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fa1d 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b01      	cmp	r3, #1
 8007624:	d10e      	bne.n	8007644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	2b01      	cmp	r3, #1
 8007632:	d107      	bne.n	8007644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f06f 0201 	mvn.w	r2, #1
 800763c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f9e6 	bl	8007a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764e:	2b80      	cmp	r3, #128	; 0x80
 8007650:	d10e      	bne.n	8007670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765c:	2b80      	cmp	r3, #128	; 0x80
 800765e:	d107      	bne.n	8007670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 f88e 	bl	800878c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767a:	2b40      	cmp	r3, #64	; 0x40
 800767c:	d10e      	bne.n	800769c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007688:	2b40      	cmp	r3, #64	; 0x40
 800768a:	d107      	bne.n	800769c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f9e2 	bl	8007a60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	d10e      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f003 0320 	and.w	r3, r3, #32
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d107      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f06f 0220 	mvn.w	r2, #32
 80076c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 f858 	bl	8008778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076c8:	bf00      	nop
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d101      	bne.n	80076ee <HAL_TIM_IC_ConfigChannel+0x1e>
 80076ea:	2302      	movs	r3, #2
 80076ec:	e088      	b.n	8007800 <HAL_TIM_IC_ConfigChannel+0x130>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d11b      	bne.n	8007734 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6818      	ldr	r0, [r3, #0]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	6819      	ldr	r1, [r3, #0]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f000 fc50 	bl	8007fb0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699a      	ldr	r2, [r3, #24]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 020c 	bic.w	r2, r2, #12
 800771e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6999      	ldr	r1, [r3, #24]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	619a      	str	r2, [r3, #24]
 8007732:	e060      	b.n	80077f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b04      	cmp	r3, #4
 8007738:	d11c      	bne.n	8007774 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6818      	ldr	r0, [r3, #0]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	6819      	ldr	r1, [r3, #0]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f000 fcc8 	bl	80080de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	699a      	ldr	r2, [r3, #24]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800775c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6999      	ldr	r1, [r3, #24]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	021a      	lsls	r2, r3, #8
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	619a      	str	r2, [r3, #24]
 8007772:	e040      	b.n	80077f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b08      	cmp	r3, #8
 8007778:	d11b      	bne.n	80077b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6818      	ldr	r0, [r3, #0]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	6819      	ldr	r1, [r3, #0]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f000 fd15 	bl	80081b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	69da      	ldr	r2, [r3, #28]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 020c 	bic.w	r2, r2, #12
 800779c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69d9      	ldr	r1, [r3, #28]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	61da      	str	r2, [r3, #28]
 80077b0:	e021      	b.n	80077f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b0c      	cmp	r3, #12
 80077b6:	d11c      	bne.n	80077f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	6819      	ldr	r1, [r3, #0]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f000 fd32 	bl	8008230 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69da      	ldr	r2, [r3, #28]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80077da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	69d9      	ldr	r1, [r3, #28]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	021a      	lsls	r2, r3, #8
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	61da      	str	r2, [r3, #28]
 80077f0:	e001      	b.n	80077f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007822:	2302      	movs	r3, #2
 8007824:	e0ae      	b.n	8007984 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b0c      	cmp	r3, #12
 8007832:	f200 809f 	bhi.w	8007974 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007836:	a201      	add	r2, pc, #4	; (adr r2, 800783c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	08007871 	.word	0x08007871
 8007840:	08007975 	.word	0x08007975
 8007844:	08007975 	.word	0x08007975
 8007848:	08007975 	.word	0x08007975
 800784c:	080078b1 	.word	0x080078b1
 8007850:	08007975 	.word	0x08007975
 8007854:	08007975 	.word	0x08007975
 8007858:	08007975 	.word	0x08007975
 800785c:	080078f3 	.word	0x080078f3
 8007860:	08007975 	.word	0x08007975
 8007864:	08007975 	.word	0x08007975
 8007868:	08007975 	.word	0x08007975
 800786c:	08007933 	.word	0x08007933
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 f97c 	bl	8007b74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0208 	orr.w	r2, r2, #8
 800788a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	699a      	ldr	r2, [r3, #24]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 0204 	bic.w	r2, r2, #4
 800789a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6999      	ldr	r1, [r3, #24]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	691a      	ldr	r2, [r3, #16]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	619a      	str	r2, [r3, #24]
      break;
 80078ae:	e064      	b.n	800797a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68b9      	ldr	r1, [r7, #8]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 f9c2 	bl	8007c40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	699a      	ldr	r2, [r3, #24]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	699a      	ldr	r2, [r3, #24]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6999      	ldr	r1, [r3, #24]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	021a      	lsls	r2, r3, #8
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	619a      	str	r2, [r3, #24]
      break;
 80078f0:	e043      	b.n	800797a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68b9      	ldr	r1, [r7, #8]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fa0d 	bl	8007d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f042 0208 	orr.w	r2, r2, #8
 800790c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69da      	ldr	r2, [r3, #28]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 0204 	bic.w	r2, r2, #4
 800791c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69d9      	ldr	r1, [r3, #28]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	61da      	str	r2, [r3, #28]
      break;
 8007930:	e023      	b.n	800797a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fa57 	bl	8007dec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69da      	ldr	r2, [r3, #28]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800794c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69da      	ldr	r2, [r3, #28]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800795c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	69d9      	ldr	r1, [r3, #28]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	021a      	lsls	r2, r3, #8
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	61da      	str	r2, [r3, #28]
      break;
 8007972:	e002      	b.n	800797a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	75fb      	strb	r3, [r7, #23]
      break;
 8007978:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007982:	7dfb      	ldrb	r3, [r7, #23]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800799c:	2b01      	cmp	r3, #1
 800799e:	d101      	bne.n	80079a4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80079a0:	2302      	movs	r3, #2
 80079a2:	e031      	b.n	8007a08 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80079b4:	6839      	ldr	r1, [r7, #0]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fa68 	bl	8007e8c <TIM_SlaveTimer_SetConfig>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e018      	b.n	8007a08 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079e4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079f4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a34      	ldr	r2, [pc, #208]	; (8007b58 <TIM_Base_SetConfig+0xe4>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d00f      	beq.n	8007aac <TIM_Base_SetConfig+0x38>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a92:	d00b      	beq.n	8007aac <TIM_Base_SetConfig+0x38>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a31      	ldr	r2, [pc, #196]	; (8007b5c <TIM_Base_SetConfig+0xe8>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d007      	beq.n	8007aac <TIM_Base_SetConfig+0x38>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a30      	ldr	r2, [pc, #192]	; (8007b60 <TIM_Base_SetConfig+0xec>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d003      	beq.n	8007aac <TIM_Base_SetConfig+0x38>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a2f      	ldr	r2, [pc, #188]	; (8007b64 <TIM_Base_SetConfig+0xf0>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d108      	bne.n	8007abe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a25      	ldr	r2, [pc, #148]	; (8007b58 <TIM_Base_SetConfig+0xe4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d01b      	beq.n	8007afe <TIM_Base_SetConfig+0x8a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007acc:	d017      	beq.n	8007afe <TIM_Base_SetConfig+0x8a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a22      	ldr	r2, [pc, #136]	; (8007b5c <TIM_Base_SetConfig+0xe8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d013      	beq.n	8007afe <TIM_Base_SetConfig+0x8a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a21      	ldr	r2, [pc, #132]	; (8007b60 <TIM_Base_SetConfig+0xec>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d00f      	beq.n	8007afe <TIM_Base_SetConfig+0x8a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a20      	ldr	r2, [pc, #128]	; (8007b64 <TIM_Base_SetConfig+0xf0>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d00b      	beq.n	8007afe <TIM_Base_SetConfig+0x8a>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a1f      	ldr	r2, [pc, #124]	; (8007b68 <TIM_Base_SetConfig+0xf4>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d007      	beq.n	8007afe <TIM_Base_SetConfig+0x8a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a1e      	ldr	r2, [pc, #120]	; (8007b6c <TIM_Base_SetConfig+0xf8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_Base_SetConfig+0x8a>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a1d      	ldr	r2, [pc, #116]	; (8007b70 <TIM_Base_SetConfig+0xfc>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d108      	bne.n	8007b10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	689a      	ldr	r2, [r3, #8]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a08      	ldr	r2, [pc, #32]	; (8007b58 <TIM_Base_SetConfig+0xe4>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d103      	bne.n	8007b44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	691a      	ldr	r2, [r3, #16]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	615a      	str	r2, [r3, #20]
}
 8007b4a:	bf00      	nop
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40010000 	.word	0x40010000
 8007b5c:	40000400 	.word	0x40000400
 8007b60:	40000800 	.word	0x40000800
 8007b64:	40000c00 	.word	0x40000c00
 8007b68:	40014000 	.word	0x40014000
 8007b6c:	40014400 	.word	0x40014400
 8007b70:	40014800 	.word	0x40014800

08007b74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	f023 0201 	bic.w	r2, r3, #1
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0303 	bic.w	r3, r3, #3
 8007baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f023 0302 	bic.w	r3, r3, #2
 8007bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a1c      	ldr	r2, [pc, #112]	; (8007c3c <TIM_OC1_SetConfig+0xc8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d10c      	bne.n	8007bea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f023 0308 	bic.w	r3, r3, #8
 8007bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f023 0304 	bic.w	r3, r3, #4
 8007be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a13      	ldr	r2, [pc, #76]	; (8007c3c <TIM_OC1_SetConfig+0xc8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d111      	bne.n	8007c16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	621a      	str	r2, [r3, #32]
}
 8007c30:	bf00      	nop
 8007c32:	371c      	adds	r7, #28
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	40010000 	.word	0x40010000

08007c40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	f023 0210 	bic.w	r2, r3, #16
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f023 0320 	bic.w	r3, r3, #32
 8007c8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	011b      	lsls	r3, r3, #4
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a1e      	ldr	r2, [pc, #120]	; (8007d14 <TIM_OC2_SetConfig+0xd4>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d10d      	bne.n	8007cbc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	011b      	lsls	r3, r3, #4
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a15      	ldr	r2, [pc, #84]	; (8007d14 <TIM_OC2_SetConfig+0xd4>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d113      	bne.n	8007cec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	621a      	str	r2, [r3, #32]
}
 8007d06:	bf00      	nop
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	40010000 	.word	0x40010000

08007d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f023 0303 	bic.w	r3, r3, #3
 8007d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	021b      	lsls	r3, r3, #8
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a1d      	ldr	r2, [pc, #116]	; (8007de8 <TIM_OC3_SetConfig+0xd0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d10d      	bne.n	8007d92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	021b      	lsls	r3, r3, #8
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a14      	ldr	r2, [pc, #80]	; (8007de8 <TIM_OC3_SetConfig+0xd0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d113      	bne.n	8007dc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	011b      	lsls	r3, r3, #4
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	621a      	str	r2, [r3, #32]
}
 8007ddc:	bf00      	nop
 8007dde:	371c      	adds	r7, #28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	40010000 	.word	0x40010000

08007dec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	031b      	lsls	r3, r3, #12
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a10      	ldr	r2, [pc, #64]	; (8007e88 <TIM_OC4_SetConfig+0x9c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d109      	bne.n	8007e60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	019b      	lsls	r3, r3, #6
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	621a      	str	r2, [r3, #32]
}
 8007e7a:	bf00      	nop
 8007e7c:	371c      	adds	r7, #28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	40010000 	.word	0x40010000

08007e8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	f023 0307 	bic.w	r3, r3, #7
 8007eba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2b70      	cmp	r3, #112	; 0x70
 8007ed4:	d01a      	beq.n	8007f0c <TIM_SlaveTimer_SetConfig+0x80>
 8007ed6:	2b70      	cmp	r3, #112	; 0x70
 8007ed8:	d860      	bhi.n	8007f9c <TIM_SlaveTimer_SetConfig+0x110>
 8007eda:	2b60      	cmp	r3, #96	; 0x60
 8007edc:	d054      	beq.n	8007f88 <TIM_SlaveTimer_SetConfig+0xfc>
 8007ede:	2b60      	cmp	r3, #96	; 0x60
 8007ee0:	d85c      	bhi.n	8007f9c <TIM_SlaveTimer_SetConfig+0x110>
 8007ee2:	2b50      	cmp	r3, #80	; 0x50
 8007ee4:	d046      	beq.n	8007f74 <TIM_SlaveTimer_SetConfig+0xe8>
 8007ee6:	2b50      	cmp	r3, #80	; 0x50
 8007ee8:	d858      	bhi.n	8007f9c <TIM_SlaveTimer_SetConfig+0x110>
 8007eea:	2b40      	cmp	r3, #64	; 0x40
 8007eec:	d019      	beq.n	8007f22 <TIM_SlaveTimer_SetConfig+0x96>
 8007eee:	2b40      	cmp	r3, #64	; 0x40
 8007ef0:	d854      	bhi.n	8007f9c <TIM_SlaveTimer_SetConfig+0x110>
 8007ef2:	2b30      	cmp	r3, #48	; 0x30
 8007ef4:	d055      	beq.n	8007fa2 <TIM_SlaveTimer_SetConfig+0x116>
 8007ef6:	2b30      	cmp	r3, #48	; 0x30
 8007ef8:	d850      	bhi.n	8007f9c <TIM_SlaveTimer_SetConfig+0x110>
 8007efa:	2b20      	cmp	r3, #32
 8007efc:	d051      	beq.n	8007fa2 <TIM_SlaveTimer_SetConfig+0x116>
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	d84c      	bhi.n	8007f9c <TIM_SlaveTimer_SetConfig+0x110>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d04d      	beq.n	8007fa2 <TIM_SlaveTimer_SetConfig+0x116>
 8007f06:	2b10      	cmp	r3, #16
 8007f08:	d04b      	beq.n	8007fa2 <TIM_SlaveTimer_SetConfig+0x116>
 8007f0a:	e047      	b.n	8007f9c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6818      	ldr	r0, [r3, #0]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	68d9      	ldr	r1, [r3, #12]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	f000 f9c5 	bl	80082aa <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007f20:	e040      	b.n	8007fa4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b05      	cmp	r3, #5
 8007f28:	d101      	bne.n	8007f2e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e03b      	b.n	8007fa6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6a1a      	ldr	r2, [r3, #32]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 0201 	bic.w	r2, r2, #1
 8007f44:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f54:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	011b      	lsls	r3, r3, #4
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	621a      	str	r2, [r3, #32]
      break;
 8007f72:	e017      	b.n	8007fa4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6818      	ldr	r0, [r3, #0]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	6899      	ldr	r1, [r3, #8]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	461a      	mov	r2, r3
 8007f82:	f000 f87d 	bl	8008080 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007f86:	e00d      	b.n	8007fa4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6818      	ldr	r0, [r3, #0]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	6899      	ldr	r1, [r3, #8]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	461a      	mov	r2, r3
 8007f96:	f000 f8df 	bl	8008158 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007f9a:	e003      	b.n	8007fa4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa0:	e000      	b.n	8007fa4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007fa2:	bf00      	nop
  }

  return status;
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
 8007fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	f023 0201 	bic.w	r2, r3, #1
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4a24      	ldr	r2, [pc, #144]	; (800806c <TIM_TI1_SetConfig+0xbc>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d013      	beq.n	8008006 <TIM_TI1_SetConfig+0x56>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe4:	d00f      	beq.n	8008006 <TIM_TI1_SetConfig+0x56>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4a21      	ldr	r2, [pc, #132]	; (8008070 <TIM_TI1_SetConfig+0xc0>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d00b      	beq.n	8008006 <TIM_TI1_SetConfig+0x56>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4a20      	ldr	r2, [pc, #128]	; (8008074 <TIM_TI1_SetConfig+0xc4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d007      	beq.n	8008006 <TIM_TI1_SetConfig+0x56>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	4a1f      	ldr	r2, [pc, #124]	; (8008078 <TIM_TI1_SetConfig+0xc8>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d003      	beq.n	8008006 <TIM_TI1_SetConfig+0x56>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	4a1e      	ldr	r2, [pc, #120]	; (800807c <TIM_TI1_SetConfig+0xcc>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d101      	bne.n	800800a <TIM_TI1_SetConfig+0x5a>
 8008006:	2301      	movs	r3, #1
 8008008:	e000      	b.n	800800c <TIM_TI1_SetConfig+0x5c>
 800800a:	2300      	movs	r3, #0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d008      	beq.n	8008022 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f023 0303 	bic.w	r3, r3, #3
 8008016:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4313      	orrs	r3, r2
 800801e:	617b      	str	r3, [r7, #20]
 8008020:	e003      	b.n	800802a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f043 0301 	orr.w	r3, r3, #1
 8008028:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008030:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	b2db      	uxtb	r3, r3
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	4313      	orrs	r3, r2
 800803c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f023 030a 	bic.w	r3, r3, #10
 8008044:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f003 030a 	and.w	r3, r3, #10
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	4313      	orrs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	621a      	str	r2, [r3, #32]
}
 800805e:	bf00      	nop
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	40010000 	.word	0x40010000
 8008070:	40000400 	.word	0x40000400
 8008074:	40000800 	.word	0x40000800
 8008078:	40000c00 	.word	0x40000c00
 800807c:	40014000 	.word	0x40014000

08008080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	f023 0201 	bic.w	r2, r3, #1
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	011b      	lsls	r3, r3, #4
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f023 030a 	bic.w	r3, r3, #10
 80080bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	621a      	str	r2, [r3, #32]
}
 80080d2:	bf00      	nop
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80080de:	b480      	push	{r7}
 80080e0:	b087      	sub	sp, #28
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	607a      	str	r2, [r7, #4]
 80080ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	f023 0210 	bic.w	r2, r3, #16
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800810a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	021b      	lsls	r3, r3, #8
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	4313      	orrs	r3, r2
 8008114:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800811c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	031b      	lsls	r3, r3, #12
 8008122:	b29b      	uxth	r3, r3
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008130:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4313      	orrs	r3, r2
 800813e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	621a      	str	r2, [r3, #32]
}
 800814c:	bf00      	nop
 800814e:	371c      	adds	r7, #28
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	f023 0210 	bic.w	r2, r3, #16
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008182:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	031b      	lsls	r3, r3, #12
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	4313      	orrs	r3, r2
 800818c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008194:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	621a      	str	r2, [r3, #32]
}
 80081ac:	bf00      	nop
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f023 0303 	bic.w	r3, r3, #3
 80081e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	4313      	orrs	r3, r2
 8008200:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008208:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	021b      	lsls	r3, r3, #8
 800820e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	4313      	orrs	r3, r2
 8008216:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	621a      	str	r2, [r3, #32]
}
 8008224:	bf00      	nop
 8008226:	371c      	adds	r7, #28
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008230:	b480      	push	{r7}
 8008232:	b087      	sub	sp, #28
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
 800823c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800825c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	021b      	lsls	r3, r3, #8
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4313      	orrs	r3, r2
 8008266:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800826e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	031b      	lsls	r3, r3, #12
 8008274:	b29b      	uxth	r3, r3
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	4313      	orrs	r3, r2
 800827a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008282:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	031b      	lsls	r3, r3, #12
 8008288:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	4313      	orrs	r3, r2
 8008290:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	621a      	str	r2, [r3, #32]
}
 800829e:	bf00      	nop
 80082a0:	371c      	adds	r7, #28
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b087      	sub	sp, #28
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	607a      	str	r2, [r7, #4]
 80082b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	021a      	lsls	r2, r3, #8
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	431a      	orrs	r2, r3
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	609a      	str	r2, [r3, #8]
}
 80082de:	bf00      	nop
 80082e0:	371c      	adds	r7, #28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b087      	sub	sp, #28
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	f003 031f 	and.w	r3, r3, #31
 80082fc:	2201      	movs	r2, #1
 80082fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008302:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6a1a      	ldr	r2, [r3, #32]
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	43db      	mvns	r3, r3
 800830c:	401a      	ands	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a1a      	ldr	r2, [r3, #32]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	f003 031f 	and.w	r3, r3, #31
 800831c:	6879      	ldr	r1, [r7, #4]
 800831e:	fa01 f303 	lsl.w	r3, r1, r3
 8008322:	431a      	orrs	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	621a      	str	r2, [r3, #32]
}
 8008328:	bf00      	nop
 800832a:	371c      	adds	r7, #28
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b08a      	sub	sp, #40	; 0x28
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e09a      	b.n	800847e <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b00      	cmp	r3, #0
 8008352:	d106      	bne.n	8008362 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7fa f947 	bl	80025f0 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2202      	movs	r2, #2
 8008366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	3304      	adds	r3, #4
 8008372:	4619      	mov	r1, r3
 8008374:	4610      	mov	r0, r2
 8008376:	f7ff fb7d 	bl	8007a74 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6818      	ldr	r0, [r3, #0]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	6819      	ldr	r1, [r3, #0]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	2203      	movs	r2, #3
 8008388:	f7ff fe12 	bl	8007fb0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699a      	ldr	r2, [r3, #24]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 020c 	bic.w	r2, r2, #12
 800839a:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6999      	ldr	r1, [r3, #24]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083bc:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80083cc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083dc:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0207 	bic.w	r2, r2, #7
 80083ec:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f042 0204 	orr.w	r2, r2, #4
 80083fc:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80083fe:	2300      	movs	r3, #0
 8008400:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008402:	2300      	movs	r3, #0
 8008404:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8008406:	2370      	movs	r3, #112	; 0x70
 8008408:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800840a:	2300      	movs	r3, #0
 800840c:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800840e:	2300      	movs	r3, #0
 8008410:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008412:	2300      	movs	r3, #0
 8008414:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f107 020c 	add.w	r2, r7, #12
 8008424:	4611      	mov	r1, r2
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff fc0a 	bl	8007c40 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800843a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800844a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3728      	adds	r7, #40	; 0x28
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008496:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800849e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084a6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80084ae:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d108      	bne.n	80084c8 <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d105      	bne.n	80084c8 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084bc:	7b7b      	ldrb	r3, [r7, #13]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d102      	bne.n	80084c8 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084c2:	7b3b      	ldrb	r3, [r7, #12]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d001      	beq.n	80084cc <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e04f      	b.n	800856c <HAL_TIMEx_HallSensor_Start+0xe4>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2202      	movs	r2, #2
 80084d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2202      	movs	r2, #2
 80084d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2202      	movs	r2, #2
 80084e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2201      	movs	r2, #1
 80084f2:	2100      	movs	r1, #0
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7ff fef8 	bl	80082ea <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a1d      	ldr	r2, [pc, #116]	; (8008574 <HAL_TIMEx_HallSensor_Start+0xec>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d018      	beq.n	8008536 <HAL_TIMEx_HallSensor_Start+0xae>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800850c:	d013      	beq.n	8008536 <HAL_TIMEx_HallSensor_Start+0xae>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a19      	ldr	r2, [pc, #100]	; (8008578 <HAL_TIMEx_HallSensor_Start+0xf0>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d00e      	beq.n	8008536 <HAL_TIMEx_HallSensor_Start+0xae>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a17      	ldr	r2, [pc, #92]	; (800857c <HAL_TIMEx_HallSensor_Start+0xf4>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d009      	beq.n	8008536 <HAL_TIMEx_HallSensor_Start+0xae>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a16      	ldr	r2, [pc, #88]	; (8008580 <HAL_TIMEx_HallSensor_Start+0xf8>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d004      	beq.n	8008536 <HAL_TIMEx_HallSensor_Start+0xae>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a14      	ldr	r2, [pc, #80]	; (8008584 <HAL_TIMEx_HallSensor_Start+0xfc>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d111      	bne.n	800855a <HAL_TIMEx_HallSensor_Start+0xd2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f003 0307 	and.w	r3, r3, #7
 8008540:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b06      	cmp	r3, #6
 8008546:	d010      	beq.n	800856a <HAL_TIMEx_HallSensor_Start+0xe2>
    {
      __HAL_TIM_ENABLE(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008558:	e007      	b.n	800856a <HAL_TIMEx_HallSensor_Start+0xe2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f042 0201 	orr.w	r2, r2, #1
 8008568:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	40010000 	.word	0x40010000
 8008578:	40000400 	.word	0x40000400
 800857c:	40000800 	.word	0x40000800
 8008580:	40000c00 	.word	0x40000c00
 8008584:	40014000 	.word	0x40014000

08008588 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2200      	movs	r2, #0
 8008596:	2100      	movs	r1, #0
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff fea6 	bl	80082ea <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6a1a      	ldr	r2, [r3, #32]
 80085a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80085a8:	4013      	ands	r3, r2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10f      	bne.n	80085ce <HAL_TIMEx_HallSensor_Stop+0x46>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6a1a      	ldr	r2, [r3, #32]
 80085b4:	f240 4344 	movw	r3, #1092	; 0x444
 80085b8:	4013      	ands	r3, r2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d107      	bne.n	80085ce <HAL_TIMEx_HallSensor_Stop+0x46>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0201 	bic.w	r2, r2, #1
 80085cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008608:	2b01      	cmp	r3, #1
 800860a:	d101      	bne.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800860c:	2302      	movs	r3, #2
 800860e:	e050      	b.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4313      	orrs	r3, r2
 8008640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a1c      	ldr	r2, [pc, #112]	; (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d018      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800865c:	d013      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a18      	ldr	r2, [pc, #96]	; (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d00e      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a16      	ldr	r2, [pc, #88]	; (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d009      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a15      	ldr	r2, [pc, #84]	; (80086cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d004      	beq.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a13      	ldr	r2, [pc, #76]	; (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d10c      	bne.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800868c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	4313      	orrs	r3, r2
 8008696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	40010000 	.word	0x40010000
 80086c4:	40000400 	.word	0x40000400
 80086c8:	40000800 	.word	0x40000800
 80086cc:	40000c00 	.word	0x40000c00
 80086d0:	40014000 	.word	0x40014000

080086d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d101      	bne.n	80086f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086ec:	2302      	movs	r3, #2
 80086ee:	e03d      	b.n	800876c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	4313      	orrs	r3, r2
 8008704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	4313      	orrs	r3, r2
 8008712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4313      	orrs	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	4313      	orrs	r3, r2
 800874a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <__cvt>:
 80087a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087a4:	ec55 4b10 	vmov	r4, r5, d0
 80087a8:	2d00      	cmp	r5, #0
 80087aa:	460e      	mov	r6, r1
 80087ac:	4619      	mov	r1, r3
 80087ae:	462b      	mov	r3, r5
 80087b0:	bfbb      	ittet	lt
 80087b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80087b6:	461d      	movlt	r5, r3
 80087b8:	2300      	movge	r3, #0
 80087ba:	232d      	movlt	r3, #45	; 0x2d
 80087bc:	700b      	strb	r3, [r1, #0]
 80087be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80087c4:	4691      	mov	r9, r2
 80087c6:	f023 0820 	bic.w	r8, r3, #32
 80087ca:	bfbc      	itt	lt
 80087cc:	4622      	movlt	r2, r4
 80087ce:	4614      	movlt	r4, r2
 80087d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087d4:	d005      	beq.n	80087e2 <__cvt+0x42>
 80087d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80087da:	d100      	bne.n	80087de <__cvt+0x3e>
 80087dc:	3601      	adds	r6, #1
 80087de:	2102      	movs	r1, #2
 80087e0:	e000      	b.n	80087e4 <__cvt+0x44>
 80087e2:	2103      	movs	r1, #3
 80087e4:	ab03      	add	r3, sp, #12
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	ab02      	add	r3, sp, #8
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	ec45 4b10 	vmov	d0, r4, r5
 80087f0:	4653      	mov	r3, sl
 80087f2:	4632      	mov	r2, r6
 80087f4:	f000 fe48 	bl	8009488 <_dtoa_r>
 80087f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80087fc:	4607      	mov	r7, r0
 80087fe:	d102      	bne.n	8008806 <__cvt+0x66>
 8008800:	f019 0f01 	tst.w	r9, #1
 8008804:	d022      	beq.n	800884c <__cvt+0xac>
 8008806:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800880a:	eb07 0906 	add.w	r9, r7, r6
 800880e:	d110      	bne.n	8008832 <__cvt+0x92>
 8008810:	783b      	ldrb	r3, [r7, #0]
 8008812:	2b30      	cmp	r3, #48	; 0x30
 8008814:	d10a      	bne.n	800882c <__cvt+0x8c>
 8008816:	2200      	movs	r2, #0
 8008818:	2300      	movs	r3, #0
 800881a:	4620      	mov	r0, r4
 800881c:	4629      	mov	r1, r5
 800881e:	f7f8 f95b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008822:	b918      	cbnz	r0, 800882c <__cvt+0x8c>
 8008824:	f1c6 0601 	rsb	r6, r6, #1
 8008828:	f8ca 6000 	str.w	r6, [sl]
 800882c:	f8da 3000 	ldr.w	r3, [sl]
 8008830:	4499      	add	r9, r3
 8008832:	2200      	movs	r2, #0
 8008834:	2300      	movs	r3, #0
 8008836:	4620      	mov	r0, r4
 8008838:	4629      	mov	r1, r5
 800883a:	f7f8 f94d 	bl	8000ad8 <__aeabi_dcmpeq>
 800883e:	b108      	cbz	r0, 8008844 <__cvt+0xa4>
 8008840:	f8cd 900c 	str.w	r9, [sp, #12]
 8008844:	2230      	movs	r2, #48	; 0x30
 8008846:	9b03      	ldr	r3, [sp, #12]
 8008848:	454b      	cmp	r3, r9
 800884a:	d307      	bcc.n	800885c <__cvt+0xbc>
 800884c:	9b03      	ldr	r3, [sp, #12]
 800884e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008850:	1bdb      	subs	r3, r3, r7
 8008852:	4638      	mov	r0, r7
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	b004      	add	sp, #16
 8008858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885c:	1c59      	adds	r1, r3, #1
 800885e:	9103      	str	r1, [sp, #12]
 8008860:	701a      	strb	r2, [r3, #0]
 8008862:	e7f0      	b.n	8008846 <__cvt+0xa6>

08008864 <__exponent>:
 8008864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008866:	4603      	mov	r3, r0
 8008868:	2900      	cmp	r1, #0
 800886a:	bfb8      	it	lt
 800886c:	4249      	neglt	r1, r1
 800886e:	f803 2b02 	strb.w	r2, [r3], #2
 8008872:	bfb4      	ite	lt
 8008874:	222d      	movlt	r2, #45	; 0x2d
 8008876:	222b      	movge	r2, #43	; 0x2b
 8008878:	2909      	cmp	r1, #9
 800887a:	7042      	strb	r2, [r0, #1]
 800887c:	dd2a      	ble.n	80088d4 <__exponent+0x70>
 800887e:	f10d 0207 	add.w	r2, sp, #7
 8008882:	4617      	mov	r7, r2
 8008884:	260a      	movs	r6, #10
 8008886:	4694      	mov	ip, r2
 8008888:	fb91 f5f6 	sdiv	r5, r1, r6
 800888c:	fb06 1415 	mls	r4, r6, r5, r1
 8008890:	3430      	adds	r4, #48	; 0x30
 8008892:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008896:	460c      	mov	r4, r1
 8008898:	2c63      	cmp	r4, #99	; 0x63
 800889a:	f102 32ff 	add.w	r2, r2, #4294967295
 800889e:	4629      	mov	r1, r5
 80088a0:	dcf1      	bgt.n	8008886 <__exponent+0x22>
 80088a2:	3130      	adds	r1, #48	; 0x30
 80088a4:	f1ac 0402 	sub.w	r4, ip, #2
 80088a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80088ac:	1c41      	adds	r1, r0, #1
 80088ae:	4622      	mov	r2, r4
 80088b0:	42ba      	cmp	r2, r7
 80088b2:	d30a      	bcc.n	80088ca <__exponent+0x66>
 80088b4:	f10d 0209 	add.w	r2, sp, #9
 80088b8:	eba2 020c 	sub.w	r2, r2, ip
 80088bc:	42bc      	cmp	r4, r7
 80088be:	bf88      	it	hi
 80088c0:	2200      	movhi	r2, #0
 80088c2:	4413      	add	r3, r2
 80088c4:	1a18      	subs	r0, r3, r0
 80088c6:	b003      	add	sp, #12
 80088c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 80088ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 80088d2:	e7ed      	b.n	80088b0 <__exponent+0x4c>
 80088d4:	2330      	movs	r3, #48	; 0x30
 80088d6:	3130      	adds	r1, #48	; 0x30
 80088d8:	7083      	strb	r3, [r0, #2]
 80088da:	70c1      	strb	r1, [r0, #3]
 80088dc:	1d03      	adds	r3, r0, #4
 80088de:	e7f1      	b.n	80088c4 <__exponent+0x60>

080088e0 <_printf_float>:
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	ed2d 8b02 	vpush	{d8}
 80088e8:	b08d      	sub	sp, #52	; 0x34
 80088ea:	460c      	mov	r4, r1
 80088ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80088f0:	4616      	mov	r6, r2
 80088f2:	461f      	mov	r7, r3
 80088f4:	4605      	mov	r5, r0
 80088f6:	f000 fcc7 	bl	8009288 <_localeconv_r>
 80088fa:	f8d0 a000 	ldr.w	sl, [r0]
 80088fe:	4650      	mov	r0, sl
 8008900:	f7f7 fcbe 	bl	8000280 <strlen>
 8008904:	2300      	movs	r3, #0
 8008906:	930a      	str	r3, [sp, #40]	; 0x28
 8008908:	6823      	ldr	r3, [r4, #0]
 800890a:	9305      	str	r3, [sp, #20]
 800890c:	f8d8 3000 	ldr.w	r3, [r8]
 8008910:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008914:	3307      	adds	r3, #7
 8008916:	f023 0307 	bic.w	r3, r3, #7
 800891a:	f103 0208 	add.w	r2, r3, #8
 800891e:	f8c8 2000 	str.w	r2, [r8]
 8008922:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008926:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800892a:	9307      	str	r3, [sp, #28]
 800892c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008930:	ee08 0a10 	vmov	s16, r0
 8008934:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800893c:	4b9e      	ldr	r3, [pc, #632]	; (8008bb8 <_printf_float+0x2d8>)
 800893e:	f04f 32ff 	mov.w	r2, #4294967295
 8008942:	f7f8 f8fb 	bl	8000b3c <__aeabi_dcmpun>
 8008946:	bb88      	cbnz	r0, 80089ac <_printf_float+0xcc>
 8008948:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800894c:	4b9a      	ldr	r3, [pc, #616]	; (8008bb8 <_printf_float+0x2d8>)
 800894e:	f04f 32ff 	mov.w	r2, #4294967295
 8008952:	f7f8 f8d5 	bl	8000b00 <__aeabi_dcmple>
 8008956:	bb48      	cbnz	r0, 80089ac <_printf_float+0xcc>
 8008958:	2200      	movs	r2, #0
 800895a:	2300      	movs	r3, #0
 800895c:	4640      	mov	r0, r8
 800895e:	4649      	mov	r1, r9
 8008960:	f7f8 f8c4 	bl	8000aec <__aeabi_dcmplt>
 8008964:	b110      	cbz	r0, 800896c <_printf_float+0x8c>
 8008966:	232d      	movs	r3, #45	; 0x2d
 8008968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800896c:	4a93      	ldr	r2, [pc, #588]	; (8008bbc <_printf_float+0x2dc>)
 800896e:	4b94      	ldr	r3, [pc, #592]	; (8008bc0 <_printf_float+0x2e0>)
 8008970:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008974:	bf94      	ite	ls
 8008976:	4690      	movls	r8, r2
 8008978:	4698      	movhi	r8, r3
 800897a:	2303      	movs	r3, #3
 800897c:	6123      	str	r3, [r4, #16]
 800897e:	9b05      	ldr	r3, [sp, #20]
 8008980:	f023 0304 	bic.w	r3, r3, #4
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	f04f 0900 	mov.w	r9, #0
 800898a:	9700      	str	r7, [sp, #0]
 800898c:	4633      	mov	r3, r6
 800898e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008990:	4621      	mov	r1, r4
 8008992:	4628      	mov	r0, r5
 8008994:	f000 f9da 	bl	8008d4c <_printf_common>
 8008998:	3001      	adds	r0, #1
 800899a:	f040 8090 	bne.w	8008abe <_printf_float+0x1de>
 800899e:	f04f 30ff 	mov.w	r0, #4294967295
 80089a2:	b00d      	add	sp, #52	; 0x34
 80089a4:	ecbd 8b02 	vpop	{d8}
 80089a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ac:	4642      	mov	r2, r8
 80089ae:	464b      	mov	r3, r9
 80089b0:	4640      	mov	r0, r8
 80089b2:	4649      	mov	r1, r9
 80089b4:	f7f8 f8c2 	bl	8000b3c <__aeabi_dcmpun>
 80089b8:	b140      	cbz	r0, 80089cc <_printf_float+0xec>
 80089ba:	464b      	mov	r3, r9
 80089bc:	2b00      	cmp	r3, #0
 80089be:	bfbc      	itt	lt
 80089c0:	232d      	movlt	r3, #45	; 0x2d
 80089c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80089c6:	4a7f      	ldr	r2, [pc, #508]	; (8008bc4 <_printf_float+0x2e4>)
 80089c8:	4b7f      	ldr	r3, [pc, #508]	; (8008bc8 <_printf_float+0x2e8>)
 80089ca:	e7d1      	b.n	8008970 <_printf_float+0x90>
 80089cc:	6863      	ldr	r3, [r4, #4]
 80089ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80089d2:	9206      	str	r2, [sp, #24]
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	d13f      	bne.n	8008a58 <_printf_float+0x178>
 80089d8:	2306      	movs	r3, #6
 80089da:	6063      	str	r3, [r4, #4]
 80089dc:	9b05      	ldr	r3, [sp, #20]
 80089de:	6861      	ldr	r1, [r4, #4]
 80089e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80089e4:	2300      	movs	r3, #0
 80089e6:	9303      	str	r3, [sp, #12]
 80089e8:	ab0a      	add	r3, sp, #40	; 0x28
 80089ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80089ee:	ab09      	add	r3, sp, #36	; 0x24
 80089f0:	ec49 8b10 	vmov	d0, r8, r9
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	6022      	str	r2, [r4, #0]
 80089f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089fc:	4628      	mov	r0, r5
 80089fe:	f7ff fecf 	bl	80087a0 <__cvt>
 8008a02:	9b06      	ldr	r3, [sp, #24]
 8008a04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a06:	2b47      	cmp	r3, #71	; 0x47
 8008a08:	4680      	mov	r8, r0
 8008a0a:	d108      	bne.n	8008a1e <_printf_float+0x13e>
 8008a0c:	1cc8      	adds	r0, r1, #3
 8008a0e:	db02      	blt.n	8008a16 <_printf_float+0x136>
 8008a10:	6863      	ldr	r3, [r4, #4]
 8008a12:	4299      	cmp	r1, r3
 8008a14:	dd41      	ble.n	8008a9a <_printf_float+0x1ba>
 8008a16:	f1ab 0302 	sub.w	r3, fp, #2
 8008a1a:	fa5f fb83 	uxtb.w	fp, r3
 8008a1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a22:	d820      	bhi.n	8008a66 <_printf_float+0x186>
 8008a24:	3901      	subs	r1, #1
 8008a26:	465a      	mov	r2, fp
 8008a28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a2c:	9109      	str	r1, [sp, #36]	; 0x24
 8008a2e:	f7ff ff19 	bl	8008864 <__exponent>
 8008a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a34:	1813      	adds	r3, r2, r0
 8008a36:	2a01      	cmp	r2, #1
 8008a38:	4681      	mov	r9, r0
 8008a3a:	6123      	str	r3, [r4, #16]
 8008a3c:	dc02      	bgt.n	8008a44 <_printf_float+0x164>
 8008a3e:	6822      	ldr	r2, [r4, #0]
 8008a40:	07d2      	lsls	r2, r2, #31
 8008a42:	d501      	bpl.n	8008a48 <_printf_float+0x168>
 8008a44:	3301      	adds	r3, #1
 8008a46:	6123      	str	r3, [r4, #16]
 8008a48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d09c      	beq.n	800898a <_printf_float+0xaa>
 8008a50:	232d      	movs	r3, #45	; 0x2d
 8008a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a56:	e798      	b.n	800898a <_printf_float+0xaa>
 8008a58:	9a06      	ldr	r2, [sp, #24]
 8008a5a:	2a47      	cmp	r2, #71	; 0x47
 8008a5c:	d1be      	bne.n	80089dc <_printf_float+0xfc>
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1bc      	bne.n	80089dc <_printf_float+0xfc>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e7b9      	b.n	80089da <_printf_float+0xfa>
 8008a66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a6a:	d118      	bne.n	8008a9e <_printf_float+0x1be>
 8008a6c:	2900      	cmp	r1, #0
 8008a6e:	6863      	ldr	r3, [r4, #4]
 8008a70:	dd0b      	ble.n	8008a8a <_printf_float+0x1aa>
 8008a72:	6121      	str	r1, [r4, #16]
 8008a74:	b913      	cbnz	r3, 8008a7c <_printf_float+0x19c>
 8008a76:	6822      	ldr	r2, [r4, #0]
 8008a78:	07d0      	lsls	r0, r2, #31
 8008a7a:	d502      	bpl.n	8008a82 <_printf_float+0x1a2>
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	440b      	add	r3, r1
 8008a80:	6123      	str	r3, [r4, #16]
 8008a82:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a84:	f04f 0900 	mov.w	r9, #0
 8008a88:	e7de      	b.n	8008a48 <_printf_float+0x168>
 8008a8a:	b913      	cbnz	r3, 8008a92 <_printf_float+0x1b2>
 8008a8c:	6822      	ldr	r2, [r4, #0]
 8008a8e:	07d2      	lsls	r2, r2, #31
 8008a90:	d501      	bpl.n	8008a96 <_printf_float+0x1b6>
 8008a92:	3302      	adds	r3, #2
 8008a94:	e7f4      	b.n	8008a80 <_printf_float+0x1a0>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e7f2      	b.n	8008a80 <_printf_float+0x1a0>
 8008a9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aa0:	4299      	cmp	r1, r3
 8008aa2:	db05      	blt.n	8008ab0 <_printf_float+0x1d0>
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	6121      	str	r1, [r4, #16]
 8008aa8:	07d8      	lsls	r0, r3, #31
 8008aaa:	d5ea      	bpl.n	8008a82 <_printf_float+0x1a2>
 8008aac:	1c4b      	adds	r3, r1, #1
 8008aae:	e7e7      	b.n	8008a80 <_printf_float+0x1a0>
 8008ab0:	2900      	cmp	r1, #0
 8008ab2:	bfd4      	ite	le
 8008ab4:	f1c1 0202 	rsble	r2, r1, #2
 8008ab8:	2201      	movgt	r2, #1
 8008aba:	4413      	add	r3, r2
 8008abc:	e7e0      	b.n	8008a80 <_printf_float+0x1a0>
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	055a      	lsls	r2, r3, #21
 8008ac2:	d407      	bmi.n	8008ad4 <_printf_float+0x1f4>
 8008ac4:	6923      	ldr	r3, [r4, #16]
 8008ac6:	4642      	mov	r2, r8
 8008ac8:	4631      	mov	r1, r6
 8008aca:	4628      	mov	r0, r5
 8008acc:	47b8      	blx	r7
 8008ace:	3001      	adds	r0, #1
 8008ad0:	d12c      	bne.n	8008b2c <_printf_float+0x24c>
 8008ad2:	e764      	b.n	800899e <_printf_float+0xbe>
 8008ad4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ad8:	f240 80e0 	bls.w	8008c9c <_printf_float+0x3bc>
 8008adc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f7f7 fff8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d034      	beq.n	8008b56 <_printf_float+0x276>
 8008aec:	4a37      	ldr	r2, [pc, #220]	; (8008bcc <_printf_float+0x2ec>)
 8008aee:	2301      	movs	r3, #1
 8008af0:	4631      	mov	r1, r6
 8008af2:	4628      	mov	r0, r5
 8008af4:	47b8      	blx	r7
 8008af6:	3001      	adds	r0, #1
 8008af8:	f43f af51 	beq.w	800899e <_printf_float+0xbe>
 8008afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b00:	429a      	cmp	r2, r3
 8008b02:	db02      	blt.n	8008b0a <_printf_float+0x22a>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	07d8      	lsls	r0, r3, #31
 8008b08:	d510      	bpl.n	8008b2c <_printf_float+0x24c>
 8008b0a:	ee18 3a10 	vmov	r3, s16
 8008b0e:	4652      	mov	r2, sl
 8008b10:	4631      	mov	r1, r6
 8008b12:	4628      	mov	r0, r5
 8008b14:	47b8      	blx	r7
 8008b16:	3001      	adds	r0, #1
 8008b18:	f43f af41 	beq.w	800899e <_printf_float+0xbe>
 8008b1c:	f04f 0800 	mov.w	r8, #0
 8008b20:	f104 091a 	add.w	r9, r4, #26
 8008b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b26:	3b01      	subs	r3, #1
 8008b28:	4543      	cmp	r3, r8
 8008b2a:	dc09      	bgt.n	8008b40 <_printf_float+0x260>
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	079b      	lsls	r3, r3, #30
 8008b30:	f100 8107 	bmi.w	8008d42 <_printf_float+0x462>
 8008b34:	68e0      	ldr	r0, [r4, #12]
 8008b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b38:	4298      	cmp	r0, r3
 8008b3a:	bfb8      	it	lt
 8008b3c:	4618      	movlt	r0, r3
 8008b3e:	e730      	b.n	80089a2 <_printf_float+0xc2>
 8008b40:	2301      	movs	r3, #1
 8008b42:	464a      	mov	r2, r9
 8008b44:	4631      	mov	r1, r6
 8008b46:	4628      	mov	r0, r5
 8008b48:	47b8      	blx	r7
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	f43f af27 	beq.w	800899e <_printf_float+0xbe>
 8008b50:	f108 0801 	add.w	r8, r8, #1
 8008b54:	e7e6      	b.n	8008b24 <_printf_float+0x244>
 8008b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	dc39      	bgt.n	8008bd0 <_printf_float+0x2f0>
 8008b5c:	4a1b      	ldr	r2, [pc, #108]	; (8008bcc <_printf_float+0x2ec>)
 8008b5e:	2301      	movs	r3, #1
 8008b60:	4631      	mov	r1, r6
 8008b62:	4628      	mov	r0, r5
 8008b64:	47b8      	blx	r7
 8008b66:	3001      	adds	r0, #1
 8008b68:	f43f af19 	beq.w	800899e <_printf_float+0xbe>
 8008b6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b70:	4313      	orrs	r3, r2
 8008b72:	d102      	bne.n	8008b7a <_printf_float+0x29a>
 8008b74:	6823      	ldr	r3, [r4, #0]
 8008b76:	07d9      	lsls	r1, r3, #31
 8008b78:	d5d8      	bpl.n	8008b2c <_printf_float+0x24c>
 8008b7a:	ee18 3a10 	vmov	r3, s16
 8008b7e:	4652      	mov	r2, sl
 8008b80:	4631      	mov	r1, r6
 8008b82:	4628      	mov	r0, r5
 8008b84:	47b8      	blx	r7
 8008b86:	3001      	adds	r0, #1
 8008b88:	f43f af09 	beq.w	800899e <_printf_float+0xbe>
 8008b8c:	f04f 0900 	mov.w	r9, #0
 8008b90:	f104 0a1a 	add.w	sl, r4, #26
 8008b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b96:	425b      	negs	r3, r3
 8008b98:	454b      	cmp	r3, r9
 8008b9a:	dc01      	bgt.n	8008ba0 <_printf_float+0x2c0>
 8008b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b9e:	e792      	b.n	8008ac6 <_printf_float+0x1e6>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	4652      	mov	r2, sl
 8008ba4:	4631      	mov	r1, r6
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	47b8      	blx	r7
 8008baa:	3001      	adds	r0, #1
 8008bac:	f43f aef7 	beq.w	800899e <_printf_float+0xbe>
 8008bb0:	f109 0901 	add.w	r9, r9, #1
 8008bb4:	e7ee      	b.n	8008b94 <_printf_float+0x2b4>
 8008bb6:	bf00      	nop
 8008bb8:	7fefffff 	.word	0x7fefffff
 8008bbc:	0800b148 	.word	0x0800b148
 8008bc0:	0800b14c 	.word	0x0800b14c
 8008bc4:	0800b150 	.word	0x0800b150
 8008bc8:	0800b154 	.word	0x0800b154
 8008bcc:	0800b158 	.word	0x0800b158
 8008bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	bfa8      	it	ge
 8008bd8:	461a      	movge	r2, r3
 8008bda:	2a00      	cmp	r2, #0
 8008bdc:	4691      	mov	r9, r2
 8008bde:	dc37      	bgt.n	8008c50 <_printf_float+0x370>
 8008be0:	f04f 0b00 	mov.w	fp, #0
 8008be4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008be8:	f104 021a 	add.w	r2, r4, #26
 8008bec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bee:	9305      	str	r3, [sp, #20]
 8008bf0:	eba3 0309 	sub.w	r3, r3, r9
 8008bf4:	455b      	cmp	r3, fp
 8008bf6:	dc33      	bgt.n	8008c60 <_printf_float+0x380>
 8008bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	db3b      	blt.n	8008c78 <_printf_float+0x398>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	07da      	lsls	r2, r3, #31
 8008c04:	d438      	bmi.n	8008c78 <_printf_float+0x398>
 8008c06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008c0a:	eba2 0903 	sub.w	r9, r2, r3
 8008c0e:	9b05      	ldr	r3, [sp, #20]
 8008c10:	1ad2      	subs	r2, r2, r3
 8008c12:	4591      	cmp	r9, r2
 8008c14:	bfa8      	it	ge
 8008c16:	4691      	movge	r9, r2
 8008c18:	f1b9 0f00 	cmp.w	r9, #0
 8008c1c:	dc35      	bgt.n	8008c8a <_printf_float+0x3aa>
 8008c1e:	f04f 0800 	mov.w	r8, #0
 8008c22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c26:	f104 0a1a 	add.w	sl, r4, #26
 8008c2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c2e:	1a9b      	subs	r3, r3, r2
 8008c30:	eba3 0309 	sub.w	r3, r3, r9
 8008c34:	4543      	cmp	r3, r8
 8008c36:	f77f af79 	ble.w	8008b2c <_printf_float+0x24c>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4652      	mov	r2, sl
 8008c3e:	4631      	mov	r1, r6
 8008c40:	4628      	mov	r0, r5
 8008c42:	47b8      	blx	r7
 8008c44:	3001      	adds	r0, #1
 8008c46:	f43f aeaa 	beq.w	800899e <_printf_float+0xbe>
 8008c4a:	f108 0801 	add.w	r8, r8, #1
 8008c4e:	e7ec      	b.n	8008c2a <_printf_float+0x34a>
 8008c50:	4613      	mov	r3, r2
 8008c52:	4631      	mov	r1, r6
 8008c54:	4642      	mov	r2, r8
 8008c56:	4628      	mov	r0, r5
 8008c58:	47b8      	blx	r7
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	d1c0      	bne.n	8008be0 <_printf_float+0x300>
 8008c5e:	e69e      	b.n	800899e <_printf_float+0xbe>
 8008c60:	2301      	movs	r3, #1
 8008c62:	4631      	mov	r1, r6
 8008c64:	4628      	mov	r0, r5
 8008c66:	9205      	str	r2, [sp, #20]
 8008c68:	47b8      	blx	r7
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	f43f ae97 	beq.w	800899e <_printf_float+0xbe>
 8008c70:	9a05      	ldr	r2, [sp, #20]
 8008c72:	f10b 0b01 	add.w	fp, fp, #1
 8008c76:	e7b9      	b.n	8008bec <_printf_float+0x30c>
 8008c78:	ee18 3a10 	vmov	r3, s16
 8008c7c:	4652      	mov	r2, sl
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4628      	mov	r0, r5
 8008c82:	47b8      	blx	r7
 8008c84:	3001      	adds	r0, #1
 8008c86:	d1be      	bne.n	8008c06 <_printf_float+0x326>
 8008c88:	e689      	b.n	800899e <_printf_float+0xbe>
 8008c8a:	9a05      	ldr	r2, [sp, #20]
 8008c8c:	464b      	mov	r3, r9
 8008c8e:	4442      	add	r2, r8
 8008c90:	4631      	mov	r1, r6
 8008c92:	4628      	mov	r0, r5
 8008c94:	47b8      	blx	r7
 8008c96:	3001      	adds	r0, #1
 8008c98:	d1c1      	bne.n	8008c1e <_printf_float+0x33e>
 8008c9a:	e680      	b.n	800899e <_printf_float+0xbe>
 8008c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c9e:	2a01      	cmp	r2, #1
 8008ca0:	dc01      	bgt.n	8008ca6 <_printf_float+0x3c6>
 8008ca2:	07db      	lsls	r3, r3, #31
 8008ca4:	d53a      	bpl.n	8008d1c <_printf_float+0x43c>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	4642      	mov	r2, r8
 8008caa:	4631      	mov	r1, r6
 8008cac:	4628      	mov	r0, r5
 8008cae:	47b8      	blx	r7
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	f43f ae74 	beq.w	800899e <_printf_float+0xbe>
 8008cb6:	ee18 3a10 	vmov	r3, s16
 8008cba:	4652      	mov	r2, sl
 8008cbc:	4631      	mov	r1, r6
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	47b8      	blx	r7
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	f43f ae6b 	beq.w	800899e <_printf_float+0xbe>
 8008cc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008cd4:	f7f7 ff00 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cd8:	b9d8      	cbnz	r0, 8008d12 <_printf_float+0x432>
 8008cda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008cde:	f108 0201 	add.w	r2, r8, #1
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	47b8      	blx	r7
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d10e      	bne.n	8008d0a <_printf_float+0x42a>
 8008cec:	e657      	b.n	800899e <_printf_float+0xbe>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	4652      	mov	r2, sl
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	47b8      	blx	r7
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	f43f ae50 	beq.w	800899e <_printf_float+0xbe>
 8008cfe:	f108 0801 	add.w	r8, r8, #1
 8008d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d04:	3b01      	subs	r3, #1
 8008d06:	4543      	cmp	r3, r8
 8008d08:	dcf1      	bgt.n	8008cee <_printf_float+0x40e>
 8008d0a:	464b      	mov	r3, r9
 8008d0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d10:	e6da      	b.n	8008ac8 <_printf_float+0x1e8>
 8008d12:	f04f 0800 	mov.w	r8, #0
 8008d16:	f104 0a1a 	add.w	sl, r4, #26
 8008d1a:	e7f2      	b.n	8008d02 <_printf_float+0x422>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	4642      	mov	r2, r8
 8008d20:	e7df      	b.n	8008ce2 <_printf_float+0x402>
 8008d22:	2301      	movs	r3, #1
 8008d24:	464a      	mov	r2, r9
 8008d26:	4631      	mov	r1, r6
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b8      	blx	r7
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	f43f ae36 	beq.w	800899e <_printf_float+0xbe>
 8008d32:	f108 0801 	add.w	r8, r8, #1
 8008d36:	68e3      	ldr	r3, [r4, #12]
 8008d38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d3a:	1a5b      	subs	r3, r3, r1
 8008d3c:	4543      	cmp	r3, r8
 8008d3e:	dcf0      	bgt.n	8008d22 <_printf_float+0x442>
 8008d40:	e6f8      	b.n	8008b34 <_printf_float+0x254>
 8008d42:	f04f 0800 	mov.w	r8, #0
 8008d46:	f104 0919 	add.w	r9, r4, #25
 8008d4a:	e7f4      	b.n	8008d36 <_printf_float+0x456>

08008d4c <_printf_common>:
 8008d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d50:	4616      	mov	r6, r2
 8008d52:	4699      	mov	r9, r3
 8008d54:	688a      	ldr	r2, [r1, #8]
 8008d56:	690b      	ldr	r3, [r1, #16]
 8008d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	bfb8      	it	lt
 8008d60:	4613      	movlt	r3, r2
 8008d62:	6033      	str	r3, [r6, #0]
 8008d64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d68:	4607      	mov	r7, r0
 8008d6a:	460c      	mov	r4, r1
 8008d6c:	b10a      	cbz	r2, 8008d72 <_printf_common+0x26>
 8008d6e:	3301      	adds	r3, #1
 8008d70:	6033      	str	r3, [r6, #0]
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	0699      	lsls	r1, r3, #26
 8008d76:	bf42      	ittt	mi
 8008d78:	6833      	ldrmi	r3, [r6, #0]
 8008d7a:	3302      	addmi	r3, #2
 8008d7c:	6033      	strmi	r3, [r6, #0]
 8008d7e:	6825      	ldr	r5, [r4, #0]
 8008d80:	f015 0506 	ands.w	r5, r5, #6
 8008d84:	d106      	bne.n	8008d94 <_printf_common+0x48>
 8008d86:	f104 0a19 	add.w	sl, r4, #25
 8008d8a:	68e3      	ldr	r3, [r4, #12]
 8008d8c:	6832      	ldr	r2, [r6, #0]
 8008d8e:	1a9b      	subs	r3, r3, r2
 8008d90:	42ab      	cmp	r3, r5
 8008d92:	dc26      	bgt.n	8008de2 <_printf_common+0x96>
 8008d94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d98:	1e13      	subs	r3, r2, #0
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	bf18      	it	ne
 8008d9e:	2301      	movne	r3, #1
 8008da0:	0692      	lsls	r2, r2, #26
 8008da2:	d42b      	bmi.n	8008dfc <_printf_common+0xb0>
 8008da4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008da8:	4649      	mov	r1, r9
 8008daa:	4638      	mov	r0, r7
 8008dac:	47c0      	blx	r8
 8008dae:	3001      	adds	r0, #1
 8008db0:	d01e      	beq.n	8008df0 <_printf_common+0xa4>
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	6922      	ldr	r2, [r4, #16]
 8008db6:	f003 0306 	and.w	r3, r3, #6
 8008dba:	2b04      	cmp	r3, #4
 8008dbc:	bf02      	ittt	eq
 8008dbe:	68e5      	ldreq	r5, [r4, #12]
 8008dc0:	6833      	ldreq	r3, [r6, #0]
 8008dc2:	1aed      	subeq	r5, r5, r3
 8008dc4:	68a3      	ldr	r3, [r4, #8]
 8008dc6:	bf0c      	ite	eq
 8008dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dcc:	2500      	movne	r5, #0
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	bfc4      	itt	gt
 8008dd2:	1a9b      	subgt	r3, r3, r2
 8008dd4:	18ed      	addgt	r5, r5, r3
 8008dd6:	2600      	movs	r6, #0
 8008dd8:	341a      	adds	r4, #26
 8008dda:	42b5      	cmp	r5, r6
 8008ddc:	d11a      	bne.n	8008e14 <_printf_common+0xc8>
 8008dde:	2000      	movs	r0, #0
 8008de0:	e008      	b.n	8008df4 <_printf_common+0xa8>
 8008de2:	2301      	movs	r3, #1
 8008de4:	4652      	mov	r2, sl
 8008de6:	4649      	mov	r1, r9
 8008de8:	4638      	mov	r0, r7
 8008dea:	47c0      	blx	r8
 8008dec:	3001      	adds	r0, #1
 8008dee:	d103      	bne.n	8008df8 <_printf_common+0xac>
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df8:	3501      	adds	r5, #1
 8008dfa:	e7c6      	b.n	8008d8a <_printf_common+0x3e>
 8008dfc:	18e1      	adds	r1, r4, r3
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	2030      	movs	r0, #48	; 0x30
 8008e02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e06:	4422      	add	r2, r4
 8008e08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e10:	3302      	adds	r3, #2
 8008e12:	e7c7      	b.n	8008da4 <_printf_common+0x58>
 8008e14:	2301      	movs	r3, #1
 8008e16:	4622      	mov	r2, r4
 8008e18:	4649      	mov	r1, r9
 8008e1a:	4638      	mov	r0, r7
 8008e1c:	47c0      	blx	r8
 8008e1e:	3001      	adds	r0, #1
 8008e20:	d0e6      	beq.n	8008df0 <_printf_common+0xa4>
 8008e22:	3601      	adds	r6, #1
 8008e24:	e7d9      	b.n	8008dda <_printf_common+0x8e>
	...

08008e28 <_printf_i>:
 8008e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e2c:	7e0f      	ldrb	r7, [r1, #24]
 8008e2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e30:	2f78      	cmp	r7, #120	; 0x78
 8008e32:	4691      	mov	r9, r2
 8008e34:	4680      	mov	r8, r0
 8008e36:	460c      	mov	r4, r1
 8008e38:	469a      	mov	sl, r3
 8008e3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e3e:	d807      	bhi.n	8008e50 <_printf_i+0x28>
 8008e40:	2f62      	cmp	r7, #98	; 0x62
 8008e42:	d80a      	bhi.n	8008e5a <_printf_i+0x32>
 8008e44:	2f00      	cmp	r7, #0
 8008e46:	f000 80d4 	beq.w	8008ff2 <_printf_i+0x1ca>
 8008e4a:	2f58      	cmp	r7, #88	; 0x58
 8008e4c:	f000 80c0 	beq.w	8008fd0 <_printf_i+0x1a8>
 8008e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e58:	e03a      	b.n	8008ed0 <_printf_i+0xa8>
 8008e5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e5e:	2b15      	cmp	r3, #21
 8008e60:	d8f6      	bhi.n	8008e50 <_printf_i+0x28>
 8008e62:	a101      	add	r1, pc, #4	; (adr r1, 8008e68 <_printf_i+0x40>)
 8008e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e68:	08008ec1 	.word	0x08008ec1
 8008e6c:	08008ed5 	.word	0x08008ed5
 8008e70:	08008e51 	.word	0x08008e51
 8008e74:	08008e51 	.word	0x08008e51
 8008e78:	08008e51 	.word	0x08008e51
 8008e7c:	08008e51 	.word	0x08008e51
 8008e80:	08008ed5 	.word	0x08008ed5
 8008e84:	08008e51 	.word	0x08008e51
 8008e88:	08008e51 	.word	0x08008e51
 8008e8c:	08008e51 	.word	0x08008e51
 8008e90:	08008e51 	.word	0x08008e51
 8008e94:	08008fd9 	.word	0x08008fd9
 8008e98:	08008f01 	.word	0x08008f01
 8008e9c:	08008f93 	.word	0x08008f93
 8008ea0:	08008e51 	.word	0x08008e51
 8008ea4:	08008e51 	.word	0x08008e51
 8008ea8:	08008ffb 	.word	0x08008ffb
 8008eac:	08008e51 	.word	0x08008e51
 8008eb0:	08008f01 	.word	0x08008f01
 8008eb4:	08008e51 	.word	0x08008e51
 8008eb8:	08008e51 	.word	0x08008e51
 8008ebc:	08008f9b 	.word	0x08008f9b
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	1d1a      	adds	r2, r3, #4
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	602a      	str	r2, [r5, #0]
 8008ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e09f      	b.n	8009014 <_printf_i+0x1ec>
 8008ed4:	6820      	ldr	r0, [r4, #0]
 8008ed6:	682b      	ldr	r3, [r5, #0]
 8008ed8:	0607      	lsls	r7, r0, #24
 8008eda:	f103 0104 	add.w	r1, r3, #4
 8008ede:	6029      	str	r1, [r5, #0]
 8008ee0:	d501      	bpl.n	8008ee6 <_printf_i+0xbe>
 8008ee2:	681e      	ldr	r6, [r3, #0]
 8008ee4:	e003      	b.n	8008eee <_printf_i+0xc6>
 8008ee6:	0646      	lsls	r6, r0, #25
 8008ee8:	d5fb      	bpl.n	8008ee2 <_printf_i+0xba>
 8008eea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008eee:	2e00      	cmp	r6, #0
 8008ef0:	da03      	bge.n	8008efa <_printf_i+0xd2>
 8008ef2:	232d      	movs	r3, #45	; 0x2d
 8008ef4:	4276      	negs	r6, r6
 8008ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008efa:	485a      	ldr	r0, [pc, #360]	; (8009064 <_printf_i+0x23c>)
 8008efc:	230a      	movs	r3, #10
 8008efe:	e012      	b.n	8008f26 <_printf_i+0xfe>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	6820      	ldr	r0, [r4, #0]
 8008f04:	1d19      	adds	r1, r3, #4
 8008f06:	6029      	str	r1, [r5, #0]
 8008f08:	0605      	lsls	r5, r0, #24
 8008f0a:	d501      	bpl.n	8008f10 <_printf_i+0xe8>
 8008f0c:	681e      	ldr	r6, [r3, #0]
 8008f0e:	e002      	b.n	8008f16 <_printf_i+0xee>
 8008f10:	0641      	lsls	r1, r0, #25
 8008f12:	d5fb      	bpl.n	8008f0c <_printf_i+0xe4>
 8008f14:	881e      	ldrh	r6, [r3, #0]
 8008f16:	4853      	ldr	r0, [pc, #332]	; (8009064 <_printf_i+0x23c>)
 8008f18:	2f6f      	cmp	r7, #111	; 0x6f
 8008f1a:	bf0c      	ite	eq
 8008f1c:	2308      	moveq	r3, #8
 8008f1e:	230a      	movne	r3, #10
 8008f20:	2100      	movs	r1, #0
 8008f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f26:	6865      	ldr	r5, [r4, #4]
 8008f28:	60a5      	str	r5, [r4, #8]
 8008f2a:	2d00      	cmp	r5, #0
 8008f2c:	bfa2      	ittt	ge
 8008f2e:	6821      	ldrge	r1, [r4, #0]
 8008f30:	f021 0104 	bicge.w	r1, r1, #4
 8008f34:	6021      	strge	r1, [r4, #0]
 8008f36:	b90e      	cbnz	r6, 8008f3c <_printf_i+0x114>
 8008f38:	2d00      	cmp	r5, #0
 8008f3a:	d04b      	beq.n	8008fd4 <_printf_i+0x1ac>
 8008f3c:	4615      	mov	r5, r2
 8008f3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f42:	fb03 6711 	mls	r7, r3, r1, r6
 8008f46:	5dc7      	ldrb	r7, [r0, r7]
 8008f48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f4c:	4637      	mov	r7, r6
 8008f4e:	42bb      	cmp	r3, r7
 8008f50:	460e      	mov	r6, r1
 8008f52:	d9f4      	bls.n	8008f3e <_printf_i+0x116>
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d10b      	bne.n	8008f70 <_printf_i+0x148>
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	07de      	lsls	r6, r3, #31
 8008f5c:	d508      	bpl.n	8008f70 <_printf_i+0x148>
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	6861      	ldr	r1, [r4, #4]
 8008f62:	4299      	cmp	r1, r3
 8008f64:	bfde      	ittt	le
 8008f66:	2330      	movle	r3, #48	; 0x30
 8008f68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f70:	1b52      	subs	r2, r2, r5
 8008f72:	6122      	str	r2, [r4, #16]
 8008f74:	f8cd a000 	str.w	sl, [sp]
 8008f78:	464b      	mov	r3, r9
 8008f7a:	aa03      	add	r2, sp, #12
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	4640      	mov	r0, r8
 8008f80:	f7ff fee4 	bl	8008d4c <_printf_common>
 8008f84:	3001      	adds	r0, #1
 8008f86:	d14a      	bne.n	800901e <_printf_i+0x1f6>
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8c:	b004      	add	sp, #16
 8008f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	f043 0320 	orr.w	r3, r3, #32
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	4833      	ldr	r0, [pc, #204]	; (8009068 <_printf_i+0x240>)
 8008f9c:	2778      	movs	r7, #120	; 0x78
 8008f9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	6829      	ldr	r1, [r5, #0]
 8008fa6:	061f      	lsls	r7, r3, #24
 8008fa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fac:	d402      	bmi.n	8008fb4 <_printf_i+0x18c>
 8008fae:	065f      	lsls	r7, r3, #25
 8008fb0:	bf48      	it	mi
 8008fb2:	b2b6      	uxthmi	r6, r6
 8008fb4:	07df      	lsls	r7, r3, #31
 8008fb6:	bf48      	it	mi
 8008fb8:	f043 0320 	orrmi.w	r3, r3, #32
 8008fbc:	6029      	str	r1, [r5, #0]
 8008fbe:	bf48      	it	mi
 8008fc0:	6023      	strmi	r3, [r4, #0]
 8008fc2:	b91e      	cbnz	r6, 8008fcc <_printf_i+0x1a4>
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	f023 0320 	bic.w	r3, r3, #32
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	2310      	movs	r3, #16
 8008fce:	e7a7      	b.n	8008f20 <_printf_i+0xf8>
 8008fd0:	4824      	ldr	r0, [pc, #144]	; (8009064 <_printf_i+0x23c>)
 8008fd2:	e7e4      	b.n	8008f9e <_printf_i+0x176>
 8008fd4:	4615      	mov	r5, r2
 8008fd6:	e7bd      	b.n	8008f54 <_printf_i+0x12c>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	6826      	ldr	r6, [r4, #0]
 8008fdc:	6961      	ldr	r1, [r4, #20]
 8008fde:	1d18      	adds	r0, r3, #4
 8008fe0:	6028      	str	r0, [r5, #0]
 8008fe2:	0635      	lsls	r5, r6, #24
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	d501      	bpl.n	8008fec <_printf_i+0x1c4>
 8008fe8:	6019      	str	r1, [r3, #0]
 8008fea:	e002      	b.n	8008ff2 <_printf_i+0x1ca>
 8008fec:	0670      	lsls	r0, r6, #25
 8008fee:	d5fb      	bpl.n	8008fe8 <_printf_i+0x1c0>
 8008ff0:	8019      	strh	r1, [r3, #0]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	6123      	str	r3, [r4, #16]
 8008ff6:	4615      	mov	r5, r2
 8008ff8:	e7bc      	b.n	8008f74 <_printf_i+0x14c>
 8008ffa:	682b      	ldr	r3, [r5, #0]
 8008ffc:	1d1a      	adds	r2, r3, #4
 8008ffe:	602a      	str	r2, [r5, #0]
 8009000:	681d      	ldr	r5, [r3, #0]
 8009002:	6862      	ldr	r2, [r4, #4]
 8009004:	2100      	movs	r1, #0
 8009006:	4628      	mov	r0, r5
 8009008:	f7f7 f8ea 	bl	80001e0 <memchr>
 800900c:	b108      	cbz	r0, 8009012 <_printf_i+0x1ea>
 800900e:	1b40      	subs	r0, r0, r5
 8009010:	6060      	str	r0, [r4, #4]
 8009012:	6863      	ldr	r3, [r4, #4]
 8009014:	6123      	str	r3, [r4, #16]
 8009016:	2300      	movs	r3, #0
 8009018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800901c:	e7aa      	b.n	8008f74 <_printf_i+0x14c>
 800901e:	6923      	ldr	r3, [r4, #16]
 8009020:	462a      	mov	r2, r5
 8009022:	4649      	mov	r1, r9
 8009024:	4640      	mov	r0, r8
 8009026:	47d0      	blx	sl
 8009028:	3001      	adds	r0, #1
 800902a:	d0ad      	beq.n	8008f88 <_printf_i+0x160>
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	079b      	lsls	r3, r3, #30
 8009030:	d413      	bmi.n	800905a <_printf_i+0x232>
 8009032:	68e0      	ldr	r0, [r4, #12]
 8009034:	9b03      	ldr	r3, [sp, #12]
 8009036:	4298      	cmp	r0, r3
 8009038:	bfb8      	it	lt
 800903a:	4618      	movlt	r0, r3
 800903c:	e7a6      	b.n	8008f8c <_printf_i+0x164>
 800903e:	2301      	movs	r3, #1
 8009040:	4632      	mov	r2, r6
 8009042:	4649      	mov	r1, r9
 8009044:	4640      	mov	r0, r8
 8009046:	47d0      	blx	sl
 8009048:	3001      	adds	r0, #1
 800904a:	d09d      	beq.n	8008f88 <_printf_i+0x160>
 800904c:	3501      	adds	r5, #1
 800904e:	68e3      	ldr	r3, [r4, #12]
 8009050:	9903      	ldr	r1, [sp, #12]
 8009052:	1a5b      	subs	r3, r3, r1
 8009054:	42ab      	cmp	r3, r5
 8009056:	dcf2      	bgt.n	800903e <_printf_i+0x216>
 8009058:	e7eb      	b.n	8009032 <_printf_i+0x20a>
 800905a:	2500      	movs	r5, #0
 800905c:	f104 0619 	add.w	r6, r4, #25
 8009060:	e7f5      	b.n	800904e <_printf_i+0x226>
 8009062:	bf00      	nop
 8009064:	0800b15a 	.word	0x0800b15a
 8009068:	0800b16b 	.word	0x0800b16b

0800906c <std>:
 800906c:	2300      	movs	r3, #0
 800906e:	b510      	push	{r4, lr}
 8009070:	4604      	mov	r4, r0
 8009072:	e9c0 3300 	strd	r3, r3, [r0]
 8009076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800907a:	6083      	str	r3, [r0, #8]
 800907c:	8181      	strh	r1, [r0, #12]
 800907e:	6643      	str	r3, [r0, #100]	; 0x64
 8009080:	81c2      	strh	r2, [r0, #14]
 8009082:	6183      	str	r3, [r0, #24]
 8009084:	4619      	mov	r1, r3
 8009086:	2208      	movs	r2, #8
 8009088:	305c      	adds	r0, #92	; 0x5c
 800908a:	f000 f8f4 	bl	8009276 <memset>
 800908e:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <std+0x58>)
 8009090:	6263      	str	r3, [r4, #36]	; 0x24
 8009092:	4b0d      	ldr	r3, [pc, #52]	; (80090c8 <std+0x5c>)
 8009094:	62a3      	str	r3, [r4, #40]	; 0x28
 8009096:	4b0d      	ldr	r3, [pc, #52]	; (80090cc <std+0x60>)
 8009098:	62e3      	str	r3, [r4, #44]	; 0x2c
 800909a:	4b0d      	ldr	r3, [pc, #52]	; (80090d0 <std+0x64>)
 800909c:	6323      	str	r3, [r4, #48]	; 0x30
 800909e:	4b0d      	ldr	r3, [pc, #52]	; (80090d4 <std+0x68>)
 80090a0:	6224      	str	r4, [r4, #32]
 80090a2:	429c      	cmp	r4, r3
 80090a4:	d006      	beq.n	80090b4 <std+0x48>
 80090a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80090aa:	4294      	cmp	r4, r2
 80090ac:	d002      	beq.n	80090b4 <std+0x48>
 80090ae:	33d0      	adds	r3, #208	; 0xd0
 80090b0:	429c      	cmp	r4, r3
 80090b2:	d105      	bne.n	80090c0 <std+0x54>
 80090b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80090b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090bc:	f000 b958 	b.w	8009370 <__retarget_lock_init_recursive>
 80090c0:	bd10      	pop	{r4, pc}
 80090c2:	bf00      	nop
 80090c4:	080091f1 	.word	0x080091f1
 80090c8:	08009213 	.word	0x08009213
 80090cc:	0800924b 	.word	0x0800924b
 80090d0:	0800926f 	.word	0x0800926f
 80090d4:	20010670 	.word	0x20010670

080090d8 <stdio_exit_handler>:
 80090d8:	4a02      	ldr	r2, [pc, #8]	; (80090e4 <stdio_exit_handler+0xc>)
 80090da:	4903      	ldr	r1, [pc, #12]	; (80090e8 <stdio_exit_handler+0x10>)
 80090dc:	4803      	ldr	r0, [pc, #12]	; (80090ec <stdio_exit_handler+0x14>)
 80090de:	f000 b869 	b.w	80091b4 <_fwalk_sglue>
 80090e2:	bf00      	nop
 80090e4:	200000a4 	.word	0x200000a4
 80090e8:	0800aa71 	.word	0x0800aa71
 80090ec:	200000b0 	.word	0x200000b0

080090f0 <cleanup_stdio>:
 80090f0:	6841      	ldr	r1, [r0, #4]
 80090f2:	4b0c      	ldr	r3, [pc, #48]	; (8009124 <cleanup_stdio+0x34>)
 80090f4:	4299      	cmp	r1, r3
 80090f6:	b510      	push	{r4, lr}
 80090f8:	4604      	mov	r4, r0
 80090fa:	d001      	beq.n	8009100 <cleanup_stdio+0x10>
 80090fc:	f001 fcb8 	bl	800aa70 <_fflush_r>
 8009100:	68a1      	ldr	r1, [r4, #8]
 8009102:	4b09      	ldr	r3, [pc, #36]	; (8009128 <cleanup_stdio+0x38>)
 8009104:	4299      	cmp	r1, r3
 8009106:	d002      	beq.n	800910e <cleanup_stdio+0x1e>
 8009108:	4620      	mov	r0, r4
 800910a:	f001 fcb1 	bl	800aa70 <_fflush_r>
 800910e:	68e1      	ldr	r1, [r4, #12]
 8009110:	4b06      	ldr	r3, [pc, #24]	; (800912c <cleanup_stdio+0x3c>)
 8009112:	4299      	cmp	r1, r3
 8009114:	d004      	beq.n	8009120 <cleanup_stdio+0x30>
 8009116:	4620      	mov	r0, r4
 8009118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800911c:	f001 bca8 	b.w	800aa70 <_fflush_r>
 8009120:	bd10      	pop	{r4, pc}
 8009122:	bf00      	nop
 8009124:	20010670 	.word	0x20010670
 8009128:	200106d8 	.word	0x200106d8
 800912c:	20010740 	.word	0x20010740

08009130 <global_stdio_init.part.0>:
 8009130:	b510      	push	{r4, lr}
 8009132:	4b0b      	ldr	r3, [pc, #44]	; (8009160 <global_stdio_init.part.0+0x30>)
 8009134:	4c0b      	ldr	r4, [pc, #44]	; (8009164 <global_stdio_init.part.0+0x34>)
 8009136:	4a0c      	ldr	r2, [pc, #48]	; (8009168 <global_stdio_init.part.0+0x38>)
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	4620      	mov	r0, r4
 800913c:	2200      	movs	r2, #0
 800913e:	2104      	movs	r1, #4
 8009140:	f7ff ff94 	bl	800906c <std>
 8009144:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009148:	2201      	movs	r2, #1
 800914a:	2109      	movs	r1, #9
 800914c:	f7ff ff8e 	bl	800906c <std>
 8009150:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009154:	2202      	movs	r2, #2
 8009156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800915a:	2112      	movs	r1, #18
 800915c:	f7ff bf86 	b.w	800906c <std>
 8009160:	200107a8 	.word	0x200107a8
 8009164:	20010670 	.word	0x20010670
 8009168:	080090d9 	.word	0x080090d9

0800916c <__sfp_lock_acquire>:
 800916c:	4801      	ldr	r0, [pc, #4]	; (8009174 <__sfp_lock_acquire+0x8>)
 800916e:	f000 b900 	b.w	8009372 <__retarget_lock_acquire_recursive>
 8009172:	bf00      	nop
 8009174:	200107b1 	.word	0x200107b1

08009178 <__sfp_lock_release>:
 8009178:	4801      	ldr	r0, [pc, #4]	; (8009180 <__sfp_lock_release+0x8>)
 800917a:	f000 b8fb 	b.w	8009374 <__retarget_lock_release_recursive>
 800917e:	bf00      	nop
 8009180:	200107b1 	.word	0x200107b1

08009184 <__sinit>:
 8009184:	b510      	push	{r4, lr}
 8009186:	4604      	mov	r4, r0
 8009188:	f7ff fff0 	bl	800916c <__sfp_lock_acquire>
 800918c:	6a23      	ldr	r3, [r4, #32]
 800918e:	b11b      	cbz	r3, 8009198 <__sinit+0x14>
 8009190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009194:	f7ff bff0 	b.w	8009178 <__sfp_lock_release>
 8009198:	4b04      	ldr	r3, [pc, #16]	; (80091ac <__sinit+0x28>)
 800919a:	6223      	str	r3, [r4, #32]
 800919c:	4b04      	ldr	r3, [pc, #16]	; (80091b0 <__sinit+0x2c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1f5      	bne.n	8009190 <__sinit+0xc>
 80091a4:	f7ff ffc4 	bl	8009130 <global_stdio_init.part.0>
 80091a8:	e7f2      	b.n	8009190 <__sinit+0xc>
 80091aa:	bf00      	nop
 80091ac:	080090f1 	.word	0x080090f1
 80091b0:	200107a8 	.word	0x200107a8

080091b4 <_fwalk_sglue>:
 80091b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b8:	4607      	mov	r7, r0
 80091ba:	4688      	mov	r8, r1
 80091bc:	4614      	mov	r4, r2
 80091be:	2600      	movs	r6, #0
 80091c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091c4:	f1b9 0901 	subs.w	r9, r9, #1
 80091c8:	d505      	bpl.n	80091d6 <_fwalk_sglue+0x22>
 80091ca:	6824      	ldr	r4, [r4, #0]
 80091cc:	2c00      	cmp	r4, #0
 80091ce:	d1f7      	bne.n	80091c0 <_fwalk_sglue+0xc>
 80091d0:	4630      	mov	r0, r6
 80091d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091d6:	89ab      	ldrh	r3, [r5, #12]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d907      	bls.n	80091ec <_fwalk_sglue+0x38>
 80091dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091e0:	3301      	adds	r3, #1
 80091e2:	d003      	beq.n	80091ec <_fwalk_sglue+0x38>
 80091e4:	4629      	mov	r1, r5
 80091e6:	4638      	mov	r0, r7
 80091e8:	47c0      	blx	r8
 80091ea:	4306      	orrs	r6, r0
 80091ec:	3568      	adds	r5, #104	; 0x68
 80091ee:	e7e9      	b.n	80091c4 <_fwalk_sglue+0x10>

080091f0 <__sread>:
 80091f0:	b510      	push	{r4, lr}
 80091f2:	460c      	mov	r4, r1
 80091f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f8:	f000 f86c 	bl	80092d4 <_read_r>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	bfab      	itete	ge
 8009200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009202:	89a3      	ldrhlt	r3, [r4, #12]
 8009204:	181b      	addge	r3, r3, r0
 8009206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800920a:	bfac      	ite	ge
 800920c:	6563      	strge	r3, [r4, #84]	; 0x54
 800920e:	81a3      	strhlt	r3, [r4, #12]
 8009210:	bd10      	pop	{r4, pc}

08009212 <__swrite>:
 8009212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009216:	461f      	mov	r7, r3
 8009218:	898b      	ldrh	r3, [r1, #12]
 800921a:	05db      	lsls	r3, r3, #23
 800921c:	4605      	mov	r5, r0
 800921e:	460c      	mov	r4, r1
 8009220:	4616      	mov	r6, r2
 8009222:	d505      	bpl.n	8009230 <__swrite+0x1e>
 8009224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009228:	2302      	movs	r3, #2
 800922a:	2200      	movs	r2, #0
 800922c:	f000 f840 	bl	80092b0 <_lseek_r>
 8009230:	89a3      	ldrh	r3, [r4, #12]
 8009232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	4632      	mov	r2, r6
 800923e:	463b      	mov	r3, r7
 8009240:	4628      	mov	r0, r5
 8009242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009246:	f000 b857 	b.w	80092f8 <_write_r>

0800924a <__sseek>:
 800924a:	b510      	push	{r4, lr}
 800924c:	460c      	mov	r4, r1
 800924e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009252:	f000 f82d 	bl	80092b0 <_lseek_r>
 8009256:	1c43      	adds	r3, r0, #1
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	bf15      	itete	ne
 800925c:	6560      	strne	r0, [r4, #84]	; 0x54
 800925e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009266:	81a3      	strheq	r3, [r4, #12]
 8009268:	bf18      	it	ne
 800926a:	81a3      	strhne	r3, [r4, #12]
 800926c:	bd10      	pop	{r4, pc}

0800926e <__sclose>:
 800926e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009272:	f000 b80d 	b.w	8009290 <_close_r>

08009276 <memset>:
 8009276:	4402      	add	r2, r0
 8009278:	4603      	mov	r3, r0
 800927a:	4293      	cmp	r3, r2
 800927c:	d100      	bne.n	8009280 <memset+0xa>
 800927e:	4770      	bx	lr
 8009280:	f803 1b01 	strb.w	r1, [r3], #1
 8009284:	e7f9      	b.n	800927a <memset+0x4>
	...

08009288 <_localeconv_r>:
 8009288:	4800      	ldr	r0, [pc, #0]	; (800928c <_localeconv_r+0x4>)
 800928a:	4770      	bx	lr
 800928c:	200001f0 	.word	0x200001f0

08009290 <_close_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	4d06      	ldr	r5, [pc, #24]	; (80092ac <_close_r+0x1c>)
 8009294:	2300      	movs	r3, #0
 8009296:	4604      	mov	r4, r0
 8009298:	4608      	mov	r0, r1
 800929a:	602b      	str	r3, [r5, #0]
 800929c:	f7f8 feb5 	bl	800200a <_close>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_close_r+0x1a>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_close_r+0x1a>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	200107ac 	.word	0x200107ac

080092b0 <_lseek_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4d07      	ldr	r5, [pc, #28]	; (80092d0 <_lseek_r+0x20>)
 80092b4:	4604      	mov	r4, r0
 80092b6:	4608      	mov	r0, r1
 80092b8:	4611      	mov	r1, r2
 80092ba:	2200      	movs	r2, #0
 80092bc:	602a      	str	r2, [r5, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	f7f8 feca 	bl	8002058 <_lseek>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d102      	bne.n	80092ce <_lseek_r+0x1e>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	b103      	cbz	r3, 80092ce <_lseek_r+0x1e>
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	200107ac 	.word	0x200107ac

080092d4 <_read_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d07      	ldr	r5, [pc, #28]	; (80092f4 <_read_r+0x20>)
 80092d8:	4604      	mov	r4, r0
 80092da:	4608      	mov	r0, r1
 80092dc:	4611      	mov	r1, r2
 80092de:	2200      	movs	r2, #0
 80092e0:	602a      	str	r2, [r5, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	f7f8 fe58 	bl	8001f98 <_read>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d102      	bne.n	80092f2 <_read_r+0x1e>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	b103      	cbz	r3, 80092f2 <_read_r+0x1e>
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	200107ac 	.word	0x200107ac

080092f8 <_write_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d07      	ldr	r5, [pc, #28]	; (8009318 <_write_r+0x20>)
 80092fc:	4604      	mov	r4, r0
 80092fe:	4608      	mov	r0, r1
 8009300:	4611      	mov	r1, r2
 8009302:	2200      	movs	r2, #0
 8009304:	602a      	str	r2, [r5, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	f7f8 fe63 	bl	8001fd2 <_write>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	d102      	bne.n	8009316 <_write_r+0x1e>
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	b103      	cbz	r3, 8009316 <_write_r+0x1e>
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	200107ac 	.word	0x200107ac

0800931c <__errno>:
 800931c:	4b01      	ldr	r3, [pc, #4]	; (8009324 <__errno+0x8>)
 800931e:	6818      	ldr	r0, [r3, #0]
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	200000fc 	.word	0x200000fc

08009328 <__libc_init_array>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	4d0d      	ldr	r5, [pc, #52]	; (8009360 <__libc_init_array+0x38>)
 800932c:	4c0d      	ldr	r4, [pc, #52]	; (8009364 <__libc_init_array+0x3c>)
 800932e:	1b64      	subs	r4, r4, r5
 8009330:	10a4      	asrs	r4, r4, #2
 8009332:	2600      	movs	r6, #0
 8009334:	42a6      	cmp	r6, r4
 8009336:	d109      	bne.n	800934c <__libc_init_array+0x24>
 8009338:	4d0b      	ldr	r5, [pc, #44]	; (8009368 <__libc_init_array+0x40>)
 800933a:	4c0c      	ldr	r4, [pc, #48]	; (800936c <__libc_init_array+0x44>)
 800933c:	f001 feec 	bl	800b118 <_init>
 8009340:	1b64      	subs	r4, r4, r5
 8009342:	10a4      	asrs	r4, r4, #2
 8009344:	2600      	movs	r6, #0
 8009346:	42a6      	cmp	r6, r4
 8009348:	d105      	bne.n	8009356 <__libc_init_array+0x2e>
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009350:	4798      	blx	r3
 8009352:	3601      	adds	r6, #1
 8009354:	e7ee      	b.n	8009334 <__libc_init_array+0xc>
 8009356:	f855 3b04 	ldr.w	r3, [r5], #4
 800935a:	4798      	blx	r3
 800935c:	3601      	adds	r6, #1
 800935e:	e7f2      	b.n	8009346 <__libc_init_array+0x1e>
 8009360:	0800b4c4 	.word	0x0800b4c4
 8009364:	0800b4c4 	.word	0x0800b4c4
 8009368:	0800b4c4 	.word	0x0800b4c4
 800936c:	0800b4c8 	.word	0x0800b4c8

08009370 <__retarget_lock_init_recursive>:
 8009370:	4770      	bx	lr

08009372 <__retarget_lock_acquire_recursive>:
 8009372:	4770      	bx	lr

08009374 <__retarget_lock_release_recursive>:
 8009374:	4770      	bx	lr

08009376 <quorem>:
 8009376:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937a:	6903      	ldr	r3, [r0, #16]
 800937c:	690c      	ldr	r4, [r1, #16]
 800937e:	42a3      	cmp	r3, r4
 8009380:	4607      	mov	r7, r0
 8009382:	db7e      	blt.n	8009482 <quorem+0x10c>
 8009384:	3c01      	subs	r4, #1
 8009386:	f101 0814 	add.w	r8, r1, #20
 800938a:	f100 0514 	add.w	r5, r0, #20
 800938e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800939c:	3301      	adds	r3, #1
 800939e:	429a      	cmp	r2, r3
 80093a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80093a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80093ac:	d331      	bcc.n	8009412 <quorem+0x9c>
 80093ae:	f04f 0e00 	mov.w	lr, #0
 80093b2:	4640      	mov	r0, r8
 80093b4:	46ac      	mov	ip, r5
 80093b6:	46f2      	mov	sl, lr
 80093b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80093bc:	b293      	uxth	r3, r2
 80093be:	fb06 e303 	mla	r3, r6, r3, lr
 80093c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093c6:	0c1a      	lsrs	r2, r3, #16
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	ebaa 0303 	sub.w	r3, sl, r3
 80093ce:	f8dc a000 	ldr.w	sl, [ip]
 80093d2:	fa13 f38a 	uxtah	r3, r3, sl
 80093d6:	fb06 220e 	mla	r2, r6, lr, r2
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	9b00      	ldr	r3, [sp, #0]
 80093de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093e2:	b292      	uxth	r2, r2
 80093e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80093e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80093f0:	4581      	cmp	r9, r0
 80093f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093f6:	f84c 3b04 	str.w	r3, [ip], #4
 80093fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80093fe:	d2db      	bcs.n	80093b8 <quorem+0x42>
 8009400:	f855 300b 	ldr.w	r3, [r5, fp]
 8009404:	b92b      	cbnz	r3, 8009412 <quorem+0x9c>
 8009406:	9b01      	ldr	r3, [sp, #4]
 8009408:	3b04      	subs	r3, #4
 800940a:	429d      	cmp	r5, r3
 800940c:	461a      	mov	r2, r3
 800940e:	d32c      	bcc.n	800946a <quorem+0xf4>
 8009410:	613c      	str	r4, [r7, #16]
 8009412:	4638      	mov	r0, r7
 8009414:	f001 f9a6 	bl	800a764 <__mcmp>
 8009418:	2800      	cmp	r0, #0
 800941a:	db22      	blt.n	8009462 <quorem+0xec>
 800941c:	3601      	adds	r6, #1
 800941e:	4629      	mov	r1, r5
 8009420:	2000      	movs	r0, #0
 8009422:	f858 2b04 	ldr.w	r2, [r8], #4
 8009426:	f8d1 c000 	ldr.w	ip, [r1]
 800942a:	b293      	uxth	r3, r2
 800942c:	1ac3      	subs	r3, r0, r3
 800942e:	0c12      	lsrs	r2, r2, #16
 8009430:	fa13 f38c 	uxtah	r3, r3, ip
 8009434:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009438:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800943c:	b29b      	uxth	r3, r3
 800943e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009442:	45c1      	cmp	r9, r8
 8009444:	f841 3b04 	str.w	r3, [r1], #4
 8009448:	ea4f 4022 	mov.w	r0, r2, asr #16
 800944c:	d2e9      	bcs.n	8009422 <quorem+0xac>
 800944e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009452:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009456:	b922      	cbnz	r2, 8009462 <quorem+0xec>
 8009458:	3b04      	subs	r3, #4
 800945a:	429d      	cmp	r5, r3
 800945c:	461a      	mov	r2, r3
 800945e:	d30a      	bcc.n	8009476 <quorem+0x100>
 8009460:	613c      	str	r4, [r7, #16]
 8009462:	4630      	mov	r0, r6
 8009464:	b003      	add	sp, #12
 8009466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946a:	6812      	ldr	r2, [r2, #0]
 800946c:	3b04      	subs	r3, #4
 800946e:	2a00      	cmp	r2, #0
 8009470:	d1ce      	bne.n	8009410 <quorem+0x9a>
 8009472:	3c01      	subs	r4, #1
 8009474:	e7c9      	b.n	800940a <quorem+0x94>
 8009476:	6812      	ldr	r2, [r2, #0]
 8009478:	3b04      	subs	r3, #4
 800947a:	2a00      	cmp	r2, #0
 800947c:	d1f0      	bne.n	8009460 <quorem+0xea>
 800947e:	3c01      	subs	r4, #1
 8009480:	e7eb      	b.n	800945a <quorem+0xe4>
 8009482:	2000      	movs	r0, #0
 8009484:	e7ee      	b.n	8009464 <quorem+0xee>
	...

08009488 <_dtoa_r>:
 8009488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948c:	ed2d 8b04 	vpush	{d8-d9}
 8009490:	69c5      	ldr	r5, [r0, #28]
 8009492:	b093      	sub	sp, #76	; 0x4c
 8009494:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009498:	ec57 6b10 	vmov	r6, r7, d0
 800949c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80094a0:	9107      	str	r1, [sp, #28]
 80094a2:	4604      	mov	r4, r0
 80094a4:	920a      	str	r2, [sp, #40]	; 0x28
 80094a6:	930d      	str	r3, [sp, #52]	; 0x34
 80094a8:	b975      	cbnz	r5, 80094c8 <_dtoa_r+0x40>
 80094aa:	2010      	movs	r0, #16
 80094ac:	f000 fe2a 	bl	800a104 <malloc>
 80094b0:	4602      	mov	r2, r0
 80094b2:	61e0      	str	r0, [r4, #28]
 80094b4:	b920      	cbnz	r0, 80094c0 <_dtoa_r+0x38>
 80094b6:	4bae      	ldr	r3, [pc, #696]	; (8009770 <_dtoa_r+0x2e8>)
 80094b8:	21ef      	movs	r1, #239	; 0xef
 80094ba:	48ae      	ldr	r0, [pc, #696]	; (8009774 <_dtoa_r+0x2ec>)
 80094bc:	f001 fb1e 	bl	800aafc <__assert_func>
 80094c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094c4:	6005      	str	r5, [r0, #0]
 80094c6:	60c5      	str	r5, [r0, #12]
 80094c8:	69e3      	ldr	r3, [r4, #28]
 80094ca:	6819      	ldr	r1, [r3, #0]
 80094cc:	b151      	cbz	r1, 80094e4 <_dtoa_r+0x5c>
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	604a      	str	r2, [r1, #4]
 80094d2:	2301      	movs	r3, #1
 80094d4:	4093      	lsls	r3, r2
 80094d6:	608b      	str	r3, [r1, #8]
 80094d8:	4620      	mov	r0, r4
 80094da:	f000 ff07 	bl	800a2ec <_Bfree>
 80094de:	69e3      	ldr	r3, [r4, #28]
 80094e0:	2200      	movs	r2, #0
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	1e3b      	subs	r3, r7, #0
 80094e6:	bfbb      	ittet	lt
 80094e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80094ec:	9303      	strlt	r3, [sp, #12]
 80094ee:	2300      	movge	r3, #0
 80094f0:	2201      	movlt	r2, #1
 80094f2:	bfac      	ite	ge
 80094f4:	f8c8 3000 	strge.w	r3, [r8]
 80094f8:	f8c8 2000 	strlt.w	r2, [r8]
 80094fc:	4b9e      	ldr	r3, [pc, #632]	; (8009778 <_dtoa_r+0x2f0>)
 80094fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009502:	ea33 0308 	bics.w	r3, r3, r8
 8009506:	d11b      	bne.n	8009540 <_dtoa_r+0xb8>
 8009508:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800950a:	f242 730f 	movw	r3, #9999	; 0x270f
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009514:	4333      	orrs	r3, r6
 8009516:	f000 8593 	beq.w	800a040 <_dtoa_r+0xbb8>
 800951a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800951c:	b963      	cbnz	r3, 8009538 <_dtoa_r+0xb0>
 800951e:	4b97      	ldr	r3, [pc, #604]	; (800977c <_dtoa_r+0x2f4>)
 8009520:	e027      	b.n	8009572 <_dtoa_r+0xea>
 8009522:	4b97      	ldr	r3, [pc, #604]	; (8009780 <_dtoa_r+0x2f8>)
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	9800      	ldr	r0, [sp, #0]
 800952e:	b013      	add	sp, #76	; 0x4c
 8009530:	ecbd 8b04 	vpop	{d8-d9}
 8009534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009538:	4b90      	ldr	r3, [pc, #576]	; (800977c <_dtoa_r+0x2f4>)
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	3303      	adds	r3, #3
 800953e:	e7f3      	b.n	8009528 <_dtoa_r+0xa0>
 8009540:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009544:	2200      	movs	r2, #0
 8009546:	ec51 0b17 	vmov	r0, r1, d7
 800954a:	eeb0 8a47 	vmov.f32	s16, s14
 800954e:	eef0 8a67 	vmov.f32	s17, s15
 8009552:	2300      	movs	r3, #0
 8009554:	f7f7 fac0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009558:	4681      	mov	r9, r0
 800955a:	b160      	cbz	r0, 8009576 <_dtoa_r+0xee>
 800955c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800955e:	2301      	movs	r3, #1
 8009560:	6013      	str	r3, [r2, #0]
 8009562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009564:	2b00      	cmp	r3, #0
 8009566:	f000 8568 	beq.w	800a03a <_dtoa_r+0xbb2>
 800956a:	4b86      	ldr	r3, [pc, #536]	; (8009784 <_dtoa_r+0x2fc>)
 800956c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	3b01      	subs	r3, #1
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	e7da      	b.n	800952c <_dtoa_r+0xa4>
 8009576:	aa10      	add	r2, sp, #64	; 0x40
 8009578:	a911      	add	r1, sp, #68	; 0x44
 800957a:	4620      	mov	r0, r4
 800957c:	eeb0 0a48 	vmov.f32	s0, s16
 8009580:	eef0 0a68 	vmov.f32	s1, s17
 8009584:	f001 f994 	bl	800a8b0 <__d2b>
 8009588:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800958c:	4682      	mov	sl, r0
 800958e:	2d00      	cmp	r5, #0
 8009590:	d07f      	beq.n	8009692 <_dtoa_r+0x20a>
 8009592:	ee18 3a90 	vmov	r3, s17
 8009596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800959a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800959e:	ec51 0b18 	vmov	r0, r1, d8
 80095a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80095a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80095aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80095ae:	4619      	mov	r1, r3
 80095b0:	2200      	movs	r2, #0
 80095b2:	4b75      	ldr	r3, [pc, #468]	; (8009788 <_dtoa_r+0x300>)
 80095b4:	f7f6 fe70 	bl	8000298 <__aeabi_dsub>
 80095b8:	a367      	add	r3, pc, #412	; (adr r3, 8009758 <_dtoa_r+0x2d0>)
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095be:	f7f7 f823 	bl	8000608 <__aeabi_dmul>
 80095c2:	a367      	add	r3, pc, #412	; (adr r3, 8009760 <_dtoa_r+0x2d8>)
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	f7f6 fe68 	bl	800029c <__adddf3>
 80095cc:	4606      	mov	r6, r0
 80095ce:	4628      	mov	r0, r5
 80095d0:	460f      	mov	r7, r1
 80095d2:	f7f6 ffaf 	bl	8000534 <__aeabi_i2d>
 80095d6:	a364      	add	r3, pc, #400	; (adr r3, 8009768 <_dtoa_r+0x2e0>)
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f7f7 f814 	bl	8000608 <__aeabi_dmul>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4630      	mov	r0, r6
 80095e6:	4639      	mov	r1, r7
 80095e8:	f7f6 fe58 	bl	800029c <__adddf3>
 80095ec:	4606      	mov	r6, r0
 80095ee:	460f      	mov	r7, r1
 80095f0:	f7f7 faba 	bl	8000b68 <__aeabi_d2iz>
 80095f4:	2200      	movs	r2, #0
 80095f6:	4683      	mov	fp, r0
 80095f8:	2300      	movs	r3, #0
 80095fa:	4630      	mov	r0, r6
 80095fc:	4639      	mov	r1, r7
 80095fe:	f7f7 fa75 	bl	8000aec <__aeabi_dcmplt>
 8009602:	b148      	cbz	r0, 8009618 <_dtoa_r+0x190>
 8009604:	4658      	mov	r0, fp
 8009606:	f7f6 ff95 	bl	8000534 <__aeabi_i2d>
 800960a:	4632      	mov	r2, r6
 800960c:	463b      	mov	r3, r7
 800960e:	f7f7 fa63 	bl	8000ad8 <__aeabi_dcmpeq>
 8009612:	b908      	cbnz	r0, 8009618 <_dtoa_r+0x190>
 8009614:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009618:	f1bb 0f16 	cmp.w	fp, #22
 800961c:	d857      	bhi.n	80096ce <_dtoa_r+0x246>
 800961e:	4b5b      	ldr	r3, [pc, #364]	; (800978c <_dtoa_r+0x304>)
 8009620:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	ec51 0b18 	vmov	r0, r1, d8
 800962c:	f7f7 fa5e 	bl	8000aec <__aeabi_dcmplt>
 8009630:	2800      	cmp	r0, #0
 8009632:	d04e      	beq.n	80096d2 <_dtoa_r+0x24a>
 8009634:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009638:	2300      	movs	r3, #0
 800963a:	930c      	str	r3, [sp, #48]	; 0x30
 800963c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800963e:	1b5b      	subs	r3, r3, r5
 8009640:	1e5a      	subs	r2, r3, #1
 8009642:	bf45      	ittet	mi
 8009644:	f1c3 0301 	rsbmi	r3, r3, #1
 8009648:	9305      	strmi	r3, [sp, #20]
 800964a:	2300      	movpl	r3, #0
 800964c:	2300      	movmi	r3, #0
 800964e:	9206      	str	r2, [sp, #24]
 8009650:	bf54      	ite	pl
 8009652:	9305      	strpl	r3, [sp, #20]
 8009654:	9306      	strmi	r3, [sp, #24]
 8009656:	f1bb 0f00 	cmp.w	fp, #0
 800965a:	db3c      	blt.n	80096d6 <_dtoa_r+0x24e>
 800965c:	9b06      	ldr	r3, [sp, #24]
 800965e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009662:	445b      	add	r3, fp
 8009664:	9306      	str	r3, [sp, #24]
 8009666:	2300      	movs	r3, #0
 8009668:	9308      	str	r3, [sp, #32]
 800966a:	9b07      	ldr	r3, [sp, #28]
 800966c:	2b09      	cmp	r3, #9
 800966e:	d868      	bhi.n	8009742 <_dtoa_r+0x2ba>
 8009670:	2b05      	cmp	r3, #5
 8009672:	bfc4      	itt	gt
 8009674:	3b04      	subgt	r3, #4
 8009676:	9307      	strgt	r3, [sp, #28]
 8009678:	9b07      	ldr	r3, [sp, #28]
 800967a:	f1a3 0302 	sub.w	r3, r3, #2
 800967e:	bfcc      	ite	gt
 8009680:	2500      	movgt	r5, #0
 8009682:	2501      	movle	r5, #1
 8009684:	2b03      	cmp	r3, #3
 8009686:	f200 8085 	bhi.w	8009794 <_dtoa_r+0x30c>
 800968a:	e8df f003 	tbb	[pc, r3]
 800968e:	3b2e      	.short	0x3b2e
 8009690:	5839      	.short	0x5839
 8009692:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009696:	441d      	add	r5, r3
 8009698:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800969c:	2b20      	cmp	r3, #32
 800969e:	bfc1      	itttt	gt
 80096a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80096a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80096a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80096ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80096b0:	bfd6      	itet	le
 80096b2:	f1c3 0320 	rsble	r3, r3, #32
 80096b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80096ba:	fa06 f003 	lslle.w	r0, r6, r3
 80096be:	f7f6 ff29 	bl	8000514 <__aeabi_ui2d>
 80096c2:	2201      	movs	r2, #1
 80096c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80096c8:	3d01      	subs	r5, #1
 80096ca:	920e      	str	r2, [sp, #56]	; 0x38
 80096cc:	e76f      	b.n	80095ae <_dtoa_r+0x126>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e7b3      	b.n	800963a <_dtoa_r+0x1b2>
 80096d2:	900c      	str	r0, [sp, #48]	; 0x30
 80096d4:	e7b2      	b.n	800963c <_dtoa_r+0x1b4>
 80096d6:	9b05      	ldr	r3, [sp, #20]
 80096d8:	eba3 030b 	sub.w	r3, r3, fp
 80096dc:	9305      	str	r3, [sp, #20]
 80096de:	f1cb 0300 	rsb	r3, fp, #0
 80096e2:	9308      	str	r3, [sp, #32]
 80096e4:	2300      	movs	r3, #0
 80096e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80096e8:	e7bf      	b.n	800966a <_dtoa_r+0x1e2>
 80096ea:	2300      	movs	r3, #0
 80096ec:	9309      	str	r3, [sp, #36]	; 0x24
 80096ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	dc52      	bgt.n	800979a <_dtoa_r+0x312>
 80096f4:	2301      	movs	r3, #1
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	461a      	mov	r2, r3
 80096fc:	920a      	str	r2, [sp, #40]	; 0x28
 80096fe:	e00b      	b.n	8009718 <_dtoa_r+0x290>
 8009700:	2301      	movs	r3, #1
 8009702:	e7f3      	b.n	80096ec <_dtoa_r+0x264>
 8009704:	2300      	movs	r3, #0
 8009706:	9309      	str	r3, [sp, #36]	; 0x24
 8009708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970a:	445b      	add	r3, fp
 800970c:	9301      	str	r3, [sp, #4]
 800970e:	3301      	adds	r3, #1
 8009710:	2b01      	cmp	r3, #1
 8009712:	9304      	str	r3, [sp, #16]
 8009714:	bfb8      	it	lt
 8009716:	2301      	movlt	r3, #1
 8009718:	69e0      	ldr	r0, [r4, #28]
 800971a:	2100      	movs	r1, #0
 800971c:	2204      	movs	r2, #4
 800971e:	f102 0614 	add.w	r6, r2, #20
 8009722:	429e      	cmp	r6, r3
 8009724:	d93d      	bls.n	80097a2 <_dtoa_r+0x31a>
 8009726:	6041      	str	r1, [r0, #4]
 8009728:	4620      	mov	r0, r4
 800972a:	f000 fd9f 	bl	800a26c <_Balloc>
 800972e:	9000      	str	r0, [sp, #0]
 8009730:	2800      	cmp	r0, #0
 8009732:	d139      	bne.n	80097a8 <_dtoa_r+0x320>
 8009734:	4b16      	ldr	r3, [pc, #88]	; (8009790 <_dtoa_r+0x308>)
 8009736:	4602      	mov	r2, r0
 8009738:	f240 11af 	movw	r1, #431	; 0x1af
 800973c:	e6bd      	b.n	80094ba <_dtoa_r+0x32>
 800973e:	2301      	movs	r3, #1
 8009740:	e7e1      	b.n	8009706 <_dtoa_r+0x27e>
 8009742:	2501      	movs	r5, #1
 8009744:	2300      	movs	r3, #0
 8009746:	9307      	str	r3, [sp, #28]
 8009748:	9509      	str	r5, [sp, #36]	; 0x24
 800974a:	f04f 33ff 	mov.w	r3, #4294967295
 800974e:	9301      	str	r3, [sp, #4]
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	2200      	movs	r2, #0
 8009754:	2312      	movs	r3, #18
 8009756:	e7d1      	b.n	80096fc <_dtoa_r+0x274>
 8009758:	636f4361 	.word	0x636f4361
 800975c:	3fd287a7 	.word	0x3fd287a7
 8009760:	8b60c8b3 	.word	0x8b60c8b3
 8009764:	3fc68a28 	.word	0x3fc68a28
 8009768:	509f79fb 	.word	0x509f79fb
 800976c:	3fd34413 	.word	0x3fd34413
 8009770:	0800b189 	.word	0x0800b189
 8009774:	0800b1a0 	.word	0x0800b1a0
 8009778:	7ff00000 	.word	0x7ff00000
 800977c:	0800b185 	.word	0x0800b185
 8009780:	0800b17c 	.word	0x0800b17c
 8009784:	0800b159 	.word	0x0800b159
 8009788:	3ff80000 	.word	0x3ff80000
 800978c:	0800b290 	.word	0x0800b290
 8009790:	0800b1f8 	.word	0x0800b1f8
 8009794:	2301      	movs	r3, #1
 8009796:	9309      	str	r3, [sp, #36]	; 0x24
 8009798:	e7d7      	b.n	800974a <_dtoa_r+0x2c2>
 800979a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	9304      	str	r3, [sp, #16]
 80097a0:	e7ba      	b.n	8009718 <_dtoa_r+0x290>
 80097a2:	3101      	adds	r1, #1
 80097a4:	0052      	lsls	r2, r2, #1
 80097a6:	e7ba      	b.n	800971e <_dtoa_r+0x296>
 80097a8:	69e3      	ldr	r3, [r4, #28]
 80097aa:	9a00      	ldr	r2, [sp, #0]
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	9b04      	ldr	r3, [sp, #16]
 80097b0:	2b0e      	cmp	r3, #14
 80097b2:	f200 80a8 	bhi.w	8009906 <_dtoa_r+0x47e>
 80097b6:	2d00      	cmp	r5, #0
 80097b8:	f000 80a5 	beq.w	8009906 <_dtoa_r+0x47e>
 80097bc:	f1bb 0f00 	cmp.w	fp, #0
 80097c0:	dd38      	ble.n	8009834 <_dtoa_r+0x3ac>
 80097c2:	4bc0      	ldr	r3, [pc, #768]	; (8009ac4 <_dtoa_r+0x63c>)
 80097c4:	f00b 020f 	and.w	r2, fp, #15
 80097c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80097d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80097d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80097d8:	d019      	beq.n	800980e <_dtoa_r+0x386>
 80097da:	4bbb      	ldr	r3, [pc, #748]	; (8009ac8 <_dtoa_r+0x640>)
 80097dc:	ec51 0b18 	vmov	r0, r1, d8
 80097e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097e4:	f7f7 f83a 	bl	800085c <__aeabi_ddiv>
 80097e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ec:	f008 080f 	and.w	r8, r8, #15
 80097f0:	2503      	movs	r5, #3
 80097f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009ac8 <_dtoa_r+0x640>
 80097f6:	f1b8 0f00 	cmp.w	r8, #0
 80097fa:	d10a      	bne.n	8009812 <_dtoa_r+0x38a>
 80097fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009800:	4632      	mov	r2, r6
 8009802:	463b      	mov	r3, r7
 8009804:	f7f7 f82a 	bl	800085c <__aeabi_ddiv>
 8009808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800980c:	e02b      	b.n	8009866 <_dtoa_r+0x3de>
 800980e:	2502      	movs	r5, #2
 8009810:	e7ef      	b.n	80097f2 <_dtoa_r+0x36a>
 8009812:	f018 0f01 	tst.w	r8, #1
 8009816:	d008      	beq.n	800982a <_dtoa_r+0x3a2>
 8009818:	4630      	mov	r0, r6
 800981a:	4639      	mov	r1, r7
 800981c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009820:	f7f6 fef2 	bl	8000608 <__aeabi_dmul>
 8009824:	3501      	adds	r5, #1
 8009826:	4606      	mov	r6, r0
 8009828:	460f      	mov	r7, r1
 800982a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800982e:	f109 0908 	add.w	r9, r9, #8
 8009832:	e7e0      	b.n	80097f6 <_dtoa_r+0x36e>
 8009834:	f000 809f 	beq.w	8009976 <_dtoa_r+0x4ee>
 8009838:	f1cb 0600 	rsb	r6, fp, #0
 800983c:	4ba1      	ldr	r3, [pc, #644]	; (8009ac4 <_dtoa_r+0x63c>)
 800983e:	4fa2      	ldr	r7, [pc, #648]	; (8009ac8 <_dtoa_r+0x640>)
 8009840:	f006 020f 	and.w	r2, r6, #15
 8009844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	ec51 0b18 	vmov	r0, r1, d8
 8009850:	f7f6 feda 	bl	8000608 <__aeabi_dmul>
 8009854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009858:	1136      	asrs	r6, r6, #4
 800985a:	2300      	movs	r3, #0
 800985c:	2502      	movs	r5, #2
 800985e:	2e00      	cmp	r6, #0
 8009860:	d17e      	bne.n	8009960 <_dtoa_r+0x4d8>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1d0      	bne.n	8009808 <_dtoa_r+0x380>
 8009866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009868:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 8084 	beq.w	800997a <_dtoa_r+0x4f2>
 8009872:	4b96      	ldr	r3, [pc, #600]	; (8009acc <_dtoa_r+0x644>)
 8009874:	2200      	movs	r2, #0
 8009876:	4640      	mov	r0, r8
 8009878:	4649      	mov	r1, r9
 800987a:	f7f7 f937 	bl	8000aec <__aeabi_dcmplt>
 800987e:	2800      	cmp	r0, #0
 8009880:	d07b      	beq.n	800997a <_dtoa_r+0x4f2>
 8009882:	9b04      	ldr	r3, [sp, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d078      	beq.n	800997a <_dtoa_r+0x4f2>
 8009888:	9b01      	ldr	r3, [sp, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	dd39      	ble.n	8009902 <_dtoa_r+0x47a>
 800988e:	4b90      	ldr	r3, [pc, #576]	; (8009ad0 <_dtoa_r+0x648>)
 8009890:	2200      	movs	r2, #0
 8009892:	4640      	mov	r0, r8
 8009894:	4649      	mov	r1, r9
 8009896:	f7f6 feb7 	bl	8000608 <__aeabi_dmul>
 800989a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800989e:	9e01      	ldr	r6, [sp, #4]
 80098a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80098a4:	3501      	adds	r5, #1
 80098a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80098aa:	4628      	mov	r0, r5
 80098ac:	f7f6 fe42 	bl	8000534 <__aeabi_i2d>
 80098b0:	4642      	mov	r2, r8
 80098b2:	464b      	mov	r3, r9
 80098b4:	f7f6 fea8 	bl	8000608 <__aeabi_dmul>
 80098b8:	4b86      	ldr	r3, [pc, #536]	; (8009ad4 <_dtoa_r+0x64c>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	f7f6 fcee 	bl	800029c <__adddf3>
 80098c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80098c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098c8:	9303      	str	r3, [sp, #12]
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	d158      	bne.n	8009980 <_dtoa_r+0x4f8>
 80098ce:	4b82      	ldr	r3, [pc, #520]	; (8009ad8 <_dtoa_r+0x650>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	4640      	mov	r0, r8
 80098d4:	4649      	mov	r1, r9
 80098d6:	f7f6 fcdf 	bl	8000298 <__aeabi_dsub>
 80098da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098de:	4680      	mov	r8, r0
 80098e0:	4689      	mov	r9, r1
 80098e2:	f7f7 f921 	bl	8000b28 <__aeabi_dcmpgt>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	f040 8296 	bne.w	8009e18 <_dtoa_r+0x990>
 80098ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80098f0:	4640      	mov	r0, r8
 80098f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098f6:	4649      	mov	r1, r9
 80098f8:	f7f7 f8f8 	bl	8000aec <__aeabi_dcmplt>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	f040 8289 	bne.w	8009e14 <_dtoa_r+0x98c>
 8009902:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009908:	2b00      	cmp	r3, #0
 800990a:	f2c0 814e 	blt.w	8009baa <_dtoa_r+0x722>
 800990e:	f1bb 0f0e 	cmp.w	fp, #14
 8009912:	f300 814a 	bgt.w	8009baa <_dtoa_r+0x722>
 8009916:	4b6b      	ldr	r3, [pc, #428]	; (8009ac4 <_dtoa_r+0x63c>)
 8009918:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800991c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009922:	2b00      	cmp	r3, #0
 8009924:	f280 80dc 	bge.w	8009ae0 <_dtoa_r+0x658>
 8009928:	9b04      	ldr	r3, [sp, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	f300 80d8 	bgt.w	8009ae0 <_dtoa_r+0x658>
 8009930:	f040 826f 	bne.w	8009e12 <_dtoa_r+0x98a>
 8009934:	4b68      	ldr	r3, [pc, #416]	; (8009ad8 <_dtoa_r+0x650>)
 8009936:	2200      	movs	r2, #0
 8009938:	4640      	mov	r0, r8
 800993a:	4649      	mov	r1, r9
 800993c:	f7f6 fe64 	bl	8000608 <__aeabi_dmul>
 8009940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009944:	f7f7 f8e6 	bl	8000b14 <__aeabi_dcmpge>
 8009948:	9e04      	ldr	r6, [sp, #16]
 800994a:	4637      	mov	r7, r6
 800994c:	2800      	cmp	r0, #0
 800994e:	f040 8245 	bne.w	8009ddc <_dtoa_r+0x954>
 8009952:	9d00      	ldr	r5, [sp, #0]
 8009954:	2331      	movs	r3, #49	; 0x31
 8009956:	f805 3b01 	strb.w	r3, [r5], #1
 800995a:	f10b 0b01 	add.w	fp, fp, #1
 800995e:	e241      	b.n	8009de4 <_dtoa_r+0x95c>
 8009960:	07f2      	lsls	r2, r6, #31
 8009962:	d505      	bpl.n	8009970 <_dtoa_r+0x4e8>
 8009964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009968:	f7f6 fe4e 	bl	8000608 <__aeabi_dmul>
 800996c:	3501      	adds	r5, #1
 800996e:	2301      	movs	r3, #1
 8009970:	1076      	asrs	r6, r6, #1
 8009972:	3708      	adds	r7, #8
 8009974:	e773      	b.n	800985e <_dtoa_r+0x3d6>
 8009976:	2502      	movs	r5, #2
 8009978:	e775      	b.n	8009866 <_dtoa_r+0x3de>
 800997a:	9e04      	ldr	r6, [sp, #16]
 800997c:	465f      	mov	r7, fp
 800997e:	e792      	b.n	80098a6 <_dtoa_r+0x41e>
 8009980:	9900      	ldr	r1, [sp, #0]
 8009982:	4b50      	ldr	r3, [pc, #320]	; (8009ac4 <_dtoa_r+0x63c>)
 8009984:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009988:	4431      	add	r1, r6
 800998a:	9102      	str	r1, [sp, #8]
 800998c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800998e:	eeb0 9a47 	vmov.f32	s18, s14
 8009992:	eef0 9a67 	vmov.f32	s19, s15
 8009996:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800999a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800999e:	2900      	cmp	r1, #0
 80099a0:	d044      	beq.n	8009a2c <_dtoa_r+0x5a4>
 80099a2:	494e      	ldr	r1, [pc, #312]	; (8009adc <_dtoa_r+0x654>)
 80099a4:	2000      	movs	r0, #0
 80099a6:	f7f6 ff59 	bl	800085c <__aeabi_ddiv>
 80099aa:	ec53 2b19 	vmov	r2, r3, d9
 80099ae:	f7f6 fc73 	bl	8000298 <__aeabi_dsub>
 80099b2:	9d00      	ldr	r5, [sp, #0]
 80099b4:	ec41 0b19 	vmov	d9, r0, r1
 80099b8:	4649      	mov	r1, r9
 80099ba:	4640      	mov	r0, r8
 80099bc:	f7f7 f8d4 	bl	8000b68 <__aeabi_d2iz>
 80099c0:	4606      	mov	r6, r0
 80099c2:	f7f6 fdb7 	bl	8000534 <__aeabi_i2d>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4640      	mov	r0, r8
 80099cc:	4649      	mov	r1, r9
 80099ce:	f7f6 fc63 	bl	8000298 <__aeabi_dsub>
 80099d2:	3630      	adds	r6, #48	; 0x30
 80099d4:	f805 6b01 	strb.w	r6, [r5], #1
 80099d8:	ec53 2b19 	vmov	r2, r3, d9
 80099dc:	4680      	mov	r8, r0
 80099de:	4689      	mov	r9, r1
 80099e0:	f7f7 f884 	bl	8000aec <__aeabi_dcmplt>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d164      	bne.n	8009ab2 <_dtoa_r+0x62a>
 80099e8:	4642      	mov	r2, r8
 80099ea:	464b      	mov	r3, r9
 80099ec:	4937      	ldr	r1, [pc, #220]	; (8009acc <_dtoa_r+0x644>)
 80099ee:	2000      	movs	r0, #0
 80099f0:	f7f6 fc52 	bl	8000298 <__aeabi_dsub>
 80099f4:	ec53 2b19 	vmov	r2, r3, d9
 80099f8:	f7f7 f878 	bl	8000aec <__aeabi_dcmplt>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	f040 80b6 	bne.w	8009b6e <_dtoa_r+0x6e6>
 8009a02:	9b02      	ldr	r3, [sp, #8]
 8009a04:	429d      	cmp	r5, r3
 8009a06:	f43f af7c 	beq.w	8009902 <_dtoa_r+0x47a>
 8009a0a:	4b31      	ldr	r3, [pc, #196]	; (8009ad0 <_dtoa_r+0x648>)
 8009a0c:	ec51 0b19 	vmov	r0, r1, d9
 8009a10:	2200      	movs	r2, #0
 8009a12:	f7f6 fdf9 	bl	8000608 <__aeabi_dmul>
 8009a16:	4b2e      	ldr	r3, [pc, #184]	; (8009ad0 <_dtoa_r+0x648>)
 8009a18:	ec41 0b19 	vmov	d9, r0, r1
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	4640      	mov	r0, r8
 8009a20:	4649      	mov	r1, r9
 8009a22:	f7f6 fdf1 	bl	8000608 <__aeabi_dmul>
 8009a26:	4680      	mov	r8, r0
 8009a28:	4689      	mov	r9, r1
 8009a2a:	e7c5      	b.n	80099b8 <_dtoa_r+0x530>
 8009a2c:	ec51 0b17 	vmov	r0, r1, d7
 8009a30:	f7f6 fdea 	bl	8000608 <__aeabi_dmul>
 8009a34:	9b02      	ldr	r3, [sp, #8]
 8009a36:	9d00      	ldr	r5, [sp, #0]
 8009a38:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a3a:	ec41 0b19 	vmov	d9, r0, r1
 8009a3e:	4649      	mov	r1, r9
 8009a40:	4640      	mov	r0, r8
 8009a42:	f7f7 f891 	bl	8000b68 <__aeabi_d2iz>
 8009a46:	4606      	mov	r6, r0
 8009a48:	f7f6 fd74 	bl	8000534 <__aeabi_i2d>
 8009a4c:	3630      	adds	r6, #48	; 0x30
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	4640      	mov	r0, r8
 8009a54:	4649      	mov	r1, r9
 8009a56:	f7f6 fc1f 	bl	8000298 <__aeabi_dsub>
 8009a5a:	f805 6b01 	strb.w	r6, [r5], #1
 8009a5e:	9b02      	ldr	r3, [sp, #8]
 8009a60:	429d      	cmp	r5, r3
 8009a62:	4680      	mov	r8, r0
 8009a64:	4689      	mov	r9, r1
 8009a66:	f04f 0200 	mov.w	r2, #0
 8009a6a:	d124      	bne.n	8009ab6 <_dtoa_r+0x62e>
 8009a6c:	4b1b      	ldr	r3, [pc, #108]	; (8009adc <_dtoa_r+0x654>)
 8009a6e:	ec51 0b19 	vmov	r0, r1, d9
 8009a72:	f7f6 fc13 	bl	800029c <__adddf3>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4640      	mov	r0, r8
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	f7f7 f853 	bl	8000b28 <__aeabi_dcmpgt>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d173      	bne.n	8009b6e <_dtoa_r+0x6e6>
 8009a86:	ec53 2b19 	vmov	r2, r3, d9
 8009a8a:	4914      	ldr	r1, [pc, #80]	; (8009adc <_dtoa_r+0x654>)
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	f7f6 fc03 	bl	8000298 <__aeabi_dsub>
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	4640      	mov	r0, r8
 8009a98:	4649      	mov	r1, r9
 8009a9a:	f7f7 f827 	bl	8000aec <__aeabi_dcmplt>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f43f af2f 	beq.w	8009902 <_dtoa_r+0x47a>
 8009aa4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009aa6:	1e6b      	subs	r3, r5, #1
 8009aa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009aaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009aae:	2b30      	cmp	r3, #48	; 0x30
 8009ab0:	d0f8      	beq.n	8009aa4 <_dtoa_r+0x61c>
 8009ab2:	46bb      	mov	fp, r7
 8009ab4:	e04a      	b.n	8009b4c <_dtoa_r+0x6c4>
 8009ab6:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <_dtoa_r+0x648>)
 8009ab8:	f7f6 fda6 	bl	8000608 <__aeabi_dmul>
 8009abc:	4680      	mov	r8, r0
 8009abe:	4689      	mov	r9, r1
 8009ac0:	e7bd      	b.n	8009a3e <_dtoa_r+0x5b6>
 8009ac2:	bf00      	nop
 8009ac4:	0800b290 	.word	0x0800b290
 8009ac8:	0800b268 	.word	0x0800b268
 8009acc:	3ff00000 	.word	0x3ff00000
 8009ad0:	40240000 	.word	0x40240000
 8009ad4:	401c0000 	.word	0x401c0000
 8009ad8:	40140000 	.word	0x40140000
 8009adc:	3fe00000 	.word	0x3fe00000
 8009ae0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009ae4:	9d00      	ldr	r5, [sp, #0]
 8009ae6:	4642      	mov	r2, r8
 8009ae8:	464b      	mov	r3, r9
 8009aea:	4630      	mov	r0, r6
 8009aec:	4639      	mov	r1, r7
 8009aee:	f7f6 feb5 	bl	800085c <__aeabi_ddiv>
 8009af2:	f7f7 f839 	bl	8000b68 <__aeabi_d2iz>
 8009af6:	9001      	str	r0, [sp, #4]
 8009af8:	f7f6 fd1c 	bl	8000534 <__aeabi_i2d>
 8009afc:	4642      	mov	r2, r8
 8009afe:	464b      	mov	r3, r9
 8009b00:	f7f6 fd82 	bl	8000608 <__aeabi_dmul>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4630      	mov	r0, r6
 8009b0a:	4639      	mov	r1, r7
 8009b0c:	f7f6 fbc4 	bl	8000298 <__aeabi_dsub>
 8009b10:	9e01      	ldr	r6, [sp, #4]
 8009b12:	9f04      	ldr	r7, [sp, #16]
 8009b14:	3630      	adds	r6, #48	; 0x30
 8009b16:	f805 6b01 	strb.w	r6, [r5], #1
 8009b1a:	9e00      	ldr	r6, [sp, #0]
 8009b1c:	1bae      	subs	r6, r5, r6
 8009b1e:	42b7      	cmp	r7, r6
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	d134      	bne.n	8009b90 <_dtoa_r+0x708>
 8009b26:	f7f6 fbb9 	bl	800029c <__adddf3>
 8009b2a:	4642      	mov	r2, r8
 8009b2c:	464b      	mov	r3, r9
 8009b2e:	4606      	mov	r6, r0
 8009b30:	460f      	mov	r7, r1
 8009b32:	f7f6 fff9 	bl	8000b28 <__aeabi_dcmpgt>
 8009b36:	b9c8      	cbnz	r0, 8009b6c <_dtoa_r+0x6e4>
 8009b38:	4642      	mov	r2, r8
 8009b3a:	464b      	mov	r3, r9
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	4639      	mov	r1, r7
 8009b40:	f7f6 ffca 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b44:	b110      	cbz	r0, 8009b4c <_dtoa_r+0x6c4>
 8009b46:	9b01      	ldr	r3, [sp, #4]
 8009b48:	07db      	lsls	r3, r3, #31
 8009b4a:	d40f      	bmi.n	8009b6c <_dtoa_r+0x6e4>
 8009b4c:	4651      	mov	r1, sl
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f000 fbcc 	bl	800a2ec <_Bfree>
 8009b54:	2300      	movs	r3, #0
 8009b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b58:	702b      	strb	r3, [r5, #0]
 8009b5a:	f10b 0301 	add.w	r3, fp, #1
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f43f ace2 	beq.w	800952c <_dtoa_r+0xa4>
 8009b68:	601d      	str	r5, [r3, #0]
 8009b6a:	e4df      	b.n	800952c <_dtoa_r+0xa4>
 8009b6c:	465f      	mov	r7, fp
 8009b6e:	462b      	mov	r3, r5
 8009b70:	461d      	mov	r5, r3
 8009b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b76:	2a39      	cmp	r2, #57	; 0x39
 8009b78:	d106      	bne.n	8009b88 <_dtoa_r+0x700>
 8009b7a:	9a00      	ldr	r2, [sp, #0]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d1f7      	bne.n	8009b70 <_dtoa_r+0x6e8>
 8009b80:	9900      	ldr	r1, [sp, #0]
 8009b82:	2230      	movs	r2, #48	; 0x30
 8009b84:	3701      	adds	r7, #1
 8009b86:	700a      	strb	r2, [r1, #0]
 8009b88:	781a      	ldrb	r2, [r3, #0]
 8009b8a:	3201      	adds	r2, #1
 8009b8c:	701a      	strb	r2, [r3, #0]
 8009b8e:	e790      	b.n	8009ab2 <_dtoa_r+0x62a>
 8009b90:	4ba3      	ldr	r3, [pc, #652]	; (8009e20 <_dtoa_r+0x998>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	f7f6 fd38 	bl	8000608 <__aeabi_dmul>
 8009b98:	2200      	movs	r2, #0
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	4606      	mov	r6, r0
 8009b9e:	460f      	mov	r7, r1
 8009ba0:	f7f6 ff9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d09e      	beq.n	8009ae6 <_dtoa_r+0x65e>
 8009ba8:	e7d0      	b.n	8009b4c <_dtoa_r+0x6c4>
 8009baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bac:	2a00      	cmp	r2, #0
 8009bae:	f000 80ca 	beq.w	8009d46 <_dtoa_r+0x8be>
 8009bb2:	9a07      	ldr	r2, [sp, #28]
 8009bb4:	2a01      	cmp	r2, #1
 8009bb6:	f300 80ad 	bgt.w	8009d14 <_dtoa_r+0x88c>
 8009bba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bbc:	2a00      	cmp	r2, #0
 8009bbe:	f000 80a5 	beq.w	8009d0c <_dtoa_r+0x884>
 8009bc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009bc6:	9e08      	ldr	r6, [sp, #32]
 8009bc8:	9d05      	ldr	r5, [sp, #20]
 8009bca:	9a05      	ldr	r2, [sp, #20]
 8009bcc:	441a      	add	r2, r3
 8009bce:	9205      	str	r2, [sp, #20]
 8009bd0:	9a06      	ldr	r2, [sp, #24]
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	441a      	add	r2, r3
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	9206      	str	r2, [sp, #24]
 8009bda:	f000 fc3d 	bl	800a458 <__i2b>
 8009bde:	4607      	mov	r7, r0
 8009be0:	b165      	cbz	r5, 8009bfc <_dtoa_r+0x774>
 8009be2:	9b06      	ldr	r3, [sp, #24]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	dd09      	ble.n	8009bfc <_dtoa_r+0x774>
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	9a05      	ldr	r2, [sp, #20]
 8009bec:	bfa8      	it	ge
 8009bee:	462b      	movge	r3, r5
 8009bf0:	1ad2      	subs	r2, r2, r3
 8009bf2:	9205      	str	r2, [sp, #20]
 8009bf4:	9a06      	ldr	r2, [sp, #24]
 8009bf6:	1aed      	subs	r5, r5, r3
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	9306      	str	r3, [sp, #24]
 8009bfc:	9b08      	ldr	r3, [sp, #32]
 8009bfe:	b1f3      	cbz	r3, 8009c3e <_dtoa_r+0x7b6>
 8009c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 80a3 	beq.w	8009d4e <_dtoa_r+0x8c6>
 8009c08:	2e00      	cmp	r6, #0
 8009c0a:	dd10      	ble.n	8009c2e <_dtoa_r+0x7a6>
 8009c0c:	4639      	mov	r1, r7
 8009c0e:	4632      	mov	r2, r6
 8009c10:	4620      	mov	r0, r4
 8009c12:	f000 fce1 	bl	800a5d8 <__pow5mult>
 8009c16:	4652      	mov	r2, sl
 8009c18:	4601      	mov	r1, r0
 8009c1a:	4607      	mov	r7, r0
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f000 fc31 	bl	800a484 <__multiply>
 8009c22:	4651      	mov	r1, sl
 8009c24:	4680      	mov	r8, r0
 8009c26:	4620      	mov	r0, r4
 8009c28:	f000 fb60 	bl	800a2ec <_Bfree>
 8009c2c:	46c2      	mov	sl, r8
 8009c2e:	9b08      	ldr	r3, [sp, #32]
 8009c30:	1b9a      	subs	r2, r3, r6
 8009c32:	d004      	beq.n	8009c3e <_dtoa_r+0x7b6>
 8009c34:	4651      	mov	r1, sl
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 fcce 	bl	800a5d8 <__pow5mult>
 8009c3c:	4682      	mov	sl, r0
 8009c3e:	2101      	movs	r1, #1
 8009c40:	4620      	mov	r0, r4
 8009c42:	f000 fc09 	bl	800a458 <__i2b>
 8009c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	4606      	mov	r6, r0
 8009c4c:	f340 8081 	ble.w	8009d52 <_dtoa_r+0x8ca>
 8009c50:	461a      	mov	r2, r3
 8009c52:	4601      	mov	r1, r0
 8009c54:	4620      	mov	r0, r4
 8009c56:	f000 fcbf 	bl	800a5d8 <__pow5mult>
 8009c5a:	9b07      	ldr	r3, [sp, #28]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	4606      	mov	r6, r0
 8009c60:	dd7a      	ble.n	8009d58 <_dtoa_r+0x8d0>
 8009c62:	f04f 0800 	mov.w	r8, #0
 8009c66:	6933      	ldr	r3, [r6, #16]
 8009c68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c6c:	6918      	ldr	r0, [r3, #16]
 8009c6e:	f000 fba5 	bl	800a3bc <__hi0bits>
 8009c72:	f1c0 0020 	rsb	r0, r0, #32
 8009c76:	9b06      	ldr	r3, [sp, #24]
 8009c78:	4418      	add	r0, r3
 8009c7a:	f010 001f 	ands.w	r0, r0, #31
 8009c7e:	f000 8094 	beq.w	8009daa <_dtoa_r+0x922>
 8009c82:	f1c0 0320 	rsb	r3, r0, #32
 8009c86:	2b04      	cmp	r3, #4
 8009c88:	f340 8085 	ble.w	8009d96 <_dtoa_r+0x90e>
 8009c8c:	9b05      	ldr	r3, [sp, #20]
 8009c8e:	f1c0 001c 	rsb	r0, r0, #28
 8009c92:	4403      	add	r3, r0
 8009c94:	9305      	str	r3, [sp, #20]
 8009c96:	9b06      	ldr	r3, [sp, #24]
 8009c98:	4403      	add	r3, r0
 8009c9a:	4405      	add	r5, r0
 8009c9c:	9306      	str	r3, [sp, #24]
 8009c9e:	9b05      	ldr	r3, [sp, #20]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	dd05      	ble.n	8009cb0 <_dtoa_r+0x828>
 8009ca4:	4651      	mov	r1, sl
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 fcef 	bl	800a68c <__lshift>
 8009cae:	4682      	mov	sl, r0
 8009cb0:	9b06      	ldr	r3, [sp, #24]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	dd05      	ble.n	8009cc2 <_dtoa_r+0x83a>
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f000 fce6 	bl	800a68c <__lshift>
 8009cc0:	4606      	mov	r6, r0
 8009cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d072      	beq.n	8009dae <_dtoa_r+0x926>
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4650      	mov	r0, sl
 8009ccc:	f000 fd4a 	bl	800a764 <__mcmp>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	da6c      	bge.n	8009dae <_dtoa_r+0x926>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	4651      	mov	r1, sl
 8009cd8:	220a      	movs	r2, #10
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f000 fb28 	bl	800a330 <__multadd>
 8009ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ce6:	4682      	mov	sl, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 81b0 	beq.w	800a04e <_dtoa_r+0xbc6>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4639      	mov	r1, r7
 8009cf2:	220a      	movs	r2, #10
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 fb1b 	bl	800a330 <__multadd>
 8009cfa:	9b01      	ldr	r3, [sp, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	4607      	mov	r7, r0
 8009d00:	f300 8096 	bgt.w	8009e30 <_dtoa_r+0x9a8>
 8009d04:	9b07      	ldr	r3, [sp, #28]
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	dc59      	bgt.n	8009dbe <_dtoa_r+0x936>
 8009d0a:	e091      	b.n	8009e30 <_dtoa_r+0x9a8>
 8009d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d12:	e758      	b.n	8009bc6 <_dtoa_r+0x73e>
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	1e5e      	subs	r6, r3, #1
 8009d18:	9b08      	ldr	r3, [sp, #32]
 8009d1a:	42b3      	cmp	r3, r6
 8009d1c:	bfbf      	itttt	lt
 8009d1e:	9b08      	ldrlt	r3, [sp, #32]
 8009d20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009d22:	9608      	strlt	r6, [sp, #32]
 8009d24:	1af3      	sublt	r3, r6, r3
 8009d26:	bfb4      	ite	lt
 8009d28:	18d2      	addlt	r2, r2, r3
 8009d2a:	1b9e      	subge	r6, r3, r6
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	bfbc      	itt	lt
 8009d30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009d32:	2600      	movlt	r6, #0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	bfb7      	itett	lt
 8009d38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009d3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009d40:	1a9d      	sublt	r5, r3, r2
 8009d42:	2300      	movlt	r3, #0
 8009d44:	e741      	b.n	8009bca <_dtoa_r+0x742>
 8009d46:	9e08      	ldr	r6, [sp, #32]
 8009d48:	9d05      	ldr	r5, [sp, #20]
 8009d4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009d4c:	e748      	b.n	8009be0 <_dtoa_r+0x758>
 8009d4e:	9a08      	ldr	r2, [sp, #32]
 8009d50:	e770      	b.n	8009c34 <_dtoa_r+0x7ac>
 8009d52:	9b07      	ldr	r3, [sp, #28]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	dc19      	bgt.n	8009d8c <_dtoa_r+0x904>
 8009d58:	9b02      	ldr	r3, [sp, #8]
 8009d5a:	b9bb      	cbnz	r3, 8009d8c <_dtoa_r+0x904>
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d62:	b99b      	cbnz	r3, 8009d8c <_dtoa_r+0x904>
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d6a:	0d1b      	lsrs	r3, r3, #20
 8009d6c:	051b      	lsls	r3, r3, #20
 8009d6e:	b183      	cbz	r3, 8009d92 <_dtoa_r+0x90a>
 8009d70:	9b05      	ldr	r3, [sp, #20]
 8009d72:	3301      	adds	r3, #1
 8009d74:	9305      	str	r3, [sp, #20]
 8009d76:	9b06      	ldr	r3, [sp, #24]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	9306      	str	r3, [sp, #24]
 8009d7c:	f04f 0801 	mov.w	r8, #1
 8009d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f47f af6f 	bne.w	8009c66 <_dtoa_r+0x7de>
 8009d88:	2001      	movs	r0, #1
 8009d8a:	e774      	b.n	8009c76 <_dtoa_r+0x7ee>
 8009d8c:	f04f 0800 	mov.w	r8, #0
 8009d90:	e7f6      	b.n	8009d80 <_dtoa_r+0x8f8>
 8009d92:	4698      	mov	r8, r3
 8009d94:	e7f4      	b.n	8009d80 <_dtoa_r+0x8f8>
 8009d96:	d082      	beq.n	8009c9e <_dtoa_r+0x816>
 8009d98:	9a05      	ldr	r2, [sp, #20]
 8009d9a:	331c      	adds	r3, #28
 8009d9c:	441a      	add	r2, r3
 8009d9e:	9205      	str	r2, [sp, #20]
 8009da0:	9a06      	ldr	r2, [sp, #24]
 8009da2:	441a      	add	r2, r3
 8009da4:	441d      	add	r5, r3
 8009da6:	9206      	str	r2, [sp, #24]
 8009da8:	e779      	b.n	8009c9e <_dtoa_r+0x816>
 8009daa:	4603      	mov	r3, r0
 8009dac:	e7f4      	b.n	8009d98 <_dtoa_r+0x910>
 8009dae:	9b04      	ldr	r3, [sp, #16]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	dc37      	bgt.n	8009e24 <_dtoa_r+0x99c>
 8009db4:	9b07      	ldr	r3, [sp, #28]
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	dd34      	ble.n	8009e24 <_dtoa_r+0x99c>
 8009dba:	9b04      	ldr	r3, [sp, #16]
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	9b01      	ldr	r3, [sp, #4]
 8009dc0:	b963      	cbnz	r3, 8009ddc <_dtoa_r+0x954>
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	2205      	movs	r2, #5
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f000 fab2 	bl	800a330 <__multadd>
 8009dcc:	4601      	mov	r1, r0
 8009dce:	4606      	mov	r6, r0
 8009dd0:	4650      	mov	r0, sl
 8009dd2:	f000 fcc7 	bl	800a764 <__mcmp>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	f73f adbb 	bgt.w	8009952 <_dtoa_r+0x4ca>
 8009ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dde:	9d00      	ldr	r5, [sp, #0]
 8009de0:	ea6f 0b03 	mvn.w	fp, r3
 8009de4:	f04f 0800 	mov.w	r8, #0
 8009de8:	4631      	mov	r1, r6
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fa7e 	bl	800a2ec <_Bfree>
 8009df0:	2f00      	cmp	r7, #0
 8009df2:	f43f aeab 	beq.w	8009b4c <_dtoa_r+0x6c4>
 8009df6:	f1b8 0f00 	cmp.w	r8, #0
 8009dfa:	d005      	beq.n	8009e08 <_dtoa_r+0x980>
 8009dfc:	45b8      	cmp	r8, r7
 8009dfe:	d003      	beq.n	8009e08 <_dtoa_r+0x980>
 8009e00:	4641      	mov	r1, r8
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 fa72 	bl	800a2ec <_Bfree>
 8009e08:	4639      	mov	r1, r7
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 fa6e 	bl	800a2ec <_Bfree>
 8009e10:	e69c      	b.n	8009b4c <_dtoa_r+0x6c4>
 8009e12:	2600      	movs	r6, #0
 8009e14:	4637      	mov	r7, r6
 8009e16:	e7e1      	b.n	8009ddc <_dtoa_r+0x954>
 8009e18:	46bb      	mov	fp, r7
 8009e1a:	4637      	mov	r7, r6
 8009e1c:	e599      	b.n	8009952 <_dtoa_r+0x4ca>
 8009e1e:	bf00      	nop
 8009e20:	40240000 	.word	0x40240000
 8009e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 80c8 	beq.w	8009fbc <_dtoa_r+0xb34>
 8009e2c:	9b04      	ldr	r3, [sp, #16]
 8009e2e:	9301      	str	r3, [sp, #4]
 8009e30:	2d00      	cmp	r5, #0
 8009e32:	dd05      	ble.n	8009e40 <_dtoa_r+0x9b8>
 8009e34:	4639      	mov	r1, r7
 8009e36:	462a      	mov	r2, r5
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f000 fc27 	bl	800a68c <__lshift>
 8009e3e:	4607      	mov	r7, r0
 8009e40:	f1b8 0f00 	cmp.w	r8, #0
 8009e44:	d05b      	beq.n	8009efe <_dtoa_r+0xa76>
 8009e46:	6879      	ldr	r1, [r7, #4]
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f000 fa0f 	bl	800a26c <_Balloc>
 8009e4e:	4605      	mov	r5, r0
 8009e50:	b928      	cbnz	r0, 8009e5e <_dtoa_r+0x9d6>
 8009e52:	4b83      	ldr	r3, [pc, #524]	; (800a060 <_dtoa_r+0xbd8>)
 8009e54:	4602      	mov	r2, r0
 8009e56:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009e5a:	f7ff bb2e 	b.w	80094ba <_dtoa_r+0x32>
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	3202      	adds	r2, #2
 8009e62:	0092      	lsls	r2, r2, #2
 8009e64:	f107 010c 	add.w	r1, r7, #12
 8009e68:	300c      	adds	r0, #12
 8009e6a:	f000 fe39 	bl	800aae0 <memcpy>
 8009e6e:	2201      	movs	r2, #1
 8009e70:	4629      	mov	r1, r5
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 fc0a 	bl	800a68c <__lshift>
 8009e78:	9b00      	ldr	r3, [sp, #0]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	9304      	str	r3, [sp, #16]
 8009e7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e82:	4413      	add	r3, r2
 8009e84:	9308      	str	r3, [sp, #32]
 8009e86:	9b02      	ldr	r3, [sp, #8]
 8009e88:	f003 0301 	and.w	r3, r3, #1
 8009e8c:	46b8      	mov	r8, r7
 8009e8e:	9306      	str	r3, [sp, #24]
 8009e90:	4607      	mov	r7, r0
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	4631      	mov	r1, r6
 8009e96:	3b01      	subs	r3, #1
 8009e98:	4650      	mov	r0, sl
 8009e9a:	9301      	str	r3, [sp, #4]
 8009e9c:	f7ff fa6b 	bl	8009376 <quorem>
 8009ea0:	4641      	mov	r1, r8
 8009ea2:	9002      	str	r0, [sp, #8]
 8009ea4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009ea8:	4650      	mov	r0, sl
 8009eaa:	f000 fc5b 	bl	800a764 <__mcmp>
 8009eae:	463a      	mov	r2, r7
 8009eb0:	9005      	str	r0, [sp, #20]
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f000 fc71 	bl	800a79c <__mdiff>
 8009eba:	68c2      	ldr	r2, [r0, #12]
 8009ebc:	4605      	mov	r5, r0
 8009ebe:	bb02      	cbnz	r2, 8009f02 <_dtoa_r+0xa7a>
 8009ec0:	4601      	mov	r1, r0
 8009ec2:	4650      	mov	r0, sl
 8009ec4:	f000 fc4e 	bl	800a764 <__mcmp>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	4629      	mov	r1, r5
 8009ecc:	4620      	mov	r0, r4
 8009ece:	9209      	str	r2, [sp, #36]	; 0x24
 8009ed0:	f000 fa0c 	bl	800a2ec <_Bfree>
 8009ed4:	9b07      	ldr	r3, [sp, #28]
 8009ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed8:	9d04      	ldr	r5, [sp, #16]
 8009eda:	ea43 0102 	orr.w	r1, r3, r2
 8009ede:	9b06      	ldr	r3, [sp, #24]
 8009ee0:	4319      	orrs	r1, r3
 8009ee2:	d110      	bne.n	8009f06 <_dtoa_r+0xa7e>
 8009ee4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ee8:	d029      	beq.n	8009f3e <_dtoa_r+0xab6>
 8009eea:	9b05      	ldr	r3, [sp, #20]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	dd02      	ble.n	8009ef6 <_dtoa_r+0xa6e>
 8009ef0:	9b02      	ldr	r3, [sp, #8]
 8009ef2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009ef6:	9b01      	ldr	r3, [sp, #4]
 8009ef8:	f883 9000 	strb.w	r9, [r3]
 8009efc:	e774      	b.n	8009de8 <_dtoa_r+0x960>
 8009efe:	4638      	mov	r0, r7
 8009f00:	e7ba      	b.n	8009e78 <_dtoa_r+0x9f0>
 8009f02:	2201      	movs	r2, #1
 8009f04:	e7e1      	b.n	8009eca <_dtoa_r+0xa42>
 8009f06:	9b05      	ldr	r3, [sp, #20]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	db04      	blt.n	8009f16 <_dtoa_r+0xa8e>
 8009f0c:	9907      	ldr	r1, [sp, #28]
 8009f0e:	430b      	orrs	r3, r1
 8009f10:	9906      	ldr	r1, [sp, #24]
 8009f12:	430b      	orrs	r3, r1
 8009f14:	d120      	bne.n	8009f58 <_dtoa_r+0xad0>
 8009f16:	2a00      	cmp	r2, #0
 8009f18:	dded      	ble.n	8009ef6 <_dtoa_r+0xa6e>
 8009f1a:	4651      	mov	r1, sl
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f000 fbb4 	bl	800a68c <__lshift>
 8009f24:	4631      	mov	r1, r6
 8009f26:	4682      	mov	sl, r0
 8009f28:	f000 fc1c 	bl	800a764 <__mcmp>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	dc03      	bgt.n	8009f38 <_dtoa_r+0xab0>
 8009f30:	d1e1      	bne.n	8009ef6 <_dtoa_r+0xa6e>
 8009f32:	f019 0f01 	tst.w	r9, #1
 8009f36:	d0de      	beq.n	8009ef6 <_dtoa_r+0xa6e>
 8009f38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f3c:	d1d8      	bne.n	8009ef0 <_dtoa_r+0xa68>
 8009f3e:	9a01      	ldr	r2, [sp, #4]
 8009f40:	2339      	movs	r3, #57	; 0x39
 8009f42:	7013      	strb	r3, [r2, #0]
 8009f44:	462b      	mov	r3, r5
 8009f46:	461d      	mov	r5, r3
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f4e:	2a39      	cmp	r2, #57	; 0x39
 8009f50:	d06c      	beq.n	800a02c <_dtoa_r+0xba4>
 8009f52:	3201      	adds	r2, #1
 8009f54:	701a      	strb	r2, [r3, #0]
 8009f56:	e747      	b.n	8009de8 <_dtoa_r+0x960>
 8009f58:	2a00      	cmp	r2, #0
 8009f5a:	dd07      	ble.n	8009f6c <_dtoa_r+0xae4>
 8009f5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f60:	d0ed      	beq.n	8009f3e <_dtoa_r+0xab6>
 8009f62:	9a01      	ldr	r2, [sp, #4]
 8009f64:	f109 0301 	add.w	r3, r9, #1
 8009f68:	7013      	strb	r3, [r2, #0]
 8009f6a:	e73d      	b.n	8009de8 <_dtoa_r+0x960>
 8009f6c:	9b04      	ldr	r3, [sp, #16]
 8009f6e:	9a08      	ldr	r2, [sp, #32]
 8009f70:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d043      	beq.n	800a000 <_dtoa_r+0xb78>
 8009f78:	4651      	mov	r1, sl
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	220a      	movs	r2, #10
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 f9d6 	bl	800a330 <__multadd>
 8009f84:	45b8      	cmp	r8, r7
 8009f86:	4682      	mov	sl, r0
 8009f88:	f04f 0300 	mov.w	r3, #0
 8009f8c:	f04f 020a 	mov.w	r2, #10
 8009f90:	4641      	mov	r1, r8
 8009f92:	4620      	mov	r0, r4
 8009f94:	d107      	bne.n	8009fa6 <_dtoa_r+0xb1e>
 8009f96:	f000 f9cb 	bl	800a330 <__multadd>
 8009f9a:	4680      	mov	r8, r0
 8009f9c:	4607      	mov	r7, r0
 8009f9e:	9b04      	ldr	r3, [sp, #16]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	9304      	str	r3, [sp, #16]
 8009fa4:	e775      	b.n	8009e92 <_dtoa_r+0xa0a>
 8009fa6:	f000 f9c3 	bl	800a330 <__multadd>
 8009faa:	4639      	mov	r1, r7
 8009fac:	4680      	mov	r8, r0
 8009fae:	2300      	movs	r3, #0
 8009fb0:	220a      	movs	r2, #10
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 f9bc 	bl	800a330 <__multadd>
 8009fb8:	4607      	mov	r7, r0
 8009fba:	e7f0      	b.n	8009f9e <_dtoa_r+0xb16>
 8009fbc:	9b04      	ldr	r3, [sp, #16]
 8009fbe:	9301      	str	r3, [sp, #4]
 8009fc0:	9d00      	ldr	r5, [sp, #0]
 8009fc2:	4631      	mov	r1, r6
 8009fc4:	4650      	mov	r0, sl
 8009fc6:	f7ff f9d6 	bl	8009376 <quorem>
 8009fca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009fce:	9b00      	ldr	r3, [sp, #0]
 8009fd0:	f805 9b01 	strb.w	r9, [r5], #1
 8009fd4:	1aea      	subs	r2, r5, r3
 8009fd6:	9b01      	ldr	r3, [sp, #4]
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	dd07      	ble.n	8009fec <_dtoa_r+0xb64>
 8009fdc:	4651      	mov	r1, sl
 8009fde:	2300      	movs	r3, #0
 8009fe0:	220a      	movs	r2, #10
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f000 f9a4 	bl	800a330 <__multadd>
 8009fe8:	4682      	mov	sl, r0
 8009fea:	e7ea      	b.n	8009fc2 <_dtoa_r+0xb3a>
 8009fec:	9b01      	ldr	r3, [sp, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	bfc8      	it	gt
 8009ff2:	461d      	movgt	r5, r3
 8009ff4:	9b00      	ldr	r3, [sp, #0]
 8009ff6:	bfd8      	it	le
 8009ff8:	2501      	movle	r5, #1
 8009ffa:	441d      	add	r5, r3
 8009ffc:	f04f 0800 	mov.w	r8, #0
 800a000:	4651      	mov	r1, sl
 800a002:	2201      	movs	r2, #1
 800a004:	4620      	mov	r0, r4
 800a006:	f000 fb41 	bl	800a68c <__lshift>
 800a00a:	4631      	mov	r1, r6
 800a00c:	4682      	mov	sl, r0
 800a00e:	f000 fba9 	bl	800a764 <__mcmp>
 800a012:	2800      	cmp	r0, #0
 800a014:	dc96      	bgt.n	8009f44 <_dtoa_r+0xabc>
 800a016:	d102      	bne.n	800a01e <_dtoa_r+0xb96>
 800a018:	f019 0f01 	tst.w	r9, #1
 800a01c:	d192      	bne.n	8009f44 <_dtoa_r+0xabc>
 800a01e:	462b      	mov	r3, r5
 800a020:	461d      	mov	r5, r3
 800a022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a026:	2a30      	cmp	r2, #48	; 0x30
 800a028:	d0fa      	beq.n	800a020 <_dtoa_r+0xb98>
 800a02a:	e6dd      	b.n	8009de8 <_dtoa_r+0x960>
 800a02c:	9a00      	ldr	r2, [sp, #0]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d189      	bne.n	8009f46 <_dtoa_r+0xabe>
 800a032:	f10b 0b01 	add.w	fp, fp, #1
 800a036:	2331      	movs	r3, #49	; 0x31
 800a038:	e796      	b.n	8009f68 <_dtoa_r+0xae0>
 800a03a:	4b0a      	ldr	r3, [pc, #40]	; (800a064 <_dtoa_r+0xbdc>)
 800a03c:	f7ff ba99 	b.w	8009572 <_dtoa_r+0xea>
 800a040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a042:	2b00      	cmp	r3, #0
 800a044:	f47f aa6d 	bne.w	8009522 <_dtoa_r+0x9a>
 800a048:	4b07      	ldr	r3, [pc, #28]	; (800a068 <_dtoa_r+0xbe0>)
 800a04a:	f7ff ba92 	b.w	8009572 <_dtoa_r+0xea>
 800a04e:	9b01      	ldr	r3, [sp, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	dcb5      	bgt.n	8009fc0 <_dtoa_r+0xb38>
 800a054:	9b07      	ldr	r3, [sp, #28]
 800a056:	2b02      	cmp	r3, #2
 800a058:	f73f aeb1 	bgt.w	8009dbe <_dtoa_r+0x936>
 800a05c:	e7b0      	b.n	8009fc0 <_dtoa_r+0xb38>
 800a05e:	bf00      	nop
 800a060:	0800b1f8 	.word	0x0800b1f8
 800a064:	0800b158 	.word	0x0800b158
 800a068:	0800b17c 	.word	0x0800b17c

0800a06c <_free_r>:
 800a06c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a06e:	2900      	cmp	r1, #0
 800a070:	d044      	beq.n	800a0fc <_free_r+0x90>
 800a072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a076:	9001      	str	r0, [sp, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f1a1 0404 	sub.w	r4, r1, #4
 800a07e:	bfb8      	it	lt
 800a080:	18e4      	addlt	r4, r4, r3
 800a082:	f000 f8e7 	bl	800a254 <__malloc_lock>
 800a086:	4a1e      	ldr	r2, [pc, #120]	; (800a100 <_free_r+0x94>)
 800a088:	9801      	ldr	r0, [sp, #4]
 800a08a:	6813      	ldr	r3, [r2, #0]
 800a08c:	b933      	cbnz	r3, 800a09c <_free_r+0x30>
 800a08e:	6063      	str	r3, [r4, #4]
 800a090:	6014      	str	r4, [r2, #0]
 800a092:	b003      	add	sp, #12
 800a094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a098:	f000 b8e2 	b.w	800a260 <__malloc_unlock>
 800a09c:	42a3      	cmp	r3, r4
 800a09e:	d908      	bls.n	800a0b2 <_free_r+0x46>
 800a0a0:	6825      	ldr	r5, [r4, #0]
 800a0a2:	1961      	adds	r1, r4, r5
 800a0a4:	428b      	cmp	r3, r1
 800a0a6:	bf01      	itttt	eq
 800a0a8:	6819      	ldreq	r1, [r3, #0]
 800a0aa:	685b      	ldreq	r3, [r3, #4]
 800a0ac:	1949      	addeq	r1, r1, r5
 800a0ae:	6021      	streq	r1, [r4, #0]
 800a0b0:	e7ed      	b.n	800a08e <_free_r+0x22>
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	b10b      	cbz	r3, 800a0bc <_free_r+0x50>
 800a0b8:	42a3      	cmp	r3, r4
 800a0ba:	d9fa      	bls.n	800a0b2 <_free_r+0x46>
 800a0bc:	6811      	ldr	r1, [r2, #0]
 800a0be:	1855      	adds	r5, r2, r1
 800a0c0:	42a5      	cmp	r5, r4
 800a0c2:	d10b      	bne.n	800a0dc <_free_r+0x70>
 800a0c4:	6824      	ldr	r4, [r4, #0]
 800a0c6:	4421      	add	r1, r4
 800a0c8:	1854      	adds	r4, r2, r1
 800a0ca:	42a3      	cmp	r3, r4
 800a0cc:	6011      	str	r1, [r2, #0]
 800a0ce:	d1e0      	bne.n	800a092 <_free_r+0x26>
 800a0d0:	681c      	ldr	r4, [r3, #0]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	6053      	str	r3, [r2, #4]
 800a0d6:	440c      	add	r4, r1
 800a0d8:	6014      	str	r4, [r2, #0]
 800a0da:	e7da      	b.n	800a092 <_free_r+0x26>
 800a0dc:	d902      	bls.n	800a0e4 <_free_r+0x78>
 800a0de:	230c      	movs	r3, #12
 800a0e0:	6003      	str	r3, [r0, #0]
 800a0e2:	e7d6      	b.n	800a092 <_free_r+0x26>
 800a0e4:	6825      	ldr	r5, [r4, #0]
 800a0e6:	1961      	adds	r1, r4, r5
 800a0e8:	428b      	cmp	r3, r1
 800a0ea:	bf04      	itt	eq
 800a0ec:	6819      	ldreq	r1, [r3, #0]
 800a0ee:	685b      	ldreq	r3, [r3, #4]
 800a0f0:	6063      	str	r3, [r4, #4]
 800a0f2:	bf04      	itt	eq
 800a0f4:	1949      	addeq	r1, r1, r5
 800a0f6:	6021      	streq	r1, [r4, #0]
 800a0f8:	6054      	str	r4, [r2, #4]
 800a0fa:	e7ca      	b.n	800a092 <_free_r+0x26>
 800a0fc:	b003      	add	sp, #12
 800a0fe:	bd30      	pop	{r4, r5, pc}
 800a100:	200107b4 	.word	0x200107b4

0800a104 <malloc>:
 800a104:	4b02      	ldr	r3, [pc, #8]	; (800a110 <malloc+0xc>)
 800a106:	4601      	mov	r1, r0
 800a108:	6818      	ldr	r0, [r3, #0]
 800a10a:	f000 b823 	b.w	800a154 <_malloc_r>
 800a10e:	bf00      	nop
 800a110:	200000fc 	.word	0x200000fc

0800a114 <sbrk_aligned>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	4e0e      	ldr	r6, [pc, #56]	; (800a150 <sbrk_aligned+0x3c>)
 800a118:	460c      	mov	r4, r1
 800a11a:	6831      	ldr	r1, [r6, #0]
 800a11c:	4605      	mov	r5, r0
 800a11e:	b911      	cbnz	r1, 800a126 <sbrk_aligned+0x12>
 800a120:	f000 fcce 	bl	800aac0 <_sbrk_r>
 800a124:	6030      	str	r0, [r6, #0]
 800a126:	4621      	mov	r1, r4
 800a128:	4628      	mov	r0, r5
 800a12a:	f000 fcc9 	bl	800aac0 <_sbrk_r>
 800a12e:	1c43      	adds	r3, r0, #1
 800a130:	d00a      	beq.n	800a148 <sbrk_aligned+0x34>
 800a132:	1cc4      	adds	r4, r0, #3
 800a134:	f024 0403 	bic.w	r4, r4, #3
 800a138:	42a0      	cmp	r0, r4
 800a13a:	d007      	beq.n	800a14c <sbrk_aligned+0x38>
 800a13c:	1a21      	subs	r1, r4, r0
 800a13e:	4628      	mov	r0, r5
 800a140:	f000 fcbe 	bl	800aac0 <_sbrk_r>
 800a144:	3001      	adds	r0, #1
 800a146:	d101      	bne.n	800a14c <sbrk_aligned+0x38>
 800a148:	f04f 34ff 	mov.w	r4, #4294967295
 800a14c:	4620      	mov	r0, r4
 800a14e:	bd70      	pop	{r4, r5, r6, pc}
 800a150:	200107b8 	.word	0x200107b8

0800a154 <_malloc_r>:
 800a154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a158:	1ccd      	adds	r5, r1, #3
 800a15a:	f025 0503 	bic.w	r5, r5, #3
 800a15e:	3508      	adds	r5, #8
 800a160:	2d0c      	cmp	r5, #12
 800a162:	bf38      	it	cc
 800a164:	250c      	movcc	r5, #12
 800a166:	2d00      	cmp	r5, #0
 800a168:	4607      	mov	r7, r0
 800a16a:	db01      	blt.n	800a170 <_malloc_r+0x1c>
 800a16c:	42a9      	cmp	r1, r5
 800a16e:	d905      	bls.n	800a17c <_malloc_r+0x28>
 800a170:	230c      	movs	r3, #12
 800a172:	603b      	str	r3, [r7, #0]
 800a174:	2600      	movs	r6, #0
 800a176:	4630      	mov	r0, r6
 800a178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a17c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a250 <_malloc_r+0xfc>
 800a180:	f000 f868 	bl	800a254 <__malloc_lock>
 800a184:	f8d8 3000 	ldr.w	r3, [r8]
 800a188:	461c      	mov	r4, r3
 800a18a:	bb5c      	cbnz	r4, 800a1e4 <_malloc_r+0x90>
 800a18c:	4629      	mov	r1, r5
 800a18e:	4638      	mov	r0, r7
 800a190:	f7ff ffc0 	bl	800a114 <sbrk_aligned>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	4604      	mov	r4, r0
 800a198:	d155      	bne.n	800a246 <_malloc_r+0xf2>
 800a19a:	f8d8 4000 	ldr.w	r4, [r8]
 800a19e:	4626      	mov	r6, r4
 800a1a0:	2e00      	cmp	r6, #0
 800a1a2:	d145      	bne.n	800a230 <_malloc_r+0xdc>
 800a1a4:	2c00      	cmp	r4, #0
 800a1a6:	d048      	beq.n	800a23a <_malloc_r+0xe6>
 800a1a8:	6823      	ldr	r3, [r4, #0]
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	4638      	mov	r0, r7
 800a1ae:	eb04 0903 	add.w	r9, r4, r3
 800a1b2:	f000 fc85 	bl	800aac0 <_sbrk_r>
 800a1b6:	4581      	cmp	r9, r0
 800a1b8:	d13f      	bne.n	800a23a <_malloc_r+0xe6>
 800a1ba:	6821      	ldr	r1, [r4, #0]
 800a1bc:	1a6d      	subs	r5, r5, r1
 800a1be:	4629      	mov	r1, r5
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	f7ff ffa7 	bl	800a114 <sbrk_aligned>
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	d037      	beq.n	800a23a <_malloc_r+0xe6>
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	442b      	add	r3, r5
 800a1ce:	6023      	str	r3, [r4, #0]
 800a1d0:	f8d8 3000 	ldr.w	r3, [r8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d038      	beq.n	800a24a <_malloc_r+0xf6>
 800a1d8:	685a      	ldr	r2, [r3, #4]
 800a1da:	42a2      	cmp	r2, r4
 800a1dc:	d12b      	bne.n	800a236 <_malloc_r+0xe2>
 800a1de:	2200      	movs	r2, #0
 800a1e0:	605a      	str	r2, [r3, #4]
 800a1e2:	e00f      	b.n	800a204 <_malloc_r+0xb0>
 800a1e4:	6822      	ldr	r2, [r4, #0]
 800a1e6:	1b52      	subs	r2, r2, r5
 800a1e8:	d41f      	bmi.n	800a22a <_malloc_r+0xd6>
 800a1ea:	2a0b      	cmp	r2, #11
 800a1ec:	d917      	bls.n	800a21e <_malloc_r+0xca>
 800a1ee:	1961      	adds	r1, r4, r5
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	6025      	str	r5, [r4, #0]
 800a1f4:	bf18      	it	ne
 800a1f6:	6059      	strne	r1, [r3, #4]
 800a1f8:	6863      	ldr	r3, [r4, #4]
 800a1fa:	bf08      	it	eq
 800a1fc:	f8c8 1000 	streq.w	r1, [r8]
 800a200:	5162      	str	r2, [r4, r5]
 800a202:	604b      	str	r3, [r1, #4]
 800a204:	4638      	mov	r0, r7
 800a206:	f104 060b 	add.w	r6, r4, #11
 800a20a:	f000 f829 	bl	800a260 <__malloc_unlock>
 800a20e:	f026 0607 	bic.w	r6, r6, #7
 800a212:	1d23      	adds	r3, r4, #4
 800a214:	1af2      	subs	r2, r6, r3
 800a216:	d0ae      	beq.n	800a176 <_malloc_r+0x22>
 800a218:	1b9b      	subs	r3, r3, r6
 800a21a:	50a3      	str	r3, [r4, r2]
 800a21c:	e7ab      	b.n	800a176 <_malloc_r+0x22>
 800a21e:	42a3      	cmp	r3, r4
 800a220:	6862      	ldr	r2, [r4, #4]
 800a222:	d1dd      	bne.n	800a1e0 <_malloc_r+0x8c>
 800a224:	f8c8 2000 	str.w	r2, [r8]
 800a228:	e7ec      	b.n	800a204 <_malloc_r+0xb0>
 800a22a:	4623      	mov	r3, r4
 800a22c:	6864      	ldr	r4, [r4, #4]
 800a22e:	e7ac      	b.n	800a18a <_malloc_r+0x36>
 800a230:	4634      	mov	r4, r6
 800a232:	6876      	ldr	r6, [r6, #4]
 800a234:	e7b4      	b.n	800a1a0 <_malloc_r+0x4c>
 800a236:	4613      	mov	r3, r2
 800a238:	e7cc      	b.n	800a1d4 <_malloc_r+0x80>
 800a23a:	230c      	movs	r3, #12
 800a23c:	603b      	str	r3, [r7, #0]
 800a23e:	4638      	mov	r0, r7
 800a240:	f000 f80e 	bl	800a260 <__malloc_unlock>
 800a244:	e797      	b.n	800a176 <_malloc_r+0x22>
 800a246:	6025      	str	r5, [r4, #0]
 800a248:	e7dc      	b.n	800a204 <_malloc_r+0xb0>
 800a24a:	605b      	str	r3, [r3, #4]
 800a24c:	deff      	udf	#255	; 0xff
 800a24e:	bf00      	nop
 800a250:	200107b4 	.word	0x200107b4

0800a254 <__malloc_lock>:
 800a254:	4801      	ldr	r0, [pc, #4]	; (800a25c <__malloc_lock+0x8>)
 800a256:	f7ff b88c 	b.w	8009372 <__retarget_lock_acquire_recursive>
 800a25a:	bf00      	nop
 800a25c:	200107b0 	.word	0x200107b0

0800a260 <__malloc_unlock>:
 800a260:	4801      	ldr	r0, [pc, #4]	; (800a268 <__malloc_unlock+0x8>)
 800a262:	f7ff b887 	b.w	8009374 <__retarget_lock_release_recursive>
 800a266:	bf00      	nop
 800a268:	200107b0 	.word	0x200107b0

0800a26c <_Balloc>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	69c6      	ldr	r6, [r0, #28]
 800a270:	4604      	mov	r4, r0
 800a272:	460d      	mov	r5, r1
 800a274:	b976      	cbnz	r6, 800a294 <_Balloc+0x28>
 800a276:	2010      	movs	r0, #16
 800a278:	f7ff ff44 	bl	800a104 <malloc>
 800a27c:	4602      	mov	r2, r0
 800a27e:	61e0      	str	r0, [r4, #28]
 800a280:	b920      	cbnz	r0, 800a28c <_Balloc+0x20>
 800a282:	4b18      	ldr	r3, [pc, #96]	; (800a2e4 <_Balloc+0x78>)
 800a284:	4818      	ldr	r0, [pc, #96]	; (800a2e8 <_Balloc+0x7c>)
 800a286:	216b      	movs	r1, #107	; 0x6b
 800a288:	f000 fc38 	bl	800aafc <__assert_func>
 800a28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a290:	6006      	str	r6, [r0, #0]
 800a292:	60c6      	str	r6, [r0, #12]
 800a294:	69e6      	ldr	r6, [r4, #28]
 800a296:	68f3      	ldr	r3, [r6, #12]
 800a298:	b183      	cbz	r3, 800a2bc <_Balloc+0x50>
 800a29a:	69e3      	ldr	r3, [r4, #28]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2a2:	b9b8      	cbnz	r0, 800a2d4 <_Balloc+0x68>
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	fa01 f605 	lsl.w	r6, r1, r5
 800a2aa:	1d72      	adds	r2, r6, #5
 800a2ac:	0092      	lsls	r2, r2, #2
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f000 fc42 	bl	800ab38 <_calloc_r>
 800a2b4:	b160      	cbz	r0, 800a2d0 <_Balloc+0x64>
 800a2b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2ba:	e00e      	b.n	800a2da <_Balloc+0x6e>
 800a2bc:	2221      	movs	r2, #33	; 0x21
 800a2be:	2104      	movs	r1, #4
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f000 fc39 	bl	800ab38 <_calloc_r>
 800a2c6:	69e3      	ldr	r3, [r4, #28]
 800a2c8:	60f0      	str	r0, [r6, #12]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1e4      	bne.n	800a29a <_Balloc+0x2e>
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
 800a2d4:	6802      	ldr	r2, [r0, #0]
 800a2d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2e0:	e7f7      	b.n	800a2d2 <_Balloc+0x66>
 800a2e2:	bf00      	nop
 800a2e4:	0800b189 	.word	0x0800b189
 800a2e8:	0800b209 	.word	0x0800b209

0800a2ec <_Bfree>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	69c6      	ldr	r6, [r0, #28]
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	b976      	cbnz	r6, 800a314 <_Bfree+0x28>
 800a2f6:	2010      	movs	r0, #16
 800a2f8:	f7ff ff04 	bl	800a104 <malloc>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	61e8      	str	r0, [r5, #28]
 800a300:	b920      	cbnz	r0, 800a30c <_Bfree+0x20>
 800a302:	4b09      	ldr	r3, [pc, #36]	; (800a328 <_Bfree+0x3c>)
 800a304:	4809      	ldr	r0, [pc, #36]	; (800a32c <_Bfree+0x40>)
 800a306:	218f      	movs	r1, #143	; 0x8f
 800a308:	f000 fbf8 	bl	800aafc <__assert_func>
 800a30c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a310:	6006      	str	r6, [r0, #0]
 800a312:	60c6      	str	r6, [r0, #12]
 800a314:	b13c      	cbz	r4, 800a326 <_Bfree+0x3a>
 800a316:	69eb      	ldr	r3, [r5, #28]
 800a318:	6862      	ldr	r2, [r4, #4]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a320:	6021      	str	r1, [r4, #0]
 800a322:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	0800b189 	.word	0x0800b189
 800a32c:	0800b209 	.word	0x0800b209

0800a330 <__multadd>:
 800a330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a334:	690d      	ldr	r5, [r1, #16]
 800a336:	4607      	mov	r7, r0
 800a338:	460c      	mov	r4, r1
 800a33a:	461e      	mov	r6, r3
 800a33c:	f101 0c14 	add.w	ip, r1, #20
 800a340:	2000      	movs	r0, #0
 800a342:	f8dc 3000 	ldr.w	r3, [ip]
 800a346:	b299      	uxth	r1, r3
 800a348:	fb02 6101 	mla	r1, r2, r1, r6
 800a34c:	0c1e      	lsrs	r6, r3, #16
 800a34e:	0c0b      	lsrs	r3, r1, #16
 800a350:	fb02 3306 	mla	r3, r2, r6, r3
 800a354:	b289      	uxth	r1, r1
 800a356:	3001      	adds	r0, #1
 800a358:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a35c:	4285      	cmp	r5, r0
 800a35e:	f84c 1b04 	str.w	r1, [ip], #4
 800a362:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a366:	dcec      	bgt.n	800a342 <__multadd+0x12>
 800a368:	b30e      	cbz	r6, 800a3ae <__multadd+0x7e>
 800a36a:	68a3      	ldr	r3, [r4, #8]
 800a36c:	42ab      	cmp	r3, r5
 800a36e:	dc19      	bgt.n	800a3a4 <__multadd+0x74>
 800a370:	6861      	ldr	r1, [r4, #4]
 800a372:	4638      	mov	r0, r7
 800a374:	3101      	adds	r1, #1
 800a376:	f7ff ff79 	bl	800a26c <_Balloc>
 800a37a:	4680      	mov	r8, r0
 800a37c:	b928      	cbnz	r0, 800a38a <__multadd+0x5a>
 800a37e:	4602      	mov	r2, r0
 800a380:	4b0c      	ldr	r3, [pc, #48]	; (800a3b4 <__multadd+0x84>)
 800a382:	480d      	ldr	r0, [pc, #52]	; (800a3b8 <__multadd+0x88>)
 800a384:	21ba      	movs	r1, #186	; 0xba
 800a386:	f000 fbb9 	bl	800aafc <__assert_func>
 800a38a:	6922      	ldr	r2, [r4, #16]
 800a38c:	3202      	adds	r2, #2
 800a38e:	f104 010c 	add.w	r1, r4, #12
 800a392:	0092      	lsls	r2, r2, #2
 800a394:	300c      	adds	r0, #12
 800a396:	f000 fba3 	bl	800aae0 <memcpy>
 800a39a:	4621      	mov	r1, r4
 800a39c:	4638      	mov	r0, r7
 800a39e:	f7ff ffa5 	bl	800a2ec <_Bfree>
 800a3a2:	4644      	mov	r4, r8
 800a3a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3a8:	3501      	adds	r5, #1
 800a3aa:	615e      	str	r6, [r3, #20]
 800a3ac:	6125      	str	r5, [r4, #16]
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3b4:	0800b1f8 	.word	0x0800b1f8
 800a3b8:	0800b209 	.word	0x0800b209

0800a3bc <__hi0bits>:
 800a3bc:	0c03      	lsrs	r3, r0, #16
 800a3be:	041b      	lsls	r3, r3, #16
 800a3c0:	b9d3      	cbnz	r3, 800a3f8 <__hi0bits+0x3c>
 800a3c2:	0400      	lsls	r0, r0, #16
 800a3c4:	2310      	movs	r3, #16
 800a3c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3ca:	bf04      	itt	eq
 800a3cc:	0200      	lsleq	r0, r0, #8
 800a3ce:	3308      	addeq	r3, #8
 800a3d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3d4:	bf04      	itt	eq
 800a3d6:	0100      	lsleq	r0, r0, #4
 800a3d8:	3304      	addeq	r3, #4
 800a3da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3de:	bf04      	itt	eq
 800a3e0:	0080      	lsleq	r0, r0, #2
 800a3e2:	3302      	addeq	r3, #2
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	db05      	blt.n	800a3f4 <__hi0bits+0x38>
 800a3e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a3ec:	f103 0301 	add.w	r3, r3, #1
 800a3f0:	bf08      	it	eq
 800a3f2:	2320      	moveq	r3, #32
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	4770      	bx	lr
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e7e4      	b.n	800a3c6 <__hi0bits+0xa>

0800a3fc <__lo0bits>:
 800a3fc:	6803      	ldr	r3, [r0, #0]
 800a3fe:	f013 0207 	ands.w	r2, r3, #7
 800a402:	d00c      	beq.n	800a41e <__lo0bits+0x22>
 800a404:	07d9      	lsls	r1, r3, #31
 800a406:	d422      	bmi.n	800a44e <__lo0bits+0x52>
 800a408:	079a      	lsls	r2, r3, #30
 800a40a:	bf49      	itett	mi
 800a40c:	085b      	lsrmi	r3, r3, #1
 800a40e:	089b      	lsrpl	r3, r3, #2
 800a410:	6003      	strmi	r3, [r0, #0]
 800a412:	2201      	movmi	r2, #1
 800a414:	bf5c      	itt	pl
 800a416:	6003      	strpl	r3, [r0, #0]
 800a418:	2202      	movpl	r2, #2
 800a41a:	4610      	mov	r0, r2
 800a41c:	4770      	bx	lr
 800a41e:	b299      	uxth	r1, r3
 800a420:	b909      	cbnz	r1, 800a426 <__lo0bits+0x2a>
 800a422:	0c1b      	lsrs	r3, r3, #16
 800a424:	2210      	movs	r2, #16
 800a426:	b2d9      	uxtb	r1, r3
 800a428:	b909      	cbnz	r1, 800a42e <__lo0bits+0x32>
 800a42a:	3208      	adds	r2, #8
 800a42c:	0a1b      	lsrs	r3, r3, #8
 800a42e:	0719      	lsls	r1, r3, #28
 800a430:	bf04      	itt	eq
 800a432:	091b      	lsreq	r3, r3, #4
 800a434:	3204      	addeq	r2, #4
 800a436:	0799      	lsls	r1, r3, #30
 800a438:	bf04      	itt	eq
 800a43a:	089b      	lsreq	r3, r3, #2
 800a43c:	3202      	addeq	r2, #2
 800a43e:	07d9      	lsls	r1, r3, #31
 800a440:	d403      	bmi.n	800a44a <__lo0bits+0x4e>
 800a442:	085b      	lsrs	r3, r3, #1
 800a444:	f102 0201 	add.w	r2, r2, #1
 800a448:	d003      	beq.n	800a452 <__lo0bits+0x56>
 800a44a:	6003      	str	r3, [r0, #0]
 800a44c:	e7e5      	b.n	800a41a <__lo0bits+0x1e>
 800a44e:	2200      	movs	r2, #0
 800a450:	e7e3      	b.n	800a41a <__lo0bits+0x1e>
 800a452:	2220      	movs	r2, #32
 800a454:	e7e1      	b.n	800a41a <__lo0bits+0x1e>
	...

0800a458 <__i2b>:
 800a458:	b510      	push	{r4, lr}
 800a45a:	460c      	mov	r4, r1
 800a45c:	2101      	movs	r1, #1
 800a45e:	f7ff ff05 	bl	800a26c <_Balloc>
 800a462:	4602      	mov	r2, r0
 800a464:	b928      	cbnz	r0, 800a472 <__i2b+0x1a>
 800a466:	4b05      	ldr	r3, [pc, #20]	; (800a47c <__i2b+0x24>)
 800a468:	4805      	ldr	r0, [pc, #20]	; (800a480 <__i2b+0x28>)
 800a46a:	f240 1145 	movw	r1, #325	; 0x145
 800a46e:	f000 fb45 	bl	800aafc <__assert_func>
 800a472:	2301      	movs	r3, #1
 800a474:	6144      	str	r4, [r0, #20]
 800a476:	6103      	str	r3, [r0, #16]
 800a478:	bd10      	pop	{r4, pc}
 800a47a:	bf00      	nop
 800a47c:	0800b1f8 	.word	0x0800b1f8
 800a480:	0800b209 	.word	0x0800b209

0800a484 <__multiply>:
 800a484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a488:	4691      	mov	r9, r2
 800a48a:	690a      	ldr	r2, [r1, #16]
 800a48c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a490:	429a      	cmp	r2, r3
 800a492:	bfb8      	it	lt
 800a494:	460b      	movlt	r3, r1
 800a496:	460c      	mov	r4, r1
 800a498:	bfbc      	itt	lt
 800a49a:	464c      	movlt	r4, r9
 800a49c:	4699      	movlt	r9, r3
 800a49e:	6927      	ldr	r7, [r4, #16]
 800a4a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4a4:	68a3      	ldr	r3, [r4, #8]
 800a4a6:	6861      	ldr	r1, [r4, #4]
 800a4a8:	eb07 060a 	add.w	r6, r7, sl
 800a4ac:	42b3      	cmp	r3, r6
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	bfb8      	it	lt
 800a4b2:	3101      	addlt	r1, #1
 800a4b4:	f7ff feda 	bl	800a26c <_Balloc>
 800a4b8:	b930      	cbnz	r0, 800a4c8 <__multiply+0x44>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	4b44      	ldr	r3, [pc, #272]	; (800a5d0 <__multiply+0x14c>)
 800a4be:	4845      	ldr	r0, [pc, #276]	; (800a5d4 <__multiply+0x150>)
 800a4c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a4c4:	f000 fb1a 	bl	800aafc <__assert_func>
 800a4c8:	f100 0514 	add.w	r5, r0, #20
 800a4cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4d0:	462b      	mov	r3, r5
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	4543      	cmp	r3, r8
 800a4d6:	d321      	bcc.n	800a51c <__multiply+0x98>
 800a4d8:	f104 0314 	add.w	r3, r4, #20
 800a4dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a4e0:	f109 0314 	add.w	r3, r9, #20
 800a4e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a4e8:	9202      	str	r2, [sp, #8]
 800a4ea:	1b3a      	subs	r2, r7, r4
 800a4ec:	3a15      	subs	r2, #21
 800a4ee:	f022 0203 	bic.w	r2, r2, #3
 800a4f2:	3204      	adds	r2, #4
 800a4f4:	f104 0115 	add.w	r1, r4, #21
 800a4f8:	428f      	cmp	r7, r1
 800a4fa:	bf38      	it	cc
 800a4fc:	2204      	movcc	r2, #4
 800a4fe:	9201      	str	r2, [sp, #4]
 800a500:	9a02      	ldr	r2, [sp, #8]
 800a502:	9303      	str	r3, [sp, #12]
 800a504:	429a      	cmp	r2, r3
 800a506:	d80c      	bhi.n	800a522 <__multiply+0x9e>
 800a508:	2e00      	cmp	r6, #0
 800a50a:	dd03      	ble.n	800a514 <__multiply+0x90>
 800a50c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a510:	2b00      	cmp	r3, #0
 800a512:	d05b      	beq.n	800a5cc <__multiply+0x148>
 800a514:	6106      	str	r6, [r0, #16]
 800a516:	b005      	add	sp, #20
 800a518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51c:	f843 2b04 	str.w	r2, [r3], #4
 800a520:	e7d8      	b.n	800a4d4 <__multiply+0x50>
 800a522:	f8b3 a000 	ldrh.w	sl, [r3]
 800a526:	f1ba 0f00 	cmp.w	sl, #0
 800a52a:	d024      	beq.n	800a576 <__multiply+0xf2>
 800a52c:	f104 0e14 	add.w	lr, r4, #20
 800a530:	46a9      	mov	r9, r5
 800a532:	f04f 0c00 	mov.w	ip, #0
 800a536:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a53a:	f8d9 1000 	ldr.w	r1, [r9]
 800a53e:	fa1f fb82 	uxth.w	fp, r2
 800a542:	b289      	uxth	r1, r1
 800a544:	fb0a 110b 	mla	r1, sl, fp, r1
 800a548:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a54c:	f8d9 2000 	ldr.w	r2, [r9]
 800a550:	4461      	add	r1, ip
 800a552:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a556:	fb0a c20b 	mla	r2, sl, fp, ip
 800a55a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a55e:	b289      	uxth	r1, r1
 800a560:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a564:	4577      	cmp	r7, lr
 800a566:	f849 1b04 	str.w	r1, [r9], #4
 800a56a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a56e:	d8e2      	bhi.n	800a536 <__multiply+0xb2>
 800a570:	9a01      	ldr	r2, [sp, #4]
 800a572:	f845 c002 	str.w	ip, [r5, r2]
 800a576:	9a03      	ldr	r2, [sp, #12]
 800a578:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a57c:	3304      	adds	r3, #4
 800a57e:	f1b9 0f00 	cmp.w	r9, #0
 800a582:	d021      	beq.n	800a5c8 <__multiply+0x144>
 800a584:	6829      	ldr	r1, [r5, #0]
 800a586:	f104 0c14 	add.w	ip, r4, #20
 800a58a:	46ae      	mov	lr, r5
 800a58c:	f04f 0a00 	mov.w	sl, #0
 800a590:	f8bc b000 	ldrh.w	fp, [ip]
 800a594:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a598:	fb09 220b 	mla	r2, r9, fp, r2
 800a59c:	4452      	add	r2, sl
 800a59e:	b289      	uxth	r1, r1
 800a5a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5a4:	f84e 1b04 	str.w	r1, [lr], #4
 800a5a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a5ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5b0:	f8be 1000 	ldrh.w	r1, [lr]
 800a5b4:	fb09 110a 	mla	r1, r9, sl, r1
 800a5b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a5bc:	4567      	cmp	r7, ip
 800a5be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5c2:	d8e5      	bhi.n	800a590 <__multiply+0x10c>
 800a5c4:	9a01      	ldr	r2, [sp, #4]
 800a5c6:	50a9      	str	r1, [r5, r2]
 800a5c8:	3504      	adds	r5, #4
 800a5ca:	e799      	b.n	800a500 <__multiply+0x7c>
 800a5cc:	3e01      	subs	r6, #1
 800a5ce:	e79b      	b.n	800a508 <__multiply+0x84>
 800a5d0:	0800b1f8 	.word	0x0800b1f8
 800a5d4:	0800b209 	.word	0x0800b209

0800a5d8 <__pow5mult>:
 800a5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5dc:	4615      	mov	r5, r2
 800a5de:	f012 0203 	ands.w	r2, r2, #3
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	460f      	mov	r7, r1
 800a5e6:	d007      	beq.n	800a5f8 <__pow5mult+0x20>
 800a5e8:	4c25      	ldr	r4, [pc, #148]	; (800a680 <__pow5mult+0xa8>)
 800a5ea:	3a01      	subs	r2, #1
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5f2:	f7ff fe9d 	bl	800a330 <__multadd>
 800a5f6:	4607      	mov	r7, r0
 800a5f8:	10ad      	asrs	r5, r5, #2
 800a5fa:	d03d      	beq.n	800a678 <__pow5mult+0xa0>
 800a5fc:	69f4      	ldr	r4, [r6, #28]
 800a5fe:	b97c      	cbnz	r4, 800a620 <__pow5mult+0x48>
 800a600:	2010      	movs	r0, #16
 800a602:	f7ff fd7f 	bl	800a104 <malloc>
 800a606:	4602      	mov	r2, r0
 800a608:	61f0      	str	r0, [r6, #28]
 800a60a:	b928      	cbnz	r0, 800a618 <__pow5mult+0x40>
 800a60c:	4b1d      	ldr	r3, [pc, #116]	; (800a684 <__pow5mult+0xac>)
 800a60e:	481e      	ldr	r0, [pc, #120]	; (800a688 <__pow5mult+0xb0>)
 800a610:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a614:	f000 fa72 	bl	800aafc <__assert_func>
 800a618:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a61c:	6004      	str	r4, [r0, #0]
 800a61e:	60c4      	str	r4, [r0, #12]
 800a620:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a624:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a628:	b94c      	cbnz	r4, 800a63e <__pow5mult+0x66>
 800a62a:	f240 2171 	movw	r1, #625	; 0x271
 800a62e:	4630      	mov	r0, r6
 800a630:	f7ff ff12 	bl	800a458 <__i2b>
 800a634:	2300      	movs	r3, #0
 800a636:	f8c8 0008 	str.w	r0, [r8, #8]
 800a63a:	4604      	mov	r4, r0
 800a63c:	6003      	str	r3, [r0, #0]
 800a63e:	f04f 0900 	mov.w	r9, #0
 800a642:	07eb      	lsls	r3, r5, #31
 800a644:	d50a      	bpl.n	800a65c <__pow5mult+0x84>
 800a646:	4639      	mov	r1, r7
 800a648:	4622      	mov	r2, r4
 800a64a:	4630      	mov	r0, r6
 800a64c:	f7ff ff1a 	bl	800a484 <__multiply>
 800a650:	4639      	mov	r1, r7
 800a652:	4680      	mov	r8, r0
 800a654:	4630      	mov	r0, r6
 800a656:	f7ff fe49 	bl	800a2ec <_Bfree>
 800a65a:	4647      	mov	r7, r8
 800a65c:	106d      	asrs	r5, r5, #1
 800a65e:	d00b      	beq.n	800a678 <__pow5mult+0xa0>
 800a660:	6820      	ldr	r0, [r4, #0]
 800a662:	b938      	cbnz	r0, 800a674 <__pow5mult+0x9c>
 800a664:	4622      	mov	r2, r4
 800a666:	4621      	mov	r1, r4
 800a668:	4630      	mov	r0, r6
 800a66a:	f7ff ff0b 	bl	800a484 <__multiply>
 800a66e:	6020      	str	r0, [r4, #0]
 800a670:	f8c0 9000 	str.w	r9, [r0]
 800a674:	4604      	mov	r4, r0
 800a676:	e7e4      	b.n	800a642 <__pow5mult+0x6a>
 800a678:	4638      	mov	r0, r7
 800a67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a67e:	bf00      	nop
 800a680:	0800b358 	.word	0x0800b358
 800a684:	0800b189 	.word	0x0800b189
 800a688:	0800b209 	.word	0x0800b209

0800a68c <__lshift>:
 800a68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a690:	460c      	mov	r4, r1
 800a692:	6849      	ldr	r1, [r1, #4]
 800a694:	6923      	ldr	r3, [r4, #16]
 800a696:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a69a:	68a3      	ldr	r3, [r4, #8]
 800a69c:	4607      	mov	r7, r0
 800a69e:	4691      	mov	r9, r2
 800a6a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6a4:	f108 0601 	add.w	r6, r8, #1
 800a6a8:	42b3      	cmp	r3, r6
 800a6aa:	db0b      	blt.n	800a6c4 <__lshift+0x38>
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	f7ff fddd 	bl	800a26c <_Balloc>
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	b948      	cbnz	r0, 800a6ca <__lshift+0x3e>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	4b28      	ldr	r3, [pc, #160]	; (800a75c <__lshift+0xd0>)
 800a6ba:	4829      	ldr	r0, [pc, #164]	; (800a760 <__lshift+0xd4>)
 800a6bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a6c0:	f000 fa1c 	bl	800aafc <__assert_func>
 800a6c4:	3101      	adds	r1, #1
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	e7ee      	b.n	800a6a8 <__lshift+0x1c>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	f100 0114 	add.w	r1, r0, #20
 800a6d0:	f100 0210 	add.w	r2, r0, #16
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	4553      	cmp	r3, sl
 800a6d8:	db33      	blt.n	800a742 <__lshift+0xb6>
 800a6da:	6920      	ldr	r0, [r4, #16]
 800a6dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6e0:	f104 0314 	add.w	r3, r4, #20
 800a6e4:	f019 091f 	ands.w	r9, r9, #31
 800a6e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6f0:	d02b      	beq.n	800a74a <__lshift+0xbe>
 800a6f2:	f1c9 0e20 	rsb	lr, r9, #32
 800a6f6:	468a      	mov	sl, r1
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	6818      	ldr	r0, [r3, #0]
 800a6fc:	fa00 f009 	lsl.w	r0, r0, r9
 800a700:	4310      	orrs	r0, r2
 800a702:	f84a 0b04 	str.w	r0, [sl], #4
 800a706:	f853 2b04 	ldr.w	r2, [r3], #4
 800a70a:	459c      	cmp	ip, r3
 800a70c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a710:	d8f3      	bhi.n	800a6fa <__lshift+0x6e>
 800a712:	ebac 0304 	sub.w	r3, ip, r4
 800a716:	3b15      	subs	r3, #21
 800a718:	f023 0303 	bic.w	r3, r3, #3
 800a71c:	3304      	adds	r3, #4
 800a71e:	f104 0015 	add.w	r0, r4, #21
 800a722:	4584      	cmp	ip, r0
 800a724:	bf38      	it	cc
 800a726:	2304      	movcc	r3, #4
 800a728:	50ca      	str	r2, [r1, r3]
 800a72a:	b10a      	cbz	r2, 800a730 <__lshift+0xa4>
 800a72c:	f108 0602 	add.w	r6, r8, #2
 800a730:	3e01      	subs	r6, #1
 800a732:	4638      	mov	r0, r7
 800a734:	612e      	str	r6, [r5, #16]
 800a736:	4621      	mov	r1, r4
 800a738:	f7ff fdd8 	bl	800a2ec <_Bfree>
 800a73c:	4628      	mov	r0, r5
 800a73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a742:	f842 0f04 	str.w	r0, [r2, #4]!
 800a746:	3301      	adds	r3, #1
 800a748:	e7c5      	b.n	800a6d6 <__lshift+0x4a>
 800a74a:	3904      	subs	r1, #4
 800a74c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a750:	f841 2f04 	str.w	r2, [r1, #4]!
 800a754:	459c      	cmp	ip, r3
 800a756:	d8f9      	bhi.n	800a74c <__lshift+0xc0>
 800a758:	e7ea      	b.n	800a730 <__lshift+0xa4>
 800a75a:	bf00      	nop
 800a75c:	0800b1f8 	.word	0x0800b1f8
 800a760:	0800b209 	.word	0x0800b209

0800a764 <__mcmp>:
 800a764:	b530      	push	{r4, r5, lr}
 800a766:	6902      	ldr	r2, [r0, #16]
 800a768:	690c      	ldr	r4, [r1, #16]
 800a76a:	1b12      	subs	r2, r2, r4
 800a76c:	d10e      	bne.n	800a78c <__mcmp+0x28>
 800a76e:	f100 0314 	add.w	r3, r0, #20
 800a772:	3114      	adds	r1, #20
 800a774:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a778:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a77c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a780:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a784:	42a5      	cmp	r5, r4
 800a786:	d003      	beq.n	800a790 <__mcmp+0x2c>
 800a788:	d305      	bcc.n	800a796 <__mcmp+0x32>
 800a78a:	2201      	movs	r2, #1
 800a78c:	4610      	mov	r0, r2
 800a78e:	bd30      	pop	{r4, r5, pc}
 800a790:	4283      	cmp	r3, r0
 800a792:	d3f3      	bcc.n	800a77c <__mcmp+0x18>
 800a794:	e7fa      	b.n	800a78c <__mcmp+0x28>
 800a796:	f04f 32ff 	mov.w	r2, #4294967295
 800a79a:	e7f7      	b.n	800a78c <__mcmp+0x28>

0800a79c <__mdiff>:
 800a79c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a0:	460c      	mov	r4, r1
 800a7a2:	4606      	mov	r6, r0
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	4690      	mov	r8, r2
 800a7aa:	f7ff ffdb 	bl	800a764 <__mcmp>
 800a7ae:	1e05      	subs	r5, r0, #0
 800a7b0:	d110      	bne.n	800a7d4 <__mdiff+0x38>
 800a7b2:	4629      	mov	r1, r5
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	f7ff fd59 	bl	800a26c <_Balloc>
 800a7ba:	b930      	cbnz	r0, 800a7ca <__mdiff+0x2e>
 800a7bc:	4b3a      	ldr	r3, [pc, #232]	; (800a8a8 <__mdiff+0x10c>)
 800a7be:	4602      	mov	r2, r0
 800a7c0:	f240 2137 	movw	r1, #567	; 0x237
 800a7c4:	4839      	ldr	r0, [pc, #228]	; (800a8ac <__mdiff+0x110>)
 800a7c6:	f000 f999 	bl	800aafc <__assert_func>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d4:	bfa4      	itt	ge
 800a7d6:	4643      	movge	r3, r8
 800a7d8:	46a0      	movge	r8, r4
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a7e0:	bfa6      	itte	ge
 800a7e2:	461c      	movge	r4, r3
 800a7e4:	2500      	movge	r5, #0
 800a7e6:	2501      	movlt	r5, #1
 800a7e8:	f7ff fd40 	bl	800a26c <_Balloc>
 800a7ec:	b920      	cbnz	r0, 800a7f8 <__mdiff+0x5c>
 800a7ee:	4b2e      	ldr	r3, [pc, #184]	; (800a8a8 <__mdiff+0x10c>)
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	f240 2145 	movw	r1, #581	; 0x245
 800a7f6:	e7e5      	b.n	800a7c4 <__mdiff+0x28>
 800a7f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7fc:	6926      	ldr	r6, [r4, #16]
 800a7fe:	60c5      	str	r5, [r0, #12]
 800a800:	f104 0914 	add.w	r9, r4, #20
 800a804:	f108 0514 	add.w	r5, r8, #20
 800a808:	f100 0e14 	add.w	lr, r0, #20
 800a80c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a810:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a814:	f108 0210 	add.w	r2, r8, #16
 800a818:	46f2      	mov	sl, lr
 800a81a:	2100      	movs	r1, #0
 800a81c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a820:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a824:	fa11 f88b 	uxtah	r8, r1, fp
 800a828:	b299      	uxth	r1, r3
 800a82a:	0c1b      	lsrs	r3, r3, #16
 800a82c:	eba8 0801 	sub.w	r8, r8, r1
 800a830:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a834:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a838:	fa1f f888 	uxth.w	r8, r8
 800a83c:	1419      	asrs	r1, r3, #16
 800a83e:	454e      	cmp	r6, r9
 800a840:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a844:	f84a 3b04 	str.w	r3, [sl], #4
 800a848:	d8e8      	bhi.n	800a81c <__mdiff+0x80>
 800a84a:	1b33      	subs	r3, r6, r4
 800a84c:	3b15      	subs	r3, #21
 800a84e:	f023 0303 	bic.w	r3, r3, #3
 800a852:	3304      	adds	r3, #4
 800a854:	3415      	adds	r4, #21
 800a856:	42a6      	cmp	r6, r4
 800a858:	bf38      	it	cc
 800a85a:	2304      	movcc	r3, #4
 800a85c:	441d      	add	r5, r3
 800a85e:	4473      	add	r3, lr
 800a860:	469e      	mov	lr, r3
 800a862:	462e      	mov	r6, r5
 800a864:	4566      	cmp	r6, ip
 800a866:	d30e      	bcc.n	800a886 <__mdiff+0xea>
 800a868:	f10c 0203 	add.w	r2, ip, #3
 800a86c:	1b52      	subs	r2, r2, r5
 800a86e:	f022 0203 	bic.w	r2, r2, #3
 800a872:	3d03      	subs	r5, #3
 800a874:	45ac      	cmp	ip, r5
 800a876:	bf38      	it	cc
 800a878:	2200      	movcc	r2, #0
 800a87a:	4413      	add	r3, r2
 800a87c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a880:	b17a      	cbz	r2, 800a8a2 <__mdiff+0x106>
 800a882:	6107      	str	r7, [r0, #16]
 800a884:	e7a4      	b.n	800a7d0 <__mdiff+0x34>
 800a886:	f856 8b04 	ldr.w	r8, [r6], #4
 800a88a:	fa11 f288 	uxtah	r2, r1, r8
 800a88e:	1414      	asrs	r4, r2, #16
 800a890:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a894:	b292      	uxth	r2, r2
 800a896:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a89a:	f84e 2b04 	str.w	r2, [lr], #4
 800a89e:	1421      	asrs	r1, r4, #16
 800a8a0:	e7e0      	b.n	800a864 <__mdiff+0xc8>
 800a8a2:	3f01      	subs	r7, #1
 800a8a4:	e7ea      	b.n	800a87c <__mdiff+0xe0>
 800a8a6:	bf00      	nop
 800a8a8:	0800b1f8 	.word	0x0800b1f8
 800a8ac:	0800b209 	.word	0x0800b209

0800a8b0 <__d2b>:
 800a8b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8b4:	460f      	mov	r7, r1
 800a8b6:	2101      	movs	r1, #1
 800a8b8:	ec59 8b10 	vmov	r8, r9, d0
 800a8bc:	4616      	mov	r6, r2
 800a8be:	f7ff fcd5 	bl	800a26c <_Balloc>
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	b930      	cbnz	r0, 800a8d4 <__d2b+0x24>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	4b24      	ldr	r3, [pc, #144]	; (800a95c <__d2b+0xac>)
 800a8ca:	4825      	ldr	r0, [pc, #148]	; (800a960 <__d2b+0xb0>)
 800a8cc:	f240 310f 	movw	r1, #783	; 0x30f
 800a8d0:	f000 f914 	bl	800aafc <__assert_func>
 800a8d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8dc:	bb2d      	cbnz	r5, 800a92a <__d2b+0x7a>
 800a8de:	9301      	str	r3, [sp, #4]
 800a8e0:	f1b8 0300 	subs.w	r3, r8, #0
 800a8e4:	d026      	beq.n	800a934 <__d2b+0x84>
 800a8e6:	4668      	mov	r0, sp
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	f7ff fd87 	bl	800a3fc <__lo0bits>
 800a8ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a8f2:	b1e8      	cbz	r0, 800a930 <__d2b+0x80>
 800a8f4:	f1c0 0320 	rsb	r3, r0, #32
 800a8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fc:	430b      	orrs	r3, r1
 800a8fe:	40c2      	lsrs	r2, r0
 800a900:	6163      	str	r3, [r4, #20]
 800a902:	9201      	str	r2, [sp, #4]
 800a904:	9b01      	ldr	r3, [sp, #4]
 800a906:	61a3      	str	r3, [r4, #24]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	bf14      	ite	ne
 800a90c:	2202      	movne	r2, #2
 800a90e:	2201      	moveq	r2, #1
 800a910:	6122      	str	r2, [r4, #16]
 800a912:	b1bd      	cbz	r5, 800a944 <__d2b+0x94>
 800a914:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a918:	4405      	add	r5, r0
 800a91a:	603d      	str	r5, [r7, #0]
 800a91c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a920:	6030      	str	r0, [r6, #0]
 800a922:	4620      	mov	r0, r4
 800a924:	b003      	add	sp, #12
 800a926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a92a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a92e:	e7d6      	b.n	800a8de <__d2b+0x2e>
 800a930:	6161      	str	r1, [r4, #20]
 800a932:	e7e7      	b.n	800a904 <__d2b+0x54>
 800a934:	a801      	add	r0, sp, #4
 800a936:	f7ff fd61 	bl	800a3fc <__lo0bits>
 800a93a:	9b01      	ldr	r3, [sp, #4]
 800a93c:	6163      	str	r3, [r4, #20]
 800a93e:	3020      	adds	r0, #32
 800a940:	2201      	movs	r2, #1
 800a942:	e7e5      	b.n	800a910 <__d2b+0x60>
 800a944:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a948:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a94c:	6038      	str	r0, [r7, #0]
 800a94e:	6918      	ldr	r0, [r3, #16]
 800a950:	f7ff fd34 	bl	800a3bc <__hi0bits>
 800a954:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a958:	e7e2      	b.n	800a920 <__d2b+0x70>
 800a95a:	bf00      	nop
 800a95c:	0800b1f8 	.word	0x0800b1f8
 800a960:	0800b209 	.word	0x0800b209

0800a964 <__sflush_r>:
 800a964:	898a      	ldrh	r2, [r1, #12]
 800a966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96a:	4605      	mov	r5, r0
 800a96c:	0710      	lsls	r0, r2, #28
 800a96e:	460c      	mov	r4, r1
 800a970:	d458      	bmi.n	800aa24 <__sflush_r+0xc0>
 800a972:	684b      	ldr	r3, [r1, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	dc05      	bgt.n	800a984 <__sflush_r+0x20>
 800a978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	dc02      	bgt.n	800a984 <__sflush_r+0x20>
 800a97e:	2000      	movs	r0, #0
 800a980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a986:	2e00      	cmp	r6, #0
 800a988:	d0f9      	beq.n	800a97e <__sflush_r+0x1a>
 800a98a:	2300      	movs	r3, #0
 800a98c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a990:	682f      	ldr	r7, [r5, #0]
 800a992:	6a21      	ldr	r1, [r4, #32]
 800a994:	602b      	str	r3, [r5, #0]
 800a996:	d032      	beq.n	800a9fe <__sflush_r+0x9a>
 800a998:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	075a      	lsls	r2, r3, #29
 800a99e:	d505      	bpl.n	800a9ac <__sflush_r+0x48>
 800a9a0:	6863      	ldr	r3, [r4, #4]
 800a9a2:	1ac0      	subs	r0, r0, r3
 800a9a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9a6:	b10b      	cbz	r3, 800a9ac <__sflush_r+0x48>
 800a9a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9aa:	1ac0      	subs	r0, r0, r3
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9b2:	6a21      	ldr	r1, [r4, #32]
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b0      	blx	r6
 800a9b8:	1c43      	adds	r3, r0, #1
 800a9ba:	89a3      	ldrh	r3, [r4, #12]
 800a9bc:	d106      	bne.n	800a9cc <__sflush_r+0x68>
 800a9be:	6829      	ldr	r1, [r5, #0]
 800a9c0:	291d      	cmp	r1, #29
 800a9c2:	d82b      	bhi.n	800aa1c <__sflush_r+0xb8>
 800a9c4:	4a29      	ldr	r2, [pc, #164]	; (800aa6c <__sflush_r+0x108>)
 800a9c6:	410a      	asrs	r2, r1
 800a9c8:	07d6      	lsls	r6, r2, #31
 800a9ca:	d427      	bmi.n	800aa1c <__sflush_r+0xb8>
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	6062      	str	r2, [r4, #4]
 800a9d0:	04d9      	lsls	r1, r3, #19
 800a9d2:	6922      	ldr	r2, [r4, #16]
 800a9d4:	6022      	str	r2, [r4, #0]
 800a9d6:	d504      	bpl.n	800a9e2 <__sflush_r+0x7e>
 800a9d8:	1c42      	adds	r2, r0, #1
 800a9da:	d101      	bne.n	800a9e0 <__sflush_r+0x7c>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	b903      	cbnz	r3, 800a9e2 <__sflush_r+0x7e>
 800a9e0:	6560      	str	r0, [r4, #84]	; 0x54
 800a9e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9e4:	602f      	str	r7, [r5, #0]
 800a9e6:	2900      	cmp	r1, #0
 800a9e8:	d0c9      	beq.n	800a97e <__sflush_r+0x1a>
 800a9ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9ee:	4299      	cmp	r1, r3
 800a9f0:	d002      	beq.n	800a9f8 <__sflush_r+0x94>
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f7ff fb3a 	bl	800a06c <_free_r>
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	6360      	str	r0, [r4, #52]	; 0x34
 800a9fc:	e7c0      	b.n	800a980 <__sflush_r+0x1c>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b0      	blx	r6
 800aa04:	1c41      	adds	r1, r0, #1
 800aa06:	d1c8      	bne.n	800a99a <__sflush_r+0x36>
 800aa08:	682b      	ldr	r3, [r5, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0c5      	beq.n	800a99a <__sflush_r+0x36>
 800aa0e:	2b1d      	cmp	r3, #29
 800aa10:	d001      	beq.n	800aa16 <__sflush_r+0xb2>
 800aa12:	2b16      	cmp	r3, #22
 800aa14:	d101      	bne.n	800aa1a <__sflush_r+0xb6>
 800aa16:	602f      	str	r7, [r5, #0]
 800aa18:	e7b1      	b.n	800a97e <__sflush_r+0x1a>
 800aa1a:	89a3      	ldrh	r3, [r4, #12]
 800aa1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa20:	81a3      	strh	r3, [r4, #12]
 800aa22:	e7ad      	b.n	800a980 <__sflush_r+0x1c>
 800aa24:	690f      	ldr	r7, [r1, #16]
 800aa26:	2f00      	cmp	r7, #0
 800aa28:	d0a9      	beq.n	800a97e <__sflush_r+0x1a>
 800aa2a:	0793      	lsls	r3, r2, #30
 800aa2c:	680e      	ldr	r6, [r1, #0]
 800aa2e:	bf08      	it	eq
 800aa30:	694b      	ldreq	r3, [r1, #20]
 800aa32:	600f      	str	r7, [r1, #0]
 800aa34:	bf18      	it	ne
 800aa36:	2300      	movne	r3, #0
 800aa38:	eba6 0807 	sub.w	r8, r6, r7
 800aa3c:	608b      	str	r3, [r1, #8]
 800aa3e:	f1b8 0f00 	cmp.w	r8, #0
 800aa42:	dd9c      	ble.n	800a97e <__sflush_r+0x1a>
 800aa44:	6a21      	ldr	r1, [r4, #32]
 800aa46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa48:	4643      	mov	r3, r8
 800aa4a:	463a      	mov	r2, r7
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b0      	blx	r6
 800aa50:	2800      	cmp	r0, #0
 800aa52:	dc06      	bgt.n	800aa62 <__sflush_r+0xfe>
 800aa54:	89a3      	ldrh	r3, [r4, #12]
 800aa56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa5a:	81a3      	strh	r3, [r4, #12]
 800aa5c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa60:	e78e      	b.n	800a980 <__sflush_r+0x1c>
 800aa62:	4407      	add	r7, r0
 800aa64:	eba8 0800 	sub.w	r8, r8, r0
 800aa68:	e7e9      	b.n	800aa3e <__sflush_r+0xda>
 800aa6a:	bf00      	nop
 800aa6c:	dfbffffe 	.word	0xdfbffffe

0800aa70 <_fflush_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	690b      	ldr	r3, [r1, #16]
 800aa74:	4605      	mov	r5, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	b913      	cbnz	r3, 800aa80 <_fflush_r+0x10>
 800aa7a:	2500      	movs	r5, #0
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	bd38      	pop	{r3, r4, r5, pc}
 800aa80:	b118      	cbz	r0, 800aa8a <_fflush_r+0x1a>
 800aa82:	6a03      	ldr	r3, [r0, #32]
 800aa84:	b90b      	cbnz	r3, 800aa8a <_fflush_r+0x1a>
 800aa86:	f7fe fb7d 	bl	8009184 <__sinit>
 800aa8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d0f3      	beq.n	800aa7a <_fflush_r+0xa>
 800aa92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa94:	07d0      	lsls	r0, r2, #31
 800aa96:	d404      	bmi.n	800aaa2 <_fflush_r+0x32>
 800aa98:	0599      	lsls	r1, r3, #22
 800aa9a:	d402      	bmi.n	800aaa2 <_fflush_r+0x32>
 800aa9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa9e:	f7fe fc68 	bl	8009372 <__retarget_lock_acquire_recursive>
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	f7ff ff5d 	bl	800a964 <__sflush_r>
 800aaaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaac:	07da      	lsls	r2, r3, #31
 800aaae:	4605      	mov	r5, r0
 800aab0:	d4e4      	bmi.n	800aa7c <_fflush_r+0xc>
 800aab2:	89a3      	ldrh	r3, [r4, #12]
 800aab4:	059b      	lsls	r3, r3, #22
 800aab6:	d4e1      	bmi.n	800aa7c <_fflush_r+0xc>
 800aab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaba:	f7fe fc5b 	bl	8009374 <__retarget_lock_release_recursive>
 800aabe:	e7dd      	b.n	800aa7c <_fflush_r+0xc>

0800aac0 <_sbrk_r>:
 800aac0:	b538      	push	{r3, r4, r5, lr}
 800aac2:	4d06      	ldr	r5, [pc, #24]	; (800aadc <_sbrk_r+0x1c>)
 800aac4:	2300      	movs	r3, #0
 800aac6:	4604      	mov	r4, r0
 800aac8:	4608      	mov	r0, r1
 800aaca:	602b      	str	r3, [r5, #0]
 800aacc:	f7f7 fad2 	bl	8002074 <_sbrk>
 800aad0:	1c43      	adds	r3, r0, #1
 800aad2:	d102      	bne.n	800aada <_sbrk_r+0x1a>
 800aad4:	682b      	ldr	r3, [r5, #0]
 800aad6:	b103      	cbz	r3, 800aada <_sbrk_r+0x1a>
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	bd38      	pop	{r3, r4, r5, pc}
 800aadc:	200107ac 	.word	0x200107ac

0800aae0 <memcpy>:
 800aae0:	440a      	add	r2, r1
 800aae2:	4291      	cmp	r1, r2
 800aae4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aae8:	d100      	bne.n	800aaec <memcpy+0xc>
 800aaea:	4770      	bx	lr
 800aaec:	b510      	push	{r4, lr}
 800aaee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aaf6:	4291      	cmp	r1, r2
 800aaf8:	d1f9      	bne.n	800aaee <memcpy+0xe>
 800aafa:	bd10      	pop	{r4, pc}

0800aafc <__assert_func>:
 800aafc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aafe:	4614      	mov	r4, r2
 800ab00:	461a      	mov	r2, r3
 800ab02:	4b09      	ldr	r3, [pc, #36]	; (800ab28 <__assert_func+0x2c>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4605      	mov	r5, r0
 800ab08:	68d8      	ldr	r0, [r3, #12]
 800ab0a:	b14c      	cbz	r4, 800ab20 <__assert_func+0x24>
 800ab0c:	4b07      	ldr	r3, [pc, #28]	; (800ab2c <__assert_func+0x30>)
 800ab0e:	9100      	str	r1, [sp, #0]
 800ab10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab14:	4906      	ldr	r1, [pc, #24]	; (800ab30 <__assert_func+0x34>)
 800ab16:	462b      	mov	r3, r5
 800ab18:	f000 f844 	bl	800aba4 <fiprintf>
 800ab1c:	f000 f854 	bl	800abc8 <abort>
 800ab20:	4b04      	ldr	r3, [pc, #16]	; (800ab34 <__assert_func+0x38>)
 800ab22:	461c      	mov	r4, r3
 800ab24:	e7f3      	b.n	800ab0e <__assert_func+0x12>
 800ab26:	bf00      	nop
 800ab28:	200000fc 	.word	0x200000fc
 800ab2c:	0800b36e 	.word	0x0800b36e
 800ab30:	0800b37b 	.word	0x0800b37b
 800ab34:	0800b3a9 	.word	0x0800b3a9

0800ab38 <_calloc_r>:
 800ab38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab3a:	fba1 2402 	umull	r2, r4, r1, r2
 800ab3e:	b94c      	cbnz	r4, 800ab54 <_calloc_r+0x1c>
 800ab40:	4611      	mov	r1, r2
 800ab42:	9201      	str	r2, [sp, #4]
 800ab44:	f7ff fb06 	bl	800a154 <_malloc_r>
 800ab48:	9a01      	ldr	r2, [sp, #4]
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	b930      	cbnz	r0, 800ab5c <_calloc_r+0x24>
 800ab4e:	4628      	mov	r0, r5
 800ab50:	b003      	add	sp, #12
 800ab52:	bd30      	pop	{r4, r5, pc}
 800ab54:	220c      	movs	r2, #12
 800ab56:	6002      	str	r2, [r0, #0]
 800ab58:	2500      	movs	r5, #0
 800ab5a:	e7f8      	b.n	800ab4e <_calloc_r+0x16>
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	f7fe fb8a 	bl	8009276 <memset>
 800ab62:	e7f4      	b.n	800ab4e <_calloc_r+0x16>

0800ab64 <__ascii_mbtowc>:
 800ab64:	b082      	sub	sp, #8
 800ab66:	b901      	cbnz	r1, 800ab6a <__ascii_mbtowc+0x6>
 800ab68:	a901      	add	r1, sp, #4
 800ab6a:	b142      	cbz	r2, 800ab7e <__ascii_mbtowc+0x1a>
 800ab6c:	b14b      	cbz	r3, 800ab82 <__ascii_mbtowc+0x1e>
 800ab6e:	7813      	ldrb	r3, [r2, #0]
 800ab70:	600b      	str	r3, [r1, #0]
 800ab72:	7812      	ldrb	r2, [r2, #0]
 800ab74:	1e10      	subs	r0, r2, #0
 800ab76:	bf18      	it	ne
 800ab78:	2001      	movne	r0, #1
 800ab7a:	b002      	add	sp, #8
 800ab7c:	4770      	bx	lr
 800ab7e:	4610      	mov	r0, r2
 800ab80:	e7fb      	b.n	800ab7a <__ascii_mbtowc+0x16>
 800ab82:	f06f 0001 	mvn.w	r0, #1
 800ab86:	e7f8      	b.n	800ab7a <__ascii_mbtowc+0x16>

0800ab88 <__ascii_wctomb>:
 800ab88:	b149      	cbz	r1, 800ab9e <__ascii_wctomb+0x16>
 800ab8a:	2aff      	cmp	r2, #255	; 0xff
 800ab8c:	bf85      	ittet	hi
 800ab8e:	238a      	movhi	r3, #138	; 0x8a
 800ab90:	6003      	strhi	r3, [r0, #0]
 800ab92:	700a      	strbls	r2, [r1, #0]
 800ab94:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab98:	bf98      	it	ls
 800ab9a:	2001      	movls	r0, #1
 800ab9c:	4770      	bx	lr
 800ab9e:	4608      	mov	r0, r1
 800aba0:	4770      	bx	lr
	...

0800aba4 <fiprintf>:
 800aba4:	b40e      	push	{r1, r2, r3}
 800aba6:	b503      	push	{r0, r1, lr}
 800aba8:	4601      	mov	r1, r0
 800abaa:	ab03      	add	r3, sp, #12
 800abac:	4805      	ldr	r0, [pc, #20]	; (800abc4 <fiprintf+0x20>)
 800abae:	f853 2b04 	ldr.w	r2, [r3], #4
 800abb2:	6800      	ldr	r0, [r0, #0]
 800abb4:	9301      	str	r3, [sp, #4]
 800abb6:	f000 f837 	bl	800ac28 <_vfiprintf_r>
 800abba:	b002      	add	sp, #8
 800abbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800abc0:	b003      	add	sp, #12
 800abc2:	4770      	bx	lr
 800abc4:	200000fc 	.word	0x200000fc

0800abc8 <abort>:
 800abc8:	b508      	push	{r3, lr}
 800abca:	2006      	movs	r0, #6
 800abcc:	f000 fa04 	bl	800afd8 <raise>
 800abd0:	2001      	movs	r0, #1
 800abd2:	f7f7 f9d7 	bl	8001f84 <_exit>

0800abd6 <__sfputc_r>:
 800abd6:	6893      	ldr	r3, [r2, #8]
 800abd8:	3b01      	subs	r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	b410      	push	{r4}
 800abde:	6093      	str	r3, [r2, #8]
 800abe0:	da08      	bge.n	800abf4 <__sfputc_r+0x1e>
 800abe2:	6994      	ldr	r4, [r2, #24]
 800abe4:	42a3      	cmp	r3, r4
 800abe6:	db01      	blt.n	800abec <__sfputc_r+0x16>
 800abe8:	290a      	cmp	r1, #10
 800abea:	d103      	bne.n	800abf4 <__sfputc_r+0x1e>
 800abec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abf0:	f000 b934 	b.w	800ae5c <__swbuf_r>
 800abf4:	6813      	ldr	r3, [r2, #0]
 800abf6:	1c58      	adds	r0, r3, #1
 800abf8:	6010      	str	r0, [r2, #0]
 800abfa:	7019      	strb	r1, [r3, #0]
 800abfc:	4608      	mov	r0, r1
 800abfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <__sfputs_r>:
 800ac04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac06:	4606      	mov	r6, r0
 800ac08:	460f      	mov	r7, r1
 800ac0a:	4614      	mov	r4, r2
 800ac0c:	18d5      	adds	r5, r2, r3
 800ac0e:	42ac      	cmp	r4, r5
 800ac10:	d101      	bne.n	800ac16 <__sfputs_r+0x12>
 800ac12:	2000      	movs	r0, #0
 800ac14:	e007      	b.n	800ac26 <__sfputs_r+0x22>
 800ac16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac1a:	463a      	mov	r2, r7
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7ff ffda 	bl	800abd6 <__sfputc_r>
 800ac22:	1c43      	adds	r3, r0, #1
 800ac24:	d1f3      	bne.n	800ac0e <__sfputs_r+0xa>
 800ac26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac28 <_vfiprintf_r>:
 800ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	460d      	mov	r5, r1
 800ac2e:	b09d      	sub	sp, #116	; 0x74
 800ac30:	4614      	mov	r4, r2
 800ac32:	4698      	mov	r8, r3
 800ac34:	4606      	mov	r6, r0
 800ac36:	b118      	cbz	r0, 800ac40 <_vfiprintf_r+0x18>
 800ac38:	6a03      	ldr	r3, [r0, #32]
 800ac3a:	b90b      	cbnz	r3, 800ac40 <_vfiprintf_r+0x18>
 800ac3c:	f7fe faa2 	bl	8009184 <__sinit>
 800ac40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac42:	07d9      	lsls	r1, r3, #31
 800ac44:	d405      	bmi.n	800ac52 <_vfiprintf_r+0x2a>
 800ac46:	89ab      	ldrh	r3, [r5, #12]
 800ac48:	059a      	lsls	r2, r3, #22
 800ac4a:	d402      	bmi.n	800ac52 <_vfiprintf_r+0x2a>
 800ac4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac4e:	f7fe fb90 	bl	8009372 <__retarget_lock_acquire_recursive>
 800ac52:	89ab      	ldrh	r3, [r5, #12]
 800ac54:	071b      	lsls	r3, r3, #28
 800ac56:	d501      	bpl.n	800ac5c <_vfiprintf_r+0x34>
 800ac58:	692b      	ldr	r3, [r5, #16]
 800ac5a:	b99b      	cbnz	r3, 800ac84 <_vfiprintf_r+0x5c>
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	4630      	mov	r0, r6
 800ac60:	f000 f93a 	bl	800aed8 <__swsetup_r>
 800ac64:	b170      	cbz	r0, 800ac84 <_vfiprintf_r+0x5c>
 800ac66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac68:	07dc      	lsls	r4, r3, #31
 800ac6a:	d504      	bpl.n	800ac76 <_vfiprintf_r+0x4e>
 800ac6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac70:	b01d      	add	sp, #116	; 0x74
 800ac72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac76:	89ab      	ldrh	r3, [r5, #12]
 800ac78:	0598      	lsls	r0, r3, #22
 800ac7a:	d4f7      	bmi.n	800ac6c <_vfiprintf_r+0x44>
 800ac7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac7e:	f7fe fb79 	bl	8009374 <__retarget_lock_release_recursive>
 800ac82:	e7f3      	b.n	800ac6c <_vfiprintf_r+0x44>
 800ac84:	2300      	movs	r3, #0
 800ac86:	9309      	str	r3, [sp, #36]	; 0x24
 800ac88:	2320      	movs	r3, #32
 800ac8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac92:	2330      	movs	r3, #48	; 0x30
 800ac94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ae48 <_vfiprintf_r+0x220>
 800ac98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac9c:	f04f 0901 	mov.w	r9, #1
 800aca0:	4623      	mov	r3, r4
 800aca2:	469a      	mov	sl, r3
 800aca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aca8:	b10a      	cbz	r2, 800acae <_vfiprintf_r+0x86>
 800acaa:	2a25      	cmp	r2, #37	; 0x25
 800acac:	d1f9      	bne.n	800aca2 <_vfiprintf_r+0x7a>
 800acae:	ebba 0b04 	subs.w	fp, sl, r4
 800acb2:	d00b      	beq.n	800accc <_vfiprintf_r+0xa4>
 800acb4:	465b      	mov	r3, fp
 800acb6:	4622      	mov	r2, r4
 800acb8:	4629      	mov	r1, r5
 800acba:	4630      	mov	r0, r6
 800acbc:	f7ff ffa2 	bl	800ac04 <__sfputs_r>
 800acc0:	3001      	adds	r0, #1
 800acc2:	f000 80a9 	beq.w	800ae18 <_vfiprintf_r+0x1f0>
 800acc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acc8:	445a      	add	r2, fp
 800acca:	9209      	str	r2, [sp, #36]	; 0x24
 800accc:	f89a 3000 	ldrb.w	r3, [sl]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f000 80a1 	beq.w	800ae18 <_vfiprintf_r+0x1f0>
 800acd6:	2300      	movs	r3, #0
 800acd8:	f04f 32ff 	mov.w	r2, #4294967295
 800acdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ace0:	f10a 0a01 	add.w	sl, sl, #1
 800ace4:	9304      	str	r3, [sp, #16]
 800ace6:	9307      	str	r3, [sp, #28]
 800ace8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acec:	931a      	str	r3, [sp, #104]	; 0x68
 800acee:	4654      	mov	r4, sl
 800acf0:	2205      	movs	r2, #5
 800acf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf6:	4854      	ldr	r0, [pc, #336]	; (800ae48 <_vfiprintf_r+0x220>)
 800acf8:	f7f5 fa72 	bl	80001e0 <memchr>
 800acfc:	9a04      	ldr	r2, [sp, #16]
 800acfe:	b9d8      	cbnz	r0, 800ad38 <_vfiprintf_r+0x110>
 800ad00:	06d1      	lsls	r1, r2, #27
 800ad02:	bf44      	itt	mi
 800ad04:	2320      	movmi	r3, #32
 800ad06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad0a:	0713      	lsls	r3, r2, #28
 800ad0c:	bf44      	itt	mi
 800ad0e:	232b      	movmi	r3, #43	; 0x2b
 800ad10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad14:	f89a 3000 	ldrb.w	r3, [sl]
 800ad18:	2b2a      	cmp	r3, #42	; 0x2a
 800ad1a:	d015      	beq.n	800ad48 <_vfiprintf_r+0x120>
 800ad1c:	9a07      	ldr	r2, [sp, #28]
 800ad1e:	4654      	mov	r4, sl
 800ad20:	2000      	movs	r0, #0
 800ad22:	f04f 0c0a 	mov.w	ip, #10
 800ad26:	4621      	mov	r1, r4
 800ad28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad2c:	3b30      	subs	r3, #48	; 0x30
 800ad2e:	2b09      	cmp	r3, #9
 800ad30:	d94d      	bls.n	800adce <_vfiprintf_r+0x1a6>
 800ad32:	b1b0      	cbz	r0, 800ad62 <_vfiprintf_r+0x13a>
 800ad34:	9207      	str	r2, [sp, #28]
 800ad36:	e014      	b.n	800ad62 <_vfiprintf_r+0x13a>
 800ad38:	eba0 0308 	sub.w	r3, r0, r8
 800ad3c:	fa09 f303 	lsl.w	r3, r9, r3
 800ad40:	4313      	orrs	r3, r2
 800ad42:	9304      	str	r3, [sp, #16]
 800ad44:	46a2      	mov	sl, r4
 800ad46:	e7d2      	b.n	800acee <_vfiprintf_r+0xc6>
 800ad48:	9b03      	ldr	r3, [sp, #12]
 800ad4a:	1d19      	adds	r1, r3, #4
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	9103      	str	r1, [sp, #12]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	bfbb      	ittet	lt
 800ad54:	425b      	neglt	r3, r3
 800ad56:	f042 0202 	orrlt.w	r2, r2, #2
 800ad5a:	9307      	strge	r3, [sp, #28]
 800ad5c:	9307      	strlt	r3, [sp, #28]
 800ad5e:	bfb8      	it	lt
 800ad60:	9204      	strlt	r2, [sp, #16]
 800ad62:	7823      	ldrb	r3, [r4, #0]
 800ad64:	2b2e      	cmp	r3, #46	; 0x2e
 800ad66:	d10c      	bne.n	800ad82 <_vfiprintf_r+0x15a>
 800ad68:	7863      	ldrb	r3, [r4, #1]
 800ad6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad6c:	d134      	bne.n	800add8 <_vfiprintf_r+0x1b0>
 800ad6e:	9b03      	ldr	r3, [sp, #12]
 800ad70:	1d1a      	adds	r2, r3, #4
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	9203      	str	r2, [sp, #12]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	bfb8      	it	lt
 800ad7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad7e:	3402      	adds	r4, #2
 800ad80:	9305      	str	r3, [sp, #20]
 800ad82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ae58 <_vfiprintf_r+0x230>
 800ad86:	7821      	ldrb	r1, [r4, #0]
 800ad88:	2203      	movs	r2, #3
 800ad8a:	4650      	mov	r0, sl
 800ad8c:	f7f5 fa28 	bl	80001e0 <memchr>
 800ad90:	b138      	cbz	r0, 800ada2 <_vfiprintf_r+0x17a>
 800ad92:	9b04      	ldr	r3, [sp, #16]
 800ad94:	eba0 000a 	sub.w	r0, r0, sl
 800ad98:	2240      	movs	r2, #64	; 0x40
 800ad9a:	4082      	lsls	r2, r0
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	3401      	adds	r4, #1
 800ada0:	9304      	str	r3, [sp, #16]
 800ada2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada6:	4829      	ldr	r0, [pc, #164]	; (800ae4c <_vfiprintf_r+0x224>)
 800ada8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adac:	2206      	movs	r2, #6
 800adae:	f7f5 fa17 	bl	80001e0 <memchr>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d03f      	beq.n	800ae36 <_vfiprintf_r+0x20e>
 800adb6:	4b26      	ldr	r3, [pc, #152]	; (800ae50 <_vfiprintf_r+0x228>)
 800adb8:	bb1b      	cbnz	r3, 800ae02 <_vfiprintf_r+0x1da>
 800adba:	9b03      	ldr	r3, [sp, #12]
 800adbc:	3307      	adds	r3, #7
 800adbe:	f023 0307 	bic.w	r3, r3, #7
 800adc2:	3308      	adds	r3, #8
 800adc4:	9303      	str	r3, [sp, #12]
 800adc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc8:	443b      	add	r3, r7
 800adca:	9309      	str	r3, [sp, #36]	; 0x24
 800adcc:	e768      	b.n	800aca0 <_vfiprintf_r+0x78>
 800adce:	fb0c 3202 	mla	r2, ip, r2, r3
 800add2:	460c      	mov	r4, r1
 800add4:	2001      	movs	r0, #1
 800add6:	e7a6      	b.n	800ad26 <_vfiprintf_r+0xfe>
 800add8:	2300      	movs	r3, #0
 800adda:	3401      	adds	r4, #1
 800addc:	9305      	str	r3, [sp, #20]
 800adde:	4619      	mov	r1, r3
 800ade0:	f04f 0c0a 	mov.w	ip, #10
 800ade4:	4620      	mov	r0, r4
 800ade6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adea:	3a30      	subs	r2, #48	; 0x30
 800adec:	2a09      	cmp	r2, #9
 800adee:	d903      	bls.n	800adf8 <_vfiprintf_r+0x1d0>
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d0c6      	beq.n	800ad82 <_vfiprintf_r+0x15a>
 800adf4:	9105      	str	r1, [sp, #20]
 800adf6:	e7c4      	b.n	800ad82 <_vfiprintf_r+0x15a>
 800adf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800adfc:	4604      	mov	r4, r0
 800adfe:	2301      	movs	r3, #1
 800ae00:	e7f0      	b.n	800ade4 <_vfiprintf_r+0x1bc>
 800ae02:	ab03      	add	r3, sp, #12
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	462a      	mov	r2, r5
 800ae08:	4b12      	ldr	r3, [pc, #72]	; (800ae54 <_vfiprintf_r+0x22c>)
 800ae0a:	a904      	add	r1, sp, #16
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f7fd fd67 	bl	80088e0 <_printf_float>
 800ae12:	4607      	mov	r7, r0
 800ae14:	1c78      	adds	r0, r7, #1
 800ae16:	d1d6      	bne.n	800adc6 <_vfiprintf_r+0x19e>
 800ae18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae1a:	07d9      	lsls	r1, r3, #31
 800ae1c:	d405      	bmi.n	800ae2a <_vfiprintf_r+0x202>
 800ae1e:	89ab      	ldrh	r3, [r5, #12]
 800ae20:	059a      	lsls	r2, r3, #22
 800ae22:	d402      	bmi.n	800ae2a <_vfiprintf_r+0x202>
 800ae24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae26:	f7fe faa5 	bl	8009374 <__retarget_lock_release_recursive>
 800ae2a:	89ab      	ldrh	r3, [r5, #12]
 800ae2c:	065b      	lsls	r3, r3, #25
 800ae2e:	f53f af1d 	bmi.w	800ac6c <_vfiprintf_r+0x44>
 800ae32:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae34:	e71c      	b.n	800ac70 <_vfiprintf_r+0x48>
 800ae36:	ab03      	add	r3, sp, #12
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	462a      	mov	r2, r5
 800ae3c:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <_vfiprintf_r+0x22c>)
 800ae3e:	a904      	add	r1, sp, #16
 800ae40:	4630      	mov	r0, r6
 800ae42:	f7fd fff1 	bl	8008e28 <_printf_i>
 800ae46:	e7e4      	b.n	800ae12 <_vfiprintf_r+0x1ea>
 800ae48:	0800b4ab 	.word	0x0800b4ab
 800ae4c:	0800b4b5 	.word	0x0800b4b5
 800ae50:	080088e1 	.word	0x080088e1
 800ae54:	0800ac05 	.word	0x0800ac05
 800ae58:	0800b4b1 	.word	0x0800b4b1

0800ae5c <__swbuf_r>:
 800ae5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5e:	460e      	mov	r6, r1
 800ae60:	4614      	mov	r4, r2
 800ae62:	4605      	mov	r5, r0
 800ae64:	b118      	cbz	r0, 800ae6e <__swbuf_r+0x12>
 800ae66:	6a03      	ldr	r3, [r0, #32]
 800ae68:	b90b      	cbnz	r3, 800ae6e <__swbuf_r+0x12>
 800ae6a:	f7fe f98b 	bl	8009184 <__sinit>
 800ae6e:	69a3      	ldr	r3, [r4, #24]
 800ae70:	60a3      	str	r3, [r4, #8]
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	071a      	lsls	r2, r3, #28
 800ae76:	d525      	bpl.n	800aec4 <__swbuf_r+0x68>
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	b31b      	cbz	r3, 800aec4 <__swbuf_r+0x68>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	6922      	ldr	r2, [r4, #16]
 800ae80:	1a98      	subs	r0, r3, r2
 800ae82:	6963      	ldr	r3, [r4, #20]
 800ae84:	b2f6      	uxtb	r6, r6
 800ae86:	4283      	cmp	r3, r0
 800ae88:	4637      	mov	r7, r6
 800ae8a:	dc04      	bgt.n	800ae96 <__swbuf_r+0x3a>
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	4628      	mov	r0, r5
 800ae90:	f7ff fdee 	bl	800aa70 <_fflush_r>
 800ae94:	b9e0      	cbnz	r0, 800aed0 <__swbuf_r+0x74>
 800ae96:	68a3      	ldr	r3, [r4, #8]
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	60a3      	str	r3, [r4, #8]
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	6022      	str	r2, [r4, #0]
 800aea2:	701e      	strb	r6, [r3, #0]
 800aea4:	6962      	ldr	r2, [r4, #20]
 800aea6:	1c43      	adds	r3, r0, #1
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d004      	beq.n	800aeb6 <__swbuf_r+0x5a>
 800aeac:	89a3      	ldrh	r3, [r4, #12]
 800aeae:	07db      	lsls	r3, r3, #31
 800aeb0:	d506      	bpl.n	800aec0 <__swbuf_r+0x64>
 800aeb2:	2e0a      	cmp	r6, #10
 800aeb4:	d104      	bne.n	800aec0 <__swbuf_r+0x64>
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	4628      	mov	r0, r5
 800aeba:	f7ff fdd9 	bl	800aa70 <_fflush_r>
 800aebe:	b938      	cbnz	r0, 800aed0 <__swbuf_r+0x74>
 800aec0:	4638      	mov	r0, r7
 800aec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aec4:	4621      	mov	r1, r4
 800aec6:	4628      	mov	r0, r5
 800aec8:	f000 f806 	bl	800aed8 <__swsetup_r>
 800aecc:	2800      	cmp	r0, #0
 800aece:	d0d5      	beq.n	800ae7c <__swbuf_r+0x20>
 800aed0:	f04f 37ff 	mov.w	r7, #4294967295
 800aed4:	e7f4      	b.n	800aec0 <__swbuf_r+0x64>
	...

0800aed8 <__swsetup_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4b2a      	ldr	r3, [pc, #168]	; (800af84 <__swsetup_r+0xac>)
 800aedc:	4605      	mov	r5, r0
 800aede:	6818      	ldr	r0, [r3, #0]
 800aee0:	460c      	mov	r4, r1
 800aee2:	b118      	cbz	r0, 800aeec <__swsetup_r+0x14>
 800aee4:	6a03      	ldr	r3, [r0, #32]
 800aee6:	b90b      	cbnz	r3, 800aeec <__swsetup_r+0x14>
 800aee8:	f7fe f94c 	bl	8009184 <__sinit>
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aef2:	0718      	lsls	r0, r3, #28
 800aef4:	d422      	bmi.n	800af3c <__swsetup_r+0x64>
 800aef6:	06d9      	lsls	r1, r3, #27
 800aef8:	d407      	bmi.n	800af0a <__swsetup_r+0x32>
 800aefa:	2309      	movs	r3, #9
 800aefc:	602b      	str	r3, [r5, #0]
 800aefe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af02:	81a3      	strh	r3, [r4, #12]
 800af04:	f04f 30ff 	mov.w	r0, #4294967295
 800af08:	e034      	b.n	800af74 <__swsetup_r+0x9c>
 800af0a:	0758      	lsls	r0, r3, #29
 800af0c:	d512      	bpl.n	800af34 <__swsetup_r+0x5c>
 800af0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af10:	b141      	cbz	r1, 800af24 <__swsetup_r+0x4c>
 800af12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af16:	4299      	cmp	r1, r3
 800af18:	d002      	beq.n	800af20 <__swsetup_r+0x48>
 800af1a:	4628      	mov	r0, r5
 800af1c:	f7ff f8a6 	bl	800a06c <_free_r>
 800af20:	2300      	movs	r3, #0
 800af22:	6363      	str	r3, [r4, #52]	; 0x34
 800af24:	89a3      	ldrh	r3, [r4, #12]
 800af26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af2a:	81a3      	strh	r3, [r4, #12]
 800af2c:	2300      	movs	r3, #0
 800af2e:	6063      	str	r3, [r4, #4]
 800af30:	6923      	ldr	r3, [r4, #16]
 800af32:	6023      	str	r3, [r4, #0]
 800af34:	89a3      	ldrh	r3, [r4, #12]
 800af36:	f043 0308 	orr.w	r3, r3, #8
 800af3a:	81a3      	strh	r3, [r4, #12]
 800af3c:	6923      	ldr	r3, [r4, #16]
 800af3e:	b94b      	cbnz	r3, 800af54 <__swsetup_r+0x7c>
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af4a:	d003      	beq.n	800af54 <__swsetup_r+0x7c>
 800af4c:	4621      	mov	r1, r4
 800af4e:	4628      	mov	r0, r5
 800af50:	f000 f884 	bl	800b05c <__smakebuf_r>
 800af54:	89a0      	ldrh	r0, [r4, #12]
 800af56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af5a:	f010 0301 	ands.w	r3, r0, #1
 800af5e:	d00a      	beq.n	800af76 <__swsetup_r+0x9e>
 800af60:	2300      	movs	r3, #0
 800af62:	60a3      	str	r3, [r4, #8]
 800af64:	6963      	ldr	r3, [r4, #20]
 800af66:	425b      	negs	r3, r3
 800af68:	61a3      	str	r3, [r4, #24]
 800af6a:	6923      	ldr	r3, [r4, #16]
 800af6c:	b943      	cbnz	r3, 800af80 <__swsetup_r+0xa8>
 800af6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af72:	d1c4      	bne.n	800aefe <__swsetup_r+0x26>
 800af74:	bd38      	pop	{r3, r4, r5, pc}
 800af76:	0781      	lsls	r1, r0, #30
 800af78:	bf58      	it	pl
 800af7a:	6963      	ldrpl	r3, [r4, #20]
 800af7c:	60a3      	str	r3, [r4, #8]
 800af7e:	e7f4      	b.n	800af6a <__swsetup_r+0x92>
 800af80:	2000      	movs	r0, #0
 800af82:	e7f7      	b.n	800af74 <__swsetup_r+0x9c>
 800af84:	200000fc 	.word	0x200000fc

0800af88 <_raise_r>:
 800af88:	291f      	cmp	r1, #31
 800af8a:	b538      	push	{r3, r4, r5, lr}
 800af8c:	4604      	mov	r4, r0
 800af8e:	460d      	mov	r5, r1
 800af90:	d904      	bls.n	800af9c <_raise_r+0x14>
 800af92:	2316      	movs	r3, #22
 800af94:	6003      	str	r3, [r0, #0]
 800af96:	f04f 30ff 	mov.w	r0, #4294967295
 800af9a:	bd38      	pop	{r3, r4, r5, pc}
 800af9c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800af9e:	b112      	cbz	r2, 800afa6 <_raise_r+0x1e>
 800afa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afa4:	b94b      	cbnz	r3, 800afba <_raise_r+0x32>
 800afa6:	4620      	mov	r0, r4
 800afa8:	f000 f830 	bl	800b00c <_getpid_r>
 800afac:	462a      	mov	r2, r5
 800afae:	4601      	mov	r1, r0
 800afb0:	4620      	mov	r0, r4
 800afb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afb6:	f000 b817 	b.w	800afe8 <_kill_r>
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d00a      	beq.n	800afd4 <_raise_r+0x4c>
 800afbe:	1c59      	adds	r1, r3, #1
 800afc0:	d103      	bne.n	800afca <_raise_r+0x42>
 800afc2:	2316      	movs	r3, #22
 800afc4:	6003      	str	r3, [r0, #0]
 800afc6:	2001      	movs	r0, #1
 800afc8:	e7e7      	b.n	800af9a <_raise_r+0x12>
 800afca:	2400      	movs	r4, #0
 800afcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afd0:	4628      	mov	r0, r5
 800afd2:	4798      	blx	r3
 800afd4:	2000      	movs	r0, #0
 800afd6:	e7e0      	b.n	800af9a <_raise_r+0x12>

0800afd8 <raise>:
 800afd8:	4b02      	ldr	r3, [pc, #8]	; (800afe4 <raise+0xc>)
 800afda:	4601      	mov	r1, r0
 800afdc:	6818      	ldr	r0, [r3, #0]
 800afde:	f7ff bfd3 	b.w	800af88 <_raise_r>
 800afe2:	bf00      	nop
 800afe4:	200000fc 	.word	0x200000fc

0800afe8 <_kill_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4d07      	ldr	r5, [pc, #28]	; (800b008 <_kill_r+0x20>)
 800afec:	2300      	movs	r3, #0
 800afee:	4604      	mov	r4, r0
 800aff0:	4608      	mov	r0, r1
 800aff2:	4611      	mov	r1, r2
 800aff4:	602b      	str	r3, [r5, #0]
 800aff6:	f7f6 ffb5 	bl	8001f64 <_kill>
 800affa:	1c43      	adds	r3, r0, #1
 800affc:	d102      	bne.n	800b004 <_kill_r+0x1c>
 800affe:	682b      	ldr	r3, [r5, #0]
 800b000:	b103      	cbz	r3, 800b004 <_kill_r+0x1c>
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	bd38      	pop	{r3, r4, r5, pc}
 800b006:	bf00      	nop
 800b008:	200107ac 	.word	0x200107ac

0800b00c <_getpid_r>:
 800b00c:	f7f6 bfa2 	b.w	8001f54 <_getpid>

0800b010 <__swhatbuf_r>:
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	460c      	mov	r4, r1
 800b014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b018:	2900      	cmp	r1, #0
 800b01a:	b096      	sub	sp, #88	; 0x58
 800b01c:	4615      	mov	r5, r2
 800b01e:	461e      	mov	r6, r3
 800b020:	da0d      	bge.n	800b03e <__swhatbuf_r+0x2e>
 800b022:	89a3      	ldrh	r3, [r4, #12]
 800b024:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b028:	f04f 0100 	mov.w	r1, #0
 800b02c:	bf0c      	ite	eq
 800b02e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b032:	2340      	movne	r3, #64	; 0x40
 800b034:	2000      	movs	r0, #0
 800b036:	6031      	str	r1, [r6, #0]
 800b038:	602b      	str	r3, [r5, #0]
 800b03a:	b016      	add	sp, #88	; 0x58
 800b03c:	bd70      	pop	{r4, r5, r6, pc}
 800b03e:	466a      	mov	r2, sp
 800b040:	f000 f848 	bl	800b0d4 <_fstat_r>
 800b044:	2800      	cmp	r0, #0
 800b046:	dbec      	blt.n	800b022 <__swhatbuf_r+0x12>
 800b048:	9901      	ldr	r1, [sp, #4]
 800b04a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b04e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b052:	4259      	negs	r1, r3
 800b054:	4159      	adcs	r1, r3
 800b056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b05a:	e7eb      	b.n	800b034 <__swhatbuf_r+0x24>

0800b05c <__smakebuf_r>:
 800b05c:	898b      	ldrh	r3, [r1, #12]
 800b05e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b060:	079d      	lsls	r5, r3, #30
 800b062:	4606      	mov	r6, r0
 800b064:	460c      	mov	r4, r1
 800b066:	d507      	bpl.n	800b078 <__smakebuf_r+0x1c>
 800b068:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	6123      	str	r3, [r4, #16]
 800b070:	2301      	movs	r3, #1
 800b072:	6163      	str	r3, [r4, #20]
 800b074:	b002      	add	sp, #8
 800b076:	bd70      	pop	{r4, r5, r6, pc}
 800b078:	ab01      	add	r3, sp, #4
 800b07a:	466a      	mov	r2, sp
 800b07c:	f7ff ffc8 	bl	800b010 <__swhatbuf_r>
 800b080:	9900      	ldr	r1, [sp, #0]
 800b082:	4605      	mov	r5, r0
 800b084:	4630      	mov	r0, r6
 800b086:	f7ff f865 	bl	800a154 <_malloc_r>
 800b08a:	b948      	cbnz	r0, 800b0a0 <__smakebuf_r+0x44>
 800b08c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b090:	059a      	lsls	r2, r3, #22
 800b092:	d4ef      	bmi.n	800b074 <__smakebuf_r+0x18>
 800b094:	f023 0303 	bic.w	r3, r3, #3
 800b098:	f043 0302 	orr.w	r3, r3, #2
 800b09c:	81a3      	strh	r3, [r4, #12]
 800b09e:	e7e3      	b.n	800b068 <__smakebuf_r+0xc>
 800b0a0:	89a3      	ldrh	r3, [r4, #12]
 800b0a2:	6020      	str	r0, [r4, #0]
 800b0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0a8:	81a3      	strh	r3, [r4, #12]
 800b0aa:	9b00      	ldr	r3, [sp, #0]
 800b0ac:	6163      	str	r3, [r4, #20]
 800b0ae:	9b01      	ldr	r3, [sp, #4]
 800b0b0:	6120      	str	r0, [r4, #16]
 800b0b2:	b15b      	cbz	r3, 800b0cc <__smakebuf_r+0x70>
 800b0b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f000 f81d 	bl	800b0f8 <_isatty_r>
 800b0be:	b128      	cbz	r0, 800b0cc <__smakebuf_r+0x70>
 800b0c0:	89a3      	ldrh	r3, [r4, #12]
 800b0c2:	f023 0303 	bic.w	r3, r3, #3
 800b0c6:	f043 0301 	orr.w	r3, r3, #1
 800b0ca:	81a3      	strh	r3, [r4, #12]
 800b0cc:	89a3      	ldrh	r3, [r4, #12]
 800b0ce:	431d      	orrs	r5, r3
 800b0d0:	81a5      	strh	r5, [r4, #12]
 800b0d2:	e7cf      	b.n	800b074 <__smakebuf_r+0x18>

0800b0d4 <_fstat_r>:
 800b0d4:	b538      	push	{r3, r4, r5, lr}
 800b0d6:	4d07      	ldr	r5, [pc, #28]	; (800b0f4 <_fstat_r+0x20>)
 800b0d8:	2300      	movs	r3, #0
 800b0da:	4604      	mov	r4, r0
 800b0dc:	4608      	mov	r0, r1
 800b0de:	4611      	mov	r1, r2
 800b0e0:	602b      	str	r3, [r5, #0]
 800b0e2:	f7f6 ff9e 	bl	8002022 <_fstat>
 800b0e6:	1c43      	adds	r3, r0, #1
 800b0e8:	d102      	bne.n	800b0f0 <_fstat_r+0x1c>
 800b0ea:	682b      	ldr	r3, [r5, #0]
 800b0ec:	b103      	cbz	r3, 800b0f0 <_fstat_r+0x1c>
 800b0ee:	6023      	str	r3, [r4, #0]
 800b0f0:	bd38      	pop	{r3, r4, r5, pc}
 800b0f2:	bf00      	nop
 800b0f4:	200107ac 	.word	0x200107ac

0800b0f8 <_isatty_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	4d06      	ldr	r5, [pc, #24]	; (800b114 <_isatty_r+0x1c>)
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	4604      	mov	r4, r0
 800b100:	4608      	mov	r0, r1
 800b102:	602b      	str	r3, [r5, #0]
 800b104:	f7f6 ff9d 	bl	8002042 <_isatty>
 800b108:	1c43      	adds	r3, r0, #1
 800b10a:	d102      	bne.n	800b112 <_isatty_r+0x1a>
 800b10c:	682b      	ldr	r3, [r5, #0]
 800b10e:	b103      	cbz	r3, 800b112 <_isatty_r+0x1a>
 800b110:	6023      	str	r3, [r4, #0]
 800b112:	bd38      	pop	{r3, r4, r5, pc}
 800b114:	200107ac 	.word	0x200107ac

0800b118 <_init>:
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	bf00      	nop
 800b11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11e:	bc08      	pop	{r3}
 800b120:	469e      	mov	lr, r3
 800b122:	4770      	bx	lr

0800b124 <_fini>:
 800b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b126:	bf00      	nop
 800b128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12a:	bc08      	pop	{r3}
 800b12c:	469e      	mov	lr, r3
 800b12e:	4770      	bx	lr
