
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ad0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08009c70  08009c70  00019c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ffc  08009ffc  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  08009ffc  08009ffc  00019ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a004  0800a004  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a004  0800a004  0001a004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a008  0800a008  0001a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800a00c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  20000264  0800a270  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007c4  0800a270  000207c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010987  00000000  00000000  000202d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b94  00000000  00000000  00030c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  000337f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8b  00000000  00000000  00034820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000198da  00000000  00000000  000354ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015582  00000000  00000000  0004ed85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bd15  00000000  00000000  00064307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052f8  00000000  00000000  0010001c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00105314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000264 	.word	0x20000264
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c58 	.word	0x08009c58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000268 	.word	0x20000268
 80001dc:	08009c58 	.word	0x08009c58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <PrepareCommutation>:
uint8_t StopSequence(void);
uint8_t ChangePWM (void);

/* Private function ----------------------------------------------------------*/

uint8_t PrepareCommutation (char Direction) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]

	// Read IDR for Hall Sensor status
	uint16_t Hall = (GPIOA->IDR & 0b111) - 1 + 6 * Direction;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <PrepareCommutation+0x7c>)
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	4619      	mov	r1, r3
 8000ed0:	0049      	lsls	r1, r1, #1
 8000ed2:	440b      	add	r3, r1
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	4413      	add	r3, r2
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	3b01      	subs	r3, #1
 8000ede:	81fb      	strh	r3, [r7, #14]

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8000ee0:	89fa      	ldrh	r2, [r7, #14]
 8000ee2:	4914      	ldr	r1, [pc, #80]	; (8000f34 <PrepareCommutation+0x80>)
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	440b      	add	r3, r1
 8000eee:	881a      	ldrh	r2, [r3, #0]
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <PrepareCommutation+0x84>)
 8000ef2:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 8000ef4:	89fa      	ldrh	r2, [r7, #14]
 8000ef6:	490f      	ldr	r1, [pc, #60]	; (8000f34 <PrepareCommutation+0x80>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	440b      	add	r3, r1
 8000f02:	3304      	adds	r3, #4
 8000f04:	881a      	ldrh	r2, [r3, #0]
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <PrepareCommutation+0x84>)
 8000f08:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 8000f0a:	89fa      	ldrh	r2, [r7, #14]
 8000f0c:	4909      	ldr	r1, [pc, #36]	; (8000f34 <PrepareCommutation+0x80>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	440b      	add	r3, r1
 8000f18:	3302      	adds	r3, #2
 8000f1a:	881a      	ldrh	r2, [r3, #0]
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <PrepareCommutation+0x84>)
 8000f1e:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8000f20:	2300      	movs	r3, #0

}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40020000 	.word	0x40020000
 8000f34:	20000000 	.word	0x20000000
 8000f38:	40010000 	.word	0x40010000

08000f3c <StartupSequence>:

uint8_t StartupSequence (char Direction) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]

	// Initialize some variables
	Fapb1tclk = HAL_RCC_GetPCLK1Freq() * 2;
 8000f46:	f004 fbd5 	bl	80056f4 <HAL_RCC_GetPCLK1Freq>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4a53      	ldr	r2, [pc, #332]	; (800109c <StartupSequence+0x160>)
 8000f50:	6013      	str	r3, [r2, #0]
	Fapb2tclk = HAL_RCC_GetPCLK2Freq() * 2;
 8000f52:	f004 fbe3 	bl	800571c <HAL_RCC_GetPCLK2Freq>
 8000f56:	4603      	mov	r3, r0
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4a51      	ldr	r2, [pc, #324]	; (80010a0 <StartupSequence+0x164>)
 8000f5c:	6013      	str	r3, [r2, #0]
	RPMConst = (Fapb2tclk / (TIM9->PSC + 1)) * 2;
 8000f5e:	4b50      	ldr	r3, [pc, #320]	; (80010a0 <StartupSequence+0x164>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b50      	ldr	r3, [pc, #320]	; (80010a4 <StartupSequence+0x168>)
 8000f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f66:	3301      	adds	r3, #1
 8000f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4a4e      	ldr	r2, [pc, #312]	; (80010a8 <StartupSequence+0x16c>)
 8000f70:	6013      	str	r3, [r2, #0]

	// Set first commutation state according to Hall sensors
	if (PrepareCommutation (Direction + 6 * 2)) {
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	330c      	adds	r3, #12
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff9b 	bl	8000eb4 <PrepareCommutation>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <StartupSequence+0x4c>
		return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e084      	b.n	8001092 <StartupSequence+0x156>
	}

	// Start HallSensor timer
	HAL_TIMEx_HallSensor_Start (&htim2);
 8000f88:	4848      	ldr	r0, [pc, #288]	; (80010ac <StartupSequence+0x170>)
 8000f8a:	f006 f81b 	bl	8006fc4 <HAL_TIMEx_HallSensor_Start>

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4847      	ldr	r0, [pc, #284]	; (80010b0 <StartupSequence+0x174>)
 8000f92:	f004 fd07 	bl	80059a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 8000f96:	2104      	movs	r1, #4
 8000f98:	4845      	ldr	r0, [pc, #276]	; (80010b0 <StartupSequence+0x174>)
 8000f9a:	f004 fd03 	bl	80059a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	4843      	ldr	r0, [pc, #268]	; (80010b0 <StartupSequence+0x174>)
 8000fa2:	f004 fcff 	bl	80059a4 <HAL_TIM_PWM_Start>

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 8000fa6:	4b43      	ldr	r3, [pc, #268]	; (80010b4 <StartupSequence+0x178>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	4a42      	ldr	r2, [pc, #264]	; (80010b4 <StartupSequence+0x178>)
 8000fac:	f023 0320 	bic.w	r3, r3, #32
 8000fb0:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <StartupSequence+0x178>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	4a3f      	ldr	r2, [pc, #252]	; (80010b4 <StartupSequence+0x178>)
 8000fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fbc:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8000fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fcc:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8000fce:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <StartupSequence+0x168>)
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	4a34      	ldr	r2, [pc, #208]	; (80010a4 <StartupSequence+0x168>)
 8000fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fd8:	60d3      	str	r3, [r2, #12]

	// Start Interrupts
	HAL_TIM_Base_Start_IT (&htim1);
 8000fda:	4835      	ldr	r0, [pc, #212]	; (80010b0 <StartupSequence+0x174>)
 8000fdc:	f004 fc02 	bl	80057e4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim2);
 8000fe0:	4832      	ldr	r0, [pc, #200]	; (80010ac <StartupSequence+0x170>)
 8000fe2:	f004 fbff 	bl	80057e4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim9);
 8000fe6:	4834      	ldr	r0, [pc, #208]	; (80010b8 <StartupSequence+0x17c>)
 8000fe8:	f004 fbfc 	bl	80057e4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT (&htim9, TIM_CHANNEL_2);
 8000fec:	2104      	movs	r1, #4
 8000fee:	4832      	ldr	r0, [pc, #200]	; (80010b8 <StartupSequence+0x17c>)
 8000ff0:	f004 fe3c 	bl	8005c6c <HAL_TIM_IC_Start_IT>

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <StartupSequence+0x178>)
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <StartupSequence+0x178>)
 8000ffa:	f023 0320 	bic.w	r3, r3, #32
 8000ffe:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <StartupSequence+0x178>)
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <StartupSequence+0x178>)
 8001006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800100a:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 800100c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800101a:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <StartupSequence+0x168>)
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	4a20      	ldr	r2, [pc, #128]	; (80010a4 <StartupSequence+0x168>)
 8001022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001026:	6113      	str	r3, [r2, #16]

	// Enable interrupts
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <StartupSequence+0x178>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <StartupSequence+0x178>)
 800102e:	f043 0320 	orr.w	r3, r3, #32
 8001032:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 8001034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001042:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <StartupSequence+0x168>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <StartupSequence+0x168>)
 800104a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104e:	60d3      	str	r3, [r2, #12]

	// Write some registers
	TIM1->CR2  |= TIM_CR2_CCPC; 	// Set CCPC in CR2 to preload CCxE, CCxNE and OCxM bits
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <StartupSequence+0x178>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <StartupSequence+0x178>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6053      	str	r3, [r2, #4]
	TIM1->BDTR &= ~TIM_BDTR_DTG;	// Reset DTG bits
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <StartupSequence+0x178>)
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <StartupSequence+0x178>)
 8001062:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001066:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= 0x800A;			// Set dead-time to 100ns and make sure to enable MOE bit
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <StartupSequence+0x178>)
 800106a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106c:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <StartupSequence+0x178>)
 800106e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001072:	f043 030a 	orr.w	r3, r3, #10
 8001076:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <StartupSequence+0x178>)
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <StartupSequence+0x178>)
 800107e:	f043 0320 	orr.w	r3, r3, #32
 8001082:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <StartupSequence+0x178>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <StartupSequence+0x178>)
 800108a:	f043 0320 	orr.w	r3, r3, #32
 800108e:	60d3      	str	r3, [r2, #12]

	return HAL_OK;
 8001090:	2300      	movs	r3, #0

}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000280 	.word	0x20000280
 80010a0:	20000284 	.word	0x20000284
 80010a4:	40014000 	.word	0x40014000
 80010a8:	20000288 	.word	0x20000288
 80010ac:	2000059c 	.word	0x2000059c
 80010b0:	20000554 	.word	0x20000554
 80010b4:	40010000 	.word	0x40010000
 80010b8:	2000062c 	.word	0x2000062c

080010bc <StopSequence>:

uint8_t StopSequence(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

	// Stop HallSensor timer
	HAL_TIMEx_HallSensor_Stop (&htim2);
 80010c0:	4828      	ldr	r0, [pc, #160]	; (8001164 <StopSequence+0xa8>)
 80010c2:	f005 ffff 	bl	80070c4 <HAL_TIMEx_HallSensor_Stop>

	// Disable all output channels
	TIM1->CCER  = 0x0000;
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <StopSequence+0xac>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = 0x0000;
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <StopSequence+0xac>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = 0x0000;
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <StopSequence+0xac>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]

	// Perform one last commutation event if not already disabled
	if ( (TIM1->DIER & TIM_DIER_COMIE) >= 1 ) { 		// If COMIE bit in DIER is set commutation events are still enabled
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <StopSequence+0xac>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f003 0320 	and.w	r3, r3, #32
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <StopSequence+0x34>

		TIM1->EGR |= TIM_EGR_COMG; 						// Trigger commutation event
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <StopSequence+0xac>)
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <StopSequence+0xac>)
 80010ea:	f043 0320 	orr.w	r3, r3, #32
 80010ee:	6153      	str	r3, [r2, #20]
		// while ( (TIM1->SR & TIM_SR_COMIF) >= 1 ); 	// Wait until commutation event has happened

	}

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <StopSequence+0xac>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <StopSequence+0xac>)
 80010f6:	f023 0320 	bic.w	r3, r3, #32
 80010fa:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <StopSequence+0xac>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4a19      	ldr	r2, [pc, #100]	; (8001168 <StopSequence+0xac>)
 8001102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001106:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8001108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001116:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <StopSequence+0xb0>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4a13      	ldr	r2, [pc, #76]	; (800116c <StopSequence+0xb0>)
 800111e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001122:	60d3      	str	r3, [r2, #12]

	// Stop interrupts
	HAL_TIM_Base_Stop_IT (&htim1);
 8001124:	4812      	ldr	r0, [pc, #72]	; (8001170 <StopSequence+0xb4>)
 8001126:	f004 fbbf 	bl	80058a8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim2);
 800112a:	480e      	ldr	r0, [pc, #56]	; (8001164 <StopSequence+0xa8>)
 800112c:	f004 fbbc 	bl	80058a8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim9);
 8001130:	4810      	ldr	r0, [pc, #64]	; (8001174 <StopSequence+0xb8>)
 8001132:	f004 fbb9 	bl	80058a8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT (&htim9, TIM_CHANNEL_2);
 8001136:	2104      	movs	r1, #4
 8001138:	480e      	ldr	r0, [pc, #56]	; (8001174 <StopSequence+0xb8>)
 800113a:	f004 feb1 	bl	8005ea0 <HAL_TIM_IC_Stop_IT>

	// Stop PWM Timers
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_1);
 800113e:	2100      	movs	r1, #0
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <StopSequence+0xb4>)
 8001142:	f004 fcdf 	bl	8005b04 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_2);
 8001146:	2104      	movs	r1, #4
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <StopSequence+0xb4>)
 800114a:	f004 fcdb 	bl	8005b04 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_3);
 800114e:	2108      	movs	r1, #8
 8001150:	4807      	ldr	r0, [pc, #28]	; (8001170 <StopSequence+0xb4>)
 8001152:	f004 fcd7 	bl	8005b04 <HAL_TIM_PWM_Stop>

	Registers[RPMReg] = 0;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <StopSequence+0xbc>)
 8001158:	2200      	movs	r2, #0
 800115a:	80da      	strh	r2, [r3, #6]

	return HAL_OK;
 800115c:	2300      	movs	r3, #0

}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000059c 	.word	0x2000059c
 8001168:	40010000 	.word	0x40010000
 800116c:	40014000 	.word	0x40014000
 8001170:	20000554 	.word	0x20000554
 8001174:	2000062c 	.word	0x2000062c
 8001178:	200002e0 	.word	0x200002e0

0800117c <ChangePWM>:

uint8_t ChangePWM (void) {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0

	uint32_t PWM = (Registers[PWMReg] * TIM1->ARR) / 100; // Calculate required CCRx value
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <ChangePWM+0x6c>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <ChangePWM+0x70>)
 800118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <ChangePWM+0x74>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	607b      	str	r3, [r7, #4]

	if (PWM >= TIM1->ARR - 60) {
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <ChangePWM+0x70>)
 800119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119e:	3b3c      	subs	r3, #60	; 0x3c
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d303      	bcc.n	80011ae <ChangePWM+0x32>
		PWM = TIM1->ARR - 60;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <ChangePWM+0x70>)
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	3b3c      	subs	r3, #60	; 0x3c
 80011ac:	607b      	str	r3, [r7, #4]
	}

	TIM1->CR1 |= TIM_CR1_UDIS; 	// Disable Update Events
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <ChangePWM+0x70>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <ChangePWM+0x70>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = PWM;	  		// Set new PWM for channel 1
 80011ba:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <ChangePWM+0x70>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = PWM;	  		// Set new PWM for channel 2
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <ChangePWM+0x70>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = PWM;	  		// Set new PWM for channel 3
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <ChangePWM+0x70>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_UDIS; // Enable Update Events
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <ChangePWM+0x70>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a06      	ldr	r2, [pc, #24]	; (80011ec <ChangePWM+0x70>)
 80011d2:	f023 0302 	bic.w	r3, r3, #2
 80011d6:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 80011d8:	2300      	movs	r3, #0

}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	200002e0 	.word	0x200002e0
 80011ec:	40010000 	.word	0x40010000
 80011f0:	51eb851f 	.word	0x51eb851f

080011f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001208:	4a22      	ldr	r2, [pc, #136]	; (8001294 <MX_ADC1_Init+0xa0>)
 800120a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <MX_ADC1_Init+0x9c>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_ADC1_Init+0x9c>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001220:	2200      	movs	r2, #0
 8001222:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_ADC1_Init+0x9c>)
 800122e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_CC1;
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001236:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_ADC1_Init+0x9c>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001244:	2201      	movs	r2, #1
 8001246:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_ADC1_Init+0x9c>)
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001252:	2201      	movs	r2, #1
 8001254:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001256:	480e      	ldr	r0, [pc, #56]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001258:	f001 f8c2 	bl	80023e0 <HAL_ADC_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001262:	f000 fb57 	bl	8001914 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001266:	2309      	movs	r3, #9
 8001268:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001278:	f001 fa24 	bl	80026c4 <HAL_ADC_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001282:	f000 fb47 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000028c 	.word	0x2000028c
 8001294:	40012000 	.word	0x40012000

08001298 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a28      	ldr	r2, [pc, #160]	; (8001358 <HAL_ADC_MspInit+0xc0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d149      	bne.n	800134e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a26      	ldr	r2, [pc, #152]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a1f      	ldr	r2, [pc, #124]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <HAL_ADC_MspInit+0xc4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800130e:	2310      	movs	r3, #16
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	480f      	ldr	r0, [pc, #60]	; (8001360 <HAL_ADC_MspInit+0xc8>)
 8001322:	f001 fd49 	bl	8002db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001326:	2302      	movs	r3, #2
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132a:	2303      	movs	r3, #3
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <HAL_ADC_MspInit+0xcc>)
 800133a:	f001 fd3d 	bl	8002db8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	2012      	movs	r0, #18
 8001344:	f001 fcd1 	bl	8002cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001348:	2012      	movs	r0, #18
 800134a:	f001 fcea 	bl	8002d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800134e:	bf00      	nop
 8001350:	3728      	adds	r7, #40	; 0x28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40012000 	.word	0x40012000
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000
 8001364:	40020400 	.word	0x40020400

08001368 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <MX_GPIO_Init+0xf8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a36      	ldr	r2, [pc, #216]	; (8001460 <MX_GPIO_Init+0xf8>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <MX_GPIO_Init+0xf8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b30      	ldr	r3, [pc, #192]	; (8001460 <MX_GPIO_Init+0xf8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a2f      	ldr	r2, [pc, #188]	; (8001460 <MX_GPIO_Init+0xf8>)
 80013a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <MX_GPIO_Init+0xf8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <MX_GPIO_Init+0xf8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a28      	ldr	r2, [pc, #160]	; (8001460 <MX_GPIO_Init+0xf8>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <MX_GPIO_Init+0xf8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <MX_GPIO_Init+0xf8>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a21      	ldr	r2, [pc, #132]	; (8001460 <MX_GPIO_Init+0xf8>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <MX_GPIO_Init+0xf8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f4:	2303      	movs	r3, #3
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4818      	ldr	r0, [pc, #96]	; (8001464 <MX_GPIO_Init+0xfc>)
 8001404:	f001 fcd8 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11
 8001408:	f649 03e0 	movw	r3, #39136	; 0x98e0
 800140c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140e:	2303      	movs	r3, #3
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	4812      	ldr	r0, [pc, #72]	; (8001468 <MX_GPIO_Init+0x100>)
 800141e:	f001 fccb 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB12
                           PB3 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 8001422:	f241 732d 	movw	r3, #5933	; 0x172d
 8001426:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001428:	2303      	movs	r3, #3
 800142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <MX_GPIO_Init+0x104>)
 8001438:	f001 fcbe 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800143c:	2310      	movs	r3, #16
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001440:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4806      	ldr	r0, [pc, #24]	; (800146c <MX_GPIO_Init+0x104>)
 8001452:	f001 fcb1 	bl	8002db8 <HAL_GPIO_Init>

}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40020800 	.word	0x40020800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400

08001470 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001476:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <MX_I2C1_Init+0x54>)
 8001478:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_I2C1_Init+0x50>)
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <MX_I2C1_Init+0x58>)
 800147e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001488:	2220      	movs	r2, #32
 800148a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_I2C1_Init+0x50>)
 800148e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001492:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_I2C1_Init+0x50>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <MX_I2C1_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_I2C1_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <MX_I2C1_Init+0x50>)
 80014ae:	f001 fe07 	bl	80030c0 <HAL_I2C_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014b8:	f000 fa2c 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200002f4 	.word	0x200002f4
 80014c4:	40005400 	.word	0x40005400
 80014c8:	000186a0 	.word	0x000186a0

080014cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a21      	ldr	r2, [pc, #132]	; (8001570 <HAL_I2C_MspInit+0xa4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d13b      	bne.n	8001566 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_I2C_MspInit+0xa8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a1f      	ldr	r2, [pc, #124]	; (8001574 <HAL_I2C_MspInit+0xa8>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_I2C_MspInit+0xa8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800150a:	23c0      	movs	r3, #192	; 0xc0
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150e:	2312      	movs	r3, #18
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800151a:	2304      	movs	r3, #4
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4814      	ldr	r0, [pc, #80]	; (8001578 <HAL_I2C_MspInit+0xac>)
 8001526:	f001 fc47 	bl	8002db8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_I2C_MspInit+0xa8>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <HAL_I2C_MspInit+0xa8>)
 8001534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_I2C_MspInit+0xa8>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	201f      	movs	r0, #31
 800154c:	f001 fbcd 	bl	8002cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001550:	201f      	movs	r0, #31
 8001552:	f001 fbe6 	bl	8002d22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2020      	movs	r0, #32
 800155c:	f001 fbc5 	bl	8002cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001560:	2020      	movs	r0, #32
 8001562:	f001 fbde 	bl	8002d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40005400 	.word	0x40005400
 8001574:	40023800 	.word	0x40023800
 8001578:	40020400 	.word	0x40020400

0800157c <HAL_I2C_ListenCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

	HAL_I2C_EnableListen_IT (hi2c);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f001 ffc5 	bl	8003514 <HAL_I2C_EnableListen_IT>

}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback (I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	70fb      	strb	r3, [r7, #3]
 80015a0:	4613      	mov	r3, r2
 80015a2:	803b      	strh	r3, [r7, #0]

	if ( TransferDirection == I2C_DIRECTION_TRANSMIT ) { // If the master wants to transmit the data
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d10d      	bne.n	80015c6 <HAL_I2C_AddrCallback+0x32>

		RxCount = 0;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_I2C_AddrCallback+0x8c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_FIRST_FRAME);
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_I2C_AddrCallback+0x8c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <HAL_I2C_AddrCallback+0x90>)
 80015b8:	18d1      	adds	r1, r2, r3
 80015ba:	2301      	movs	r3, #1
 80015bc:	2201      	movs	r2, #1
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f001 ff35 	bl	800342e <HAL_I2C_Slave_Seq_Receive_IT>
		StartReg = RxData[0];
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] >> 8), 1, I2C_FIRST_FRAME);
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] & 0xFF), 1, I2C_NEXT_FRAME);

	}
}
 80015c4:	e028      	b.n	8001618 <HAL_I2C_AddrCallback+0x84>
		TxCount = 0;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_I2C_AddrCallback+0x94>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
		StartReg = RxData[0];
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_I2C_AddrCallback+0x90>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_I2C_AddrCallback+0x98>)
 80015d4:	601a      	str	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] >> 8), 1, I2C_FIRST_FRAME);
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <HAL_I2C_AddrCallback+0x94>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_I2C_AddrCallback+0x98>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a13      	ldr	r2, [pc, #76]	; (8001630 <HAL_I2C_AddrCallback+0x9c>)
 80015e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4619      	mov	r1, r3
 80015ee:	2301      	movs	r3, #1
 80015f0:	2201      	movs	r2, #1
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f001 fea8 	bl	8003348 <HAL_I2C_Slave_Seq_Transmit_IT>
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] & 0xFF), 1, I2C_NEXT_FRAME);
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_I2C_AddrCallback+0x94>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_I2C_AddrCallback+0x98>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <HAL_I2C_AddrCallback+0x9c>)
 8001606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4619      	mov	r1, r3
 800160e:	2304      	movs	r3, #4
 8001610:	2201      	movs	r2, #1
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f001 fe98 	bl	8003348 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200002d5 	.word	0x200002d5
 8001624:	200002d8 	.word	0x200002d8
 8001628:	200002d4 	.word	0x200002d4
 800162c:	200002e8 	.word	0x200002e8
 8001630:	200002e0 	.word	0x200002e0

08001634 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback (I2C_HandleTypeDef *hi2c) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

	TxCount++;
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_I2C_SlaveTxCpltCallback+0x60>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_I2C_SlaveTxCpltCallback+0x60>)
 8001646:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] >> 8), 1, I2C_NEXT_FRAME);
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_I2C_SlaveTxCpltCallback+0x60>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_I2C_SlaveTxCpltCallback+0x64>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a11      	ldr	r2, [pc, #68]	; (800169c <HAL_I2C_SlaveTxCpltCallback+0x68>)
 8001656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	b29b      	uxth	r3, r3
 800165e:	4619      	mov	r1, r3
 8001660:	2304      	movs	r3, #4
 8001662:	2201      	movs	r2, #1
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f001 fe6f 	bl	8003348 <HAL_I2C_Slave_Seq_Transmit_IT>
	HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] & 0xFF), 1, I2C_NEXT_FRAME);
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_I2C_SlaveTxCpltCallback+0x60>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_I2C_SlaveTxCpltCallback+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4413      	add	r3, r2
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <HAL_I2C_SlaveTxCpltCallback+0x68>)
 8001678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	4619      	mov	r1, r3
 8001680:	2304      	movs	r3, #4
 8001682:	2201      	movs	r2, #1
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f001 fe5f 	bl	8003348 <HAL_I2C_Slave_Seq_Transmit_IT>

}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200002d4 	.word	0x200002d4
 8001698:	200002e8 	.word	0x200002e8
 800169c:	200002e0 	.word	0x200002e0

080016a0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef *hi2c) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

	RxCount++;
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80016b2:	701a      	strb	r2, [r3, #0]

	if ( RxCount < RxSize ) {
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d818      	bhi.n	80016ee <HAL_I2C_SlaveRxCpltCallback+0x4e>

		if (RxCount == RxSize - 1) {
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d10a      	bne.n	80016da <HAL_I2C_SlaveRxCpltCallback+0x3a>
			HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_LAST_FRAME);
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80016cc:	18d1      	adds	r1, r2, r3
 80016ce:	2320      	movs	r3, #32
 80016d0:	2201      	movs	r2, #1
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f001 feab 	bl	800342e <HAL_I2C_Slave_Seq_Receive_IT>
 80016d8:	e009      	b.n	80016ee <HAL_I2C_SlaveRxCpltCallback+0x4e>
		} else {
			HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_NEXT_FRAME);
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80016e2:	18d1      	adds	r1, r2, r3
 80016e4:	2304      	movs	r3, #4
 80016e6:	2201      	movs	r2, #1
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f001 fea0 	bl	800342e <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if ( RxCount == RxSize) {
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d101      	bne.n	80016fa <HAL_I2C_SlaveRxCpltCallback+0x5a>
		ProcessData();
 80016f6:	f000 f82f 	bl	8001758 <ProcessData>
	}

}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200002d5 	.word	0x200002d5
 8001708:	200002d8 	.word	0x200002d8

0800170c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback (I2C_HandleTypeDef *hi2c) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

	if ( HAL_I2C_GetError (hi2c) == 4) {
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f002 f957 	bl	80039c8 <HAL_I2C_GetError>
 800171a:	4603      	mov	r3, r0
 800171c:	2b04      	cmp	r3, #4
 800171e:	d111      	bne.n	8001744 <HAL_I2C_ErrorCallback+0x38>

		__HAL_I2C_CLEAR_FLAG (hi2c, I2C_FLAG_AF); 	// Clear AF flag
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001728:	615a      	str	r2, [r3, #20]

		if ( TxCount == 0) { 						// Error while recieving
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_I2C_ErrorCallback+0x48>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d102      	bne.n	8001738 <HAL_I2C_ErrorCallback+0x2c>
			ProcessData();
 8001732:	f000 f811 	bl	8001758 <ProcessData>
 8001736:	e005      	b.n	8001744 <HAL_I2C_ErrorCallback+0x38>
		} else { 									// Error while transmitting
			TxCount--;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_I2C_ErrorCallback+0x48>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	3b01      	subs	r3, #1
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <HAL_I2C_ErrorCallback+0x48>)
 8001742:	701a      	strb	r2, [r3, #0]
		}

	}

	HAL_I2C_EnableListen_IT(hi2c);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f001 fee5 	bl	8003514 <HAL_I2C_EnableListen_IT>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200002d4 	.word	0x200002d4

08001758 <ProcessData>:

void ProcessData (void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0

	StartReg = RxData[0]; 			// Start address of registers to be written
 800175e:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <ProcessData+0x9c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <ProcessData+0xa0>)
 8001766:	601a      	str	r2, [r3, #0]
	NumReg = RxCount - 1; 			// Number of registers to be written
 8001768:	4b24      	ldr	r3, [pc, #144]	; (80017fc <ProcessData+0xa4>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	3b01      	subs	r3, #1
 800176e:	4a24      	ldr	r2, [pc, #144]	; (8001800 <ProcessData+0xa8>)
 8001770:	6013      	str	r3, [r2, #0]
	EndReg = StartReg + NumReg - 1; // Last register to be written
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <ProcessData+0xa0>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <ProcessData+0xa8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	3b01      	subs	r3, #1
 800177e:	4a21      	ldr	r2, [pc, #132]	; (8001804 <ProcessData+0xac>)
 8001780:	6013      	str	r3, [r2, #0]

	// If the last register to be wriiten is larger than the size of the register call the error handler
	if (EndReg > RxSize) {
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <ProcessData+0xac>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b06      	cmp	r3, #6
 8001788:	dd01      	ble.n	800178e <ProcessData+0x36>
		Error_Handler();
 800178a:	f000 f8c3 	bl	8001914 <Error_Handler>
	}

	// Write data into the register using a for loop
	for (int i = 1; i < NumReg + 1; i++) {
 800178e:	2301      	movs	r3, #1
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	e00f      	b.n	80017b4 <ProcessData+0x5c>
		Registers[StartReg++] = RxData[i + 1];
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <ProcessData+0x9c>)
 800179a:	5cd0      	ldrb	r0, [r2, r3]
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <ProcessData+0xa0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	4915      	ldr	r1, [pc, #84]	; (80017f8 <ProcessData+0xa0>)
 80017a4:	600a      	str	r2, [r1, #0]
 80017a6:	b281      	uxth	r1, r0
 80017a8:	4a17      	ldr	r2, [pc, #92]	; (8001808 <ProcessData+0xb0>)
 80017aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 1; i < NumReg + 1; i++) {
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3301      	adds	r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <ProcessData+0xa8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	ddea      	ble.n	8001794 <ProcessData+0x3c>
	}

	// If the PWM is higher than 0 but the motor is not turning then startup
	if ( Registers[PWMReg] > 0 && Registers[RPMReg] == 0) {
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <ProcessData+0xb0>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d008      	beq.n	80017d8 <ProcessData+0x80>
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <ProcessData+0xb0>)
 80017c8:	88db      	ldrh	r3, [r3, #6]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d104      	bne.n	80017d8 <ProcessData+0x80>
		StartupSequence(Registers[DirReg]);
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <ProcessData+0xb0>)
 80017d0:	885b      	ldrh	r3, [r3, #2]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fbb2 	bl	8000f3c <StartupSequence>
	}

	// If the PWM is 0 but the motor is still turning shutdown
	if ( Registers[PWMReg] == 0 && Registers[RPMReg] > 0 ) {
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <ProcessData+0xb0>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
		//StopSequence();
	}

	// Call some functions
	ChangePWM(); 				// Update PWM values
 80017de:	f7ff fccd 	bl	800117c <ChangePWM>
	memset(RxData, 0, RxSize); 	// Empty the RxData array
 80017e2:	2206      	movs	r2, #6
 80017e4:	2100      	movs	r1, #0
 80017e6:	4803      	ldr	r0, [pc, #12]	; (80017f4 <ProcessData+0x9c>)
 80017e8:	f006 fae3 	bl	8007db2 <memset>

}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200002d8 	.word	0x200002d8
 80017f8:	200002e8 	.word	0x200002e8
 80017fc:	200002d5 	.word	0x200002d5
 8001800:	200002ec 	.word	0x200002ec
 8001804:	200002f0 	.word	0x200002f0
 8001808:	200002e0 	.word	0x200002e0

0800180c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001810:	f000 fd74 	bl	80022fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001814:	f000 f814 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001818:	f7ff fda6 	bl	8001368 <MX_GPIO_Init>
  MX_TIM1_Init();
 800181c:	f000 fa5e 	bl	8001cdc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001820:	f000 fb16 	bl	8001e50 <MX_TIM2_Init>
  MX_TIM9_Init();
 8001824:	f000 fbb4 	bl	8001f90 <MX_TIM9_Init>
  MX_I2C1_Init();
 8001828:	f7ff fe22 	bl	8001470 <MX_I2C1_Init>
  MX_ADC1_Init();
 800182c:	f7ff fce2 	bl	80011f4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001830:	f000 fb58 	bl	8001ee4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_I2C_EnableListen_IT (&hi2c1);
 8001834:	4801      	ldr	r0, [pc, #4]	; (800183c <main+0x30>)
 8001836:	f001 fe6d 	bl	8003514 <HAL_I2C_EnableListen_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800183a:	e7fe      	b.n	800183a <main+0x2e>
 800183c:	200002f4 	.word	0x200002f4

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b094      	sub	sp, #80	; 0x50
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	2230      	movs	r2, #48	; 0x30
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f006 faaf 	bl	8007db2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <SystemClock_Config+0xcc>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a27      	ldr	r2, [pc, #156]	; (800190c <SystemClock_Config+0xcc>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
 8001874:	4b25      	ldr	r3, [pc, #148]	; (800190c <SystemClock_Config+0xcc>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <SystemClock_Config+0xd0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a21      	ldr	r2, [pc, #132]	; (8001910 <SystemClock_Config+0xd0>)
 800188a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <SystemClock_Config+0xd0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800189c:	2301      	movs	r3, #1
 800189e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a6:	2302      	movs	r3, #2
 80018a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80018b0:	2319      	movs	r3, #25
 80018b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80018b4:	23c0      	movs	r3, #192	; 0xc0
 80018b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018bc:	2304      	movs	r3, #4
 80018be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c0:	f107 0320 	add.w	r3, r7, #32
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 fae5 	bl	8004e94 <HAL_RCC_OscConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018d0:	f000 f820 	bl	8001914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d4:	230f      	movs	r3, #15
 80018d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d8:	2302      	movs	r3, #2
 80018da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2103      	movs	r1, #3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 fd46 	bl	8005384 <HAL_RCC_ClockConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018fe:	f000 f809 	bl	8001914 <Error_Handler>
  }
}
 8001902:	bf00      	nop
 8001904:	3750      	adds	r7, #80	; 0x50
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40007000 	.word	0x40007000

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191c:	e7fe      	b.n	800191c <Error_Handler+0x8>
	...

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a0f      	ldr	r2, [pc, #60]	; (800196c <HAL_MspInit+0x4c>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_MspInit+0x4c>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_MspInit+0x4c>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_MspInit+0x4c>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <NMI_Handler+0x4>

08001976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <HardFault_Handler+0x4>

0800197c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <MemManage_Handler+0x4>

08001982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <BusFault_Handler+0x4>

08001988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <UsageFault_Handler+0x4>

0800198e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019bc:	f000 fcf0 	bl	80023a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <ADC_IRQHandler+0x10>)
 80019ca:	f000 fd4c 	bl	8002466 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000028c 	.word	0x2000028c

080019d8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	if ( (TIM9->SR & TIM_SR_CC2IF) >= 1) { // If the CC2IF is set it means a input capture has happened
 80019dc:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <TIM1_BRK_TIM9_IRQHandler+0xac>)
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d038      	beq.n	8001a5a <TIM1_BRK_TIM9_IRQHandler+0x82>

		Total -= RPM[i];
 80019e8:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 80019ee:	7812      	ldrb	r2, [r2, #0]
 80019f0:	4611      	mov	r1, r2
 80019f2:	4a27      	ldr	r2, [pc, #156]	; (8001a90 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 80019f4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	4a23      	ldr	r2, [pc, #140]	; (8001a88 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 80019fc:	6013      	str	r3, [r2, #0]
		RPM[i] = RPMConst / (TIM9->CCR2);
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <TIM1_BRK_TIM9_IRQHandler+0xac>)
 8001a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a06:	fbb2 f1f3 	udiv	r1, r2, r3
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	b289      	uxth	r1, r1
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001a14:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Total += RPM[i];
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001a20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a16      	ldr	r2, [pc, #88]	; (8001a88 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 8001a2e:	6013      	str	r3, [r2, #0]

		i++;
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8001a3a:	701a      	strb	r2, [r3, #0]

		if ( i > AvgSize ) {
			i = 0;
		}

		Registers[RPMReg] = Total / AvgSize;
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001a46:	80da      	strh	r2, [r3, #6]

		//Registers[RPMReg] = RPMConst / (TIM9->CCR2);

		// If maximum RPM is exceeded -> shutdown
		if ( Registers[RPMReg] > MaximumRPM ) {
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001a4a:	88db      	ldrh	r3, [r3, #6]
 8001a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d90e      	bls.n	8001a72 <TIM1_BRK_TIM9_IRQHandler+0x9a>
			StopSequence();
 8001a54:	f7ff fb32 	bl	80010bc <StopSequence>
 8001a58:	e00b      	b.n	8001a72 <TIM1_BRK_TIM9_IRQHandler+0x9a>
		}
	} else {
		Registers[RPMReg] = 0; // If the CC2IF was not set it means the timer has overflowed and the motor is thus stationary
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	80da      	strh	r2, [r3, #6]
		Total = 0;
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
		memset(RPM, 0, AvgSize * 2);
 8001a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4808      	ldr	r0, [pc, #32]	; (8001a90 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001a6e:	f006 f9a0 	bl	8007db2 <memset>
	}


  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a72:	480a      	ldr	r0, [pc, #40]	; (8001a9c <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001a74:	f004 fac2 	bl	8005ffc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001a78:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <TIM1_BRK_TIM9_IRQHandler+0xc8>)
 8001a7a:	f004 fabf 	bl	8005ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40014000 	.word	0x40014000
 8001a88:	20000348 	.word	0x20000348
 8001a8c:	2000054c 	.word	0x2000054c
 8001a90:	2000034c 	.word	0x2000034c
 8001a94:	20000288 	.word	0x20000288
 8001a98:	200002e0 	.word	0x200002e0
 8001a9c:	20000554 	.word	0x20000554
 8001aa0:	2000062c 	.word	0x2000062c

08001aa4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	PrepareCommutation (Registers[DirReg]); // Set next Commutation states
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 8001aaa:	885b      	ldrh	r3, [r3, #2]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fa00 	bl	8000eb4 <PrepareCommutation>

	TIM1->SR &= ~TIM_SR_COMIF; 				// Reset COMIF in SR register
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001aba:	f023 0320 	bic.w	r3, r3, #32
 8001abe:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 8001ac2:	f004 fa9b 	bl	8005ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200002e0 	.word	0x200002e0
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	20000554 	.word	0x20000554

08001ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <TIM2_IRQHandler+0x20>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR
	TIM1->EGR |= TIM_EGR_COMG;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <TIM2_IRQHandler+0x24>)
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <TIM2_IRQHandler+0x24>)
 8001ae8:	f043 0320 	orr.w	r3, r3, #32
 8001aec:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aee:	4804      	ldr	r0, [pc, #16]	; (8001b00 <TIM2_IRQHandler+0x28>)
 8001af0:	f004 fa84 	bl	8005ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40014000 	.word	0x40014000
 8001afc:	40010000 	.word	0x40010000
 8001b00:	2000059c 	.word	0x2000059c

08001b04 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <I2C1_EV_IRQHandler+0x10>)
 8001b0a:	f001 fd39 	bl	8003580 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200002f4 	.word	0x200002f4

08001b18 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <I2C1_ER_IRQHandler+0x10>)
 8001b1e:	f001 fe82 	bl	8003826 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200002f4 	.word	0x200002f4

08001b2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return 1;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_kill>:

int _kill(int pid, int sig)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b46:	f006 f987 	bl	8007e58 <__errno>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2216      	movs	r2, #22
 8001b4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <_exit>:

void _exit (int status)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ffe7 	bl	8001b3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b6e:	e7fe      	b.n	8001b6e <_exit+0x12>

08001b70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e00a      	b.n	8001b98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b82:	f3af 8000 	nop.w
 8001b86:	4601      	mov	r1, r0
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	60ba      	str	r2, [r7, #8]
 8001b8e:	b2ca      	uxtb	r2, r1
 8001b90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	dbf0      	blt.n	8001b82 <_read+0x12>
  }

  return len;
 8001ba0:	687b      	ldr	r3, [r7, #4]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e009      	b.n	8001bd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	60ba      	str	r2, [r7, #8]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf1      	blt.n	8001bbc <_write+0x12>
  }
  return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_close>:

int _close(int file)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <_isatty>:

int _isatty(int file)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f006 f8ec 	bl	8007e58 <__errno>
 8001c80:	4603      	mov	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <_sbrk+0x64>)
 8001c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20020000 	.word	0x20020000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	20000550 	.word	0x20000550
 8001cb4:	200007c8 	.word	0x200007c8

08001cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <SystemInit+0x20>)
 8001cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <SystemInit+0x20>)
 8001cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b096      	sub	sp, #88	; 0x58
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ce2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfc:	f107 0320 	add.w	r3, r7, #32
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
 8001d0c:	615a      	str	r2, [r3, #20]
 8001d0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d10:	463b      	mov	r3, r7
 8001d12:	2220      	movs	r2, #32
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f006 f84b 	bl	8007db2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d1c:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001d1e:	4a4b      	ldr	r2, [pc, #300]	; (8001e4c <MX_TIM1_Init+0x170>)
 8001d20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d22:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d28:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 8001d2e:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001d30:	f240 727f 	movw	r2, #1919	; 0x77f
 8001d34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d36:	4b44      	ldr	r3, [pc, #272]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d3c:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d42:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d48:	483f      	ldr	r0, [pc, #252]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001d4a:	f003 fcfb 	bl	8005744 <HAL_TIM_Base_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001d54:	f7ff fdde 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d58:	483b      	ldr	r0, [pc, #236]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001d5a:	f003 fdd4 	bl	8005906 <HAL_TIM_PWM_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001d64:	f7ff fdd6 	bl	8001914 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001d70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d74:	4619      	mov	r1, r3
 8001d76:	4834      	ldr	r0, [pc, #208]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001d78:	f004 fba6 	bl	80064c8 <HAL_TIM_SlaveConfigSynchro>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001d82:	f7ff fdc7 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d92:	4619      	mov	r1, r3
 8001d94:	482c      	ldr	r0, [pc, #176]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001d96:	f005 f9cd 	bl	8007134 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001da0:	f7ff fdb8 	bl	8001914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da4:	2360      	movs	r3, #96	; 0x60
 8001da6:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dac:	2300      	movs	r3, #0
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc0:	f107 0320 	add.w	r3, r7, #32
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	481f      	ldr	r0, [pc, #124]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001dca:	f004 fabb 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001dd4:	f7ff fd9e 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dd8:	f107 0320 	add.w	r3, r7, #32
 8001ddc:	2204      	movs	r2, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4819      	ldr	r0, [pc, #100]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001de2:	f004 faaf 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001dec:	f7ff fd92 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001df0:	f107 0320 	add.w	r3, r7, #32
 8001df4:	2208      	movs	r2, #8
 8001df6:	4619      	mov	r1, r3
 8001df8:	4813      	ldr	r0, [pc, #76]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001dfa:	f004 faa3 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001e04:	f7ff fd86 	bl	8001914 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e26:	463b      	mov	r3, r7
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4807      	ldr	r0, [pc, #28]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001e2c:	f005 f9f0 	bl	8007210 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8001e36:	f7ff fd6d 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e3a:	4803      	ldr	r0, [pc, #12]	; (8001e48 <MX_TIM1_Init+0x16c>)
 8001e3c:	f000 f9d8 	bl	80021f0 <HAL_TIM_MspPostInit>

}
 8001e40:	bf00      	nop
 8001e42:	3758      	adds	r7, #88	; 0x58
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000554 	.word	0x20000554
 8001e4c:	40010000 	.word	0x40010000

08001e50 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001e56:	f107 0308 	add.w	r3, r7, #8
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e64:	463b      	mov	r3, r7
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <MX_TIM2_Init+0x90>)
 8001e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <MX_TIM2_Init+0x90>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <MX_TIM2_Init+0x90>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <MX_TIM2_Init+0x90>)
 8001e82:	f04f 32ff 	mov.w	r2, #4294967295
 8001e86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <MX_TIM2_Init+0x90>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <MX_TIM2_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001ea4:	f107 0308 	add.w	r3, r7, #8
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <MX_TIM2_Init+0x90>)
 8001eac:	f004 ffe0 	bl	8006e70 <HAL_TIMEx_HallSensor_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001eb6:	f7ff fd2d 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001eba:	2350      	movs	r3, #80	; 0x50
 8001ebc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ec2:	463b      	mov	r3, r7
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <MX_TIM2_Init+0x90>)
 8001ec8:	f005 f934 	bl	8007134 <HAL_TIMEx_MasterConfigSynchronization>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001ed2:	f7ff fd1f 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000059c 	.word	0x2000059c

08001ee4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]
 8001f02:	615a      	str	r2, [r3, #20]
 8001f04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <MX_TIM3_Init+0xa4>)
 8001f08:	4a20      	ldr	r2, [pc, #128]	; (8001f8c <MX_TIM3_Init+0xa8>)
 8001f0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <MX_TIM3_Init+0xa4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f12:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <MX_TIM3_Init+0xa4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 959;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <MX_TIM3_Init+0xa4>)
 8001f1a:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001f1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <MX_TIM3_Init+0xa4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f26:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <MX_TIM3_Init+0xa4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f2c:	4816      	ldr	r0, [pc, #88]	; (8001f88 <MX_TIM3_Init+0xa4>)
 8001f2e:	f003 fcea 	bl	8005906 <HAL_TIM_PWM_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001f38:	f7ff fcec 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f3c:	2320      	movs	r3, #32
 8001f3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f44:	f107 0320 	add.w	r3, r7, #32
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480f      	ldr	r0, [pc, #60]	; (8001f88 <MX_TIM3_Init+0xa4>)
 8001f4c:	f005 f8f2 	bl	8007134 <HAL_TIMEx_MasterConfigSynchronization>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001f56:	f7ff fcdd 	bl	8001914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f5a:	2360      	movs	r3, #96	; 0x60
 8001f5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_TIM3_Init+0xa4>)
 8001f72:	f004 f9e7 	bl	8006344 <HAL_TIM_PWM_ConfigChannel>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001f7c:	f7ff fcca 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	3728      	adds	r7, #40	; 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200005e4 	.word	0x200005e4
 8001f8c:	40000400 	.word	0x40000400

08001f90 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f96:	463b      	mov	r3, r7
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <MX_TIM9_Init+0x78>)
 8001fa4:	4a19      	ldr	r2, [pc, #100]	; (800200c <MX_TIM9_Init+0x7c>)
 8001fa6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1499;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <MX_TIM9_Init+0x78>)
 8001faa:	f240 52db 	movw	r2, #1499	; 0x5db
 8001fae:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb0:	4b15      	ldr	r3, [pc, #84]	; (8002008 <MX_TIM9_Init+0x78>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 63999;
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <MX_TIM9_Init+0x78>)
 8001fb8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001fbc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <MX_TIM9_Init+0x78>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc4:	4b10      	ldr	r3, [pc, #64]	; (8002008 <MX_TIM9_Init+0x78>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8001fca:	480f      	ldr	r0, [pc, #60]	; (8002008 <MX_TIM9_Init+0x78>)
 8001fcc:	f003 fdfe 	bl	8005bcc <HAL_TIM_IC_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001fd6:	f7ff fc9d 	bl	8001914 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001fea:	463b      	mov	r3, r7
 8001fec:	2204      	movs	r2, #4
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_TIM9_Init+0x78>)
 8001ff2:	f004 f90b 	bl	800620c <HAL_TIM_IC_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 8001ffc:	f7ff fc8a 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002000:	bf00      	nop
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	2000062c 	.word	0x2000062c
 800200c:	40014000 	.word	0x40014000

08002010 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a12      	ldr	r2, [pc, #72]	; (8002068 <HAL_TIM_Base_MspInit+0x58>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d11d      	bne.n	800205e <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_TIM_Base_MspInit+0x5c>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a10      	ldr	r2, [pc, #64]	; (800206c <HAL_TIM_Base_MspInit+0x5c>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_TIM_Base_MspInit+0x5c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	2018      	movs	r0, #24
 8002044:	f000 fe51 	bl	8002cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002048:	2018      	movs	r0, #24
 800204a:	f000 fe6a 	bl	8002d22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	201a      	movs	r0, #26
 8002054:	f000 fe49 	bl	8002cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002058:	201a      	movs	r0, #26
 800205a:	f000 fe62 	bl	8002d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40010000 	.word	0x40010000
 800206c:	40023800 	.word	0x40023800

08002070 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002090:	d133      	bne.n	80020fa <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b14      	ldr	r3, [pc, #80]	; (8002104 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a13      	ldr	r2, [pc, #76]	; (8002104 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80020ca:	2307      	movs	r3, #7
 80020cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d2:	2301      	movs	r3, #1
 80020d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020da:	2301      	movs	r3, #1
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	4808      	ldr	r0, [pc, #32]	; (8002108 <HAL_TIMEx_HallSensor_MspInit+0x98>)
 80020e6:	f000 fe67 	bl	8002db8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	201c      	movs	r0, #28
 80020f0:	f000 fdfb 	bl	8002cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020f4:	201c      	movs	r0, #28
 80020f6:	f000 fe14 	bl	8002d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020fa:	bf00      	nop
 80020fc:	3728      	adds	r7, #40	; 0x28
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800
 8002108:	40020000 	.word	0x40020000

0800210c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <HAL_TIM_PWM_MspInit+0x3c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10d      	bne.n	800213a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_TIM_PWM_MspInit+0x40>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_TIM_PWM_MspInit+0x40>)
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <HAL_TIM_PWM_MspInit+0x40>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40000400 	.word	0x40000400
 800214c:	40023800 	.word	0x40023800

08002150 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM9)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <HAL_TIM_IC_MspInit+0x94>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d133      	bne.n	80021da <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_TIM_IC_MspInit+0x98>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_TIM_IC_MspInit+0x98>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	6453      	str	r3, [r2, #68]	; 0x44
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_TIM_IC_MspInit+0x98>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_TIM_IC_MspInit+0x98>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <HAL_TIM_IC_MspInit+0x98>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_TIM_IC_MspInit+0x98>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PA3     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021aa:	2308      	movs	r3, #8
 80021ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b2:	2301      	movs	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80021ba:	2303      	movs	r3, #3
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	4619      	mov	r1, r3
 80021c4:	4809      	ldr	r0, [pc, #36]	; (80021ec <HAL_TIM_IC_MspInit+0x9c>)
 80021c6:	f000 fdf7 	bl	8002db8 <HAL_GPIO_Init>

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	2018      	movs	r0, #24
 80021d0:	f000 fd8b 	bl	8002cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80021d4:	2018      	movs	r0, #24
 80021d6:	f000 fda4 	bl	8002d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80021da:	bf00      	nop
 80021dc:	3728      	adds	r7, #40	; 0x28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40014000 	.word	0x40014000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020000 	.word	0x40020000

080021f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a22      	ldr	r2, [pc, #136]	; (8002298 <HAL_TIM_MspPostInit+0xa8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d13d      	bne.n	800228e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b21      	ldr	r3, [pc, #132]	; (800229c <HAL_TIM_MspPostInit+0xac>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a20      	ldr	r2, [pc, #128]	; (800229c <HAL_TIM_MspPostInit+0xac>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_TIM_MspPostInit+0xac>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_TIM_MspPostInit+0xac>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a19      	ldr	r2, [pc, #100]	; (800229c <HAL_TIM_MspPostInit+0xac>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_TIM_MspPostInit+0xac>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800224a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800224e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800225c:	2301      	movs	r3, #1
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	480e      	ldr	r0, [pc, #56]	; (80022a0 <HAL_TIM_MspPostInit+0xb0>)
 8002268:	f000 fda6 	bl	8002db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800226c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800227e:	2301      	movs	r3, #1
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4806      	ldr	r0, [pc, #24]	; (80022a4 <HAL_TIM_MspPostInit+0xb4>)
 800228a:	f000 fd95 	bl	8002db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	; 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40010000 	.word	0x40010000
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020400 	.word	0x40020400
 80022a4:	40020000 	.word	0x40020000

080022a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022ac:	480d      	ldr	r0, [pc, #52]	; (80022e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ae:	490e      	ldr	r1, [pc, #56]	; (80022e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022b0:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b4:	e002      	b.n	80022bc <LoopCopyDataInit>

080022b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ba:	3304      	adds	r3, #4

080022bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c0:	d3f9      	bcc.n	80022b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022c4:	4c0b      	ldr	r4, [pc, #44]	; (80022f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c8:	e001      	b.n	80022ce <LoopFillZerobss>

080022ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022cc:	3204      	adds	r2, #4

080022ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d0:	d3fb      	bcc.n	80022ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022d2:	f7ff fcf1 	bl	8001cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d6:	f005 fdc5 	bl	8007e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022da:	f7ff fa97 	bl	800180c <main>
  bx  lr    
 80022de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e8:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 80022ec:	0800a00c 	.word	0x0800a00c
  ldr r2, =_sbss
 80022f0:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 80022f4:	200007c4 	.word	0x200007c4

080022f8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <DMA1_Stream0_IRQHandler>
	...

080022fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_Init+0x40>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_Init+0x40>)
 8002312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_Init+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_Init+0x40>)
 800231e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 fcd5 	bl	8002cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	200f      	movs	r0, #15
 800232c:	f000 f808 	bl	8002340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7ff faf6 	bl	8001920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_InitTick+0x54>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_InitTick+0x58>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002356:	fbb3 f3f1 	udiv	r3, r3, r1
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fced 	bl	8002d3e <HAL_SYSTICK_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00e      	b.n	800238c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0f      	cmp	r3, #15
 8002372:	d80a      	bhi.n	800238a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002374:	2200      	movs	r2, #0
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f000 fcb5 	bl	8002cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <HAL_InitTick+0x5c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000090 	.word	0x20000090
 8002398:	20000098 	.word	0x20000098
 800239c:	20000094 	.word	0x20000094

080023a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_IncTick+0x20>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_IncTick+0x24>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_IncTick+0x24>)
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000098 	.word	0x20000098
 80023c4:	20000674 	.word	0x20000674

080023c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_GetTick+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000674 	.word	0x20000674

080023e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e033      	b.n	800245e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe ff4a 	bl	8001298 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b00      	cmp	r3, #0
 800241c:	d118      	bne.n	8002450 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002426:	f023 0302 	bic.w	r3, r3, #2
 800242a:	f043 0202 	orr.w	r2, r3, #2
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fa78 	bl	8002928 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f023 0303 	bic.w	r3, r3, #3
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
 800244e:	e001      	b.n	8002454 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d049      	beq.n	8002530 <HAL_ADC_IRQHandler+0xca>
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d046      	beq.n	8002530 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d105      	bne.n	80024ba <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d12b      	bne.n	8002520 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d127      	bne.n	8002520 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d119      	bne.n	8002520 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0220 	bic.w	r2, r2, #32
 80024fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d105      	bne.n	8002520 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f043 0201 	orr.w	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f8b0 	bl	8002686 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f06f 0212 	mvn.w	r2, #18
 800252e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d057      	beq.n	80025f6 <HAL_ADC_IRQHandler+0x190>
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d054      	beq.n	80025f6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d139      	bne.n	80025e6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800258a:	2b00      	cmp	r3, #0
 800258c:	d12b      	bne.n	80025e6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002598:	2b00      	cmp	r3, #0
 800259a:	d124      	bne.n	80025e6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d11d      	bne.n	80025e6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d119      	bne.n	80025e6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fa9a 	bl	8002b20 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 020c 	mvn.w	r2, #12
 80025f4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002604:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d017      	beq.n	800263c <HAL_ADC_IRQHandler+0x1d6>
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d014      	beq.n	800263c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d10d      	bne.n	800263c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f834 	bl	800269a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f06f 0201 	mvn.w	r2, #1
 800263a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800264a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d015      	beq.n	800267e <HAL_ADC_IRQHandler+0x218>
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d012      	beq.n	800267e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	f043 0202 	orr.w	r2, r3, #2
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0220 	mvn.w	r2, #32
 800266c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f81d 	bl	80026ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0220 	mvn.w	r2, #32
 800267c:	601a      	str	r2, [r3, #0]
  }
}
 800267e:	bf00      	nop
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x1c>
 80026dc:	2302      	movs	r3, #2
 80026de:	e113      	b.n	8002908 <HAL_ADC_ConfigChannel+0x244>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	d925      	bls.n	800273c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68d9      	ldr	r1, [r3, #12]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	3b1e      	subs	r3, #30
 8002706:	2207      	movs	r2, #7
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43da      	mvns	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	400a      	ands	r2, r1
 8002714:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68d9      	ldr	r1, [r3, #12]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	b29b      	uxth	r3, r3
 8002726:	4618      	mov	r0, r3
 8002728:	4603      	mov	r3, r0
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4403      	add	r3, r0
 800272e:	3b1e      	subs	r3, #30
 8002730:	409a      	lsls	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	e022      	b.n	8002782 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6919      	ldr	r1, [r3, #16]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	4613      	mov	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	2207      	movs	r2, #7
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	400a      	ands	r2, r1
 800275e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6919      	ldr	r1, [r3, #16]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	4618      	mov	r0, r3
 8002772:	4603      	mov	r3, r0
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4403      	add	r3, r0
 8002778:	409a      	lsls	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b06      	cmp	r3, #6
 8002788:	d824      	bhi.n	80027d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	3b05      	subs	r3, #5
 800279c:	221f      	movs	r2, #31
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43da      	mvns	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	400a      	ands	r2, r1
 80027aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4618      	mov	r0, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	3b05      	subs	r3, #5
 80027c6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	635a      	str	r2, [r3, #52]	; 0x34
 80027d2:	e04c      	b.n	800286e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d824      	bhi.n	8002826 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	3b23      	subs	r3, #35	; 0x23
 80027ee:	221f      	movs	r2, #31
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43da      	mvns	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	400a      	ands	r2, r1
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4618      	mov	r0, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	3b23      	subs	r3, #35	; 0x23
 8002818:	fa00 f203 	lsl.w	r2, r0, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
 8002824:	e023      	b.n	800286e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	3b41      	subs	r3, #65	; 0x41
 8002838:	221f      	movs	r2, #31
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	400a      	ands	r2, r1
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	4618      	mov	r0, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	3b41      	subs	r3, #65	; 0x41
 8002862:	fa00 f203 	lsl.w	r2, r0, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800286e:	4b29      	ldr	r3, [pc, #164]	; (8002914 <HAL_ADC_ConfigChannel+0x250>)
 8002870:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a28      	ldr	r2, [pc, #160]	; (8002918 <HAL_ADC_ConfigChannel+0x254>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d10f      	bne.n	800289c <HAL_ADC_ConfigChannel+0x1d8>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b12      	cmp	r3, #18
 8002882:	d10b      	bne.n	800289c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <HAL_ADC_ConfigChannel+0x254>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d12b      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x23a>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a1c      	ldr	r2, [pc, #112]	; (800291c <HAL_ADC_ConfigChannel+0x258>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d003      	beq.n	80028b8 <HAL_ADC_ConfigChannel+0x1f4>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b11      	cmp	r3, #17
 80028b6:	d122      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a11      	ldr	r2, [pc, #68]	; (800291c <HAL_ADC_ConfigChannel+0x258>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d111      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_ADC_ConfigChannel+0x25c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a11      	ldr	r2, [pc, #68]	; (8002924 <HAL_ADC_ConfigChannel+0x260>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	0c9a      	lsrs	r2, r3, #18
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028f0:	e002      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	3b01      	subs	r3, #1
 80028f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f9      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40012300 	.word	0x40012300
 8002918:	40012000 	.word	0x40012000
 800291c:	10000012 	.word	0x10000012
 8002920:	20000090 	.word	0x20000090
 8002924:	431bde83 	.word	0x431bde83

08002928 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002930:	4b79      	ldr	r3, [pc, #484]	; (8002b18 <ADC_Init+0x1f0>)
 8002932:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	431a      	orrs	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800295c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	021a      	lsls	r2, r3, #8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002980:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6859      	ldr	r1, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6899      	ldr	r1, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	4a58      	ldr	r2, [pc, #352]	; (8002b1c <ADC_Init+0x1f4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d022      	beq.n	8002a06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6899      	ldr	r1, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6899      	ldr	r1, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	e00f      	b.n	8002a26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0202 	bic.w	r2, r2, #2
 8002a34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6899      	ldr	r1, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	7e1b      	ldrb	r3, [r3, #24]
 8002a40:	005a      	lsls	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01b      	beq.n	8002a8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6859      	ldr	r1, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	035a      	lsls	r2, r3, #13
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	e007      	b.n	8002a9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	051a      	lsls	r2, r3, #20
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ad0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6899      	ldr	r1, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ade:	025a      	lsls	r2, r3, #9
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6899      	ldr	r1, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	029a      	lsls	r2, r3, #10
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	609a      	str	r2, [r3, #8]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40012300 	.word	0x40012300
 8002b1c:	0f000001 	.word	0x0f000001

08002b20 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <__NVIC_SetPriorityGrouping+0x44>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b50:	4013      	ands	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b66:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <__NVIC_SetPriorityGrouping+0x44>)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	60d3      	str	r3, [r2, #12]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <__NVIC_GetPriorityGrouping+0x18>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	0a1b      	lsrs	r3, r3, #8
 8002b86:	f003 0307 	and.w	r3, r3, #7
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	db0b      	blt.n	8002bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	f003 021f 	and.w	r2, r3, #31
 8002bb0:	4907      	ldr	r1, [pc, #28]	; (8002bd0 <__NVIC_EnableIRQ+0x38>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	2001      	movs	r0, #1
 8002bba:	fa00 f202 	lsl.w	r2, r0, r2
 8002bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	e000e100 	.word	0xe000e100

08002bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	6039      	str	r1, [r7, #0]
 8002bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	db0a      	blt.n	8002bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	490c      	ldr	r1, [pc, #48]	; (8002c20 <__NVIC_SetPriority+0x4c>)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	0112      	lsls	r2, r2, #4
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bfc:	e00a      	b.n	8002c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4908      	ldr	r1, [pc, #32]	; (8002c24 <__NVIC_SetPriority+0x50>)
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	3b04      	subs	r3, #4
 8002c0c:	0112      	lsls	r2, r2, #4
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	440b      	add	r3, r1
 8002c12:	761a      	strb	r2, [r3, #24]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000e100 	.word	0xe000e100
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b089      	sub	sp, #36	; 0x24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f1c3 0307 	rsb	r3, r3, #7
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	bf28      	it	cs
 8002c46:	2304      	movcs	r3, #4
 8002c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d902      	bls.n	8002c58 <NVIC_EncodePriority+0x30>
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3b03      	subs	r3, #3
 8002c56:	e000      	b.n	8002c5a <NVIC_EncodePriority+0x32>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43da      	mvns	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c70:	f04f 31ff 	mov.w	r1, #4294967295
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	43d9      	mvns	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	4313      	orrs	r3, r2
         );
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3724      	adds	r7, #36	; 0x24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca0:	d301      	bcc.n	8002ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e00f      	b.n	8002cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <SysTick_Config+0x40>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cae:	210f      	movs	r1, #15
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	f7ff ff8e 	bl	8002bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <SysTick_Config+0x40>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cbe:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <SysTick_Config+0x40>)
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	e000e010 	.word	0xe000e010

08002cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff ff29 	bl	8002b34 <__NVIC_SetPriorityGrouping>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cfc:	f7ff ff3e 	bl	8002b7c <__NVIC_GetPriorityGrouping>
 8002d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	6978      	ldr	r0, [r7, #20]
 8002d08:	f7ff ff8e 	bl	8002c28 <NVIC_EncodePriority>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff5d 	bl	8002bd4 <__NVIC_SetPriority>
}
 8002d1a:	bf00      	nop
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	4603      	mov	r3, r0
 8002d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff31 	bl	8002b98 <__NVIC_EnableIRQ>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff ffa2 	bl	8002c90 <SysTick_Config>
 8002d4c:	4603      	mov	r3, r0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d004      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2280      	movs	r2, #128	; 0x80
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e00c      	b.n	8002d8e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2205      	movs	r2, #5
 8002d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0201 	bic.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da8:	b2db      	uxtb	r3, r3
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	e159      	b.n	8003088 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	f040 8148 	bne.w	8003082 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d005      	beq.n	8002e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d130      	bne.n	8002e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	2203      	movs	r2, #3
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e40:	2201      	movs	r2, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 0201 	and.w	r2, r3, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d017      	beq.n	8002ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2203      	movs	r2, #3
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d123      	bne.n	8002efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	08da      	lsrs	r2, r3, #3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3208      	adds	r2, #8
 8002ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	220f      	movs	r2, #15
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	08da      	lsrs	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3208      	adds	r2, #8
 8002ef6:	69b9      	ldr	r1, [r7, #24]
 8002ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	2203      	movs	r2, #3
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0203 	and.w	r2, r3, #3
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80a2 	beq.w	8003082 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	4b57      	ldr	r3, [pc, #348]	; (80030a0 <HAL_GPIO_Init+0x2e8>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	4a56      	ldr	r2, [pc, #344]	; (80030a0 <HAL_GPIO_Init+0x2e8>)
 8002f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4e:	4b54      	ldr	r3, [pc, #336]	; (80030a0 <HAL_GPIO_Init+0x2e8>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f5a:	4a52      	ldr	r2, [pc, #328]	; (80030a4 <HAL_GPIO_Init+0x2ec>)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	3302      	adds	r3, #2
 8002f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	220f      	movs	r2, #15
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a49      	ldr	r2, [pc, #292]	; (80030a8 <HAL_GPIO_Init+0x2f0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d019      	beq.n	8002fba <HAL_GPIO_Init+0x202>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a48      	ldr	r2, [pc, #288]	; (80030ac <HAL_GPIO_Init+0x2f4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_GPIO_Init+0x1fe>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a47      	ldr	r2, [pc, #284]	; (80030b0 <HAL_GPIO_Init+0x2f8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00d      	beq.n	8002fb2 <HAL_GPIO_Init+0x1fa>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a46      	ldr	r2, [pc, #280]	; (80030b4 <HAL_GPIO_Init+0x2fc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d007      	beq.n	8002fae <HAL_GPIO_Init+0x1f6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a45      	ldr	r2, [pc, #276]	; (80030b8 <HAL_GPIO_Init+0x300>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_GPIO_Init+0x1f2>
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	e008      	b.n	8002fbc <HAL_GPIO_Init+0x204>
 8002faa:	2307      	movs	r3, #7
 8002fac:	e006      	b.n	8002fbc <HAL_GPIO_Init+0x204>
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e004      	b.n	8002fbc <HAL_GPIO_Init+0x204>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e002      	b.n	8002fbc <HAL_GPIO_Init+0x204>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_GPIO_Init+0x204>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	f002 0203 	and.w	r2, r2, #3
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	4093      	lsls	r3, r2
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fcc:	4935      	ldr	r1, [pc, #212]	; (80030a4 <HAL_GPIO_Init+0x2ec>)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fda:	4b38      	ldr	r3, [pc, #224]	; (80030bc <HAL_GPIO_Init+0x304>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ffe:	4a2f      	ldr	r2, [pc, #188]	; (80030bc <HAL_GPIO_Init+0x304>)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003004:	4b2d      	ldr	r3, [pc, #180]	; (80030bc <HAL_GPIO_Init+0x304>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003028:	4a24      	ldr	r2, [pc, #144]	; (80030bc <HAL_GPIO_Init+0x304>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800302e:	4b23      	ldr	r3, [pc, #140]	; (80030bc <HAL_GPIO_Init+0x304>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003052:	4a1a      	ldr	r2, [pc, #104]	; (80030bc <HAL_GPIO_Init+0x304>)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003058:	4b18      	ldr	r3, [pc, #96]	; (80030bc <HAL_GPIO_Init+0x304>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800307c:	4a0f      	ldr	r2, [pc, #60]	; (80030bc <HAL_GPIO_Init+0x304>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3301      	adds	r3, #1
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b0f      	cmp	r3, #15
 800308c:	f67f aea2 	bls.w	8002dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3724      	adds	r7, #36	; 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40013800 	.word	0x40013800
 80030a8:	40020000 	.word	0x40020000
 80030ac:	40020400 	.word	0x40020400
 80030b0:	40020800 	.word	0x40020800
 80030b4:	40020c00 	.word	0x40020c00
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40013c00 	.word	0x40013c00

080030c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e12b      	b.n	800332a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fe f9f0 	bl	80014cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2224      	movs	r2, #36	; 0x24
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003112:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003122:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003124:	f002 fae6 	bl	80056f4 <HAL_RCC_GetPCLK1Freq>
 8003128:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4a81      	ldr	r2, [pc, #516]	; (8003334 <HAL_I2C_Init+0x274>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d807      	bhi.n	8003144 <HAL_I2C_Init+0x84>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a80      	ldr	r2, [pc, #512]	; (8003338 <HAL_I2C_Init+0x278>)
 8003138:	4293      	cmp	r3, r2
 800313a:	bf94      	ite	ls
 800313c:	2301      	movls	r3, #1
 800313e:	2300      	movhi	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	e006      	b.n	8003152 <HAL_I2C_Init+0x92>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a7d      	ldr	r2, [pc, #500]	; (800333c <HAL_I2C_Init+0x27c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	bf94      	ite	ls
 800314c:	2301      	movls	r3, #1
 800314e:	2300      	movhi	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0e7      	b.n	800332a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4a78      	ldr	r2, [pc, #480]	; (8003340 <HAL_I2C_Init+0x280>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	0c9b      	lsrs	r3, r3, #18
 8003164:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4a6a      	ldr	r2, [pc, #424]	; (8003334 <HAL_I2C_Init+0x274>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d802      	bhi.n	8003194 <HAL_I2C_Init+0xd4>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	3301      	adds	r3, #1
 8003192:	e009      	b.n	80031a8 <HAL_I2C_Init+0xe8>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	4a69      	ldr	r2, [pc, #420]	; (8003344 <HAL_I2C_Init+0x284>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	3301      	adds	r3, #1
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	495c      	ldr	r1, [pc, #368]	; (8003334 <HAL_I2C_Init+0x274>)
 80031c4:	428b      	cmp	r3, r1
 80031c6:	d819      	bhi.n	80031fc <HAL_I2C_Init+0x13c>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e59      	subs	r1, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d6:	1c59      	adds	r1, r3, #1
 80031d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031dc:	400b      	ands	r3, r1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_I2C_Init+0x138>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1e59      	subs	r1, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f0:	3301      	adds	r3, #1
 80031f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f6:	e051      	b.n	800329c <HAL_I2C_Init+0x1dc>
 80031f8:	2304      	movs	r3, #4
 80031fa:	e04f      	b.n	800329c <HAL_I2C_Init+0x1dc>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d111      	bne.n	8003228 <HAL_I2C_Init+0x168>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1e58      	subs	r0, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	440b      	add	r3, r1
 8003212:	fbb0 f3f3 	udiv	r3, r0, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e012      	b.n	800324e <HAL_I2C_Init+0x18e>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1e58      	subs	r0, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	0099      	lsls	r1, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	fbb0 f3f3 	udiv	r3, r0, r3
 800323e:	3301      	adds	r3, #1
 8003240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Init+0x196>
 8003252:	2301      	movs	r3, #1
 8003254:	e022      	b.n	800329c <HAL_I2C_Init+0x1dc>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10e      	bne.n	800327c <HAL_I2C_Init+0x1bc>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1e58      	subs	r0, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6859      	ldr	r1, [r3, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	440b      	add	r3, r1
 800326c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003270:	3301      	adds	r3, #1
 8003272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327a:	e00f      	b.n	800329c <HAL_I2C_Init+0x1dc>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1e58      	subs	r0, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	0099      	lsls	r1, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003292:	3301      	adds	r3, #1
 8003294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	6809      	ldr	r1, [r1, #0]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6911      	ldr	r1, [r2, #16]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68d2      	ldr	r2, [r2, #12]
 80032d6:	4311      	orrs	r1, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	430b      	orrs	r3, r1
 80032de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	000186a0 	.word	0x000186a0
 8003338:	001e847f 	.word	0x001e847f
 800333c:	003d08ff 	.word	0x003d08ff
 8003340:	431bde83 	.word	0x431bde83
 8003344:	10624dd3 	.word	0x10624dd3

08003348 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003364:	2b28      	cmp	r3, #40	; 0x28
 8003366:	d15b      	bne.n	8003420 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e054      	b.n	8003422 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8003382:	2302      	movs	r3, #2
 8003384:	e04d      	b.n	8003422 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d007      	beq.n	80033ac <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2229      	movs	r2, #41	; 0x29
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	88fa      	ldrh	r2, [r7, #6]
 80033dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800341a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800342e:	b480      	push	{r7}
 8003430:	b087      	sub	sp, #28
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800344a:	2b28      	cmp	r3, #40	; 0x28
 800344c:	d15b      	bne.n	8003506 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e054      	b.n	8003508 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8003468:	2302      	movs	r3, #2
 800346a:	e04d      	b.n	8003508 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d007      	beq.n	8003492 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	222a      	movs	r2, #42	; 0x2a
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	88fa      	ldrh	r2, [r7, #6]
 80034c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003500:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	e000      	b.n	8003508 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003506:	2302      	movs	r3, #2
  }
}
 8003508:	4618      	mov	r0, r3
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b20      	cmp	r3, #32
 8003526:	d124      	bne.n	8003572 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2228      	movs	r2, #40	; 0x28
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b01      	cmp	r3, #1
 800353c:	d007      	beq.n	800354e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800355c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800356c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	e000      	b.n	8003574 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003572:	2302      	movs	r3, #2
  }
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d003      	beq.n	80035b8 <HAL_I2C_EV_IRQHandler+0x38>
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	f040 80b1 	bne.w	800371a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <HAL_I2C_EV_IRQHandler+0x6e>
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80035d8:	d003      	beq.n	80035e2 <HAL_I2C_EV_IRQHandler+0x62>
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80035e0:	d101      	bne.n	80035e6 <HAL_I2C_EV_IRQHandler+0x66>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_I2C_EV_IRQHandler+0x68>
 80035e6:	2300      	movs	r3, #0
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	f000 8114 	beq.w	8003816 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <HAL_I2C_EV_IRQHandler+0x90>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f001 fc2a 	bl	8004e5c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fd34 	bl	8004076 <I2C_Master_SB>
 800360e:	e083      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_I2C_EV_IRQHandler+0xac>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fdac 	bl	8004182 <I2C_Master_ADD10>
 800362a:	e075      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_I2C_EV_IRQHandler+0xc8>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fdc8 	bl	80041d6 <I2C_Master_ADDR>
 8003646:	e067      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d036      	beq.n	80036c0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003660:	f000 80db 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <HAL_I2C_EV_IRQHandler+0x10a>
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_I2C_EV_IRQHandler+0x10a>
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	d103      	bne.n	800368a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f9ac 	bl	80039e0 <I2C_MasterTransmit_TXE>
 8003688:	e046      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80c2 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x29a>
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80bc 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80036a2:	7bbb      	ldrb	r3, [r7, #14]
 80036a4:	2b21      	cmp	r3, #33	; 0x21
 80036a6:	d103      	bne.n	80036b0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fa35 	bl	8003b18 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ae:	e0b4      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	f040 80b1 	bne.w	800381a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 faa3 	bl	8003c04 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036be:	e0ac      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ce:	f000 80a4 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <HAL_I2C_EV_IRQHandler+0x178>
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_I2C_EV_IRQHandler+0x178>
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d103      	bne.n	80036f8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fb1b 	bl	8003d2c <I2C_MasterReceive_RXNE>
 80036f6:	e00f      	b.n	8003718 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 808b 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x29a>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8085 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fbc6 	bl	8003ea2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003716:	e080      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x29a>
 8003718:	e07f      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	e007      	b.n	800373c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d011      	beq.n	800376a <HAL_I2C_EV_IRQHandler+0x1ea>
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00c      	beq.n	800376a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003760:	69b9      	ldr	r1, [r7, #24]
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 ff86 	bl	8004674 <I2C_Slave_ADDR>
 8003768:	e05a      	b.n	8003820 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_I2C_EV_IRQHandler+0x206>
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 ffc0 	bl	8004704 <I2C_Slave_STOPF>
 8003784:	e04c      	b.n	8003820 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003786:	7bbb      	ldrb	r3, [r7, #14]
 8003788:	2b21      	cmp	r3, #33	; 0x21
 800378a:	d002      	beq.n	8003792 <HAL_I2C_EV_IRQHandler+0x212>
 800378c:	7bbb      	ldrb	r3, [r7, #14]
 800378e:	2b29      	cmp	r3, #41	; 0x29
 8003790:	d120      	bne.n	80037d4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00d      	beq.n	80037b8 <HAL_I2C_EV_IRQHandler+0x238>
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <HAL_I2C_EV_IRQHandler+0x238>
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d103      	bne.n	80037b8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fea1 	bl	80044f8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037b6:	e032      	b.n	800381e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d02d      	beq.n	800381e <HAL_I2C_EV_IRQHandler+0x29e>
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d028      	beq.n	800381e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fed0 	bl	8004572 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037d2:	e024      	b.n	800381e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00d      	beq.n	80037fa <HAL_I2C_EV_IRQHandler+0x27a>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_I2C_EV_IRQHandler+0x27a>
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fede 	bl	80045b4 <I2C_SlaveReceive_RXNE>
 80037f8:	e012      	b.n	8003820 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00d      	beq.n	8003820 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 ff0e 	bl	8004630 <I2C_SlaveReceive_BTF>
 8003814:	e004      	b.n	8003820 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003816:	bf00      	nop
 8003818:	e002      	b.n	8003820 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800381a:	bf00      	nop
 800381c:	e000      	b.n	8003820 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800381e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b08a      	sub	sp, #40	; 0x28
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800383e:	2300      	movs	r3, #0
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003848:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00d      	beq.n	8003870 <HAL_I2C_ER_IRQHandler+0x4a>
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800386e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00d      	beq.n	8003896 <HAL_I2C_ER_IRQHandler+0x70>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	f043 0302 	orr.w	r3, r3, #2
 800388a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003894:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389c:	2b00      	cmp	r3, #0
 800389e:	d03e      	beq.n	800391e <HAL_I2C_ER_IRQHandler+0xf8>
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d039      	beq.n	800391e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80038aa:	7efb      	ldrb	r3, [r7, #27]
 80038ac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038bc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80038c4:	7ebb      	ldrb	r3, [r7, #26]
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d112      	bne.n	80038f0 <HAL_I2C_ER_IRQHandler+0xca>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10f      	bne.n	80038f0 <HAL_I2C_ER_IRQHandler+0xca>
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	2b21      	cmp	r3, #33	; 0x21
 80038d4:	d008      	beq.n	80038e8 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	2b29      	cmp	r3, #41	; 0x29
 80038da:	d005      	beq.n	80038e8 <HAL_I2C_ER_IRQHandler+0xc2>
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	2b28      	cmp	r3, #40	; 0x28
 80038e0:	d106      	bne.n	80038f0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b21      	cmp	r3, #33	; 0x21
 80038e6:	d103      	bne.n	80038f0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f001 f83b 	bl	8004964 <I2C_Slave_AF>
 80038ee:	e016      	b.n	800391e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038f8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	f043 0304 	orr.w	r3, r3, #4
 8003900:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003902:	7efb      	ldrb	r3, [r7, #27]
 8003904:	2b10      	cmp	r3, #16
 8003906:	d002      	beq.n	800390e <HAL_I2C_ER_IRQHandler+0xe8>
 8003908:	7efb      	ldrb	r3, [r7, #27]
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d107      	bne.n	800391e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00d      	beq.n	8003944 <HAL_I2C_ER_IRQHandler+0x11e>
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	f043 0308 	orr.w	r3, r3, #8
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003942:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f001 f874 	bl	8004a44 <I2C_ITError>
  }
}
 800395c:	bf00      	nop
 800395e:	3728      	adds	r7, #40	; 0x28
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d150      	bne.n	8003aa8 <I2C_MasterTransmit_TXE+0xc8>
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b21      	cmp	r3, #33	; 0x21
 8003a0a:	d14d      	bne.n	8003aa8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d01d      	beq.n	8003a4e <I2C_MasterTransmit_TXE+0x6e>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d01a      	beq.n	8003a4e <I2C_MasterTransmit_TXE+0x6e>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a1e:	d016      	beq.n	8003a4e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a2e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2211      	movs	r2, #17
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ff8c 	bl	8003964 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a4c:	e060      	b.n	8003b10 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a5c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d107      	bne.n	8003a98 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ff7b 	bl	800398c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a96:	e03b      	b.n	8003b10 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ff5f 	bl	8003964 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003aa6:	e033      	b.n	8003b10 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b21      	cmp	r3, #33	; 0x21
 8003aac:	d005      	beq.n	8003aba <I2C_MasterTransmit_TXE+0xda>
 8003aae:	7bbb      	ldrb	r3, [r7, #14]
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d12d      	bne.n	8003b10 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b22      	cmp	r3, #34	; 0x22
 8003ab8:	d12a      	bne.n	8003b10 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d108      	bne.n	8003ad6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ad4:	e01c      	b.n	8003b10 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d103      	bne.n	8003aea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f88e 	bl	8003c04 <I2C_MemoryTransmit_TXE_BTF>
}
 8003ae8:	e012      	b.n	8003b10 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b0e:	e7ff      	b.n	8003b10 <I2C_MasterTransmit_TXE+0x130>
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b21      	cmp	r3, #33	; 0x21
 8003b30:	d164      	bne.n	8003bfc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d012      	beq.n	8003b62 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003b60:	e04c      	b.n	8003bfc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d01d      	beq.n	8003ba4 <I2C_MasterTransmit_BTF+0x8c>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	d01a      	beq.n	8003ba4 <I2C_MasterTransmit_BTF+0x8c>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b74:	d016      	beq.n	8003ba4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b84:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2211      	movs	r2, #17
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff fee1 	bl	8003964 <HAL_I2C_MasterTxCpltCallback>
}
 8003ba2:	e02b      	b.n	8003bfc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bb2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d107      	bne.n	8003bee <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff fed0 	bl	800398c <HAL_I2C_MemTxCpltCallback>
}
 8003bec:	e006      	b.n	8003bfc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff feb4 	bl	8003964 <HAL_I2C_MasterTxCpltCallback>
}
 8003bfc:	bf00      	nop
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c12:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d11d      	bne.n	8003c58 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d10b      	bne.n	8003c3c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c34:	1c9a      	adds	r2, r3, #2
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003c3a:	e073      	b.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	121b      	asrs	r3, r3, #8
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c56:	e065      	b.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d10b      	bne.n	8003c78 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c76:	e055      	b.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d151      	bne.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	2b22      	cmp	r3, #34	; 0x22
 8003c84:	d10d      	bne.n	8003ca2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c94:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ca0:	e040      	b.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d015      	beq.n	8003cd8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	2b21      	cmp	r3, #33	; 0x21
 8003cb0:	d112      	bne.n	8003cd8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	781a      	ldrb	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cd6:	e025      	b.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d120      	bne.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	2b21      	cmp	r3, #33	; 0x21
 8003ce6:	d11d      	bne.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cf6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff fe34 	bl	800398c <HAL_I2C_MemTxCpltCallback>
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b22      	cmp	r3, #34	; 0x22
 8003d3e:	f040 80ac 	bne.w	8003e9a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d921      	bls.n	8003d94 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	f040 808c 	bne.w	8003e9a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d90:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003d92:	e082      	b.n	8003e9a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d075      	beq.n	8003e88 <I2C_MasterReceive_RXNE+0x15c>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d002      	beq.n	8003da8 <I2C_MasterReceive_RXNE+0x7c>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d16f      	bne.n	8003e88 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f001 f825 	bl	8004df8 <I2C_WaitOnSTOPRequestThroughIT>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d142      	bne.n	8003e3a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dd2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b40      	cmp	r3, #64	; 0x40
 8003e0c:	d10a      	bne.n	8003e24 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff fdbf 	bl	80039a0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e22:	e03a      	b.n	8003e9a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2212      	movs	r2, #18
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff fda0 	bl	8003978 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e38:	e02f      	b.n	8003e9a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e48:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7fd fc43 	bl	800170c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e86:	e008      	b.n	8003e9a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e96:	605a      	str	r2, [r3, #4]
}
 8003e98:	e7ff      	b.n	8003e9a <I2C_MasterReceive_RXNE+0x16e>
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d11b      	bne.n	8003ef2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003ef0:	e0bd      	b.n	800406e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d129      	bne.n	8003f50 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d00a      	beq.n	8003f28 <I2C_MasterReceive_BTF+0x86>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d007      	beq.n	8003f28 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f26:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f4e:	e08e      	b.n	800406e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d176      	bne.n	8004048 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d002      	beq.n	8003f66 <I2C_MasterReceive_BTF+0xc4>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d108      	bne.n	8003f78 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	e019      	b.n	8003fac <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d002      	beq.n	8003f84 <I2C_MasterReceive_BTF+0xe2>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d108      	bne.n	8003f96 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	e00a      	b.n	8003fac <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d007      	beq.n	8003fac <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003faa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004006:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d10a      	bne.n	8004032 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fcb8 	bl	80039a0 <HAL_I2C_MemRxCpltCallback>
}
 8004030:	e01d      	b.n	800406e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2212      	movs	r2, #18
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff fc99 	bl	8003978 <HAL_I2C_MasterRxCpltCallback>
}
 8004046:	e012      	b.n	800406e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b40      	cmp	r3, #64	; 0x40
 8004088:	d117      	bne.n	80040ba <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408e:	2b00      	cmp	r3, #0
 8004090:	d109      	bne.n	80040a6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040a2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80040a4:	e067      	b.n	8004176 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	611a      	str	r2, [r3, #16]
}
 80040b8:	e05d      	b.n	8004176 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040c2:	d133      	bne.n	800412c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b21      	cmp	r3, #33	; 0x21
 80040ce:	d109      	bne.n	80040e4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040e0:	611a      	str	r2, [r3, #16]
 80040e2:	e008      	b.n	80040f6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d004      	beq.n	8004108 <I2C_Master_SB+0x92>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d108      	bne.n	800411a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	2b00      	cmp	r3, #0
 800410e:	d032      	beq.n	8004176 <I2C_Master_SB+0x100>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	2b00      	cmp	r3, #0
 8004118:	d02d      	beq.n	8004176 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004128:	605a      	str	r2, [r3, #4]
}
 800412a:	e024      	b.n	8004176 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10e      	bne.n	8004152 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004138:	b29b      	uxth	r3, r3
 800413a:	11db      	asrs	r3, r3, #7
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f003 0306 	and.w	r3, r3, #6
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f063 030f 	orn	r3, r3, #15
 8004148:	b2da      	uxtb	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	611a      	str	r2, [r3, #16]
}
 8004150:	e011      	b.n	8004176 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004156:	2b01      	cmp	r3, #1
 8004158:	d10d      	bne.n	8004176 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	b29b      	uxth	r3, r3
 8004160:	11db      	asrs	r3, r3, #7
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f003 0306 	and.w	r3, r3, #6
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f063 030e 	orn	r3, r3, #14
 800416e:	b2da      	uxtb	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	611a      	str	r2, [r3, #16]
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	b2da      	uxtb	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <I2C_Master_ADD10+0x26>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d108      	bne.n	80041ba <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00c      	beq.n	80041ca <I2C_Master_ADD10+0x48>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041c8:	605a      	str	r2, [r3, #4]
  }
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b091      	sub	sp, #68	; 0x44
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b22      	cmp	r3, #34	; 0x22
 80041fe:	f040 8169 	bne.w	80044d4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10f      	bne.n	800422a <I2C_Master_ADDR+0x54>
 800420a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800420e:	2b40      	cmp	r3, #64	; 0x40
 8004210:	d10b      	bne.n	800422a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004212:	2300      	movs	r3, #0
 8004214:	633b      	str	r3, [r7, #48]	; 0x30
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	633b      	str	r3, [r7, #48]	; 0x30
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	633b      	str	r3, [r7, #48]	; 0x30
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	e160      	b.n	80044ec <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422e:	2b00      	cmp	r3, #0
 8004230:	d11d      	bne.n	800426e <I2C_Master_ADDR+0x98>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800423a:	d118      	bne.n	800426e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423c:	2300      	movs	r3, #0
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004250:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004260:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	651a      	str	r2, [r3, #80]	; 0x50
 800426c:	e13e      	b.n	80044ec <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d113      	bne.n	80042a0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004278:	2300      	movs	r3, #0
 800427a:	62bb      	str	r3, [r7, #40]	; 0x28
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e115      	b.n	80044cc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	f040 808a 	bne.w	80043c0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042b2:	d137      	bne.n	8004324 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d2:	d113      	bne.n	80042fc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e4:	2300      	movs	r3, #0
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	e0e7      	b.n	80044cc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042fc:	2300      	movs	r3, #0
 80042fe:	623b      	str	r3, [r7, #32]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	623b      	str	r3, [r7, #32]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	e0d3      	b.n	80044cc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004326:	2b08      	cmp	r3, #8
 8004328:	d02e      	beq.n	8004388 <I2C_Master_ADDR+0x1b2>
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	2b20      	cmp	r3, #32
 800432e:	d02b      	beq.n	8004388 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004332:	2b12      	cmp	r3, #18
 8004334:	d102      	bne.n	800433c <I2C_Master_ADDR+0x166>
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	2b01      	cmp	r3, #1
 800433a:	d125      	bne.n	8004388 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433e:	2b04      	cmp	r3, #4
 8004340:	d00e      	beq.n	8004360 <I2C_Master_ADDR+0x18a>
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	2b02      	cmp	r3, #2
 8004346:	d00b      	beq.n	8004360 <I2C_Master_ADDR+0x18a>
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	2b10      	cmp	r3, #16
 800434c:	d008      	beq.n	8004360 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	e007      	b.n	8004370 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800436e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	e0a1      	b.n	80044cc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004396:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004398:	2300      	movs	r3, #0
 800439a:	61bb      	str	r3, [r7, #24]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e085      	b.n	80044cc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d14d      	bne.n	8004466 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d016      	beq.n	80043fe <I2C_Master_ADDR+0x228>
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d013      	beq.n	80043fe <I2C_Master_ADDR+0x228>
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	2b10      	cmp	r3, #16
 80043da:	d010      	beq.n	80043fe <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ea:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e007      	b.n	800440e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800440c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800441c:	d117      	bne.n	800444e <I2C_Master_ADDR+0x278>
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004424:	d00b      	beq.n	800443e <I2C_Master_ADDR+0x268>
 8004426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004428:	2b01      	cmp	r3, #1
 800442a:	d008      	beq.n	800443e <I2C_Master_ADDR+0x268>
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	2b08      	cmp	r3, #8
 8004430:	d005      	beq.n	800443e <I2C_Master_ADDR+0x268>
 8004432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004434:	2b10      	cmp	r3, #16
 8004436:	d002      	beq.n	800443e <I2C_Master_ADDR+0x268>
 8004438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443a:	2b20      	cmp	r3, #32
 800443c:	d107      	bne.n	800444e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800444c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	e032      	b.n	80044cc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004474:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004484:	d117      	bne.n	80044b6 <I2C_Master_ADDR+0x2e0>
 8004486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004488:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800448c:	d00b      	beq.n	80044a6 <I2C_Master_ADDR+0x2d0>
 800448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004490:	2b01      	cmp	r3, #1
 8004492:	d008      	beq.n	80044a6 <I2C_Master_ADDR+0x2d0>
 8004494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004496:	2b08      	cmp	r3, #8
 8004498:	d005      	beq.n	80044a6 <I2C_Master_ADDR+0x2d0>
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	2b10      	cmp	r3, #16
 800449e:	d002      	beq.n	80044a6 <I2C_Master_ADDR+0x2d0>
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	2b20      	cmp	r3, #32
 80044a4:	d107      	bne.n	80044b6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b6:	2300      	movs	r3, #0
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80044d2:	e00b      	b.n	80044ec <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
}
 80044ea:	e7ff      	b.n	80044ec <I2C_Master_ADDR+0x316>
 80044ec:	bf00      	nop
 80044ee:	3744      	adds	r7, #68	; 0x44
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004506:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d02b      	beq.n	800456a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	781a      	ldrb	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d114      	bne.n	800456a <I2C_SlaveTransmit_TXE+0x72>
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	2b29      	cmp	r3, #41	; 0x29
 8004544:	d111      	bne.n	800456a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004554:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2221      	movs	r2, #33	; 0x21
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2228      	movs	r2, #40	; 0x28
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7fd f865 	bl	8001634 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d011      	beq.n	80045a8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d02c      	beq.n	8004628 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d114      	bne.n	8004628 <I2C_SlaveReceive_RXNE+0x74>
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b2a      	cmp	r3, #42	; 0x2a
 8004602:	d111      	bne.n	8004628 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004612:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2222      	movs	r2, #34	; 0x22
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2228      	movs	r2, #40	; 0x28
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fd f83c 	bl	80016a0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d012      	beq.n	8004668 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800468e:	2b28      	cmp	r3, #40	; 0x28
 8004690:	d125      	bne.n	80046de <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d103      	bne.n	80046c2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	81bb      	strh	r3, [r7, #12]
 80046c0:	e002      	b.n	80046c8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80046d0:	89ba      	ldrh	r2, [r7, #12]
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	4619      	mov	r1, r3
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fc ff5c 	bl	8001594 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80046dc:	e00e      	b.n	80046fc <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046de:	2300      	movs	r3, #0
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004712:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004722:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004724:	2300      	movs	r3, #0
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004750:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800475c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004760:	d172      	bne.n	8004848 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	2b22      	cmp	r3, #34	; 0x22
 8004766:	d002      	beq.n	800476e <I2C_Slave_STOPF+0x6a>
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	2b2a      	cmp	r3, #42	; 0x2a
 800476c:	d135      	bne.n	80047da <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	b29a      	uxth	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f043 0204 	orr.w	r2, r3, #4
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe faf7 	bl	8002d9a <HAL_DMA_GetState>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d049      	beq.n	8004846 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	4a69      	ldr	r2, [pc, #420]	; (800495c <I2C_Slave_STOPF+0x258>)
 80047b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe fac9 	bl	8002d56 <HAL_DMA_Abort_IT>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d03d      	beq.n	8004846 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047d4:	4610      	mov	r0, r2
 80047d6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047d8:	e035      	b.n	8004846 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f043 0204 	orr.w	r2, r3, #4
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800480c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fac1 	bl	8002d9a <HAL_DMA_GetState>
 8004818:	4603      	mov	r3, r0
 800481a:	2b01      	cmp	r3, #1
 800481c:	d014      	beq.n	8004848 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004822:	4a4e      	ldr	r2, [pc, #312]	; (800495c <I2C_Slave_STOPF+0x258>)
 8004824:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe fa93 	bl	8002d56 <HAL_DMA_Abort_IT>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d008      	beq.n	8004848 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004840:	4610      	mov	r0, r2
 8004842:	4798      	blx	r3
 8004844:	e000      	b.n	8004848 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004846:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d03e      	beq.n	80048d0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b04      	cmp	r3, #4
 800485e:	d112      	bne.n	8004886 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d112      	bne.n	80048ba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	f043 0204 	orr.w	r2, r3, #4
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f8b3 	bl	8004a44 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80048de:	e039      	b.n	8004954 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b2a      	cmp	r3, #42	; 0x2a
 80048e4:	d109      	bne.n	80048fa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2228      	movs	r2, #40	; 0x28
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fc fed3 	bl	80016a0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b28      	cmp	r3, #40	; 0x28
 8004904:	d111      	bne.n	800492a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a15      	ldr	r2, [pc, #84]	; (8004960 <I2C_Slave_STOPF+0x25c>)
 800490a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fc fe2a 	bl	800157c <HAL_I2C_ListenCpltCallback>
}
 8004928:	e014      	b.n	8004954 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	2b22      	cmp	r3, #34	; 0x22
 8004930:	d002      	beq.n	8004938 <I2C_Slave_STOPF+0x234>
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	2b22      	cmp	r3, #34	; 0x22
 8004936:	d10d      	bne.n	8004954 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fc fea6 	bl	80016a0 <HAL_I2C_SlaveRxCpltCallback>
}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	08004ca9 	.word	0x08004ca9
 8004960:	ffff0000 	.word	0xffff0000

08004964 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004972:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b08      	cmp	r3, #8
 800497e:	d002      	beq.n	8004986 <I2C_Slave_AF+0x22>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b20      	cmp	r3, #32
 8004984:	d129      	bne.n	80049da <I2C_Slave_AF+0x76>
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2b28      	cmp	r3, #40	; 0x28
 800498a:	d126      	bne.n	80049da <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a2c      	ldr	r2, [pc, #176]	; (8004a40 <I2C_Slave_AF+0xdc>)
 8004990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049a0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049aa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ba:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fc fdd2 	bl	800157c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80049d8:	e02e      	b.n	8004a38 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b21      	cmp	r3, #33	; 0x21
 80049de:	d126      	bne.n	8004a2e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a17      	ldr	r2, [pc, #92]	; (8004a40 <I2C_Slave_AF+0xdc>)
 80049e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2221      	movs	r2, #33	; 0x21
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a0a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a14:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a24:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fc fe04 	bl	8001634 <HAL_I2C_SlaveTxCpltCallback>
}
 8004a2c:	e004      	b.n	8004a38 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a36:	615a      	str	r2, [r3, #20]
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	ffff0000 	.word	0xffff0000

08004a44 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a52:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a5a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a5c:	7bbb      	ldrb	r3, [r7, #14]
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d002      	beq.n	8004a68 <I2C_ITError+0x24>
 8004a62:	7bbb      	ldrb	r3, [r7, #14]
 8004a64:	2b40      	cmp	r3, #64	; 0x40
 8004a66:	d10a      	bne.n	8004a7e <I2C_ITError+0x3a>
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b22      	cmp	r3, #34	; 0x22
 8004a6c:	d107      	bne.n	8004a7e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a7c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a84:	2b28      	cmp	r3, #40	; 0x28
 8004a86:	d107      	bne.n	8004a98 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2228      	movs	r2, #40	; 0x28
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a96:	e015      	b.n	8004ac4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa6:	d00a      	beq.n	8004abe <I2C_ITError+0x7a>
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b60      	cmp	r3, #96	; 0x60
 8004aac:	d007      	beq.n	8004abe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad2:	d162      	bne.n	8004b9a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ae2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d020      	beq.n	8004b34 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af6:	4a6a      	ldr	r2, [pc, #424]	; (8004ca0 <I2C_ITError+0x25c>)
 8004af8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe f929 	bl	8002d56 <HAL_DMA_Abort_IT>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8089 	beq.w	8004c1e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0201 	bic.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b2e:	4610      	mov	r0, r2
 8004b30:	4798      	blx	r3
 8004b32:	e074      	b.n	8004c1e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	4a59      	ldr	r2, [pc, #356]	; (8004ca0 <I2C_ITError+0x25c>)
 8004b3a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fe f908 	bl	8002d56 <HAL_DMA_Abort_IT>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d068      	beq.n	8004c1e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b56:	2b40      	cmp	r3, #64	; 0x40
 8004b58:	d10b      	bne.n	8004b72 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0201 	bic.w	r2, r2, #1
 8004b80:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b94:	4610      	mov	r0, r2
 8004b96:	4798      	blx	r3
 8004b98:	e041      	b.n	8004c1e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b60      	cmp	r3, #96	; 0x60
 8004ba4:	d125      	bne.n	8004bf2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbe:	2b40      	cmp	r3, #64	; 0x40
 8004bc0:	d10b      	bne.n	8004bda <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0201 	bic.w	r2, r2, #1
 8004be8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fe fee2 	bl	80039b4 <HAL_I2C_AbortCpltCallback>
 8004bf0:	e015      	b.n	8004c1e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d10b      	bne.n	8004c18 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fc fd77 	bl	800170c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10e      	bne.n	8004c4c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d109      	bne.n	8004c4c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d104      	bne.n	8004c4c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d007      	beq.n	8004c5c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c5a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c62:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d113      	bne.n	8004c98 <I2C_ITError+0x254>
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b28      	cmp	r3, #40	; 0x28
 8004c74:	d110      	bne.n	8004c98 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a0a      	ldr	r2, [pc, #40]	; (8004ca4 <I2C_ITError+0x260>)
 8004c7a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc fc72 	bl	800157c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	08004ca9 	.word	0x08004ca9
 8004ca4:	ffff0000 	.word	0xffff0000

08004ca8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cc2:	4b4b      	ldr	r3, [pc, #300]	; (8004df0 <I2C_DMAAbort+0x148>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	08db      	lsrs	r3, r3, #3
 8004cc8:	4a4a      	ldr	r2, [pc, #296]	; (8004df4 <I2C_DMAAbort+0x14c>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	0a1a      	lsrs	r2, r3, #8
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	00da      	lsls	r2, r3, #3
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004cee:	e00a      	b.n	8004d06 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d04:	d0ea      	beq.n	8004cdc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	2200      	movs	r2, #0
 8004d14:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	2200      	movs	r2, #0
 8004d24:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d34:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	2200      	movs	r2, #0
 8004d4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	2200      	movs	r2, #0
 8004d5a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b60      	cmp	r3, #96	; 0x60
 8004d76:	d10e      	bne.n	8004d96 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d8e:	6978      	ldr	r0, [r7, #20]
 8004d90:	f7fe fe10 	bl	80039b4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d94:	e027      	b.n	8004de6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d96:	7cfb      	ldrb	r3, [r7, #19]
 8004d98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d9c:	2b28      	cmp	r3, #40	; 0x28
 8004d9e:	d117      	bne.n	8004dd0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dbe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2228      	movs	r2, #40	; 0x28
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dce:	e007      	b.n	8004de0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004de0:	6978      	ldr	r0, [r7, #20]
 8004de2:	f7fc fc93 	bl	800170c <HAL_I2C_ErrorCallback>
}
 8004de6:	bf00      	nop
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000090 	.word	0x20000090
 8004df4:	14f8b589 	.word	0x14f8b589

08004df8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e04:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	08db      	lsrs	r3, r3, #3
 8004e0a:	4a13      	ldr	r2, [pc, #76]	; (8004e58 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	0a1a      	lsrs	r2, r3, #8
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d107      	bne.n	8004e36 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f043 0220 	orr.w	r2, r3, #32
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e008      	b.n	8004e48 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e44:	d0e9      	beq.n	8004e1a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	20000090 	.word	0x20000090
 8004e58:	14f8b589 	.word	0x14f8b589

08004e5c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e6c:	d103      	bne.n	8004e76 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e74:	e007      	b.n	8004e86 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e7e:	d102      	bne.n	8004e86 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2208      	movs	r2, #8
 8004e84:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e267      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d075      	beq.n	8004f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eb2:	4b88      	ldr	r3, [pc, #544]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d00c      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ebe:	4b85      	ldr	r3, [pc, #532]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d112      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eca:	4b82      	ldr	r3, [pc, #520]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ed6:	d10b      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed8:	4b7e      	ldr	r3, [pc, #504]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d05b      	beq.n	8004f9c <HAL_RCC_OscConfig+0x108>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d157      	bne.n	8004f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e242      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef8:	d106      	bne.n	8004f08 <HAL_RCC_OscConfig+0x74>
 8004efa:	4b76      	ldr	r3, [pc, #472]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a75      	ldr	r2, [pc, #468]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	e01d      	b.n	8004f44 <HAL_RCC_OscConfig+0xb0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f10:	d10c      	bne.n	8004f2c <HAL_RCC_OscConfig+0x98>
 8004f12:	4b70      	ldr	r3, [pc, #448]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a6f      	ldr	r2, [pc, #444]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	4b6d      	ldr	r3, [pc, #436]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a6c      	ldr	r2, [pc, #432]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	e00b      	b.n	8004f44 <HAL_RCC_OscConfig+0xb0>
 8004f2c:	4b69      	ldr	r3, [pc, #420]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a68      	ldr	r2, [pc, #416]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	4b66      	ldr	r3, [pc, #408]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a65      	ldr	r2, [pc, #404]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d013      	beq.n	8004f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4c:	f7fd fa3c 	bl	80023c8 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f54:	f7fd fa38 	bl	80023c8 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b64      	cmp	r3, #100	; 0x64
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e207      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f66:	4b5b      	ldr	r3, [pc, #364]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0f0      	beq.n	8004f54 <HAL_RCC_OscConfig+0xc0>
 8004f72:	e014      	b.n	8004f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f74:	f7fd fa28 	bl	80023c8 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f7c:	f7fd fa24 	bl	80023c8 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b64      	cmp	r3, #100	; 0x64
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e1f3      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8e:	4b51      	ldr	r3, [pc, #324]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0xe8>
 8004f9a:	e000      	b.n	8004f9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d063      	beq.n	8005072 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004faa:	4b4a      	ldr	r3, [pc, #296]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00b      	beq.n	8004fce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb6:	4b47      	ldr	r3, [pc, #284]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d11c      	bne.n	8004ffc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fc2:	4b44      	ldr	r3, [pc, #272]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d116      	bne.n	8004ffc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fce:	4b41      	ldr	r3, [pc, #260]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x152>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d001      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e1c7      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe6:	4b3b      	ldr	r3, [pc, #236]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4937      	ldr	r1, [pc, #220]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffa:	e03a      	b.n	8005072 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d020      	beq.n	8005046 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005004:	4b34      	ldr	r3, [pc, #208]	; (80050d8 <HAL_RCC_OscConfig+0x244>)
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500a:	f7fd f9dd 	bl	80023c8 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005012:	f7fd f9d9 	bl	80023c8 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e1a8      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005024:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005030:	4b28      	ldr	r3, [pc, #160]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	4925      	ldr	r1, [pc, #148]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8005040:	4313      	orrs	r3, r2
 8005042:	600b      	str	r3, [r1, #0]
 8005044:	e015      	b.n	8005072 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005046:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <HAL_RCC_OscConfig+0x244>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7fd f9bc 	bl	80023c8 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005054:	f7fd f9b8 	bl	80023c8 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e187      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005066:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d036      	beq.n	80050ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d016      	beq.n	80050b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005086:	4b15      	ldr	r3, [pc, #84]	; (80050dc <HAL_RCC_OscConfig+0x248>)
 8005088:	2201      	movs	r2, #1
 800508a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508c:	f7fd f99c 	bl	80023c8 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005094:	f7fd f998 	bl	80023c8 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e167      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <HAL_RCC_OscConfig+0x240>)
 80050a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0f0      	beq.n	8005094 <HAL_RCC_OscConfig+0x200>
 80050b2:	e01b      	b.n	80050ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b4:	4b09      	ldr	r3, [pc, #36]	; (80050dc <HAL_RCC_OscConfig+0x248>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ba:	f7fd f985 	bl	80023c8 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c0:	e00e      	b.n	80050e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c2:	f7fd f981 	bl	80023c8 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d907      	bls.n	80050e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e150      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
 80050d4:	40023800 	.word	0x40023800
 80050d8:	42470000 	.word	0x42470000
 80050dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e0:	4b88      	ldr	r3, [pc, #544]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 80050e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ea      	bne.n	80050c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8097 	beq.w	8005228 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050fa:	2300      	movs	r3, #0
 80050fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050fe:	4b81      	ldr	r3, [pc, #516]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10f      	bne.n	800512a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	4b7d      	ldr	r3, [pc, #500]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	4a7c      	ldr	r2, [pc, #496]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 8005114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005118:	6413      	str	r3, [r2, #64]	; 0x40
 800511a:	4b7a      	ldr	r3, [pc, #488]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005122:	60bb      	str	r3, [r7, #8]
 8005124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005126:	2301      	movs	r3, #1
 8005128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512a:	4b77      	ldr	r3, [pc, #476]	; (8005308 <HAL_RCC_OscConfig+0x474>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d118      	bne.n	8005168 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005136:	4b74      	ldr	r3, [pc, #464]	; (8005308 <HAL_RCC_OscConfig+0x474>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a73      	ldr	r2, [pc, #460]	; (8005308 <HAL_RCC_OscConfig+0x474>)
 800513c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005142:	f7fd f941 	bl	80023c8 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800514a:	f7fd f93d 	bl	80023c8 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e10c      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515c:	4b6a      	ldr	r3, [pc, #424]	; (8005308 <HAL_RCC_OscConfig+0x474>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0f0      	beq.n	800514a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d106      	bne.n	800517e <HAL_RCC_OscConfig+0x2ea>
 8005170:	4b64      	ldr	r3, [pc, #400]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 8005172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005174:	4a63      	ldr	r2, [pc, #396]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	6713      	str	r3, [r2, #112]	; 0x70
 800517c:	e01c      	b.n	80051b8 <HAL_RCC_OscConfig+0x324>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2b05      	cmp	r3, #5
 8005184:	d10c      	bne.n	80051a0 <HAL_RCC_OscConfig+0x30c>
 8005186:	4b5f      	ldr	r3, [pc, #380]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 8005188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518a:	4a5e      	ldr	r2, [pc, #376]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 800518c:	f043 0304 	orr.w	r3, r3, #4
 8005190:	6713      	str	r3, [r2, #112]	; 0x70
 8005192:	4b5c      	ldr	r3, [pc, #368]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	4a5b      	ldr	r2, [pc, #364]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 8005198:	f043 0301 	orr.w	r3, r3, #1
 800519c:	6713      	str	r3, [r2, #112]	; 0x70
 800519e:	e00b      	b.n	80051b8 <HAL_RCC_OscConfig+0x324>
 80051a0:	4b58      	ldr	r3, [pc, #352]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a4:	4a57      	ldr	r2, [pc, #348]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	6713      	str	r3, [r2, #112]	; 0x70
 80051ac:	4b55      	ldr	r3, [pc, #340]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b0:	4a54      	ldr	r2, [pc, #336]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 80051b2:	f023 0304 	bic.w	r3, r3, #4
 80051b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d015      	beq.n	80051ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c0:	f7fd f902 	bl	80023c8 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c6:	e00a      	b.n	80051de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c8:	f7fd f8fe 	bl	80023c8 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e0cb      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051de:	4b49      	ldr	r3, [pc, #292]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0ee      	beq.n	80051c8 <HAL_RCC_OscConfig+0x334>
 80051ea:	e014      	b.n	8005216 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ec:	f7fd f8ec 	bl	80023c8 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f2:	e00a      	b.n	800520a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f4:	f7fd f8e8 	bl	80023c8 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005202:	4293      	cmp	r3, r2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e0b5      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520a:	4b3e      	ldr	r3, [pc, #248]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1ee      	bne.n	80051f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d105      	bne.n	8005228 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521c:	4b39      	ldr	r3, [pc, #228]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	4a38      	ldr	r2, [pc, #224]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 8005222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005226:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 80a1 	beq.w	8005374 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005232:	4b34      	ldr	r3, [pc, #208]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 030c 	and.w	r3, r3, #12
 800523a:	2b08      	cmp	r3, #8
 800523c:	d05c      	beq.n	80052f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d141      	bne.n	80052ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005246:	4b31      	ldr	r3, [pc, #196]	; (800530c <HAL_RCC_OscConfig+0x478>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524c:	f7fd f8bc 	bl	80023c8 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005254:	f7fd f8b8 	bl	80023c8 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e087      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005266:	4b27      	ldr	r3, [pc, #156]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f0      	bne.n	8005254 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69da      	ldr	r2, [r3, #28]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	019b      	lsls	r3, r3, #6
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	3b01      	subs	r3, #1
 800528c:	041b      	lsls	r3, r3, #16
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	061b      	lsls	r3, r3, #24
 8005296:	491b      	ldr	r1, [pc, #108]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 8005298:	4313      	orrs	r3, r2
 800529a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800529c:	4b1b      	ldr	r3, [pc, #108]	; (800530c <HAL_RCC_OscConfig+0x478>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a2:	f7fd f891 	bl	80023c8 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052aa:	f7fd f88d 	bl	80023c8 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e05c      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052bc:	4b11      	ldr	r3, [pc, #68]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x416>
 80052c8:	e054      	b.n	8005374 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ca:	4b10      	ldr	r3, [pc, #64]	; (800530c <HAL_RCC_OscConfig+0x478>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d0:	f7fd f87a 	bl	80023c8 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d8:	f7fd f876 	bl	80023c8 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e045      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <HAL_RCC_OscConfig+0x470>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f0      	bne.n	80052d8 <HAL_RCC_OscConfig+0x444>
 80052f6:	e03d      	b.n	8005374 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d107      	bne.n	8005310 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e038      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
 8005304:	40023800 	.word	0x40023800
 8005308:	40007000 	.word	0x40007000
 800530c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005310:	4b1b      	ldr	r3, [pc, #108]	; (8005380 <HAL_RCC_OscConfig+0x4ec>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d028      	beq.n	8005370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005328:	429a      	cmp	r2, r3
 800532a:	d121      	bne.n	8005370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d11a      	bne.n	8005370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005340:	4013      	ands	r3, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005348:	4293      	cmp	r3, r2
 800534a:	d111      	bne.n	8005370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	085b      	lsrs	r3, r3, #1
 8005358:	3b01      	subs	r3, #1
 800535a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800535c:	429a      	cmp	r2, r3
 800535e:	d107      	bne.n	8005370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800536c:	429a      	cmp	r2, r3
 800536e:	d001      	beq.n	8005374 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40023800 	.word	0x40023800

08005384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0cc      	b.n	8005532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005398:	4b68      	ldr	r3, [pc, #416]	; (800553c <HAL_RCC_ClockConfig+0x1b8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d90c      	bls.n	80053c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a6:	4b65      	ldr	r3, [pc, #404]	; (800553c <HAL_RCC_ClockConfig+0x1b8>)
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b63      	ldr	r3, [pc, #396]	; (800553c <HAL_RCC_ClockConfig+0x1b8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0b8      	b.n	8005532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d020      	beq.n	800540e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d8:	4b59      	ldr	r3, [pc, #356]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4a58      	ldr	r2, [pc, #352]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053f0:	4b53      	ldr	r3, [pc, #332]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	4a52      	ldr	r2, [pc, #328]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053fc:	4b50      	ldr	r3, [pc, #320]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	494d      	ldr	r1, [pc, #308]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	4313      	orrs	r3, r2
 800540c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d044      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d107      	bne.n	8005432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005422:	4b47      	ldr	r3, [pc, #284]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d119      	bne.n	8005462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e07f      	b.n	8005532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d003      	beq.n	8005442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800543e:	2b03      	cmp	r3, #3
 8005440:	d107      	bne.n	8005452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005442:	4b3f      	ldr	r3, [pc, #252]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d109      	bne.n	8005462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e06f      	b.n	8005532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005452:	4b3b      	ldr	r3, [pc, #236]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e067      	b.n	8005532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005462:	4b37      	ldr	r3, [pc, #220]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f023 0203 	bic.w	r2, r3, #3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	4934      	ldr	r1, [pc, #208]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 8005470:	4313      	orrs	r3, r2
 8005472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005474:	f7fc ffa8 	bl	80023c8 <HAL_GetTick>
 8005478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800547a:	e00a      	b.n	8005492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800547c:	f7fc ffa4 	bl	80023c8 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f241 3288 	movw	r2, #5000	; 0x1388
 800548a:	4293      	cmp	r3, r2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e04f      	b.n	8005532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005492:	4b2b      	ldr	r3, [pc, #172]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 020c 	and.w	r2, r3, #12
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d1eb      	bne.n	800547c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054a4:	4b25      	ldr	r3, [pc, #148]	; (800553c <HAL_RCC_ClockConfig+0x1b8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d20c      	bcs.n	80054cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b2:	4b22      	ldr	r3, [pc, #136]	; (800553c <HAL_RCC_ClockConfig+0x1b8>)
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ba:	4b20      	ldr	r3, [pc, #128]	; (800553c <HAL_RCC_ClockConfig+0x1b8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d001      	beq.n	80054cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e032      	b.n	8005532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d008      	beq.n	80054ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d8:	4b19      	ldr	r3, [pc, #100]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	4916      	ldr	r1, [pc, #88]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054f6:	4b12      	ldr	r3, [pc, #72]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	490e      	ldr	r1, [pc, #56]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 8005506:	4313      	orrs	r3, r2
 8005508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800550a:	f000 f821 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 800550e:	4602      	mov	r2, r0
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_RCC_ClockConfig+0x1bc>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	490a      	ldr	r1, [pc, #40]	; (8005544 <HAL_RCC_ClockConfig+0x1c0>)
 800551c:	5ccb      	ldrb	r3, [r1, r3]
 800551e:	fa22 f303 	lsr.w	r3, r2, r3
 8005522:	4a09      	ldr	r2, [pc, #36]	; (8005548 <HAL_RCC_ClockConfig+0x1c4>)
 8005524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005526:	4b09      	ldr	r3, [pc, #36]	; (800554c <HAL_RCC_ClockConfig+0x1c8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f7fc ff08 	bl	8002340 <HAL_InitTick>

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40023c00 	.word	0x40023c00
 8005540:	40023800 	.word	0x40023800
 8005544:	08009c70 	.word	0x08009c70
 8005548:	20000090 	.word	0x20000090
 800554c:	20000094 	.word	0x20000094

08005550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005554:	b090      	sub	sp, #64	; 0x40
 8005556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	637b      	str	r3, [r7, #52]	; 0x34
 800555c:	2300      	movs	r3, #0
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005560:	2300      	movs	r3, #0
 8005562:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005568:	4b59      	ldr	r3, [pc, #356]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f003 030c 	and.w	r3, r3, #12
 8005570:	2b08      	cmp	r3, #8
 8005572:	d00d      	beq.n	8005590 <HAL_RCC_GetSysClockFreq+0x40>
 8005574:	2b08      	cmp	r3, #8
 8005576:	f200 80a1 	bhi.w	80056bc <HAL_RCC_GetSysClockFreq+0x16c>
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0x34>
 800557e:	2b04      	cmp	r3, #4
 8005580:	d003      	beq.n	800558a <HAL_RCC_GetSysClockFreq+0x3a>
 8005582:	e09b      	b.n	80056bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005584:	4b53      	ldr	r3, [pc, #332]	; (80056d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005586:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005588:	e09b      	b.n	80056c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800558a:	4b53      	ldr	r3, [pc, #332]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800558c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800558e:	e098      	b.n	80056c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005590:	4b4f      	ldr	r3, [pc, #316]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005598:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800559a:	4b4d      	ldr	r3, [pc, #308]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d028      	beq.n	80055f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a6:	4b4a      	ldr	r3, [pc, #296]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	099b      	lsrs	r3, r3, #6
 80055ac:	2200      	movs	r2, #0
 80055ae:	623b      	str	r3, [r7, #32]
 80055b0:	627a      	str	r2, [r7, #36]	; 0x24
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055b8:	2100      	movs	r1, #0
 80055ba:	4b47      	ldr	r3, [pc, #284]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80055bc:	fb03 f201 	mul.w	r2, r3, r1
 80055c0:	2300      	movs	r3, #0
 80055c2:	fb00 f303 	mul.w	r3, r0, r3
 80055c6:	4413      	add	r3, r2
 80055c8:	4a43      	ldr	r2, [pc, #268]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80055ca:	fba0 1202 	umull	r1, r2, r0, r2
 80055ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055d0:	460a      	mov	r2, r1
 80055d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80055d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d6:	4413      	add	r3, r2
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055dc:	2200      	movs	r2, #0
 80055de:	61bb      	str	r3, [r7, #24]
 80055e0:	61fa      	str	r2, [r7, #28]
 80055e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055ea:	f7fb fae5 	bl	8000bb8 <__aeabi_uldivmod>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4613      	mov	r3, r2
 80055f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f6:	e053      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055f8:	4b35      	ldr	r3, [pc, #212]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	099b      	lsrs	r3, r3, #6
 80055fe:	2200      	movs	r2, #0
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	617a      	str	r2, [r7, #20]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800560a:	f04f 0b00 	mov.w	fp, #0
 800560e:	4652      	mov	r2, sl
 8005610:	465b      	mov	r3, fp
 8005612:	f04f 0000 	mov.w	r0, #0
 8005616:	f04f 0100 	mov.w	r1, #0
 800561a:	0159      	lsls	r1, r3, #5
 800561c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005620:	0150      	lsls	r0, r2, #5
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	ebb2 080a 	subs.w	r8, r2, sl
 800562a:	eb63 090b 	sbc.w	r9, r3, fp
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800563a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800563e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005642:	ebb2 0408 	subs.w	r4, r2, r8
 8005646:	eb63 0509 	sbc.w	r5, r3, r9
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	00eb      	lsls	r3, r5, #3
 8005654:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005658:	00e2      	lsls	r2, r4, #3
 800565a:	4614      	mov	r4, r2
 800565c:	461d      	mov	r5, r3
 800565e:	eb14 030a 	adds.w	r3, r4, sl
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	eb45 030b 	adc.w	r3, r5, fp
 8005668:	607b      	str	r3, [r7, #4]
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005676:	4629      	mov	r1, r5
 8005678:	028b      	lsls	r3, r1, #10
 800567a:	4621      	mov	r1, r4
 800567c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005680:	4621      	mov	r1, r4
 8005682:	028a      	lsls	r2, r1, #10
 8005684:	4610      	mov	r0, r2
 8005686:	4619      	mov	r1, r3
 8005688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568a:	2200      	movs	r2, #0
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	60fa      	str	r2, [r7, #12]
 8005690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005694:	f7fb fa90 	bl	8000bb8 <__aeabi_uldivmod>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4613      	mov	r3, r2
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	3301      	adds	r3, #1
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80056b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056ba:	e002      	b.n	80056c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80056be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3740      	adds	r7, #64	; 0x40
 80056c8:	46bd      	mov	sp, r7
 80056ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ce:	bf00      	nop
 80056d0:	40023800 	.word	0x40023800
 80056d4:	00f42400 	.word	0x00f42400
 80056d8:	017d7840 	.word	0x017d7840

080056dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056e0:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80056e2:	681b      	ldr	r3, [r3, #0]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	20000090 	.word	0x20000090

080056f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056f8:	f7ff fff0 	bl	80056dc <HAL_RCC_GetHCLKFreq>
 80056fc:	4602      	mov	r2, r0
 80056fe:	4b05      	ldr	r3, [pc, #20]	; (8005714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	0a9b      	lsrs	r3, r3, #10
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	4903      	ldr	r1, [pc, #12]	; (8005718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800570a:	5ccb      	ldrb	r3, [r1, r3]
 800570c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005710:	4618      	mov	r0, r3
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40023800 	.word	0x40023800
 8005718:	08009c80 	.word	0x08009c80

0800571c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005720:	f7ff ffdc 	bl	80056dc <HAL_RCC_GetHCLKFreq>
 8005724:	4602      	mov	r2, r0
 8005726:	4b05      	ldr	r3, [pc, #20]	; (800573c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	0b5b      	lsrs	r3, r3, #13
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	4903      	ldr	r1, [pc, #12]	; (8005740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005732:	5ccb      	ldrb	r3, [r1, r3]
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005738:	4618      	mov	r0, r3
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40023800 	.word	0x40023800
 8005740:	08009c80 	.word	0x08009c80

08005744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e041      	b.n	80057da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fc fc50 	bl	8002010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3304      	adds	r3, #4
 8005780:	4619      	mov	r1, r3
 8005782:	4610      	mov	r0, r2
 8005784:	f000 ff14 	bl	80065b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d001      	beq.n	80057fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e044      	b.n	8005886 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0201 	orr.w	r2, r2, #1
 8005812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1e      	ldr	r2, [pc, #120]	; (8005894 <HAL_TIM_Base_Start_IT+0xb0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d018      	beq.n	8005850 <HAL_TIM_Base_Start_IT+0x6c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005826:	d013      	beq.n	8005850 <HAL_TIM_Base_Start_IT+0x6c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1a      	ldr	r2, [pc, #104]	; (8005898 <HAL_TIM_Base_Start_IT+0xb4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00e      	beq.n	8005850 <HAL_TIM_Base_Start_IT+0x6c>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a19      	ldr	r2, [pc, #100]	; (800589c <HAL_TIM_Base_Start_IT+0xb8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d009      	beq.n	8005850 <HAL_TIM_Base_Start_IT+0x6c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a17      	ldr	r2, [pc, #92]	; (80058a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_TIM_Base_Start_IT+0x6c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d111      	bne.n	8005874 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b06      	cmp	r3, #6
 8005860:	d010      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005872:	e007      	b.n	8005884 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40010000 	.word	0x40010000
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40014000 	.word	0x40014000

080058a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0201 	bic.w	r2, r2, #1
 80058be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6a1a      	ldr	r2, [r3, #32]
 80058c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10f      	bne.n	80058f0 <HAL_TIM_Base_Stop_IT+0x48>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6a1a      	ldr	r2, [r3, #32]
 80058d6:	f240 4344 	movw	r3, #1092	; 0x444
 80058da:	4013      	ands	r3, r2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d107      	bne.n	80058f0 <HAL_TIM_Base_Stop_IT+0x48>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e041      	b.n	800599c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d106      	bne.n	8005932 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7fc fbed 	bl	800210c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3304      	adds	r3, #4
 8005942:	4619      	mov	r1, r3
 8005944:	4610      	mov	r0, r2
 8005946:	f000 fe33 	bl	80065b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <HAL_TIM_PWM_Start+0x24>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	bf14      	ite	ne
 80059c0:	2301      	movne	r3, #1
 80059c2:	2300      	moveq	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	e022      	b.n	8005a0e <HAL_TIM_PWM_Start+0x6a>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d109      	bne.n	80059e2 <HAL_TIM_PWM_Start+0x3e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	bf14      	ite	ne
 80059da:	2301      	movne	r3, #1
 80059dc:	2300      	moveq	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	e015      	b.n	8005a0e <HAL_TIM_PWM_Start+0x6a>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d109      	bne.n	80059fc <HAL_TIM_PWM_Start+0x58>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	e008      	b.n	8005a0e <HAL_TIM_PWM_Start+0x6a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	bf14      	ite	ne
 8005a08:	2301      	movne	r3, #1
 8005a0a:	2300      	moveq	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e068      	b.n	8005ae8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d104      	bne.n	8005a26 <HAL_TIM_PWM_Start+0x82>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a24:	e013      	b.n	8005a4e <HAL_TIM_PWM_Start+0xaa>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d104      	bne.n	8005a36 <HAL_TIM_PWM_Start+0x92>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a34:	e00b      	b.n	8005a4e <HAL_TIM_PWM_Start+0xaa>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d104      	bne.n	8005a46 <HAL_TIM_PWM_Start+0xa2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a44:	e003      	b.n	8005a4e <HAL_TIM_PWM_Start+0xaa>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2201      	movs	r2, #1
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f001 f9e5 	bl	8006e26 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a23      	ldr	r2, [pc, #140]	; (8005af0 <HAL_TIM_PWM_Start+0x14c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d107      	bne.n	8005a76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <HAL_TIM_PWM_Start+0x14c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d018      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x10e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a88:	d013      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x10e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a19      	ldr	r2, [pc, #100]	; (8005af4 <HAL_TIM_PWM_Start+0x150>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00e      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x10e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <HAL_TIM_PWM_Start+0x154>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x10e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a16      	ldr	r2, [pc, #88]	; (8005afc <HAL_TIM_PWM_Start+0x158>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x10e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a14      	ldr	r2, [pc, #80]	; (8005b00 <HAL_TIM_PWM_Start+0x15c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d111      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b06      	cmp	r3, #6
 8005ac2:	d010      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad4:	e007      	b.n	8005ae6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0201 	orr.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40010000 	.word	0x40010000
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800
 8005afc:	40000c00 	.word	0x40000c00
 8005b00:	40014000 	.word	0x40014000

08005b04 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2200      	movs	r2, #0
 8005b14:	6839      	ldr	r1, [r7, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f001 f985 	bl	8006e26 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a29      	ldr	r2, [pc, #164]	; (8005bc8 <HAL_TIM_PWM_Stop+0xc4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d117      	bne.n	8005b56 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6a1a      	ldr	r2, [r3, #32]
 8005b2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b30:	4013      	ands	r3, r2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10f      	bne.n	8005b56 <HAL_TIM_PWM_Stop+0x52>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6a1a      	ldr	r2, [r3, #32]
 8005b3c:	f240 4344 	movw	r3, #1092	; 0x444
 8005b40:	4013      	ands	r3, r2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d107      	bne.n	8005b56 <HAL_TIM_PWM_Stop+0x52>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a1a      	ldr	r2, [r3, #32]
 8005b5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10f      	bne.n	8005b86 <HAL_TIM_PWM_Stop+0x82>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6a1a      	ldr	r2, [r3, #32]
 8005b6c:	f240 4344 	movw	r3, #1092	; 0x444
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d107      	bne.n	8005b86 <HAL_TIM_PWM_Stop+0x82>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0201 	bic.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d104      	bne.n	8005b96 <HAL_TIM_PWM_Stop+0x92>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b94:	e013      	b.n	8005bbe <HAL_TIM_PWM_Stop+0xba>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d104      	bne.n	8005ba6 <HAL_TIM_PWM_Stop+0xa2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba4:	e00b      	b.n	8005bbe <HAL_TIM_PWM_Stop+0xba>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d104      	bne.n	8005bb6 <HAL_TIM_PWM_Stop+0xb2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bb4:	e003      	b.n	8005bbe <HAL_TIM_PWM_Stop+0xba>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40010000 	.word	0x40010000

08005bcc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e041      	b.n	8005c62 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fc faac 	bl	8002150 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f000 fcd0 	bl	80065b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d104      	bne.n	8005c8a <HAL_TIM_IC_Start_IT+0x1e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	e013      	b.n	8005cb2 <HAL_TIM_IC_Start_IT+0x46>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d104      	bne.n	8005c9a <HAL_TIM_IC_Start_IT+0x2e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	e00b      	b.n	8005cb2 <HAL_TIM_IC_Start_IT+0x46>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d104      	bne.n	8005caa <HAL_TIM_IC_Start_IT+0x3e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	e003      	b.n	8005cb2 <HAL_TIM_IC_Start_IT+0x46>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <HAL_TIM_IC_Start_IT+0x58>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	e013      	b.n	8005cec <HAL_TIM_IC_Start_IT+0x80>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d104      	bne.n	8005cd4 <HAL_TIM_IC_Start_IT+0x68>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	e00b      	b.n	8005cec <HAL_TIM_IC_Start_IT+0x80>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d104      	bne.n	8005ce4 <HAL_TIM_IC_Start_IT+0x78>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	e003      	b.n	8005cec <HAL_TIM_IC_Start_IT+0x80>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cee:	7bbb      	ldrb	r3, [r7, #14]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d102      	bne.n	8005cfa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cf4:	7b7b      	ldrb	r3, [r7, #13]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d001      	beq.n	8005cfe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e0c2      	b.n	8005e84 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d104      	bne.n	8005d0e <HAL_TIM_IC_Start_IT+0xa2>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d0c:	e013      	b.n	8005d36 <HAL_TIM_IC_Start_IT+0xca>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d104      	bne.n	8005d1e <HAL_TIM_IC_Start_IT+0xb2>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d1c:	e00b      	b.n	8005d36 <HAL_TIM_IC_Start_IT+0xca>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d104      	bne.n	8005d2e <HAL_TIM_IC_Start_IT+0xc2>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d2c:	e003      	b.n	8005d36 <HAL_TIM_IC_Start_IT+0xca>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2202      	movs	r2, #2
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <HAL_TIM_IC_Start_IT+0xda>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d44:	e013      	b.n	8005d6e <HAL_TIM_IC_Start_IT+0x102>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d104      	bne.n	8005d56 <HAL_TIM_IC_Start_IT+0xea>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d54:	e00b      	b.n	8005d6e <HAL_TIM_IC_Start_IT+0x102>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d104      	bne.n	8005d66 <HAL_TIM_IC_Start_IT+0xfa>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d64:	e003      	b.n	8005d6e <HAL_TIM_IC_Start_IT+0x102>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b0c      	cmp	r3, #12
 8005d72:	d841      	bhi.n	8005df8 <HAL_TIM_IC_Start_IT+0x18c>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <HAL_TIM_IC_Start_IT+0x110>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005db1 	.word	0x08005db1
 8005d80:	08005df9 	.word	0x08005df9
 8005d84:	08005df9 	.word	0x08005df9
 8005d88:	08005df9 	.word	0x08005df9
 8005d8c:	08005dc3 	.word	0x08005dc3
 8005d90:	08005df9 	.word	0x08005df9
 8005d94:	08005df9 	.word	0x08005df9
 8005d98:	08005df9 	.word	0x08005df9
 8005d9c:	08005dd5 	.word	0x08005dd5
 8005da0:	08005df9 	.word	0x08005df9
 8005da4:	08005df9 	.word	0x08005df9
 8005da8:	08005df9 	.word	0x08005df9
 8005dac:	08005de7 	.word	0x08005de7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0202 	orr.w	r2, r2, #2
 8005dbe:	60da      	str	r2, [r3, #12]
      break;
 8005dc0:	e01d      	b.n	8005dfe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0204 	orr.w	r2, r2, #4
 8005dd0:	60da      	str	r2, [r3, #12]
      break;
 8005dd2:	e014      	b.n	8005dfe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0208 	orr.w	r2, r2, #8
 8005de2:	60da      	str	r2, [r3, #12]
      break;
 8005de4:	e00b      	b.n	8005dfe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0210 	orr.w	r2, r2, #16
 8005df4:	60da      	str	r2, [r3, #12]
      break;
 8005df6:	e002      	b.n	8005dfe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005dfc:	bf00      	nop
  }

  if (status == HAL_OK)
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d13e      	bne.n	8005e82 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 f80a 	bl	8006e26 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1d      	ldr	r2, [pc, #116]	; (8005e8c <HAL_TIM_IC_Start_IT+0x220>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d018      	beq.n	8005e4e <HAL_TIM_IC_Start_IT+0x1e2>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e24:	d013      	beq.n	8005e4e <HAL_TIM_IC_Start_IT+0x1e2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a19      	ldr	r2, [pc, #100]	; (8005e90 <HAL_TIM_IC_Start_IT+0x224>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00e      	beq.n	8005e4e <HAL_TIM_IC_Start_IT+0x1e2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a17      	ldr	r2, [pc, #92]	; (8005e94 <HAL_TIM_IC_Start_IT+0x228>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d009      	beq.n	8005e4e <HAL_TIM_IC_Start_IT+0x1e2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a16      	ldr	r2, [pc, #88]	; (8005e98 <HAL_TIM_IC_Start_IT+0x22c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d004      	beq.n	8005e4e <HAL_TIM_IC_Start_IT+0x1e2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a14      	ldr	r2, [pc, #80]	; (8005e9c <HAL_TIM_IC_Start_IT+0x230>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d111      	bne.n	8005e72 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 0307 	and.w	r3, r3, #7
 8005e58:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b06      	cmp	r3, #6
 8005e5e:	d010      	beq.n	8005e82 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e70:	e007      	b.n	8005e82 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0201 	orr.w	r2, r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40010000 	.word	0x40010000
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800
 8005e98:	40000c00 	.word	0x40000c00
 8005e9c:	40014000 	.word	0x40014000

08005ea0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b0c      	cmp	r3, #12
 8005eb2:	d841      	bhi.n	8005f38 <HAL_TIM_IC_Stop_IT+0x98>
 8005eb4:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <HAL_TIM_IC_Stop_IT+0x1c>)
 8005eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eba:	bf00      	nop
 8005ebc:	08005ef1 	.word	0x08005ef1
 8005ec0:	08005f39 	.word	0x08005f39
 8005ec4:	08005f39 	.word	0x08005f39
 8005ec8:	08005f39 	.word	0x08005f39
 8005ecc:	08005f03 	.word	0x08005f03
 8005ed0:	08005f39 	.word	0x08005f39
 8005ed4:	08005f39 	.word	0x08005f39
 8005ed8:	08005f39 	.word	0x08005f39
 8005edc:	08005f15 	.word	0x08005f15
 8005ee0:	08005f39 	.word	0x08005f39
 8005ee4:	08005f39 	.word	0x08005f39
 8005ee8:	08005f39 	.word	0x08005f39
 8005eec:	08005f27 	.word	0x08005f27
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0202 	bic.w	r2, r2, #2
 8005efe:	60da      	str	r2, [r3, #12]
      break;
 8005f00:	e01d      	b.n	8005f3e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0204 	bic.w	r2, r2, #4
 8005f10:	60da      	str	r2, [r3, #12]
      break;
 8005f12:	e014      	b.n	8005f3e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0208 	bic.w	r2, r2, #8
 8005f22:	60da      	str	r2, [r3, #12]
      break;
 8005f24:	e00b      	b.n	8005f3e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0210 	bic.w	r2, r2, #16
 8005f34:	60da      	str	r2, [r3, #12]
      break;
 8005f36:	e002      	b.n	8005f3e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d156      	bne.n	8005ff2 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 ff6a 	bl	8006e26 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6a1a      	ldr	r2, [r3, #32]
 8005f58:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10f      	bne.n	8005f82 <HAL_TIM_IC_Stop_IT+0xe2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6a1a      	ldr	r2, [r3, #32]
 8005f68:	f240 4344 	movw	r3, #1092	; 0x444
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d107      	bne.n	8005f82 <HAL_TIM_IC_Stop_IT+0xe2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0201 	bic.w	r2, r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d104      	bne.n	8005f92 <HAL_TIM_IC_Stop_IT+0xf2>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f90:	e013      	b.n	8005fba <HAL_TIM_IC_Stop_IT+0x11a>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d104      	bne.n	8005fa2 <HAL_TIM_IC_Stop_IT+0x102>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa0:	e00b      	b.n	8005fba <HAL_TIM_IC_Stop_IT+0x11a>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d104      	bne.n	8005fb2 <HAL_TIM_IC_Stop_IT+0x112>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fb0:	e003      	b.n	8005fba <HAL_TIM_IC_Stop_IT+0x11a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <HAL_TIM_IC_Stop_IT+0x12a>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fc8:	e013      	b.n	8005ff2 <HAL_TIM_IC_Stop_IT+0x152>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d104      	bne.n	8005fda <HAL_TIM_IC_Stop_IT+0x13a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fd8:	e00b      	b.n	8005ff2 <HAL_TIM_IC_Stop_IT+0x152>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d104      	bne.n	8005fea <HAL_TIM_IC_Stop_IT+0x14a>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fe8:	e003      	b.n	8005ff2 <HAL_TIM_IC_Stop_IT+0x152>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b02      	cmp	r3, #2
 8006010:	d122      	bne.n	8006058 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b02      	cmp	r3, #2
 800601e:	d11b      	bne.n	8006058 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0202 	mvn.w	r2, #2
 8006028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	f003 0303 	and.w	r3, r3, #3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fa98 	bl	8006574 <HAL_TIM_IC_CaptureCallback>
 8006044:	e005      	b.n	8006052 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa8a 	bl	8006560 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fa9b 	bl	8006588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b04      	cmp	r3, #4
 8006064:	d122      	bne.n	80060ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b04      	cmp	r3, #4
 8006072:	d11b      	bne.n	80060ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0204 	mvn.w	r2, #4
 800607c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2202      	movs	r2, #2
 8006082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fa6e 	bl	8006574 <HAL_TIM_IC_CaptureCallback>
 8006098:	e005      	b.n	80060a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa60 	bl	8006560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fa71 	bl	8006588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b08      	cmp	r3, #8
 80060b8:	d122      	bne.n	8006100 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d11b      	bne.n	8006100 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0208 	mvn.w	r2, #8
 80060d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2204      	movs	r2, #4
 80060d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	f003 0303 	and.w	r3, r3, #3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fa44 	bl	8006574 <HAL_TIM_IC_CaptureCallback>
 80060ec:	e005      	b.n	80060fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fa36 	bl	8006560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fa47 	bl	8006588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	2b10      	cmp	r3, #16
 800610c:	d122      	bne.n	8006154 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b10      	cmp	r3, #16
 800611a:	d11b      	bne.n	8006154 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0210 	mvn.w	r2, #16
 8006124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2208      	movs	r2, #8
 800612a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fa1a 	bl	8006574 <HAL_TIM_IC_CaptureCallback>
 8006140:	e005      	b.n	800614e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fa0c 	bl	8006560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fa1d 	bl	8006588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b01      	cmp	r3, #1
 8006160:	d10e      	bne.n	8006180 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b01      	cmp	r3, #1
 800616e:	d107      	bne.n	8006180 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0201 	mvn.w	r2, #1
 8006178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f9e6 	bl	800654c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618a:	2b80      	cmp	r3, #128	; 0x80
 800618c:	d10e      	bne.n	80061ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006198:	2b80      	cmp	r3, #128	; 0x80
 800619a:	d107      	bne.n	80061ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 f88e 	bl	80072c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b6:	2b40      	cmp	r3, #64	; 0x40
 80061b8:	d10e      	bne.n	80061d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b40      	cmp	r3, #64	; 0x40
 80061c6:	d107      	bne.n	80061d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f9e2 	bl	800659c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b20      	cmp	r3, #32
 80061e4:	d10e      	bne.n	8006204 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d107      	bne.n	8006204 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0220 	mvn.w	r2, #32
 80061fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f001 f858 	bl	80072b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006226:	2302      	movs	r3, #2
 8006228:	e088      	b.n	800633c <HAL_TIM_IC_ConfigChannel+0x130>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d11b      	bne.n	8006270 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	6819      	ldr	r1, [r3, #0]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f000 fc50 	bl	8006aec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 020c 	bic.w	r2, r2, #12
 800625a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6999      	ldr	r1, [r3, #24]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	619a      	str	r2, [r3, #24]
 800626e:	e060      	b.n	8006332 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b04      	cmp	r3, #4
 8006274:	d11c      	bne.n	80062b0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6818      	ldr	r0, [r3, #0]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	6819      	ldr	r1, [r3, #0]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f000 fcc8 	bl	8006c1a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699a      	ldr	r2, [r3, #24]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006298:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6999      	ldr	r1, [r3, #24]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	021a      	lsls	r2, r3, #8
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	619a      	str	r2, [r3, #24]
 80062ae:	e040      	b.n	8006332 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b08      	cmp	r3, #8
 80062b4:	d11b      	bne.n	80062ee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6818      	ldr	r0, [r3, #0]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	6819      	ldr	r1, [r3, #0]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f000 fd15 	bl	8006cf4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69da      	ldr	r2, [r3, #28]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 020c 	bic.w	r2, r2, #12
 80062d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69d9      	ldr	r1, [r3, #28]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	61da      	str	r2, [r3, #28]
 80062ec:	e021      	b.n	8006332 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b0c      	cmp	r3, #12
 80062f2:	d11c      	bne.n	800632e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6819      	ldr	r1, [r3, #0]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f000 fd32 	bl	8006d6c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69da      	ldr	r2, [r3, #28]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006316:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	69d9      	ldr	r1, [r3, #28]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	021a      	lsls	r2, r3, #8
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	61da      	str	r2, [r3, #28]
 800632c:	e001      	b.n	8006332 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800633a:	7dfb      	ldrb	r3, [r7, #23]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800635e:	2302      	movs	r3, #2
 8006360:	e0ae      	b.n	80064c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b0c      	cmp	r3, #12
 800636e:	f200 809f 	bhi.w	80064b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006372:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	080063ad 	.word	0x080063ad
 800637c:	080064b1 	.word	0x080064b1
 8006380:	080064b1 	.word	0x080064b1
 8006384:	080064b1 	.word	0x080064b1
 8006388:	080063ed 	.word	0x080063ed
 800638c:	080064b1 	.word	0x080064b1
 8006390:	080064b1 	.word	0x080064b1
 8006394:	080064b1 	.word	0x080064b1
 8006398:	0800642f 	.word	0x0800642f
 800639c:	080064b1 	.word	0x080064b1
 80063a0:	080064b1 	.word	0x080064b1
 80063a4:	080064b1 	.word	0x080064b1
 80063a8:	0800646f 	.word	0x0800646f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 f97c 	bl	80066b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0208 	orr.w	r2, r2, #8
 80063c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0204 	bic.w	r2, r2, #4
 80063d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6999      	ldr	r1, [r3, #24]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	619a      	str	r2, [r3, #24]
      break;
 80063ea:	e064      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 f9c2 	bl	800677c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6999      	ldr	r1, [r3, #24]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	021a      	lsls	r2, r3, #8
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	619a      	str	r2, [r3, #24]
      break;
 800642c:	e043      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fa0d 	bl	8006854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0208 	orr.w	r2, r2, #8
 8006448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0204 	bic.w	r2, r2, #4
 8006458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69d9      	ldr	r1, [r3, #28]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	61da      	str	r2, [r3, #28]
      break;
 800646c:	e023      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fa57 	bl	8006928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69d9      	ldr	r1, [r3, #28]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	021a      	lsls	r2, r3, #8
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	61da      	str	r2, [r3, #28]
      break;
 80064ae:	e002      	b.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	75fb      	strb	r3, [r7, #23]
      break;
 80064b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064be:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80064dc:	2302      	movs	r3, #2
 80064de:	e031      	b.n	8006544 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa68 	bl	80069c8 <TIM_SlaveTimer_SetConfig>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e018      	b.n	8006544 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006520:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006530:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a34      	ldr	r2, [pc, #208]	; (8006694 <TIM_Base_SetConfig+0xe4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00f      	beq.n	80065e8 <TIM_Base_SetConfig+0x38>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ce:	d00b      	beq.n	80065e8 <TIM_Base_SetConfig+0x38>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a31      	ldr	r2, [pc, #196]	; (8006698 <TIM_Base_SetConfig+0xe8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d007      	beq.n	80065e8 <TIM_Base_SetConfig+0x38>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a30      	ldr	r2, [pc, #192]	; (800669c <TIM_Base_SetConfig+0xec>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_Base_SetConfig+0x38>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a2f      	ldr	r2, [pc, #188]	; (80066a0 <TIM_Base_SetConfig+0xf0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d108      	bne.n	80065fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a25      	ldr	r2, [pc, #148]	; (8006694 <TIM_Base_SetConfig+0xe4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d01b      	beq.n	800663a <TIM_Base_SetConfig+0x8a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006608:	d017      	beq.n	800663a <TIM_Base_SetConfig+0x8a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a22      	ldr	r2, [pc, #136]	; (8006698 <TIM_Base_SetConfig+0xe8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d013      	beq.n	800663a <TIM_Base_SetConfig+0x8a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a21      	ldr	r2, [pc, #132]	; (800669c <TIM_Base_SetConfig+0xec>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00f      	beq.n	800663a <TIM_Base_SetConfig+0x8a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a20      	ldr	r2, [pc, #128]	; (80066a0 <TIM_Base_SetConfig+0xf0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00b      	beq.n	800663a <TIM_Base_SetConfig+0x8a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a1f      	ldr	r2, [pc, #124]	; (80066a4 <TIM_Base_SetConfig+0xf4>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d007      	beq.n	800663a <TIM_Base_SetConfig+0x8a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a1e      	ldr	r2, [pc, #120]	; (80066a8 <TIM_Base_SetConfig+0xf8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d003      	beq.n	800663a <TIM_Base_SetConfig+0x8a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a1d      	ldr	r2, [pc, #116]	; (80066ac <TIM_Base_SetConfig+0xfc>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d108      	bne.n	800664c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a08      	ldr	r2, [pc, #32]	; (8006694 <TIM_Base_SetConfig+0xe4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d103      	bne.n	8006680 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	691a      	ldr	r2, [r3, #16]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	615a      	str	r2, [r3, #20]
}
 8006686:	bf00      	nop
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40010000 	.word	0x40010000
 8006698:	40000400 	.word	0x40000400
 800669c:	40000800 	.word	0x40000800
 80066a0:	40000c00 	.word	0x40000c00
 80066a4:	40014000 	.word	0x40014000
 80066a8:	40014400 	.word	0x40014400
 80066ac:	40014800 	.word	0x40014800

080066b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f023 0201 	bic.w	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0303 	bic.w	r3, r3, #3
 80066e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f023 0302 	bic.w	r3, r3, #2
 80066f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a1c      	ldr	r2, [pc, #112]	; (8006778 <TIM_OC1_SetConfig+0xc8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d10c      	bne.n	8006726 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f023 0308 	bic.w	r3, r3, #8
 8006712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f023 0304 	bic.w	r3, r3, #4
 8006724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a13      	ldr	r2, [pc, #76]	; (8006778 <TIM_OC1_SetConfig+0xc8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d111      	bne.n	8006752 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800673c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	621a      	str	r2, [r3, #32]
}
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	40010000 	.word	0x40010000

0800677c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f023 0210 	bic.w	r2, r3, #16
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f023 0320 	bic.w	r3, r3, #32
 80067c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	011b      	lsls	r3, r3, #4
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a1e      	ldr	r2, [pc, #120]	; (8006850 <TIM_OC2_SetConfig+0xd4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d10d      	bne.n	80067f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a15      	ldr	r2, [pc, #84]	; (8006850 <TIM_OC2_SetConfig+0xd4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d113      	bne.n	8006828 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800680e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	621a      	str	r2, [r3, #32]
}
 8006842:	bf00      	nop
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40010000 	.word	0x40010000

08006854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0303 	bic.w	r3, r3, #3
 800688a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800689c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a1d      	ldr	r2, [pc, #116]	; (8006924 <TIM_OC3_SetConfig+0xd0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d10d      	bne.n	80068ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a14      	ldr	r2, [pc, #80]	; (8006924 <TIM_OC3_SetConfig+0xd0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d113      	bne.n	80068fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	621a      	str	r2, [r3, #32]
}
 8006918:	bf00      	nop
 800691a:	371c      	adds	r7, #28
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	40010000 	.word	0x40010000

08006928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800695e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4313      	orrs	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	031b      	lsls	r3, r3, #12
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a10      	ldr	r2, [pc, #64]	; (80069c4 <TIM_OC4_SetConfig+0x9c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d109      	bne.n	800699c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800698e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	019b      	lsls	r3, r3, #6
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	621a      	str	r2, [r3, #32]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000

080069c8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f023 0307 	bic.w	r3, r3, #7
 80069f6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b70      	cmp	r3, #112	; 0x70
 8006a10:	d01a      	beq.n	8006a48 <TIM_SlaveTimer_SetConfig+0x80>
 8006a12:	2b70      	cmp	r3, #112	; 0x70
 8006a14:	d860      	bhi.n	8006ad8 <TIM_SlaveTimer_SetConfig+0x110>
 8006a16:	2b60      	cmp	r3, #96	; 0x60
 8006a18:	d054      	beq.n	8006ac4 <TIM_SlaveTimer_SetConfig+0xfc>
 8006a1a:	2b60      	cmp	r3, #96	; 0x60
 8006a1c:	d85c      	bhi.n	8006ad8 <TIM_SlaveTimer_SetConfig+0x110>
 8006a1e:	2b50      	cmp	r3, #80	; 0x50
 8006a20:	d046      	beq.n	8006ab0 <TIM_SlaveTimer_SetConfig+0xe8>
 8006a22:	2b50      	cmp	r3, #80	; 0x50
 8006a24:	d858      	bhi.n	8006ad8 <TIM_SlaveTimer_SetConfig+0x110>
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	d019      	beq.n	8006a5e <TIM_SlaveTimer_SetConfig+0x96>
 8006a2a:	2b40      	cmp	r3, #64	; 0x40
 8006a2c:	d854      	bhi.n	8006ad8 <TIM_SlaveTimer_SetConfig+0x110>
 8006a2e:	2b30      	cmp	r3, #48	; 0x30
 8006a30:	d055      	beq.n	8006ade <TIM_SlaveTimer_SetConfig+0x116>
 8006a32:	2b30      	cmp	r3, #48	; 0x30
 8006a34:	d850      	bhi.n	8006ad8 <TIM_SlaveTimer_SetConfig+0x110>
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	d051      	beq.n	8006ade <TIM_SlaveTimer_SetConfig+0x116>
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d84c      	bhi.n	8006ad8 <TIM_SlaveTimer_SetConfig+0x110>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d04d      	beq.n	8006ade <TIM_SlaveTimer_SetConfig+0x116>
 8006a42:	2b10      	cmp	r3, #16
 8006a44:	d04b      	beq.n	8006ade <TIM_SlaveTimer_SetConfig+0x116>
 8006a46:	e047      	b.n	8006ad8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6818      	ldr	r0, [r3, #0]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68d9      	ldr	r1, [r3, #12]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	f000 f9c5 	bl	8006de6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006a5c:	e040      	b.n	8006ae0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b05      	cmp	r3, #5
 8006a64:	d101      	bne.n	8006a6a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e03b      	b.n	8006ae2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6a1a      	ldr	r2, [r3, #32]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0201 	bic.w	r2, r2, #1
 8006a80:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a90:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	621a      	str	r2, [r3, #32]
      break;
 8006aae:	e017      	b.n	8006ae0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6818      	ldr	r0, [r3, #0]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	6899      	ldr	r1, [r3, #8]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	461a      	mov	r2, r3
 8006abe:	f000 f87d 	bl	8006bbc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006ac2:	e00d      	b.n	8006ae0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	6899      	ldr	r1, [r3, #8]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	f000 f8df 	bl	8006c94 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006ad6:	e003      	b.n	8006ae0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	75fb      	strb	r3, [r7, #23]
      break;
 8006adc:	e000      	b.n	8006ae0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006ade:	bf00      	nop
  }

  return status;
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	f023 0201 	bic.w	r2, r3, #1
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a24      	ldr	r2, [pc, #144]	; (8006ba8 <TIM_TI1_SetConfig+0xbc>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d013      	beq.n	8006b42 <TIM_TI1_SetConfig+0x56>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b20:	d00f      	beq.n	8006b42 <TIM_TI1_SetConfig+0x56>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4a21      	ldr	r2, [pc, #132]	; (8006bac <TIM_TI1_SetConfig+0xc0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00b      	beq.n	8006b42 <TIM_TI1_SetConfig+0x56>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4a20      	ldr	r2, [pc, #128]	; (8006bb0 <TIM_TI1_SetConfig+0xc4>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d007      	beq.n	8006b42 <TIM_TI1_SetConfig+0x56>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4a1f      	ldr	r2, [pc, #124]	; (8006bb4 <TIM_TI1_SetConfig+0xc8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d003      	beq.n	8006b42 <TIM_TI1_SetConfig+0x56>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a1e      	ldr	r2, [pc, #120]	; (8006bb8 <TIM_TI1_SetConfig+0xcc>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d101      	bne.n	8006b46 <TIM_TI1_SetConfig+0x5a>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <TIM_TI1_SetConfig+0x5c>
 8006b46:	2300      	movs	r3, #0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d008      	beq.n	8006b5e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e003      	b.n	8006b66 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	011b      	lsls	r3, r3, #4
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f023 030a 	bic.w	r3, r3, #10
 8006b80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f003 030a 	and.w	r3, r3, #10
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	621a      	str	r2, [r3, #32]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	40010000 	.word	0x40010000
 8006bac:	40000400 	.word	0x40000400
 8006bb0:	40000800 	.word	0x40000800
 8006bb4:	40000c00 	.word	0x40000c00
 8006bb8:	40014000 	.word	0x40014000

08006bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f023 0201 	bic.w	r2, r3, #1
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	011b      	lsls	r3, r3, #4
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f023 030a 	bic.w	r3, r3, #10
 8006bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	621a      	str	r2, [r3, #32]
}
 8006c0e:	bf00      	nop
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b087      	sub	sp, #28
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	f023 0210 	bic.w	r2, r3, #16
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	021b      	lsls	r3, r3, #8
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	031b      	lsls	r3, r3, #12
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	621a      	str	r2, [r3, #32]
}
 8006c88:	bf00      	nop
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	f023 0210 	bic.w	r2, r3, #16
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	031b      	lsls	r3, r3, #12
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	621a      	str	r2, [r3, #32]
}
 8006ce8:	bf00      	nop
 8006cea:	371c      	adds	r7, #28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f023 0303 	bic.w	r3, r3, #3
 8006d20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	011b      	lsls	r3, r3, #4
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	021b      	lsls	r3, r3, #8
 8006d4a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	621a      	str	r2, [r3, #32]
}
 8006d60:	bf00      	nop
 8006d62:	371c      	adds	r7, #28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006daa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	031b      	lsls	r3, r3, #12
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	031b      	lsls	r3, r3, #12
 8006dc4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b087      	sub	sp, #28
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
 8006df2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	021a      	lsls	r2, r3, #8
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	609a      	str	r2, [r3, #8]
}
 8006e1a:	bf00      	nop
 8006e1c:	371c      	adds	r7, #28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b087      	sub	sp, #28
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	2201      	movs	r2, #1
 8006e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a1a      	ldr	r2, [r3, #32]
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	43db      	mvns	r3, r3
 8006e48:	401a      	ands	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1a      	ldr	r2, [r3, #32]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	621a      	str	r2, [r3, #32]
}
 8006e64:	bf00      	nop
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08a      	sub	sp, #40	; 0x28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e09a      	b.n	8006fba <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d106      	bne.n	8006e9e <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7fb f8e9 	bl	8002070 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f7ff fb7d 	bl	80065b0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	6819      	ldr	r1, [r3, #0]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2203      	movs	r2, #3
 8006ec4:	f7ff fe12 	bl	8006aec <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 020c 	bic.w	r2, r2, #12
 8006ed6:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6999      	ldr	r1, [r3, #24]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ef8:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006f08:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f18:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0207 	bic.w	r2, r2, #7
 8006f28:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f042 0204 	orr.w	r2, r2, #4
 8006f38:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006f42:	2370      	movs	r3, #112	; 0x70
 8006f44:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006f46:	2300      	movs	r3, #0
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f107 020c 	add.w	r2, r7, #12
 8006f60:	4611      	mov	r1, r2
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff fc0a 	bl	800677c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006f76:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8006f86:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3728      	adds	r7, #40	; 0x28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fd2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fda:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fe2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fea:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d108      	bne.n	8007004 <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ff2:	7bbb      	ldrb	r3, [r7, #14]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d105      	bne.n	8007004 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ff8:	7b7b      	ldrb	r3, [r7, #13]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d102      	bne.n	8007004 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ffe:	7b3b      	ldrb	r3, [r7, #12]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d001      	beq.n	8007008 <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e04f      	b.n	80070a8 <HAL_TIMEx_HallSensor_Start+0xe4>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2201      	movs	r2, #1
 800702e:	2100      	movs	r1, #0
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff fef8 	bl	8006e26 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1d      	ldr	r2, [pc, #116]	; (80070b0 <HAL_TIMEx_HallSensor_Start+0xec>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d018      	beq.n	8007072 <HAL_TIMEx_HallSensor_Start+0xae>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007048:	d013      	beq.n	8007072 <HAL_TIMEx_HallSensor_Start+0xae>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a19      	ldr	r2, [pc, #100]	; (80070b4 <HAL_TIMEx_HallSensor_Start+0xf0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00e      	beq.n	8007072 <HAL_TIMEx_HallSensor_Start+0xae>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a17      	ldr	r2, [pc, #92]	; (80070b8 <HAL_TIMEx_HallSensor_Start+0xf4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d009      	beq.n	8007072 <HAL_TIMEx_HallSensor_Start+0xae>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a16      	ldr	r2, [pc, #88]	; (80070bc <HAL_TIMEx_HallSensor_Start+0xf8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d004      	beq.n	8007072 <HAL_TIMEx_HallSensor_Start+0xae>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a14      	ldr	r2, [pc, #80]	; (80070c0 <HAL_TIMEx_HallSensor_Start+0xfc>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d111      	bne.n	8007096 <HAL_TIMEx_HallSensor_Start+0xd2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b06      	cmp	r3, #6
 8007082:	d010      	beq.n	80070a6 <HAL_TIMEx_HallSensor_Start+0xe2>
    {
      __HAL_TIM_ENABLE(htim);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0201 	orr.w	r2, r2, #1
 8007092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007094:	e007      	b.n	80070a6 <HAL_TIMEx_HallSensor_Start+0xe2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f042 0201 	orr.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	40010000 	.word	0x40010000
 80070b4:	40000400 	.word	0x40000400
 80070b8:	40000800 	.word	0x40000800
 80070bc:	40000c00 	.word	0x40000c00
 80070c0:	40014000 	.word	0x40014000

080070c4 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2200      	movs	r2, #0
 80070d2:	2100      	movs	r1, #0
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff fea6 	bl	8006e26 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6a1a      	ldr	r2, [r3, #32]
 80070e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80070e4:	4013      	ands	r3, r2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10f      	bne.n	800710a <HAL_TIMEx_HallSensor_Stop+0x46>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6a1a      	ldr	r2, [r3, #32]
 80070f0:	f240 4344 	movw	r3, #1092	; 0x444
 80070f4:	4013      	ands	r3, r2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d107      	bne.n	800710a <HAL_TIMEx_HallSensor_Stop+0x46>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0201 	bic.w	r2, r2, #1
 8007108:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007148:	2302      	movs	r3, #2
 800714a:	e050      	b.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a1c      	ldr	r2, [pc, #112]	; (80071fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d018      	beq.n	80071c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007198:	d013      	beq.n	80071c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a18      	ldr	r2, [pc, #96]	; (8007200 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00e      	beq.n	80071c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a16      	ldr	r2, [pc, #88]	; (8007204 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d009      	beq.n	80071c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a15      	ldr	r2, [pc, #84]	; (8007208 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d004      	beq.n	80071c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a13      	ldr	r2, [pc, #76]	; (800720c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d10c      	bne.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	40010000 	.word	0x40010000
 8007200:	40000400 	.word	0x40000400
 8007204:	40000800 	.word	0x40000800
 8007208:	40000c00 	.word	0x40000c00
 800720c:	40014000 	.word	0x40014000

08007210 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007228:	2302      	movs	r3, #2
 800722a:	e03d      	b.n	80072a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	4313      	orrs	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	4313      	orrs	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <__cvt>:
 80072dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072e0:	ec55 4b10 	vmov	r4, r5, d0
 80072e4:	2d00      	cmp	r5, #0
 80072e6:	460e      	mov	r6, r1
 80072e8:	4619      	mov	r1, r3
 80072ea:	462b      	mov	r3, r5
 80072ec:	bfbb      	ittet	lt
 80072ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072f2:	461d      	movlt	r5, r3
 80072f4:	2300      	movge	r3, #0
 80072f6:	232d      	movlt	r3, #45	; 0x2d
 80072f8:	700b      	strb	r3, [r1, #0]
 80072fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007300:	4691      	mov	r9, r2
 8007302:	f023 0820 	bic.w	r8, r3, #32
 8007306:	bfbc      	itt	lt
 8007308:	4622      	movlt	r2, r4
 800730a:	4614      	movlt	r4, r2
 800730c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007310:	d005      	beq.n	800731e <__cvt+0x42>
 8007312:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007316:	d100      	bne.n	800731a <__cvt+0x3e>
 8007318:	3601      	adds	r6, #1
 800731a:	2102      	movs	r1, #2
 800731c:	e000      	b.n	8007320 <__cvt+0x44>
 800731e:	2103      	movs	r1, #3
 8007320:	ab03      	add	r3, sp, #12
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	ab02      	add	r3, sp, #8
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	ec45 4b10 	vmov	d0, r4, r5
 800732c:	4653      	mov	r3, sl
 800732e:	4632      	mov	r2, r6
 8007330:	f000 fe4a 	bl	8007fc8 <_dtoa_r>
 8007334:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007338:	4607      	mov	r7, r0
 800733a:	d102      	bne.n	8007342 <__cvt+0x66>
 800733c:	f019 0f01 	tst.w	r9, #1
 8007340:	d022      	beq.n	8007388 <__cvt+0xac>
 8007342:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007346:	eb07 0906 	add.w	r9, r7, r6
 800734a:	d110      	bne.n	800736e <__cvt+0x92>
 800734c:	783b      	ldrb	r3, [r7, #0]
 800734e:	2b30      	cmp	r3, #48	; 0x30
 8007350:	d10a      	bne.n	8007368 <__cvt+0x8c>
 8007352:	2200      	movs	r2, #0
 8007354:	2300      	movs	r3, #0
 8007356:	4620      	mov	r0, r4
 8007358:	4629      	mov	r1, r5
 800735a:	f7f9 fbbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800735e:	b918      	cbnz	r0, 8007368 <__cvt+0x8c>
 8007360:	f1c6 0601 	rsb	r6, r6, #1
 8007364:	f8ca 6000 	str.w	r6, [sl]
 8007368:	f8da 3000 	ldr.w	r3, [sl]
 800736c:	4499      	add	r9, r3
 800736e:	2200      	movs	r2, #0
 8007370:	2300      	movs	r3, #0
 8007372:	4620      	mov	r0, r4
 8007374:	4629      	mov	r1, r5
 8007376:	f7f9 fbaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800737a:	b108      	cbz	r0, 8007380 <__cvt+0xa4>
 800737c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007380:	2230      	movs	r2, #48	; 0x30
 8007382:	9b03      	ldr	r3, [sp, #12]
 8007384:	454b      	cmp	r3, r9
 8007386:	d307      	bcc.n	8007398 <__cvt+0xbc>
 8007388:	9b03      	ldr	r3, [sp, #12]
 800738a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800738c:	1bdb      	subs	r3, r3, r7
 800738e:	4638      	mov	r0, r7
 8007390:	6013      	str	r3, [r2, #0]
 8007392:	b004      	add	sp, #16
 8007394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007398:	1c59      	adds	r1, r3, #1
 800739a:	9103      	str	r1, [sp, #12]
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	e7f0      	b.n	8007382 <__cvt+0xa6>

080073a0 <__exponent>:
 80073a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073a2:	4603      	mov	r3, r0
 80073a4:	2900      	cmp	r1, #0
 80073a6:	bfb8      	it	lt
 80073a8:	4249      	neglt	r1, r1
 80073aa:	f803 2b02 	strb.w	r2, [r3], #2
 80073ae:	bfb4      	ite	lt
 80073b0:	222d      	movlt	r2, #45	; 0x2d
 80073b2:	222b      	movge	r2, #43	; 0x2b
 80073b4:	2909      	cmp	r1, #9
 80073b6:	7042      	strb	r2, [r0, #1]
 80073b8:	dd2a      	ble.n	8007410 <__exponent+0x70>
 80073ba:	f10d 0207 	add.w	r2, sp, #7
 80073be:	4617      	mov	r7, r2
 80073c0:	260a      	movs	r6, #10
 80073c2:	4694      	mov	ip, r2
 80073c4:	fb91 f5f6 	sdiv	r5, r1, r6
 80073c8:	fb06 1415 	mls	r4, r6, r5, r1
 80073cc:	3430      	adds	r4, #48	; 0x30
 80073ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80073d2:	460c      	mov	r4, r1
 80073d4:	2c63      	cmp	r4, #99	; 0x63
 80073d6:	f102 32ff 	add.w	r2, r2, #4294967295
 80073da:	4629      	mov	r1, r5
 80073dc:	dcf1      	bgt.n	80073c2 <__exponent+0x22>
 80073de:	3130      	adds	r1, #48	; 0x30
 80073e0:	f1ac 0402 	sub.w	r4, ip, #2
 80073e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80073e8:	1c41      	adds	r1, r0, #1
 80073ea:	4622      	mov	r2, r4
 80073ec:	42ba      	cmp	r2, r7
 80073ee:	d30a      	bcc.n	8007406 <__exponent+0x66>
 80073f0:	f10d 0209 	add.w	r2, sp, #9
 80073f4:	eba2 020c 	sub.w	r2, r2, ip
 80073f8:	42bc      	cmp	r4, r7
 80073fa:	bf88      	it	hi
 80073fc:	2200      	movhi	r2, #0
 80073fe:	4413      	add	r3, r2
 8007400:	1a18      	subs	r0, r3, r0
 8007402:	b003      	add	sp, #12
 8007404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007406:	f812 5b01 	ldrb.w	r5, [r2], #1
 800740a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800740e:	e7ed      	b.n	80073ec <__exponent+0x4c>
 8007410:	2330      	movs	r3, #48	; 0x30
 8007412:	3130      	adds	r1, #48	; 0x30
 8007414:	7083      	strb	r3, [r0, #2]
 8007416:	70c1      	strb	r1, [r0, #3]
 8007418:	1d03      	adds	r3, r0, #4
 800741a:	e7f1      	b.n	8007400 <__exponent+0x60>

0800741c <_printf_float>:
 800741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007420:	ed2d 8b02 	vpush	{d8}
 8007424:	b08d      	sub	sp, #52	; 0x34
 8007426:	460c      	mov	r4, r1
 8007428:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800742c:	4616      	mov	r6, r2
 800742e:	461f      	mov	r7, r3
 8007430:	4605      	mov	r5, r0
 8007432:	f000 fcc7 	bl	8007dc4 <_localeconv_r>
 8007436:	f8d0 a000 	ldr.w	sl, [r0]
 800743a:	4650      	mov	r0, sl
 800743c:	f7f8 ff20 	bl	8000280 <strlen>
 8007440:	2300      	movs	r3, #0
 8007442:	930a      	str	r3, [sp, #40]	; 0x28
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	9305      	str	r3, [sp, #20]
 8007448:	f8d8 3000 	ldr.w	r3, [r8]
 800744c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007450:	3307      	adds	r3, #7
 8007452:	f023 0307 	bic.w	r3, r3, #7
 8007456:	f103 0208 	add.w	r2, r3, #8
 800745a:	f8c8 2000 	str.w	r2, [r8]
 800745e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007462:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007466:	9307      	str	r3, [sp, #28]
 8007468:	f8cd 8018 	str.w	r8, [sp, #24]
 800746c:	ee08 0a10 	vmov	s16, r0
 8007470:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007474:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007478:	4b9e      	ldr	r3, [pc, #632]	; (80076f4 <_printf_float+0x2d8>)
 800747a:	f04f 32ff 	mov.w	r2, #4294967295
 800747e:	f7f9 fb5d 	bl	8000b3c <__aeabi_dcmpun>
 8007482:	bb88      	cbnz	r0, 80074e8 <_printf_float+0xcc>
 8007484:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007488:	4b9a      	ldr	r3, [pc, #616]	; (80076f4 <_printf_float+0x2d8>)
 800748a:	f04f 32ff 	mov.w	r2, #4294967295
 800748e:	f7f9 fb37 	bl	8000b00 <__aeabi_dcmple>
 8007492:	bb48      	cbnz	r0, 80074e8 <_printf_float+0xcc>
 8007494:	2200      	movs	r2, #0
 8007496:	2300      	movs	r3, #0
 8007498:	4640      	mov	r0, r8
 800749a:	4649      	mov	r1, r9
 800749c:	f7f9 fb26 	bl	8000aec <__aeabi_dcmplt>
 80074a0:	b110      	cbz	r0, 80074a8 <_printf_float+0x8c>
 80074a2:	232d      	movs	r3, #45	; 0x2d
 80074a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074a8:	4a93      	ldr	r2, [pc, #588]	; (80076f8 <_printf_float+0x2dc>)
 80074aa:	4b94      	ldr	r3, [pc, #592]	; (80076fc <_printf_float+0x2e0>)
 80074ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80074b0:	bf94      	ite	ls
 80074b2:	4690      	movls	r8, r2
 80074b4:	4698      	movhi	r8, r3
 80074b6:	2303      	movs	r3, #3
 80074b8:	6123      	str	r3, [r4, #16]
 80074ba:	9b05      	ldr	r3, [sp, #20]
 80074bc:	f023 0304 	bic.w	r3, r3, #4
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	f04f 0900 	mov.w	r9, #0
 80074c6:	9700      	str	r7, [sp, #0]
 80074c8:	4633      	mov	r3, r6
 80074ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80074cc:	4621      	mov	r1, r4
 80074ce:	4628      	mov	r0, r5
 80074d0:	f000 f9da 	bl	8007888 <_printf_common>
 80074d4:	3001      	adds	r0, #1
 80074d6:	f040 8090 	bne.w	80075fa <_printf_float+0x1de>
 80074da:	f04f 30ff 	mov.w	r0, #4294967295
 80074de:	b00d      	add	sp, #52	; 0x34
 80074e0:	ecbd 8b02 	vpop	{d8}
 80074e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e8:	4642      	mov	r2, r8
 80074ea:	464b      	mov	r3, r9
 80074ec:	4640      	mov	r0, r8
 80074ee:	4649      	mov	r1, r9
 80074f0:	f7f9 fb24 	bl	8000b3c <__aeabi_dcmpun>
 80074f4:	b140      	cbz	r0, 8007508 <_printf_float+0xec>
 80074f6:	464b      	mov	r3, r9
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	bfbc      	itt	lt
 80074fc:	232d      	movlt	r3, #45	; 0x2d
 80074fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007502:	4a7f      	ldr	r2, [pc, #508]	; (8007700 <_printf_float+0x2e4>)
 8007504:	4b7f      	ldr	r3, [pc, #508]	; (8007704 <_printf_float+0x2e8>)
 8007506:	e7d1      	b.n	80074ac <_printf_float+0x90>
 8007508:	6863      	ldr	r3, [r4, #4]
 800750a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800750e:	9206      	str	r2, [sp, #24]
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	d13f      	bne.n	8007594 <_printf_float+0x178>
 8007514:	2306      	movs	r3, #6
 8007516:	6063      	str	r3, [r4, #4]
 8007518:	9b05      	ldr	r3, [sp, #20]
 800751a:	6861      	ldr	r1, [r4, #4]
 800751c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007520:	2300      	movs	r3, #0
 8007522:	9303      	str	r3, [sp, #12]
 8007524:	ab0a      	add	r3, sp, #40	; 0x28
 8007526:	e9cd b301 	strd	fp, r3, [sp, #4]
 800752a:	ab09      	add	r3, sp, #36	; 0x24
 800752c:	ec49 8b10 	vmov	d0, r8, r9
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	6022      	str	r2, [r4, #0]
 8007534:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007538:	4628      	mov	r0, r5
 800753a:	f7ff fecf 	bl	80072dc <__cvt>
 800753e:	9b06      	ldr	r3, [sp, #24]
 8007540:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007542:	2b47      	cmp	r3, #71	; 0x47
 8007544:	4680      	mov	r8, r0
 8007546:	d108      	bne.n	800755a <_printf_float+0x13e>
 8007548:	1cc8      	adds	r0, r1, #3
 800754a:	db02      	blt.n	8007552 <_printf_float+0x136>
 800754c:	6863      	ldr	r3, [r4, #4]
 800754e:	4299      	cmp	r1, r3
 8007550:	dd41      	ble.n	80075d6 <_printf_float+0x1ba>
 8007552:	f1ab 0302 	sub.w	r3, fp, #2
 8007556:	fa5f fb83 	uxtb.w	fp, r3
 800755a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800755e:	d820      	bhi.n	80075a2 <_printf_float+0x186>
 8007560:	3901      	subs	r1, #1
 8007562:	465a      	mov	r2, fp
 8007564:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007568:	9109      	str	r1, [sp, #36]	; 0x24
 800756a:	f7ff ff19 	bl	80073a0 <__exponent>
 800756e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007570:	1813      	adds	r3, r2, r0
 8007572:	2a01      	cmp	r2, #1
 8007574:	4681      	mov	r9, r0
 8007576:	6123      	str	r3, [r4, #16]
 8007578:	dc02      	bgt.n	8007580 <_printf_float+0x164>
 800757a:	6822      	ldr	r2, [r4, #0]
 800757c:	07d2      	lsls	r2, r2, #31
 800757e:	d501      	bpl.n	8007584 <_printf_float+0x168>
 8007580:	3301      	adds	r3, #1
 8007582:	6123      	str	r3, [r4, #16]
 8007584:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007588:	2b00      	cmp	r3, #0
 800758a:	d09c      	beq.n	80074c6 <_printf_float+0xaa>
 800758c:	232d      	movs	r3, #45	; 0x2d
 800758e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007592:	e798      	b.n	80074c6 <_printf_float+0xaa>
 8007594:	9a06      	ldr	r2, [sp, #24]
 8007596:	2a47      	cmp	r2, #71	; 0x47
 8007598:	d1be      	bne.n	8007518 <_printf_float+0xfc>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1bc      	bne.n	8007518 <_printf_float+0xfc>
 800759e:	2301      	movs	r3, #1
 80075a0:	e7b9      	b.n	8007516 <_printf_float+0xfa>
 80075a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80075a6:	d118      	bne.n	80075da <_printf_float+0x1be>
 80075a8:	2900      	cmp	r1, #0
 80075aa:	6863      	ldr	r3, [r4, #4]
 80075ac:	dd0b      	ble.n	80075c6 <_printf_float+0x1aa>
 80075ae:	6121      	str	r1, [r4, #16]
 80075b0:	b913      	cbnz	r3, 80075b8 <_printf_float+0x19c>
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	07d0      	lsls	r0, r2, #31
 80075b6:	d502      	bpl.n	80075be <_printf_float+0x1a2>
 80075b8:	3301      	adds	r3, #1
 80075ba:	440b      	add	r3, r1
 80075bc:	6123      	str	r3, [r4, #16]
 80075be:	65a1      	str	r1, [r4, #88]	; 0x58
 80075c0:	f04f 0900 	mov.w	r9, #0
 80075c4:	e7de      	b.n	8007584 <_printf_float+0x168>
 80075c6:	b913      	cbnz	r3, 80075ce <_printf_float+0x1b2>
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	07d2      	lsls	r2, r2, #31
 80075cc:	d501      	bpl.n	80075d2 <_printf_float+0x1b6>
 80075ce:	3302      	adds	r3, #2
 80075d0:	e7f4      	b.n	80075bc <_printf_float+0x1a0>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e7f2      	b.n	80075bc <_printf_float+0x1a0>
 80075d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80075da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075dc:	4299      	cmp	r1, r3
 80075de:	db05      	blt.n	80075ec <_printf_float+0x1d0>
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	6121      	str	r1, [r4, #16]
 80075e4:	07d8      	lsls	r0, r3, #31
 80075e6:	d5ea      	bpl.n	80075be <_printf_float+0x1a2>
 80075e8:	1c4b      	adds	r3, r1, #1
 80075ea:	e7e7      	b.n	80075bc <_printf_float+0x1a0>
 80075ec:	2900      	cmp	r1, #0
 80075ee:	bfd4      	ite	le
 80075f0:	f1c1 0202 	rsble	r2, r1, #2
 80075f4:	2201      	movgt	r2, #1
 80075f6:	4413      	add	r3, r2
 80075f8:	e7e0      	b.n	80075bc <_printf_float+0x1a0>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	055a      	lsls	r2, r3, #21
 80075fe:	d407      	bmi.n	8007610 <_printf_float+0x1f4>
 8007600:	6923      	ldr	r3, [r4, #16]
 8007602:	4642      	mov	r2, r8
 8007604:	4631      	mov	r1, r6
 8007606:	4628      	mov	r0, r5
 8007608:	47b8      	blx	r7
 800760a:	3001      	adds	r0, #1
 800760c:	d12c      	bne.n	8007668 <_printf_float+0x24c>
 800760e:	e764      	b.n	80074da <_printf_float+0xbe>
 8007610:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007614:	f240 80e0 	bls.w	80077d8 <_printf_float+0x3bc>
 8007618:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800761c:	2200      	movs	r2, #0
 800761e:	2300      	movs	r3, #0
 8007620:	f7f9 fa5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007624:	2800      	cmp	r0, #0
 8007626:	d034      	beq.n	8007692 <_printf_float+0x276>
 8007628:	4a37      	ldr	r2, [pc, #220]	; (8007708 <_printf_float+0x2ec>)
 800762a:	2301      	movs	r3, #1
 800762c:	4631      	mov	r1, r6
 800762e:	4628      	mov	r0, r5
 8007630:	47b8      	blx	r7
 8007632:	3001      	adds	r0, #1
 8007634:	f43f af51 	beq.w	80074da <_printf_float+0xbe>
 8007638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800763c:	429a      	cmp	r2, r3
 800763e:	db02      	blt.n	8007646 <_printf_float+0x22a>
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	07d8      	lsls	r0, r3, #31
 8007644:	d510      	bpl.n	8007668 <_printf_float+0x24c>
 8007646:	ee18 3a10 	vmov	r3, s16
 800764a:	4652      	mov	r2, sl
 800764c:	4631      	mov	r1, r6
 800764e:	4628      	mov	r0, r5
 8007650:	47b8      	blx	r7
 8007652:	3001      	adds	r0, #1
 8007654:	f43f af41 	beq.w	80074da <_printf_float+0xbe>
 8007658:	f04f 0800 	mov.w	r8, #0
 800765c:	f104 091a 	add.w	r9, r4, #26
 8007660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007662:	3b01      	subs	r3, #1
 8007664:	4543      	cmp	r3, r8
 8007666:	dc09      	bgt.n	800767c <_printf_float+0x260>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	079b      	lsls	r3, r3, #30
 800766c:	f100 8107 	bmi.w	800787e <_printf_float+0x462>
 8007670:	68e0      	ldr	r0, [r4, #12]
 8007672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007674:	4298      	cmp	r0, r3
 8007676:	bfb8      	it	lt
 8007678:	4618      	movlt	r0, r3
 800767a:	e730      	b.n	80074de <_printf_float+0xc2>
 800767c:	2301      	movs	r3, #1
 800767e:	464a      	mov	r2, r9
 8007680:	4631      	mov	r1, r6
 8007682:	4628      	mov	r0, r5
 8007684:	47b8      	blx	r7
 8007686:	3001      	adds	r0, #1
 8007688:	f43f af27 	beq.w	80074da <_printf_float+0xbe>
 800768c:	f108 0801 	add.w	r8, r8, #1
 8007690:	e7e6      	b.n	8007660 <_printf_float+0x244>
 8007692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007694:	2b00      	cmp	r3, #0
 8007696:	dc39      	bgt.n	800770c <_printf_float+0x2f0>
 8007698:	4a1b      	ldr	r2, [pc, #108]	; (8007708 <_printf_float+0x2ec>)
 800769a:	2301      	movs	r3, #1
 800769c:	4631      	mov	r1, r6
 800769e:	4628      	mov	r0, r5
 80076a0:	47b8      	blx	r7
 80076a2:	3001      	adds	r0, #1
 80076a4:	f43f af19 	beq.w	80074da <_printf_float+0xbe>
 80076a8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80076ac:	4313      	orrs	r3, r2
 80076ae:	d102      	bne.n	80076b6 <_printf_float+0x29a>
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	07d9      	lsls	r1, r3, #31
 80076b4:	d5d8      	bpl.n	8007668 <_printf_float+0x24c>
 80076b6:	ee18 3a10 	vmov	r3, s16
 80076ba:	4652      	mov	r2, sl
 80076bc:	4631      	mov	r1, r6
 80076be:	4628      	mov	r0, r5
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	f43f af09 	beq.w	80074da <_printf_float+0xbe>
 80076c8:	f04f 0900 	mov.w	r9, #0
 80076cc:	f104 0a1a 	add.w	sl, r4, #26
 80076d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d2:	425b      	negs	r3, r3
 80076d4:	454b      	cmp	r3, r9
 80076d6:	dc01      	bgt.n	80076dc <_printf_float+0x2c0>
 80076d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076da:	e792      	b.n	8007602 <_printf_float+0x1e6>
 80076dc:	2301      	movs	r3, #1
 80076de:	4652      	mov	r2, sl
 80076e0:	4631      	mov	r1, r6
 80076e2:	4628      	mov	r0, r5
 80076e4:	47b8      	blx	r7
 80076e6:	3001      	adds	r0, #1
 80076e8:	f43f aef7 	beq.w	80074da <_printf_float+0xbe>
 80076ec:	f109 0901 	add.w	r9, r9, #1
 80076f0:	e7ee      	b.n	80076d0 <_printf_float+0x2b4>
 80076f2:	bf00      	nop
 80076f4:	7fefffff 	.word	0x7fefffff
 80076f8:	08009c88 	.word	0x08009c88
 80076fc:	08009c8c 	.word	0x08009c8c
 8007700:	08009c90 	.word	0x08009c90
 8007704:	08009c94 	.word	0x08009c94
 8007708:	08009c98 	.word	0x08009c98
 800770c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800770e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007710:	429a      	cmp	r2, r3
 8007712:	bfa8      	it	ge
 8007714:	461a      	movge	r2, r3
 8007716:	2a00      	cmp	r2, #0
 8007718:	4691      	mov	r9, r2
 800771a:	dc37      	bgt.n	800778c <_printf_float+0x370>
 800771c:	f04f 0b00 	mov.w	fp, #0
 8007720:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007724:	f104 021a 	add.w	r2, r4, #26
 8007728:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800772a:	9305      	str	r3, [sp, #20]
 800772c:	eba3 0309 	sub.w	r3, r3, r9
 8007730:	455b      	cmp	r3, fp
 8007732:	dc33      	bgt.n	800779c <_printf_float+0x380>
 8007734:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007738:	429a      	cmp	r2, r3
 800773a:	db3b      	blt.n	80077b4 <_printf_float+0x398>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	07da      	lsls	r2, r3, #31
 8007740:	d438      	bmi.n	80077b4 <_printf_float+0x398>
 8007742:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007746:	eba2 0903 	sub.w	r9, r2, r3
 800774a:	9b05      	ldr	r3, [sp, #20]
 800774c:	1ad2      	subs	r2, r2, r3
 800774e:	4591      	cmp	r9, r2
 8007750:	bfa8      	it	ge
 8007752:	4691      	movge	r9, r2
 8007754:	f1b9 0f00 	cmp.w	r9, #0
 8007758:	dc35      	bgt.n	80077c6 <_printf_float+0x3aa>
 800775a:	f04f 0800 	mov.w	r8, #0
 800775e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007762:	f104 0a1a 	add.w	sl, r4, #26
 8007766:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800776a:	1a9b      	subs	r3, r3, r2
 800776c:	eba3 0309 	sub.w	r3, r3, r9
 8007770:	4543      	cmp	r3, r8
 8007772:	f77f af79 	ble.w	8007668 <_printf_float+0x24c>
 8007776:	2301      	movs	r3, #1
 8007778:	4652      	mov	r2, sl
 800777a:	4631      	mov	r1, r6
 800777c:	4628      	mov	r0, r5
 800777e:	47b8      	blx	r7
 8007780:	3001      	adds	r0, #1
 8007782:	f43f aeaa 	beq.w	80074da <_printf_float+0xbe>
 8007786:	f108 0801 	add.w	r8, r8, #1
 800778a:	e7ec      	b.n	8007766 <_printf_float+0x34a>
 800778c:	4613      	mov	r3, r2
 800778e:	4631      	mov	r1, r6
 8007790:	4642      	mov	r2, r8
 8007792:	4628      	mov	r0, r5
 8007794:	47b8      	blx	r7
 8007796:	3001      	adds	r0, #1
 8007798:	d1c0      	bne.n	800771c <_printf_float+0x300>
 800779a:	e69e      	b.n	80074da <_printf_float+0xbe>
 800779c:	2301      	movs	r3, #1
 800779e:	4631      	mov	r1, r6
 80077a0:	4628      	mov	r0, r5
 80077a2:	9205      	str	r2, [sp, #20]
 80077a4:	47b8      	blx	r7
 80077a6:	3001      	adds	r0, #1
 80077a8:	f43f ae97 	beq.w	80074da <_printf_float+0xbe>
 80077ac:	9a05      	ldr	r2, [sp, #20]
 80077ae:	f10b 0b01 	add.w	fp, fp, #1
 80077b2:	e7b9      	b.n	8007728 <_printf_float+0x30c>
 80077b4:	ee18 3a10 	vmov	r3, s16
 80077b8:	4652      	mov	r2, sl
 80077ba:	4631      	mov	r1, r6
 80077bc:	4628      	mov	r0, r5
 80077be:	47b8      	blx	r7
 80077c0:	3001      	adds	r0, #1
 80077c2:	d1be      	bne.n	8007742 <_printf_float+0x326>
 80077c4:	e689      	b.n	80074da <_printf_float+0xbe>
 80077c6:	9a05      	ldr	r2, [sp, #20]
 80077c8:	464b      	mov	r3, r9
 80077ca:	4442      	add	r2, r8
 80077cc:	4631      	mov	r1, r6
 80077ce:	4628      	mov	r0, r5
 80077d0:	47b8      	blx	r7
 80077d2:	3001      	adds	r0, #1
 80077d4:	d1c1      	bne.n	800775a <_printf_float+0x33e>
 80077d6:	e680      	b.n	80074da <_printf_float+0xbe>
 80077d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077da:	2a01      	cmp	r2, #1
 80077dc:	dc01      	bgt.n	80077e2 <_printf_float+0x3c6>
 80077de:	07db      	lsls	r3, r3, #31
 80077e0:	d53a      	bpl.n	8007858 <_printf_float+0x43c>
 80077e2:	2301      	movs	r3, #1
 80077e4:	4642      	mov	r2, r8
 80077e6:	4631      	mov	r1, r6
 80077e8:	4628      	mov	r0, r5
 80077ea:	47b8      	blx	r7
 80077ec:	3001      	adds	r0, #1
 80077ee:	f43f ae74 	beq.w	80074da <_printf_float+0xbe>
 80077f2:	ee18 3a10 	vmov	r3, s16
 80077f6:	4652      	mov	r2, sl
 80077f8:	4631      	mov	r1, r6
 80077fa:	4628      	mov	r0, r5
 80077fc:	47b8      	blx	r7
 80077fe:	3001      	adds	r0, #1
 8007800:	f43f ae6b 	beq.w	80074da <_printf_float+0xbe>
 8007804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007808:	2200      	movs	r2, #0
 800780a:	2300      	movs	r3, #0
 800780c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007810:	f7f9 f962 	bl	8000ad8 <__aeabi_dcmpeq>
 8007814:	b9d8      	cbnz	r0, 800784e <_printf_float+0x432>
 8007816:	f10a 33ff 	add.w	r3, sl, #4294967295
 800781a:	f108 0201 	add.w	r2, r8, #1
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	d10e      	bne.n	8007846 <_printf_float+0x42a>
 8007828:	e657      	b.n	80074da <_printf_float+0xbe>
 800782a:	2301      	movs	r3, #1
 800782c:	4652      	mov	r2, sl
 800782e:	4631      	mov	r1, r6
 8007830:	4628      	mov	r0, r5
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	f43f ae50 	beq.w	80074da <_printf_float+0xbe>
 800783a:	f108 0801 	add.w	r8, r8, #1
 800783e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007840:	3b01      	subs	r3, #1
 8007842:	4543      	cmp	r3, r8
 8007844:	dcf1      	bgt.n	800782a <_printf_float+0x40e>
 8007846:	464b      	mov	r3, r9
 8007848:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800784c:	e6da      	b.n	8007604 <_printf_float+0x1e8>
 800784e:	f04f 0800 	mov.w	r8, #0
 8007852:	f104 0a1a 	add.w	sl, r4, #26
 8007856:	e7f2      	b.n	800783e <_printf_float+0x422>
 8007858:	2301      	movs	r3, #1
 800785a:	4642      	mov	r2, r8
 800785c:	e7df      	b.n	800781e <_printf_float+0x402>
 800785e:	2301      	movs	r3, #1
 8007860:	464a      	mov	r2, r9
 8007862:	4631      	mov	r1, r6
 8007864:	4628      	mov	r0, r5
 8007866:	47b8      	blx	r7
 8007868:	3001      	adds	r0, #1
 800786a:	f43f ae36 	beq.w	80074da <_printf_float+0xbe>
 800786e:	f108 0801 	add.w	r8, r8, #1
 8007872:	68e3      	ldr	r3, [r4, #12]
 8007874:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007876:	1a5b      	subs	r3, r3, r1
 8007878:	4543      	cmp	r3, r8
 800787a:	dcf0      	bgt.n	800785e <_printf_float+0x442>
 800787c:	e6f8      	b.n	8007670 <_printf_float+0x254>
 800787e:	f04f 0800 	mov.w	r8, #0
 8007882:	f104 0919 	add.w	r9, r4, #25
 8007886:	e7f4      	b.n	8007872 <_printf_float+0x456>

08007888 <_printf_common>:
 8007888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800788c:	4616      	mov	r6, r2
 800788e:	4699      	mov	r9, r3
 8007890:	688a      	ldr	r2, [r1, #8]
 8007892:	690b      	ldr	r3, [r1, #16]
 8007894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007898:	4293      	cmp	r3, r2
 800789a:	bfb8      	it	lt
 800789c:	4613      	movlt	r3, r2
 800789e:	6033      	str	r3, [r6, #0]
 80078a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078a4:	4607      	mov	r7, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	b10a      	cbz	r2, 80078ae <_printf_common+0x26>
 80078aa:	3301      	adds	r3, #1
 80078ac:	6033      	str	r3, [r6, #0]
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	0699      	lsls	r1, r3, #26
 80078b2:	bf42      	ittt	mi
 80078b4:	6833      	ldrmi	r3, [r6, #0]
 80078b6:	3302      	addmi	r3, #2
 80078b8:	6033      	strmi	r3, [r6, #0]
 80078ba:	6825      	ldr	r5, [r4, #0]
 80078bc:	f015 0506 	ands.w	r5, r5, #6
 80078c0:	d106      	bne.n	80078d0 <_printf_common+0x48>
 80078c2:	f104 0a19 	add.w	sl, r4, #25
 80078c6:	68e3      	ldr	r3, [r4, #12]
 80078c8:	6832      	ldr	r2, [r6, #0]
 80078ca:	1a9b      	subs	r3, r3, r2
 80078cc:	42ab      	cmp	r3, r5
 80078ce:	dc26      	bgt.n	800791e <_printf_common+0x96>
 80078d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078d4:	1e13      	subs	r3, r2, #0
 80078d6:	6822      	ldr	r2, [r4, #0]
 80078d8:	bf18      	it	ne
 80078da:	2301      	movne	r3, #1
 80078dc:	0692      	lsls	r2, r2, #26
 80078de:	d42b      	bmi.n	8007938 <_printf_common+0xb0>
 80078e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078e4:	4649      	mov	r1, r9
 80078e6:	4638      	mov	r0, r7
 80078e8:	47c0      	blx	r8
 80078ea:	3001      	adds	r0, #1
 80078ec:	d01e      	beq.n	800792c <_printf_common+0xa4>
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	6922      	ldr	r2, [r4, #16]
 80078f2:	f003 0306 	and.w	r3, r3, #6
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	bf02      	ittt	eq
 80078fa:	68e5      	ldreq	r5, [r4, #12]
 80078fc:	6833      	ldreq	r3, [r6, #0]
 80078fe:	1aed      	subeq	r5, r5, r3
 8007900:	68a3      	ldr	r3, [r4, #8]
 8007902:	bf0c      	ite	eq
 8007904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007908:	2500      	movne	r5, #0
 800790a:	4293      	cmp	r3, r2
 800790c:	bfc4      	itt	gt
 800790e:	1a9b      	subgt	r3, r3, r2
 8007910:	18ed      	addgt	r5, r5, r3
 8007912:	2600      	movs	r6, #0
 8007914:	341a      	adds	r4, #26
 8007916:	42b5      	cmp	r5, r6
 8007918:	d11a      	bne.n	8007950 <_printf_common+0xc8>
 800791a:	2000      	movs	r0, #0
 800791c:	e008      	b.n	8007930 <_printf_common+0xa8>
 800791e:	2301      	movs	r3, #1
 8007920:	4652      	mov	r2, sl
 8007922:	4649      	mov	r1, r9
 8007924:	4638      	mov	r0, r7
 8007926:	47c0      	blx	r8
 8007928:	3001      	adds	r0, #1
 800792a:	d103      	bne.n	8007934 <_printf_common+0xac>
 800792c:	f04f 30ff 	mov.w	r0, #4294967295
 8007930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007934:	3501      	adds	r5, #1
 8007936:	e7c6      	b.n	80078c6 <_printf_common+0x3e>
 8007938:	18e1      	adds	r1, r4, r3
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	2030      	movs	r0, #48	; 0x30
 800793e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007942:	4422      	add	r2, r4
 8007944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800794c:	3302      	adds	r3, #2
 800794e:	e7c7      	b.n	80078e0 <_printf_common+0x58>
 8007950:	2301      	movs	r3, #1
 8007952:	4622      	mov	r2, r4
 8007954:	4649      	mov	r1, r9
 8007956:	4638      	mov	r0, r7
 8007958:	47c0      	blx	r8
 800795a:	3001      	adds	r0, #1
 800795c:	d0e6      	beq.n	800792c <_printf_common+0xa4>
 800795e:	3601      	adds	r6, #1
 8007960:	e7d9      	b.n	8007916 <_printf_common+0x8e>
	...

08007964 <_printf_i>:
 8007964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007968:	7e0f      	ldrb	r7, [r1, #24]
 800796a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800796c:	2f78      	cmp	r7, #120	; 0x78
 800796e:	4691      	mov	r9, r2
 8007970:	4680      	mov	r8, r0
 8007972:	460c      	mov	r4, r1
 8007974:	469a      	mov	sl, r3
 8007976:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800797a:	d807      	bhi.n	800798c <_printf_i+0x28>
 800797c:	2f62      	cmp	r7, #98	; 0x62
 800797e:	d80a      	bhi.n	8007996 <_printf_i+0x32>
 8007980:	2f00      	cmp	r7, #0
 8007982:	f000 80d4 	beq.w	8007b2e <_printf_i+0x1ca>
 8007986:	2f58      	cmp	r7, #88	; 0x58
 8007988:	f000 80c0 	beq.w	8007b0c <_printf_i+0x1a8>
 800798c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007994:	e03a      	b.n	8007a0c <_printf_i+0xa8>
 8007996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800799a:	2b15      	cmp	r3, #21
 800799c:	d8f6      	bhi.n	800798c <_printf_i+0x28>
 800799e:	a101      	add	r1, pc, #4	; (adr r1, 80079a4 <_printf_i+0x40>)
 80079a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079a4:	080079fd 	.word	0x080079fd
 80079a8:	08007a11 	.word	0x08007a11
 80079ac:	0800798d 	.word	0x0800798d
 80079b0:	0800798d 	.word	0x0800798d
 80079b4:	0800798d 	.word	0x0800798d
 80079b8:	0800798d 	.word	0x0800798d
 80079bc:	08007a11 	.word	0x08007a11
 80079c0:	0800798d 	.word	0x0800798d
 80079c4:	0800798d 	.word	0x0800798d
 80079c8:	0800798d 	.word	0x0800798d
 80079cc:	0800798d 	.word	0x0800798d
 80079d0:	08007b15 	.word	0x08007b15
 80079d4:	08007a3d 	.word	0x08007a3d
 80079d8:	08007acf 	.word	0x08007acf
 80079dc:	0800798d 	.word	0x0800798d
 80079e0:	0800798d 	.word	0x0800798d
 80079e4:	08007b37 	.word	0x08007b37
 80079e8:	0800798d 	.word	0x0800798d
 80079ec:	08007a3d 	.word	0x08007a3d
 80079f0:	0800798d 	.word	0x0800798d
 80079f4:	0800798d 	.word	0x0800798d
 80079f8:	08007ad7 	.word	0x08007ad7
 80079fc:	682b      	ldr	r3, [r5, #0]
 80079fe:	1d1a      	adds	r2, r3, #4
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	602a      	str	r2, [r5, #0]
 8007a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e09f      	b.n	8007b50 <_printf_i+0x1ec>
 8007a10:	6820      	ldr	r0, [r4, #0]
 8007a12:	682b      	ldr	r3, [r5, #0]
 8007a14:	0607      	lsls	r7, r0, #24
 8007a16:	f103 0104 	add.w	r1, r3, #4
 8007a1a:	6029      	str	r1, [r5, #0]
 8007a1c:	d501      	bpl.n	8007a22 <_printf_i+0xbe>
 8007a1e:	681e      	ldr	r6, [r3, #0]
 8007a20:	e003      	b.n	8007a2a <_printf_i+0xc6>
 8007a22:	0646      	lsls	r6, r0, #25
 8007a24:	d5fb      	bpl.n	8007a1e <_printf_i+0xba>
 8007a26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a2a:	2e00      	cmp	r6, #0
 8007a2c:	da03      	bge.n	8007a36 <_printf_i+0xd2>
 8007a2e:	232d      	movs	r3, #45	; 0x2d
 8007a30:	4276      	negs	r6, r6
 8007a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a36:	485a      	ldr	r0, [pc, #360]	; (8007ba0 <_printf_i+0x23c>)
 8007a38:	230a      	movs	r3, #10
 8007a3a:	e012      	b.n	8007a62 <_printf_i+0xfe>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	6820      	ldr	r0, [r4, #0]
 8007a40:	1d19      	adds	r1, r3, #4
 8007a42:	6029      	str	r1, [r5, #0]
 8007a44:	0605      	lsls	r5, r0, #24
 8007a46:	d501      	bpl.n	8007a4c <_printf_i+0xe8>
 8007a48:	681e      	ldr	r6, [r3, #0]
 8007a4a:	e002      	b.n	8007a52 <_printf_i+0xee>
 8007a4c:	0641      	lsls	r1, r0, #25
 8007a4e:	d5fb      	bpl.n	8007a48 <_printf_i+0xe4>
 8007a50:	881e      	ldrh	r6, [r3, #0]
 8007a52:	4853      	ldr	r0, [pc, #332]	; (8007ba0 <_printf_i+0x23c>)
 8007a54:	2f6f      	cmp	r7, #111	; 0x6f
 8007a56:	bf0c      	ite	eq
 8007a58:	2308      	moveq	r3, #8
 8007a5a:	230a      	movne	r3, #10
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a62:	6865      	ldr	r5, [r4, #4]
 8007a64:	60a5      	str	r5, [r4, #8]
 8007a66:	2d00      	cmp	r5, #0
 8007a68:	bfa2      	ittt	ge
 8007a6a:	6821      	ldrge	r1, [r4, #0]
 8007a6c:	f021 0104 	bicge.w	r1, r1, #4
 8007a70:	6021      	strge	r1, [r4, #0]
 8007a72:	b90e      	cbnz	r6, 8007a78 <_printf_i+0x114>
 8007a74:	2d00      	cmp	r5, #0
 8007a76:	d04b      	beq.n	8007b10 <_printf_i+0x1ac>
 8007a78:	4615      	mov	r5, r2
 8007a7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a7e:	fb03 6711 	mls	r7, r3, r1, r6
 8007a82:	5dc7      	ldrb	r7, [r0, r7]
 8007a84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a88:	4637      	mov	r7, r6
 8007a8a:	42bb      	cmp	r3, r7
 8007a8c:	460e      	mov	r6, r1
 8007a8e:	d9f4      	bls.n	8007a7a <_printf_i+0x116>
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d10b      	bne.n	8007aac <_printf_i+0x148>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	07de      	lsls	r6, r3, #31
 8007a98:	d508      	bpl.n	8007aac <_printf_i+0x148>
 8007a9a:	6923      	ldr	r3, [r4, #16]
 8007a9c:	6861      	ldr	r1, [r4, #4]
 8007a9e:	4299      	cmp	r1, r3
 8007aa0:	bfde      	ittt	le
 8007aa2:	2330      	movle	r3, #48	; 0x30
 8007aa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007aa8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007aac:	1b52      	subs	r2, r2, r5
 8007aae:	6122      	str	r2, [r4, #16]
 8007ab0:	f8cd a000 	str.w	sl, [sp]
 8007ab4:	464b      	mov	r3, r9
 8007ab6:	aa03      	add	r2, sp, #12
 8007ab8:	4621      	mov	r1, r4
 8007aba:	4640      	mov	r0, r8
 8007abc:	f7ff fee4 	bl	8007888 <_printf_common>
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d14a      	bne.n	8007b5a <_printf_i+0x1f6>
 8007ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac8:	b004      	add	sp, #16
 8007aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	f043 0320 	orr.w	r3, r3, #32
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	4833      	ldr	r0, [pc, #204]	; (8007ba4 <_printf_i+0x240>)
 8007ad8:	2778      	movs	r7, #120	; 0x78
 8007ada:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	6829      	ldr	r1, [r5, #0]
 8007ae2:	061f      	lsls	r7, r3, #24
 8007ae4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ae8:	d402      	bmi.n	8007af0 <_printf_i+0x18c>
 8007aea:	065f      	lsls	r7, r3, #25
 8007aec:	bf48      	it	mi
 8007aee:	b2b6      	uxthmi	r6, r6
 8007af0:	07df      	lsls	r7, r3, #31
 8007af2:	bf48      	it	mi
 8007af4:	f043 0320 	orrmi.w	r3, r3, #32
 8007af8:	6029      	str	r1, [r5, #0]
 8007afa:	bf48      	it	mi
 8007afc:	6023      	strmi	r3, [r4, #0]
 8007afe:	b91e      	cbnz	r6, 8007b08 <_printf_i+0x1a4>
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	f023 0320 	bic.w	r3, r3, #32
 8007b06:	6023      	str	r3, [r4, #0]
 8007b08:	2310      	movs	r3, #16
 8007b0a:	e7a7      	b.n	8007a5c <_printf_i+0xf8>
 8007b0c:	4824      	ldr	r0, [pc, #144]	; (8007ba0 <_printf_i+0x23c>)
 8007b0e:	e7e4      	b.n	8007ada <_printf_i+0x176>
 8007b10:	4615      	mov	r5, r2
 8007b12:	e7bd      	b.n	8007a90 <_printf_i+0x12c>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	6826      	ldr	r6, [r4, #0]
 8007b18:	6961      	ldr	r1, [r4, #20]
 8007b1a:	1d18      	adds	r0, r3, #4
 8007b1c:	6028      	str	r0, [r5, #0]
 8007b1e:	0635      	lsls	r5, r6, #24
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	d501      	bpl.n	8007b28 <_printf_i+0x1c4>
 8007b24:	6019      	str	r1, [r3, #0]
 8007b26:	e002      	b.n	8007b2e <_printf_i+0x1ca>
 8007b28:	0670      	lsls	r0, r6, #25
 8007b2a:	d5fb      	bpl.n	8007b24 <_printf_i+0x1c0>
 8007b2c:	8019      	strh	r1, [r3, #0]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	6123      	str	r3, [r4, #16]
 8007b32:	4615      	mov	r5, r2
 8007b34:	e7bc      	b.n	8007ab0 <_printf_i+0x14c>
 8007b36:	682b      	ldr	r3, [r5, #0]
 8007b38:	1d1a      	adds	r2, r3, #4
 8007b3a:	602a      	str	r2, [r5, #0]
 8007b3c:	681d      	ldr	r5, [r3, #0]
 8007b3e:	6862      	ldr	r2, [r4, #4]
 8007b40:	2100      	movs	r1, #0
 8007b42:	4628      	mov	r0, r5
 8007b44:	f7f8 fb4c 	bl	80001e0 <memchr>
 8007b48:	b108      	cbz	r0, 8007b4e <_printf_i+0x1ea>
 8007b4a:	1b40      	subs	r0, r0, r5
 8007b4c:	6060      	str	r0, [r4, #4]
 8007b4e:	6863      	ldr	r3, [r4, #4]
 8007b50:	6123      	str	r3, [r4, #16]
 8007b52:	2300      	movs	r3, #0
 8007b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b58:	e7aa      	b.n	8007ab0 <_printf_i+0x14c>
 8007b5a:	6923      	ldr	r3, [r4, #16]
 8007b5c:	462a      	mov	r2, r5
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	47d0      	blx	sl
 8007b64:	3001      	adds	r0, #1
 8007b66:	d0ad      	beq.n	8007ac4 <_printf_i+0x160>
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	079b      	lsls	r3, r3, #30
 8007b6c:	d413      	bmi.n	8007b96 <_printf_i+0x232>
 8007b6e:	68e0      	ldr	r0, [r4, #12]
 8007b70:	9b03      	ldr	r3, [sp, #12]
 8007b72:	4298      	cmp	r0, r3
 8007b74:	bfb8      	it	lt
 8007b76:	4618      	movlt	r0, r3
 8007b78:	e7a6      	b.n	8007ac8 <_printf_i+0x164>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	4632      	mov	r2, r6
 8007b7e:	4649      	mov	r1, r9
 8007b80:	4640      	mov	r0, r8
 8007b82:	47d0      	blx	sl
 8007b84:	3001      	adds	r0, #1
 8007b86:	d09d      	beq.n	8007ac4 <_printf_i+0x160>
 8007b88:	3501      	adds	r5, #1
 8007b8a:	68e3      	ldr	r3, [r4, #12]
 8007b8c:	9903      	ldr	r1, [sp, #12]
 8007b8e:	1a5b      	subs	r3, r3, r1
 8007b90:	42ab      	cmp	r3, r5
 8007b92:	dcf2      	bgt.n	8007b7a <_printf_i+0x216>
 8007b94:	e7eb      	b.n	8007b6e <_printf_i+0x20a>
 8007b96:	2500      	movs	r5, #0
 8007b98:	f104 0619 	add.w	r6, r4, #25
 8007b9c:	e7f5      	b.n	8007b8a <_printf_i+0x226>
 8007b9e:	bf00      	nop
 8007ba0:	08009c9a 	.word	0x08009c9a
 8007ba4:	08009cab 	.word	0x08009cab

08007ba8 <std>:
 8007ba8:	2300      	movs	r3, #0
 8007baa:	b510      	push	{r4, lr}
 8007bac:	4604      	mov	r4, r0
 8007bae:	e9c0 3300 	strd	r3, r3, [r0]
 8007bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bb6:	6083      	str	r3, [r0, #8]
 8007bb8:	8181      	strh	r1, [r0, #12]
 8007bba:	6643      	str	r3, [r0, #100]	; 0x64
 8007bbc:	81c2      	strh	r2, [r0, #14]
 8007bbe:	6183      	str	r3, [r0, #24]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	2208      	movs	r2, #8
 8007bc4:	305c      	adds	r0, #92	; 0x5c
 8007bc6:	f000 f8f4 	bl	8007db2 <memset>
 8007bca:	4b0d      	ldr	r3, [pc, #52]	; (8007c00 <std+0x58>)
 8007bcc:	6263      	str	r3, [r4, #36]	; 0x24
 8007bce:	4b0d      	ldr	r3, [pc, #52]	; (8007c04 <std+0x5c>)
 8007bd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bd2:	4b0d      	ldr	r3, [pc, #52]	; (8007c08 <std+0x60>)
 8007bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bd6:	4b0d      	ldr	r3, [pc, #52]	; (8007c0c <std+0x64>)
 8007bd8:	6323      	str	r3, [r4, #48]	; 0x30
 8007bda:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <std+0x68>)
 8007bdc:	6224      	str	r4, [r4, #32]
 8007bde:	429c      	cmp	r4, r3
 8007be0:	d006      	beq.n	8007bf0 <std+0x48>
 8007be2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007be6:	4294      	cmp	r4, r2
 8007be8:	d002      	beq.n	8007bf0 <std+0x48>
 8007bea:	33d0      	adds	r3, #208	; 0xd0
 8007bec:	429c      	cmp	r4, r3
 8007bee:	d105      	bne.n	8007bfc <std+0x54>
 8007bf0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf8:	f000 b958 	b.w	8007eac <__retarget_lock_init_recursive>
 8007bfc:	bd10      	pop	{r4, pc}
 8007bfe:	bf00      	nop
 8007c00:	08007d2d 	.word	0x08007d2d
 8007c04:	08007d4f 	.word	0x08007d4f
 8007c08:	08007d87 	.word	0x08007d87
 8007c0c:	08007dab 	.word	0x08007dab
 8007c10:	20000678 	.word	0x20000678

08007c14 <stdio_exit_handler>:
 8007c14:	4a02      	ldr	r2, [pc, #8]	; (8007c20 <stdio_exit_handler+0xc>)
 8007c16:	4903      	ldr	r1, [pc, #12]	; (8007c24 <stdio_exit_handler+0x10>)
 8007c18:	4803      	ldr	r0, [pc, #12]	; (8007c28 <stdio_exit_handler+0x14>)
 8007c1a:	f000 b869 	b.w	8007cf0 <_fwalk_sglue>
 8007c1e:	bf00      	nop
 8007c20:	2000009c 	.word	0x2000009c
 8007c24:	080095b1 	.word	0x080095b1
 8007c28:	200000a8 	.word	0x200000a8

08007c2c <cleanup_stdio>:
 8007c2c:	6841      	ldr	r1, [r0, #4]
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <cleanup_stdio+0x34>)
 8007c30:	4299      	cmp	r1, r3
 8007c32:	b510      	push	{r4, lr}
 8007c34:	4604      	mov	r4, r0
 8007c36:	d001      	beq.n	8007c3c <cleanup_stdio+0x10>
 8007c38:	f001 fcba 	bl	80095b0 <_fflush_r>
 8007c3c:	68a1      	ldr	r1, [r4, #8]
 8007c3e:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <cleanup_stdio+0x38>)
 8007c40:	4299      	cmp	r1, r3
 8007c42:	d002      	beq.n	8007c4a <cleanup_stdio+0x1e>
 8007c44:	4620      	mov	r0, r4
 8007c46:	f001 fcb3 	bl	80095b0 <_fflush_r>
 8007c4a:	68e1      	ldr	r1, [r4, #12]
 8007c4c:	4b06      	ldr	r3, [pc, #24]	; (8007c68 <cleanup_stdio+0x3c>)
 8007c4e:	4299      	cmp	r1, r3
 8007c50:	d004      	beq.n	8007c5c <cleanup_stdio+0x30>
 8007c52:	4620      	mov	r0, r4
 8007c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c58:	f001 bcaa 	b.w	80095b0 <_fflush_r>
 8007c5c:	bd10      	pop	{r4, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000678 	.word	0x20000678
 8007c64:	200006e0 	.word	0x200006e0
 8007c68:	20000748 	.word	0x20000748

08007c6c <global_stdio_init.part.0>:
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	4b0b      	ldr	r3, [pc, #44]	; (8007c9c <global_stdio_init.part.0+0x30>)
 8007c70:	4c0b      	ldr	r4, [pc, #44]	; (8007ca0 <global_stdio_init.part.0+0x34>)
 8007c72:	4a0c      	ldr	r2, [pc, #48]	; (8007ca4 <global_stdio_init.part.0+0x38>)
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	4620      	mov	r0, r4
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2104      	movs	r1, #4
 8007c7c:	f7ff ff94 	bl	8007ba8 <std>
 8007c80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007c84:	2201      	movs	r2, #1
 8007c86:	2109      	movs	r1, #9
 8007c88:	f7ff ff8e 	bl	8007ba8 <std>
 8007c8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007c90:	2202      	movs	r2, #2
 8007c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c96:	2112      	movs	r1, #18
 8007c98:	f7ff bf86 	b.w	8007ba8 <std>
 8007c9c:	200007b0 	.word	0x200007b0
 8007ca0:	20000678 	.word	0x20000678
 8007ca4:	08007c15 	.word	0x08007c15

08007ca8 <__sfp_lock_acquire>:
 8007ca8:	4801      	ldr	r0, [pc, #4]	; (8007cb0 <__sfp_lock_acquire+0x8>)
 8007caa:	f000 b900 	b.w	8007eae <__retarget_lock_acquire_recursive>
 8007cae:	bf00      	nop
 8007cb0:	200007b9 	.word	0x200007b9

08007cb4 <__sfp_lock_release>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	; (8007cbc <__sfp_lock_release+0x8>)
 8007cb6:	f000 b8fb 	b.w	8007eb0 <__retarget_lock_release_recursive>
 8007cba:	bf00      	nop
 8007cbc:	200007b9 	.word	0x200007b9

08007cc0 <__sinit>:
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	f7ff fff0 	bl	8007ca8 <__sfp_lock_acquire>
 8007cc8:	6a23      	ldr	r3, [r4, #32]
 8007cca:	b11b      	cbz	r3, 8007cd4 <__sinit+0x14>
 8007ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cd0:	f7ff bff0 	b.w	8007cb4 <__sfp_lock_release>
 8007cd4:	4b04      	ldr	r3, [pc, #16]	; (8007ce8 <__sinit+0x28>)
 8007cd6:	6223      	str	r3, [r4, #32]
 8007cd8:	4b04      	ldr	r3, [pc, #16]	; (8007cec <__sinit+0x2c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1f5      	bne.n	8007ccc <__sinit+0xc>
 8007ce0:	f7ff ffc4 	bl	8007c6c <global_stdio_init.part.0>
 8007ce4:	e7f2      	b.n	8007ccc <__sinit+0xc>
 8007ce6:	bf00      	nop
 8007ce8:	08007c2d 	.word	0x08007c2d
 8007cec:	200007b0 	.word	0x200007b0

08007cf0 <_fwalk_sglue>:
 8007cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	4688      	mov	r8, r1
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	2600      	movs	r6, #0
 8007cfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d00:	f1b9 0901 	subs.w	r9, r9, #1
 8007d04:	d505      	bpl.n	8007d12 <_fwalk_sglue+0x22>
 8007d06:	6824      	ldr	r4, [r4, #0]
 8007d08:	2c00      	cmp	r4, #0
 8007d0a:	d1f7      	bne.n	8007cfc <_fwalk_sglue+0xc>
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d907      	bls.n	8007d28 <_fwalk_sglue+0x38>
 8007d18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	d003      	beq.n	8007d28 <_fwalk_sglue+0x38>
 8007d20:	4629      	mov	r1, r5
 8007d22:	4638      	mov	r0, r7
 8007d24:	47c0      	blx	r8
 8007d26:	4306      	orrs	r6, r0
 8007d28:	3568      	adds	r5, #104	; 0x68
 8007d2a:	e7e9      	b.n	8007d00 <_fwalk_sglue+0x10>

08007d2c <__sread>:
 8007d2c:	b510      	push	{r4, lr}
 8007d2e:	460c      	mov	r4, r1
 8007d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d34:	f000 f86c 	bl	8007e10 <_read_r>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	bfab      	itete	ge
 8007d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d40:	181b      	addge	r3, r3, r0
 8007d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d46:	bfac      	ite	ge
 8007d48:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d4a:	81a3      	strhlt	r3, [r4, #12]
 8007d4c:	bd10      	pop	{r4, pc}

08007d4e <__swrite>:
 8007d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d52:	461f      	mov	r7, r3
 8007d54:	898b      	ldrh	r3, [r1, #12]
 8007d56:	05db      	lsls	r3, r3, #23
 8007d58:	4605      	mov	r5, r0
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	4616      	mov	r6, r2
 8007d5e:	d505      	bpl.n	8007d6c <__swrite+0x1e>
 8007d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d64:	2302      	movs	r3, #2
 8007d66:	2200      	movs	r2, #0
 8007d68:	f000 f840 	bl	8007dec <_lseek_r>
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d76:	81a3      	strh	r3, [r4, #12]
 8007d78:	4632      	mov	r2, r6
 8007d7a:	463b      	mov	r3, r7
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d82:	f000 b857 	b.w	8007e34 <_write_r>

08007d86 <__sseek>:
 8007d86:	b510      	push	{r4, lr}
 8007d88:	460c      	mov	r4, r1
 8007d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d8e:	f000 f82d 	bl	8007dec <_lseek_r>
 8007d92:	1c43      	adds	r3, r0, #1
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	bf15      	itete	ne
 8007d98:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007da2:	81a3      	strheq	r3, [r4, #12]
 8007da4:	bf18      	it	ne
 8007da6:	81a3      	strhne	r3, [r4, #12]
 8007da8:	bd10      	pop	{r4, pc}

08007daa <__sclose>:
 8007daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dae:	f000 b80d 	b.w	8007dcc <_close_r>

08007db2 <memset>:
 8007db2:	4402      	add	r2, r0
 8007db4:	4603      	mov	r3, r0
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d100      	bne.n	8007dbc <memset+0xa>
 8007dba:	4770      	bx	lr
 8007dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8007dc0:	e7f9      	b.n	8007db6 <memset+0x4>
	...

08007dc4 <_localeconv_r>:
 8007dc4:	4800      	ldr	r0, [pc, #0]	; (8007dc8 <_localeconv_r+0x4>)
 8007dc6:	4770      	bx	lr
 8007dc8:	200001e8 	.word	0x200001e8

08007dcc <_close_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4d06      	ldr	r5, [pc, #24]	; (8007de8 <_close_r+0x1c>)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	602b      	str	r3, [r5, #0]
 8007dd8:	f7f9 ff03 	bl	8001be2 <_close>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d102      	bne.n	8007de6 <_close_r+0x1a>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	b103      	cbz	r3, 8007de6 <_close_r+0x1a>
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	200007b4 	.word	0x200007b4

08007dec <_lseek_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4d07      	ldr	r5, [pc, #28]	; (8007e0c <_lseek_r+0x20>)
 8007df0:	4604      	mov	r4, r0
 8007df2:	4608      	mov	r0, r1
 8007df4:	4611      	mov	r1, r2
 8007df6:	2200      	movs	r2, #0
 8007df8:	602a      	str	r2, [r5, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f7f9 ff18 	bl	8001c30 <_lseek>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_lseek_r+0x1e>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_lseek_r+0x1e>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	200007b4 	.word	0x200007b4

08007e10 <_read_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4d07      	ldr	r5, [pc, #28]	; (8007e30 <_read_r+0x20>)
 8007e14:	4604      	mov	r4, r0
 8007e16:	4608      	mov	r0, r1
 8007e18:	4611      	mov	r1, r2
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	602a      	str	r2, [r5, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f7f9 fea6 	bl	8001b70 <_read>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d102      	bne.n	8007e2e <_read_r+0x1e>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	b103      	cbz	r3, 8007e2e <_read_r+0x1e>
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
 8007e30:	200007b4 	.word	0x200007b4

08007e34 <_write_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4d07      	ldr	r5, [pc, #28]	; (8007e54 <_write_r+0x20>)
 8007e38:	4604      	mov	r4, r0
 8007e3a:	4608      	mov	r0, r1
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	2200      	movs	r2, #0
 8007e40:	602a      	str	r2, [r5, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f7f9 feb1 	bl	8001baa <_write>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_write_r+0x1e>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_write_r+0x1e>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	200007b4 	.word	0x200007b4

08007e58 <__errno>:
 8007e58:	4b01      	ldr	r3, [pc, #4]	; (8007e60 <__errno+0x8>)
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	200000f4 	.word	0x200000f4

08007e64 <__libc_init_array>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	4d0d      	ldr	r5, [pc, #52]	; (8007e9c <__libc_init_array+0x38>)
 8007e68:	4c0d      	ldr	r4, [pc, #52]	; (8007ea0 <__libc_init_array+0x3c>)
 8007e6a:	1b64      	subs	r4, r4, r5
 8007e6c:	10a4      	asrs	r4, r4, #2
 8007e6e:	2600      	movs	r6, #0
 8007e70:	42a6      	cmp	r6, r4
 8007e72:	d109      	bne.n	8007e88 <__libc_init_array+0x24>
 8007e74:	4d0b      	ldr	r5, [pc, #44]	; (8007ea4 <__libc_init_array+0x40>)
 8007e76:	4c0c      	ldr	r4, [pc, #48]	; (8007ea8 <__libc_init_array+0x44>)
 8007e78:	f001 feee 	bl	8009c58 <_init>
 8007e7c:	1b64      	subs	r4, r4, r5
 8007e7e:	10a4      	asrs	r4, r4, #2
 8007e80:	2600      	movs	r6, #0
 8007e82:	42a6      	cmp	r6, r4
 8007e84:	d105      	bne.n	8007e92 <__libc_init_array+0x2e>
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e8c:	4798      	blx	r3
 8007e8e:	3601      	adds	r6, #1
 8007e90:	e7ee      	b.n	8007e70 <__libc_init_array+0xc>
 8007e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e96:	4798      	blx	r3
 8007e98:	3601      	adds	r6, #1
 8007e9a:	e7f2      	b.n	8007e82 <__libc_init_array+0x1e>
 8007e9c:	0800a004 	.word	0x0800a004
 8007ea0:	0800a004 	.word	0x0800a004
 8007ea4:	0800a004 	.word	0x0800a004
 8007ea8:	0800a008 	.word	0x0800a008

08007eac <__retarget_lock_init_recursive>:
 8007eac:	4770      	bx	lr

08007eae <__retarget_lock_acquire_recursive>:
 8007eae:	4770      	bx	lr

08007eb0 <__retarget_lock_release_recursive>:
 8007eb0:	4770      	bx	lr

08007eb2 <quorem>:
 8007eb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb6:	6903      	ldr	r3, [r0, #16]
 8007eb8:	690c      	ldr	r4, [r1, #16]
 8007eba:	42a3      	cmp	r3, r4
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	db7e      	blt.n	8007fbe <quorem+0x10c>
 8007ec0:	3c01      	subs	r4, #1
 8007ec2:	f101 0814 	add.w	r8, r1, #20
 8007ec6:	f100 0514 	add.w	r5, r0, #20
 8007eca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ece:	9301      	str	r3, [sp, #4]
 8007ed0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ed4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	429a      	cmp	r2, r3
 8007edc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ee0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ee4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ee8:	d331      	bcc.n	8007f4e <quorem+0x9c>
 8007eea:	f04f 0e00 	mov.w	lr, #0
 8007eee:	4640      	mov	r0, r8
 8007ef0:	46ac      	mov	ip, r5
 8007ef2:	46f2      	mov	sl, lr
 8007ef4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ef8:	b293      	uxth	r3, r2
 8007efa:	fb06 e303 	mla	r3, r6, r3, lr
 8007efe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f02:	0c1a      	lsrs	r2, r3, #16
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	ebaa 0303 	sub.w	r3, sl, r3
 8007f0a:	f8dc a000 	ldr.w	sl, [ip]
 8007f0e:	fa13 f38a 	uxtah	r3, r3, sl
 8007f12:	fb06 220e 	mla	r2, r6, lr, r2
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	9b00      	ldr	r3, [sp, #0]
 8007f1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f1e:	b292      	uxth	r2, r2
 8007f20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007f24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f28:	f8bd 3000 	ldrh.w	r3, [sp]
 8007f2c:	4581      	cmp	r9, r0
 8007f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f32:	f84c 3b04 	str.w	r3, [ip], #4
 8007f36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f3a:	d2db      	bcs.n	8007ef4 <quorem+0x42>
 8007f3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f40:	b92b      	cbnz	r3, 8007f4e <quorem+0x9c>
 8007f42:	9b01      	ldr	r3, [sp, #4]
 8007f44:	3b04      	subs	r3, #4
 8007f46:	429d      	cmp	r5, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	d32c      	bcc.n	8007fa6 <quorem+0xf4>
 8007f4c:	613c      	str	r4, [r7, #16]
 8007f4e:	4638      	mov	r0, r7
 8007f50:	f001 f9a8 	bl	80092a4 <__mcmp>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	db22      	blt.n	8007f9e <quorem+0xec>
 8007f58:	3601      	adds	r6, #1
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f62:	f8d1 c000 	ldr.w	ip, [r1]
 8007f66:	b293      	uxth	r3, r2
 8007f68:	1ac3      	subs	r3, r0, r3
 8007f6a:	0c12      	lsrs	r2, r2, #16
 8007f6c:	fa13 f38c 	uxtah	r3, r3, ip
 8007f70:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007f74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f7e:	45c1      	cmp	r9, r8
 8007f80:	f841 3b04 	str.w	r3, [r1], #4
 8007f84:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f88:	d2e9      	bcs.n	8007f5e <quorem+0xac>
 8007f8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f92:	b922      	cbnz	r2, 8007f9e <quorem+0xec>
 8007f94:	3b04      	subs	r3, #4
 8007f96:	429d      	cmp	r5, r3
 8007f98:	461a      	mov	r2, r3
 8007f9a:	d30a      	bcc.n	8007fb2 <quorem+0x100>
 8007f9c:	613c      	str	r4, [r7, #16]
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	b003      	add	sp, #12
 8007fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa6:	6812      	ldr	r2, [r2, #0]
 8007fa8:	3b04      	subs	r3, #4
 8007faa:	2a00      	cmp	r2, #0
 8007fac:	d1ce      	bne.n	8007f4c <quorem+0x9a>
 8007fae:	3c01      	subs	r4, #1
 8007fb0:	e7c9      	b.n	8007f46 <quorem+0x94>
 8007fb2:	6812      	ldr	r2, [r2, #0]
 8007fb4:	3b04      	subs	r3, #4
 8007fb6:	2a00      	cmp	r2, #0
 8007fb8:	d1f0      	bne.n	8007f9c <quorem+0xea>
 8007fba:	3c01      	subs	r4, #1
 8007fbc:	e7eb      	b.n	8007f96 <quorem+0xe4>
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	e7ee      	b.n	8007fa0 <quorem+0xee>
 8007fc2:	0000      	movs	r0, r0
 8007fc4:	0000      	movs	r0, r0
	...

08007fc8 <_dtoa_r>:
 8007fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fcc:	ed2d 8b04 	vpush	{d8-d9}
 8007fd0:	69c5      	ldr	r5, [r0, #28]
 8007fd2:	b093      	sub	sp, #76	; 0x4c
 8007fd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007fd8:	ec57 6b10 	vmov	r6, r7, d0
 8007fdc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fe0:	9107      	str	r1, [sp, #28]
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	920a      	str	r2, [sp, #40]	; 0x28
 8007fe6:	930d      	str	r3, [sp, #52]	; 0x34
 8007fe8:	b975      	cbnz	r5, 8008008 <_dtoa_r+0x40>
 8007fea:	2010      	movs	r0, #16
 8007fec:	f000 fe2a 	bl	8008c44 <malloc>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	61e0      	str	r0, [r4, #28]
 8007ff4:	b920      	cbnz	r0, 8008000 <_dtoa_r+0x38>
 8007ff6:	4bae      	ldr	r3, [pc, #696]	; (80082b0 <_dtoa_r+0x2e8>)
 8007ff8:	21ef      	movs	r1, #239	; 0xef
 8007ffa:	48ae      	ldr	r0, [pc, #696]	; (80082b4 <_dtoa_r+0x2ec>)
 8007ffc:	f001 fb1e 	bl	800963c <__assert_func>
 8008000:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008004:	6005      	str	r5, [r0, #0]
 8008006:	60c5      	str	r5, [r0, #12]
 8008008:	69e3      	ldr	r3, [r4, #28]
 800800a:	6819      	ldr	r1, [r3, #0]
 800800c:	b151      	cbz	r1, 8008024 <_dtoa_r+0x5c>
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	604a      	str	r2, [r1, #4]
 8008012:	2301      	movs	r3, #1
 8008014:	4093      	lsls	r3, r2
 8008016:	608b      	str	r3, [r1, #8]
 8008018:	4620      	mov	r0, r4
 800801a:	f000 ff07 	bl	8008e2c <_Bfree>
 800801e:	69e3      	ldr	r3, [r4, #28]
 8008020:	2200      	movs	r2, #0
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	1e3b      	subs	r3, r7, #0
 8008026:	bfbb      	ittet	lt
 8008028:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800802c:	9303      	strlt	r3, [sp, #12]
 800802e:	2300      	movge	r3, #0
 8008030:	2201      	movlt	r2, #1
 8008032:	bfac      	ite	ge
 8008034:	f8c8 3000 	strge.w	r3, [r8]
 8008038:	f8c8 2000 	strlt.w	r2, [r8]
 800803c:	4b9e      	ldr	r3, [pc, #632]	; (80082b8 <_dtoa_r+0x2f0>)
 800803e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008042:	ea33 0308 	bics.w	r3, r3, r8
 8008046:	d11b      	bne.n	8008080 <_dtoa_r+0xb8>
 8008048:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800804a:	f242 730f 	movw	r3, #9999	; 0x270f
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008054:	4333      	orrs	r3, r6
 8008056:	f000 8593 	beq.w	8008b80 <_dtoa_r+0xbb8>
 800805a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800805c:	b963      	cbnz	r3, 8008078 <_dtoa_r+0xb0>
 800805e:	4b97      	ldr	r3, [pc, #604]	; (80082bc <_dtoa_r+0x2f4>)
 8008060:	e027      	b.n	80080b2 <_dtoa_r+0xea>
 8008062:	4b97      	ldr	r3, [pc, #604]	; (80082c0 <_dtoa_r+0x2f8>)
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	9800      	ldr	r0, [sp, #0]
 800806e:	b013      	add	sp, #76	; 0x4c
 8008070:	ecbd 8b04 	vpop	{d8-d9}
 8008074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008078:	4b90      	ldr	r3, [pc, #576]	; (80082bc <_dtoa_r+0x2f4>)
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	3303      	adds	r3, #3
 800807e:	e7f3      	b.n	8008068 <_dtoa_r+0xa0>
 8008080:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008084:	2200      	movs	r2, #0
 8008086:	ec51 0b17 	vmov	r0, r1, d7
 800808a:	eeb0 8a47 	vmov.f32	s16, s14
 800808e:	eef0 8a67 	vmov.f32	s17, s15
 8008092:	2300      	movs	r3, #0
 8008094:	f7f8 fd20 	bl	8000ad8 <__aeabi_dcmpeq>
 8008098:	4681      	mov	r9, r0
 800809a:	b160      	cbz	r0, 80080b6 <_dtoa_r+0xee>
 800809c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800809e:	2301      	movs	r3, #1
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 8568 	beq.w	8008b7a <_dtoa_r+0xbb2>
 80080aa:	4b86      	ldr	r3, [pc, #536]	; (80082c4 <_dtoa_r+0x2fc>)
 80080ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	e7da      	b.n	800806c <_dtoa_r+0xa4>
 80080b6:	aa10      	add	r2, sp, #64	; 0x40
 80080b8:	a911      	add	r1, sp, #68	; 0x44
 80080ba:	4620      	mov	r0, r4
 80080bc:	eeb0 0a48 	vmov.f32	s0, s16
 80080c0:	eef0 0a68 	vmov.f32	s1, s17
 80080c4:	f001 f994 	bl	80093f0 <__d2b>
 80080c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80080cc:	4682      	mov	sl, r0
 80080ce:	2d00      	cmp	r5, #0
 80080d0:	d07f      	beq.n	80081d2 <_dtoa_r+0x20a>
 80080d2:	ee18 3a90 	vmov	r3, s17
 80080d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80080de:	ec51 0b18 	vmov	r0, r1, d8
 80080e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80080e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80080ee:	4619      	mov	r1, r3
 80080f0:	2200      	movs	r2, #0
 80080f2:	4b75      	ldr	r3, [pc, #468]	; (80082c8 <_dtoa_r+0x300>)
 80080f4:	f7f8 f8d0 	bl	8000298 <__aeabi_dsub>
 80080f8:	a367      	add	r3, pc, #412	; (adr r3, 8008298 <_dtoa_r+0x2d0>)
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	f7f8 fa83 	bl	8000608 <__aeabi_dmul>
 8008102:	a367      	add	r3, pc, #412	; (adr r3, 80082a0 <_dtoa_r+0x2d8>)
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	f7f8 f8c8 	bl	800029c <__adddf3>
 800810c:	4606      	mov	r6, r0
 800810e:	4628      	mov	r0, r5
 8008110:	460f      	mov	r7, r1
 8008112:	f7f8 fa0f 	bl	8000534 <__aeabi_i2d>
 8008116:	a364      	add	r3, pc, #400	; (adr r3, 80082a8 <_dtoa_r+0x2e0>)
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	f7f8 fa74 	bl	8000608 <__aeabi_dmul>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4630      	mov	r0, r6
 8008126:	4639      	mov	r1, r7
 8008128:	f7f8 f8b8 	bl	800029c <__adddf3>
 800812c:	4606      	mov	r6, r0
 800812e:	460f      	mov	r7, r1
 8008130:	f7f8 fd1a 	bl	8000b68 <__aeabi_d2iz>
 8008134:	2200      	movs	r2, #0
 8008136:	4683      	mov	fp, r0
 8008138:	2300      	movs	r3, #0
 800813a:	4630      	mov	r0, r6
 800813c:	4639      	mov	r1, r7
 800813e:	f7f8 fcd5 	bl	8000aec <__aeabi_dcmplt>
 8008142:	b148      	cbz	r0, 8008158 <_dtoa_r+0x190>
 8008144:	4658      	mov	r0, fp
 8008146:	f7f8 f9f5 	bl	8000534 <__aeabi_i2d>
 800814a:	4632      	mov	r2, r6
 800814c:	463b      	mov	r3, r7
 800814e:	f7f8 fcc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008152:	b908      	cbnz	r0, 8008158 <_dtoa_r+0x190>
 8008154:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008158:	f1bb 0f16 	cmp.w	fp, #22
 800815c:	d857      	bhi.n	800820e <_dtoa_r+0x246>
 800815e:	4b5b      	ldr	r3, [pc, #364]	; (80082cc <_dtoa_r+0x304>)
 8008160:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008168:	ec51 0b18 	vmov	r0, r1, d8
 800816c:	f7f8 fcbe 	bl	8000aec <__aeabi_dcmplt>
 8008170:	2800      	cmp	r0, #0
 8008172:	d04e      	beq.n	8008212 <_dtoa_r+0x24a>
 8008174:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008178:	2300      	movs	r3, #0
 800817a:	930c      	str	r3, [sp, #48]	; 0x30
 800817c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800817e:	1b5b      	subs	r3, r3, r5
 8008180:	1e5a      	subs	r2, r3, #1
 8008182:	bf45      	ittet	mi
 8008184:	f1c3 0301 	rsbmi	r3, r3, #1
 8008188:	9305      	strmi	r3, [sp, #20]
 800818a:	2300      	movpl	r3, #0
 800818c:	2300      	movmi	r3, #0
 800818e:	9206      	str	r2, [sp, #24]
 8008190:	bf54      	ite	pl
 8008192:	9305      	strpl	r3, [sp, #20]
 8008194:	9306      	strmi	r3, [sp, #24]
 8008196:	f1bb 0f00 	cmp.w	fp, #0
 800819a:	db3c      	blt.n	8008216 <_dtoa_r+0x24e>
 800819c:	9b06      	ldr	r3, [sp, #24]
 800819e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80081a2:	445b      	add	r3, fp
 80081a4:	9306      	str	r3, [sp, #24]
 80081a6:	2300      	movs	r3, #0
 80081a8:	9308      	str	r3, [sp, #32]
 80081aa:	9b07      	ldr	r3, [sp, #28]
 80081ac:	2b09      	cmp	r3, #9
 80081ae:	d868      	bhi.n	8008282 <_dtoa_r+0x2ba>
 80081b0:	2b05      	cmp	r3, #5
 80081b2:	bfc4      	itt	gt
 80081b4:	3b04      	subgt	r3, #4
 80081b6:	9307      	strgt	r3, [sp, #28]
 80081b8:	9b07      	ldr	r3, [sp, #28]
 80081ba:	f1a3 0302 	sub.w	r3, r3, #2
 80081be:	bfcc      	ite	gt
 80081c0:	2500      	movgt	r5, #0
 80081c2:	2501      	movle	r5, #1
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	f200 8085 	bhi.w	80082d4 <_dtoa_r+0x30c>
 80081ca:	e8df f003 	tbb	[pc, r3]
 80081ce:	3b2e      	.short	0x3b2e
 80081d0:	5839      	.short	0x5839
 80081d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80081d6:	441d      	add	r5, r3
 80081d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80081dc:	2b20      	cmp	r3, #32
 80081de:	bfc1      	itttt	gt
 80081e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80081e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80081e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80081ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80081f0:	bfd6      	itet	le
 80081f2:	f1c3 0320 	rsble	r3, r3, #32
 80081f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80081fa:	fa06 f003 	lslle.w	r0, r6, r3
 80081fe:	f7f8 f989 	bl	8000514 <__aeabi_ui2d>
 8008202:	2201      	movs	r2, #1
 8008204:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008208:	3d01      	subs	r5, #1
 800820a:	920e      	str	r2, [sp, #56]	; 0x38
 800820c:	e76f      	b.n	80080ee <_dtoa_r+0x126>
 800820e:	2301      	movs	r3, #1
 8008210:	e7b3      	b.n	800817a <_dtoa_r+0x1b2>
 8008212:	900c      	str	r0, [sp, #48]	; 0x30
 8008214:	e7b2      	b.n	800817c <_dtoa_r+0x1b4>
 8008216:	9b05      	ldr	r3, [sp, #20]
 8008218:	eba3 030b 	sub.w	r3, r3, fp
 800821c:	9305      	str	r3, [sp, #20]
 800821e:	f1cb 0300 	rsb	r3, fp, #0
 8008222:	9308      	str	r3, [sp, #32]
 8008224:	2300      	movs	r3, #0
 8008226:	930b      	str	r3, [sp, #44]	; 0x2c
 8008228:	e7bf      	b.n	80081aa <_dtoa_r+0x1e2>
 800822a:	2300      	movs	r3, #0
 800822c:	9309      	str	r3, [sp, #36]	; 0x24
 800822e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008230:	2b00      	cmp	r3, #0
 8008232:	dc52      	bgt.n	80082da <_dtoa_r+0x312>
 8008234:	2301      	movs	r3, #1
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	9304      	str	r3, [sp, #16]
 800823a:	461a      	mov	r2, r3
 800823c:	920a      	str	r2, [sp, #40]	; 0x28
 800823e:	e00b      	b.n	8008258 <_dtoa_r+0x290>
 8008240:	2301      	movs	r3, #1
 8008242:	e7f3      	b.n	800822c <_dtoa_r+0x264>
 8008244:	2300      	movs	r3, #0
 8008246:	9309      	str	r3, [sp, #36]	; 0x24
 8008248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824a:	445b      	add	r3, fp
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	3301      	adds	r3, #1
 8008250:	2b01      	cmp	r3, #1
 8008252:	9304      	str	r3, [sp, #16]
 8008254:	bfb8      	it	lt
 8008256:	2301      	movlt	r3, #1
 8008258:	69e0      	ldr	r0, [r4, #28]
 800825a:	2100      	movs	r1, #0
 800825c:	2204      	movs	r2, #4
 800825e:	f102 0614 	add.w	r6, r2, #20
 8008262:	429e      	cmp	r6, r3
 8008264:	d93d      	bls.n	80082e2 <_dtoa_r+0x31a>
 8008266:	6041      	str	r1, [r0, #4]
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fd9f 	bl	8008dac <_Balloc>
 800826e:	9000      	str	r0, [sp, #0]
 8008270:	2800      	cmp	r0, #0
 8008272:	d139      	bne.n	80082e8 <_dtoa_r+0x320>
 8008274:	4b16      	ldr	r3, [pc, #88]	; (80082d0 <_dtoa_r+0x308>)
 8008276:	4602      	mov	r2, r0
 8008278:	f240 11af 	movw	r1, #431	; 0x1af
 800827c:	e6bd      	b.n	8007ffa <_dtoa_r+0x32>
 800827e:	2301      	movs	r3, #1
 8008280:	e7e1      	b.n	8008246 <_dtoa_r+0x27e>
 8008282:	2501      	movs	r5, #1
 8008284:	2300      	movs	r3, #0
 8008286:	9307      	str	r3, [sp, #28]
 8008288:	9509      	str	r5, [sp, #36]	; 0x24
 800828a:	f04f 33ff 	mov.w	r3, #4294967295
 800828e:	9301      	str	r3, [sp, #4]
 8008290:	9304      	str	r3, [sp, #16]
 8008292:	2200      	movs	r2, #0
 8008294:	2312      	movs	r3, #18
 8008296:	e7d1      	b.n	800823c <_dtoa_r+0x274>
 8008298:	636f4361 	.word	0x636f4361
 800829c:	3fd287a7 	.word	0x3fd287a7
 80082a0:	8b60c8b3 	.word	0x8b60c8b3
 80082a4:	3fc68a28 	.word	0x3fc68a28
 80082a8:	509f79fb 	.word	0x509f79fb
 80082ac:	3fd34413 	.word	0x3fd34413
 80082b0:	08009cc9 	.word	0x08009cc9
 80082b4:	08009ce0 	.word	0x08009ce0
 80082b8:	7ff00000 	.word	0x7ff00000
 80082bc:	08009cc5 	.word	0x08009cc5
 80082c0:	08009cbc 	.word	0x08009cbc
 80082c4:	08009c99 	.word	0x08009c99
 80082c8:	3ff80000 	.word	0x3ff80000
 80082cc:	08009dd0 	.word	0x08009dd0
 80082d0:	08009d38 	.word	0x08009d38
 80082d4:	2301      	movs	r3, #1
 80082d6:	9309      	str	r3, [sp, #36]	; 0x24
 80082d8:	e7d7      	b.n	800828a <_dtoa_r+0x2c2>
 80082da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082dc:	9301      	str	r3, [sp, #4]
 80082de:	9304      	str	r3, [sp, #16]
 80082e0:	e7ba      	b.n	8008258 <_dtoa_r+0x290>
 80082e2:	3101      	adds	r1, #1
 80082e4:	0052      	lsls	r2, r2, #1
 80082e6:	e7ba      	b.n	800825e <_dtoa_r+0x296>
 80082e8:	69e3      	ldr	r3, [r4, #28]
 80082ea:	9a00      	ldr	r2, [sp, #0]
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	9b04      	ldr	r3, [sp, #16]
 80082f0:	2b0e      	cmp	r3, #14
 80082f2:	f200 80a8 	bhi.w	8008446 <_dtoa_r+0x47e>
 80082f6:	2d00      	cmp	r5, #0
 80082f8:	f000 80a5 	beq.w	8008446 <_dtoa_r+0x47e>
 80082fc:	f1bb 0f00 	cmp.w	fp, #0
 8008300:	dd38      	ble.n	8008374 <_dtoa_r+0x3ac>
 8008302:	4bc0      	ldr	r3, [pc, #768]	; (8008604 <_dtoa_r+0x63c>)
 8008304:	f00b 020f 	and.w	r2, fp, #15
 8008308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800830c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008310:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008314:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008318:	d019      	beq.n	800834e <_dtoa_r+0x386>
 800831a:	4bbb      	ldr	r3, [pc, #748]	; (8008608 <_dtoa_r+0x640>)
 800831c:	ec51 0b18 	vmov	r0, r1, d8
 8008320:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008324:	f7f8 fa9a 	bl	800085c <__aeabi_ddiv>
 8008328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800832c:	f008 080f 	and.w	r8, r8, #15
 8008330:	2503      	movs	r5, #3
 8008332:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008608 <_dtoa_r+0x640>
 8008336:	f1b8 0f00 	cmp.w	r8, #0
 800833a:	d10a      	bne.n	8008352 <_dtoa_r+0x38a>
 800833c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008340:	4632      	mov	r2, r6
 8008342:	463b      	mov	r3, r7
 8008344:	f7f8 fa8a 	bl	800085c <__aeabi_ddiv>
 8008348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800834c:	e02b      	b.n	80083a6 <_dtoa_r+0x3de>
 800834e:	2502      	movs	r5, #2
 8008350:	e7ef      	b.n	8008332 <_dtoa_r+0x36a>
 8008352:	f018 0f01 	tst.w	r8, #1
 8008356:	d008      	beq.n	800836a <_dtoa_r+0x3a2>
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008360:	f7f8 f952 	bl	8000608 <__aeabi_dmul>
 8008364:	3501      	adds	r5, #1
 8008366:	4606      	mov	r6, r0
 8008368:	460f      	mov	r7, r1
 800836a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800836e:	f109 0908 	add.w	r9, r9, #8
 8008372:	e7e0      	b.n	8008336 <_dtoa_r+0x36e>
 8008374:	f000 809f 	beq.w	80084b6 <_dtoa_r+0x4ee>
 8008378:	f1cb 0600 	rsb	r6, fp, #0
 800837c:	4ba1      	ldr	r3, [pc, #644]	; (8008604 <_dtoa_r+0x63c>)
 800837e:	4fa2      	ldr	r7, [pc, #648]	; (8008608 <_dtoa_r+0x640>)
 8008380:	f006 020f 	and.w	r2, r6, #15
 8008384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	ec51 0b18 	vmov	r0, r1, d8
 8008390:	f7f8 f93a 	bl	8000608 <__aeabi_dmul>
 8008394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008398:	1136      	asrs	r6, r6, #4
 800839a:	2300      	movs	r3, #0
 800839c:	2502      	movs	r5, #2
 800839e:	2e00      	cmp	r6, #0
 80083a0:	d17e      	bne.n	80084a0 <_dtoa_r+0x4d8>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1d0      	bne.n	8008348 <_dtoa_r+0x380>
 80083a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f000 8084 	beq.w	80084ba <_dtoa_r+0x4f2>
 80083b2:	4b96      	ldr	r3, [pc, #600]	; (800860c <_dtoa_r+0x644>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	4640      	mov	r0, r8
 80083b8:	4649      	mov	r1, r9
 80083ba:	f7f8 fb97 	bl	8000aec <__aeabi_dcmplt>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d07b      	beq.n	80084ba <_dtoa_r+0x4f2>
 80083c2:	9b04      	ldr	r3, [sp, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d078      	beq.n	80084ba <_dtoa_r+0x4f2>
 80083c8:	9b01      	ldr	r3, [sp, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	dd39      	ble.n	8008442 <_dtoa_r+0x47a>
 80083ce:	4b90      	ldr	r3, [pc, #576]	; (8008610 <_dtoa_r+0x648>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	4640      	mov	r0, r8
 80083d4:	4649      	mov	r1, r9
 80083d6:	f7f8 f917 	bl	8000608 <__aeabi_dmul>
 80083da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083de:	9e01      	ldr	r6, [sp, #4]
 80083e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80083e4:	3501      	adds	r5, #1
 80083e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80083ea:	4628      	mov	r0, r5
 80083ec:	f7f8 f8a2 	bl	8000534 <__aeabi_i2d>
 80083f0:	4642      	mov	r2, r8
 80083f2:	464b      	mov	r3, r9
 80083f4:	f7f8 f908 	bl	8000608 <__aeabi_dmul>
 80083f8:	4b86      	ldr	r3, [pc, #536]	; (8008614 <_dtoa_r+0x64c>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	f7f7 ff4e 	bl	800029c <__adddf3>
 8008400:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008408:	9303      	str	r3, [sp, #12]
 800840a:	2e00      	cmp	r6, #0
 800840c:	d158      	bne.n	80084c0 <_dtoa_r+0x4f8>
 800840e:	4b82      	ldr	r3, [pc, #520]	; (8008618 <_dtoa_r+0x650>)
 8008410:	2200      	movs	r2, #0
 8008412:	4640      	mov	r0, r8
 8008414:	4649      	mov	r1, r9
 8008416:	f7f7 ff3f 	bl	8000298 <__aeabi_dsub>
 800841a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800841e:	4680      	mov	r8, r0
 8008420:	4689      	mov	r9, r1
 8008422:	f7f8 fb81 	bl	8000b28 <__aeabi_dcmpgt>
 8008426:	2800      	cmp	r0, #0
 8008428:	f040 8296 	bne.w	8008958 <_dtoa_r+0x990>
 800842c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008430:	4640      	mov	r0, r8
 8008432:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008436:	4649      	mov	r1, r9
 8008438:	f7f8 fb58 	bl	8000aec <__aeabi_dcmplt>
 800843c:	2800      	cmp	r0, #0
 800843e:	f040 8289 	bne.w	8008954 <_dtoa_r+0x98c>
 8008442:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008446:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008448:	2b00      	cmp	r3, #0
 800844a:	f2c0 814e 	blt.w	80086ea <_dtoa_r+0x722>
 800844e:	f1bb 0f0e 	cmp.w	fp, #14
 8008452:	f300 814a 	bgt.w	80086ea <_dtoa_r+0x722>
 8008456:	4b6b      	ldr	r3, [pc, #428]	; (8008604 <_dtoa_r+0x63c>)
 8008458:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800845c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008462:	2b00      	cmp	r3, #0
 8008464:	f280 80dc 	bge.w	8008620 <_dtoa_r+0x658>
 8008468:	9b04      	ldr	r3, [sp, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	f300 80d8 	bgt.w	8008620 <_dtoa_r+0x658>
 8008470:	f040 826f 	bne.w	8008952 <_dtoa_r+0x98a>
 8008474:	4b68      	ldr	r3, [pc, #416]	; (8008618 <_dtoa_r+0x650>)
 8008476:	2200      	movs	r2, #0
 8008478:	4640      	mov	r0, r8
 800847a:	4649      	mov	r1, r9
 800847c:	f7f8 f8c4 	bl	8000608 <__aeabi_dmul>
 8008480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008484:	f7f8 fb46 	bl	8000b14 <__aeabi_dcmpge>
 8008488:	9e04      	ldr	r6, [sp, #16]
 800848a:	4637      	mov	r7, r6
 800848c:	2800      	cmp	r0, #0
 800848e:	f040 8245 	bne.w	800891c <_dtoa_r+0x954>
 8008492:	9d00      	ldr	r5, [sp, #0]
 8008494:	2331      	movs	r3, #49	; 0x31
 8008496:	f805 3b01 	strb.w	r3, [r5], #1
 800849a:	f10b 0b01 	add.w	fp, fp, #1
 800849e:	e241      	b.n	8008924 <_dtoa_r+0x95c>
 80084a0:	07f2      	lsls	r2, r6, #31
 80084a2:	d505      	bpl.n	80084b0 <_dtoa_r+0x4e8>
 80084a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084a8:	f7f8 f8ae 	bl	8000608 <__aeabi_dmul>
 80084ac:	3501      	adds	r5, #1
 80084ae:	2301      	movs	r3, #1
 80084b0:	1076      	asrs	r6, r6, #1
 80084b2:	3708      	adds	r7, #8
 80084b4:	e773      	b.n	800839e <_dtoa_r+0x3d6>
 80084b6:	2502      	movs	r5, #2
 80084b8:	e775      	b.n	80083a6 <_dtoa_r+0x3de>
 80084ba:	9e04      	ldr	r6, [sp, #16]
 80084bc:	465f      	mov	r7, fp
 80084be:	e792      	b.n	80083e6 <_dtoa_r+0x41e>
 80084c0:	9900      	ldr	r1, [sp, #0]
 80084c2:	4b50      	ldr	r3, [pc, #320]	; (8008604 <_dtoa_r+0x63c>)
 80084c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084c8:	4431      	add	r1, r6
 80084ca:	9102      	str	r1, [sp, #8]
 80084cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084ce:	eeb0 9a47 	vmov.f32	s18, s14
 80084d2:	eef0 9a67 	vmov.f32	s19, s15
 80084d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80084da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084de:	2900      	cmp	r1, #0
 80084e0:	d044      	beq.n	800856c <_dtoa_r+0x5a4>
 80084e2:	494e      	ldr	r1, [pc, #312]	; (800861c <_dtoa_r+0x654>)
 80084e4:	2000      	movs	r0, #0
 80084e6:	f7f8 f9b9 	bl	800085c <__aeabi_ddiv>
 80084ea:	ec53 2b19 	vmov	r2, r3, d9
 80084ee:	f7f7 fed3 	bl	8000298 <__aeabi_dsub>
 80084f2:	9d00      	ldr	r5, [sp, #0]
 80084f4:	ec41 0b19 	vmov	d9, r0, r1
 80084f8:	4649      	mov	r1, r9
 80084fa:	4640      	mov	r0, r8
 80084fc:	f7f8 fb34 	bl	8000b68 <__aeabi_d2iz>
 8008500:	4606      	mov	r6, r0
 8008502:	f7f8 f817 	bl	8000534 <__aeabi_i2d>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4640      	mov	r0, r8
 800850c:	4649      	mov	r1, r9
 800850e:	f7f7 fec3 	bl	8000298 <__aeabi_dsub>
 8008512:	3630      	adds	r6, #48	; 0x30
 8008514:	f805 6b01 	strb.w	r6, [r5], #1
 8008518:	ec53 2b19 	vmov	r2, r3, d9
 800851c:	4680      	mov	r8, r0
 800851e:	4689      	mov	r9, r1
 8008520:	f7f8 fae4 	bl	8000aec <__aeabi_dcmplt>
 8008524:	2800      	cmp	r0, #0
 8008526:	d164      	bne.n	80085f2 <_dtoa_r+0x62a>
 8008528:	4642      	mov	r2, r8
 800852a:	464b      	mov	r3, r9
 800852c:	4937      	ldr	r1, [pc, #220]	; (800860c <_dtoa_r+0x644>)
 800852e:	2000      	movs	r0, #0
 8008530:	f7f7 feb2 	bl	8000298 <__aeabi_dsub>
 8008534:	ec53 2b19 	vmov	r2, r3, d9
 8008538:	f7f8 fad8 	bl	8000aec <__aeabi_dcmplt>
 800853c:	2800      	cmp	r0, #0
 800853e:	f040 80b6 	bne.w	80086ae <_dtoa_r+0x6e6>
 8008542:	9b02      	ldr	r3, [sp, #8]
 8008544:	429d      	cmp	r5, r3
 8008546:	f43f af7c 	beq.w	8008442 <_dtoa_r+0x47a>
 800854a:	4b31      	ldr	r3, [pc, #196]	; (8008610 <_dtoa_r+0x648>)
 800854c:	ec51 0b19 	vmov	r0, r1, d9
 8008550:	2200      	movs	r2, #0
 8008552:	f7f8 f859 	bl	8000608 <__aeabi_dmul>
 8008556:	4b2e      	ldr	r3, [pc, #184]	; (8008610 <_dtoa_r+0x648>)
 8008558:	ec41 0b19 	vmov	d9, r0, r1
 800855c:	2200      	movs	r2, #0
 800855e:	4640      	mov	r0, r8
 8008560:	4649      	mov	r1, r9
 8008562:	f7f8 f851 	bl	8000608 <__aeabi_dmul>
 8008566:	4680      	mov	r8, r0
 8008568:	4689      	mov	r9, r1
 800856a:	e7c5      	b.n	80084f8 <_dtoa_r+0x530>
 800856c:	ec51 0b17 	vmov	r0, r1, d7
 8008570:	f7f8 f84a 	bl	8000608 <__aeabi_dmul>
 8008574:	9b02      	ldr	r3, [sp, #8]
 8008576:	9d00      	ldr	r5, [sp, #0]
 8008578:	930f      	str	r3, [sp, #60]	; 0x3c
 800857a:	ec41 0b19 	vmov	d9, r0, r1
 800857e:	4649      	mov	r1, r9
 8008580:	4640      	mov	r0, r8
 8008582:	f7f8 faf1 	bl	8000b68 <__aeabi_d2iz>
 8008586:	4606      	mov	r6, r0
 8008588:	f7f7 ffd4 	bl	8000534 <__aeabi_i2d>
 800858c:	3630      	adds	r6, #48	; 0x30
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	4640      	mov	r0, r8
 8008594:	4649      	mov	r1, r9
 8008596:	f7f7 fe7f 	bl	8000298 <__aeabi_dsub>
 800859a:	f805 6b01 	strb.w	r6, [r5], #1
 800859e:	9b02      	ldr	r3, [sp, #8]
 80085a0:	429d      	cmp	r5, r3
 80085a2:	4680      	mov	r8, r0
 80085a4:	4689      	mov	r9, r1
 80085a6:	f04f 0200 	mov.w	r2, #0
 80085aa:	d124      	bne.n	80085f6 <_dtoa_r+0x62e>
 80085ac:	4b1b      	ldr	r3, [pc, #108]	; (800861c <_dtoa_r+0x654>)
 80085ae:	ec51 0b19 	vmov	r0, r1, d9
 80085b2:	f7f7 fe73 	bl	800029c <__adddf3>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4640      	mov	r0, r8
 80085bc:	4649      	mov	r1, r9
 80085be:	f7f8 fab3 	bl	8000b28 <__aeabi_dcmpgt>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d173      	bne.n	80086ae <_dtoa_r+0x6e6>
 80085c6:	ec53 2b19 	vmov	r2, r3, d9
 80085ca:	4914      	ldr	r1, [pc, #80]	; (800861c <_dtoa_r+0x654>)
 80085cc:	2000      	movs	r0, #0
 80085ce:	f7f7 fe63 	bl	8000298 <__aeabi_dsub>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	4640      	mov	r0, r8
 80085d8:	4649      	mov	r1, r9
 80085da:	f7f8 fa87 	bl	8000aec <__aeabi_dcmplt>
 80085de:	2800      	cmp	r0, #0
 80085e0:	f43f af2f 	beq.w	8008442 <_dtoa_r+0x47a>
 80085e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80085e6:	1e6b      	subs	r3, r5, #1
 80085e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80085ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085ee:	2b30      	cmp	r3, #48	; 0x30
 80085f0:	d0f8      	beq.n	80085e4 <_dtoa_r+0x61c>
 80085f2:	46bb      	mov	fp, r7
 80085f4:	e04a      	b.n	800868c <_dtoa_r+0x6c4>
 80085f6:	4b06      	ldr	r3, [pc, #24]	; (8008610 <_dtoa_r+0x648>)
 80085f8:	f7f8 f806 	bl	8000608 <__aeabi_dmul>
 80085fc:	4680      	mov	r8, r0
 80085fe:	4689      	mov	r9, r1
 8008600:	e7bd      	b.n	800857e <_dtoa_r+0x5b6>
 8008602:	bf00      	nop
 8008604:	08009dd0 	.word	0x08009dd0
 8008608:	08009da8 	.word	0x08009da8
 800860c:	3ff00000 	.word	0x3ff00000
 8008610:	40240000 	.word	0x40240000
 8008614:	401c0000 	.word	0x401c0000
 8008618:	40140000 	.word	0x40140000
 800861c:	3fe00000 	.word	0x3fe00000
 8008620:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008624:	9d00      	ldr	r5, [sp, #0]
 8008626:	4642      	mov	r2, r8
 8008628:	464b      	mov	r3, r9
 800862a:	4630      	mov	r0, r6
 800862c:	4639      	mov	r1, r7
 800862e:	f7f8 f915 	bl	800085c <__aeabi_ddiv>
 8008632:	f7f8 fa99 	bl	8000b68 <__aeabi_d2iz>
 8008636:	9001      	str	r0, [sp, #4]
 8008638:	f7f7 ff7c 	bl	8000534 <__aeabi_i2d>
 800863c:	4642      	mov	r2, r8
 800863e:	464b      	mov	r3, r9
 8008640:	f7f7 ffe2 	bl	8000608 <__aeabi_dmul>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	4630      	mov	r0, r6
 800864a:	4639      	mov	r1, r7
 800864c:	f7f7 fe24 	bl	8000298 <__aeabi_dsub>
 8008650:	9e01      	ldr	r6, [sp, #4]
 8008652:	9f04      	ldr	r7, [sp, #16]
 8008654:	3630      	adds	r6, #48	; 0x30
 8008656:	f805 6b01 	strb.w	r6, [r5], #1
 800865a:	9e00      	ldr	r6, [sp, #0]
 800865c:	1bae      	subs	r6, r5, r6
 800865e:	42b7      	cmp	r7, r6
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	d134      	bne.n	80086d0 <_dtoa_r+0x708>
 8008666:	f7f7 fe19 	bl	800029c <__adddf3>
 800866a:	4642      	mov	r2, r8
 800866c:	464b      	mov	r3, r9
 800866e:	4606      	mov	r6, r0
 8008670:	460f      	mov	r7, r1
 8008672:	f7f8 fa59 	bl	8000b28 <__aeabi_dcmpgt>
 8008676:	b9c8      	cbnz	r0, 80086ac <_dtoa_r+0x6e4>
 8008678:	4642      	mov	r2, r8
 800867a:	464b      	mov	r3, r9
 800867c:	4630      	mov	r0, r6
 800867e:	4639      	mov	r1, r7
 8008680:	f7f8 fa2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008684:	b110      	cbz	r0, 800868c <_dtoa_r+0x6c4>
 8008686:	9b01      	ldr	r3, [sp, #4]
 8008688:	07db      	lsls	r3, r3, #31
 800868a:	d40f      	bmi.n	80086ac <_dtoa_r+0x6e4>
 800868c:	4651      	mov	r1, sl
 800868e:	4620      	mov	r0, r4
 8008690:	f000 fbcc 	bl	8008e2c <_Bfree>
 8008694:	2300      	movs	r3, #0
 8008696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008698:	702b      	strb	r3, [r5, #0]
 800869a:	f10b 0301 	add.w	r3, fp, #1
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f43f ace2 	beq.w	800806c <_dtoa_r+0xa4>
 80086a8:	601d      	str	r5, [r3, #0]
 80086aa:	e4df      	b.n	800806c <_dtoa_r+0xa4>
 80086ac:	465f      	mov	r7, fp
 80086ae:	462b      	mov	r3, r5
 80086b0:	461d      	mov	r5, r3
 80086b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086b6:	2a39      	cmp	r2, #57	; 0x39
 80086b8:	d106      	bne.n	80086c8 <_dtoa_r+0x700>
 80086ba:	9a00      	ldr	r2, [sp, #0]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d1f7      	bne.n	80086b0 <_dtoa_r+0x6e8>
 80086c0:	9900      	ldr	r1, [sp, #0]
 80086c2:	2230      	movs	r2, #48	; 0x30
 80086c4:	3701      	adds	r7, #1
 80086c6:	700a      	strb	r2, [r1, #0]
 80086c8:	781a      	ldrb	r2, [r3, #0]
 80086ca:	3201      	adds	r2, #1
 80086cc:	701a      	strb	r2, [r3, #0]
 80086ce:	e790      	b.n	80085f2 <_dtoa_r+0x62a>
 80086d0:	4ba3      	ldr	r3, [pc, #652]	; (8008960 <_dtoa_r+0x998>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	f7f7 ff98 	bl	8000608 <__aeabi_dmul>
 80086d8:	2200      	movs	r2, #0
 80086da:	2300      	movs	r3, #0
 80086dc:	4606      	mov	r6, r0
 80086de:	460f      	mov	r7, r1
 80086e0:	f7f8 f9fa 	bl	8000ad8 <__aeabi_dcmpeq>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d09e      	beq.n	8008626 <_dtoa_r+0x65e>
 80086e8:	e7d0      	b.n	800868c <_dtoa_r+0x6c4>
 80086ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086ec:	2a00      	cmp	r2, #0
 80086ee:	f000 80ca 	beq.w	8008886 <_dtoa_r+0x8be>
 80086f2:	9a07      	ldr	r2, [sp, #28]
 80086f4:	2a01      	cmp	r2, #1
 80086f6:	f300 80ad 	bgt.w	8008854 <_dtoa_r+0x88c>
 80086fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086fc:	2a00      	cmp	r2, #0
 80086fe:	f000 80a5 	beq.w	800884c <_dtoa_r+0x884>
 8008702:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008706:	9e08      	ldr	r6, [sp, #32]
 8008708:	9d05      	ldr	r5, [sp, #20]
 800870a:	9a05      	ldr	r2, [sp, #20]
 800870c:	441a      	add	r2, r3
 800870e:	9205      	str	r2, [sp, #20]
 8008710:	9a06      	ldr	r2, [sp, #24]
 8008712:	2101      	movs	r1, #1
 8008714:	441a      	add	r2, r3
 8008716:	4620      	mov	r0, r4
 8008718:	9206      	str	r2, [sp, #24]
 800871a:	f000 fc3d 	bl	8008f98 <__i2b>
 800871e:	4607      	mov	r7, r0
 8008720:	b165      	cbz	r5, 800873c <_dtoa_r+0x774>
 8008722:	9b06      	ldr	r3, [sp, #24]
 8008724:	2b00      	cmp	r3, #0
 8008726:	dd09      	ble.n	800873c <_dtoa_r+0x774>
 8008728:	42ab      	cmp	r3, r5
 800872a:	9a05      	ldr	r2, [sp, #20]
 800872c:	bfa8      	it	ge
 800872e:	462b      	movge	r3, r5
 8008730:	1ad2      	subs	r2, r2, r3
 8008732:	9205      	str	r2, [sp, #20]
 8008734:	9a06      	ldr	r2, [sp, #24]
 8008736:	1aed      	subs	r5, r5, r3
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	9306      	str	r3, [sp, #24]
 800873c:	9b08      	ldr	r3, [sp, #32]
 800873e:	b1f3      	cbz	r3, 800877e <_dtoa_r+0x7b6>
 8008740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 80a3 	beq.w	800888e <_dtoa_r+0x8c6>
 8008748:	2e00      	cmp	r6, #0
 800874a:	dd10      	ble.n	800876e <_dtoa_r+0x7a6>
 800874c:	4639      	mov	r1, r7
 800874e:	4632      	mov	r2, r6
 8008750:	4620      	mov	r0, r4
 8008752:	f000 fce1 	bl	8009118 <__pow5mult>
 8008756:	4652      	mov	r2, sl
 8008758:	4601      	mov	r1, r0
 800875a:	4607      	mov	r7, r0
 800875c:	4620      	mov	r0, r4
 800875e:	f000 fc31 	bl	8008fc4 <__multiply>
 8008762:	4651      	mov	r1, sl
 8008764:	4680      	mov	r8, r0
 8008766:	4620      	mov	r0, r4
 8008768:	f000 fb60 	bl	8008e2c <_Bfree>
 800876c:	46c2      	mov	sl, r8
 800876e:	9b08      	ldr	r3, [sp, #32]
 8008770:	1b9a      	subs	r2, r3, r6
 8008772:	d004      	beq.n	800877e <_dtoa_r+0x7b6>
 8008774:	4651      	mov	r1, sl
 8008776:	4620      	mov	r0, r4
 8008778:	f000 fcce 	bl	8009118 <__pow5mult>
 800877c:	4682      	mov	sl, r0
 800877e:	2101      	movs	r1, #1
 8008780:	4620      	mov	r0, r4
 8008782:	f000 fc09 	bl	8008f98 <__i2b>
 8008786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008788:	2b00      	cmp	r3, #0
 800878a:	4606      	mov	r6, r0
 800878c:	f340 8081 	ble.w	8008892 <_dtoa_r+0x8ca>
 8008790:	461a      	mov	r2, r3
 8008792:	4601      	mov	r1, r0
 8008794:	4620      	mov	r0, r4
 8008796:	f000 fcbf 	bl	8009118 <__pow5mult>
 800879a:	9b07      	ldr	r3, [sp, #28]
 800879c:	2b01      	cmp	r3, #1
 800879e:	4606      	mov	r6, r0
 80087a0:	dd7a      	ble.n	8008898 <_dtoa_r+0x8d0>
 80087a2:	f04f 0800 	mov.w	r8, #0
 80087a6:	6933      	ldr	r3, [r6, #16]
 80087a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80087ac:	6918      	ldr	r0, [r3, #16]
 80087ae:	f000 fba5 	bl	8008efc <__hi0bits>
 80087b2:	f1c0 0020 	rsb	r0, r0, #32
 80087b6:	9b06      	ldr	r3, [sp, #24]
 80087b8:	4418      	add	r0, r3
 80087ba:	f010 001f 	ands.w	r0, r0, #31
 80087be:	f000 8094 	beq.w	80088ea <_dtoa_r+0x922>
 80087c2:	f1c0 0320 	rsb	r3, r0, #32
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	f340 8085 	ble.w	80088d6 <_dtoa_r+0x90e>
 80087cc:	9b05      	ldr	r3, [sp, #20]
 80087ce:	f1c0 001c 	rsb	r0, r0, #28
 80087d2:	4403      	add	r3, r0
 80087d4:	9305      	str	r3, [sp, #20]
 80087d6:	9b06      	ldr	r3, [sp, #24]
 80087d8:	4403      	add	r3, r0
 80087da:	4405      	add	r5, r0
 80087dc:	9306      	str	r3, [sp, #24]
 80087de:	9b05      	ldr	r3, [sp, #20]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	dd05      	ble.n	80087f0 <_dtoa_r+0x828>
 80087e4:	4651      	mov	r1, sl
 80087e6:	461a      	mov	r2, r3
 80087e8:	4620      	mov	r0, r4
 80087ea:	f000 fcef 	bl	80091cc <__lshift>
 80087ee:	4682      	mov	sl, r0
 80087f0:	9b06      	ldr	r3, [sp, #24]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	dd05      	ble.n	8008802 <_dtoa_r+0x83a>
 80087f6:	4631      	mov	r1, r6
 80087f8:	461a      	mov	r2, r3
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 fce6 	bl	80091cc <__lshift>
 8008800:	4606      	mov	r6, r0
 8008802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008804:	2b00      	cmp	r3, #0
 8008806:	d072      	beq.n	80088ee <_dtoa_r+0x926>
 8008808:	4631      	mov	r1, r6
 800880a:	4650      	mov	r0, sl
 800880c:	f000 fd4a 	bl	80092a4 <__mcmp>
 8008810:	2800      	cmp	r0, #0
 8008812:	da6c      	bge.n	80088ee <_dtoa_r+0x926>
 8008814:	2300      	movs	r3, #0
 8008816:	4651      	mov	r1, sl
 8008818:	220a      	movs	r2, #10
 800881a:	4620      	mov	r0, r4
 800881c:	f000 fb28 	bl	8008e70 <__multadd>
 8008820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008822:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008826:	4682      	mov	sl, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 81b0 	beq.w	8008b8e <_dtoa_r+0xbc6>
 800882e:	2300      	movs	r3, #0
 8008830:	4639      	mov	r1, r7
 8008832:	220a      	movs	r2, #10
 8008834:	4620      	mov	r0, r4
 8008836:	f000 fb1b 	bl	8008e70 <__multadd>
 800883a:	9b01      	ldr	r3, [sp, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	4607      	mov	r7, r0
 8008840:	f300 8096 	bgt.w	8008970 <_dtoa_r+0x9a8>
 8008844:	9b07      	ldr	r3, [sp, #28]
 8008846:	2b02      	cmp	r3, #2
 8008848:	dc59      	bgt.n	80088fe <_dtoa_r+0x936>
 800884a:	e091      	b.n	8008970 <_dtoa_r+0x9a8>
 800884c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800884e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008852:	e758      	b.n	8008706 <_dtoa_r+0x73e>
 8008854:	9b04      	ldr	r3, [sp, #16]
 8008856:	1e5e      	subs	r6, r3, #1
 8008858:	9b08      	ldr	r3, [sp, #32]
 800885a:	42b3      	cmp	r3, r6
 800885c:	bfbf      	itttt	lt
 800885e:	9b08      	ldrlt	r3, [sp, #32]
 8008860:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008862:	9608      	strlt	r6, [sp, #32]
 8008864:	1af3      	sublt	r3, r6, r3
 8008866:	bfb4      	ite	lt
 8008868:	18d2      	addlt	r2, r2, r3
 800886a:	1b9e      	subge	r6, r3, r6
 800886c:	9b04      	ldr	r3, [sp, #16]
 800886e:	bfbc      	itt	lt
 8008870:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008872:	2600      	movlt	r6, #0
 8008874:	2b00      	cmp	r3, #0
 8008876:	bfb7      	itett	lt
 8008878:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800887c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008880:	1a9d      	sublt	r5, r3, r2
 8008882:	2300      	movlt	r3, #0
 8008884:	e741      	b.n	800870a <_dtoa_r+0x742>
 8008886:	9e08      	ldr	r6, [sp, #32]
 8008888:	9d05      	ldr	r5, [sp, #20]
 800888a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800888c:	e748      	b.n	8008720 <_dtoa_r+0x758>
 800888e:	9a08      	ldr	r2, [sp, #32]
 8008890:	e770      	b.n	8008774 <_dtoa_r+0x7ac>
 8008892:	9b07      	ldr	r3, [sp, #28]
 8008894:	2b01      	cmp	r3, #1
 8008896:	dc19      	bgt.n	80088cc <_dtoa_r+0x904>
 8008898:	9b02      	ldr	r3, [sp, #8]
 800889a:	b9bb      	cbnz	r3, 80088cc <_dtoa_r+0x904>
 800889c:	9b03      	ldr	r3, [sp, #12]
 800889e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088a2:	b99b      	cbnz	r3, 80088cc <_dtoa_r+0x904>
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088aa:	0d1b      	lsrs	r3, r3, #20
 80088ac:	051b      	lsls	r3, r3, #20
 80088ae:	b183      	cbz	r3, 80088d2 <_dtoa_r+0x90a>
 80088b0:	9b05      	ldr	r3, [sp, #20]
 80088b2:	3301      	adds	r3, #1
 80088b4:	9305      	str	r3, [sp, #20]
 80088b6:	9b06      	ldr	r3, [sp, #24]
 80088b8:	3301      	adds	r3, #1
 80088ba:	9306      	str	r3, [sp, #24]
 80088bc:	f04f 0801 	mov.w	r8, #1
 80088c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f47f af6f 	bne.w	80087a6 <_dtoa_r+0x7de>
 80088c8:	2001      	movs	r0, #1
 80088ca:	e774      	b.n	80087b6 <_dtoa_r+0x7ee>
 80088cc:	f04f 0800 	mov.w	r8, #0
 80088d0:	e7f6      	b.n	80088c0 <_dtoa_r+0x8f8>
 80088d2:	4698      	mov	r8, r3
 80088d4:	e7f4      	b.n	80088c0 <_dtoa_r+0x8f8>
 80088d6:	d082      	beq.n	80087de <_dtoa_r+0x816>
 80088d8:	9a05      	ldr	r2, [sp, #20]
 80088da:	331c      	adds	r3, #28
 80088dc:	441a      	add	r2, r3
 80088de:	9205      	str	r2, [sp, #20]
 80088e0:	9a06      	ldr	r2, [sp, #24]
 80088e2:	441a      	add	r2, r3
 80088e4:	441d      	add	r5, r3
 80088e6:	9206      	str	r2, [sp, #24]
 80088e8:	e779      	b.n	80087de <_dtoa_r+0x816>
 80088ea:	4603      	mov	r3, r0
 80088ec:	e7f4      	b.n	80088d8 <_dtoa_r+0x910>
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	dc37      	bgt.n	8008964 <_dtoa_r+0x99c>
 80088f4:	9b07      	ldr	r3, [sp, #28]
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	dd34      	ble.n	8008964 <_dtoa_r+0x99c>
 80088fa:	9b04      	ldr	r3, [sp, #16]
 80088fc:	9301      	str	r3, [sp, #4]
 80088fe:	9b01      	ldr	r3, [sp, #4]
 8008900:	b963      	cbnz	r3, 800891c <_dtoa_r+0x954>
 8008902:	4631      	mov	r1, r6
 8008904:	2205      	movs	r2, #5
 8008906:	4620      	mov	r0, r4
 8008908:	f000 fab2 	bl	8008e70 <__multadd>
 800890c:	4601      	mov	r1, r0
 800890e:	4606      	mov	r6, r0
 8008910:	4650      	mov	r0, sl
 8008912:	f000 fcc7 	bl	80092a4 <__mcmp>
 8008916:	2800      	cmp	r0, #0
 8008918:	f73f adbb 	bgt.w	8008492 <_dtoa_r+0x4ca>
 800891c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800891e:	9d00      	ldr	r5, [sp, #0]
 8008920:	ea6f 0b03 	mvn.w	fp, r3
 8008924:	f04f 0800 	mov.w	r8, #0
 8008928:	4631      	mov	r1, r6
 800892a:	4620      	mov	r0, r4
 800892c:	f000 fa7e 	bl	8008e2c <_Bfree>
 8008930:	2f00      	cmp	r7, #0
 8008932:	f43f aeab 	beq.w	800868c <_dtoa_r+0x6c4>
 8008936:	f1b8 0f00 	cmp.w	r8, #0
 800893a:	d005      	beq.n	8008948 <_dtoa_r+0x980>
 800893c:	45b8      	cmp	r8, r7
 800893e:	d003      	beq.n	8008948 <_dtoa_r+0x980>
 8008940:	4641      	mov	r1, r8
 8008942:	4620      	mov	r0, r4
 8008944:	f000 fa72 	bl	8008e2c <_Bfree>
 8008948:	4639      	mov	r1, r7
 800894a:	4620      	mov	r0, r4
 800894c:	f000 fa6e 	bl	8008e2c <_Bfree>
 8008950:	e69c      	b.n	800868c <_dtoa_r+0x6c4>
 8008952:	2600      	movs	r6, #0
 8008954:	4637      	mov	r7, r6
 8008956:	e7e1      	b.n	800891c <_dtoa_r+0x954>
 8008958:	46bb      	mov	fp, r7
 800895a:	4637      	mov	r7, r6
 800895c:	e599      	b.n	8008492 <_dtoa_r+0x4ca>
 800895e:	bf00      	nop
 8008960:	40240000 	.word	0x40240000
 8008964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 80c8 	beq.w	8008afc <_dtoa_r+0xb34>
 800896c:	9b04      	ldr	r3, [sp, #16]
 800896e:	9301      	str	r3, [sp, #4]
 8008970:	2d00      	cmp	r5, #0
 8008972:	dd05      	ble.n	8008980 <_dtoa_r+0x9b8>
 8008974:	4639      	mov	r1, r7
 8008976:	462a      	mov	r2, r5
 8008978:	4620      	mov	r0, r4
 800897a:	f000 fc27 	bl	80091cc <__lshift>
 800897e:	4607      	mov	r7, r0
 8008980:	f1b8 0f00 	cmp.w	r8, #0
 8008984:	d05b      	beq.n	8008a3e <_dtoa_r+0xa76>
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	4620      	mov	r0, r4
 800898a:	f000 fa0f 	bl	8008dac <_Balloc>
 800898e:	4605      	mov	r5, r0
 8008990:	b928      	cbnz	r0, 800899e <_dtoa_r+0x9d6>
 8008992:	4b83      	ldr	r3, [pc, #524]	; (8008ba0 <_dtoa_r+0xbd8>)
 8008994:	4602      	mov	r2, r0
 8008996:	f240 21ef 	movw	r1, #751	; 0x2ef
 800899a:	f7ff bb2e 	b.w	8007ffa <_dtoa_r+0x32>
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	3202      	adds	r2, #2
 80089a2:	0092      	lsls	r2, r2, #2
 80089a4:	f107 010c 	add.w	r1, r7, #12
 80089a8:	300c      	adds	r0, #12
 80089aa:	f000 fe39 	bl	8009620 <memcpy>
 80089ae:	2201      	movs	r2, #1
 80089b0:	4629      	mov	r1, r5
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 fc0a 	bl	80091cc <__lshift>
 80089b8:	9b00      	ldr	r3, [sp, #0]
 80089ba:	3301      	adds	r3, #1
 80089bc:	9304      	str	r3, [sp, #16]
 80089be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089c2:	4413      	add	r3, r2
 80089c4:	9308      	str	r3, [sp, #32]
 80089c6:	9b02      	ldr	r3, [sp, #8]
 80089c8:	f003 0301 	and.w	r3, r3, #1
 80089cc:	46b8      	mov	r8, r7
 80089ce:	9306      	str	r3, [sp, #24]
 80089d0:	4607      	mov	r7, r0
 80089d2:	9b04      	ldr	r3, [sp, #16]
 80089d4:	4631      	mov	r1, r6
 80089d6:	3b01      	subs	r3, #1
 80089d8:	4650      	mov	r0, sl
 80089da:	9301      	str	r3, [sp, #4]
 80089dc:	f7ff fa69 	bl	8007eb2 <quorem>
 80089e0:	4641      	mov	r1, r8
 80089e2:	9002      	str	r0, [sp, #8]
 80089e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80089e8:	4650      	mov	r0, sl
 80089ea:	f000 fc5b 	bl	80092a4 <__mcmp>
 80089ee:	463a      	mov	r2, r7
 80089f0:	9005      	str	r0, [sp, #20]
 80089f2:	4631      	mov	r1, r6
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 fc71 	bl	80092dc <__mdiff>
 80089fa:	68c2      	ldr	r2, [r0, #12]
 80089fc:	4605      	mov	r5, r0
 80089fe:	bb02      	cbnz	r2, 8008a42 <_dtoa_r+0xa7a>
 8008a00:	4601      	mov	r1, r0
 8008a02:	4650      	mov	r0, sl
 8008a04:	f000 fc4e 	bl	80092a4 <__mcmp>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	9209      	str	r2, [sp, #36]	; 0x24
 8008a10:	f000 fa0c 	bl	8008e2c <_Bfree>
 8008a14:	9b07      	ldr	r3, [sp, #28]
 8008a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a18:	9d04      	ldr	r5, [sp, #16]
 8008a1a:	ea43 0102 	orr.w	r1, r3, r2
 8008a1e:	9b06      	ldr	r3, [sp, #24]
 8008a20:	4319      	orrs	r1, r3
 8008a22:	d110      	bne.n	8008a46 <_dtoa_r+0xa7e>
 8008a24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008a28:	d029      	beq.n	8008a7e <_dtoa_r+0xab6>
 8008a2a:	9b05      	ldr	r3, [sp, #20]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dd02      	ble.n	8008a36 <_dtoa_r+0xa6e>
 8008a30:	9b02      	ldr	r3, [sp, #8]
 8008a32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008a36:	9b01      	ldr	r3, [sp, #4]
 8008a38:	f883 9000 	strb.w	r9, [r3]
 8008a3c:	e774      	b.n	8008928 <_dtoa_r+0x960>
 8008a3e:	4638      	mov	r0, r7
 8008a40:	e7ba      	b.n	80089b8 <_dtoa_r+0x9f0>
 8008a42:	2201      	movs	r2, #1
 8008a44:	e7e1      	b.n	8008a0a <_dtoa_r+0xa42>
 8008a46:	9b05      	ldr	r3, [sp, #20]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	db04      	blt.n	8008a56 <_dtoa_r+0xa8e>
 8008a4c:	9907      	ldr	r1, [sp, #28]
 8008a4e:	430b      	orrs	r3, r1
 8008a50:	9906      	ldr	r1, [sp, #24]
 8008a52:	430b      	orrs	r3, r1
 8008a54:	d120      	bne.n	8008a98 <_dtoa_r+0xad0>
 8008a56:	2a00      	cmp	r2, #0
 8008a58:	dded      	ble.n	8008a36 <_dtoa_r+0xa6e>
 8008a5a:	4651      	mov	r1, sl
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f000 fbb4 	bl	80091cc <__lshift>
 8008a64:	4631      	mov	r1, r6
 8008a66:	4682      	mov	sl, r0
 8008a68:	f000 fc1c 	bl	80092a4 <__mcmp>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	dc03      	bgt.n	8008a78 <_dtoa_r+0xab0>
 8008a70:	d1e1      	bne.n	8008a36 <_dtoa_r+0xa6e>
 8008a72:	f019 0f01 	tst.w	r9, #1
 8008a76:	d0de      	beq.n	8008a36 <_dtoa_r+0xa6e>
 8008a78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008a7c:	d1d8      	bne.n	8008a30 <_dtoa_r+0xa68>
 8008a7e:	9a01      	ldr	r2, [sp, #4]
 8008a80:	2339      	movs	r3, #57	; 0x39
 8008a82:	7013      	strb	r3, [r2, #0]
 8008a84:	462b      	mov	r3, r5
 8008a86:	461d      	mov	r5, r3
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a8e:	2a39      	cmp	r2, #57	; 0x39
 8008a90:	d06c      	beq.n	8008b6c <_dtoa_r+0xba4>
 8008a92:	3201      	adds	r2, #1
 8008a94:	701a      	strb	r2, [r3, #0]
 8008a96:	e747      	b.n	8008928 <_dtoa_r+0x960>
 8008a98:	2a00      	cmp	r2, #0
 8008a9a:	dd07      	ble.n	8008aac <_dtoa_r+0xae4>
 8008a9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008aa0:	d0ed      	beq.n	8008a7e <_dtoa_r+0xab6>
 8008aa2:	9a01      	ldr	r2, [sp, #4]
 8008aa4:	f109 0301 	add.w	r3, r9, #1
 8008aa8:	7013      	strb	r3, [r2, #0]
 8008aaa:	e73d      	b.n	8008928 <_dtoa_r+0x960>
 8008aac:	9b04      	ldr	r3, [sp, #16]
 8008aae:	9a08      	ldr	r2, [sp, #32]
 8008ab0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d043      	beq.n	8008b40 <_dtoa_r+0xb78>
 8008ab8:	4651      	mov	r1, sl
 8008aba:	2300      	movs	r3, #0
 8008abc:	220a      	movs	r2, #10
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 f9d6 	bl	8008e70 <__multadd>
 8008ac4:	45b8      	cmp	r8, r7
 8008ac6:	4682      	mov	sl, r0
 8008ac8:	f04f 0300 	mov.w	r3, #0
 8008acc:	f04f 020a 	mov.w	r2, #10
 8008ad0:	4641      	mov	r1, r8
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	d107      	bne.n	8008ae6 <_dtoa_r+0xb1e>
 8008ad6:	f000 f9cb 	bl	8008e70 <__multadd>
 8008ada:	4680      	mov	r8, r0
 8008adc:	4607      	mov	r7, r0
 8008ade:	9b04      	ldr	r3, [sp, #16]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	9304      	str	r3, [sp, #16]
 8008ae4:	e775      	b.n	80089d2 <_dtoa_r+0xa0a>
 8008ae6:	f000 f9c3 	bl	8008e70 <__multadd>
 8008aea:	4639      	mov	r1, r7
 8008aec:	4680      	mov	r8, r0
 8008aee:	2300      	movs	r3, #0
 8008af0:	220a      	movs	r2, #10
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 f9bc 	bl	8008e70 <__multadd>
 8008af8:	4607      	mov	r7, r0
 8008afa:	e7f0      	b.n	8008ade <_dtoa_r+0xb16>
 8008afc:	9b04      	ldr	r3, [sp, #16]
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	9d00      	ldr	r5, [sp, #0]
 8008b02:	4631      	mov	r1, r6
 8008b04:	4650      	mov	r0, sl
 8008b06:	f7ff f9d4 	bl	8007eb2 <quorem>
 8008b0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008b0e:	9b00      	ldr	r3, [sp, #0]
 8008b10:	f805 9b01 	strb.w	r9, [r5], #1
 8008b14:	1aea      	subs	r2, r5, r3
 8008b16:	9b01      	ldr	r3, [sp, #4]
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	dd07      	ble.n	8008b2c <_dtoa_r+0xb64>
 8008b1c:	4651      	mov	r1, sl
 8008b1e:	2300      	movs	r3, #0
 8008b20:	220a      	movs	r2, #10
 8008b22:	4620      	mov	r0, r4
 8008b24:	f000 f9a4 	bl	8008e70 <__multadd>
 8008b28:	4682      	mov	sl, r0
 8008b2a:	e7ea      	b.n	8008b02 <_dtoa_r+0xb3a>
 8008b2c:	9b01      	ldr	r3, [sp, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	bfc8      	it	gt
 8008b32:	461d      	movgt	r5, r3
 8008b34:	9b00      	ldr	r3, [sp, #0]
 8008b36:	bfd8      	it	le
 8008b38:	2501      	movle	r5, #1
 8008b3a:	441d      	add	r5, r3
 8008b3c:	f04f 0800 	mov.w	r8, #0
 8008b40:	4651      	mov	r1, sl
 8008b42:	2201      	movs	r2, #1
 8008b44:	4620      	mov	r0, r4
 8008b46:	f000 fb41 	bl	80091cc <__lshift>
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4682      	mov	sl, r0
 8008b4e:	f000 fba9 	bl	80092a4 <__mcmp>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	dc96      	bgt.n	8008a84 <_dtoa_r+0xabc>
 8008b56:	d102      	bne.n	8008b5e <_dtoa_r+0xb96>
 8008b58:	f019 0f01 	tst.w	r9, #1
 8008b5c:	d192      	bne.n	8008a84 <_dtoa_r+0xabc>
 8008b5e:	462b      	mov	r3, r5
 8008b60:	461d      	mov	r5, r3
 8008b62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b66:	2a30      	cmp	r2, #48	; 0x30
 8008b68:	d0fa      	beq.n	8008b60 <_dtoa_r+0xb98>
 8008b6a:	e6dd      	b.n	8008928 <_dtoa_r+0x960>
 8008b6c:	9a00      	ldr	r2, [sp, #0]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d189      	bne.n	8008a86 <_dtoa_r+0xabe>
 8008b72:	f10b 0b01 	add.w	fp, fp, #1
 8008b76:	2331      	movs	r3, #49	; 0x31
 8008b78:	e796      	b.n	8008aa8 <_dtoa_r+0xae0>
 8008b7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <_dtoa_r+0xbdc>)
 8008b7c:	f7ff ba99 	b.w	80080b2 <_dtoa_r+0xea>
 8008b80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f47f aa6d 	bne.w	8008062 <_dtoa_r+0x9a>
 8008b88:	4b07      	ldr	r3, [pc, #28]	; (8008ba8 <_dtoa_r+0xbe0>)
 8008b8a:	f7ff ba92 	b.w	80080b2 <_dtoa_r+0xea>
 8008b8e:	9b01      	ldr	r3, [sp, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	dcb5      	bgt.n	8008b00 <_dtoa_r+0xb38>
 8008b94:	9b07      	ldr	r3, [sp, #28]
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	f73f aeb1 	bgt.w	80088fe <_dtoa_r+0x936>
 8008b9c:	e7b0      	b.n	8008b00 <_dtoa_r+0xb38>
 8008b9e:	bf00      	nop
 8008ba0:	08009d38 	.word	0x08009d38
 8008ba4:	08009c98 	.word	0x08009c98
 8008ba8:	08009cbc 	.word	0x08009cbc

08008bac <_free_r>:
 8008bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bae:	2900      	cmp	r1, #0
 8008bb0:	d044      	beq.n	8008c3c <_free_r+0x90>
 8008bb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bb6:	9001      	str	r0, [sp, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f1a1 0404 	sub.w	r4, r1, #4
 8008bbe:	bfb8      	it	lt
 8008bc0:	18e4      	addlt	r4, r4, r3
 8008bc2:	f000 f8e7 	bl	8008d94 <__malloc_lock>
 8008bc6:	4a1e      	ldr	r2, [pc, #120]	; (8008c40 <_free_r+0x94>)
 8008bc8:	9801      	ldr	r0, [sp, #4]
 8008bca:	6813      	ldr	r3, [r2, #0]
 8008bcc:	b933      	cbnz	r3, 8008bdc <_free_r+0x30>
 8008bce:	6063      	str	r3, [r4, #4]
 8008bd0:	6014      	str	r4, [r2, #0]
 8008bd2:	b003      	add	sp, #12
 8008bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bd8:	f000 b8e2 	b.w	8008da0 <__malloc_unlock>
 8008bdc:	42a3      	cmp	r3, r4
 8008bde:	d908      	bls.n	8008bf2 <_free_r+0x46>
 8008be0:	6825      	ldr	r5, [r4, #0]
 8008be2:	1961      	adds	r1, r4, r5
 8008be4:	428b      	cmp	r3, r1
 8008be6:	bf01      	itttt	eq
 8008be8:	6819      	ldreq	r1, [r3, #0]
 8008bea:	685b      	ldreq	r3, [r3, #4]
 8008bec:	1949      	addeq	r1, r1, r5
 8008bee:	6021      	streq	r1, [r4, #0]
 8008bf0:	e7ed      	b.n	8008bce <_free_r+0x22>
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	b10b      	cbz	r3, 8008bfc <_free_r+0x50>
 8008bf8:	42a3      	cmp	r3, r4
 8008bfa:	d9fa      	bls.n	8008bf2 <_free_r+0x46>
 8008bfc:	6811      	ldr	r1, [r2, #0]
 8008bfe:	1855      	adds	r5, r2, r1
 8008c00:	42a5      	cmp	r5, r4
 8008c02:	d10b      	bne.n	8008c1c <_free_r+0x70>
 8008c04:	6824      	ldr	r4, [r4, #0]
 8008c06:	4421      	add	r1, r4
 8008c08:	1854      	adds	r4, r2, r1
 8008c0a:	42a3      	cmp	r3, r4
 8008c0c:	6011      	str	r1, [r2, #0]
 8008c0e:	d1e0      	bne.n	8008bd2 <_free_r+0x26>
 8008c10:	681c      	ldr	r4, [r3, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	6053      	str	r3, [r2, #4]
 8008c16:	440c      	add	r4, r1
 8008c18:	6014      	str	r4, [r2, #0]
 8008c1a:	e7da      	b.n	8008bd2 <_free_r+0x26>
 8008c1c:	d902      	bls.n	8008c24 <_free_r+0x78>
 8008c1e:	230c      	movs	r3, #12
 8008c20:	6003      	str	r3, [r0, #0]
 8008c22:	e7d6      	b.n	8008bd2 <_free_r+0x26>
 8008c24:	6825      	ldr	r5, [r4, #0]
 8008c26:	1961      	adds	r1, r4, r5
 8008c28:	428b      	cmp	r3, r1
 8008c2a:	bf04      	itt	eq
 8008c2c:	6819      	ldreq	r1, [r3, #0]
 8008c2e:	685b      	ldreq	r3, [r3, #4]
 8008c30:	6063      	str	r3, [r4, #4]
 8008c32:	bf04      	itt	eq
 8008c34:	1949      	addeq	r1, r1, r5
 8008c36:	6021      	streq	r1, [r4, #0]
 8008c38:	6054      	str	r4, [r2, #4]
 8008c3a:	e7ca      	b.n	8008bd2 <_free_r+0x26>
 8008c3c:	b003      	add	sp, #12
 8008c3e:	bd30      	pop	{r4, r5, pc}
 8008c40:	200007bc 	.word	0x200007bc

08008c44 <malloc>:
 8008c44:	4b02      	ldr	r3, [pc, #8]	; (8008c50 <malloc+0xc>)
 8008c46:	4601      	mov	r1, r0
 8008c48:	6818      	ldr	r0, [r3, #0]
 8008c4a:	f000 b823 	b.w	8008c94 <_malloc_r>
 8008c4e:	bf00      	nop
 8008c50:	200000f4 	.word	0x200000f4

08008c54 <sbrk_aligned>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	4e0e      	ldr	r6, [pc, #56]	; (8008c90 <sbrk_aligned+0x3c>)
 8008c58:	460c      	mov	r4, r1
 8008c5a:	6831      	ldr	r1, [r6, #0]
 8008c5c:	4605      	mov	r5, r0
 8008c5e:	b911      	cbnz	r1, 8008c66 <sbrk_aligned+0x12>
 8008c60:	f000 fcce 	bl	8009600 <_sbrk_r>
 8008c64:	6030      	str	r0, [r6, #0]
 8008c66:	4621      	mov	r1, r4
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f000 fcc9 	bl	8009600 <_sbrk_r>
 8008c6e:	1c43      	adds	r3, r0, #1
 8008c70:	d00a      	beq.n	8008c88 <sbrk_aligned+0x34>
 8008c72:	1cc4      	adds	r4, r0, #3
 8008c74:	f024 0403 	bic.w	r4, r4, #3
 8008c78:	42a0      	cmp	r0, r4
 8008c7a:	d007      	beq.n	8008c8c <sbrk_aligned+0x38>
 8008c7c:	1a21      	subs	r1, r4, r0
 8008c7e:	4628      	mov	r0, r5
 8008c80:	f000 fcbe 	bl	8009600 <_sbrk_r>
 8008c84:	3001      	adds	r0, #1
 8008c86:	d101      	bne.n	8008c8c <sbrk_aligned+0x38>
 8008c88:	f04f 34ff 	mov.w	r4, #4294967295
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
 8008c90:	200007c0 	.word	0x200007c0

08008c94 <_malloc_r>:
 8008c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c98:	1ccd      	adds	r5, r1, #3
 8008c9a:	f025 0503 	bic.w	r5, r5, #3
 8008c9e:	3508      	adds	r5, #8
 8008ca0:	2d0c      	cmp	r5, #12
 8008ca2:	bf38      	it	cc
 8008ca4:	250c      	movcc	r5, #12
 8008ca6:	2d00      	cmp	r5, #0
 8008ca8:	4607      	mov	r7, r0
 8008caa:	db01      	blt.n	8008cb0 <_malloc_r+0x1c>
 8008cac:	42a9      	cmp	r1, r5
 8008cae:	d905      	bls.n	8008cbc <_malloc_r+0x28>
 8008cb0:	230c      	movs	r3, #12
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	2600      	movs	r6, #0
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d90 <_malloc_r+0xfc>
 8008cc0:	f000 f868 	bl	8008d94 <__malloc_lock>
 8008cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8008cc8:	461c      	mov	r4, r3
 8008cca:	bb5c      	cbnz	r4, 8008d24 <_malloc_r+0x90>
 8008ccc:	4629      	mov	r1, r5
 8008cce:	4638      	mov	r0, r7
 8008cd0:	f7ff ffc0 	bl	8008c54 <sbrk_aligned>
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	d155      	bne.n	8008d86 <_malloc_r+0xf2>
 8008cda:	f8d8 4000 	ldr.w	r4, [r8]
 8008cde:	4626      	mov	r6, r4
 8008ce0:	2e00      	cmp	r6, #0
 8008ce2:	d145      	bne.n	8008d70 <_malloc_r+0xdc>
 8008ce4:	2c00      	cmp	r4, #0
 8008ce6:	d048      	beq.n	8008d7a <_malloc_r+0xe6>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	4631      	mov	r1, r6
 8008cec:	4638      	mov	r0, r7
 8008cee:	eb04 0903 	add.w	r9, r4, r3
 8008cf2:	f000 fc85 	bl	8009600 <_sbrk_r>
 8008cf6:	4581      	cmp	r9, r0
 8008cf8:	d13f      	bne.n	8008d7a <_malloc_r+0xe6>
 8008cfa:	6821      	ldr	r1, [r4, #0]
 8008cfc:	1a6d      	subs	r5, r5, r1
 8008cfe:	4629      	mov	r1, r5
 8008d00:	4638      	mov	r0, r7
 8008d02:	f7ff ffa7 	bl	8008c54 <sbrk_aligned>
 8008d06:	3001      	adds	r0, #1
 8008d08:	d037      	beq.n	8008d7a <_malloc_r+0xe6>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	442b      	add	r3, r5
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	f8d8 3000 	ldr.w	r3, [r8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d038      	beq.n	8008d8a <_malloc_r+0xf6>
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	42a2      	cmp	r2, r4
 8008d1c:	d12b      	bne.n	8008d76 <_malloc_r+0xe2>
 8008d1e:	2200      	movs	r2, #0
 8008d20:	605a      	str	r2, [r3, #4]
 8008d22:	e00f      	b.n	8008d44 <_malloc_r+0xb0>
 8008d24:	6822      	ldr	r2, [r4, #0]
 8008d26:	1b52      	subs	r2, r2, r5
 8008d28:	d41f      	bmi.n	8008d6a <_malloc_r+0xd6>
 8008d2a:	2a0b      	cmp	r2, #11
 8008d2c:	d917      	bls.n	8008d5e <_malloc_r+0xca>
 8008d2e:	1961      	adds	r1, r4, r5
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	6025      	str	r5, [r4, #0]
 8008d34:	bf18      	it	ne
 8008d36:	6059      	strne	r1, [r3, #4]
 8008d38:	6863      	ldr	r3, [r4, #4]
 8008d3a:	bf08      	it	eq
 8008d3c:	f8c8 1000 	streq.w	r1, [r8]
 8008d40:	5162      	str	r2, [r4, r5]
 8008d42:	604b      	str	r3, [r1, #4]
 8008d44:	4638      	mov	r0, r7
 8008d46:	f104 060b 	add.w	r6, r4, #11
 8008d4a:	f000 f829 	bl	8008da0 <__malloc_unlock>
 8008d4e:	f026 0607 	bic.w	r6, r6, #7
 8008d52:	1d23      	adds	r3, r4, #4
 8008d54:	1af2      	subs	r2, r6, r3
 8008d56:	d0ae      	beq.n	8008cb6 <_malloc_r+0x22>
 8008d58:	1b9b      	subs	r3, r3, r6
 8008d5a:	50a3      	str	r3, [r4, r2]
 8008d5c:	e7ab      	b.n	8008cb6 <_malloc_r+0x22>
 8008d5e:	42a3      	cmp	r3, r4
 8008d60:	6862      	ldr	r2, [r4, #4]
 8008d62:	d1dd      	bne.n	8008d20 <_malloc_r+0x8c>
 8008d64:	f8c8 2000 	str.w	r2, [r8]
 8008d68:	e7ec      	b.n	8008d44 <_malloc_r+0xb0>
 8008d6a:	4623      	mov	r3, r4
 8008d6c:	6864      	ldr	r4, [r4, #4]
 8008d6e:	e7ac      	b.n	8008cca <_malloc_r+0x36>
 8008d70:	4634      	mov	r4, r6
 8008d72:	6876      	ldr	r6, [r6, #4]
 8008d74:	e7b4      	b.n	8008ce0 <_malloc_r+0x4c>
 8008d76:	4613      	mov	r3, r2
 8008d78:	e7cc      	b.n	8008d14 <_malloc_r+0x80>
 8008d7a:	230c      	movs	r3, #12
 8008d7c:	603b      	str	r3, [r7, #0]
 8008d7e:	4638      	mov	r0, r7
 8008d80:	f000 f80e 	bl	8008da0 <__malloc_unlock>
 8008d84:	e797      	b.n	8008cb6 <_malloc_r+0x22>
 8008d86:	6025      	str	r5, [r4, #0]
 8008d88:	e7dc      	b.n	8008d44 <_malloc_r+0xb0>
 8008d8a:	605b      	str	r3, [r3, #4]
 8008d8c:	deff      	udf	#255	; 0xff
 8008d8e:	bf00      	nop
 8008d90:	200007bc 	.word	0x200007bc

08008d94 <__malloc_lock>:
 8008d94:	4801      	ldr	r0, [pc, #4]	; (8008d9c <__malloc_lock+0x8>)
 8008d96:	f7ff b88a 	b.w	8007eae <__retarget_lock_acquire_recursive>
 8008d9a:	bf00      	nop
 8008d9c:	200007b8 	.word	0x200007b8

08008da0 <__malloc_unlock>:
 8008da0:	4801      	ldr	r0, [pc, #4]	; (8008da8 <__malloc_unlock+0x8>)
 8008da2:	f7ff b885 	b.w	8007eb0 <__retarget_lock_release_recursive>
 8008da6:	bf00      	nop
 8008da8:	200007b8 	.word	0x200007b8

08008dac <_Balloc>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	69c6      	ldr	r6, [r0, #28]
 8008db0:	4604      	mov	r4, r0
 8008db2:	460d      	mov	r5, r1
 8008db4:	b976      	cbnz	r6, 8008dd4 <_Balloc+0x28>
 8008db6:	2010      	movs	r0, #16
 8008db8:	f7ff ff44 	bl	8008c44 <malloc>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	61e0      	str	r0, [r4, #28]
 8008dc0:	b920      	cbnz	r0, 8008dcc <_Balloc+0x20>
 8008dc2:	4b18      	ldr	r3, [pc, #96]	; (8008e24 <_Balloc+0x78>)
 8008dc4:	4818      	ldr	r0, [pc, #96]	; (8008e28 <_Balloc+0x7c>)
 8008dc6:	216b      	movs	r1, #107	; 0x6b
 8008dc8:	f000 fc38 	bl	800963c <__assert_func>
 8008dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dd0:	6006      	str	r6, [r0, #0]
 8008dd2:	60c6      	str	r6, [r0, #12]
 8008dd4:	69e6      	ldr	r6, [r4, #28]
 8008dd6:	68f3      	ldr	r3, [r6, #12]
 8008dd8:	b183      	cbz	r3, 8008dfc <_Balloc+0x50>
 8008dda:	69e3      	ldr	r3, [r4, #28]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008de2:	b9b8      	cbnz	r0, 8008e14 <_Balloc+0x68>
 8008de4:	2101      	movs	r1, #1
 8008de6:	fa01 f605 	lsl.w	r6, r1, r5
 8008dea:	1d72      	adds	r2, r6, #5
 8008dec:	0092      	lsls	r2, r2, #2
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 fc42 	bl	8009678 <_calloc_r>
 8008df4:	b160      	cbz	r0, 8008e10 <_Balloc+0x64>
 8008df6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dfa:	e00e      	b.n	8008e1a <_Balloc+0x6e>
 8008dfc:	2221      	movs	r2, #33	; 0x21
 8008dfe:	2104      	movs	r1, #4
 8008e00:	4620      	mov	r0, r4
 8008e02:	f000 fc39 	bl	8009678 <_calloc_r>
 8008e06:	69e3      	ldr	r3, [r4, #28]
 8008e08:	60f0      	str	r0, [r6, #12]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1e4      	bne.n	8008dda <_Balloc+0x2e>
 8008e10:	2000      	movs	r0, #0
 8008e12:	bd70      	pop	{r4, r5, r6, pc}
 8008e14:	6802      	ldr	r2, [r0, #0]
 8008e16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e20:	e7f7      	b.n	8008e12 <_Balloc+0x66>
 8008e22:	bf00      	nop
 8008e24:	08009cc9 	.word	0x08009cc9
 8008e28:	08009d49 	.word	0x08009d49

08008e2c <_Bfree>:
 8008e2c:	b570      	push	{r4, r5, r6, lr}
 8008e2e:	69c6      	ldr	r6, [r0, #28]
 8008e30:	4605      	mov	r5, r0
 8008e32:	460c      	mov	r4, r1
 8008e34:	b976      	cbnz	r6, 8008e54 <_Bfree+0x28>
 8008e36:	2010      	movs	r0, #16
 8008e38:	f7ff ff04 	bl	8008c44 <malloc>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	61e8      	str	r0, [r5, #28]
 8008e40:	b920      	cbnz	r0, 8008e4c <_Bfree+0x20>
 8008e42:	4b09      	ldr	r3, [pc, #36]	; (8008e68 <_Bfree+0x3c>)
 8008e44:	4809      	ldr	r0, [pc, #36]	; (8008e6c <_Bfree+0x40>)
 8008e46:	218f      	movs	r1, #143	; 0x8f
 8008e48:	f000 fbf8 	bl	800963c <__assert_func>
 8008e4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e50:	6006      	str	r6, [r0, #0]
 8008e52:	60c6      	str	r6, [r0, #12]
 8008e54:	b13c      	cbz	r4, 8008e66 <_Bfree+0x3a>
 8008e56:	69eb      	ldr	r3, [r5, #28]
 8008e58:	6862      	ldr	r2, [r4, #4]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e60:	6021      	str	r1, [r4, #0]
 8008e62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e66:	bd70      	pop	{r4, r5, r6, pc}
 8008e68:	08009cc9 	.word	0x08009cc9
 8008e6c:	08009d49 	.word	0x08009d49

08008e70 <__multadd>:
 8008e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e74:	690d      	ldr	r5, [r1, #16]
 8008e76:	4607      	mov	r7, r0
 8008e78:	460c      	mov	r4, r1
 8008e7a:	461e      	mov	r6, r3
 8008e7c:	f101 0c14 	add.w	ip, r1, #20
 8008e80:	2000      	movs	r0, #0
 8008e82:	f8dc 3000 	ldr.w	r3, [ip]
 8008e86:	b299      	uxth	r1, r3
 8008e88:	fb02 6101 	mla	r1, r2, r1, r6
 8008e8c:	0c1e      	lsrs	r6, r3, #16
 8008e8e:	0c0b      	lsrs	r3, r1, #16
 8008e90:	fb02 3306 	mla	r3, r2, r6, r3
 8008e94:	b289      	uxth	r1, r1
 8008e96:	3001      	adds	r0, #1
 8008e98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e9c:	4285      	cmp	r5, r0
 8008e9e:	f84c 1b04 	str.w	r1, [ip], #4
 8008ea2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ea6:	dcec      	bgt.n	8008e82 <__multadd+0x12>
 8008ea8:	b30e      	cbz	r6, 8008eee <__multadd+0x7e>
 8008eaa:	68a3      	ldr	r3, [r4, #8]
 8008eac:	42ab      	cmp	r3, r5
 8008eae:	dc19      	bgt.n	8008ee4 <__multadd+0x74>
 8008eb0:	6861      	ldr	r1, [r4, #4]
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	3101      	adds	r1, #1
 8008eb6:	f7ff ff79 	bl	8008dac <_Balloc>
 8008eba:	4680      	mov	r8, r0
 8008ebc:	b928      	cbnz	r0, 8008eca <__multadd+0x5a>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	4b0c      	ldr	r3, [pc, #48]	; (8008ef4 <__multadd+0x84>)
 8008ec2:	480d      	ldr	r0, [pc, #52]	; (8008ef8 <__multadd+0x88>)
 8008ec4:	21ba      	movs	r1, #186	; 0xba
 8008ec6:	f000 fbb9 	bl	800963c <__assert_func>
 8008eca:	6922      	ldr	r2, [r4, #16]
 8008ecc:	3202      	adds	r2, #2
 8008ece:	f104 010c 	add.w	r1, r4, #12
 8008ed2:	0092      	lsls	r2, r2, #2
 8008ed4:	300c      	adds	r0, #12
 8008ed6:	f000 fba3 	bl	8009620 <memcpy>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4638      	mov	r0, r7
 8008ede:	f7ff ffa5 	bl	8008e2c <_Bfree>
 8008ee2:	4644      	mov	r4, r8
 8008ee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ee8:	3501      	adds	r5, #1
 8008eea:	615e      	str	r6, [r3, #20]
 8008eec:	6125      	str	r5, [r4, #16]
 8008eee:	4620      	mov	r0, r4
 8008ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ef4:	08009d38 	.word	0x08009d38
 8008ef8:	08009d49 	.word	0x08009d49

08008efc <__hi0bits>:
 8008efc:	0c03      	lsrs	r3, r0, #16
 8008efe:	041b      	lsls	r3, r3, #16
 8008f00:	b9d3      	cbnz	r3, 8008f38 <__hi0bits+0x3c>
 8008f02:	0400      	lsls	r0, r0, #16
 8008f04:	2310      	movs	r3, #16
 8008f06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f0a:	bf04      	itt	eq
 8008f0c:	0200      	lsleq	r0, r0, #8
 8008f0e:	3308      	addeq	r3, #8
 8008f10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f14:	bf04      	itt	eq
 8008f16:	0100      	lsleq	r0, r0, #4
 8008f18:	3304      	addeq	r3, #4
 8008f1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f1e:	bf04      	itt	eq
 8008f20:	0080      	lsleq	r0, r0, #2
 8008f22:	3302      	addeq	r3, #2
 8008f24:	2800      	cmp	r0, #0
 8008f26:	db05      	blt.n	8008f34 <__hi0bits+0x38>
 8008f28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f2c:	f103 0301 	add.w	r3, r3, #1
 8008f30:	bf08      	it	eq
 8008f32:	2320      	moveq	r3, #32
 8008f34:	4618      	mov	r0, r3
 8008f36:	4770      	bx	lr
 8008f38:	2300      	movs	r3, #0
 8008f3a:	e7e4      	b.n	8008f06 <__hi0bits+0xa>

08008f3c <__lo0bits>:
 8008f3c:	6803      	ldr	r3, [r0, #0]
 8008f3e:	f013 0207 	ands.w	r2, r3, #7
 8008f42:	d00c      	beq.n	8008f5e <__lo0bits+0x22>
 8008f44:	07d9      	lsls	r1, r3, #31
 8008f46:	d422      	bmi.n	8008f8e <__lo0bits+0x52>
 8008f48:	079a      	lsls	r2, r3, #30
 8008f4a:	bf49      	itett	mi
 8008f4c:	085b      	lsrmi	r3, r3, #1
 8008f4e:	089b      	lsrpl	r3, r3, #2
 8008f50:	6003      	strmi	r3, [r0, #0]
 8008f52:	2201      	movmi	r2, #1
 8008f54:	bf5c      	itt	pl
 8008f56:	6003      	strpl	r3, [r0, #0]
 8008f58:	2202      	movpl	r2, #2
 8008f5a:	4610      	mov	r0, r2
 8008f5c:	4770      	bx	lr
 8008f5e:	b299      	uxth	r1, r3
 8008f60:	b909      	cbnz	r1, 8008f66 <__lo0bits+0x2a>
 8008f62:	0c1b      	lsrs	r3, r3, #16
 8008f64:	2210      	movs	r2, #16
 8008f66:	b2d9      	uxtb	r1, r3
 8008f68:	b909      	cbnz	r1, 8008f6e <__lo0bits+0x32>
 8008f6a:	3208      	adds	r2, #8
 8008f6c:	0a1b      	lsrs	r3, r3, #8
 8008f6e:	0719      	lsls	r1, r3, #28
 8008f70:	bf04      	itt	eq
 8008f72:	091b      	lsreq	r3, r3, #4
 8008f74:	3204      	addeq	r2, #4
 8008f76:	0799      	lsls	r1, r3, #30
 8008f78:	bf04      	itt	eq
 8008f7a:	089b      	lsreq	r3, r3, #2
 8008f7c:	3202      	addeq	r2, #2
 8008f7e:	07d9      	lsls	r1, r3, #31
 8008f80:	d403      	bmi.n	8008f8a <__lo0bits+0x4e>
 8008f82:	085b      	lsrs	r3, r3, #1
 8008f84:	f102 0201 	add.w	r2, r2, #1
 8008f88:	d003      	beq.n	8008f92 <__lo0bits+0x56>
 8008f8a:	6003      	str	r3, [r0, #0]
 8008f8c:	e7e5      	b.n	8008f5a <__lo0bits+0x1e>
 8008f8e:	2200      	movs	r2, #0
 8008f90:	e7e3      	b.n	8008f5a <__lo0bits+0x1e>
 8008f92:	2220      	movs	r2, #32
 8008f94:	e7e1      	b.n	8008f5a <__lo0bits+0x1e>
	...

08008f98 <__i2b>:
 8008f98:	b510      	push	{r4, lr}
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	f7ff ff05 	bl	8008dac <_Balloc>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	b928      	cbnz	r0, 8008fb2 <__i2b+0x1a>
 8008fa6:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <__i2b+0x24>)
 8008fa8:	4805      	ldr	r0, [pc, #20]	; (8008fc0 <__i2b+0x28>)
 8008faa:	f240 1145 	movw	r1, #325	; 0x145
 8008fae:	f000 fb45 	bl	800963c <__assert_func>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	6144      	str	r4, [r0, #20]
 8008fb6:	6103      	str	r3, [r0, #16]
 8008fb8:	bd10      	pop	{r4, pc}
 8008fba:	bf00      	nop
 8008fbc:	08009d38 	.word	0x08009d38
 8008fc0:	08009d49 	.word	0x08009d49

08008fc4 <__multiply>:
 8008fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc8:	4691      	mov	r9, r2
 8008fca:	690a      	ldr	r2, [r1, #16]
 8008fcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	bfb8      	it	lt
 8008fd4:	460b      	movlt	r3, r1
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	bfbc      	itt	lt
 8008fda:	464c      	movlt	r4, r9
 8008fdc:	4699      	movlt	r9, r3
 8008fde:	6927      	ldr	r7, [r4, #16]
 8008fe0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008fe4:	68a3      	ldr	r3, [r4, #8]
 8008fe6:	6861      	ldr	r1, [r4, #4]
 8008fe8:	eb07 060a 	add.w	r6, r7, sl
 8008fec:	42b3      	cmp	r3, r6
 8008fee:	b085      	sub	sp, #20
 8008ff0:	bfb8      	it	lt
 8008ff2:	3101      	addlt	r1, #1
 8008ff4:	f7ff feda 	bl	8008dac <_Balloc>
 8008ff8:	b930      	cbnz	r0, 8009008 <__multiply+0x44>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	4b44      	ldr	r3, [pc, #272]	; (8009110 <__multiply+0x14c>)
 8008ffe:	4845      	ldr	r0, [pc, #276]	; (8009114 <__multiply+0x150>)
 8009000:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009004:	f000 fb1a 	bl	800963c <__assert_func>
 8009008:	f100 0514 	add.w	r5, r0, #20
 800900c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009010:	462b      	mov	r3, r5
 8009012:	2200      	movs	r2, #0
 8009014:	4543      	cmp	r3, r8
 8009016:	d321      	bcc.n	800905c <__multiply+0x98>
 8009018:	f104 0314 	add.w	r3, r4, #20
 800901c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009020:	f109 0314 	add.w	r3, r9, #20
 8009024:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009028:	9202      	str	r2, [sp, #8]
 800902a:	1b3a      	subs	r2, r7, r4
 800902c:	3a15      	subs	r2, #21
 800902e:	f022 0203 	bic.w	r2, r2, #3
 8009032:	3204      	adds	r2, #4
 8009034:	f104 0115 	add.w	r1, r4, #21
 8009038:	428f      	cmp	r7, r1
 800903a:	bf38      	it	cc
 800903c:	2204      	movcc	r2, #4
 800903e:	9201      	str	r2, [sp, #4]
 8009040:	9a02      	ldr	r2, [sp, #8]
 8009042:	9303      	str	r3, [sp, #12]
 8009044:	429a      	cmp	r2, r3
 8009046:	d80c      	bhi.n	8009062 <__multiply+0x9e>
 8009048:	2e00      	cmp	r6, #0
 800904a:	dd03      	ble.n	8009054 <__multiply+0x90>
 800904c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009050:	2b00      	cmp	r3, #0
 8009052:	d05b      	beq.n	800910c <__multiply+0x148>
 8009054:	6106      	str	r6, [r0, #16]
 8009056:	b005      	add	sp, #20
 8009058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905c:	f843 2b04 	str.w	r2, [r3], #4
 8009060:	e7d8      	b.n	8009014 <__multiply+0x50>
 8009062:	f8b3 a000 	ldrh.w	sl, [r3]
 8009066:	f1ba 0f00 	cmp.w	sl, #0
 800906a:	d024      	beq.n	80090b6 <__multiply+0xf2>
 800906c:	f104 0e14 	add.w	lr, r4, #20
 8009070:	46a9      	mov	r9, r5
 8009072:	f04f 0c00 	mov.w	ip, #0
 8009076:	f85e 2b04 	ldr.w	r2, [lr], #4
 800907a:	f8d9 1000 	ldr.w	r1, [r9]
 800907e:	fa1f fb82 	uxth.w	fp, r2
 8009082:	b289      	uxth	r1, r1
 8009084:	fb0a 110b 	mla	r1, sl, fp, r1
 8009088:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800908c:	f8d9 2000 	ldr.w	r2, [r9]
 8009090:	4461      	add	r1, ip
 8009092:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009096:	fb0a c20b 	mla	r2, sl, fp, ip
 800909a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800909e:	b289      	uxth	r1, r1
 80090a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090a4:	4577      	cmp	r7, lr
 80090a6:	f849 1b04 	str.w	r1, [r9], #4
 80090aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090ae:	d8e2      	bhi.n	8009076 <__multiply+0xb2>
 80090b0:	9a01      	ldr	r2, [sp, #4]
 80090b2:	f845 c002 	str.w	ip, [r5, r2]
 80090b6:	9a03      	ldr	r2, [sp, #12]
 80090b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80090bc:	3304      	adds	r3, #4
 80090be:	f1b9 0f00 	cmp.w	r9, #0
 80090c2:	d021      	beq.n	8009108 <__multiply+0x144>
 80090c4:	6829      	ldr	r1, [r5, #0]
 80090c6:	f104 0c14 	add.w	ip, r4, #20
 80090ca:	46ae      	mov	lr, r5
 80090cc:	f04f 0a00 	mov.w	sl, #0
 80090d0:	f8bc b000 	ldrh.w	fp, [ip]
 80090d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80090d8:	fb09 220b 	mla	r2, r9, fp, r2
 80090dc:	4452      	add	r2, sl
 80090de:	b289      	uxth	r1, r1
 80090e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090e4:	f84e 1b04 	str.w	r1, [lr], #4
 80090e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80090ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80090f0:	f8be 1000 	ldrh.w	r1, [lr]
 80090f4:	fb09 110a 	mla	r1, r9, sl, r1
 80090f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80090fc:	4567      	cmp	r7, ip
 80090fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009102:	d8e5      	bhi.n	80090d0 <__multiply+0x10c>
 8009104:	9a01      	ldr	r2, [sp, #4]
 8009106:	50a9      	str	r1, [r5, r2]
 8009108:	3504      	adds	r5, #4
 800910a:	e799      	b.n	8009040 <__multiply+0x7c>
 800910c:	3e01      	subs	r6, #1
 800910e:	e79b      	b.n	8009048 <__multiply+0x84>
 8009110:	08009d38 	.word	0x08009d38
 8009114:	08009d49 	.word	0x08009d49

08009118 <__pow5mult>:
 8009118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800911c:	4615      	mov	r5, r2
 800911e:	f012 0203 	ands.w	r2, r2, #3
 8009122:	4606      	mov	r6, r0
 8009124:	460f      	mov	r7, r1
 8009126:	d007      	beq.n	8009138 <__pow5mult+0x20>
 8009128:	4c25      	ldr	r4, [pc, #148]	; (80091c0 <__pow5mult+0xa8>)
 800912a:	3a01      	subs	r2, #1
 800912c:	2300      	movs	r3, #0
 800912e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009132:	f7ff fe9d 	bl	8008e70 <__multadd>
 8009136:	4607      	mov	r7, r0
 8009138:	10ad      	asrs	r5, r5, #2
 800913a:	d03d      	beq.n	80091b8 <__pow5mult+0xa0>
 800913c:	69f4      	ldr	r4, [r6, #28]
 800913e:	b97c      	cbnz	r4, 8009160 <__pow5mult+0x48>
 8009140:	2010      	movs	r0, #16
 8009142:	f7ff fd7f 	bl	8008c44 <malloc>
 8009146:	4602      	mov	r2, r0
 8009148:	61f0      	str	r0, [r6, #28]
 800914a:	b928      	cbnz	r0, 8009158 <__pow5mult+0x40>
 800914c:	4b1d      	ldr	r3, [pc, #116]	; (80091c4 <__pow5mult+0xac>)
 800914e:	481e      	ldr	r0, [pc, #120]	; (80091c8 <__pow5mult+0xb0>)
 8009150:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009154:	f000 fa72 	bl	800963c <__assert_func>
 8009158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800915c:	6004      	str	r4, [r0, #0]
 800915e:	60c4      	str	r4, [r0, #12]
 8009160:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009164:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009168:	b94c      	cbnz	r4, 800917e <__pow5mult+0x66>
 800916a:	f240 2171 	movw	r1, #625	; 0x271
 800916e:	4630      	mov	r0, r6
 8009170:	f7ff ff12 	bl	8008f98 <__i2b>
 8009174:	2300      	movs	r3, #0
 8009176:	f8c8 0008 	str.w	r0, [r8, #8]
 800917a:	4604      	mov	r4, r0
 800917c:	6003      	str	r3, [r0, #0]
 800917e:	f04f 0900 	mov.w	r9, #0
 8009182:	07eb      	lsls	r3, r5, #31
 8009184:	d50a      	bpl.n	800919c <__pow5mult+0x84>
 8009186:	4639      	mov	r1, r7
 8009188:	4622      	mov	r2, r4
 800918a:	4630      	mov	r0, r6
 800918c:	f7ff ff1a 	bl	8008fc4 <__multiply>
 8009190:	4639      	mov	r1, r7
 8009192:	4680      	mov	r8, r0
 8009194:	4630      	mov	r0, r6
 8009196:	f7ff fe49 	bl	8008e2c <_Bfree>
 800919a:	4647      	mov	r7, r8
 800919c:	106d      	asrs	r5, r5, #1
 800919e:	d00b      	beq.n	80091b8 <__pow5mult+0xa0>
 80091a0:	6820      	ldr	r0, [r4, #0]
 80091a2:	b938      	cbnz	r0, 80091b4 <__pow5mult+0x9c>
 80091a4:	4622      	mov	r2, r4
 80091a6:	4621      	mov	r1, r4
 80091a8:	4630      	mov	r0, r6
 80091aa:	f7ff ff0b 	bl	8008fc4 <__multiply>
 80091ae:	6020      	str	r0, [r4, #0]
 80091b0:	f8c0 9000 	str.w	r9, [r0]
 80091b4:	4604      	mov	r4, r0
 80091b6:	e7e4      	b.n	8009182 <__pow5mult+0x6a>
 80091b8:	4638      	mov	r0, r7
 80091ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091be:	bf00      	nop
 80091c0:	08009e98 	.word	0x08009e98
 80091c4:	08009cc9 	.word	0x08009cc9
 80091c8:	08009d49 	.word	0x08009d49

080091cc <__lshift>:
 80091cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d0:	460c      	mov	r4, r1
 80091d2:	6849      	ldr	r1, [r1, #4]
 80091d4:	6923      	ldr	r3, [r4, #16]
 80091d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091da:	68a3      	ldr	r3, [r4, #8]
 80091dc:	4607      	mov	r7, r0
 80091de:	4691      	mov	r9, r2
 80091e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091e4:	f108 0601 	add.w	r6, r8, #1
 80091e8:	42b3      	cmp	r3, r6
 80091ea:	db0b      	blt.n	8009204 <__lshift+0x38>
 80091ec:	4638      	mov	r0, r7
 80091ee:	f7ff fddd 	bl	8008dac <_Balloc>
 80091f2:	4605      	mov	r5, r0
 80091f4:	b948      	cbnz	r0, 800920a <__lshift+0x3e>
 80091f6:	4602      	mov	r2, r0
 80091f8:	4b28      	ldr	r3, [pc, #160]	; (800929c <__lshift+0xd0>)
 80091fa:	4829      	ldr	r0, [pc, #164]	; (80092a0 <__lshift+0xd4>)
 80091fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009200:	f000 fa1c 	bl	800963c <__assert_func>
 8009204:	3101      	adds	r1, #1
 8009206:	005b      	lsls	r3, r3, #1
 8009208:	e7ee      	b.n	80091e8 <__lshift+0x1c>
 800920a:	2300      	movs	r3, #0
 800920c:	f100 0114 	add.w	r1, r0, #20
 8009210:	f100 0210 	add.w	r2, r0, #16
 8009214:	4618      	mov	r0, r3
 8009216:	4553      	cmp	r3, sl
 8009218:	db33      	blt.n	8009282 <__lshift+0xb6>
 800921a:	6920      	ldr	r0, [r4, #16]
 800921c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009220:	f104 0314 	add.w	r3, r4, #20
 8009224:	f019 091f 	ands.w	r9, r9, #31
 8009228:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800922c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009230:	d02b      	beq.n	800928a <__lshift+0xbe>
 8009232:	f1c9 0e20 	rsb	lr, r9, #32
 8009236:	468a      	mov	sl, r1
 8009238:	2200      	movs	r2, #0
 800923a:	6818      	ldr	r0, [r3, #0]
 800923c:	fa00 f009 	lsl.w	r0, r0, r9
 8009240:	4310      	orrs	r0, r2
 8009242:	f84a 0b04 	str.w	r0, [sl], #4
 8009246:	f853 2b04 	ldr.w	r2, [r3], #4
 800924a:	459c      	cmp	ip, r3
 800924c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009250:	d8f3      	bhi.n	800923a <__lshift+0x6e>
 8009252:	ebac 0304 	sub.w	r3, ip, r4
 8009256:	3b15      	subs	r3, #21
 8009258:	f023 0303 	bic.w	r3, r3, #3
 800925c:	3304      	adds	r3, #4
 800925e:	f104 0015 	add.w	r0, r4, #21
 8009262:	4584      	cmp	ip, r0
 8009264:	bf38      	it	cc
 8009266:	2304      	movcc	r3, #4
 8009268:	50ca      	str	r2, [r1, r3]
 800926a:	b10a      	cbz	r2, 8009270 <__lshift+0xa4>
 800926c:	f108 0602 	add.w	r6, r8, #2
 8009270:	3e01      	subs	r6, #1
 8009272:	4638      	mov	r0, r7
 8009274:	612e      	str	r6, [r5, #16]
 8009276:	4621      	mov	r1, r4
 8009278:	f7ff fdd8 	bl	8008e2c <_Bfree>
 800927c:	4628      	mov	r0, r5
 800927e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009282:	f842 0f04 	str.w	r0, [r2, #4]!
 8009286:	3301      	adds	r3, #1
 8009288:	e7c5      	b.n	8009216 <__lshift+0x4a>
 800928a:	3904      	subs	r1, #4
 800928c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009290:	f841 2f04 	str.w	r2, [r1, #4]!
 8009294:	459c      	cmp	ip, r3
 8009296:	d8f9      	bhi.n	800928c <__lshift+0xc0>
 8009298:	e7ea      	b.n	8009270 <__lshift+0xa4>
 800929a:	bf00      	nop
 800929c:	08009d38 	.word	0x08009d38
 80092a0:	08009d49 	.word	0x08009d49

080092a4 <__mcmp>:
 80092a4:	b530      	push	{r4, r5, lr}
 80092a6:	6902      	ldr	r2, [r0, #16]
 80092a8:	690c      	ldr	r4, [r1, #16]
 80092aa:	1b12      	subs	r2, r2, r4
 80092ac:	d10e      	bne.n	80092cc <__mcmp+0x28>
 80092ae:	f100 0314 	add.w	r3, r0, #20
 80092b2:	3114      	adds	r1, #20
 80092b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80092b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80092bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80092c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80092c4:	42a5      	cmp	r5, r4
 80092c6:	d003      	beq.n	80092d0 <__mcmp+0x2c>
 80092c8:	d305      	bcc.n	80092d6 <__mcmp+0x32>
 80092ca:	2201      	movs	r2, #1
 80092cc:	4610      	mov	r0, r2
 80092ce:	bd30      	pop	{r4, r5, pc}
 80092d0:	4283      	cmp	r3, r0
 80092d2:	d3f3      	bcc.n	80092bc <__mcmp+0x18>
 80092d4:	e7fa      	b.n	80092cc <__mcmp+0x28>
 80092d6:	f04f 32ff 	mov.w	r2, #4294967295
 80092da:	e7f7      	b.n	80092cc <__mcmp+0x28>

080092dc <__mdiff>:
 80092dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e0:	460c      	mov	r4, r1
 80092e2:	4606      	mov	r6, r0
 80092e4:	4611      	mov	r1, r2
 80092e6:	4620      	mov	r0, r4
 80092e8:	4690      	mov	r8, r2
 80092ea:	f7ff ffdb 	bl	80092a4 <__mcmp>
 80092ee:	1e05      	subs	r5, r0, #0
 80092f0:	d110      	bne.n	8009314 <__mdiff+0x38>
 80092f2:	4629      	mov	r1, r5
 80092f4:	4630      	mov	r0, r6
 80092f6:	f7ff fd59 	bl	8008dac <_Balloc>
 80092fa:	b930      	cbnz	r0, 800930a <__mdiff+0x2e>
 80092fc:	4b3a      	ldr	r3, [pc, #232]	; (80093e8 <__mdiff+0x10c>)
 80092fe:	4602      	mov	r2, r0
 8009300:	f240 2137 	movw	r1, #567	; 0x237
 8009304:	4839      	ldr	r0, [pc, #228]	; (80093ec <__mdiff+0x110>)
 8009306:	f000 f999 	bl	800963c <__assert_func>
 800930a:	2301      	movs	r3, #1
 800930c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009314:	bfa4      	itt	ge
 8009316:	4643      	movge	r3, r8
 8009318:	46a0      	movge	r8, r4
 800931a:	4630      	mov	r0, r6
 800931c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009320:	bfa6      	itte	ge
 8009322:	461c      	movge	r4, r3
 8009324:	2500      	movge	r5, #0
 8009326:	2501      	movlt	r5, #1
 8009328:	f7ff fd40 	bl	8008dac <_Balloc>
 800932c:	b920      	cbnz	r0, 8009338 <__mdiff+0x5c>
 800932e:	4b2e      	ldr	r3, [pc, #184]	; (80093e8 <__mdiff+0x10c>)
 8009330:	4602      	mov	r2, r0
 8009332:	f240 2145 	movw	r1, #581	; 0x245
 8009336:	e7e5      	b.n	8009304 <__mdiff+0x28>
 8009338:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800933c:	6926      	ldr	r6, [r4, #16]
 800933e:	60c5      	str	r5, [r0, #12]
 8009340:	f104 0914 	add.w	r9, r4, #20
 8009344:	f108 0514 	add.w	r5, r8, #20
 8009348:	f100 0e14 	add.w	lr, r0, #20
 800934c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009350:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009354:	f108 0210 	add.w	r2, r8, #16
 8009358:	46f2      	mov	sl, lr
 800935a:	2100      	movs	r1, #0
 800935c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009360:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009364:	fa11 f88b 	uxtah	r8, r1, fp
 8009368:	b299      	uxth	r1, r3
 800936a:	0c1b      	lsrs	r3, r3, #16
 800936c:	eba8 0801 	sub.w	r8, r8, r1
 8009370:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009374:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009378:	fa1f f888 	uxth.w	r8, r8
 800937c:	1419      	asrs	r1, r3, #16
 800937e:	454e      	cmp	r6, r9
 8009380:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009384:	f84a 3b04 	str.w	r3, [sl], #4
 8009388:	d8e8      	bhi.n	800935c <__mdiff+0x80>
 800938a:	1b33      	subs	r3, r6, r4
 800938c:	3b15      	subs	r3, #21
 800938e:	f023 0303 	bic.w	r3, r3, #3
 8009392:	3304      	adds	r3, #4
 8009394:	3415      	adds	r4, #21
 8009396:	42a6      	cmp	r6, r4
 8009398:	bf38      	it	cc
 800939a:	2304      	movcc	r3, #4
 800939c:	441d      	add	r5, r3
 800939e:	4473      	add	r3, lr
 80093a0:	469e      	mov	lr, r3
 80093a2:	462e      	mov	r6, r5
 80093a4:	4566      	cmp	r6, ip
 80093a6:	d30e      	bcc.n	80093c6 <__mdiff+0xea>
 80093a8:	f10c 0203 	add.w	r2, ip, #3
 80093ac:	1b52      	subs	r2, r2, r5
 80093ae:	f022 0203 	bic.w	r2, r2, #3
 80093b2:	3d03      	subs	r5, #3
 80093b4:	45ac      	cmp	ip, r5
 80093b6:	bf38      	it	cc
 80093b8:	2200      	movcc	r2, #0
 80093ba:	4413      	add	r3, r2
 80093bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80093c0:	b17a      	cbz	r2, 80093e2 <__mdiff+0x106>
 80093c2:	6107      	str	r7, [r0, #16]
 80093c4:	e7a4      	b.n	8009310 <__mdiff+0x34>
 80093c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80093ca:	fa11 f288 	uxtah	r2, r1, r8
 80093ce:	1414      	asrs	r4, r2, #16
 80093d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80093d4:	b292      	uxth	r2, r2
 80093d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80093da:	f84e 2b04 	str.w	r2, [lr], #4
 80093de:	1421      	asrs	r1, r4, #16
 80093e0:	e7e0      	b.n	80093a4 <__mdiff+0xc8>
 80093e2:	3f01      	subs	r7, #1
 80093e4:	e7ea      	b.n	80093bc <__mdiff+0xe0>
 80093e6:	bf00      	nop
 80093e8:	08009d38 	.word	0x08009d38
 80093ec:	08009d49 	.word	0x08009d49

080093f0 <__d2b>:
 80093f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093f4:	460f      	mov	r7, r1
 80093f6:	2101      	movs	r1, #1
 80093f8:	ec59 8b10 	vmov	r8, r9, d0
 80093fc:	4616      	mov	r6, r2
 80093fe:	f7ff fcd5 	bl	8008dac <_Balloc>
 8009402:	4604      	mov	r4, r0
 8009404:	b930      	cbnz	r0, 8009414 <__d2b+0x24>
 8009406:	4602      	mov	r2, r0
 8009408:	4b24      	ldr	r3, [pc, #144]	; (800949c <__d2b+0xac>)
 800940a:	4825      	ldr	r0, [pc, #148]	; (80094a0 <__d2b+0xb0>)
 800940c:	f240 310f 	movw	r1, #783	; 0x30f
 8009410:	f000 f914 	bl	800963c <__assert_func>
 8009414:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009418:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800941c:	bb2d      	cbnz	r5, 800946a <__d2b+0x7a>
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	f1b8 0300 	subs.w	r3, r8, #0
 8009424:	d026      	beq.n	8009474 <__d2b+0x84>
 8009426:	4668      	mov	r0, sp
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	f7ff fd87 	bl	8008f3c <__lo0bits>
 800942e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009432:	b1e8      	cbz	r0, 8009470 <__d2b+0x80>
 8009434:	f1c0 0320 	rsb	r3, r0, #32
 8009438:	fa02 f303 	lsl.w	r3, r2, r3
 800943c:	430b      	orrs	r3, r1
 800943e:	40c2      	lsrs	r2, r0
 8009440:	6163      	str	r3, [r4, #20]
 8009442:	9201      	str	r2, [sp, #4]
 8009444:	9b01      	ldr	r3, [sp, #4]
 8009446:	61a3      	str	r3, [r4, #24]
 8009448:	2b00      	cmp	r3, #0
 800944a:	bf14      	ite	ne
 800944c:	2202      	movne	r2, #2
 800944e:	2201      	moveq	r2, #1
 8009450:	6122      	str	r2, [r4, #16]
 8009452:	b1bd      	cbz	r5, 8009484 <__d2b+0x94>
 8009454:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009458:	4405      	add	r5, r0
 800945a:	603d      	str	r5, [r7, #0]
 800945c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009460:	6030      	str	r0, [r6, #0]
 8009462:	4620      	mov	r0, r4
 8009464:	b003      	add	sp, #12
 8009466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800946a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800946e:	e7d6      	b.n	800941e <__d2b+0x2e>
 8009470:	6161      	str	r1, [r4, #20]
 8009472:	e7e7      	b.n	8009444 <__d2b+0x54>
 8009474:	a801      	add	r0, sp, #4
 8009476:	f7ff fd61 	bl	8008f3c <__lo0bits>
 800947a:	9b01      	ldr	r3, [sp, #4]
 800947c:	6163      	str	r3, [r4, #20]
 800947e:	3020      	adds	r0, #32
 8009480:	2201      	movs	r2, #1
 8009482:	e7e5      	b.n	8009450 <__d2b+0x60>
 8009484:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009488:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800948c:	6038      	str	r0, [r7, #0]
 800948e:	6918      	ldr	r0, [r3, #16]
 8009490:	f7ff fd34 	bl	8008efc <__hi0bits>
 8009494:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009498:	e7e2      	b.n	8009460 <__d2b+0x70>
 800949a:	bf00      	nop
 800949c:	08009d38 	.word	0x08009d38
 80094a0:	08009d49 	.word	0x08009d49

080094a4 <__sflush_r>:
 80094a4:	898a      	ldrh	r2, [r1, #12]
 80094a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094aa:	4605      	mov	r5, r0
 80094ac:	0710      	lsls	r0, r2, #28
 80094ae:	460c      	mov	r4, r1
 80094b0:	d458      	bmi.n	8009564 <__sflush_r+0xc0>
 80094b2:	684b      	ldr	r3, [r1, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	dc05      	bgt.n	80094c4 <__sflush_r+0x20>
 80094b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	dc02      	bgt.n	80094c4 <__sflush_r+0x20>
 80094be:	2000      	movs	r0, #0
 80094c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094c6:	2e00      	cmp	r6, #0
 80094c8:	d0f9      	beq.n	80094be <__sflush_r+0x1a>
 80094ca:	2300      	movs	r3, #0
 80094cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094d0:	682f      	ldr	r7, [r5, #0]
 80094d2:	6a21      	ldr	r1, [r4, #32]
 80094d4:	602b      	str	r3, [r5, #0]
 80094d6:	d032      	beq.n	800953e <__sflush_r+0x9a>
 80094d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	075a      	lsls	r2, r3, #29
 80094de:	d505      	bpl.n	80094ec <__sflush_r+0x48>
 80094e0:	6863      	ldr	r3, [r4, #4]
 80094e2:	1ac0      	subs	r0, r0, r3
 80094e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094e6:	b10b      	cbz	r3, 80094ec <__sflush_r+0x48>
 80094e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094ea:	1ac0      	subs	r0, r0, r3
 80094ec:	2300      	movs	r3, #0
 80094ee:	4602      	mov	r2, r0
 80094f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094f2:	6a21      	ldr	r1, [r4, #32]
 80094f4:	4628      	mov	r0, r5
 80094f6:	47b0      	blx	r6
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	89a3      	ldrh	r3, [r4, #12]
 80094fc:	d106      	bne.n	800950c <__sflush_r+0x68>
 80094fe:	6829      	ldr	r1, [r5, #0]
 8009500:	291d      	cmp	r1, #29
 8009502:	d82b      	bhi.n	800955c <__sflush_r+0xb8>
 8009504:	4a29      	ldr	r2, [pc, #164]	; (80095ac <__sflush_r+0x108>)
 8009506:	410a      	asrs	r2, r1
 8009508:	07d6      	lsls	r6, r2, #31
 800950a:	d427      	bmi.n	800955c <__sflush_r+0xb8>
 800950c:	2200      	movs	r2, #0
 800950e:	6062      	str	r2, [r4, #4]
 8009510:	04d9      	lsls	r1, r3, #19
 8009512:	6922      	ldr	r2, [r4, #16]
 8009514:	6022      	str	r2, [r4, #0]
 8009516:	d504      	bpl.n	8009522 <__sflush_r+0x7e>
 8009518:	1c42      	adds	r2, r0, #1
 800951a:	d101      	bne.n	8009520 <__sflush_r+0x7c>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	b903      	cbnz	r3, 8009522 <__sflush_r+0x7e>
 8009520:	6560      	str	r0, [r4, #84]	; 0x54
 8009522:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009524:	602f      	str	r7, [r5, #0]
 8009526:	2900      	cmp	r1, #0
 8009528:	d0c9      	beq.n	80094be <__sflush_r+0x1a>
 800952a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800952e:	4299      	cmp	r1, r3
 8009530:	d002      	beq.n	8009538 <__sflush_r+0x94>
 8009532:	4628      	mov	r0, r5
 8009534:	f7ff fb3a 	bl	8008bac <_free_r>
 8009538:	2000      	movs	r0, #0
 800953a:	6360      	str	r0, [r4, #52]	; 0x34
 800953c:	e7c0      	b.n	80094c0 <__sflush_r+0x1c>
 800953e:	2301      	movs	r3, #1
 8009540:	4628      	mov	r0, r5
 8009542:	47b0      	blx	r6
 8009544:	1c41      	adds	r1, r0, #1
 8009546:	d1c8      	bne.n	80094da <__sflush_r+0x36>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0c5      	beq.n	80094da <__sflush_r+0x36>
 800954e:	2b1d      	cmp	r3, #29
 8009550:	d001      	beq.n	8009556 <__sflush_r+0xb2>
 8009552:	2b16      	cmp	r3, #22
 8009554:	d101      	bne.n	800955a <__sflush_r+0xb6>
 8009556:	602f      	str	r7, [r5, #0]
 8009558:	e7b1      	b.n	80094be <__sflush_r+0x1a>
 800955a:	89a3      	ldrh	r3, [r4, #12]
 800955c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009560:	81a3      	strh	r3, [r4, #12]
 8009562:	e7ad      	b.n	80094c0 <__sflush_r+0x1c>
 8009564:	690f      	ldr	r7, [r1, #16]
 8009566:	2f00      	cmp	r7, #0
 8009568:	d0a9      	beq.n	80094be <__sflush_r+0x1a>
 800956a:	0793      	lsls	r3, r2, #30
 800956c:	680e      	ldr	r6, [r1, #0]
 800956e:	bf08      	it	eq
 8009570:	694b      	ldreq	r3, [r1, #20]
 8009572:	600f      	str	r7, [r1, #0]
 8009574:	bf18      	it	ne
 8009576:	2300      	movne	r3, #0
 8009578:	eba6 0807 	sub.w	r8, r6, r7
 800957c:	608b      	str	r3, [r1, #8]
 800957e:	f1b8 0f00 	cmp.w	r8, #0
 8009582:	dd9c      	ble.n	80094be <__sflush_r+0x1a>
 8009584:	6a21      	ldr	r1, [r4, #32]
 8009586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009588:	4643      	mov	r3, r8
 800958a:	463a      	mov	r2, r7
 800958c:	4628      	mov	r0, r5
 800958e:	47b0      	blx	r6
 8009590:	2800      	cmp	r0, #0
 8009592:	dc06      	bgt.n	80095a2 <__sflush_r+0xfe>
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800959a:	81a3      	strh	r3, [r4, #12]
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	e78e      	b.n	80094c0 <__sflush_r+0x1c>
 80095a2:	4407      	add	r7, r0
 80095a4:	eba8 0800 	sub.w	r8, r8, r0
 80095a8:	e7e9      	b.n	800957e <__sflush_r+0xda>
 80095aa:	bf00      	nop
 80095ac:	dfbffffe 	.word	0xdfbffffe

080095b0 <_fflush_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	690b      	ldr	r3, [r1, #16]
 80095b4:	4605      	mov	r5, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	b913      	cbnz	r3, 80095c0 <_fflush_r+0x10>
 80095ba:	2500      	movs	r5, #0
 80095bc:	4628      	mov	r0, r5
 80095be:	bd38      	pop	{r3, r4, r5, pc}
 80095c0:	b118      	cbz	r0, 80095ca <_fflush_r+0x1a>
 80095c2:	6a03      	ldr	r3, [r0, #32]
 80095c4:	b90b      	cbnz	r3, 80095ca <_fflush_r+0x1a>
 80095c6:	f7fe fb7b 	bl	8007cc0 <__sinit>
 80095ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0f3      	beq.n	80095ba <_fflush_r+0xa>
 80095d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095d4:	07d0      	lsls	r0, r2, #31
 80095d6:	d404      	bmi.n	80095e2 <_fflush_r+0x32>
 80095d8:	0599      	lsls	r1, r3, #22
 80095da:	d402      	bmi.n	80095e2 <_fflush_r+0x32>
 80095dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095de:	f7fe fc66 	bl	8007eae <__retarget_lock_acquire_recursive>
 80095e2:	4628      	mov	r0, r5
 80095e4:	4621      	mov	r1, r4
 80095e6:	f7ff ff5d 	bl	80094a4 <__sflush_r>
 80095ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095ec:	07da      	lsls	r2, r3, #31
 80095ee:	4605      	mov	r5, r0
 80095f0:	d4e4      	bmi.n	80095bc <_fflush_r+0xc>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	059b      	lsls	r3, r3, #22
 80095f6:	d4e1      	bmi.n	80095bc <_fflush_r+0xc>
 80095f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095fa:	f7fe fc59 	bl	8007eb0 <__retarget_lock_release_recursive>
 80095fe:	e7dd      	b.n	80095bc <_fflush_r+0xc>

08009600 <_sbrk_r>:
 8009600:	b538      	push	{r3, r4, r5, lr}
 8009602:	4d06      	ldr	r5, [pc, #24]	; (800961c <_sbrk_r+0x1c>)
 8009604:	2300      	movs	r3, #0
 8009606:	4604      	mov	r4, r0
 8009608:	4608      	mov	r0, r1
 800960a:	602b      	str	r3, [r5, #0]
 800960c:	f7f8 fb1e 	bl	8001c4c <_sbrk>
 8009610:	1c43      	adds	r3, r0, #1
 8009612:	d102      	bne.n	800961a <_sbrk_r+0x1a>
 8009614:	682b      	ldr	r3, [r5, #0]
 8009616:	b103      	cbz	r3, 800961a <_sbrk_r+0x1a>
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	bd38      	pop	{r3, r4, r5, pc}
 800961c:	200007b4 	.word	0x200007b4

08009620 <memcpy>:
 8009620:	440a      	add	r2, r1
 8009622:	4291      	cmp	r1, r2
 8009624:	f100 33ff 	add.w	r3, r0, #4294967295
 8009628:	d100      	bne.n	800962c <memcpy+0xc>
 800962a:	4770      	bx	lr
 800962c:	b510      	push	{r4, lr}
 800962e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009632:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009636:	4291      	cmp	r1, r2
 8009638:	d1f9      	bne.n	800962e <memcpy+0xe>
 800963a:	bd10      	pop	{r4, pc}

0800963c <__assert_func>:
 800963c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800963e:	4614      	mov	r4, r2
 8009640:	461a      	mov	r2, r3
 8009642:	4b09      	ldr	r3, [pc, #36]	; (8009668 <__assert_func+0x2c>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4605      	mov	r5, r0
 8009648:	68d8      	ldr	r0, [r3, #12]
 800964a:	b14c      	cbz	r4, 8009660 <__assert_func+0x24>
 800964c:	4b07      	ldr	r3, [pc, #28]	; (800966c <__assert_func+0x30>)
 800964e:	9100      	str	r1, [sp, #0]
 8009650:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009654:	4906      	ldr	r1, [pc, #24]	; (8009670 <__assert_func+0x34>)
 8009656:	462b      	mov	r3, r5
 8009658:	f000 f844 	bl	80096e4 <fiprintf>
 800965c:	f000 f854 	bl	8009708 <abort>
 8009660:	4b04      	ldr	r3, [pc, #16]	; (8009674 <__assert_func+0x38>)
 8009662:	461c      	mov	r4, r3
 8009664:	e7f3      	b.n	800964e <__assert_func+0x12>
 8009666:	bf00      	nop
 8009668:	200000f4 	.word	0x200000f4
 800966c:	08009eae 	.word	0x08009eae
 8009670:	08009ebb 	.word	0x08009ebb
 8009674:	08009ee9 	.word	0x08009ee9

08009678 <_calloc_r>:
 8009678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800967a:	fba1 2402 	umull	r2, r4, r1, r2
 800967e:	b94c      	cbnz	r4, 8009694 <_calloc_r+0x1c>
 8009680:	4611      	mov	r1, r2
 8009682:	9201      	str	r2, [sp, #4]
 8009684:	f7ff fb06 	bl	8008c94 <_malloc_r>
 8009688:	9a01      	ldr	r2, [sp, #4]
 800968a:	4605      	mov	r5, r0
 800968c:	b930      	cbnz	r0, 800969c <_calloc_r+0x24>
 800968e:	4628      	mov	r0, r5
 8009690:	b003      	add	sp, #12
 8009692:	bd30      	pop	{r4, r5, pc}
 8009694:	220c      	movs	r2, #12
 8009696:	6002      	str	r2, [r0, #0]
 8009698:	2500      	movs	r5, #0
 800969a:	e7f8      	b.n	800968e <_calloc_r+0x16>
 800969c:	4621      	mov	r1, r4
 800969e:	f7fe fb88 	bl	8007db2 <memset>
 80096a2:	e7f4      	b.n	800968e <_calloc_r+0x16>

080096a4 <__ascii_mbtowc>:
 80096a4:	b082      	sub	sp, #8
 80096a6:	b901      	cbnz	r1, 80096aa <__ascii_mbtowc+0x6>
 80096a8:	a901      	add	r1, sp, #4
 80096aa:	b142      	cbz	r2, 80096be <__ascii_mbtowc+0x1a>
 80096ac:	b14b      	cbz	r3, 80096c2 <__ascii_mbtowc+0x1e>
 80096ae:	7813      	ldrb	r3, [r2, #0]
 80096b0:	600b      	str	r3, [r1, #0]
 80096b2:	7812      	ldrb	r2, [r2, #0]
 80096b4:	1e10      	subs	r0, r2, #0
 80096b6:	bf18      	it	ne
 80096b8:	2001      	movne	r0, #1
 80096ba:	b002      	add	sp, #8
 80096bc:	4770      	bx	lr
 80096be:	4610      	mov	r0, r2
 80096c0:	e7fb      	b.n	80096ba <__ascii_mbtowc+0x16>
 80096c2:	f06f 0001 	mvn.w	r0, #1
 80096c6:	e7f8      	b.n	80096ba <__ascii_mbtowc+0x16>

080096c8 <__ascii_wctomb>:
 80096c8:	b149      	cbz	r1, 80096de <__ascii_wctomb+0x16>
 80096ca:	2aff      	cmp	r2, #255	; 0xff
 80096cc:	bf85      	ittet	hi
 80096ce:	238a      	movhi	r3, #138	; 0x8a
 80096d0:	6003      	strhi	r3, [r0, #0]
 80096d2:	700a      	strbls	r2, [r1, #0]
 80096d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80096d8:	bf98      	it	ls
 80096da:	2001      	movls	r0, #1
 80096dc:	4770      	bx	lr
 80096de:	4608      	mov	r0, r1
 80096e0:	4770      	bx	lr
	...

080096e4 <fiprintf>:
 80096e4:	b40e      	push	{r1, r2, r3}
 80096e6:	b503      	push	{r0, r1, lr}
 80096e8:	4601      	mov	r1, r0
 80096ea:	ab03      	add	r3, sp, #12
 80096ec:	4805      	ldr	r0, [pc, #20]	; (8009704 <fiprintf+0x20>)
 80096ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f2:	6800      	ldr	r0, [r0, #0]
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	f000 f837 	bl	8009768 <_vfiprintf_r>
 80096fa:	b002      	add	sp, #8
 80096fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009700:	b003      	add	sp, #12
 8009702:	4770      	bx	lr
 8009704:	200000f4 	.word	0x200000f4

08009708 <abort>:
 8009708:	b508      	push	{r3, lr}
 800970a:	2006      	movs	r0, #6
 800970c:	f000 fa04 	bl	8009b18 <raise>
 8009710:	2001      	movs	r0, #1
 8009712:	f7f8 fa23 	bl	8001b5c <_exit>

08009716 <__sfputc_r>:
 8009716:	6893      	ldr	r3, [r2, #8]
 8009718:	3b01      	subs	r3, #1
 800971a:	2b00      	cmp	r3, #0
 800971c:	b410      	push	{r4}
 800971e:	6093      	str	r3, [r2, #8]
 8009720:	da08      	bge.n	8009734 <__sfputc_r+0x1e>
 8009722:	6994      	ldr	r4, [r2, #24]
 8009724:	42a3      	cmp	r3, r4
 8009726:	db01      	blt.n	800972c <__sfputc_r+0x16>
 8009728:	290a      	cmp	r1, #10
 800972a:	d103      	bne.n	8009734 <__sfputc_r+0x1e>
 800972c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009730:	f000 b934 	b.w	800999c <__swbuf_r>
 8009734:	6813      	ldr	r3, [r2, #0]
 8009736:	1c58      	adds	r0, r3, #1
 8009738:	6010      	str	r0, [r2, #0]
 800973a:	7019      	strb	r1, [r3, #0]
 800973c:	4608      	mov	r0, r1
 800973e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009742:	4770      	bx	lr

08009744 <__sfputs_r>:
 8009744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009746:	4606      	mov	r6, r0
 8009748:	460f      	mov	r7, r1
 800974a:	4614      	mov	r4, r2
 800974c:	18d5      	adds	r5, r2, r3
 800974e:	42ac      	cmp	r4, r5
 8009750:	d101      	bne.n	8009756 <__sfputs_r+0x12>
 8009752:	2000      	movs	r0, #0
 8009754:	e007      	b.n	8009766 <__sfputs_r+0x22>
 8009756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975a:	463a      	mov	r2, r7
 800975c:	4630      	mov	r0, r6
 800975e:	f7ff ffda 	bl	8009716 <__sfputc_r>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	d1f3      	bne.n	800974e <__sfputs_r+0xa>
 8009766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009768 <_vfiprintf_r>:
 8009768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	460d      	mov	r5, r1
 800976e:	b09d      	sub	sp, #116	; 0x74
 8009770:	4614      	mov	r4, r2
 8009772:	4698      	mov	r8, r3
 8009774:	4606      	mov	r6, r0
 8009776:	b118      	cbz	r0, 8009780 <_vfiprintf_r+0x18>
 8009778:	6a03      	ldr	r3, [r0, #32]
 800977a:	b90b      	cbnz	r3, 8009780 <_vfiprintf_r+0x18>
 800977c:	f7fe faa0 	bl	8007cc0 <__sinit>
 8009780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009782:	07d9      	lsls	r1, r3, #31
 8009784:	d405      	bmi.n	8009792 <_vfiprintf_r+0x2a>
 8009786:	89ab      	ldrh	r3, [r5, #12]
 8009788:	059a      	lsls	r2, r3, #22
 800978a:	d402      	bmi.n	8009792 <_vfiprintf_r+0x2a>
 800978c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800978e:	f7fe fb8e 	bl	8007eae <__retarget_lock_acquire_recursive>
 8009792:	89ab      	ldrh	r3, [r5, #12]
 8009794:	071b      	lsls	r3, r3, #28
 8009796:	d501      	bpl.n	800979c <_vfiprintf_r+0x34>
 8009798:	692b      	ldr	r3, [r5, #16]
 800979a:	b99b      	cbnz	r3, 80097c4 <_vfiprintf_r+0x5c>
 800979c:	4629      	mov	r1, r5
 800979e:	4630      	mov	r0, r6
 80097a0:	f000 f93a 	bl	8009a18 <__swsetup_r>
 80097a4:	b170      	cbz	r0, 80097c4 <_vfiprintf_r+0x5c>
 80097a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097a8:	07dc      	lsls	r4, r3, #31
 80097aa:	d504      	bpl.n	80097b6 <_vfiprintf_r+0x4e>
 80097ac:	f04f 30ff 	mov.w	r0, #4294967295
 80097b0:	b01d      	add	sp, #116	; 0x74
 80097b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b6:	89ab      	ldrh	r3, [r5, #12]
 80097b8:	0598      	lsls	r0, r3, #22
 80097ba:	d4f7      	bmi.n	80097ac <_vfiprintf_r+0x44>
 80097bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097be:	f7fe fb77 	bl	8007eb0 <__retarget_lock_release_recursive>
 80097c2:	e7f3      	b.n	80097ac <_vfiprintf_r+0x44>
 80097c4:	2300      	movs	r3, #0
 80097c6:	9309      	str	r3, [sp, #36]	; 0x24
 80097c8:	2320      	movs	r3, #32
 80097ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80097d2:	2330      	movs	r3, #48	; 0x30
 80097d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009988 <_vfiprintf_r+0x220>
 80097d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097dc:	f04f 0901 	mov.w	r9, #1
 80097e0:	4623      	mov	r3, r4
 80097e2:	469a      	mov	sl, r3
 80097e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097e8:	b10a      	cbz	r2, 80097ee <_vfiprintf_r+0x86>
 80097ea:	2a25      	cmp	r2, #37	; 0x25
 80097ec:	d1f9      	bne.n	80097e2 <_vfiprintf_r+0x7a>
 80097ee:	ebba 0b04 	subs.w	fp, sl, r4
 80097f2:	d00b      	beq.n	800980c <_vfiprintf_r+0xa4>
 80097f4:	465b      	mov	r3, fp
 80097f6:	4622      	mov	r2, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7ff ffa2 	bl	8009744 <__sfputs_r>
 8009800:	3001      	adds	r0, #1
 8009802:	f000 80a9 	beq.w	8009958 <_vfiprintf_r+0x1f0>
 8009806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009808:	445a      	add	r2, fp
 800980a:	9209      	str	r2, [sp, #36]	; 0x24
 800980c:	f89a 3000 	ldrb.w	r3, [sl]
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 80a1 	beq.w	8009958 <_vfiprintf_r+0x1f0>
 8009816:	2300      	movs	r3, #0
 8009818:	f04f 32ff 	mov.w	r2, #4294967295
 800981c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009820:	f10a 0a01 	add.w	sl, sl, #1
 8009824:	9304      	str	r3, [sp, #16]
 8009826:	9307      	str	r3, [sp, #28]
 8009828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800982c:	931a      	str	r3, [sp, #104]	; 0x68
 800982e:	4654      	mov	r4, sl
 8009830:	2205      	movs	r2, #5
 8009832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009836:	4854      	ldr	r0, [pc, #336]	; (8009988 <_vfiprintf_r+0x220>)
 8009838:	f7f6 fcd2 	bl	80001e0 <memchr>
 800983c:	9a04      	ldr	r2, [sp, #16]
 800983e:	b9d8      	cbnz	r0, 8009878 <_vfiprintf_r+0x110>
 8009840:	06d1      	lsls	r1, r2, #27
 8009842:	bf44      	itt	mi
 8009844:	2320      	movmi	r3, #32
 8009846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800984a:	0713      	lsls	r3, r2, #28
 800984c:	bf44      	itt	mi
 800984e:	232b      	movmi	r3, #43	; 0x2b
 8009850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009854:	f89a 3000 	ldrb.w	r3, [sl]
 8009858:	2b2a      	cmp	r3, #42	; 0x2a
 800985a:	d015      	beq.n	8009888 <_vfiprintf_r+0x120>
 800985c:	9a07      	ldr	r2, [sp, #28]
 800985e:	4654      	mov	r4, sl
 8009860:	2000      	movs	r0, #0
 8009862:	f04f 0c0a 	mov.w	ip, #10
 8009866:	4621      	mov	r1, r4
 8009868:	f811 3b01 	ldrb.w	r3, [r1], #1
 800986c:	3b30      	subs	r3, #48	; 0x30
 800986e:	2b09      	cmp	r3, #9
 8009870:	d94d      	bls.n	800990e <_vfiprintf_r+0x1a6>
 8009872:	b1b0      	cbz	r0, 80098a2 <_vfiprintf_r+0x13a>
 8009874:	9207      	str	r2, [sp, #28]
 8009876:	e014      	b.n	80098a2 <_vfiprintf_r+0x13a>
 8009878:	eba0 0308 	sub.w	r3, r0, r8
 800987c:	fa09 f303 	lsl.w	r3, r9, r3
 8009880:	4313      	orrs	r3, r2
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	46a2      	mov	sl, r4
 8009886:	e7d2      	b.n	800982e <_vfiprintf_r+0xc6>
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	1d19      	adds	r1, r3, #4
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	9103      	str	r1, [sp, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	bfbb      	ittet	lt
 8009894:	425b      	neglt	r3, r3
 8009896:	f042 0202 	orrlt.w	r2, r2, #2
 800989a:	9307      	strge	r3, [sp, #28]
 800989c:	9307      	strlt	r3, [sp, #28]
 800989e:	bfb8      	it	lt
 80098a0:	9204      	strlt	r2, [sp, #16]
 80098a2:	7823      	ldrb	r3, [r4, #0]
 80098a4:	2b2e      	cmp	r3, #46	; 0x2e
 80098a6:	d10c      	bne.n	80098c2 <_vfiprintf_r+0x15a>
 80098a8:	7863      	ldrb	r3, [r4, #1]
 80098aa:	2b2a      	cmp	r3, #42	; 0x2a
 80098ac:	d134      	bne.n	8009918 <_vfiprintf_r+0x1b0>
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	1d1a      	adds	r2, r3, #4
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	9203      	str	r2, [sp, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	bfb8      	it	lt
 80098ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80098be:	3402      	adds	r4, #2
 80098c0:	9305      	str	r3, [sp, #20]
 80098c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009998 <_vfiprintf_r+0x230>
 80098c6:	7821      	ldrb	r1, [r4, #0]
 80098c8:	2203      	movs	r2, #3
 80098ca:	4650      	mov	r0, sl
 80098cc:	f7f6 fc88 	bl	80001e0 <memchr>
 80098d0:	b138      	cbz	r0, 80098e2 <_vfiprintf_r+0x17a>
 80098d2:	9b04      	ldr	r3, [sp, #16]
 80098d4:	eba0 000a 	sub.w	r0, r0, sl
 80098d8:	2240      	movs	r2, #64	; 0x40
 80098da:	4082      	lsls	r2, r0
 80098dc:	4313      	orrs	r3, r2
 80098de:	3401      	adds	r4, #1
 80098e0:	9304      	str	r3, [sp, #16]
 80098e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e6:	4829      	ldr	r0, [pc, #164]	; (800998c <_vfiprintf_r+0x224>)
 80098e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098ec:	2206      	movs	r2, #6
 80098ee:	f7f6 fc77 	bl	80001e0 <memchr>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d03f      	beq.n	8009976 <_vfiprintf_r+0x20e>
 80098f6:	4b26      	ldr	r3, [pc, #152]	; (8009990 <_vfiprintf_r+0x228>)
 80098f8:	bb1b      	cbnz	r3, 8009942 <_vfiprintf_r+0x1da>
 80098fa:	9b03      	ldr	r3, [sp, #12]
 80098fc:	3307      	adds	r3, #7
 80098fe:	f023 0307 	bic.w	r3, r3, #7
 8009902:	3308      	adds	r3, #8
 8009904:	9303      	str	r3, [sp, #12]
 8009906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009908:	443b      	add	r3, r7
 800990a:	9309      	str	r3, [sp, #36]	; 0x24
 800990c:	e768      	b.n	80097e0 <_vfiprintf_r+0x78>
 800990e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009912:	460c      	mov	r4, r1
 8009914:	2001      	movs	r0, #1
 8009916:	e7a6      	b.n	8009866 <_vfiprintf_r+0xfe>
 8009918:	2300      	movs	r3, #0
 800991a:	3401      	adds	r4, #1
 800991c:	9305      	str	r3, [sp, #20]
 800991e:	4619      	mov	r1, r3
 8009920:	f04f 0c0a 	mov.w	ip, #10
 8009924:	4620      	mov	r0, r4
 8009926:	f810 2b01 	ldrb.w	r2, [r0], #1
 800992a:	3a30      	subs	r2, #48	; 0x30
 800992c:	2a09      	cmp	r2, #9
 800992e:	d903      	bls.n	8009938 <_vfiprintf_r+0x1d0>
 8009930:	2b00      	cmp	r3, #0
 8009932:	d0c6      	beq.n	80098c2 <_vfiprintf_r+0x15a>
 8009934:	9105      	str	r1, [sp, #20]
 8009936:	e7c4      	b.n	80098c2 <_vfiprintf_r+0x15a>
 8009938:	fb0c 2101 	mla	r1, ip, r1, r2
 800993c:	4604      	mov	r4, r0
 800993e:	2301      	movs	r3, #1
 8009940:	e7f0      	b.n	8009924 <_vfiprintf_r+0x1bc>
 8009942:	ab03      	add	r3, sp, #12
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	462a      	mov	r2, r5
 8009948:	4b12      	ldr	r3, [pc, #72]	; (8009994 <_vfiprintf_r+0x22c>)
 800994a:	a904      	add	r1, sp, #16
 800994c:	4630      	mov	r0, r6
 800994e:	f7fd fd65 	bl	800741c <_printf_float>
 8009952:	4607      	mov	r7, r0
 8009954:	1c78      	adds	r0, r7, #1
 8009956:	d1d6      	bne.n	8009906 <_vfiprintf_r+0x19e>
 8009958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800995a:	07d9      	lsls	r1, r3, #31
 800995c:	d405      	bmi.n	800996a <_vfiprintf_r+0x202>
 800995e:	89ab      	ldrh	r3, [r5, #12]
 8009960:	059a      	lsls	r2, r3, #22
 8009962:	d402      	bmi.n	800996a <_vfiprintf_r+0x202>
 8009964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009966:	f7fe faa3 	bl	8007eb0 <__retarget_lock_release_recursive>
 800996a:	89ab      	ldrh	r3, [r5, #12]
 800996c:	065b      	lsls	r3, r3, #25
 800996e:	f53f af1d 	bmi.w	80097ac <_vfiprintf_r+0x44>
 8009972:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009974:	e71c      	b.n	80097b0 <_vfiprintf_r+0x48>
 8009976:	ab03      	add	r3, sp, #12
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	462a      	mov	r2, r5
 800997c:	4b05      	ldr	r3, [pc, #20]	; (8009994 <_vfiprintf_r+0x22c>)
 800997e:	a904      	add	r1, sp, #16
 8009980:	4630      	mov	r0, r6
 8009982:	f7fd ffef 	bl	8007964 <_printf_i>
 8009986:	e7e4      	b.n	8009952 <_vfiprintf_r+0x1ea>
 8009988:	08009feb 	.word	0x08009feb
 800998c:	08009ff5 	.word	0x08009ff5
 8009990:	0800741d 	.word	0x0800741d
 8009994:	08009745 	.word	0x08009745
 8009998:	08009ff1 	.word	0x08009ff1

0800999c <__swbuf_r>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	460e      	mov	r6, r1
 80099a0:	4614      	mov	r4, r2
 80099a2:	4605      	mov	r5, r0
 80099a4:	b118      	cbz	r0, 80099ae <__swbuf_r+0x12>
 80099a6:	6a03      	ldr	r3, [r0, #32]
 80099a8:	b90b      	cbnz	r3, 80099ae <__swbuf_r+0x12>
 80099aa:	f7fe f989 	bl	8007cc0 <__sinit>
 80099ae:	69a3      	ldr	r3, [r4, #24]
 80099b0:	60a3      	str	r3, [r4, #8]
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	071a      	lsls	r2, r3, #28
 80099b6:	d525      	bpl.n	8009a04 <__swbuf_r+0x68>
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	b31b      	cbz	r3, 8009a04 <__swbuf_r+0x68>
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	6922      	ldr	r2, [r4, #16]
 80099c0:	1a98      	subs	r0, r3, r2
 80099c2:	6963      	ldr	r3, [r4, #20]
 80099c4:	b2f6      	uxtb	r6, r6
 80099c6:	4283      	cmp	r3, r0
 80099c8:	4637      	mov	r7, r6
 80099ca:	dc04      	bgt.n	80099d6 <__swbuf_r+0x3a>
 80099cc:	4621      	mov	r1, r4
 80099ce:	4628      	mov	r0, r5
 80099d0:	f7ff fdee 	bl	80095b0 <_fflush_r>
 80099d4:	b9e0      	cbnz	r0, 8009a10 <__swbuf_r+0x74>
 80099d6:	68a3      	ldr	r3, [r4, #8]
 80099d8:	3b01      	subs	r3, #1
 80099da:	60a3      	str	r3, [r4, #8]
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	6022      	str	r2, [r4, #0]
 80099e2:	701e      	strb	r6, [r3, #0]
 80099e4:	6962      	ldr	r2, [r4, #20]
 80099e6:	1c43      	adds	r3, r0, #1
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d004      	beq.n	80099f6 <__swbuf_r+0x5a>
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	07db      	lsls	r3, r3, #31
 80099f0:	d506      	bpl.n	8009a00 <__swbuf_r+0x64>
 80099f2:	2e0a      	cmp	r6, #10
 80099f4:	d104      	bne.n	8009a00 <__swbuf_r+0x64>
 80099f6:	4621      	mov	r1, r4
 80099f8:	4628      	mov	r0, r5
 80099fa:	f7ff fdd9 	bl	80095b0 <_fflush_r>
 80099fe:	b938      	cbnz	r0, 8009a10 <__swbuf_r+0x74>
 8009a00:	4638      	mov	r0, r7
 8009a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a04:	4621      	mov	r1, r4
 8009a06:	4628      	mov	r0, r5
 8009a08:	f000 f806 	bl	8009a18 <__swsetup_r>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d0d5      	beq.n	80099bc <__swbuf_r+0x20>
 8009a10:	f04f 37ff 	mov.w	r7, #4294967295
 8009a14:	e7f4      	b.n	8009a00 <__swbuf_r+0x64>
	...

08009a18 <__swsetup_r>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	4b2a      	ldr	r3, [pc, #168]	; (8009ac4 <__swsetup_r+0xac>)
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	460c      	mov	r4, r1
 8009a22:	b118      	cbz	r0, 8009a2c <__swsetup_r+0x14>
 8009a24:	6a03      	ldr	r3, [r0, #32]
 8009a26:	b90b      	cbnz	r3, 8009a2c <__swsetup_r+0x14>
 8009a28:	f7fe f94a 	bl	8007cc0 <__sinit>
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a32:	0718      	lsls	r0, r3, #28
 8009a34:	d422      	bmi.n	8009a7c <__swsetup_r+0x64>
 8009a36:	06d9      	lsls	r1, r3, #27
 8009a38:	d407      	bmi.n	8009a4a <__swsetup_r+0x32>
 8009a3a:	2309      	movs	r3, #9
 8009a3c:	602b      	str	r3, [r5, #0]
 8009a3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a42:	81a3      	strh	r3, [r4, #12]
 8009a44:	f04f 30ff 	mov.w	r0, #4294967295
 8009a48:	e034      	b.n	8009ab4 <__swsetup_r+0x9c>
 8009a4a:	0758      	lsls	r0, r3, #29
 8009a4c:	d512      	bpl.n	8009a74 <__swsetup_r+0x5c>
 8009a4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a50:	b141      	cbz	r1, 8009a64 <__swsetup_r+0x4c>
 8009a52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a56:	4299      	cmp	r1, r3
 8009a58:	d002      	beq.n	8009a60 <__swsetup_r+0x48>
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	f7ff f8a6 	bl	8008bac <_free_r>
 8009a60:	2300      	movs	r3, #0
 8009a62:	6363      	str	r3, [r4, #52]	; 0x34
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a6a:	81a3      	strh	r3, [r4, #12]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	6063      	str	r3, [r4, #4]
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	6023      	str	r3, [r4, #0]
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	f043 0308 	orr.w	r3, r3, #8
 8009a7a:	81a3      	strh	r3, [r4, #12]
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	b94b      	cbnz	r3, 8009a94 <__swsetup_r+0x7c>
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a8a:	d003      	beq.n	8009a94 <__swsetup_r+0x7c>
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	4628      	mov	r0, r5
 8009a90:	f000 f884 	bl	8009b9c <__smakebuf_r>
 8009a94:	89a0      	ldrh	r0, [r4, #12]
 8009a96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a9a:	f010 0301 	ands.w	r3, r0, #1
 8009a9e:	d00a      	beq.n	8009ab6 <__swsetup_r+0x9e>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60a3      	str	r3, [r4, #8]
 8009aa4:	6963      	ldr	r3, [r4, #20]
 8009aa6:	425b      	negs	r3, r3
 8009aa8:	61a3      	str	r3, [r4, #24]
 8009aaa:	6923      	ldr	r3, [r4, #16]
 8009aac:	b943      	cbnz	r3, 8009ac0 <__swsetup_r+0xa8>
 8009aae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ab2:	d1c4      	bne.n	8009a3e <__swsetup_r+0x26>
 8009ab4:	bd38      	pop	{r3, r4, r5, pc}
 8009ab6:	0781      	lsls	r1, r0, #30
 8009ab8:	bf58      	it	pl
 8009aba:	6963      	ldrpl	r3, [r4, #20]
 8009abc:	60a3      	str	r3, [r4, #8]
 8009abe:	e7f4      	b.n	8009aaa <__swsetup_r+0x92>
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	e7f7      	b.n	8009ab4 <__swsetup_r+0x9c>
 8009ac4:	200000f4 	.word	0x200000f4

08009ac8 <_raise_r>:
 8009ac8:	291f      	cmp	r1, #31
 8009aca:	b538      	push	{r3, r4, r5, lr}
 8009acc:	4604      	mov	r4, r0
 8009ace:	460d      	mov	r5, r1
 8009ad0:	d904      	bls.n	8009adc <_raise_r+0x14>
 8009ad2:	2316      	movs	r3, #22
 8009ad4:	6003      	str	r3, [r0, #0]
 8009ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
 8009adc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ade:	b112      	cbz	r2, 8009ae6 <_raise_r+0x1e>
 8009ae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ae4:	b94b      	cbnz	r3, 8009afa <_raise_r+0x32>
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f000 f830 	bl	8009b4c <_getpid_r>
 8009aec:	462a      	mov	r2, r5
 8009aee:	4601      	mov	r1, r0
 8009af0:	4620      	mov	r0, r4
 8009af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009af6:	f000 b817 	b.w	8009b28 <_kill_r>
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d00a      	beq.n	8009b14 <_raise_r+0x4c>
 8009afe:	1c59      	adds	r1, r3, #1
 8009b00:	d103      	bne.n	8009b0a <_raise_r+0x42>
 8009b02:	2316      	movs	r3, #22
 8009b04:	6003      	str	r3, [r0, #0]
 8009b06:	2001      	movs	r0, #1
 8009b08:	e7e7      	b.n	8009ada <_raise_r+0x12>
 8009b0a:	2400      	movs	r4, #0
 8009b0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b10:	4628      	mov	r0, r5
 8009b12:	4798      	blx	r3
 8009b14:	2000      	movs	r0, #0
 8009b16:	e7e0      	b.n	8009ada <_raise_r+0x12>

08009b18 <raise>:
 8009b18:	4b02      	ldr	r3, [pc, #8]	; (8009b24 <raise+0xc>)
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	6818      	ldr	r0, [r3, #0]
 8009b1e:	f7ff bfd3 	b.w	8009ac8 <_raise_r>
 8009b22:	bf00      	nop
 8009b24:	200000f4 	.word	0x200000f4

08009b28 <_kill_r>:
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	4d07      	ldr	r5, [pc, #28]	; (8009b48 <_kill_r+0x20>)
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	4604      	mov	r4, r0
 8009b30:	4608      	mov	r0, r1
 8009b32:	4611      	mov	r1, r2
 8009b34:	602b      	str	r3, [r5, #0]
 8009b36:	f7f8 f801 	bl	8001b3c <_kill>
 8009b3a:	1c43      	adds	r3, r0, #1
 8009b3c:	d102      	bne.n	8009b44 <_kill_r+0x1c>
 8009b3e:	682b      	ldr	r3, [r5, #0]
 8009b40:	b103      	cbz	r3, 8009b44 <_kill_r+0x1c>
 8009b42:	6023      	str	r3, [r4, #0]
 8009b44:	bd38      	pop	{r3, r4, r5, pc}
 8009b46:	bf00      	nop
 8009b48:	200007b4 	.word	0x200007b4

08009b4c <_getpid_r>:
 8009b4c:	f7f7 bfee 	b.w	8001b2c <_getpid>

08009b50 <__swhatbuf_r>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	460c      	mov	r4, r1
 8009b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b58:	2900      	cmp	r1, #0
 8009b5a:	b096      	sub	sp, #88	; 0x58
 8009b5c:	4615      	mov	r5, r2
 8009b5e:	461e      	mov	r6, r3
 8009b60:	da0d      	bge.n	8009b7e <__swhatbuf_r+0x2e>
 8009b62:	89a3      	ldrh	r3, [r4, #12]
 8009b64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b68:	f04f 0100 	mov.w	r1, #0
 8009b6c:	bf0c      	ite	eq
 8009b6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b72:	2340      	movne	r3, #64	; 0x40
 8009b74:	2000      	movs	r0, #0
 8009b76:	6031      	str	r1, [r6, #0]
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	b016      	add	sp, #88	; 0x58
 8009b7c:	bd70      	pop	{r4, r5, r6, pc}
 8009b7e:	466a      	mov	r2, sp
 8009b80:	f000 f848 	bl	8009c14 <_fstat_r>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	dbec      	blt.n	8009b62 <__swhatbuf_r+0x12>
 8009b88:	9901      	ldr	r1, [sp, #4]
 8009b8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b92:	4259      	negs	r1, r3
 8009b94:	4159      	adcs	r1, r3
 8009b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b9a:	e7eb      	b.n	8009b74 <__swhatbuf_r+0x24>

08009b9c <__smakebuf_r>:
 8009b9c:	898b      	ldrh	r3, [r1, #12]
 8009b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ba0:	079d      	lsls	r5, r3, #30
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	d507      	bpl.n	8009bb8 <__smakebuf_r+0x1c>
 8009ba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	6123      	str	r3, [r4, #16]
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	6163      	str	r3, [r4, #20]
 8009bb4:	b002      	add	sp, #8
 8009bb6:	bd70      	pop	{r4, r5, r6, pc}
 8009bb8:	ab01      	add	r3, sp, #4
 8009bba:	466a      	mov	r2, sp
 8009bbc:	f7ff ffc8 	bl	8009b50 <__swhatbuf_r>
 8009bc0:	9900      	ldr	r1, [sp, #0]
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7ff f865 	bl	8008c94 <_malloc_r>
 8009bca:	b948      	cbnz	r0, 8009be0 <__smakebuf_r+0x44>
 8009bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bd0:	059a      	lsls	r2, r3, #22
 8009bd2:	d4ef      	bmi.n	8009bb4 <__smakebuf_r+0x18>
 8009bd4:	f023 0303 	bic.w	r3, r3, #3
 8009bd8:	f043 0302 	orr.w	r3, r3, #2
 8009bdc:	81a3      	strh	r3, [r4, #12]
 8009bde:	e7e3      	b.n	8009ba8 <__smakebuf_r+0xc>
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	6020      	str	r0, [r4, #0]
 8009be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be8:	81a3      	strh	r3, [r4, #12]
 8009bea:	9b00      	ldr	r3, [sp, #0]
 8009bec:	6163      	str	r3, [r4, #20]
 8009bee:	9b01      	ldr	r3, [sp, #4]
 8009bf0:	6120      	str	r0, [r4, #16]
 8009bf2:	b15b      	cbz	r3, 8009c0c <__smakebuf_r+0x70>
 8009bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f000 f81d 	bl	8009c38 <_isatty_r>
 8009bfe:	b128      	cbz	r0, 8009c0c <__smakebuf_r+0x70>
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	f023 0303 	bic.w	r3, r3, #3
 8009c06:	f043 0301 	orr.w	r3, r3, #1
 8009c0a:	81a3      	strh	r3, [r4, #12]
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	431d      	orrs	r5, r3
 8009c10:	81a5      	strh	r5, [r4, #12]
 8009c12:	e7cf      	b.n	8009bb4 <__smakebuf_r+0x18>

08009c14 <_fstat_r>:
 8009c14:	b538      	push	{r3, r4, r5, lr}
 8009c16:	4d07      	ldr	r5, [pc, #28]	; (8009c34 <_fstat_r+0x20>)
 8009c18:	2300      	movs	r3, #0
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	4611      	mov	r1, r2
 8009c20:	602b      	str	r3, [r5, #0]
 8009c22:	f7f7 ffea 	bl	8001bfa <_fstat>
 8009c26:	1c43      	adds	r3, r0, #1
 8009c28:	d102      	bne.n	8009c30 <_fstat_r+0x1c>
 8009c2a:	682b      	ldr	r3, [r5, #0]
 8009c2c:	b103      	cbz	r3, 8009c30 <_fstat_r+0x1c>
 8009c2e:	6023      	str	r3, [r4, #0]
 8009c30:	bd38      	pop	{r3, r4, r5, pc}
 8009c32:	bf00      	nop
 8009c34:	200007b4 	.word	0x200007b4

08009c38 <_isatty_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4d06      	ldr	r5, [pc, #24]	; (8009c54 <_isatty_r+0x1c>)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4604      	mov	r4, r0
 8009c40:	4608      	mov	r0, r1
 8009c42:	602b      	str	r3, [r5, #0]
 8009c44:	f7f7 ffe9 	bl	8001c1a <_isatty>
 8009c48:	1c43      	adds	r3, r0, #1
 8009c4a:	d102      	bne.n	8009c52 <_isatty_r+0x1a>
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	b103      	cbz	r3, 8009c52 <_isatty_r+0x1a>
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	bd38      	pop	{r3, r4, r5, pc}
 8009c54:	200007b4 	.word	0x200007b4

08009c58 <_init>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	bf00      	nop
 8009c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5e:	bc08      	pop	{r3}
 8009c60:	469e      	mov	lr, r3
 8009c62:	4770      	bx	lr

08009c64 <_fini>:
 8009c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c66:	bf00      	nop
 8009c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c6a:	bc08      	pop	{r3}
 8009c6c:	469e      	mov	lr, r3
 8009c6e:	4770      	bx	lr
