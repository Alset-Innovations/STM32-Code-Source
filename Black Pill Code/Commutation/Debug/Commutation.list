
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08009c00  08009c00  00019c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f8c  08009f8c  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f94  08009f94  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f98  08009f98  00019f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  08009f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  20000264  0800a200  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007c4  0800a200  000207c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001093c  00000000  00000000  000202d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b7c  00000000  00000000  00030c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  00033790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8b  00000000  00000000  000347b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000198da  00000000  00000000  00035443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015562  00000000  00000000  0004ed1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bd15  00000000  00000000  0006427f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052f8  00000000  00000000  000fff94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0010528c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000264 	.word	0x20000264
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009be8 	.word	0x08009be8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000268 	.word	0x20000268
 80001dc:	08009be8 	.word	0x08009be8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <PrepareCommutation>:
uint8_t StopSequence(void);
uint8_t ChangePWM (void);

/* Private function ----------------------------------------------------------*/

uint8_t PrepareCommutation (char Direction) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]

	// Read IDR for Hall Sensor status
	uint16_t Hall = (GPIOA->IDR & 0b111) - 1 + 6 * Direction;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <PrepareCommutation+0x7c>)
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	4619      	mov	r1, r3
 8000ed0:	0049      	lsls	r1, r1, #1
 8000ed2:	440b      	add	r3, r1
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	4413      	add	r3, r2
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	3b01      	subs	r3, #1
 8000ede:	81fb      	strh	r3, [r7, #14]

	// Set Registers to required values
	TIM1->CCER  = Commutation[Hall][0];
 8000ee0:	89fa      	ldrh	r2, [r7, #14]
 8000ee2:	4914      	ldr	r1, [pc, #80]	; (8000f34 <PrepareCommutation+0x80>)
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	440b      	add	r3, r1
 8000eee:	881a      	ldrh	r2, [r3, #0]
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <PrepareCommutation+0x84>)
 8000ef2:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = Commutation[Hall][2];
 8000ef4:	89fa      	ldrh	r2, [r7, #14]
 8000ef6:	490f      	ldr	r1, [pc, #60]	; (8000f34 <PrepareCommutation+0x80>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	440b      	add	r3, r1
 8000f02:	3304      	adds	r3, #4
 8000f04:	881a      	ldrh	r2, [r3, #0]
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <PrepareCommutation+0x84>)
 8000f08:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = Commutation[Hall][1];
 8000f0a:	89fa      	ldrh	r2, [r7, #14]
 8000f0c:	4909      	ldr	r1, [pc, #36]	; (8000f34 <PrepareCommutation+0x80>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	440b      	add	r3, r1
 8000f18:	3302      	adds	r3, #2
 8000f1a:	881a      	ldrh	r2, [r3, #0]
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <PrepareCommutation+0x84>)
 8000f1e:	61da      	str	r2, [r3, #28]

	return HAL_OK;
 8000f20:	2300      	movs	r3, #0

}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40020000 	.word	0x40020000
 8000f34:	20000000 	.word	0x20000000
 8000f38:	40010000 	.word	0x40010000

08000f3c <StartupSequence>:

uint8_t StartupSequence (char Direction) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]

	// Initialize some variables
	Fapb1tclk = HAL_RCC_GetPCLK1Freq() * 2;
 8000f46:	f004 fb9d 	bl	8005684 <HAL_RCC_GetPCLK1Freq>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4a53      	ldr	r2, [pc, #332]	; (800109c <StartupSequence+0x160>)
 8000f50:	6013      	str	r3, [r2, #0]
	Fapb2tclk = HAL_RCC_GetPCLK2Freq() * 2;
 8000f52:	f004 fbab 	bl	80056ac <HAL_RCC_GetPCLK2Freq>
 8000f56:	4603      	mov	r3, r0
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4a51      	ldr	r2, [pc, #324]	; (80010a0 <StartupSequence+0x164>)
 8000f5c:	6013      	str	r3, [r2, #0]
	RPMConst = (Fapb2tclk / (TIM9->PSC + 1)) * 2;
 8000f5e:	4b50      	ldr	r3, [pc, #320]	; (80010a0 <StartupSequence+0x164>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b50      	ldr	r3, [pc, #320]	; (80010a4 <StartupSequence+0x168>)
 8000f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f66:	3301      	adds	r3, #1
 8000f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4a4e      	ldr	r2, [pc, #312]	; (80010a8 <StartupSequence+0x16c>)
 8000f70:	6013      	str	r3, [r2, #0]

	// Set first commutation state according to Hall sensors
	if (PrepareCommutation (Direction + 6 * 2)) {
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	330c      	adds	r3, #12
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff9b 	bl	8000eb4 <PrepareCommutation>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <StartupSequence+0x4c>
		return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e084      	b.n	8001092 <StartupSequence+0x156>
	}

	// Start HallSensor timer
	HAL_TIMEx_HallSensor_Start (&htim2);
 8000f88:	4848      	ldr	r0, [pc, #288]	; (80010ac <StartupSequence+0x170>)
 8000f8a:	f005 ffe3 	bl	8006f54 <HAL_TIMEx_HallSensor_Start>

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_1);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4847      	ldr	r0, [pc, #284]	; (80010b0 <StartupSequence+0x174>)
 8000f92:	f004 fccf 	bl	8005934 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 8000f96:	2104      	movs	r1, #4
 8000f98:	4845      	ldr	r0, [pc, #276]	; (80010b0 <StartupSequence+0x174>)
 8000f9a:	f004 fccb 	bl	8005934 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	4843      	ldr	r0, [pc, #268]	; (80010b0 <StartupSequence+0x174>)
 8000fa2:	f004 fcc7 	bl	8005934 <HAL_TIM_PWM_Start>

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 8000fa6:	4b43      	ldr	r3, [pc, #268]	; (80010b4 <StartupSequence+0x178>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	4a42      	ldr	r2, [pc, #264]	; (80010b4 <StartupSequence+0x178>)
 8000fac:	f023 0320 	bic.w	r3, r3, #32
 8000fb0:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <StartupSequence+0x178>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	4a3f      	ldr	r2, [pc, #252]	; (80010b4 <StartupSequence+0x178>)
 8000fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fbc:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8000fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fcc:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8000fce:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <StartupSequence+0x168>)
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	4a34      	ldr	r2, [pc, #208]	; (80010a4 <StartupSequence+0x168>)
 8000fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fd8:	60d3      	str	r3, [r2, #12]

	// Start Interrupts
	HAL_TIM_Base_Start_IT (&htim1);
 8000fda:	4835      	ldr	r0, [pc, #212]	; (80010b0 <StartupSequence+0x174>)
 8000fdc:	f004 fbca 	bl	8005774 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim2);
 8000fe0:	4832      	ldr	r0, [pc, #200]	; (80010ac <StartupSequence+0x170>)
 8000fe2:	f004 fbc7 	bl	8005774 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT (&htim9);
 8000fe6:	4834      	ldr	r0, [pc, #208]	; (80010b8 <StartupSequence+0x17c>)
 8000fe8:	f004 fbc4 	bl	8005774 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT (&htim9, TIM_CHANNEL_2);
 8000fec:	2104      	movs	r1, #4
 8000fee:	4832      	ldr	r0, [pc, #200]	; (80010b8 <StartupSequence+0x17c>)
 8000ff0:	f004 fe04 	bl	8005bfc <HAL_TIM_IC_Start_IT>

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <StartupSequence+0x178>)
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <StartupSequence+0x178>)
 8000ffa:	f023 0320 	bic.w	r3, r3, #32
 8000ffe:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <StartupSequence+0x178>)
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <StartupSequence+0x178>)
 8001006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800100a:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 800100c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800101a:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <StartupSequence+0x168>)
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	4a20      	ldr	r2, [pc, #128]	; (80010a4 <StartupSequence+0x168>)
 8001022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001026:	6113      	str	r3, [r2, #16]

	// Enable interrupts
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <StartupSequence+0x178>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <StartupSequence+0x178>)
 800102e:	f043 0320 	orr.w	r3, r3, #32
 8001032:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 8001034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001042:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <StartupSequence+0x168>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <StartupSequence+0x168>)
 800104a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104e:	60d3      	str	r3, [r2, #12]

	// Write some registers
	TIM1->CR2  |= TIM_CR2_CCPC; 	// Set CCPC in CR2 to preload CCxE, CCxNE and OCxM bits
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <StartupSequence+0x178>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <StartupSequence+0x178>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6053      	str	r3, [r2, #4]
	TIM1->BDTR &= ~TIM_BDTR_DTG;	// Reset DTG bits
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <StartupSequence+0x178>)
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <StartupSequence+0x178>)
 8001062:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001066:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= 0x800A;			// Set dead-time to 100ns and make sure to enable MOE bit
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <StartupSequence+0x178>)
 800106a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106c:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <StartupSequence+0x178>)
 800106e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001072:	f043 030a 	orr.w	r3, r3, #10
 8001076:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <StartupSequence+0x178>)
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <StartupSequence+0x178>)
 800107e:	f043 0320 	orr.w	r3, r3, #32
 8001082:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable commutation events in DIER register
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <StartupSequence+0x178>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <StartupSequence+0x178>)
 800108a:	f043 0320 	orr.w	r3, r3, #32
 800108e:	60d3      	str	r3, [r2, #12]

	return HAL_OK;
 8001090:	2300      	movs	r3, #0

}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000280 	.word	0x20000280
 80010a0:	20000284 	.word	0x20000284
 80010a4:	40014000 	.word	0x40014000
 80010a8:	20000288 	.word	0x20000288
 80010ac:	2000059c 	.word	0x2000059c
 80010b0:	20000554 	.word	0x20000554
 80010b4:	40010000 	.word	0x40010000
 80010b8:	2000062c 	.word	0x2000062c

080010bc <StopSequence>:

uint8_t StopSequence(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

	// Stop HallSensor timer
	HAL_TIMEx_HallSensor_Stop (&htim2);
 80010c0:	4828      	ldr	r0, [pc, #160]	; (8001164 <StopSequence+0xa8>)
 80010c2:	f005 ffc7 	bl	8007054 <HAL_TIMEx_HallSensor_Stop>

	// Disable all output channels
	TIM1->CCER  = 0x0000;
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <StopSequence+0xac>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 = 0x0000;
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <StopSequence+0xac>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 = 0x0000;
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <StopSequence+0xac>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]

	// Perform one last commutation event if not already disabled
	if ( (TIM1->DIER & TIM_DIER_COMIE) >= 1 ) { 		// If COMIE bit in DIER is set commutation events are still enabled
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <StopSequence+0xac>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f003 0320 	and.w	r3, r3, #32
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <StopSequence+0x34>

		TIM1->EGR |= TIM_EGR_COMG; 						// Trigger commutation event
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <StopSequence+0xac>)
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <StopSequence+0xac>)
 80010ea:	f043 0320 	orr.w	r3, r3, #32
 80010ee:	6153      	str	r3, [r2, #20]
		// while ( (TIM1->SR & TIM_SR_COMIF) >= 1 ); 	// Wait until commutation event has happened

	}

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <StopSequence+0xac>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <StopSequence+0xac>)
 80010f6:	f023 0320 	bic.w	r3, r3, #32
 80010fa:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <StopSequence+0xac>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4a19      	ldr	r2, [pc, #100]	; (8001168 <StopSequence+0xac>)
 8001102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001106:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8001108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001116:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <StopSequence+0xb0>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4a13      	ldr	r2, [pc, #76]	; (800116c <StopSequence+0xb0>)
 800111e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001122:	60d3      	str	r3, [r2, #12]

	// Stop interrupts
	HAL_TIM_Base_Stop_IT (&htim1);
 8001124:	4812      	ldr	r0, [pc, #72]	; (8001170 <StopSequence+0xb4>)
 8001126:	f004 fb87 	bl	8005838 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim2);
 800112a:	480e      	ldr	r0, [pc, #56]	; (8001164 <StopSequence+0xa8>)
 800112c:	f004 fb84 	bl	8005838 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT (&htim9);
 8001130:	4810      	ldr	r0, [pc, #64]	; (8001174 <StopSequence+0xb8>)
 8001132:	f004 fb81 	bl	8005838 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT (&htim9, TIM_CHANNEL_2);
 8001136:	2104      	movs	r1, #4
 8001138:	480e      	ldr	r0, [pc, #56]	; (8001174 <StopSequence+0xb8>)
 800113a:	f004 fe79 	bl	8005e30 <HAL_TIM_IC_Stop_IT>

	// Stop PWM Timers
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_1);
 800113e:	2100      	movs	r1, #0
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <StopSequence+0xb4>)
 8001142:	f004 fca7 	bl	8005a94 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_2);
 8001146:	2104      	movs	r1, #4
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <StopSequence+0xb4>)
 800114a:	f004 fca3 	bl	8005a94 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop (&htim1, TIM_CHANNEL_3);
 800114e:	2108      	movs	r1, #8
 8001150:	4807      	ldr	r0, [pc, #28]	; (8001170 <StopSequence+0xb4>)
 8001152:	f004 fc9f 	bl	8005a94 <HAL_TIM_PWM_Stop>

	Registers[RPMReg] = 0;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <StopSequence+0xbc>)
 8001158:	2200      	movs	r2, #0
 800115a:	80da      	strh	r2, [r3, #6]

	return HAL_OK;
 800115c:	2300      	movs	r3, #0

}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000059c 	.word	0x2000059c
 8001168:	40010000 	.word	0x40010000
 800116c:	40014000 	.word	0x40014000
 8001170:	20000554 	.word	0x20000554
 8001174:	2000062c 	.word	0x2000062c
 8001178:	200002e0 	.word	0x200002e0

0800117c <ChangePWM>:

uint8_t ChangePWM (void) {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0

	uint32_t PWM = (Registers[PWMReg] * TIM1->ARR) / 100; // Calculate required CCRx value
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <ChangePWM+0x6c>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <ChangePWM+0x70>)
 800118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <ChangePWM+0x74>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	607b      	str	r3, [r7, #4]

	if (PWM >= TIM1->ARR - 60) {
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <ChangePWM+0x70>)
 800119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119e:	3b3c      	subs	r3, #60	; 0x3c
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d303      	bcc.n	80011ae <ChangePWM+0x32>
		PWM = TIM1->ARR - 60;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <ChangePWM+0x70>)
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	3b3c      	subs	r3, #60	; 0x3c
 80011ac:	607b      	str	r3, [r7, #4]
	}

	TIM1->CR1 |= TIM_CR1_UDIS; 	// Disable Update Events
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <ChangePWM+0x70>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <ChangePWM+0x70>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = PWM;	  		// Set new PWM for channel 1
 80011ba:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <ChangePWM+0x70>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = PWM;	  		// Set new PWM for channel 2
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <ChangePWM+0x70>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = PWM;	  		// Set new PWM for channel 3
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <ChangePWM+0x70>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_UDIS; // Enable Update Events
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <ChangePWM+0x70>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a06      	ldr	r2, [pc, #24]	; (80011ec <ChangePWM+0x70>)
 80011d2:	f023 0302 	bic.w	r3, r3, #2
 80011d6:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 80011d8:	2300      	movs	r3, #0

}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	200002e0 	.word	0x200002e0
 80011ec:	40010000 	.word	0x40010000
 80011f0:	51eb851f 	.word	0x51eb851f

080011f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001208:	4a22      	ldr	r2, [pc, #136]	; (8001294 <MX_ADC1_Init+0xa0>)
 800120a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <MX_ADC1_Init+0x9c>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_ADC1_Init+0x9c>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001220:	2200      	movs	r2, #0
 8001222:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_ADC1_Init+0x9c>)
 800122e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_CC1;
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001236:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_ADC1_Init+0x9c>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001244:	2201      	movs	r2, #1
 8001246:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_ADC1_Init+0x9c>)
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001252:	2201      	movs	r2, #1
 8001254:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001256:	480e      	ldr	r0, [pc, #56]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001258:	f001 f88a 	bl	8002370 <HAL_ADC_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001262:	f000 fb1f 	bl	80018a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001266:	2309      	movs	r3, #9
 8001268:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_ADC1_Init+0x9c>)
 8001278:	f001 f9ec 	bl	8002654 <HAL_ADC_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001282:	f000 fb0f 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000028c 	.word	0x2000028c
 8001294:	40012000 	.word	0x40012000

08001298 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a28      	ldr	r2, [pc, #160]	; (8001358 <HAL_ADC_MspInit+0xc0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d149      	bne.n	800134e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a26      	ldr	r2, [pc, #152]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a1f      	ldr	r2, [pc, #124]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <HAL_ADC_MspInit+0xc4>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <HAL_ADC_MspInit+0xc4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800130e:	2310      	movs	r3, #16
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	480f      	ldr	r0, [pc, #60]	; (8001360 <HAL_ADC_MspInit+0xc8>)
 8001322:	f001 fd11 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001326:	2302      	movs	r3, #2
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132a:	2303      	movs	r3, #3
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <HAL_ADC_MspInit+0xcc>)
 800133a:	f001 fd05 	bl	8002d48 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	2012      	movs	r0, #18
 8001344:	f001 fc99 	bl	8002c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001348:	2012      	movs	r0, #18
 800134a:	f001 fcb2 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800134e:	bf00      	nop
 8001350:	3728      	adds	r7, #40	; 0x28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40012000 	.word	0x40012000
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000
 8001364:	40020400 	.word	0x40020400

08001368 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <MX_GPIO_Init+0x8c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <MX_GPIO_Init+0x8c>)
 8001388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <MX_GPIO_Init+0x8c>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <MX_GPIO_Init+0x8c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <MX_GPIO_Init+0x8c>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_GPIO_Init+0x8c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_GPIO_Init+0x8c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <MX_GPIO_Init+0x8c>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_GPIO_Init+0x8c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013d2:	2310      	movs	r3, #16
 80013d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MX_GPIO_Init+0x90>)
 80013e8:	f001 fcae 	bl	8002d48 <HAL_GPIO_Init>

}
 80013ec:	bf00      	nop
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020400 	.word	0x40020400

080013fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_I2C1_Init+0x50>)
 8001402:	4a13      	ldr	r2, [pc, #76]	; (8001450 <MX_I2C1_Init+0x54>)
 8001404:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_I2C1_Init+0x50>)
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <MX_I2C1_Init+0x58>)
 800140a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_I2C1_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_I2C1_Init+0x50>)
 8001414:	2220      	movs	r2, #32
 8001416:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_I2C1_Init+0x50>)
 800141a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800141e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <MX_I2C1_Init+0x50>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_I2C1_Init+0x50>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <MX_I2C1_Init+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_I2C1_Init+0x50>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_I2C1_Init+0x50>)
 800143a:	f001 fe09 	bl	8003050 <HAL_I2C_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001444:	f000 fa2e 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200002f4 	.word	0x200002f4
 8001450:	40005400 	.word	0x40005400
 8001454:	000186a0 	.word	0x000186a0

08001458 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <HAL_I2C_MspInit+0xa4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d13b      	bne.n	80014f2 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_I2C_MspInit+0xa8>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <HAL_I2C_MspInit+0xa8>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_I2C_MspInit+0xa8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001496:	23c0      	movs	r3, #192	; 0xc0
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149a:	2312      	movs	r3, #18
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a6:	2304      	movs	r3, #4
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4814      	ldr	r0, [pc, #80]	; (8001504 <HAL_I2C_MspInit+0xac>)
 80014b2:	f001 fc49 	bl	8002d48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_I2C_MspInit+0xa8>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <HAL_I2C_MspInit+0xa8>)
 80014c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_I2C_MspInit+0xa8>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	201f      	movs	r0, #31
 80014d8:	f001 fbcf 	bl	8002c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014dc:	201f      	movs	r0, #31
 80014de:	f001 fbe8 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	2020      	movs	r0, #32
 80014e8:	f001 fbc7 	bl	8002c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80014ec:	2020      	movs	r0, #32
 80014ee:	f001 fbe0 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40005400 	.word	0x40005400
 8001500:	40023800 	.word	0x40023800
 8001504:	40020400 	.word	0x40020400

08001508 <HAL_I2C_ListenCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

extern void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

	HAL_I2C_EnableListen_IT (hi2c);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f001 ffc7 	bl	80034a4 <HAL_I2C_EnableListen_IT>

}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_I2C_AddrCallback>:

extern void HAL_I2C_AddrCallback (I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	70fb      	strb	r3, [r7, #3]
 800152c:	4613      	mov	r3, r2
 800152e:	803b      	strh	r3, [r7, #0]

	if ( TransferDirection == I2C_DIRECTION_TRANSMIT ) { // If the master wants to transmit the data
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d10d      	bne.n	8001552 <HAL_I2C_AddrCallback+0x32>

		RxCount = 0;
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <HAL_I2C_AddrCallback+0x8c>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_FIRST_FRAME);
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_I2C_AddrCallback+0x8c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_I2C_AddrCallback+0x90>)
 8001544:	18d1      	adds	r1, r2, r3
 8001546:	2301      	movs	r3, #1
 8001548:	2201      	movs	r2, #1
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f001 ff37 	bl	80033be <HAL_I2C_Slave_Seq_Receive_IT>
		StartReg = RxData[0];
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] >> 8), 1, I2C_FIRST_FRAME);
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] & 0xFF), 1, I2C_NEXT_FRAME);

	}
}
 8001550:	e028      	b.n	80015a4 <HAL_I2C_AddrCallback+0x84>
		TxCount = 0;
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_I2C_AddrCallback+0x94>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
		StartReg = RxData[0];
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_I2C_AddrCallback+0x90>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <HAL_I2C_AddrCallback+0x98>)
 8001560:	601a      	str	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] >> 8), 1, I2C_FIRST_FRAME);
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_I2C_AddrCallback+0x94>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <HAL_I2C_AddrCallback+0x98>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4413      	add	r3, r2
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <HAL_I2C_AddrCallback+0x9c>)
 8001570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	4619      	mov	r1, r3
 800157a:	2301      	movs	r3, #1
 800157c:	2201      	movs	r2, #1
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f001 feaa 	bl	80032d8 <HAL_I2C_Slave_Seq_Transmit_IT>
		HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] & 0xFF), 1, I2C_NEXT_FRAME);
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_I2C_AddrCallback+0x94>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_I2C_AddrCallback+0x98>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_I2C_AddrCallback+0x9c>)
 8001592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	2304      	movs	r3, #4
 800159c:	2201      	movs	r2, #1
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f001 fe9a 	bl	80032d8 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200002d5 	.word	0x200002d5
 80015b0:	200002d8 	.word	0x200002d8
 80015b4:	200002d4 	.word	0x200002d4
 80015b8:	200002e8 	.word	0x200002e8
 80015bc:	200002e0 	.word	0x200002e0

080015c0 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback (I2C_HandleTypeDef *hi2c) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

	TxCount++;
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_I2C_SlaveTxCpltCallback+0x60>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_I2C_SlaveTxCpltCallback+0x60>)
 80015d2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] >> 8), 1, I2C_NEXT_FRAME);
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_I2C_SlaveTxCpltCallback+0x60>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_I2C_SlaveTxCpltCallback+0x64>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 80015e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e6:	0a1b      	lsrs	r3, r3, #8
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4619      	mov	r1, r3
 80015ec:	2304      	movs	r3, #4
 80015ee:	2201      	movs	r2, #1
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f001 fe71 	bl	80032d8 <HAL_I2C_Slave_Seq_Transmit_IT>
	HAL_I2C_Slave_Seq_Transmit_IT (hi2c, (uint8_t *) (Registers[TxCount + StartReg] & 0xFF), 1, I2C_NEXT_FRAME);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_I2C_SlaveTxCpltCallback+0x60>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_I2C_SlaveTxCpltCallback+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4413      	add	r3, r2
 8001602:	4a09      	ldr	r2, [pc, #36]	; (8001628 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 8001604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	2304      	movs	r3, #4
 800160e:	2201      	movs	r2, #1
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f001 fe61 	bl	80032d8 <HAL_I2C_Slave_Seq_Transmit_IT>

}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200002d4 	.word	0x200002d4
 8001624:	200002e8 	.word	0x200002e8
 8001628:	200002e0 	.word	0x200002e0

0800162c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef *hi2c) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

	RxCount++;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	3301      	adds	r3, #1
 800163a:	b2da      	uxtb	r2, r3
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800163e:	701a      	strb	r2, [r3, #0]

	if ( RxCount < RxSize ) {
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b05      	cmp	r3, #5
 8001646:	d818      	bhi.n	800167a <HAL_I2C_SlaveRxCpltCallback+0x4e>

		if (RxCount == RxSize - 1) {
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b05      	cmp	r3, #5
 800164e:	d10a      	bne.n	8001666 <HAL_I2C_SlaveRxCpltCallback+0x3a>
			HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_LAST_FRAME);
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001658:	18d1      	adds	r1, r2, r3
 800165a:	2320      	movs	r3, #32
 800165c:	2201      	movs	r2, #1
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f001 fead 	bl	80033be <HAL_I2C_Slave_Seq_Receive_IT>
 8001664:	e009      	b.n	800167a <HAL_I2C_SlaveRxCpltCallback+0x4e>
		} else {
			HAL_I2C_Slave_Sequential_Receive_IT (hi2c, RxData + RxCount, 1, I2C_NEXT_FRAME);
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800166e:	18d1      	adds	r1, r2, r3
 8001670:	2304      	movs	r3, #4
 8001672:	2201      	movs	r2, #1
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f001 fea2 	bl	80033be <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if ( RxCount == RxSize) {
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b06      	cmp	r3, #6
 8001680:	d101      	bne.n	8001686 <HAL_I2C_SlaveRxCpltCallback+0x5a>
		ProcessData();
 8001682:	f000 f82f 	bl	80016e4 <ProcessData>
	}

}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200002d5 	.word	0x200002d5
 8001694:	200002d8 	.word	0x200002d8

08001698 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback (I2C_HandleTypeDef *hi2c) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

	if ( HAL_I2C_GetError (hi2c) == 4) {
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f002 f959 	bl	8003958 <HAL_I2C_GetError>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d111      	bne.n	80016d0 <HAL_I2C_ErrorCallback+0x38>

		__HAL_I2C_CLEAR_FLAG (hi2c, I2C_FLAG_AF); 	// Clear AF flag
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016b4:	615a      	str	r2, [r3, #20]

		if ( TxCount == 0) { 						// Error while recieving
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_I2C_ErrorCallback+0x48>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d102      	bne.n	80016c4 <HAL_I2C_ErrorCallback+0x2c>
			ProcessData();
 80016be:	f000 f811 	bl	80016e4 <ProcessData>
 80016c2:	e005      	b.n	80016d0 <HAL_I2C_ErrorCallback+0x38>
		} else { 									// Error while transmitting
			TxCount--;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_I2C_ErrorCallback+0x48>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <HAL_I2C_ErrorCallback+0x48>)
 80016ce:	701a      	strb	r2, [r3, #0]
		}

	}

	HAL_I2C_EnableListen_IT(hi2c);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f001 fee7 	bl	80034a4 <HAL_I2C_EnableListen_IT>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200002d4 	.word	0x200002d4

080016e4 <ProcessData>:

void ProcessData (void) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0

	StartReg = RxData[0]; 			// Start address of registers to be written
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <ProcessData+0xa0>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <ProcessData+0xa4>)
 80016f2:	601a      	str	r2, [r3, #0]
	NumReg = RxCount - 1; 			// Number of registers to be written
 80016f4:	4b25      	ldr	r3, [pc, #148]	; (800178c <ProcessData+0xa8>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	4a25      	ldr	r2, [pc, #148]	; (8001790 <ProcessData+0xac>)
 80016fc:	6013      	str	r3, [r2, #0]
	EndReg = StartReg + NumReg - 1; // Last register to be written
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <ProcessData+0xa4>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <ProcessData+0xac>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	3b01      	subs	r3, #1
 800170a:	4a22      	ldr	r2, [pc, #136]	; (8001794 <ProcessData+0xb0>)
 800170c:	6013      	str	r3, [r2, #0]

	// If the last register to be wriiten is larger than the size of the register call the error handler
	if (EndReg > RxSize) {
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <ProcessData+0xb0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b06      	cmp	r3, #6
 8001714:	dd01      	ble.n	800171a <ProcessData+0x36>
		Error_Handler();
 8001716:	f000 f8c5 	bl	80018a4 <Error_Handler>
	}

	// Write data into the register using a for loop
	for (int i = 1; i < NumReg + 1; i++) {
 800171a:	2301      	movs	r3, #1
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	e00f      	b.n	8001740 <ProcessData+0x5c>
		Registers[StartReg++] = RxData[i + 1];
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3301      	adds	r3, #1
 8001724:	4a17      	ldr	r2, [pc, #92]	; (8001784 <ProcessData+0xa0>)
 8001726:	5cd0      	ldrb	r0, [r2, r3]
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <ProcessData+0xa4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	4916      	ldr	r1, [pc, #88]	; (8001788 <ProcessData+0xa4>)
 8001730:	600a      	str	r2, [r1, #0]
 8001732:	b281      	uxth	r1, r0
 8001734:	4a18      	ldr	r2, [pc, #96]	; (8001798 <ProcessData+0xb4>)
 8001736:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 1; i < NumReg + 1; i++) {
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3301      	adds	r3, #1
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <ProcessData+0xac>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	429a      	cmp	r2, r3
 8001748:	ddea      	ble.n	8001720 <ProcessData+0x3c>
	}

	// If the PWM is higher than 0 but the motor is not turning then startup
	if ( Registers[PWMReg] > 0 && Registers[RPMReg] == 0) {
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <ProcessData+0xb4>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <ProcessData+0x82>
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <ProcessData+0xb4>)
 8001754:	88db      	ldrh	r3, [r3, #6]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d105      	bne.n	8001766 <ProcessData+0x82>
		StartupSequence(Registers[DirReg]);
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <ProcessData+0xb4>)
 800175c:	885b      	ldrh	r3, [r3, #2]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fbeb 	bl	8000f3c <StartupSequence>
	}

	// If the PWM is 0 but the motor is still turning shutdown
	if ( Registers[PWMReg] == 0 && Registers[RPMReg] > 0 ) {
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <ProcessData+0xb4>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
		//StopSequence();
	}

	// Call some functions
	ChangePWM(); 				// Update PWM values
 800176c:	f7ff fd06 	bl	800117c <ChangePWM>
	memset(RxData, 0, RxSize); 	// Empty the RxData array
 8001770:	2206      	movs	r2, #6
 8001772:	2100      	movs	r1, #0
 8001774:	4803      	ldr	r0, [pc, #12]	; (8001784 <ProcessData+0xa0>)
 8001776:	f006 fae4 	bl	8007d42 <memset>

}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200002d8 	.word	0x200002d8
 8001788:	200002e8 	.word	0x200002e8
 800178c:	200002d5 	.word	0x200002d5
 8001790:	200002ec 	.word	0x200002ec
 8001794:	200002f0 	.word	0x200002f0
 8001798:	200002e0 	.word	0x200002e0

0800179c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a0:	f000 fd74 	bl	800228c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a4:	f000 f814 	bl	80017d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a8:	f7ff fdde 	bl	8001368 <MX_GPIO_Init>
  MX_TIM1_Init();
 80017ac:	f000 fa5e 	bl	8001c6c <MX_TIM1_Init>
  MX_TIM2_Init();
 80017b0:	f000 fb16 	bl	8001de0 <MX_TIM2_Init>
  MX_TIM9_Init();
 80017b4:	f000 fbb4 	bl	8001f20 <MX_TIM9_Init>
  MX_I2C1_Init();
 80017b8:	f7ff fe20 	bl	80013fc <MX_I2C1_Init>
  MX_ADC1_Init();
 80017bc:	f7ff fd1a 	bl	80011f4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80017c0:	f000 fb58 	bl	8001e74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_I2C_EnableListen_IT (&hi2c1);
 80017c4:	4801      	ldr	r0, [pc, #4]	; (80017cc <main+0x30>)
 80017c6:	f001 fe6d 	bl	80034a4 <HAL_I2C_EnableListen_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <main+0x2e>
 80017cc:	200002f4 	.word	0x200002f4

080017d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b094      	sub	sp, #80	; 0x50
 80017d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d6:	f107 0320 	add.w	r3, r7, #32
 80017da:	2230      	movs	r2, #48	; 0x30
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 faaf 	bl	8007d42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <SystemClock_Config+0xcc>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	4a27      	ldr	r2, [pc, #156]	; (800189c <SystemClock_Config+0xcc>)
 80017fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001802:	6413      	str	r3, [r2, #64]	; 0x40
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <SystemClock_Config+0xcc>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <SystemClock_Config+0xd0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <SystemClock_Config+0xd0>)
 800181a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <SystemClock_Config+0xd0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800182c:	2301      	movs	r3, #1
 800182e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001836:	2302      	movs	r3, #2
 8001838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800183a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800183e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001840:	2319      	movs	r3, #25
 8001842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001844:	23c0      	movs	r3, #192	; 0xc0
 8001846:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001848:	2302      	movs	r3, #2
 800184a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800184c:	2304      	movs	r3, #4
 800184e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001850:	f107 0320 	add.w	r3, r7, #32
 8001854:	4618      	mov	r0, r3
 8001856:	f003 fae5 	bl	8004e24 <HAL_RCC_OscConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001860:	f000 f820 	bl	80018a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001864:	230f      	movs	r3, #15
 8001866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001868:	2302      	movs	r3, #2
 800186a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2103      	movs	r1, #3
 8001882:	4618      	mov	r0, r3
 8001884:	f003 fd46 	bl	8005314 <HAL_RCC_ClockConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800188e:	f000 f809 	bl	80018a4 <Error_Handler>
  }
}
 8001892:	bf00      	nop
 8001894:	3750      	adds	r7, #80	; 0x50
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40007000 	.word	0x40007000

080018a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ac:	e7fe      	b.n	80018ac <Error_Handler+0x8>
	...

080018b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_MspInit+0x4c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <HAL_MspInit+0x4c>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c4:	6453      	str	r3, [r2, #68]	; 0x44
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_MspInit+0x4c>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_MspInit+0x4c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <HAL_MspInit+0x4c>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_MspInit+0x4c>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <NMI_Handler+0x4>

08001906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler+0x4>

08001912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>

0800191e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194c:	f000 fcf0 	bl	8002330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <ADC_IRQHandler+0x10>)
 800195a:	f000 fd4c 	bl	80023f6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000028c 	.word	0x2000028c

08001968 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	if ( (TIM9->SR & TIM_SR_CC2IF) >= 1) { // If the CC2IF is set it means a input capture has happened
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <TIM1_BRK_TIM9_IRQHandler+0xac>)
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d038      	beq.n	80019ea <TIM1_BRK_TIM9_IRQHandler+0x82>

		Total -= RPM[i];
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a27      	ldr	r2, [pc, #156]	; (8001a1c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 800197e:	7812      	ldrb	r2, [r2, #0]
 8001980:	4611      	mov	r1, r2
 8001982:	4a27      	ldr	r2, [pc, #156]	; (8001a20 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001984:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	4a23      	ldr	r2, [pc, #140]	; (8001a18 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 800198c:	6013      	str	r3, [r2, #0]
		RPM[i] = RPMConst / (TIM9->CCR2);
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <TIM1_BRK_TIM9_IRQHandler+0xac>)
 8001994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001996:	fbb2 f1f3 	udiv	r1, r2, r3
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	b289      	uxth	r1, r1
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 80019a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Total += RPM[i];
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 80019b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a16      	ldr	r2, [pc, #88]	; (8001a18 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 80019be:	6013      	str	r3, [r2, #0]

		i++;
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 80019ca:	701a      	strb	r2, [r3, #0]

		if ( i > AvgSize ) {
			i = 0;
		}

		Registers[RPMReg] = Total / AvgSize;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80019d6:	80da      	strh	r2, [r3, #6]

		//Registers[RPMReg] = RPMConst / (TIM9->CCR2);

		// If maximum RPM is exceeded -> shutdown
		if ( Registers[RPMReg] > MaximumRPM ) {
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80019da:	88db      	ldrh	r3, [r3, #6]
 80019dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d90e      	bls.n	8001a02 <TIM1_BRK_TIM9_IRQHandler+0x9a>
			StopSequence();
 80019e4:	f7ff fb6a 	bl	80010bc <StopSequence>
 80019e8:	e00b      	b.n	8001a02 <TIM1_BRK_TIM9_IRQHandler+0x9a>
		}
	} else {
		Registers[RPMReg] = 0; // If the CC2IF was not set it means the timer has overflowed and the motor is thus stationary
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	80da      	strh	r2, [r3, #6]
		Total = 0;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
		memset(RPM, 0, AvgSize * 2);
 80019f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019fa:	2100      	movs	r1, #0
 80019fc:	4808      	ldr	r0, [pc, #32]	; (8001a20 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 80019fe:	f006 f9a0 	bl	8007d42 <memset>
	}


  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a02:	480a      	ldr	r0, [pc, #40]	; (8001a2c <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 8001a04:	f004 fac2 	bl	8005f8c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001a08:	4809      	ldr	r0, [pc, #36]	; (8001a30 <TIM1_BRK_TIM9_IRQHandler+0xc8>)
 8001a0a:	f004 fabf 	bl	8005f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40014000 	.word	0x40014000
 8001a18:	20000348 	.word	0x20000348
 8001a1c:	2000054c 	.word	0x2000054c
 8001a20:	2000034c 	.word	0x2000034c
 8001a24:	20000288 	.word	0x20000288
 8001a28:	200002e0 	.word	0x200002e0
 8001a2c:	20000554 	.word	0x20000554
 8001a30:	2000062c 	.word	0x2000062c

08001a34 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	PrepareCommutation (Registers[DirReg]); // Set next Commutation states
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <TIM1_TRG_COM_TIM11_IRQHandler+0x28>)
 8001a3a:	885b      	ldrh	r3, [r3, #2]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fa38 	bl	8000eb4 <PrepareCommutation>

	TIM1->SR &= ~TIM_SR_COMIF; 				// Reset COMIF in SR register
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <TIM1_TRG_COM_TIM11_IRQHandler+0x2c>)
 8001a4a:	f023 0320 	bic.w	r3, r3, #32
 8001a4e:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 8001a52:	f004 fa9b 	bl	8005f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200002e0 	.word	0x200002e0
 8001a60:	40010000 	.word	0x40010000
 8001a64:	20000554 	.word	0x20000554

08001a68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	// Reset Timer 9 counter.
	TIM9->CNT = 0x0;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <TIM2_IRQHandler+0x20>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24

	// Set COMG bit in EGR
	TIM1->EGR |= TIM_EGR_COMG;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <TIM2_IRQHandler+0x24>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <TIM2_IRQHandler+0x24>)
 8001a78:	f043 0320 	orr.w	r3, r3, #32
 8001a7c:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a7e:	4804      	ldr	r0, [pc, #16]	; (8001a90 <TIM2_IRQHandler+0x28>)
 8001a80:	f004 fa84 	bl	8005f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40014000 	.word	0x40014000
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	2000059c 	.word	0x2000059c

08001a94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <I2C1_EV_IRQHandler+0x10>)
 8001a9a:	f001 fd39 	bl	8003510 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200002f4 	.word	0x200002f4

08001aa8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <I2C1_ER_IRQHandler+0x10>)
 8001aae:	f001 fe82 	bl	80037b6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200002f4 	.word	0x200002f4

08001abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return 1;
 8001ac0:	2301      	movs	r3, #1
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_kill>:

int _kill(int pid, int sig)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ad6:	f006 f987 	bl	8007de8 <__errno>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2216      	movs	r2, #22
 8001ade:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_exit>:

void _exit (int status)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ffe7 	bl	8001acc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001afe:	e7fe      	b.n	8001afe <_exit+0x12>

08001b00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e00a      	b.n	8001b28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b12:	f3af 8000 	nop.w
 8001b16:	4601      	mov	r1, r0
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	60ba      	str	r2, [r7, #8]
 8001b1e:	b2ca      	uxtb	r2, r1
 8001b20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	dbf0      	blt.n	8001b12 <_read+0x12>
  }

  return len;
 8001b30:	687b      	ldr	r3, [r7, #4]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	e009      	b.n	8001b60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	60ba      	str	r2, [r7, #8]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	dbf1      	blt.n	8001b4c <_write+0x12>
  }
  return len;
 8001b68:	687b      	ldr	r3, [r7, #4]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_close>:

int _close(int file)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <_isatty>:

int _isatty(int file)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <_sbrk+0x5c>)
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <_sbrk+0x60>)
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <_sbrk+0x64>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <_sbrk+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d207      	bcs.n	8001c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c0c:	f006 f8ec 	bl	8007de8 <__errno>
 8001c10:	4603      	mov	r3, r0
 8001c12:	220c      	movs	r2, #12
 8001c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	e009      	b.n	8001c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <_sbrk+0x64>)
 8001c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20020000 	.word	0x20020000
 8001c3c:	00000400 	.word	0x00000400
 8001c40:	20000550 	.word	0x20000550
 8001c44:	200007c8 	.word	0x200007c8

08001c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <SystemInit+0x20>)
 8001c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <SystemInit+0x20>)
 8001c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b096      	sub	sp, #88	; 0x58
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c72:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
 8001c80:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
 8001c9c:	615a      	str	r2, [r3, #20]
 8001c9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f006 f84b 	bl	8007d42 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cac:	4b4a      	ldr	r3, [pc, #296]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001cae:	4a4b      	ldr	r2, [pc, #300]	; (8001ddc <MX_TIM1_Init+0x170>)
 8001cb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cb2:	4b49      	ldr	r3, [pc, #292]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb8:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 8001cbe:	4b46      	ldr	r3, [pc, #280]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001cc0:	f240 727f 	movw	r2, #1919	; 0x77f
 8001cc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc6:	4b44      	ldr	r3, [pc, #272]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ccc:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd2:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cd8:	483f      	ldr	r0, [pc, #252]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001cda:	f003 fcfb 	bl	80056d4 <HAL_TIM_Base_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001ce4:	f7ff fdde 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ce8:	483b      	ldr	r0, [pc, #236]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001cea:	f003 fdd4 	bl	8005896 <HAL_TIM_PWM_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001cf4:	f7ff fdd6 	bl	80018a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001d00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d04:	4619      	mov	r1, r3
 8001d06:	4834      	ldr	r0, [pc, #208]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001d08:	f004 fba6 	bl	8006458 <HAL_TIM_SlaveConfigSynchro>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001d12:	f7ff fdc7 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d22:	4619      	mov	r1, r3
 8001d24:	482c      	ldr	r0, [pc, #176]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001d26:	f005 f9cd 	bl	80070c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001d30:	f7ff fdb8 	bl	80018a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d34:	2360      	movs	r3, #96	; 0x60
 8001d36:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d50:	f107 0320 	add.w	r3, r7, #32
 8001d54:	2200      	movs	r2, #0
 8001d56:	4619      	mov	r1, r3
 8001d58:	481f      	ldr	r0, [pc, #124]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001d5a:	f004 fabb 	bl	80062d4 <HAL_TIM_PWM_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001d64:	f7ff fd9e 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d68:	f107 0320 	add.w	r3, r7, #32
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4819      	ldr	r0, [pc, #100]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001d72:	f004 faaf 	bl	80062d4 <HAL_TIM_PWM_ConfigChannel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001d7c:	f7ff fd92 	bl	80018a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d80:	f107 0320 	add.w	r3, r7, #32
 8001d84:	2208      	movs	r2, #8
 8001d86:	4619      	mov	r1, r3
 8001d88:	4813      	ldr	r0, [pc, #76]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001d8a:	f004 faa3 	bl	80062d4 <HAL_TIM_PWM_ConfigChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001d94:	f7ff fd86 	bl	80018a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001db6:	463b      	mov	r3, r7
 8001db8:	4619      	mov	r1, r3
 8001dba:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001dbc:	f005 f9f0 	bl	80071a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8001dc6:	f7ff fd6d 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dca:	4803      	ldr	r0, [pc, #12]	; (8001dd8 <MX_TIM1_Init+0x16c>)
 8001dcc:	f000 f9d8 	bl	8002180 <HAL_TIM_MspPostInit>

}
 8001dd0:	bf00      	nop
 8001dd2:	3758      	adds	r7, #88	; 0x58
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000554 	.word	0x20000554
 8001ddc:	40010000 	.word	0x40010000

08001de0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001de6:	f107 0308 	add.w	r3, r7, #8
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df4:	463b      	mov	r3, r7
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <MX_TIM2_Init+0x90>)
 8001dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <MX_TIM2_Init+0x90>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_TIM2_Init+0x90>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <MX_TIM2_Init+0x90>)
 8001e12:	f04f 32ff 	mov.w	r2, #4294967295
 8001e16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e18:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <MX_TIM2_Init+0x90>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <MX_TIM2_Init+0x90>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001e34:	f107 0308 	add.w	r3, r7, #8
 8001e38:	4619      	mov	r1, r3
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <MX_TIM2_Init+0x90>)
 8001e3c:	f004 ffe0 	bl	8006e00 <HAL_TIMEx_HallSensor_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e46:	f7ff fd2d 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001e4a:	2350      	movs	r3, #80	; 0x50
 8001e4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e52:	463b      	mov	r3, r7
 8001e54:	4619      	mov	r1, r3
 8001e56:	4806      	ldr	r0, [pc, #24]	; (8001e70 <MX_TIM2_Init+0x90>)
 8001e58:	f005 f934 	bl	80070c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001e62:	f7ff fd1f 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000059c 	.word	0x2000059c

08001e74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7a:	f107 0320 	add.w	r3, r7, #32
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]
 8001e92:	615a      	str	r2, [r3, #20]
 8001e94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <MX_TIM3_Init+0xa4>)
 8001e98:	4a20      	ldr	r2, [pc, #128]	; (8001f1c <MX_TIM3_Init+0xa8>)
 8001e9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <MX_TIM3_Init+0xa4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <MX_TIM3_Init+0xa4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 959;
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <MX_TIM3_Init+0xa4>)
 8001eaa:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001eae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <MX_TIM3_Init+0xa4>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <MX_TIM3_Init+0xa4>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ebc:	4816      	ldr	r0, [pc, #88]	; (8001f18 <MX_TIM3_Init+0xa4>)
 8001ebe:	f003 fcea 	bl	8005896 <HAL_TIM_PWM_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001ec8:	f7ff fcec 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ecc:	2320      	movs	r3, #32
 8001ece:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ed4:	f107 0320 	add.w	r3, r7, #32
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480f      	ldr	r0, [pc, #60]	; (8001f18 <MX_TIM3_Init+0xa4>)
 8001edc:	f005 f8f2 	bl	80070c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001ee6:	f7ff fcdd 	bl	80018a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eea:	2360      	movs	r3, #96	; 0x60
 8001eec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	2200      	movs	r2, #0
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_TIM3_Init+0xa4>)
 8001f02:	f004 f9e7 	bl	80062d4 <HAL_TIM_PWM_ConfigChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001f0c:	f7ff fcca 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200005e4 	.word	0x200005e4
 8001f1c:	40000400 	.word	0x40000400

08001f20 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f26:	463b      	mov	r3, r7
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <MX_TIM9_Init+0x78>)
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <MX_TIM9_Init+0x7c>)
 8001f36:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1499;
 8001f38:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <MX_TIM9_Init+0x78>)
 8001f3a:	f240 52db 	movw	r2, #1499	; 0x5db
 8001f3e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <MX_TIM9_Init+0x78>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 63999;
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <MX_TIM9_Init+0x78>)
 8001f48:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001f4c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <MX_TIM9_Init+0x78>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <MX_TIM9_Init+0x78>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8001f5a:	480f      	ldr	r0, [pc, #60]	; (8001f98 <MX_TIM9_Init+0x78>)
 8001f5c:	f003 fdfe 	bl	8005b5c <HAL_TIM_IC_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001f66:	f7ff fc9d 	bl	80018a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 8001f76:	2302      	movs	r3, #2
 8001f78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <MX_TIM9_Init+0x78>)
 8001f82:	f004 f90b 	bl	800619c <HAL_TIM_IC_ConfigChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 8001f8c:	f7ff fc8a 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	2000062c 	.word	0x2000062c
 8001f9c:	40014000 	.word	0x40014000

08001fa0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <HAL_TIM_Base_MspInit+0x58>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d11d      	bne.n	8001fee <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_TIM_Base_MspInit+0x5c>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <HAL_TIM_Base_MspInit+0x5c>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_TIM_Base_MspInit+0x5c>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2018      	movs	r0, #24
 8001fd4:	f000 fe51 	bl	8002c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001fd8:	2018      	movs	r0, #24
 8001fda:	f000 fe6a 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	201a      	movs	r0, #26
 8001fe4:	f000 fe49 	bl	8002c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001fe8:	201a      	movs	r0, #26
 8001fea:	f000 fe62 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40023800 	.word	0x40023800

08002000 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002020:	d133      	bne.n	800208a <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a1a      	ldr	r2, [pc, #104]	; (8002094 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a13      	ldr	r2, [pc, #76]	; (8002094 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800205a:	2307      	movs	r3, #7
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002062:	2301      	movs	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800206a:	2301      	movs	r3, #1
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	4808      	ldr	r0, [pc, #32]	; (8002098 <HAL_TIMEx_HallSensor_MspInit+0x98>)
 8002076:	f000 fe67 	bl	8002d48 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	201c      	movs	r0, #28
 8002080:	f000 fdfb 	bl	8002c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002084:	201c      	movs	r0, #28
 8002086:	f000 fe14 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	40020000 	.word	0x40020000

0800209c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d10d      	bne.n	80020ca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_TIM_PWM_MspInit+0x40>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_TIM_PWM_MspInit+0x40>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_TIM_PWM_MspInit+0x40>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40000400 	.word	0x40000400
 80020dc:	40023800 	.word	0x40023800

080020e0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM9)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_TIM_IC_MspInit+0x94>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d133      	bne.n	800216a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <HAL_TIM_IC_MspInit+0x98>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <HAL_TIM_IC_MspInit+0x98>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_TIM_IC_MspInit+0x98>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_TIM_IC_MspInit+0x98>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a14      	ldr	r2, [pc, #80]	; (8002178 <HAL_TIM_IC_MspInit+0x98>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_TIM_IC_MspInit+0x98>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PA3     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800213a:	2308      	movs	r3, #8
 800213c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002142:	2301      	movs	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800214a:	2303      	movs	r3, #3
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	4619      	mov	r1, r3
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <HAL_TIM_IC_MspInit+0x9c>)
 8002156:	f000 fdf7 	bl	8002d48 <HAL_GPIO_Init>

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	2018      	movs	r0, #24
 8002160:	f000 fd8b 	bl	8002c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002164:	2018      	movs	r0, #24
 8002166:	f000 fda4 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800216a:	bf00      	nop
 800216c:	3728      	adds	r7, #40	; 0x28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40014000 	.word	0x40014000
 8002178:	40023800 	.word	0x40023800
 800217c:	40020000 	.word	0x40020000

08002180 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a22      	ldr	r2, [pc, #136]	; (8002228 <HAL_TIM_MspPostInit+0xa8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d13d      	bne.n	800221e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_TIM_MspPostInit+0xac>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a20      	ldr	r2, [pc, #128]	; (800222c <HAL_TIM_MspPostInit+0xac>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <HAL_TIM_MspPostInit+0xac>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b1a      	ldr	r3, [pc, #104]	; (800222c <HAL_TIM_MspPostInit+0xac>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_TIM_MspPostInit+0xac>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_TIM_MspPostInit+0xac>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80021de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021ec:	2301      	movs	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4619      	mov	r1, r3
 80021f6:	480e      	ldr	r0, [pc, #56]	; (8002230 <HAL_TIM_MspPostInit+0xb0>)
 80021f8:	f000 fda6 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80021fc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800220e:	2301      	movs	r3, #1
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4806      	ldr	r0, [pc, #24]	; (8002234 <HAL_TIM_MspPostInit+0xb4>)
 800221a:	f000 fd95 	bl	8002d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	; 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40010000 	.word	0x40010000
 800222c:	40023800 	.word	0x40023800
 8002230:	40020400 	.word	0x40020400
 8002234:	40020000 	.word	0x40020000

08002238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002270 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800223c:	480d      	ldr	r0, [pc, #52]	; (8002274 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800223e:	490e      	ldr	r1, [pc, #56]	; (8002278 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002240:	4a0e      	ldr	r2, [pc, #56]	; (800227c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002244:	e002      	b.n	800224c <LoopCopyDataInit>

08002246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224a:	3304      	adds	r3, #4

0800224c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800224c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002250:	d3f9      	bcc.n	8002246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002252:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002254:	4c0b      	ldr	r4, [pc, #44]	; (8002284 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002258:	e001      	b.n	800225e <LoopFillZerobss>

0800225a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800225c:	3204      	adds	r2, #4

0800225e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002260:	d3fb      	bcc.n	800225a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002262:	f7ff fcf1 	bl	8001c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002266:	f005 fdc5 	bl	8007df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800226a:	f7ff fa97 	bl	800179c <main>
  bx  lr    
 800226e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002270:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002278:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 800227c:	08009f9c 	.word	0x08009f9c
  ldr r2, =_sbss
 8002280:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8002284:	200007c4 	.word	0x200007c4

08002288 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002288:	e7fe      	b.n	8002288 <DMA1_Stream0_IRQHandler>
	...

0800228c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <HAL_Init+0x40>)
 8002296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800229a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_Init+0x40>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_Init+0x40>)
 80022a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_Init+0x40>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_Init+0x40>)
 80022ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b4:	2003      	movs	r0, #3
 80022b6:	f000 fcd5 	bl	8002c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ba:	200f      	movs	r0, #15
 80022bc:	f000 f808 	bl	80022d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c0:	f7ff faf6 	bl	80018b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023c00 	.word	0x40023c00

080022d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_InitTick+0x54>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_InitTick+0x58>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fced 	bl	8002cce <HAL_SYSTICK_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00e      	b.n	800231c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d80a      	bhi.n	800231a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002304:	2200      	movs	r2, #0
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f000 fcb5 	bl	8002c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <HAL_InitTick+0x5c>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000090 	.word	0x20000090
 8002328:	20000098 	.word	0x20000098
 800232c:	20000094 	.word	0x20000094

08002330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_IncTick+0x20>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_IncTick+0x24>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_IncTick+0x24>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000098 	.word	0x20000098
 8002354:	20000674 	.word	0x20000674

08002358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return uwTick;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_GetTick+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000674 	.word	0x20000674

08002370 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e033      	b.n	80023ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe ff82 	bl	8001298 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d118      	bne.n	80023e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023b6:	f023 0302 	bic.w	r3, r3, #2
 80023ba:	f043 0202 	orr.w	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fa78 	bl	80028b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	f043 0201 	orr.w	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
 80023de:	e001      	b.n	80023e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d049      	beq.n	80024c0 <HAL_ADC_IRQHandler+0xca>
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d046      	beq.n	80024c0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d12b      	bne.n	80024b0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	d127      	bne.n	80024b0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d006      	beq.n	800247c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002478:	2b00      	cmp	r3, #0
 800247a:	d119      	bne.n	80024b0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0220 	bic.w	r2, r2, #32
 800248a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f8b0 	bl	8002616 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f06f 0212 	mvn.w	r2, #18
 80024be:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d057      	beq.n	8002586 <HAL_ADC_IRQHandler+0x190>
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d054      	beq.n	8002586 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d139      	bne.n	8002576 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800251a:	2b00      	cmp	r3, #0
 800251c:	d12b      	bne.n	8002576 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002528:	2b00      	cmp	r3, #0
 800252a:	d124      	bne.n	8002576 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11d      	bne.n	8002576 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800253e:	2b00      	cmp	r3, #0
 8002540:	d119      	bne.n	8002576 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002550:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d105      	bne.n	8002576 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fa9a 	bl	8002ab0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 020c 	mvn.w	r2, #12
 8002584:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002594:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d017      	beq.n	80025cc <HAL_ADC_IRQHandler+0x1d6>
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d014      	beq.n	80025cc <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d10d      	bne.n	80025cc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f834 	bl	800262a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f06f 0201 	mvn.w	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025da:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d015      	beq.n	800260e <HAL_ADC_IRQHandler+0x218>
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d012      	beq.n	800260e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	f043 0202 	orr.w	r2, r3, #2
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0220 	mvn.w	r2, #32
 80025fc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f81d 	bl	800263e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0220 	mvn.w	r2, #32
 800260c:	601a      	str	r2, [r3, #0]
  }
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1c>
 800266c:	2302      	movs	r3, #2
 800266e:	e113      	b.n	8002898 <HAL_ADC_ConfigChannel+0x244>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b09      	cmp	r3, #9
 800267e:	d925      	bls.n	80026cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68d9      	ldr	r1, [r3, #12]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	3b1e      	subs	r3, #30
 8002696:	2207      	movs	r2, #7
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43da      	mvns	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	400a      	ands	r2, r1
 80026a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68d9      	ldr	r1, [r3, #12]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	4603      	mov	r3, r0
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4403      	add	r3, r0
 80026be:	3b1e      	subs	r3, #30
 80026c0:	409a      	lsls	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	e022      	b.n	8002712 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6919      	ldr	r1, [r3, #16]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	2207      	movs	r2, #7
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	400a      	ands	r2, r1
 80026ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6919      	ldr	r1, [r3, #16]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	4618      	mov	r0, r3
 8002702:	4603      	mov	r3, r0
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4403      	add	r3, r0
 8002708:	409a      	lsls	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b06      	cmp	r3, #6
 8002718:	d824      	bhi.n	8002764 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	3b05      	subs	r3, #5
 800272c:	221f      	movs	r2, #31
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	400a      	ands	r2, r1
 800273a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	4618      	mov	r0, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	3b05      	subs	r3, #5
 8002756:	fa00 f203 	lsl.w	r2, r0, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	635a      	str	r2, [r3, #52]	; 0x34
 8002762:	e04c      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b0c      	cmp	r3, #12
 800276a:	d824      	bhi.n	80027b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	3b23      	subs	r3, #35	; 0x23
 800277e:	221f      	movs	r2, #31
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43da      	mvns	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	400a      	ands	r2, r1
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	4618      	mov	r0, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	3b23      	subs	r3, #35	; 0x23
 80027a8:	fa00 f203 	lsl.w	r2, r0, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
 80027b4:	e023      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	3b41      	subs	r3, #65	; 0x41
 80027c8:	221f      	movs	r2, #31
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	400a      	ands	r2, r1
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	4618      	mov	r0, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	3b41      	subs	r3, #65	; 0x41
 80027f2:	fa00 f203 	lsl.w	r2, r0, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027fe:	4b29      	ldr	r3, [pc, #164]	; (80028a4 <HAL_ADC_ConfigChannel+0x250>)
 8002800:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a28      	ldr	r2, [pc, #160]	; (80028a8 <HAL_ADC_ConfigChannel+0x254>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d10f      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1d8>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b12      	cmp	r3, #18
 8002812:	d10b      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_ADC_ConfigChannel+0x254>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d12b      	bne.n	800288e <HAL_ADC_ConfigChannel+0x23a>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <HAL_ADC_ConfigChannel+0x258>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d003      	beq.n	8002848 <HAL_ADC_ConfigChannel+0x1f4>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b11      	cmp	r3, #17
 8002846:	d122      	bne.n	800288e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a11      	ldr	r2, [pc, #68]	; (80028ac <HAL_ADC_ConfigChannel+0x258>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d111      	bne.n	800288e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_ADC_ConfigChannel+0x25c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_ADC_ConfigChannel+0x260>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	0c9a      	lsrs	r2, r3, #18
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002880:	e002      	b.n	8002888 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3b01      	subs	r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f9      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40012300 	.word	0x40012300
 80028a8:	40012000 	.word	0x40012000
 80028ac:	10000012 	.word	0x10000012
 80028b0:	20000090 	.word	0x20000090
 80028b4:	431bde83 	.word	0x431bde83

080028b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c0:	4b79      	ldr	r3, [pc, #484]	; (8002aa8 <ADC_Init+0x1f0>)
 80028c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	431a      	orrs	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	021a      	lsls	r2, r3, #8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002932:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6899      	ldr	r1, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	4a58      	ldr	r2, [pc, #352]	; (8002aac <ADC_Init+0x1f4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d022      	beq.n	8002996 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800295e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6899      	ldr	r1, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	e00f      	b.n	80029b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0202 	bic.w	r2, r2, #2
 80029c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6899      	ldr	r1, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7e1b      	ldrb	r3, [r3, #24]
 80029d0:	005a      	lsls	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01b      	beq.n	8002a1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6859      	ldr	r1, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	035a      	lsls	r2, r3, #13
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	e007      	b.n	8002a2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	051a      	lsls	r2, r3, #20
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6899      	ldr	r1, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a6e:	025a      	lsls	r2, r3, #9
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6899      	ldr	r1, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	029a      	lsls	r2, r3, #10
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	609a      	str	r2, [r3, #8]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40012300 	.word	0x40012300
 8002aac:	0f000001 	.word	0x0f000001

08002ab0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af6:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	60d3      	str	r3, [r2, #12]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <__NVIC_GetPriorityGrouping+0x18>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	f003 0307 	and.w	r3, r3, #7
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	db0b      	blt.n	8002b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	f003 021f 	and.w	r2, r3, #31
 8002b40:	4907      	ldr	r1, [pc, #28]	; (8002b60 <__NVIC_EnableIRQ+0x38>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2001      	movs	r0, #1
 8002b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000e100 	.word	0xe000e100

08002b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	db0a      	blt.n	8002b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	490c      	ldr	r1, [pc, #48]	; (8002bb0 <__NVIC_SetPriority+0x4c>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	440b      	add	r3, r1
 8002b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b8c:	e00a      	b.n	8002ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4908      	ldr	r1, [pc, #32]	; (8002bb4 <__NVIC_SetPriority+0x50>)
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	3b04      	subs	r3, #4
 8002b9c:	0112      	lsls	r2, r2, #4
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	761a      	strb	r2, [r3, #24]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000e100 	.word	0xe000e100
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	; 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f1c3 0307 	rsb	r3, r3, #7
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	bf28      	it	cs
 8002bd6:	2304      	movcs	r3, #4
 8002bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d902      	bls.n	8002be8 <NVIC_EncodePriority+0x30>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3b03      	subs	r3, #3
 8002be6:	e000      	b.n	8002bea <NVIC_EncodePriority+0x32>
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	43d9      	mvns	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	4313      	orrs	r3, r2
         );
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3724      	adds	r7, #36	; 0x24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c30:	d301      	bcc.n	8002c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c32:	2301      	movs	r3, #1
 8002c34:	e00f      	b.n	8002c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c36:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <SysTick_Config+0x40>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3e:	210f      	movs	r1, #15
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295
 8002c44:	f7ff ff8e 	bl	8002b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <SysTick_Config+0x40>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4e:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <SysTick_Config+0x40>)
 8002c50:	2207      	movs	r2, #7
 8002c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	e000e010 	.word	0xe000e010

08002c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff ff29 	bl	8002ac4 <__NVIC_SetPriorityGrouping>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c8c:	f7ff ff3e 	bl	8002b0c <__NVIC_GetPriorityGrouping>
 8002c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f7ff ff8e 	bl	8002bb8 <NVIC_EncodePriority>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff5d 	bl	8002b64 <__NVIC_SetPriority>
}
 8002caa:	bf00      	nop
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	4603      	mov	r3, r0
 8002cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff31 	bl	8002b28 <__NVIC_EnableIRQ>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff ffa2 	bl	8002c20 <SysTick_Config>
 8002cdc:	4603      	mov	r3, r0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d004      	beq.n	8002d04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2280      	movs	r2, #128	; 0x80
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e00c      	b.n	8002d1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2205      	movs	r2, #5
 8002d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d38:	b2db      	uxtb	r3, r3
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e159      	b.n	8003018 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	f040 8148 	bne.w	8003012 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d005      	beq.n	8002d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d130      	bne.n	8002dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 0201 	and.w	r2, r3, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d017      	beq.n	8002e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d123      	bne.n	8002e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	08da      	lsrs	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3208      	adds	r2, #8
 8002e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	08da      	lsrs	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3208      	adds	r2, #8
 8002e86:	69b9      	ldr	r1, [r7, #24]
 8002e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	2203      	movs	r2, #3
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0203 	and.w	r2, r3, #3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80a2 	beq.w	8003012 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b57      	ldr	r3, [pc, #348]	; (8003030 <HAL_GPIO_Init+0x2e8>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	4a56      	ldr	r2, [pc, #344]	; (8003030 <HAL_GPIO_Init+0x2e8>)
 8002ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002edc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ede:	4b54      	ldr	r3, [pc, #336]	; (8003030 <HAL_GPIO_Init+0x2e8>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eea:	4a52      	ldr	r2, [pc, #328]	; (8003034 <HAL_GPIO_Init+0x2ec>)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	220f      	movs	r2, #15
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a49      	ldr	r2, [pc, #292]	; (8003038 <HAL_GPIO_Init+0x2f0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d019      	beq.n	8002f4a <HAL_GPIO_Init+0x202>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a48      	ldr	r2, [pc, #288]	; (800303c <HAL_GPIO_Init+0x2f4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_GPIO_Init+0x1fe>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a47      	ldr	r2, [pc, #284]	; (8003040 <HAL_GPIO_Init+0x2f8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00d      	beq.n	8002f42 <HAL_GPIO_Init+0x1fa>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a46      	ldr	r2, [pc, #280]	; (8003044 <HAL_GPIO_Init+0x2fc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <HAL_GPIO_Init+0x1f6>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a45      	ldr	r2, [pc, #276]	; (8003048 <HAL_GPIO_Init+0x300>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <HAL_GPIO_Init+0x1f2>
 8002f36:	2304      	movs	r3, #4
 8002f38:	e008      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f3a:	2307      	movs	r3, #7
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e004      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	f002 0203 	and.w	r2, r2, #3
 8002f52:	0092      	lsls	r2, r2, #2
 8002f54:	4093      	lsls	r3, r2
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f5c:	4935      	ldr	r1, [pc, #212]	; (8003034 <HAL_GPIO_Init+0x2ec>)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6a:	4b38      	ldr	r3, [pc, #224]	; (800304c <HAL_GPIO_Init+0x304>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f8e:	4a2f      	ldr	r2, [pc, #188]	; (800304c <HAL_GPIO_Init+0x304>)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f94:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_GPIO_Init+0x304>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb8:	4a24      	ldr	r2, [pc, #144]	; (800304c <HAL_GPIO_Init+0x304>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fbe:	4b23      	ldr	r3, [pc, #140]	; (800304c <HAL_GPIO_Init+0x304>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fe2:	4a1a      	ldr	r2, [pc, #104]	; (800304c <HAL_GPIO_Init+0x304>)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe8:	4b18      	ldr	r3, [pc, #96]	; (800304c <HAL_GPIO_Init+0x304>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800300c:	4a0f      	ldr	r2, [pc, #60]	; (800304c <HAL_GPIO_Init+0x304>)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3301      	adds	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b0f      	cmp	r3, #15
 800301c:	f67f aea2 	bls.w	8002d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3724      	adds	r7, #36	; 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	40013800 	.word	0x40013800
 8003038:	40020000 	.word	0x40020000
 800303c:	40020400 	.word	0x40020400
 8003040:	40020800 	.word	0x40020800
 8003044:	40020c00 	.word	0x40020c00
 8003048:	40021000 	.word	0x40021000
 800304c:	40013c00 	.word	0x40013c00

08003050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e12b      	b.n	80032ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fe f9ee 	bl	8001458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2224      	movs	r2, #36	; 0x24
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030b4:	f002 fae6 	bl	8005684 <HAL_RCC_GetPCLK1Freq>
 80030b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4a81      	ldr	r2, [pc, #516]	; (80032c4 <HAL_I2C_Init+0x274>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d807      	bhi.n	80030d4 <HAL_I2C_Init+0x84>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a80      	ldr	r2, [pc, #512]	; (80032c8 <HAL_I2C_Init+0x278>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	bf94      	ite	ls
 80030cc:	2301      	movls	r3, #1
 80030ce:	2300      	movhi	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e006      	b.n	80030e2 <HAL_I2C_Init+0x92>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a7d      	ldr	r2, [pc, #500]	; (80032cc <HAL_I2C_Init+0x27c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	bf94      	ite	ls
 80030dc:	2301      	movls	r3, #1
 80030de:	2300      	movhi	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0e7      	b.n	80032ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a78      	ldr	r2, [pc, #480]	; (80032d0 <HAL_I2C_Init+0x280>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0c9b      	lsrs	r3, r3, #18
 80030f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a6a      	ldr	r2, [pc, #424]	; (80032c4 <HAL_I2C_Init+0x274>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d802      	bhi.n	8003124 <HAL_I2C_Init+0xd4>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3301      	adds	r3, #1
 8003122:	e009      	b.n	8003138 <HAL_I2C_Init+0xe8>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	4a69      	ldr	r2, [pc, #420]	; (80032d4 <HAL_I2C_Init+0x284>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	099b      	lsrs	r3, r3, #6
 8003136:	3301      	adds	r3, #1
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	430b      	orrs	r3, r1
 800313e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800314a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	495c      	ldr	r1, [pc, #368]	; (80032c4 <HAL_I2C_Init+0x274>)
 8003154:	428b      	cmp	r3, r1
 8003156:	d819      	bhi.n	800318c <HAL_I2C_Init+0x13c>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e59      	subs	r1, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	fbb1 f3f3 	udiv	r3, r1, r3
 8003166:	1c59      	adds	r1, r3, #1
 8003168:	f640 73fc 	movw	r3, #4092	; 0xffc
 800316c:	400b      	ands	r3, r1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_I2C_Init+0x138>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1e59      	subs	r1, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003180:	3301      	adds	r3, #1
 8003182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003186:	e051      	b.n	800322c <HAL_I2C_Init+0x1dc>
 8003188:	2304      	movs	r3, #4
 800318a:	e04f      	b.n	800322c <HAL_I2C_Init+0x1dc>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d111      	bne.n	80031b8 <HAL_I2C_Init+0x168>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1e58      	subs	r0, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6859      	ldr	r1, [r3, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	440b      	add	r3, r1
 80031a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a6:	3301      	adds	r3, #1
 80031a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e012      	b.n	80031de <HAL_I2C_Init+0x18e>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1e58      	subs	r0, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	0099      	lsls	r1, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2C_Init+0x196>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e022      	b.n	800322c <HAL_I2C_Init+0x1dc>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10e      	bne.n	800320c <HAL_I2C_Init+0x1bc>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1e58      	subs	r0, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	440b      	add	r3, r1
 80031fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320a:	e00f      	b.n	800322c <HAL_I2C_Init+0x1dc>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1e58      	subs	r0, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	0099      	lsls	r1, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	6809      	ldr	r1, [r1, #0]
 8003230:	4313      	orrs	r3, r2
 8003232:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800325a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6911      	ldr	r1, [r2, #16]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68d2      	ldr	r2, [r2, #12]
 8003266:	4311      	orrs	r1, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	430b      	orrs	r3, r1
 800326e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	000186a0 	.word	0x000186a0
 80032c8:	001e847f 	.word	0x001e847f
 80032cc:	003d08ff 	.word	0x003d08ff
 80032d0:	431bde83 	.word	0x431bde83
 80032d4:	10624dd3 	.word	0x10624dd3

080032d8 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032f4:	2b28      	cmp	r3, #40	; 0x28
 80032f6:	d15b      	bne.n	80033b0 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e054      	b.n	80033b2 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8003312:	2302      	movs	r3, #2
 8003314:	e04d      	b.n	80033b2 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d007      	beq.n	800333c <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800334a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2229      	movs	r2, #41	; 0x29
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	88fa      	ldrh	r2, [r7, #6]
 800336c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80033aa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	e000      	b.n	80033b2 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80033b0:	2302      	movs	r3, #2
  }
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80033be:	b480      	push	{r7}
 80033c0:	b087      	sub	sp, #28
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	4613      	mov	r3, r2
 80033cc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033da:	2b28      	cmp	r3, #40	; 0x28
 80033dc:	d15b      	bne.n	8003496 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e054      	b.n	8003498 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e04d      	b.n	8003498 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b01      	cmp	r3, #1
 8003410:	d007      	beq.n	8003422 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003430:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	222a      	movs	r2, #42	; 0x2a
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	88fa      	ldrh	r2, [r7, #6]
 8003452:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003490:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
  }
}
 8003498:	4618      	mov	r0, r3
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d124      	bne.n	8003502 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2228      	movs	r2, #40	; 0x28
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d007      	beq.n	80034de <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034ec:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80034fc:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003502:	2302      	movs	r3, #2
  }
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003530:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003538:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	2b10      	cmp	r3, #16
 800353e:	d003      	beq.n	8003548 <HAL_I2C_EV_IRQHandler+0x38>
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	2b40      	cmp	r3, #64	; 0x40
 8003544:	f040 80b1 	bne.w	80036aa <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10d      	bne.n	800357e <HAL_I2C_EV_IRQHandler+0x6e>
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003568:	d003      	beq.n	8003572 <HAL_I2C_EV_IRQHandler+0x62>
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003570:	d101      	bne.n	8003576 <HAL_I2C_EV_IRQHandler+0x66>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_I2C_EV_IRQHandler+0x68>
 8003576:	2300      	movs	r3, #0
 8003578:	2b01      	cmp	r3, #1
 800357a:	f000 8114 	beq.w	80037a6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <HAL_I2C_EV_IRQHandler+0x90>
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f001 fc2a 	bl	8004dec <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fd34 	bl	8004006 <I2C_Master_SB>
 800359e:	e083      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d008      	beq.n	80035bc <HAL_I2C_EV_IRQHandler+0xac>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fdac 	bl	8004112 <I2C_Master_ADD10>
 80035ba:	e075      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_I2C_EV_IRQHandler+0xc8>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fdc8 	bl	8004166 <I2C_Master_ADDR>
 80035d6:	e067      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d036      	beq.n	8003650 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f0:	f000 80db 	beq.w	80037aa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00d      	beq.n	800361a <HAL_I2C_EV_IRQHandler+0x10a>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_I2C_EV_IRQHandler+0x10a>
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d103      	bne.n	800361a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f9ac 	bl	8003970 <I2C_MasterTransmit_TXE>
 8003618:	e046      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80c2 	beq.w	80037aa <HAL_I2C_EV_IRQHandler+0x29a>
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80bc 	beq.w	80037aa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003632:	7bbb      	ldrb	r3, [r7, #14]
 8003634:	2b21      	cmp	r3, #33	; 0x21
 8003636:	d103      	bne.n	8003640 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fa35 	bl	8003aa8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363e:	e0b4      	b.n	80037aa <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	2b40      	cmp	r3, #64	; 0x40
 8003644:	f040 80b1 	bne.w	80037aa <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 faa3 	bl	8003b94 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800364e:	e0ac      	b.n	80037aa <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365e:	f000 80a4 	beq.w	80037aa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <HAL_I2C_EV_IRQHandler+0x178>
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_I2C_EV_IRQHandler+0x178>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d103      	bne.n	8003688 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fb1b 	bl	8003cbc <I2C_MasterReceive_RXNE>
 8003686:	e00f      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 808b 	beq.w	80037aa <HAL_I2C_EV_IRQHandler+0x29a>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 8085 	beq.w	80037aa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fbc6 	bl	8003e32 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a6:	e080      	b.n	80037aa <HAL_I2C_EV_IRQHandler+0x29a>
 80036a8:	e07f      	b.n	80037aa <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	e007      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d011      	beq.n	80036fa <HAL_I2C_EV_IRQHandler+0x1ea>
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00c      	beq.n	80036fa <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80036f0:	69b9      	ldr	r1, [r7, #24]
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 ff86 	bl	8004604 <I2C_Slave_ADDR>
 80036f8:	e05a      	b.n	80037b0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_I2C_EV_IRQHandler+0x206>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 ffc0 	bl	8004694 <I2C_Slave_STOPF>
 8003714:	e04c      	b.n	80037b0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003716:	7bbb      	ldrb	r3, [r7, #14]
 8003718:	2b21      	cmp	r3, #33	; 0x21
 800371a:	d002      	beq.n	8003722 <HAL_I2C_EV_IRQHandler+0x212>
 800371c:	7bbb      	ldrb	r3, [r7, #14]
 800371e:	2b29      	cmp	r3, #41	; 0x29
 8003720:	d120      	bne.n	8003764 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00d      	beq.n	8003748 <HAL_I2C_EV_IRQHandler+0x238>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_I2C_EV_IRQHandler+0x238>
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d103      	bne.n	8003748 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fea1 	bl	8004488 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003746:	e032      	b.n	80037ae <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d02d      	beq.n	80037ae <HAL_I2C_EV_IRQHandler+0x29e>
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003758:	2b00      	cmp	r3, #0
 800375a:	d028      	beq.n	80037ae <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fed0 	bl	8004502 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003762:	e024      	b.n	80037ae <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00d      	beq.n	800378a <HAL_I2C_EV_IRQHandler+0x27a>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_I2C_EV_IRQHandler+0x27a>
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d103      	bne.n	800378a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fede 	bl	8004544 <I2C_SlaveReceive_RXNE>
 8003788:	e012      	b.n	80037b0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00d      	beq.n	80037b0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 ff0e 	bl	80045c0 <I2C_SlaveReceive_BTF>
 80037a4:	e004      	b.n	80037b0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80037a6:	bf00      	nop
 80037a8:	e002      	b.n	80037b0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037ae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b08a      	sub	sp, #40	; 0x28
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00d      	beq.n	8003800 <HAL_I2C_ER_IRQHandler+0x4a>
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037fe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00d      	beq.n	8003826 <HAL_I2C_ER_IRQHandler+0x70>
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	f043 0302 	orr.w	r3, r3, #2
 800381a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003824:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d03e      	beq.n	80038ae <HAL_I2C_ER_IRQHandler+0xf8>
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d039      	beq.n	80038ae <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800383a:	7efb      	ldrb	r3, [r7, #27]
 800383c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003854:	7ebb      	ldrb	r3, [r7, #26]
 8003856:	2b20      	cmp	r3, #32
 8003858:	d112      	bne.n	8003880 <HAL_I2C_ER_IRQHandler+0xca>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10f      	bne.n	8003880 <HAL_I2C_ER_IRQHandler+0xca>
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	2b21      	cmp	r3, #33	; 0x21
 8003864:	d008      	beq.n	8003878 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	2b29      	cmp	r3, #41	; 0x29
 800386a:	d005      	beq.n	8003878 <HAL_I2C_ER_IRQHandler+0xc2>
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	2b28      	cmp	r3, #40	; 0x28
 8003870:	d106      	bne.n	8003880 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b21      	cmp	r3, #33	; 0x21
 8003876:	d103      	bne.n	8003880 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f001 f83b 	bl	80048f4 <I2C_Slave_AF>
 800387e:	e016      	b.n	80038ae <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003888:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	f043 0304 	orr.w	r3, r3, #4
 8003890:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003892:	7efb      	ldrb	r3, [r7, #27]
 8003894:	2b10      	cmp	r3, #16
 8003896:	d002      	beq.n	800389e <HAL_I2C_ER_IRQHandler+0xe8>
 8003898:	7efb      	ldrb	r3, [r7, #27]
 800389a:	2b40      	cmp	r3, #64	; 0x40
 800389c:	d107      	bne.n	80038ae <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00d      	beq.n	80038d4 <HAL_I2C_ER_IRQHandler+0x11e>
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d008      	beq.n	80038d4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80038d2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f001 f874 	bl	80049d4 <I2C_ITError>
  }
}
 80038ec:	bf00      	nop
 80038ee:	3728      	adds	r7, #40	; 0x28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003986:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	2b00      	cmp	r3, #0
 8003994:	d150      	bne.n	8003a38 <I2C_MasterTransmit_TXE+0xc8>
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b21      	cmp	r3, #33	; 0x21
 800399a:	d14d      	bne.n	8003a38 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d01d      	beq.n	80039de <I2C_MasterTransmit_TXE+0x6e>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d01a      	beq.n	80039de <I2C_MasterTransmit_TXE+0x6e>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039ae:	d016      	beq.n	80039de <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039be:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2211      	movs	r2, #17
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff ff8c 	bl	80038f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039dc:	e060      	b.n	8003aa0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ec:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d107      	bne.n	8003a28 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ff7b 	bl	800391c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a26:	e03b      	b.n	8003aa0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ff5f 	bl	80038f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a36:	e033      	b.n	8003aa0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	2b21      	cmp	r3, #33	; 0x21
 8003a3c:	d005      	beq.n	8003a4a <I2C_MasterTransmit_TXE+0xda>
 8003a3e:	7bbb      	ldrb	r3, [r7, #14]
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d12d      	bne.n	8003aa0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b22      	cmp	r3, #34	; 0x22
 8003a48:	d12a      	bne.n	8003aa0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d108      	bne.n	8003a66 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a62:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003a64:	e01c      	b.n	8003aa0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	d103      	bne.n	8003a7a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f88e 	bl	8003b94 <I2C_MemoryTransmit_TXE_BTF>
}
 8003a78:	e012      	b.n	8003aa0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	781a      	ldrb	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a9e:	e7ff      	b.n	8003aa0 <I2C_MasterTransmit_TXE+0x130>
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b21      	cmp	r3, #33	; 0x21
 8003ac0:	d164      	bne.n	8003b8c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d012      	beq.n	8003af2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003af0:	e04c      	b.n	8003b8c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d01d      	beq.n	8003b34 <I2C_MasterTransmit_BTF+0x8c>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d01a      	beq.n	8003b34 <I2C_MasterTransmit_BTF+0x8c>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b04:	d016      	beq.n	8003b34 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b14:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2211      	movs	r2, #17
 8003b1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff fee1 	bl	80038f4 <HAL_I2C_MasterTxCpltCallback>
}
 8003b32:	e02b      	b.n	8003b8c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b42:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b52:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d107      	bne.n	8003b7e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fed0 	bl	800391c <HAL_I2C_MemTxCpltCallback>
}
 8003b7c:	e006      	b.n	8003b8c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff feb4 	bl	80038f4 <HAL_I2C_MasterTxCpltCallback>
}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d11d      	bne.n	8003be8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d10b      	bne.n	8003bcc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc4:	1c9a      	adds	r2, r3, #2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003bca:	e073      	b.n	8003cb4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	121b      	asrs	r3, r3, #8
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003be6:	e065      	b.n	8003cb4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d10b      	bne.n	8003c08 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c06:	e055      	b.n	8003cb4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d151      	bne.n	8003cb4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b22      	cmp	r3, #34	; 0x22
 8003c14:	d10d      	bne.n	8003c32 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c24:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c30:	e040      	b.n	8003cb4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d015      	beq.n	8003c68 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b21      	cmp	r3, #33	; 0x21
 8003c40:	d112      	bne.n	8003c68 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	781a      	ldrb	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c66:	e025      	b.n	8003cb4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d120      	bne.n	8003cb4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	2b21      	cmp	r3, #33	; 0x21
 8003c76:	d11d      	bne.n	8003cb4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c86:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c96:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff fe34 	bl	800391c <HAL_I2C_MemTxCpltCallback>
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b22      	cmp	r3, #34	; 0x22
 8003cce:	f040 80ac 	bne.w	8003e2a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d921      	bls.n	8003d24 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	f040 808c 	bne.w	8003e2a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d20:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003d22:	e082      	b.n	8003e2a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d075      	beq.n	8003e18 <I2C_MasterReceive_RXNE+0x15c>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d002      	beq.n	8003d38 <I2C_MasterReceive_RXNE+0x7c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d16f      	bne.n	8003e18 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f001 f825 	bl	8004d88 <I2C_WaitOnSTOPRequestThroughIT>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d142      	bne.n	8003dca <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d52:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d62:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d10a      	bne.n	8003db4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff fdbf 	bl	8003930 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003db2:	e03a      	b.n	8003e2a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2212      	movs	r2, #18
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff fda0 	bl	8003908 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003dc8:	e02f      	b.n	8003e2a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dd8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7fd fc41 	bl	8001698 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e16:	e008      	b.n	8003e2a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e26:	605a      	str	r2, [r3, #4]
}
 8003e28:	e7ff      	b.n	8003e2a <I2C_MasterReceive_RXNE+0x16e>
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d11b      	bne.n	8003e82 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e58:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e80:	e0bd      	b.n	8003ffe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d129      	bne.n	8003ee0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d00a      	beq.n	8003eb8 <I2C_MasterReceive_BTF+0x86>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d007      	beq.n	8003eb8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ede:	e08e      	b.n	8003ffe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d176      	bne.n	8003fd8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d002      	beq.n	8003ef6 <I2C_MasterReceive_BTF+0xc4>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d108      	bne.n	8003f08 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	e019      	b.n	8003f3c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d002      	beq.n	8003f14 <I2C_MasterReceive_BTF+0xe2>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d108      	bne.n	8003f26 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e00a      	b.n	8003f3c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d007      	beq.n	8003f3c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f96:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d10a      	bne.n	8003fc2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fcb8 	bl	8003930 <HAL_I2C_MemRxCpltCallback>
}
 8003fc0:	e01d      	b.n	8003ffe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2212      	movs	r2, #18
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff fc99 	bl	8003908 <HAL_I2C_MasterRxCpltCallback>
}
 8003fd6:	e012      	b.n	8003ffe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b40      	cmp	r3, #64	; 0x40
 8004018:	d117      	bne.n	800404a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	b2db      	uxtb	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004032:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004034:	e067      	b.n	8004106 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	b2da      	uxtb	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	611a      	str	r2, [r3, #16]
}
 8004048:	e05d      	b.n	8004106 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004052:	d133      	bne.n	80040bc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b21      	cmp	r3, #33	; 0x21
 800405e:	d109      	bne.n	8004074 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004070:	611a      	str	r2, [r3, #16]
 8004072:	e008      	b.n	8004086 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004078:	b2db      	uxtb	r3, r3
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	b2da      	uxtb	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408a:	2b00      	cmp	r3, #0
 800408c:	d004      	beq.n	8004098 <I2C_Master_SB+0x92>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d108      	bne.n	80040aa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	2b00      	cmp	r3, #0
 800409e:	d032      	beq.n	8004106 <I2C_Master_SB+0x100>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d02d      	beq.n	8004106 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b8:	605a      	str	r2, [r3, #4]
}
 80040ba:	e024      	b.n	8004106 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10e      	bne.n	80040e2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	11db      	asrs	r3, r3, #7
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f003 0306 	and.w	r3, r3, #6
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f063 030f 	orn	r3, r3, #15
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	611a      	str	r2, [r3, #16]
}
 80040e0:	e011      	b.n	8004106 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d10d      	bne.n	8004106 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	11db      	asrs	r3, r3, #7
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	f003 0306 	and.w	r3, r3, #6
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f063 030e 	orn	r3, r3, #14
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	611a      	str	r2, [r3, #16]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	b2da      	uxtb	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412a:	2b00      	cmp	r3, #0
 800412c:	d004      	beq.n	8004138 <I2C_Master_ADD10+0x26>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d108      	bne.n	800414a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00c      	beq.n	800415a <I2C_Master_ADD10+0x48>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004158:	605a      	str	r2, [r3, #4]
  }
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004166:	b480      	push	{r7}
 8004168:	b091      	sub	sp, #68	; 0x44
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004174:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b22      	cmp	r3, #34	; 0x22
 800418e:	f040 8169 	bne.w	8004464 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10f      	bne.n	80041ba <I2C_Master_ADDR+0x54>
 800419a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800419e:	2b40      	cmp	r3, #64	; 0x40
 80041a0:	d10b      	bne.n	80041ba <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a2:	2300      	movs	r3, #0
 80041a4:	633b      	str	r3, [r7, #48]	; 0x30
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	633b      	str	r3, [r7, #48]	; 0x30
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	e160      	b.n	800447c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d11d      	bne.n	80041fe <I2C_Master_ADDR+0x98>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041ca:	d118      	bne.n	80041fe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041cc:	2300      	movs	r3, #0
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	651a      	str	r2, [r3, #80]	; 0x50
 80041fc:	e13e      	b.n	800447c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d113      	bne.n	8004230 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004208:	2300      	movs	r3, #0
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	e115      	b.n	800445c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b01      	cmp	r3, #1
 8004238:	f040 808a 	bne.w	8004350 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800423c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004242:	d137      	bne.n	80042b4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004252:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004262:	d113      	bne.n	800428c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004272:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004274:	2300      	movs	r3, #0
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	e0e7      	b.n	800445c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428c:	2300      	movs	r3, #0
 800428e:	623b      	str	r3, [r7, #32]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	623b      	str	r3, [r7, #32]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	623b      	str	r3, [r7, #32]
 80042a0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e0d3      	b.n	800445c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80042b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d02e      	beq.n	8004318 <I2C_Master_ADDR+0x1b2>
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d02b      	beq.n	8004318 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80042c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c2:	2b12      	cmp	r3, #18
 80042c4:	d102      	bne.n	80042cc <I2C_Master_ADDR+0x166>
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d125      	bne.n	8004318 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d00e      	beq.n	80042f0 <I2C_Master_ADDR+0x18a>
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d00b      	beq.n	80042f0 <I2C_Master_ADDR+0x18a>
 80042d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d008      	beq.n	80042f0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	e007      	b.n	8004300 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042fe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004300:	2300      	movs	r3, #0
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	e0a1      	b.n	800445c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004326:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004328:	2300      	movs	r3, #0
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e085      	b.n	800445c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d14d      	bne.n	80043f6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	2b04      	cmp	r3, #4
 800435e:	d016      	beq.n	800438e <I2C_Master_ADDR+0x228>
 8004360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004362:	2b02      	cmp	r3, #2
 8004364:	d013      	beq.n	800438e <I2C_Master_ADDR+0x228>
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	2b10      	cmp	r3, #16
 800436a:	d010      	beq.n	800438e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e007      	b.n	800439e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800439c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ac:	d117      	bne.n	80043de <I2C_Master_ADDR+0x278>
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043b4:	d00b      	beq.n	80043ce <I2C_Master_ADDR+0x268>
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d008      	beq.n	80043ce <I2C_Master_ADDR+0x268>
 80043bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d005      	beq.n	80043ce <I2C_Master_ADDR+0x268>
 80043c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d002      	beq.n	80043ce <I2C_Master_ADDR+0x268>
 80043c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d107      	bne.n	80043de <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043dc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	e032      	b.n	800445c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004404:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004414:	d117      	bne.n	8004446 <I2C_Master_ADDR+0x2e0>
 8004416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004418:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800441c:	d00b      	beq.n	8004436 <I2C_Master_ADDR+0x2d0>
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	2b01      	cmp	r3, #1
 8004422:	d008      	beq.n	8004436 <I2C_Master_ADDR+0x2d0>
 8004424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004426:	2b08      	cmp	r3, #8
 8004428:	d005      	beq.n	8004436 <I2C_Master_ADDR+0x2d0>
 800442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442c:	2b10      	cmp	r3, #16
 800442e:	d002      	beq.n	8004436 <I2C_Master_ADDR+0x2d0>
 8004430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004432:	2b20      	cmp	r3, #32
 8004434:	d107      	bne.n	8004446 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004444:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004462:	e00b      	b.n	800447c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
}
 800447a:	e7ff      	b.n	800447c <I2C_Master_ADDR+0x316>
 800447c:	bf00      	nop
 800447e:	3744      	adds	r7, #68	; 0x44
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004496:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d02b      	beq.n	80044fa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	781a      	ldrb	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d114      	bne.n	80044fa <I2C_SlaveTransmit_TXE+0x72>
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b29      	cmp	r3, #41	; 0x29
 80044d4:	d111      	bne.n	80044fa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2221      	movs	r2, #33	; 0x21
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2228      	movs	r2, #40	; 0x28
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fd f863 	bl	80015c0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d011      	beq.n	8004538 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004552:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d02c      	beq.n	80045b8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d114      	bne.n	80045b8 <I2C_SlaveReceive_RXNE+0x74>
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b2a      	cmp	r3, #42	; 0x2a
 8004592:	d111      	bne.n	80045b8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2222      	movs	r2, #34	; 0x22
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2228      	movs	r2, #40	; 0x28
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd f83a 	bl	800162c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d012      	beq.n	80045f8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800461e:	2b28      	cmp	r3, #40	; 0x28
 8004620:	d125      	bne.n	800466e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004630:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004646:	2b00      	cmp	r3, #0
 8004648:	d103      	bne.n	8004652 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	81bb      	strh	r3, [r7, #12]
 8004650:	e002      	b.n	8004658 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004660:	89ba      	ldrh	r2, [r7, #12]
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc ff5a 	bl	8001520 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800466c:	e00e      	b.n	800468c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466e:	2300      	movs	r3, #0
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800468c:	bf00      	nop
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80046b4:	2300      	movs	r3, #0
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	60bb      	str	r3, [r7, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f0:	d172      	bne.n	80047d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	2b22      	cmp	r3, #34	; 0x22
 80046f6:	d002      	beq.n	80046fe <I2C_Slave_STOPF+0x6a>
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b2a      	cmp	r3, #42	; 0x2a
 80046fc:	d135      	bne.n	800476a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f043 0204 	orr.w	r2, r3, #4
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004730:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe faf7 	bl	8002d2a <HAL_DMA_GetState>
 800473c:	4603      	mov	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d049      	beq.n	80047d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	4a69      	ldr	r2, [pc, #420]	; (80048ec <I2C_Slave_STOPF+0x258>)
 8004748:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fac9 	bl	8002ce6 <HAL_DMA_Abort_IT>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d03d      	beq.n	80047d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004764:	4610      	mov	r0, r2
 8004766:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004768:	e035      	b.n	80047d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	b29a      	uxth	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f043 0204 	orr.w	r2, r3, #4
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800479c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fac1 	bl	8002d2a <HAL_DMA_GetState>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d014      	beq.n	80047d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b2:	4a4e      	ldr	r2, [pc, #312]	; (80048ec <I2C_Slave_STOPF+0x258>)
 80047b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe fa93 	bl	8002ce6 <HAL_DMA_Abort_IT>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047d0:	4610      	mov	r0, r2
 80047d2:	4798      	blx	r3
 80047d4:	e000      	b.n	80047d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d03e      	beq.n	8004860 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d112      	bne.n	8004816 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b40      	cmp	r3, #64	; 0x40
 8004822:	d112      	bne.n	800484a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	f043 0204 	orr.w	r2, r3, #4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f8b3 	bl	80049d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800486e:	e039      	b.n	80048e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	2b2a      	cmp	r3, #42	; 0x2a
 8004874:	d109      	bne.n	800488a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2228      	movs	r2, #40	; 0x28
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fc fed1 	bl	800162c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b28      	cmp	r3, #40	; 0x28
 8004894:	d111      	bne.n	80048ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a15      	ldr	r2, [pc, #84]	; (80048f0 <I2C_Slave_STOPF+0x25c>)
 800489a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fc fe28 	bl	8001508 <HAL_I2C_ListenCpltCallback>
}
 80048b8:	e014      	b.n	80048e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	2b22      	cmp	r3, #34	; 0x22
 80048c0:	d002      	beq.n	80048c8 <I2C_Slave_STOPF+0x234>
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	2b22      	cmp	r3, #34	; 0x22
 80048c6:	d10d      	bne.n	80048e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fc fea4 	bl	800162c <HAL_I2C_SlaveRxCpltCallback>
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	08004c39 	.word	0x08004c39
 80048f0:	ffff0000 	.word	0xffff0000

080048f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004902:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d002      	beq.n	8004916 <I2C_Slave_AF+0x22>
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b20      	cmp	r3, #32
 8004914:	d129      	bne.n	800496a <I2C_Slave_AF+0x76>
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	2b28      	cmp	r3, #40	; 0x28
 800491a:	d126      	bne.n	800496a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a2c      	ldr	r2, [pc, #176]	; (80049d0 <I2C_Slave_AF+0xdc>)
 8004920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004930:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800493a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800494a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fc fdd0 	bl	8001508 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004968:	e02e      	b.n	80049c8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	2b21      	cmp	r3, #33	; 0x21
 800496e:	d126      	bne.n	80049be <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <I2C_Slave_AF+0xdc>)
 8004974:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2221      	movs	r2, #33	; 0x21
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800499a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc fe02 	bl	80015c0 <HAL_I2C_SlaveTxCpltCallback>
}
 80049bc:	e004      	b.n	80049c8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049c6:	615a      	str	r2, [r3, #20]
}
 80049c8:	bf00      	nop
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	ffff0000 	.word	0xffff0000

080049d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049ec:	7bbb      	ldrb	r3, [r7, #14]
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d002      	beq.n	80049f8 <I2C_ITError+0x24>
 80049f2:	7bbb      	ldrb	r3, [r7, #14]
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d10a      	bne.n	8004a0e <I2C_ITError+0x3a>
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	2b22      	cmp	r3, #34	; 0x22
 80049fc:	d107      	bne.n	8004a0e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a0c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a14:	2b28      	cmp	r3, #40	; 0x28
 8004a16:	d107      	bne.n	8004a28 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2228      	movs	r2, #40	; 0x28
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a26:	e015      	b.n	8004a54 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a36:	d00a      	beq.n	8004a4e <I2C_ITError+0x7a>
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b60      	cmp	r3, #96	; 0x60
 8004a3c:	d007      	beq.n	8004a4e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a62:	d162      	bne.n	8004b2a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a72:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d020      	beq.n	8004ac4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a86:	4a6a      	ldr	r2, [pc, #424]	; (8004c30 <I2C_ITError+0x25c>)
 8004a88:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe f929 	bl	8002ce6 <HAL_DMA_Abort_IT>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8089 	beq.w	8004bae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004abe:	4610      	mov	r0, r2
 8004ac0:	4798      	blx	r3
 8004ac2:	e074      	b.n	8004bae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	4a59      	ldr	r2, [pc, #356]	; (8004c30 <I2C_ITError+0x25c>)
 8004aca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fe f908 	bl	8002ce6 <HAL_DMA_Abort_IT>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d068      	beq.n	8004bae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	d10b      	bne.n	8004b02 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b24:	4610      	mov	r0, r2
 8004b26:	4798      	blx	r3
 8004b28:	e041      	b.n	8004bae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b60      	cmp	r3, #96	; 0x60
 8004b34:	d125      	bne.n	8004b82 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4e:	2b40      	cmp	r3, #64	; 0x40
 8004b50:	d10b      	bne.n	8004b6a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0201 	bic.w	r2, r2, #1
 8004b78:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fe fee2 	bl	8003944 <HAL_I2C_AbortCpltCallback>
 8004b80:	e015      	b.n	8004bae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d10b      	bne.n	8004ba8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7fc fd75 	bl	8001698 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10e      	bne.n	8004bdc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d109      	bne.n	8004bdc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d104      	bne.n	8004bdc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d113      	bne.n	8004c28 <I2C_ITError+0x254>
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	2b28      	cmp	r3, #40	; 0x28
 8004c04:	d110      	bne.n	8004c28 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a0a      	ldr	r2, [pc, #40]	; (8004c34 <I2C_ITError+0x260>)
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fc fc70 	bl	8001508 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	08004c39 	.word	0x08004c39
 8004c34:	ffff0000 	.word	0xffff0000

08004c38 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c50:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c52:	4b4b      	ldr	r3, [pc, #300]	; (8004d80 <I2C_DMAAbort+0x148>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	08db      	lsrs	r3, r3, #3
 8004c58:	4a4a      	ldr	r2, [pc, #296]	; (8004d84 <I2C_DMAAbort+0x14c>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	0a1a      	lsrs	r2, r3, #8
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	00da      	lsls	r2, r3, #3
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0220 	orr.w	r2, r3, #32
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004c7e:	e00a      	b.n	8004c96 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c94:	d0ea      	beq.n	8004c6c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd8:	2200      	movs	r2, #0
 8004cda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	2200      	movs	r2, #0
 8004cea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b60      	cmp	r3, #96	; 0x60
 8004d06:	d10e      	bne.n	8004d26 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d1e:	6978      	ldr	r0, [r7, #20]
 8004d20:	f7fe fe10 	bl	8003944 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d24:	e027      	b.n	8004d76 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d26:	7cfb      	ldrb	r3, [r7, #19]
 8004d28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d2c:	2b28      	cmp	r3, #40	; 0x28
 8004d2e:	d117      	bne.n	8004d60 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2228      	movs	r2, #40	; 0x28
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d5e:	e007      	b.n	8004d70 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d70:	6978      	ldr	r0, [r7, #20]
 8004d72:	f7fc fc91 	bl	8001698 <HAL_I2C_ErrorCallback>
}
 8004d76:	bf00      	nop
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000090 	.word	0x20000090
 8004d84:	14f8b589 	.word	0x14f8b589

08004d88 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d94:	4b13      	ldr	r3, [pc, #76]	; (8004de4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	08db      	lsrs	r3, r3, #3
 8004d9a:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	0a1a      	lsrs	r2, r3, #8
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d107      	bne.n	8004dc6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f043 0220 	orr.w	r2, r3, #32
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e008      	b.n	8004dd8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd4:	d0e9      	beq.n	8004daa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	20000090 	.word	0x20000090
 8004de8:	14f8b589 	.word	0x14f8b589

08004dec <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004dfc:	d103      	bne.n	8004e06 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e04:	e007      	b.n	8004e16 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e0e:	d102      	bne.n	8004e16 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2208      	movs	r2, #8
 8004e14:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
	...

08004e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e267      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d075      	beq.n	8004f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e42:	4b88      	ldr	r3, [pc, #544]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d00c      	beq.n	8004e68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e4e:	4b85      	ldr	r3, [pc, #532]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d112      	bne.n	8004e80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e5a:	4b82      	ldr	r3, [pc, #520]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e66:	d10b      	bne.n	8004e80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e68:	4b7e      	ldr	r3, [pc, #504]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d05b      	beq.n	8004f2c <HAL_RCC_OscConfig+0x108>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d157      	bne.n	8004f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e242      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e88:	d106      	bne.n	8004e98 <HAL_RCC_OscConfig+0x74>
 8004e8a:	4b76      	ldr	r3, [pc, #472]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a75      	ldr	r2, [pc, #468]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	e01d      	b.n	8004ed4 <HAL_RCC_OscConfig+0xb0>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ea0:	d10c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x98>
 8004ea2:	4b70      	ldr	r3, [pc, #448]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a6f      	ldr	r2, [pc, #444]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	4b6d      	ldr	r3, [pc, #436]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a6c      	ldr	r2, [pc, #432]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e00b      	b.n	8004ed4 <HAL_RCC_OscConfig+0xb0>
 8004ebc:	4b69      	ldr	r3, [pc, #420]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a68      	ldr	r2, [pc, #416]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	4b66      	ldr	r3, [pc, #408]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a65      	ldr	r2, [pc, #404]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d013      	beq.n	8004f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004edc:	f7fd fa3c 	bl	8002358 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ee4:	f7fd fa38 	bl	8002358 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b64      	cmp	r3, #100	; 0x64
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e207      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef6:	4b5b      	ldr	r3, [pc, #364]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0f0      	beq.n	8004ee4 <HAL_RCC_OscConfig+0xc0>
 8004f02:	e014      	b.n	8004f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fd fa28 	bl	8002358 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f0c:	f7fd fa24 	bl	8002358 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b64      	cmp	r3, #100	; 0x64
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e1f3      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f1e:	4b51      	ldr	r3, [pc, #324]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0xe8>
 8004f2a:	e000      	b.n	8004f2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d063      	beq.n	8005002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f3a:	4b4a      	ldr	r3, [pc, #296]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f46:	4b47      	ldr	r3, [pc, #284]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d11c      	bne.n	8004f8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f52:	4b44      	ldr	r3, [pc, #272]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d116      	bne.n	8004f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f5e:	4b41      	ldr	r3, [pc, #260]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d005      	beq.n	8004f76 <HAL_RCC_OscConfig+0x152>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d001      	beq.n	8004f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e1c7      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f76:	4b3b      	ldr	r3, [pc, #236]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	4937      	ldr	r1, [pc, #220]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f8a:	e03a      	b.n	8005002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d020      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f94:	4b34      	ldr	r3, [pc, #208]	; (8005068 <HAL_RCC_OscConfig+0x244>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9a:	f7fd f9dd 	bl	8002358 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa2:	f7fd f9d9 	bl	8002358 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e1a8      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb4:	4b2b      	ldr	r3, [pc, #172]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc0:	4b28      	ldr	r3, [pc, #160]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4925      	ldr	r1, [pc, #148]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	600b      	str	r3, [r1, #0]
 8004fd4:	e015      	b.n	8005002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fd6:	4b24      	ldr	r3, [pc, #144]	; (8005068 <HAL_RCC_OscConfig+0x244>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fd f9bc 	bl	8002358 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fe4:	f7fd f9b8 	bl	8002358 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e187      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ff6:	4b1b      	ldr	r3, [pc, #108]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d036      	beq.n	800507c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d016      	beq.n	8005044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005016:	4b15      	ldr	r3, [pc, #84]	; (800506c <HAL_RCC_OscConfig+0x248>)
 8005018:	2201      	movs	r2, #1
 800501a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501c:	f7fd f99c 	bl	8002358 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005024:	f7fd f998 	bl	8002358 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e167      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005036:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <HAL_RCC_OscConfig+0x240>)
 8005038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCC_OscConfig+0x200>
 8005042:	e01b      	b.n	800507c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005044:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_RCC_OscConfig+0x248>)
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800504a:	f7fd f985 	bl	8002358 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005050:	e00e      	b.n	8005070 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005052:	f7fd f981 	bl	8002358 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d907      	bls.n	8005070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e150      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
 8005064:	40023800 	.word	0x40023800
 8005068:	42470000 	.word	0x42470000
 800506c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005070:	4b88      	ldr	r3, [pc, #544]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 8005072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1ea      	bne.n	8005052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8097 	beq.w	80051b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800508a:	2300      	movs	r3, #0
 800508c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800508e:	4b81      	ldr	r3, [pc, #516]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10f      	bne.n	80050ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	4b7d      	ldr	r3, [pc, #500]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	4a7c      	ldr	r2, [pc, #496]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 80050a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a8:	6413      	str	r3, [r2, #64]	; 0x40
 80050aa:	4b7a      	ldr	r3, [pc, #488]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050b6:	2301      	movs	r3, #1
 80050b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ba:	4b77      	ldr	r3, [pc, #476]	; (8005298 <HAL_RCC_OscConfig+0x474>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d118      	bne.n	80050f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050c6:	4b74      	ldr	r3, [pc, #464]	; (8005298 <HAL_RCC_OscConfig+0x474>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a73      	ldr	r2, [pc, #460]	; (8005298 <HAL_RCC_OscConfig+0x474>)
 80050cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050d2:	f7fd f941 	bl	8002358 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050da:	f7fd f93d 	bl	8002358 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e10c      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ec:	4b6a      	ldr	r3, [pc, #424]	; (8005298 <HAL_RCC_OscConfig+0x474>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0f0      	beq.n	80050da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d106      	bne.n	800510e <HAL_RCC_OscConfig+0x2ea>
 8005100:	4b64      	ldr	r3, [pc, #400]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	4a63      	ldr	r2, [pc, #396]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 8005106:	f043 0301 	orr.w	r3, r3, #1
 800510a:	6713      	str	r3, [r2, #112]	; 0x70
 800510c:	e01c      	b.n	8005148 <HAL_RCC_OscConfig+0x324>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b05      	cmp	r3, #5
 8005114:	d10c      	bne.n	8005130 <HAL_RCC_OscConfig+0x30c>
 8005116:	4b5f      	ldr	r3, [pc, #380]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	4a5e      	ldr	r2, [pc, #376]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 800511c:	f043 0304 	orr.w	r3, r3, #4
 8005120:	6713      	str	r3, [r2, #112]	; 0x70
 8005122:	4b5c      	ldr	r3, [pc, #368]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	4a5b      	ldr	r2, [pc, #364]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	6713      	str	r3, [r2, #112]	; 0x70
 800512e:	e00b      	b.n	8005148 <HAL_RCC_OscConfig+0x324>
 8005130:	4b58      	ldr	r3, [pc, #352]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005134:	4a57      	ldr	r2, [pc, #348]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 8005136:	f023 0301 	bic.w	r3, r3, #1
 800513a:	6713      	str	r3, [r2, #112]	; 0x70
 800513c:	4b55      	ldr	r3, [pc, #340]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005140:	4a54      	ldr	r2, [pc, #336]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 8005142:	f023 0304 	bic.w	r3, r3, #4
 8005146:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d015      	beq.n	800517c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005150:	f7fd f902 	bl	8002358 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005156:	e00a      	b.n	800516e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005158:	f7fd f8fe 	bl	8002358 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f241 3288 	movw	r2, #5000	; 0x1388
 8005166:	4293      	cmp	r3, r2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e0cb      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516e:	4b49      	ldr	r3, [pc, #292]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0ee      	beq.n	8005158 <HAL_RCC_OscConfig+0x334>
 800517a:	e014      	b.n	80051a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800517c:	f7fd f8ec 	bl	8002358 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005182:	e00a      	b.n	800519a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005184:	f7fd f8e8 	bl	8002358 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e0b5      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800519a:	4b3e      	ldr	r3, [pc, #248]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1ee      	bne.n	8005184 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d105      	bne.n	80051b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ac:	4b39      	ldr	r3, [pc, #228]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	4a38      	ldr	r2, [pc, #224]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 80051b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80a1 	beq.w	8005304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051c2:	4b34      	ldr	r3, [pc, #208]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d05c      	beq.n	8005288 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d141      	bne.n	800525a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d6:	4b31      	ldr	r3, [pc, #196]	; (800529c <HAL_RCC_OscConfig+0x478>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7fd f8bc 	bl	8002358 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fd f8b8 	bl	8002358 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e087      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f6:	4b27      	ldr	r3, [pc, #156]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69da      	ldr	r2, [r3, #28]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	019b      	lsls	r3, r3, #6
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	085b      	lsrs	r3, r3, #1
 800521a:	3b01      	subs	r3, #1
 800521c:	041b      	lsls	r3, r3, #16
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	061b      	lsls	r3, r3, #24
 8005226:	491b      	ldr	r1, [pc, #108]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 8005228:	4313      	orrs	r3, r2
 800522a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800522c:	4b1b      	ldr	r3, [pc, #108]	; (800529c <HAL_RCC_OscConfig+0x478>)
 800522e:	2201      	movs	r2, #1
 8005230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005232:	f7fd f891 	bl	8002358 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800523a:	f7fd f88d 	bl	8002358 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e05c      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800524c:	4b11      	ldr	r3, [pc, #68]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x416>
 8005258:	e054      	b.n	8005304 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	4b10      	ldr	r3, [pc, #64]	; (800529c <HAL_RCC_OscConfig+0x478>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7fd f87a 	bl	8002358 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005268:	f7fd f876 	bl	8002358 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e045      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527a:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_RCC_OscConfig+0x470>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x444>
 8005286:	e03d      	b.n	8005304 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d107      	bne.n	80052a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e038      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
 8005294:	40023800 	.word	0x40023800
 8005298:	40007000 	.word	0x40007000
 800529c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <HAL_RCC_OscConfig+0x4ec>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d028      	beq.n	8005300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d121      	bne.n	8005300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d11a      	bne.n	8005300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052d0:	4013      	ands	r3, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052d8:	4293      	cmp	r3, r2
 80052da:	d111      	bne.n	8005300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	085b      	lsrs	r3, r3, #1
 80052e8:	3b01      	subs	r3, #1
 80052ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d107      	bne.n	8005300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d001      	beq.n	8005304 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40023800 	.word	0x40023800

08005314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0cc      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005328:	4b68      	ldr	r3, [pc, #416]	; (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d90c      	bls.n	8005350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b65      	ldr	r3, [pc, #404]	; (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800533e:	4b63      	ldr	r3, [pc, #396]	; (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	429a      	cmp	r2, r3
 800534a:	d001      	beq.n	8005350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e0b8      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d020      	beq.n	800539e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005368:	4b59      	ldr	r3, [pc, #356]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	4a58      	ldr	r2, [pc, #352]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005380:	4b53      	ldr	r3, [pc, #332]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4a52      	ldr	r2, [pc, #328]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800538a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800538c:	4b50      	ldr	r3, [pc, #320]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	494d      	ldr	r1, [pc, #308]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	4313      	orrs	r3, r2
 800539c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d044      	beq.n	8005434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d107      	bne.n	80053c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b2:	4b47      	ldr	r3, [pc, #284]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d119      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e07f      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d003      	beq.n	80053d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d107      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d2:	4b3f      	ldr	r3, [pc, #252]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d109      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e06f      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e2:	4b3b      	ldr	r3, [pc, #236]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e067      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053f2:	4b37      	ldr	r3, [pc, #220]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f023 0203 	bic.w	r2, r3, #3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	4934      	ldr	r1, [pc, #208]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005400:	4313      	orrs	r3, r2
 8005402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005404:	f7fc ffa8 	bl	8002358 <HAL_GetTick>
 8005408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540a:	e00a      	b.n	8005422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800540c:	f7fc ffa4 	bl	8002358 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	f241 3288 	movw	r2, #5000	; 0x1388
 800541a:	4293      	cmp	r3, r2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e04f      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005422:	4b2b      	ldr	r3, [pc, #172]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 020c 	and.w	r2, r3, #12
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	429a      	cmp	r2, r3
 8005432:	d1eb      	bne.n	800540c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005434:	4b25      	ldr	r3, [pc, #148]	; (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d20c      	bcs.n	800545c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005442:	4b22      	ldr	r3, [pc, #136]	; (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544a:	4b20      	ldr	r3, [pc, #128]	; (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d001      	beq.n	800545c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e032      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005468:	4b19      	ldr	r3, [pc, #100]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4916      	ldr	r1, [pc, #88]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	4313      	orrs	r3, r2
 8005478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d009      	beq.n	800549a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005486:	4b12      	ldr	r3, [pc, #72]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	490e      	ldr	r1, [pc, #56]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800549a:	f000 f821 	bl	80054e0 <HAL_RCC_GetSysClockFreq>
 800549e:	4602      	mov	r2, r0
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	091b      	lsrs	r3, r3, #4
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	490a      	ldr	r1, [pc, #40]	; (80054d4 <HAL_RCC_ClockConfig+0x1c0>)
 80054ac:	5ccb      	ldrb	r3, [r1, r3]
 80054ae:	fa22 f303 	lsr.w	r3, r2, r3
 80054b2:	4a09      	ldr	r2, [pc, #36]	; (80054d8 <HAL_RCC_ClockConfig+0x1c4>)
 80054b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054b6:	4b09      	ldr	r3, [pc, #36]	; (80054dc <HAL_RCC_ClockConfig+0x1c8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fc ff08 	bl	80022d0 <HAL_InitTick>

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40023c00 	.word	0x40023c00
 80054d0:	40023800 	.word	0x40023800
 80054d4:	08009c00 	.word	0x08009c00
 80054d8:	20000090 	.word	0x20000090
 80054dc:	20000094 	.word	0x20000094

080054e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e4:	b090      	sub	sp, #64	; 0x40
 80054e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	637b      	str	r3, [r7, #52]	; 0x34
 80054ec:	2300      	movs	r3, #0
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f0:	2300      	movs	r3, #0
 80054f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054f8:	4b59      	ldr	r3, [pc, #356]	; (8005660 <HAL_RCC_GetSysClockFreq+0x180>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 030c 	and.w	r3, r3, #12
 8005500:	2b08      	cmp	r3, #8
 8005502:	d00d      	beq.n	8005520 <HAL_RCC_GetSysClockFreq+0x40>
 8005504:	2b08      	cmp	r3, #8
 8005506:	f200 80a1 	bhi.w	800564c <HAL_RCC_GetSysClockFreq+0x16c>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_RCC_GetSysClockFreq+0x34>
 800550e:	2b04      	cmp	r3, #4
 8005510:	d003      	beq.n	800551a <HAL_RCC_GetSysClockFreq+0x3a>
 8005512:	e09b      	b.n	800564c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005514:	4b53      	ldr	r3, [pc, #332]	; (8005664 <HAL_RCC_GetSysClockFreq+0x184>)
 8005516:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005518:	e09b      	b.n	8005652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800551a:	4b53      	ldr	r3, [pc, #332]	; (8005668 <HAL_RCC_GetSysClockFreq+0x188>)
 800551c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800551e:	e098      	b.n	8005652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005520:	4b4f      	ldr	r3, [pc, #316]	; (8005660 <HAL_RCC_GetSysClockFreq+0x180>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005528:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800552a:	4b4d      	ldr	r3, [pc, #308]	; (8005660 <HAL_RCC_GetSysClockFreq+0x180>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d028      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005536:	4b4a      	ldr	r3, [pc, #296]	; (8005660 <HAL_RCC_GetSysClockFreq+0x180>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	099b      	lsrs	r3, r3, #6
 800553c:	2200      	movs	r2, #0
 800553e:	623b      	str	r3, [r7, #32]
 8005540:	627a      	str	r2, [r7, #36]	; 0x24
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005548:	2100      	movs	r1, #0
 800554a:	4b47      	ldr	r3, [pc, #284]	; (8005668 <HAL_RCC_GetSysClockFreq+0x188>)
 800554c:	fb03 f201 	mul.w	r2, r3, r1
 8005550:	2300      	movs	r3, #0
 8005552:	fb00 f303 	mul.w	r3, r0, r3
 8005556:	4413      	add	r3, r2
 8005558:	4a43      	ldr	r2, [pc, #268]	; (8005668 <HAL_RCC_GetSysClockFreq+0x188>)
 800555a:	fba0 1202 	umull	r1, r2, r0, r2
 800555e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005560:	460a      	mov	r2, r1
 8005562:	62ba      	str	r2, [r7, #40]	; 0x28
 8005564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005566:	4413      	add	r3, r2
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556c:	2200      	movs	r2, #0
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	61fa      	str	r2, [r7, #28]
 8005572:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005576:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800557a:	f7fb fb1d 	bl	8000bb8 <__aeabi_uldivmod>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4613      	mov	r3, r2
 8005584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005586:	e053      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005588:	4b35      	ldr	r3, [pc, #212]	; (8005660 <HAL_RCC_GetSysClockFreq+0x180>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	099b      	lsrs	r3, r3, #6
 800558e:	2200      	movs	r2, #0
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	617a      	str	r2, [r7, #20]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800559a:	f04f 0b00 	mov.w	fp, #0
 800559e:	4652      	mov	r2, sl
 80055a0:	465b      	mov	r3, fp
 80055a2:	f04f 0000 	mov.w	r0, #0
 80055a6:	f04f 0100 	mov.w	r1, #0
 80055aa:	0159      	lsls	r1, r3, #5
 80055ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055b0:	0150      	lsls	r0, r2, #5
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	ebb2 080a 	subs.w	r8, r2, sl
 80055ba:	eb63 090b 	sbc.w	r9, r3, fp
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80055ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80055d2:	ebb2 0408 	subs.w	r4, r2, r8
 80055d6:	eb63 0509 	sbc.w	r5, r3, r9
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	00eb      	lsls	r3, r5, #3
 80055e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055e8:	00e2      	lsls	r2, r4, #3
 80055ea:	4614      	mov	r4, r2
 80055ec:	461d      	mov	r5, r3
 80055ee:	eb14 030a 	adds.w	r3, r4, sl
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	eb45 030b 	adc.w	r3, r5, fp
 80055f8:	607b      	str	r3, [r7, #4]
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005606:	4629      	mov	r1, r5
 8005608:	028b      	lsls	r3, r1, #10
 800560a:	4621      	mov	r1, r4
 800560c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005610:	4621      	mov	r1, r4
 8005612:	028a      	lsls	r2, r1, #10
 8005614:	4610      	mov	r0, r2
 8005616:	4619      	mov	r1, r3
 8005618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561a:	2200      	movs	r2, #0
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	60fa      	str	r2, [r7, #12]
 8005620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005624:	f7fb fac8 	bl	8000bb8 <__aeabi_uldivmod>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4613      	mov	r3, r2
 800562e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <HAL_RCC_GetSysClockFreq+0x180>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	0c1b      	lsrs	r3, r3, #16
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	3301      	adds	r3, #1
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	fbb2 f3f3 	udiv	r3, r2, r3
 8005648:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800564a:	e002      	b.n	8005652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800564c:	4b05      	ldr	r3, [pc, #20]	; (8005664 <HAL_RCC_GetSysClockFreq+0x184>)
 800564e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005654:	4618      	mov	r0, r3
 8005656:	3740      	adds	r7, #64	; 0x40
 8005658:	46bd      	mov	sp, r7
 800565a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800565e:	bf00      	nop
 8005660:	40023800 	.word	0x40023800
 8005664:	00f42400 	.word	0x00f42400
 8005668:	017d7840 	.word	0x017d7840

0800566c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005670:	4b03      	ldr	r3, [pc, #12]	; (8005680 <HAL_RCC_GetHCLKFreq+0x14>)
 8005672:	681b      	ldr	r3, [r3, #0]
}
 8005674:	4618      	mov	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	20000090 	.word	0x20000090

08005684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005688:	f7ff fff0 	bl	800566c <HAL_RCC_GetHCLKFreq>
 800568c:	4602      	mov	r2, r0
 800568e:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	0a9b      	lsrs	r3, r3, #10
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	4903      	ldr	r1, [pc, #12]	; (80056a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800569a:	5ccb      	ldrb	r3, [r1, r3]
 800569c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	40023800 	.word	0x40023800
 80056a8:	08009c10 	.word	0x08009c10

080056ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056b0:	f7ff ffdc 	bl	800566c <HAL_RCC_GetHCLKFreq>
 80056b4:	4602      	mov	r2, r0
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	0b5b      	lsrs	r3, r3, #13
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4903      	ldr	r1, [pc, #12]	; (80056d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056c2:	5ccb      	ldrb	r3, [r1, r3]
 80056c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40023800 	.word	0x40023800
 80056d0:	08009c10 	.word	0x08009c10

080056d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e041      	b.n	800576a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fc fc50 	bl	8001fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3304      	adds	r3, #4
 8005710:	4619      	mov	r1, r3
 8005712:	4610      	mov	r0, r2
 8005714:	f000 ff14 	bl	8006540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	d001      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e044      	b.n	8005816 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a1e      	ldr	r2, [pc, #120]	; (8005824 <HAL_TIM_Base_Start_IT+0xb0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d018      	beq.n	80057e0 <HAL_TIM_Base_Start_IT+0x6c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b6:	d013      	beq.n	80057e0 <HAL_TIM_Base_Start_IT+0x6c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1a      	ldr	r2, [pc, #104]	; (8005828 <HAL_TIM_Base_Start_IT+0xb4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00e      	beq.n	80057e0 <HAL_TIM_Base_Start_IT+0x6c>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a19      	ldr	r2, [pc, #100]	; (800582c <HAL_TIM_Base_Start_IT+0xb8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d009      	beq.n	80057e0 <HAL_TIM_Base_Start_IT+0x6c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a17      	ldr	r2, [pc, #92]	; (8005830 <HAL_TIM_Base_Start_IT+0xbc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d004      	beq.n	80057e0 <HAL_TIM_Base_Start_IT+0x6c>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a16      	ldr	r2, [pc, #88]	; (8005834 <HAL_TIM_Base_Start_IT+0xc0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d111      	bne.n	8005804 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b06      	cmp	r3, #6
 80057f0:	d010      	beq.n	8005814 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0201 	orr.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005802:	e007      	b.n	8005814 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0201 	orr.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40010000 	.word	0x40010000
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	40014000 	.word	0x40014000

08005838 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0201 	bic.w	r2, r2, #1
 800584e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6a1a      	ldr	r2, [r3, #32]
 8005856:	f241 1311 	movw	r3, #4369	; 0x1111
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10f      	bne.n	8005880 <HAL_TIM_Base_Stop_IT+0x48>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	f240 4344 	movw	r3, #1092	; 0x444
 800586a:	4013      	ands	r3, r2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d107      	bne.n	8005880 <HAL_TIM_Base_Stop_IT+0x48>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e041      	b.n	800592c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fc fbed 	bl	800209c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3304      	adds	r3, #4
 80058d2:	4619      	mov	r1, r3
 80058d4:	4610      	mov	r0, r2
 80058d6:	f000 fe33 	bl	8006540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <HAL_TIM_PWM_Start+0x24>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b01      	cmp	r3, #1
 800594e:	bf14      	ite	ne
 8005950:	2301      	movne	r3, #1
 8005952:	2300      	moveq	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	e022      	b.n	800599e <HAL_TIM_PWM_Start+0x6a>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b04      	cmp	r3, #4
 800595c:	d109      	bne.n	8005972 <HAL_TIM_PWM_Start+0x3e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	bf14      	ite	ne
 800596a:	2301      	movne	r3, #1
 800596c:	2300      	moveq	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	e015      	b.n	800599e <HAL_TIM_PWM_Start+0x6a>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d109      	bne.n	800598c <HAL_TIM_PWM_Start+0x58>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	bf14      	ite	ne
 8005984:	2301      	movne	r3, #1
 8005986:	2300      	moveq	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	e008      	b.n	800599e <HAL_TIM_PWM_Start+0x6a>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	bf14      	ite	ne
 8005998:	2301      	movne	r3, #1
 800599a:	2300      	moveq	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e068      	b.n	8005a78 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d104      	bne.n	80059b6 <HAL_TIM_PWM_Start+0x82>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059b4:	e013      	b.n	80059de <HAL_TIM_PWM_Start+0xaa>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d104      	bne.n	80059c6 <HAL_TIM_PWM_Start+0x92>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c4:	e00b      	b.n	80059de <HAL_TIM_PWM_Start+0xaa>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d104      	bne.n	80059d6 <HAL_TIM_PWM_Start+0xa2>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d4:	e003      	b.n	80059de <HAL_TIM_PWM_Start+0xaa>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2201      	movs	r2, #1
 80059e4:	6839      	ldr	r1, [r7, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 f9e5 	bl	8006db6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a23      	ldr	r2, [pc, #140]	; (8005a80 <HAL_TIM_PWM_Start+0x14c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d107      	bne.n	8005a06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a1d      	ldr	r2, [pc, #116]	; (8005a80 <HAL_TIM_PWM_Start+0x14c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d018      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x10e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a18:	d013      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x10e>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a19      	ldr	r2, [pc, #100]	; (8005a84 <HAL_TIM_PWM_Start+0x150>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00e      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x10e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a17      	ldr	r2, [pc, #92]	; (8005a88 <HAL_TIM_PWM_Start+0x154>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d009      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x10e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a16      	ldr	r2, [pc, #88]	; (8005a8c <HAL_TIM_PWM_Start+0x158>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d004      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x10e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a14      	ldr	r2, [pc, #80]	; (8005a90 <HAL_TIM_PWM_Start+0x15c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d111      	bne.n	8005a66 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b06      	cmp	r3, #6
 8005a52:	d010      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a64:	e007      	b.n	8005a76 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40010000 	.word	0x40010000
 8005a84:	40000400 	.word	0x40000400
 8005a88:	40000800 	.word	0x40000800
 8005a8c:	40000c00 	.word	0x40000c00
 8005a90:	40014000 	.word	0x40014000

08005a94 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f001 f985 	bl	8006db6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a29      	ldr	r2, [pc, #164]	; (8005b58 <HAL_TIM_PWM_Stop+0xc4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d117      	bne.n	8005ae6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10f      	bne.n	8005ae6 <HAL_TIM_PWM_Stop+0x52>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6a1a      	ldr	r2, [r3, #32]
 8005acc:	f240 4344 	movw	r3, #1092	; 0x444
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d107      	bne.n	8005ae6 <HAL_TIM_PWM_Stop+0x52>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ae4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6a1a      	ldr	r2, [r3, #32]
 8005aec:	f241 1311 	movw	r3, #4369	; 0x1111
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10f      	bne.n	8005b16 <HAL_TIM_PWM_Stop+0x82>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6a1a      	ldr	r2, [r3, #32]
 8005afc:	f240 4344 	movw	r3, #1092	; 0x444
 8005b00:	4013      	ands	r3, r2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d107      	bne.n	8005b16 <HAL_TIM_PWM_Stop+0x82>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0201 	bic.w	r2, r2, #1
 8005b14:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d104      	bne.n	8005b26 <HAL_TIM_PWM_Stop+0x92>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b24:	e013      	b.n	8005b4e <HAL_TIM_PWM_Stop+0xba>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d104      	bne.n	8005b36 <HAL_TIM_PWM_Stop+0xa2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b34:	e00b      	b.n	8005b4e <HAL_TIM_PWM_Stop+0xba>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d104      	bne.n	8005b46 <HAL_TIM_PWM_Stop+0xb2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b44:	e003      	b.n	8005b4e <HAL_TIM_PWM_Stop+0xba>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40010000 	.word	0x40010000

08005b5c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e041      	b.n	8005bf2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fc faac 	bl	80020e0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3304      	adds	r3, #4
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	f000 fcd0 	bl	8006540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d104      	bne.n	8005c1a <HAL_TIM_IC_Start_IT+0x1e>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	e013      	b.n	8005c42 <HAL_TIM_IC_Start_IT+0x46>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d104      	bne.n	8005c2a <HAL_TIM_IC_Start_IT+0x2e>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	e00b      	b.n	8005c42 <HAL_TIM_IC_Start_IT+0x46>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d104      	bne.n	8005c3a <HAL_TIM_IC_Start_IT+0x3e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	e003      	b.n	8005c42 <HAL_TIM_IC_Start_IT+0x46>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d104      	bne.n	8005c54 <HAL_TIM_IC_Start_IT+0x58>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	e013      	b.n	8005c7c <HAL_TIM_IC_Start_IT+0x80>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d104      	bne.n	8005c64 <HAL_TIM_IC_Start_IT+0x68>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	e00b      	b.n	8005c7c <HAL_TIM_IC_Start_IT+0x80>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d104      	bne.n	8005c74 <HAL_TIM_IC_Start_IT+0x78>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	e003      	b.n	8005c7c <HAL_TIM_IC_Start_IT+0x80>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c7e:	7bbb      	ldrb	r3, [r7, #14]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d102      	bne.n	8005c8a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c84:	7b7b      	ldrb	r3, [r7, #13]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d001      	beq.n	8005c8e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e0c2      	b.n	8005e14 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_IC_Start_IT+0xa2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c9c:	e013      	b.n	8005cc6 <HAL_TIM_IC_Start_IT+0xca>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_IC_Start_IT+0xb2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cac:	e00b      	b.n	8005cc6 <HAL_TIM_IC_Start_IT+0xca>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d104      	bne.n	8005cbe <HAL_TIM_IC_Start_IT+0xc2>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cbc:	e003      	b.n	8005cc6 <HAL_TIM_IC_Start_IT+0xca>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <HAL_TIM_IC_Start_IT+0xda>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd4:	e013      	b.n	8005cfe <HAL_TIM_IC_Start_IT+0x102>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_IC_Start_IT+0xea>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ce4:	e00b      	b.n	8005cfe <HAL_TIM_IC_Start_IT+0x102>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d104      	bne.n	8005cf6 <HAL_TIM_IC_Start_IT+0xfa>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf4:	e003      	b.n	8005cfe <HAL_TIM_IC_Start_IT+0x102>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b0c      	cmp	r3, #12
 8005d02:	d841      	bhi.n	8005d88 <HAL_TIM_IC_Start_IT+0x18c>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <HAL_TIM_IC_Start_IT+0x110>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d41 	.word	0x08005d41
 8005d10:	08005d89 	.word	0x08005d89
 8005d14:	08005d89 	.word	0x08005d89
 8005d18:	08005d89 	.word	0x08005d89
 8005d1c:	08005d53 	.word	0x08005d53
 8005d20:	08005d89 	.word	0x08005d89
 8005d24:	08005d89 	.word	0x08005d89
 8005d28:	08005d89 	.word	0x08005d89
 8005d2c:	08005d65 	.word	0x08005d65
 8005d30:	08005d89 	.word	0x08005d89
 8005d34:	08005d89 	.word	0x08005d89
 8005d38:	08005d89 	.word	0x08005d89
 8005d3c:	08005d77 	.word	0x08005d77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0202 	orr.w	r2, r2, #2
 8005d4e:	60da      	str	r2, [r3, #12]
      break;
 8005d50:	e01d      	b.n	8005d8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0204 	orr.w	r2, r2, #4
 8005d60:	60da      	str	r2, [r3, #12]
      break;
 8005d62:	e014      	b.n	8005d8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0208 	orr.w	r2, r2, #8
 8005d72:	60da      	str	r2, [r3, #12]
      break;
 8005d74:	e00b      	b.n	8005d8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0210 	orr.w	r2, r2, #16
 8005d84:	60da      	str	r2, [r3, #12]
      break;
 8005d86:	e002      	b.n	8005d8e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d13e      	bne.n	8005e12 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f001 f80a 	bl	8006db6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a1d      	ldr	r2, [pc, #116]	; (8005e1c <HAL_TIM_IC_Start_IT+0x220>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d018      	beq.n	8005dde <HAL_TIM_IC_Start_IT+0x1e2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db4:	d013      	beq.n	8005dde <HAL_TIM_IC_Start_IT+0x1e2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a19      	ldr	r2, [pc, #100]	; (8005e20 <HAL_TIM_IC_Start_IT+0x224>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00e      	beq.n	8005dde <HAL_TIM_IC_Start_IT+0x1e2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a17      	ldr	r2, [pc, #92]	; (8005e24 <HAL_TIM_IC_Start_IT+0x228>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d009      	beq.n	8005dde <HAL_TIM_IC_Start_IT+0x1e2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a16      	ldr	r2, [pc, #88]	; (8005e28 <HAL_TIM_IC_Start_IT+0x22c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d004      	beq.n	8005dde <HAL_TIM_IC_Start_IT+0x1e2>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a14      	ldr	r2, [pc, #80]	; (8005e2c <HAL_TIM_IC_Start_IT+0x230>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d111      	bne.n	8005e02 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b06      	cmp	r3, #6
 8005dee:	d010      	beq.n	8005e12 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e00:	e007      	b.n	8005e12 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0201 	orr.w	r2, r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40000400 	.word	0x40000400
 8005e24:	40000800 	.word	0x40000800
 8005e28:	40000c00 	.word	0x40000c00
 8005e2c:	40014000 	.word	0x40014000

08005e30 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b0c      	cmp	r3, #12
 8005e42:	d841      	bhi.n	8005ec8 <HAL_TIM_IC_Stop_IT+0x98>
 8005e44:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <HAL_TIM_IC_Stop_IT+0x1c>)
 8005e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4a:	bf00      	nop
 8005e4c:	08005e81 	.word	0x08005e81
 8005e50:	08005ec9 	.word	0x08005ec9
 8005e54:	08005ec9 	.word	0x08005ec9
 8005e58:	08005ec9 	.word	0x08005ec9
 8005e5c:	08005e93 	.word	0x08005e93
 8005e60:	08005ec9 	.word	0x08005ec9
 8005e64:	08005ec9 	.word	0x08005ec9
 8005e68:	08005ec9 	.word	0x08005ec9
 8005e6c:	08005ea5 	.word	0x08005ea5
 8005e70:	08005ec9 	.word	0x08005ec9
 8005e74:	08005ec9 	.word	0x08005ec9
 8005e78:	08005ec9 	.word	0x08005ec9
 8005e7c:	08005eb7 	.word	0x08005eb7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0202 	bic.w	r2, r2, #2
 8005e8e:	60da      	str	r2, [r3, #12]
      break;
 8005e90:	e01d      	b.n	8005ece <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0204 	bic.w	r2, r2, #4
 8005ea0:	60da      	str	r2, [r3, #12]
      break;
 8005ea2:	e014      	b.n	8005ece <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0208 	bic.w	r2, r2, #8
 8005eb2:	60da      	str	r2, [r3, #12]
      break;
 8005eb4:	e00b      	b.n	8005ece <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0210 	bic.w	r2, r2, #16
 8005ec4:	60da      	str	r2, [r3, #12]
      break;
 8005ec6:	e002      	b.n	8005ece <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	73fb      	strb	r3, [r7, #15]
      break;
 8005ecc:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d156      	bne.n	8005f82 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 ff6a 	bl	8006db6 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6a1a      	ldr	r2, [r3, #32]
 8005ee8:	f241 1311 	movw	r3, #4369	; 0x1111
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10f      	bne.n	8005f12 <HAL_TIM_IC_Stop_IT+0xe2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6a1a      	ldr	r2, [r3, #32]
 8005ef8:	f240 4344 	movw	r3, #1092	; 0x444
 8005efc:	4013      	ands	r3, r2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d107      	bne.n	8005f12 <HAL_TIM_IC_Stop_IT+0xe2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0201 	bic.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <HAL_TIM_IC_Stop_IT+0xf2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f20:	e013      	b.n	8005f4a <HAL_TIM_IC_Stop_IT+0x11a>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d104      	bne.n	8005f32 <HAL_TIM_IC_Stop_IT+0x102>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f30:	e00b      	b.n	8005f4a <HAL_TIM_IC_Stop_IT+0x11a>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d104      	bne.n	8005f42 <HAL_TIM_IC_Stop_IT+0x112>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f40:	e003      	b.n	8005f4a <HAL_TIM_IC_Stop_IT+0x11a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d104      	bne.n	8005f5a <HAL_TIM_IC_Stop_IT+0x12a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f58:	e013      	b.n	8005f82 <HAL_TIM_IC_Stop_IT+0x152>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d104      	bne.n	8005f6a <HAL_TIM_IC_Stop_IT+0x13a>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f68:	e00b      	b.n	8005f82 <HAL_TIM_IC_Stop_IT+0x152>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d104      	bne.n	8005f7a <HAL_TIM_IC_Stop_IT+0x14a>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f78:	e003      	b.n	8005f82 <HAL_TIM_IC_Stop_IT+0x152>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d122      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d11b      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0202 	mvn.w	r2, #2
 8005fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fa98 	bl	8006504 <HAL_TIM_IC_CaptureCallback>
 8005fd4:	e005      	b.n	8005fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fa8a 	bl	80064f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fa9b 	bl	8006518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d122      	bne.n	800603c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b04      	cmp	r3, #4
 8006002:	d11b      	bne.n	800603c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0204 	mvn.w	r2, #4
 800600c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa6e 	bl	8006504 <HAL_TIM_IC_CaptureCallback>
 8006028:	e005      	b.n	8006036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fa60 	bl	80064f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fa71 	bl	8006518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b08      	cmp	r3, #8
 8006048:	d122      	bne.n	8006090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b08      	cmp	r3, #8
 8006056:	d11b      	bne.n	8006090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0208 	mvn.w	r2, #8
 8006060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2204      	movs	r2, #4
 8006066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fa44 	bl	8006504 <HAL_TIM_IC_CaptureCallback>
 800607c:	e005      	b.n	800608a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fa36 	bl	80064f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fa47 	bl	8006518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b10      	cmp	r3, #16
 800609c:	d122      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d11b      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0210 	mvn.w	r2, #16
 80060b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2208      	movs	r2, #8
 80060ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fa1a 	bl	8006504 <HAL_TIM_IC_CaptureCallback>
 80060d0:	e005      	b.n	80060de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa0c 	bl	80064f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fa1d 	bl	8006518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d10e      	bne.n	8006110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d107      	bne.n	8006110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0201 	mvn.w	r2, #1
 8006108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f9e6 	bl	80064dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b80      	cmp	r3, #128	; 0x80
 800611c:	d10e      	bne.n	800613c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006128:	2b80      	cmp	r3, #128	; 0x80
 800612a:	d107      	bne.n	800613c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 f88e 	bl	8007258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006146:	2b40      	cmp	r3, #64	; 0x40
 8006148:	d10e      	bne.n	8006168 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b40      	cmp	r3, #64	; 0x40
 8006156:	d107      	bne.n	8006168 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f9e2 	bl	800652c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b20      	cmp	r3, #32
 8006174:	d10e      	bne.n	8006194 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0320 	and.w	r3, r3, #32
 8006180:	2b20      	cmp	r3, #32
 8006182:	d107      	bne.n	8006194 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0220 	mvn.w	r2, #32
 800618c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f001 f858 	bl	8007244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006194:	bf00      	nop
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_TIM_IC_ConfigChannel+0x1e>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e088      	b.n	80062cc <HAL_TIM_IC_ConfigChannel+0x130>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d11b      	bne.n	8006200 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6819      	ldr	r1, [r3, #0]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f000 fc50 	bl	8006a7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 020c 	bic.w	r2, r2, #12
 80061ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6999      	ldr	r1, [r3, #24]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	619a      	str	r2, [r3, #24]
 80061fe:	e060      	b.n	80062c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b04      	cmp	r3, #4
 8006204:	d11c      	bne.n	8006240 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	6819      	ldr	r1, [r3, #0]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f000 fcc8 	bl	8006baa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699a      	ldr	r2, [r3, #24]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006228:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6999      	ldr	r1, [r3, #24]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	021a      	lsls	r2, r3, #8
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	619a      	str	r2, [r3, #24]
 800623e:	e040      	b.n	80062c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b08      	cmp	r3, #8
 8006244:	d11b      	bne.n	800627e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	6819      	ldr	r1, [r3, #0]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f000 fd15 	bl	8006c84 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 020c 	bic.w	r2, r2, #12
 8006268:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69d9      	ldr	r1, [r3, #28]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	61da      	str	r2, [r3, #28]
 800627c:	e021      	b.n	80062c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b0c      	cmp	r3, #12
 8006282:	d11c      	bne.n	80062be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6818      	ldr	r0, [r3, #0]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6819      	ldr	r1, [r3, #0]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f000 fd32 	bl	8006cfc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69da      	ldr	r2, [r3, #28]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80062a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69d9      	ldr	r1, [r3, #28]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	021a      	lsls	r2, r3, #8
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	61da      	str	r2, [r3, #28]
 80062bc:	e001      	b.n	80062c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e0ae      	b.n	8006450 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b0c      	cmp	r3, #12
 80062fe:	f200 809f 	bhi.w	8006440 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006302:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006308:	0800633d 	.word	0x0800633d
 800630c:	08006441 	.word	0x08006441
 8006310:	08006441 	.word	0x08006441
 8006314:	08006441 	.word	0x08006441
 8006318:	0800637d 	.word	0x0800637d
 800631c:	08006441 	.word	0x08006441
 8006320:	08006441 	.word	0x08006441
 8006324:	08006441 	.word	0x08006441
 8006328:	080063bf 	.word	0x080063bf
 800632c:	08006441 	.word	0x08006441
 8006330:	08006441 	.word	0x08006441
 8006334:	08006441 	.word	0x08006441
 8006338:	080063ff 	.word	0x080063ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	4618      	mov	r0, r3
 8006344:	f000 f97c 	bl	8006640 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0208 	orr.w	r2, r2, #8
 8006356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0204 	bic.w	r2, r2, #4
 8006366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6999      	ldr	r1, [r3, #24]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	691a      	ldr	r2, [r3, #16]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	619a      	str	r2, [r3, #24]
      break;
 800637a:	e064      	b.n	8006446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 f9c2 	bl	800670c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6999      	ldr	r1, [r3, #24]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	021a      	lsls	r2, r3, #8
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	619a      	str	r2, [r3, #24]
      break;
 80063bc:	e043      	b.n	8006446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68b9      	ldr	r1, [r7, #8]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 fa0d 	bl	80067e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69da      	ldr	r2, [r3, #28]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0208 	orr.w	r2, r2, #8
 80063d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0204 	bic.w	r2, r2, #4
 80063e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69d9      	ldr	r1, [r3, #28]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	61da      	str	r2, [r3, #28]
      break;
 80063fc:	e023      	b.n	8006446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68b9      	ldr	r1, [r7, #8]
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fa57 	bl	80068b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69da      	ldr	r2, [r3, #28]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69d9      	ldr	r1, [r3, #28]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	021a      	lsls	r2, r3, #8
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	61da      	str	r2, [r3, #28]
      break;
 800643e:	e002      	b.n	8006446 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	75fb      	strb	r3, [r7, #23]
      break;
 8006444:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800644e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_TIM_SlaveConfigSynchro+0x18>
 800646c:	2302      	movs	r3, #2
 800646e:	e031      	b.n	80064d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa68 	bl	8006958 <TIM_SlaveTimer_SetConfig>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e018      	b.n	80064d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064b0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064c0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a34      	ldr	r2, [pc, #208]	; (8006624 <TIM_Base_SetConfig+0xe4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00f      	beq.n	8006578 <TIM_Base_SetConfig+0x38>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655e:	d00b      	beq.n	8006578 <TIM_Base_SetConfig+0x38>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a31      	ldr	r2, [pc, #196]	; (8006628 <TIM_Base_SetConfig+0xe8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d007      	beq.n	8006578 <TIM_Base_SetConfig+0x38>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a30      	ldr	r2, [pc, #192]	; (800662c <TIM_Base_SetConfig+0xec>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d003      	beq.n	8006578 <TIM_Base_SetConfig+0x38>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a2f      	ldr	r2, [pc, #188]	; (8006630 <TIM_Base_SetConfig+0xf0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d108      	bne.n	800658a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a25      	ldr	r2, [pc, #148]	; (8006624 <TIM_Base_SetConfig+0xe4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01b      	beq.n	80065ca <TIM_Base_SetConfig+0x8a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006598:	d017      	beq.n	80065ca <TIM_Base_SetConfig+0x8a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a22      	ldr	r2, [pc, #136]	; (8006628 <TIM_Base_SetConfig+0xe8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d013      	beq.n	80065ca <TIM_Base_SetConfig+0x8a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a21      	ldr	r2, [pc, #132]	; (800662c <TIM_Base_SetConfig+0xec>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00f      	beq.n	80065ca <TIM_Base_SetConfig+0x8a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a20      	ldr	r2, [pc, #128]	; (8006630 <TIM_Base_SetConfig+0xf0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00b      	beq.n	80065ca <TIM_Base_SetConfig+0x8a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1f      	ldr	r2, [pc, #124]	; (8006634 <TIM_Base_SetConfig+0xf4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d007      	beq.n	80065ca <TIM_Base_SetConfig+0x8a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1e      	ldr	r2, [pc, #120]	; (8006638 <TIM_Base_SetConfig+0xf8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d003      	beq.n	80065ca <TIM_Base_SetConfig+0x8a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1d      	ldr	r2, [pc, #116]	; (800663c <TIM_Base_SetConfig+0xfc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d108      	bne.n	80065dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a08      	ldr	r2, [pc, #32]	; (8006624 <TIM_Base_SetConfig+0xe4>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d103      	bne.n	8006610 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	691a      	ldr	r2, [r3, #16]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	615a      	str	r2, [r3, #20]
}
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40010000 	.word	0x40010000
 8006628:	40000400 	.word	0x40000400
 800662c:	40000800 	.word	0x40000800
 8006630:	40000c00 	.word	0x40000c00
 8006634:	40014000 	.word	0x40014000
 8006638:	40014400 	.word	0x40014400
 800663c:	40014800 	.word	0x40014800

08006640 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f023 0201 	bic.w	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0303 	bic.w	r3, r3, #3
 8006676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f023 0302 	bic.w	r3, r3, #2
 8006688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a1c      	ldr	r2, [pc, #112]	; (8006708 <TIM_OC1_SetConfig+0xc8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d10c      	bne.n	80066b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f023 0308 	bic.w	r3, r3, #8
 80066a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f023 0304 	bic.w	r3, r3, #4
 80066b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a13      	ldr	r2, [pc, #76]	; (8006708 <TIM_OC1_SetConfig+0xc8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d111      	bne.n	80066e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	621a      	str	r2, [r3, #32]
}
 80066fc:	bf00      	nop
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	40010000 	.word	0x40010000

0800670c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f023 0210 	bic.w	r2, r3, #16
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	021b      	lsls	r3, r3, #8
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f023 0320 	bic.w	r3, r3, #32
 8006756:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a1e      	ldr	r2, [pc, #120]	; (80067e0 <TIM_OC2_SetConfig+0xd4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d10d      	bne.n	8006788 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a15      	ldr	r2, [pc, #84]	; (80067e0 <TIM_OC2_SetConfig+0xd4>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d113      	bne.n	80067b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006796:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800679e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	621a      	str	r2, [r3, #32]
}
 80067d2:	bf00      	nop
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	40010000 	.word	0x40010000

080067e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0303 	bic.w	r3, r3, #3
 800681a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800682c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	021b      	lsls	r3, r3, #8
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <TIM_OC3_SetConfig+0xd0>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d10d      	bne.n	800685e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800685c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a14      	ldr	r2, [pc, #80]	; (80068b4 <TIM_OC3_SetConfig+0xd0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d113      	bne.n	800688e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800686c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	621a      	str	r2, [r3, #32]
}
 80068a8:	bf00      	nop
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40010000 	.word	0x40010000

080068b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	031b      	lsls	r3, r3, #12
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a10      	ldr	r2, [pc, #64]	; (8006954 <TIM_OC4_SetConfig+0x9c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d109      	bne.n	800692c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800691e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	019b      	lsls	r3, r3, #6
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	621a      	str	r2, [r3, #32]
}
 8006946:	bf00      	nop
 8006948:	371c      	adds	r7, #28
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40010000 	.word	0x40010000

08006958 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006974:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f023 0307 	bic.w	r3, r3, #7
 8006986:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2b70      	cmp	r3, #112	; 0x70
 80069a0:	d01a      	beq.n	80069d8 <TIM_SlaveTimer_SetConfig+0x80>
 80069a2:	2b70      	cmp	r3, #112	; 0x70
 80069a4:	d860      	bhi.n	8006a68 <TIM_SlaveTimer_SetConfig+0x110>
 80069a6:	2b60      	cmp	r3, #96	; 0x60
 80069a8:	d054      	beq.n	8006a54 <TIM_SlaveTimer_SetConfig+0xfc>
 80069aa:	2b60      	cmp	r3, #96	; 0x60
 80069ac:	d85c      	bhi.n	8006a68 <TIM_SlaveTimer_SetConfig+0x110>
 80069ae:	2b50      	cmp	r3, #80	; 0x50
 80069b0:	d046      	beq.n	8006a40 <TIM_SlaveTimer_SetConfig+0xe8>
 80069b2:	2b50      	cmp	r3, #80	; 0x50
 80069b4:	d858      	bhi.n	8006a68 <TIM_SlaveTimer_SetConfig+0x110>
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	d019      	beq.n	80069ee <TIM_SlaveTimer_SetConfig+0x96>
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d854      	bhi.n	8006a68 <TIM_SlaveTimer_SetConfig+0x110>
 80069be:	2b30      	cmp	r3, #48	; 0x30
 80069c0:	d055      	beq.n	8006a6e <TIM_SlaveTimer_SetConfig+0x116>
 80069c2:	2b30      	cmp	r3, #48	; 0x30
 80069c4:	d850      	bhi.n	8006a68 <TIM_SlaveTimer_SetConfig+0x110>
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d051      	beq.n	8006a6e <TIM_SlaveTimer_SetConfig+0x116>
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d84c      	bhi.n	8006a68 <TIM_SlaveTimer_SetConfig+0x110>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d04d      	beq.n	8006a6e <TIM_SlaveTimer_SetConfig+0x116>
 80069d2:	2b10      	cmp	r3, #16
 80069d4:	d04b      	beq.n	8006a6e <TIM_SlaveTimer_SetConfig+0x116>
 80069d6:	e047      	b.n	8006a68 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	68d9      	ldr	r1, [r3, #12]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f000 f9c5 	bl	8006d76 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80069ec:	e040      	b.n	8006a70 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b05      	cmp	r3, #5
 80069f4:	d101      	bne.n	80069fa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e03b      	b.n	8006a72 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6a1a      	ldr	r2, [r3, #32]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0201 	bic.w	r2, r2, #1
 8006a10:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a20:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	621a      	str	r2, [r3, #32]
      break;
 8006a3e:	e017      	b.n	8006a70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	6899      	ldr	r1, [r3, #8]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f000 f87d 	bl	8006b4c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006a52:	e00d      	b.n	8006a70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	6899      	ldr	r1, [r3, #8]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	461a      	mov	r2, r3
 8006a62:	f000 f8df 	bl	8006c24 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006a66:	e003      	b.n	8006a70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6c:	e000      	b.n	8006a70 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006a6e:	bf00      	nop
  }

  return status;
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f023 0201 	bic.w	r2, r3, #1
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4a24      	ldr	r2, [pc, #144]	; (8006b38 <TIM_TI1_SetConfig+0xbc>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d013      	beq.n	8006ad2 <TIM_TI1_SetConfig+0x56>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab0:	d00f      	beq.n	8006ad2 <TIM_TI1_SetConfig+0x56>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4a21      	ldr	r2, [pc, #132]	; (8006b3c <TIM_TI1_SetConfig+0xc0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00b      	beq.n	8006ad2 <TIM_TI1_SetConfig+0x56>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4a20      	ldr	r2, [pc, #128]	; (8006b40 <TIM_TI1_SetConfig+0xc4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d007      	beq.n	8006ad2 <TIM_TI1_SetConfig+0x56>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4a1f      	ldr	r2, [pc, #124]	; (8006b44 <TIM_TI1_SetConfig+0xc8>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d003      	beq.n	8006ad2 <TIM_TI1_SetConfig+0x56>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4a1e      	ldr	r2, [pc, #120]	; (8006b48 <TIM_TI1_SetConfig+0xcc>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d101      	bne.n	8006ad6 <TIM_TI1_SetConfig+0x5a>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <TIM_TI1_SetConfig+0x5c>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d008      	beq.n	8006aee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f023 0303 	bic.w	r3, r3, #3
 8006ae2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	e003      	b.n	8006af6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f043 0301 	orr.w	r3, r3, #1
 8006af4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f023 030a 	bic.w	r3, r3, #10
 8006b10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f003 030a 	and.w	r3, r3, #10
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	621a      	str	r2, [r3, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	371c      	adds	r7, #28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	40010000 	.word	0x40010000
 8006b3c:	40000400 	.word	0x40000400
 8006b40:	40000800 	.word	0x40000800
 8006b44:	40000c00 	.word	0x40000c00
 8006b48:	40014000 	.word	0x40014000

08006b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f023 0201 	bic.w	r2, r3, #1
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f023 030a 	bic.w	r3, r3, #10
 8006b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	621a      	str	r2, [r3, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b087      	sub	sp, #28
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	60b9      	str	r1, [r7, #8]
 8006bb4:	607a      	str	r2, [r7, #4]
 8006bb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	f023 0210 	bic.w	r2, r3, #16
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	021b      	lsls	r3, r3, #8
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006be8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	031b      	lsls	r3, r3, #12
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bfc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	621a      	str	r2, [r3, #32]
}
 8006c18:	bf00      	nop
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	f023 0210 	bic.w	r2, r3, #16
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	031b      	lsls	r3, r3, #12
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	621a      	str	r2, [r3, #32]
}
 8006c78:	bf00      	nop
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
 8006c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f023 0303 	bic.w	r3, r3, #3
 8006cb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006cd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	621a      	str	r2, [r3, #32]
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	031b      	lsls	r3, r3, #12
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006d4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	031b      	lsls	r3, r3, #12
 8006d54:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	621a      	str	r2, [r3, #32]
}
 8006d6a:	bf00      	nop
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b087      	sub	sp, #28
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	021a      	lsls	r2, r3, #8
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	609a      	str	r2, [r3, #8]
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b087      	sub	sp, #28
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	2201      	movs	r2, #1
 8006dca:	fa02 f303 	lsl.w	r3, r2, r3
 8006dce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a1a      	ldr	r2, [r3, #32]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	43db      	mvns	r3, r3
 8006dd8:	401a      	ands	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6a1a      	ldr	r2, [r3, #32]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f003 031f 	and.w	r3, r3, #31
 8006de8:	6879      	ldr	r1, [r7, #4]
 8006dea:	fa01 f303 	lsl.w	r3, r1, r3
 8006dee:	431a      	orrs	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	621a      	str	r2, [r3, #32]
}
 8006df4:	bf00      	nop
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	; 0x28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e09a      	b.n	8006f4a <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d106      	bne.n	8006e2e <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7fb f8e9 	bl	8002000 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2202      	movs	r2, #2
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4610      	mov	r0, r2
 8006e42:	f7ff fb7d 	bl	8006540 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6819      	ldr	r1, [r3, #0]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	2203      	movs	r2, #3
 8006e54:	f7ff fe12 	bl	8006a7c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699a      	ldr	r2, [r3, #24]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 020c 	bic.w	r2, r2, #12
 8006e66:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6999      	ldr	r1, [r3, #24]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e88:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006e98:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ea8:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0207 	bic.w	r2, r2, #7
 8006eb8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f042 0204 	orr.w	r2, r2, #4
 8006ec8:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006ed2:	2370      	movs	r3, #112	; 0x70
 8006ed4:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f107 020c 	add.w	r2, r7, #12
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff fc0a 	bl	800670c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006f06:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8006f16:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3728      	adds	r7, #40	; 0x28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
	...

08006f54 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f62:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f6a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f72:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f7a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d108      	bne.n	8006f94 <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d105      	bne.n	8006f94 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f88:	7b7b      	ldrb	r3, [r7, #13]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d102      	bne.n	8006f94 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f8e:	7b3b      	ldrb	r3, [r7, #12]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d001      	beq.n	8006f98 <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e04f      	b.n	8007038 <HAL_TIMEx_HallSensor_Start+0xe4>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff fef8 	bl	8006db6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a1d      	ldr	r2, [pc, #116]	; (8007040 <HAL_TIMEx_HallSensor_Start+0xec>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d018      	beq.n	8007002 <HAL_TIMEx_HallSensor_Start+0xae>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd8:	d013      	beq.n	8007002 <HAL_TIMEx_HallSensor_Start+0xae>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a19      	ldr	r2, [pc, #100]	; (8007044 <HAL_TIMEx_HallSensor_Start+0xf0>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d00e      	beq.n	8007002 <HAL_TIMEx_HallSensor_Start+0xae>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a17      	ldr	r2, [pc, #92]	; (8007048 <HAL_TIMEx_HallSensor_Start+0xf4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d009      	beq.n	8007002 <HAL_TIMEx_HallSensor_Start+0xae>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a16      	ldr	r2, [pc, #88]	; (800704c <HAL_TIMEx_HallSensor_Start+0xf8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d004      	beq.n	8007002 <HAL_TIMEx_HallSensor_Start+0xae>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a14      	ldr	r2, [pc, #80]	; (8007050 <HAL_TIMEx_HallSensor_Start+0xfc>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d111      	bne.n	8007026 <HAL_TIMEx_HallSensor_Start+0xd2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b06      	cmp	r3, #6
 8007012:	d010      	beq.n	8007036 <HAL_TIMEx_HallSensor_Start+0xe2>
    {
      __HAL_TIM_ENABLE(htim);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007024:	e007      	b.n	8007036 <HAL_TIMEx_HallSensor_Start+0xe2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f042 0201 	orr.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40010000 	.word	0x40010000
 8007044:	40000400 	.word	0x40000400
 8007048:	40000800 	.word	0x40000800
 800704c:	40000c00 	.word	0x40000c00
 8007050:	40014000 	.word	0x40014000

08007054 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2200      	movs	r2, #0
 8007062:	2100      	movs	r1, #0
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff fea6 	bl	8006db6 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6a1a      	ldr	r2, [r3, #32]
 8007070:	f241 1311 	movw	r3, #4369	; 0x1111
 8007074:	4013      	ands	r3, r2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10f      	bne.n	800709a <HAL_TIMEx_HallSensor_Stop+0x46>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6a1a      	ldr	r2, [r3, #32]
 8007080:	f240 4344 	movw	r3, #1092	; 0x444
 8007084:	4013      	ands	r3, r2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d107      	bne.n	800709a <HAL_TIMEx_HallSensor_Stop+0x46>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0201 	bic.w	r2, r2, #1
 8007098:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070d8:	2302      	movs	r3, #2
 80070da:	e050      	b.n	800717e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a1c      	ldr	r2, [pc, #112]	; (800718c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d018      	beq.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007128:	d013      	beq.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a18      	ldr	r2, [pc, #96]	; (8007190 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00e      	beq.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a16      	ldr	r2, [pc, #88]	; (8007194 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d009      	beq.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a15      	ldr	r2, [pc, #84]	; (8007198 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d004      	beq.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a13      	ldr	r2, [pc, #76]	; (800719c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d10c      	bne.n	800716c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	4313      	orrs	r3, r2
 8007162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40010000 	.word	0x40010000
 8007190:	40000400 	.word	0x40000400
 8007194:	40000800 	.word	0x40000800
 8007198:	40000c00 	.word	0x40000c00
 800719c:	40014000 	.word	0x40014000

080071a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e03d      	b.n	8007238 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <__cvt>:
 800726c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007270:	ec55 4b10 	vmov	r4, r5, d0
 8007274:	2d00      	cmp	r5, #0
 8007276:	460e      	mov	r6, r1
 8007278:	4619      	mov	r1, r3
 800727a:	462b      	mov	r3, r5
 800727c:	bfbb      	ittet	lt
 800727e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007282:	461d      	movlt	r5, r3
 8007284:	2300      	movge	r3, #0
 8007286:	232d      	movlt	r3, #45	; 0x2d
 8007288:	700b      	strb	r3, [r1, #0]
 800728a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800728c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007290:	4691      	mov	r9, r2
 8007292:	f023 0820 	bic.w	r8, r3, #32
 8007296:	bfbc      	itt	lt
 8007298:	4622      	movlt	r2, r4
 800729a:	4614      	movlt	r4, r2
 800729c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072a0:	d005      	beq.n	80072ae <__cvt+0x42>
 80072a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80072a6:	d100      	bne.n	80072aa <__cvt+0x3e>
 80072a8:	3601      	adds	r6, #1
 80072aa:	2102      	movs	r1, #2
 80072ac:	e000      	b.n	80072b0 <__cvt+0x44>
 80072ae:	2103      	movs	r1, #3
 80072b0:	ab03      	add	r3, sp, #12
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	ab02      	add	r3, sp, #8
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	ec45 4b10 	vmov	d0, r4, r5
 80072bc:	4653      	mov	r3, sl
 80072be:	4632      	mov	r2, r6
 80072c0:	f000 fe4a 	bl	8007f58 <_dtoa_r>
 80072c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072c8:	4607      	mov	r7, r0
 80072ca:	d102      	bne.n	80072d2 <__cvt+0x66>
 80072cc:	f019 0f01 	tst.w	r9, #1
 80072d0:	d022      	beq.n	8007318 <__cvt+0xac>
 80072d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072d6:	eb07 0906 	add.w	r9, r7, r6
 80072da:	d110      	bne.n	80072fe <__cvt+0x92>
 80072dc:	783b      	ldrb	r3, [r7, #0]
 80072de:	2b30      	cmp	r3, #48	; 0x30
 80072e0:	d10a      	bne.n	80072f8 <__cvt+0x8c>
 80072e2:	2200      	movs	r2, #0
 80072e4:	2300      	movs	r3, #0
 80072e6:	4620      	mov	r0, r4
 80072e8:	4629      	mov	r1, r5
 80072ea:	f7f9 fbf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80072ee:	b918      	cbnz	r0, 80072f8 <__cvt+0x8c>
 80072f0:	f1c6 0601 	rsb	r6, r6, #1
 80072f4:	f8ca 6000 	str.w	r6, [sl]
 80072f8:	f8da 3000 	ldr.w	r3, [sl]
 80072fc:	4499      	add	r9, r3
 80072fe:	2200      	movs	r2, #0
 8007300:	2300      	movs	r3, #0
 8007302:	4620      	mov	r0, r4
 8007304:	4629      	mov	r1, r5
 8007306:	f7f9 fbe7 	bl	8000ad8 <__aeabi_dcmpeq>
 800730a:	b108      	cbz	r0, 8007310 <__cvt+0xa4>
 800730c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007310:	2230      	movs	r2, #48	; 0x30
 8007312:	9b03      	ldr	r3, [sp, #12]
 8007314:	454b      	cmp	r3, r9
 8007316:	d307      	bcc.n	8007328 <__cvt+0xbc>
 8007318:	9b03      	ldr	r3, [sp, #12]
 800731a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800731c:	1bdb      	subs	r3, r3, r7
 800731e:	4638      	mov	r0, r7
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	b004      	add	sp, #16
 8007324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007328:	1c59      	adds	r1, r3, #1
 800732a:	9103      	str	r1, [sp, #12]
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	e7f0      	b.n	8007312 <__cvt+0xa6>

08007330 <__exponent>:
 8007330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007332:	4603      	mov	r3, r0
 8007334:	2900      	cmp	r1, #0
 8007336:	bfb8      	it	lt
 8007338:	4249      	neglt	r1, r1
 800733a:	f803 2b02 	strb.w	r2, [r3], #2
 800733e:	bfb4      	ite	lt
 8007340:	222d      	movlt	r2, #45	; 0x2d
 8007342:	222b      	movge	r2, #43	; 0x2b
 8007344:	2909      	cmp	r1, #9
 8007346:	7042      	strb	r2, [r0, #1]
 8007348:	dd2a      	ble.n	80073a0 <__exponent+0x70>
 800734a:	f10d 0207 	add.w	r2, sp, #7
 800734e:	4617      	mov	r7, r2
 8007350:	260a      	movs	r6, #10
 8007352:	4694      	mov	ip, r2
 8007354:	fb91 f5f6 	sdiv	r5, r1, r6
 8007358:	fb06 1415 	mls	r4, r6, r5, r1
 800735c:	3430      	adds	r4, #48	; 0x30
 800735e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007362:	460c      	mov	r4, r1
 8007364:	2c63      	cmp	r4, #99	; 0x63
 8007366:	f102 32ff 	add.w	r2, r2, #4294967295
 800736a:	4629      	mov	r1, r5
 800736c:	dcf1      	bgt.n	8007352 <__exponent+0x22>
 800736e:	3130      	adds	r1, #48	; 0x30
 8007370:	f1ac 0402 	sub.w	r4, ip, #2
 8007374:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007378:	1c41      	adds	r1, r0, #1
 800737a:	4622      	mov	r2, r4
 800737c:	42ba      	cmp	r2, r7
 800737e:	d30a      	bcc.n	8007396 <__exponent+0x66>
 8007380:	f10d 0209 	add.w	r2, sp, #9
 8007384:	eba2 020c 	sub.w	r2, r2, ip
 8007388:	42bc      	cmp	r4, r7
 800738a:	bf88      	it	hi
 800738c:	2200      	movhi	r2, #0
 800738e:	4413      	add	r3, r2
 8007390:	1a18      	subs	r0, r3, r0
 8007392:	b003      	add	sp, #12
 8007394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007396:	f812 5b01 	ldrb.w	r5, [r2], #1
 800739a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800739e:	e7ed      	b.n	800737c <__exponent+0x4c>
 80073a0:	2330      	movs	r3, #48	; 0x30
 80073a2:	3130      	adds	r1, #48	; 0x30
 80073a4:	7083      	strb	r3, [r0, #2]
 80073a6:	70c1      	strb	r1, [r0, #3]
 80073a8:	1d03      	adds	r3, r0, #4
 80073aa:	e7f1      	b.n	8007390 <__exponent+0x60>

080073ac <_printf_float>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	ed2d 8b02 	vpush	{d8}
 80073b4:	b08d      	sub	sp, #52	; 0x34
 80073b6:	460c      	mov	r4, r1
 80073b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80073bc:	4616      	mov	r6, r2
 80073be:	461f      	mov	r7, r3
 80073c0:	4605      	mov	r5, r0
 80073c2:	f000 fcc7 	bl	8007d54 <_localeconv_r>
 80073c6:	f8d0 a000 	ldr.w	sl, [r0]
 80073ca:	4650      	mov	r0, sl
 80073cc:	f7f8 ff58 	bl	8000280 <strlen>
 80073d0:	2300      	movs	r3, #0
 80073d2:	930a      	str	r3, [sp, #40]	; 0x28
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	9305      	str	r3, [sp, #20]
 80073d8:	f8d8 3000 	ldr.w	r3, [r8]
 80073dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80073e0:	3307      	adds	r3, #7
 80073e2:	f023 0307 	bic.w	r3, r3, #7
 80073e6:	f103 0208 	add.w	r2, r3, #8
 80073ea:	f8c8 2000 	str.w	r2, [r8]
 80073ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073f6:	9307      	str	r3, [sp, #28]
 80073f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80073fc:	ee08 0a10 	vmov	s16, r0
 8007400:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007408:	4b9e      	ldr	r3, [pc, #632]	; (8007684 <_printf_float+0x2d8>)
 800740a:	f04f 32ff 	mov.w	r2, #4294967295
 800740e:	f7f9 fb95 	bl	8000b3c <__aeabi_dcmpun>
 8007412:	bb88      	cbnz	r0, 8007478 <_printf_float+0xcc>
 8007414:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007418:	4b9a      	ldr	r3, [pc, #616]	; (8007684 <_printf_float+0x2d8>)
 800741a:	f04f 32ff 	mov.w	r2, #4294967295
 800741e:	f7f9 fb6f 	bl	8000b00 <__aeabi_dcmple>
 8007422:	bb48      	cbnz	r0, 8007478 <_printf_float+0xcc>
 8007424:	2200      	movs	r2, #0
 8007426:	2300      	movs	r3, #0
 8007428:	4640      	mov	r0, r8
 800742a:	4649      	mov	r1, r9
 800742c:	f7f9 fb5e 	bl	8000aec <__aeabi_dcmplt>
 8007430:	b110      	cbz	r0, 8007438 <_printf_float+0x8c>
 8007432:	232d      	movs	r3, #45	; 0x2d
 8007434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007438:	4a93      	ldr	r2, [pc, #588]	; (8007688 <_printf_float+0x2dc>)
 800743a:	4b94      	ldr	r3, [pc, #592]	; (800768c <_printf_float+0x2e0>)
 800743c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007440:	bf94      	ite	ls
 8007442:	4690      	movls	r8, r2
 8007444:	4698      	movhi	r8, r3
 8007446:	2303      	movs	r3, #3
 8007448:	6123      	str	r3, [r4, #16]
 800744a:	9b05      	ldr	r3, [sp, #20]
 800744c:	f023 0304 	bic.w	r3, r3, #4
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	f04f 0900 	mov.w	r9, #0
 8007456:	9700      	str	r7, [sp, #0]
 8007458:	4633      	mov	r3, r6
 800745a:	aa0b      	add	r2, sp, #44	; 0x2c
 800745c:	4621      	mov	r1, r4
 800745e:	4628      	mov	r0, r5
 8007460:	f000 f9da 	bl	8007818 <_printf_common>
 8007464:	3001      	adds	r0, #1
 8007466:	f040 8090 	bne.w	800758a <_printf_float+0x1de>
 800746a:	f04f 30ff 	mov.w	r0, #4294967295
 800746e:	b00d      	add	sp, #52	; 0x34
 8007470:	ecbd 8b02 	vpop	{d8}
 8007474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007478:	4642      	mov	r2, r8
 800747a:	464b      	mov	r3, r9
 800747c:	4640      	mov	r0, r8
 800747e:	4649      	mov	r1, r9
 8007480:	f7f9 fb5c 	bl	8000b3c <__aeabi_dcmpun>
 8007484:	b140      	cbz	r0, 8007498 <_printf_float+0xec>
 8007486:	464b      	mov	r3, r9
 8007488:	2b00      	cmp	r3, #0
 800748a:	bfbc      	itt	lt
 800748c:	232d      	movlt	r3, #45	; 0x2d
 800748e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007492:	4a7f      	ldr	r2, [pc, #508]	; (8007690 <_printf_float+0x2e4>)
 8007494:	4b7f      	ldr	r3, [pc, #508]	; (8007694 <_printf_float+0x2e8>)
 8007496:	e7d1      	b.n	800743c <_printf_float+0x90>
 8007498:	6863      	ldr	r3, [r4, #4]
 800749a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800749e:	9206      	str	r2, [sp, #24]
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	d13f      	bne.n	8007524 <_printf_float+0x178>
 80074a4:	2306      	movs	r3, #6
 80074a6:	6063      	str	r3, [r4, #4]
 80074a8:	9b05      	ldr	r3, [sp, #20]
 80074aa:	6861      	ldr	r1, [r4, #4]
 80074ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80074b0:	2300      	movs	r3, #0
 80074b2:	9303      	str	r3, [sp, #12]
 80074b4:	ab0a      	add	r3, sp, #40	; 0x28
 80074b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80074ba:	ab09      	add	r3, sp, #36	; 0x24
 80074bc:	ec49 8b10 	vmov	d0, r8, r9
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	6022      	str	r2, [r4, #0]
 80074c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80074c8:	4628      	mov	r0, r5
 80074ca:	f7ff fecf 	bl	800726c <__cvt>
 80074ce:	9b06      	ldr	r3, [sp, #24]
 80074d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074d2:	2b47      	cmp	r3, #71	; 0x47
 80074d4:	4680      	mov	r8, r0
 80074d6:	d108      	bne.n	80074ea <_printf_float+0x13e>
 80074d8:	1cc8      	adds	r0, r1, #3
 80074da:	db02      	blt.n	80074e2 <_printf_float+0x136>
 80074dc:	6863      	ldr	r3, [r4, #4]
 80074de:	4299      	cmp	r1, r3
 80074e0:	dd41      	ble.n	8007566 <_printf_float+0x1ba>
 80074e2:	f1ab 0302 	sub.w	r3, fp, #2
 80074e6:	fa5f fb83 	uxtb.w	fp, r3
 80074ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074ee:	d820      	bhi.n	8007532 <_printf_float+0x186>
 80074f0:	3901      	subs	r1, #1
 80074f2:	465a      	mov	r2, fp
 80074f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80074f8:	9109      	str	r1, [sp, #36]	; 0x24
 80074fa:	f7ff ff19 	bl	8007330 <__exponent>
 80074fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007500:	1813      	adds	r3, r2, r0
 8007502:	2a01      	cmp	r2, #1
 8007504:	4681      	mov	r9, r0
 8007506:	6123      	str	r3, [r4, #16]
 8007508:	dc02      	bgt.n	8007510 <_printf_float+0x164>
 800750a:	6822      	ldr	r2, [r4, #0]
 800750c:	07d2      	lsls	r2, r2, #31
 800750e:	d501      	bpl.n	8007514 <_printf_float+0x168>
 8007510:	3301      	adds	r3, #1
 8007512:	6123      	str	r3, [r4, #16]
 8007514:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007518:	2b00      	cmp	r3, #0
 800751a:	d09c      	beq.n	8007456 <_printf_float+0xaa>
 800751c:	232d      	movs	r3, #45	; 0x2d
 800751e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007522:	e798      	b.n	8007456 <_printf_float+0xaa>
 8007524:	9a06      	ldr	r2, [sp, #24]
 8007526:	2a47      	cmp	r2, #71	; 0x47
 8007528:	d1be      	bne.n	80074a8 <_printf_float+0xfc>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1bc      	bne.n	80074a8 <_printf_float+0xfc>
 800752e:	2301      	movs	r3, #1
 8007530:	e7b9      	b.n	80074a6 <_printf_float+0xfa>
 8007532:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007536:	d118      	bne.n	800756a <_printf_float+0x1be>
 8007538:	2900      	cmp	r1, #0
 800753a:	6863      	ldr	r3, [r4, #4]
 800753c:	dd0b      	ble.n	8007556 <_printf_float+0x1aa>
 800753e:	6121      	str	r1, [r4, #16]
 8007540:	b913      	cbnz	r3, 8007548 <_printf_float+0x19c>
 8007542:	6822      	ldr	r2, [r4, #0]
 8007544:	07d0      	lsls	r0, r2, #31
 8007546:	d502      	bpl.n	800754e <_printf_float+0x1a2>
 8007548:	3301      	adds	r3, #1
 800754a:	440b      	add	r3, r1
 800754c:	6123      	str	r3, [r4, #16]
 800754e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007550:	f04f 0900 	mov.w	r9, #0
 8007554:	e7de      	b.n	8007514 <_printf_float+0x168>
 8007556:	b913      	cbnz	r3, 800755e <_printf_float+0x1b2>
 8007558:	6822      	ldr	r2, [r4, #0]
 800755a:	07d2      	lsls	r2, r2, #31
 800755c:	d501      	bpl.n	8007562 <_printf_float+0x1b6>
 800755e:	3302      	adds	r3, #2
 8007560:	e7f4      	b.n	800754c <_printf_float+0x1a0>
 8007562:	2301      	movs	r3, #1
 8007564:	e7f2      	b.n	800754c <_printf_float+0x1a0>
 8007566:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800756a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800756c:	4299      	cmp	r1, r3
 800756e:	db05      	blt.n	800757c <_printf_float+0x1d0>
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	6121      	str	r1, [r4, #16]
 8007574:	07d8      	lsls	r0, r3, #31
 8007576:	d5ea      	bpl.n	800754e <_printf_float+0x1a2>
 8007578:	1c4b      	adds	r3, r1, #1
 800757a:	e7e7      	b.n	800754c <_printf_float+0x1a0>
 800757c:	2900      	cmp	r1, #0
 800757e:	bfd4      	ite	le
 8007580:	f1c1 0202 	rsble	r2, r1, #2
 8007584:	2201      	movgt	r2, #1
 8007586:	4413      	add	r3, r2
 8007588:	e7e0      	b.n	800754c <_printf_float+0x1a0>
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	055a      	lsls	r2, r3, #21
 800758e:	d407      	bmi.n	80075a0 <_printf_float+0x1f4>
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	4642      	mov	r2, r8
 8007594:	4631      	mov	r1, r6
 8007596:	4628      	mov	r0, r5
 8007598:	47b8      	blx	r7
 800759a:	3001      	adds	r0, #1
 800759c:	d12c      	bne.n	80075f8 <_printf_float+0x24c>
 800759e:	e764      	b.n	800746a <_printf_float+0xbe>
 80075a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075a4:	f240 80e0 	bls.w	8007768 <_printf_float+0x3bc>
 80075a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075ac:	2200      	movs	r2, #0
 80075ae:	2300      	movs	r3, #0
 80075b0:	f7f9 fa92 	bl	8000ad8 <__aeabi_dcmpeq>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d034      	beq.n	8007622 <_printf_float+0x276>
 80075b8:	4a37      	ldr	r2, [pc, #220]	; (8007698 <_printf_float+0x2ec>)
 80075ba:	2301      	movs	r3, #1
 80075bc:	4631      	mov	r1, r6
 80075be:	4628      	mov	r0, r5
 80075c0:	47b8      	blx	r7
 80075c2:	3001      	adds	r0, #1
 80075c4:	f43f af51 	beq.w	800746a <_printf_float+0xbe>
 80075c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075cc:	429a      	cmp	r2, r3
 80075ce:	db02      	blt.n	80075d6 <_printf_float+0x22a>
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	07d8      	lsls	r0, r3, #31
 80075d4:	d510      	bpl.n	80075f8 <_printf_float+0x24c>
 80075d6:	ee18 3a10 	vmov	r3, s16
 80075da:	4652      	mov	r2, sl
 80075dc:	4631      	mov	r1, r6
 80075de:	4628      	mov	r0, r5
 80075e0:	47b8      	blx	r7
 80075e2:	3001      	adds	r0, #1
 80075e4:	f43f af41 	beq.w	800746a <_printf_float+0xbe>
 80075e8:	f04f 0800 	mov.w	r8, #0
 80075ec:	f104 091a 	add.w	r9, r4, #26
 80075f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f2:	3b01      	subs	r3, #1
 80075f4:	4543      	cmp	r3, r8
 80075f6:	dc09      	bgt.n	800760c <_printf_float+0x260>
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	079b      	lsls	r3, r3, #30
 80075fc:	f100 8107 	bmi.w	800780e <_printf_float+0x462>
 8007600:	68e0      	ldr	r0, [r4, #12]
 8007602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007604:	4298      	cmp	r0, r3
 8007606:	bfb8      	it	lt
 8007608:	4618      	movlt	r0, r3
 800760a:	e730      	b.n	800746e <_printf_float+0xc2>
 800760c:	2301      	movs	r3, #1
 800760e:	464a      	mov	r2, r9
 8007610:	4631      	mov	r1, r6
 8007612:	4628      	mov	r0, r5
 8007614:	47b8      	blx	r7
 8007616:	3001      	adds	r0, #1
 8007618:	f43f af27 	beq.w	800746a <_printf_float+0xbe>
 800761c:	f108 0801 	add.w	r8, r8, #1
 8007620:	e7e6      	b.n	80075f0 <_printf_float+0x244>
 8007622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007624:	2b00      	cmp	r3, #0
 8007626:	dc39      	bgt.n	800769c <_printf_float+0x2f0>
 8007628:	4a1b      	ldr	r2, [pc, #108]	; (8007698 <_printf_float+0x2ec>)
 800762a:	2301      	movs	r3, #1
 800762c:	4631      	mov	r1, r6
 800762e:	4628      	mov	r0, r5
 8007630:	47b8      	blx	r7
 8007632:	3001      	adds	r0, #1
 8007634:	f43f af19 	beq.w	800746a <_printf_float+0xbe>
 8007638:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800763c:	4313      	orrs	r3, r2
 800763e:	d102      	bne.n	8007646 <_printf_float+0x29a>
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	07d9      	lsls	r1, r3, #31
 8007644:	d5d8      	bpl.n	80075f8 <_printf_float+0x24c>
 8007646:	ee18 3a10 	vmov	r3, s16
 800764a:	4652      	mov	r2, sl
 800764c:	4631      	mov	r1, r6
 800764e:	4628      	mov	r0, r5
 8007650:	47b8      	blx	r7
 8007652:	3001      	adds	r0, #1
 8007654:	f43f af09 	beq.w	800746a <_printf_float+0xbe>
 8007658:	f04f 0900 	mov.w	r9, #0
 800765c:	f104 0a1a 	add.w	sl, r4, #26
 8007660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007662:	425b      	negs	r3, r3
 8007664:	454b      	cmp	r3, r9
 8007666:	dc01      	bgt.n	800766c <_printf_float+0x2c0>
 8007668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800766a:	e792      	b.n	8007592 <_printf_float+0x1e6>
 800766c:	2301      	movs	r3, #1
 800766e:	4652      	mov	r2, sl
 8007670:	4631      	mov	r1, r6
 8007672:	4628      	mov	r0, r5
 8007674:	47b8      	blx	r7
 8007676:	3001      	adds	r0, #1
 8007678:	f43f aef7 	beq.w	800746a <_printf_float+0xbe>
 800767c:	f109 0901 	add.w	r9, r9, #1
 8007680:	e7ee      	b.n	8007660 <_printf_float+0x2b4>
 8007682:	bf00      	nop
 8007684:	7fefffff 	.word	0x7fefffff
 8007688:	08009c18 	.word	0x08009c18
 800768c:	08009c1c 	.word	0x08009c1c
 8007690:	08009c20 	.word	0x08009c20
 8007694:	08009c24 	.word	0x08009c24
 8007698:	08009c28 	.word	0x08009c28
 800769c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800769e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076a0:	429a      	cmp	r2, r3
 80076a2:	bfa8      	it	ge
 80076a4:	461a      	movge	r2, r3
 80076a6:	2a00      	cmp	r2, #0
 80076a8:	4691      	mov	r9, r2
 80076aa:	dc37      	bgt.n	800771c <_printf_float+0x370>
 80076ac:	f04f 0b00 	mov.w	fp, #0
 80076b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076b4:	f104 021a 	add.w	r2, r4, #26
 80076b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076ba:	9305      	str	r3, [sp, #20]
 80076bc:	eba3 0309 	sub.w	r3, r3, r9
 80076c0:	455b      	cmp	r3, fp
 80076c2:	dc33      	bgt.n	800772c <_printf_float+0x380>
 80076c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076c8:	429a      	cmp	r2, r3
 80076ca:	db3b      	blt.n	8007744 <_printf_float+0x398>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	07da      	lsls	r2, r3, #31
 80076d0:	d438      	bmi.n	8007744 <_printf_float+0x398>
 80076d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80076d6:	eba2 0903 	sub.w	r9, r2, r3
 80076da:	9b05      	ldr	r3, [sp, #20]
 80076dc:	1ad2      	subs	r2, r2, r3
 80076de:	4591      	cmp	r9, r2
 80076e0:	bfa8      	it	ge
 80076e2:	4691      	movge	r9, r2
 80076e4:	f1b9 0f00 	cmp.w	r9, #0
 80076e8:	dc35      	bgt.n	8007756 <_printf_float+0x3aa>
 80076ea:	f04f 0800 	mov.w	r8, #0
 80076ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076f2:	f104 0a1a 	add.w	sl, r4, #26
 80076f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076fa:	1a9b      	subs	r3, r3, r2
 80076fc:	eba3 0309 	sub.w	r3, r3, r9
 8007700:	4543      	cmp	r3, r8
 8007702:	f77f af79 	ble.w	80075f8 <_printf_float+0x24c>
 8007706:	2301      	movs	r3, #1
 8007708:	4652      	mov	r2, sl
 800770a:	4631      	mov	r1, r6
 800770c:	4628      	mov	r0, r5
 800770e:	47b8      	blx	r7
 8007710:	3001      	adds	r0, #1
 8007712:	f43f aeaa 	beq.w	800746a <_printf_float+0xbe>
 8007716:	f108 0801 	add.w	r8, r8, #1
 800771a:	e7ec      	b.n	80076f6 <_printf_float+0x34a>
 800771c:	4613      	mov	r3, r2
 800771e:	4631      	mov	r1, r6
 8007720:	4642      	mov	r2, r8
 8007722:	4628      	mov	r0, r5
 8007724:	47b8      	blx	r7
 8007726:	3001      	adds	r0, #1
 8007728:	d1c0      	bne.n	80076ac <_printf_float+0x300>
 800772a:	e69e      	b.n	800746a <_printf_float+0xbe>
 800772c:	2301      	movs	r3, #1
 800772e:	4631      	mov	r1, r6
 8007730:	4628      	mov	r0, r5
 8007732:	9205      	str	r2, [sp, #20]
 8007734:	47b8      	blx	r7
 8007736:	3001      	adds	r0, #1
 8007738:	f43f ae97 	beq.w	800746a <_printf_float+0xbe>
 800773c:	9a05      	ldr	r2, [sp, #20]
 800773e:	f10b 0b01 	add.w	fp, fp, #1
 8007742:	e7b9      	b.n	80076b8 <_printf_float+0x30c>
 8007744:	ee18 3a10 	vmov	r3, s16
 8007748:	4652      	mov	r2, sl
 800774a:	4631      	mov	r1, r6
 800774c:	4628      	mov	r0, r5
 800774e:	47b8      	blx	r7
 8007750:	3001      	adds	r0, #1
 8007752:	d1be      	bne.n	80076d2 <_printf_float+0x326>
 8007754:	e689      	b.n	800746a <_printf_float+0xbe>
 8007756:	9a05      	ldr	r2, [sp, #20]
 8007758:	464b      	mov	r3, r9
 800775a:	4442      	add	r2, r8
 800775c:	4631      	mov	r1, r6
 800775e:	4628      	mov	r0, r5
 8007760:	47b8      	blx	r7
 8007762:	3001      	adds	r0, #1
 8007764:	d1c1      	bne.n	80076ea <_printf_float+0x33e>
 8007766:	e680      	b.n	800746a <_printf_float+0xbe>
 8007768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800776a:	2a01      	cmp	r2, #1
 800776c:	dc01      	bgt.n	8007772 <_printf_float+0x3c6>
 800776e:	07db      	lsls	r3, r3, #31
 8007770:	d53a      	bpl.n	80077e8 <_printf_float+0x43c>
 8007772:	2301      	movs	r3, #1
 8007774:	4642      	mov	r2, r8
 8007776:	4631      	mov	r1, r6
 8007778:	4628      	mov	r0, r5
 800777a:	47b8      	blx	r7
 800777c:	3001      	adds	r0, #1
 800777e:	f43f ae74 	beq.w	800746a <_printf_float+0xbe>
 8007782:	ee18 3a10 	vmov	r3, s16
 8007786:	4652      	mov	r2, sl
 8007788:	4631      	mov	r1, r6
 800778a:	4628      	mov	r0, r5
 800778c:	47b8      	blx	r7
 800778e:	3001      	adds	r0, #1
 8007790:	f43f ae6b 	beq.w	800746a <_printf_float+0xbe>
 8007794:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007798:	2200      	movs	r2, #0
 800779a:	2300      	movs	r3, #0
 800779c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80077a0:	f7f9 f99a 	bl	8000ad8 <__aeabi_dcmpeq>
 80077a4:	b9d8      	cbnz	r0, 80077de <_printf_float+0x432>
 80077a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80077aa:	f108 0201 	add.w	r2, r8, #1
 80077ae:	4631      	mov	r1, r6
 80077b0:	4628      	mov	r0, r5
 80077b2:	47b8      	blx	r7
 80077b4:	3001      	adds	r0, #1
 80077b6:	d10e      	bne.n	80077d6 <_printf_float+0x42a>
 80077b8:	e657      	b.n	800746a <_printf_float+0xbe>
 80077ba:	2301      	movs	r3, #1
 80077bc:	4652      	mov	r2, sl
 80077be:	4631      	mov	r1, r6
 80077c0:	4628      	mov	r0, r5
 80077c2:	47b8      	blx	r7
 80077c4:	3001      	adds	r0, #1
 80077c6:	f43f ae50 	beq.w	800746a <_printf_float+0xbe>
 80077ca:	f108 0801 	add.w	r8, r8, #1
 80077ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d0:	3b01      	subs	r3, #1
 80077d2:	4543      	cmp	r3, r8
 80077d4:	dcf1      	bgt.n	80077ba <_printf_float+0x40e>
 80077d6:	464b      	mov	r3, r9
 80077d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077dc:	e6da      	b.n	8007594 <_printf_float+0x1e8>
 80077de:	f04f 0800 	mov.w	r8, #0
 80077e2:	f104 0a1a 	add.w	sl, r4, #26
 80077e6:	e7f2      	b.n	80077ce <_printf_float+0x422>
 80077e8:	2301      	movs	r3, #1
 80077ea:	4642      	mov	r2, r8
 80077ec:	e7df      	b.n	80077ae <_printf_float+0x402>
 80077ee:	2301      	movs	r3, #1
 80077f0:	464a      	mov	r2, r9
 80077f2:	4631      	mov	r1, r6
 80077f4:	4628      	mov	r0, r5
 80077f6:	47b8      	blx	r7
 80077f8:	3001      	adds	r0, #1
 80077fa:	f43f ae36 	beq.w	800746a <_printf_float+0xbe>
 80077fe:	f108 0801 	add.w	r8, r8, #1
 8007802:	68e3      	ldr	r3, [r4, #12]
 8007804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007806:	1a5b      	subs	r3, r3, r1
 8007808:	4543      	cmp	r3, r8
 800780a:	dcf0      	bgt.n	80077ee <_printf_float+0x442>
 800780c:	e6f8      	b.n	8007600 <_printf_float+0x254>
 800780e:	f04f 0800 	mov.w	r8, #0
 8007812:	f104 0919 	add.w	r9, r4, #25
 8007816:	e7f4      	b.n	8007802 <_printf_float+0x456>

08007818 <_printf_common>:
 8007818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800781c:	4616      	mov	r6, r2
 800781e:	4699      	mov	r9, r3
 8007820:	688a      	ldr	r2, [r1, #8]
 8007822:	690b      	ldr	r3, [r1, #16]
 8007824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007828:	4293      	cmp	r3, r2
 800782a:	bfb8      	it	lt
 800782c:	4613      	movlt	r3, r2
 800782e:	6033      	str	r3, [r6, #0]
 8007830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007834:	4607      	mov	r7, r0
 8007836:	460c      	mov	r4, r1
 8007838:	b10a      	cbz	r2, 800783e <_printf_common+0x26>
 800783a:	3301      	adds	r3, #1
 800783c:	6033      	str	r3, [r6, #0]
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	0699      	lsls	r1, r3, #26
 8007842:	bf42      	ittt	mi
 8007844:	6833      	ldrmi	r3, [r6, #0]
 8007846:	3302      	addmi	r3, #2
 8007848:	6033      	strmi	r3, [r6, #0]
 800784a:	6825      	ldr	r5, [r4, #0]
 800784c:	f015 0506 	ands.w	r5, r5, #6
 8007850:	d106      	bne.n	8007860 <_printf_common+0x48>
 8007852:	f104 0a19 	add.w	sl, r4, #25
 8007856:	68e3      	ldr	r3, [r4, #12]
 8007858:	6832      	ldr	r2, [r6, #0]
 800785a:	1a9b      	subs	r3, r3, r2
 800785c:	42ab      	cmp	r3, r5
 800785e:	dc26      	bgt.n	80078ae <_printf_common+0x96>
 8007860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007864:	1e13      	subs	r3, r2, #0
 8007866:	6822      	ldr	r2, [r4, #0]
 8007868:	bf18      	it	ne
 800786a:	2301      	movne	r3, #1
 800786c:	0692      	lsls	r2, r2, #26
 800786e:	d42b      	bmi.n	80078c8 <_printf_common+0xb0>
 8007870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007874:	4649      	mov	r1, r9
 8007876:	4638      	mov	r0, r7
 8007878:	47c0      	blx	r8
 800787a:	3001      	adds	r0, #1
 800787c:	d01e      	beq.n	80078bc <_printf_common+0xa4>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	6922      	ldr	r2, [r4, #16]
 8007882:	f003 0306 	and.w	r3, r3, #6
 8007886:	2b04      	cmp	r3, #4
 8007888:	bf02      	ittt	eq
 800788a:	68e5      	ldreq	r5, [r4, #12]
 800788c:	6833      	ldreq	r3, [r6, #0]
 800788e:	1aed      	subeq	r5, r5, r3
 8007890:	68a3      	ldr	r3, [r4, #8]
 8007892:	bf0c      	ite	eq
 8007894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007898:	2500      	movne	r5, #0
 800789a:	4293      	cmp	r3, r2
 800789c:	bfc4      	itt	gt
 800789e:	1a9b      	subgt	r3, r3, r2
 80078a0:	18ed      	addgt	r5, r5, r3
 80078a2:	2600      	movs	r6, #0
 80078a4:	341a      	adds	r4, #26
 80078a6:	42b5      	cmp	r5, r6
 80078a8:	d11a      	bne.n	80078e0 <_printf_common+0xc8>
 80078aa:	2000      	movs	r0, #0
 80078ac:	e008      	b.n	80078c0 <_printf_common+0xa8>
 80078ae:	2301      	movs	r3, #1
 80078b0:	4652      	mov	r2, sl
 80078b2:	4649      	mov	r1, r9
 80078b4:	4638      	mov	r0, r7
 80078b6:	47c0      	blx	r8
 80078b8:	3001      	adds	r0, #1
 80078ba:	d103      	bne.n	80078c4 <_printf_common+0xac>
 80078bc:	f04f 30ff 	mov.w	r0, #4294967295
 80078c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c4:	3501      	adds	r5, #1
 80078c6:	e7c6      	b.n	8007856 <_printf_common+0x3e>
 80078c8:	18e1      	adds	r1, r4, r3
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	2030      	movs	r0, #48	; 0x30
 80078ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078d2:	4422      	add	r2, r4
 80078d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078dc:	3302      	adds	r3, #2
 80078de:	e7c7      	b.n	8007870 <_printf_common+0x58>
 80078e0:	2301      	movs	r3, #1
 80078e2:	4622      	mov	r2, r4
 80078e4:	4649      	mov	r1, r9
 80078e6:	4638      	mov	r0, r7
 80078e8:	47c0      	blx	r8
 80078ea:	3001      	adds	r0, #1
 80078ec:	d0e6      	beq.n	80078bc <_printf_common+0xa4>
 80078ee:	3601      	adds	r6, #1
 80078f0:	e7d9      	b.n	80078a6 <_printf_common+0x8e>
	...

080078f4 <_printf_i>:
 80078f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078f8:	7e0f      	ldrb	r7, [r1, #24]
 80078fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078fc:	2f78      	cmp	r7, #120	; 0x78
 80078fe:	4691      	mov	r9, r2
 8007900:	4680      	mov	r8, r0
 8007902:	460c      	mov	r4, r1
 8007904:	469a      	mov	sl, r3
 8007906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800790a:	d807      	bhi.n	800791c <_printf_i+0x28>
 800790c:	2f62      	cmp	r7, #98	; 0x62
 800790e:	d80a      	bhi.n	8007926 <_printf_i+0x32>
 8007910:	2f00      	cmp	r7, #0
 8007912:	f000 80d4 	beq.w	8007abe <_printf_i+0x1ca>
 8007916:	2f58      	cmp	r7, #88	; 0x58
 8007918:	f000 80c0 	beq.w	8007a9c <_printf_i+0x1a8>
 800791c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007924:	e03a      	b.n	800799c <_printf_i+0xa8>
 8007926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800792a:	2b15      	cmp	r3, #21
 800792c:	d8f6      	bhi.n	800791c <_printf_i+0x28>
 800792e:	a101      	add	r1, pc, #4	; (adr r1, 8007934 <_printf_i+0x40>)
 8007930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007934:	0800798d 	.word	0x0800798d
 8007938:	080079a1 	.word	0x080079a1
 800793c:	0800791d 	.word	0x0800791d
 8007940:	0800791d 	.word	0x0800791d
 8007944:	0800791d 	.word	0x0800791d
 8007948:	0800791d 	.word	0x0800791d
 800794c:	080079a1 	.word	0x080079a1
 8007950:	0800791d 	.word	0x0800791d
 8007954:	0800791d 	.word	0x0800791d
 8007958:	0800791d 	.word	0x0800791d
 800795c:	0800791d 	.word	0x0800791d
 8007960:	08007aa5 	.word	0x08007aa5
 8007964:	080079cd 	.word	0x080079cd
 8007968:	08007a5f 	.word	0x08007a5f
 800796c:	0800791d 	.word	0x0800791d
 8007970:	0800791d 	.word	0x0800791d
 8007974:	08007ac7 	.word	0x08007ac7
 8007978:	0800791d 	.word	0x0800791d
 800797c:	080079cd 	.word	0x080079cd
 8007980:	0800791d 	.word	0x0800791d
 8007984:	0800791d 	.word	0x0800791d
 8007988:	08007a67 	.word	0x08007a67
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	1d1a      	adds	r2, r3, #4
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	602a      	str	r2, [r5, #0]
 8007994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800799c:	2301      	movs	r3, #1
 800799e:	e09f      	b.n	8007ae0 <_printf_i+0x1ec>
 80079a0:	6820      	ldr	r0, [r4, #0]
 80079a2:	682b      	ldr	r3, [r5, #0]
 80079a4:	0607      	lsls	r7, r0, #24
 80079a6:	f103 0104 	add.w	r1, r3, #4
 80079aa:	6029      	str	r1, [r5, #0]
 80079ac:	d501      	bpl.n	80079b2 <_printf_i+0xbe>
 80079ae:	681e      	ldr	r6, [r3, #0]
 80079b0:	e003      	b.n	80079ba <_printf_i+0xc6>
 80079b2:	0646      	lsls	r6, r0, #25
 80079b4:	d5fb      	bpl.n	80079ae <_printf_i+0xba>
 80079b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80079ba:	2e00      	cmp	r6, #0
 80079bc:	da03      	bge.n	80079c6 <_printf_i+0xd2>
 80079be:	232d      	movs	r3, #45	; 0x2d
 80079c0:	4276      	negs	r6, r6
 80079c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079c6:	485a      	ldr	r0, [pc, #360]	; (8007b30 <_printf_i+0x23c>)
 80079c8:	230a      	movs	r3, #10
 80079ca:	e012      	b.n	80079f2 <_printf_i+0xfe>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	6820      	ldr	r0, [r4, #0]
 80079d0:	1d19      	adds	r1, r3, #4
 80079d2:	6029      	str	r1, [r5, #0]
 80079d4:	0605      	lsls	r5, r0, #24
 80079d6:	d501      	bpl.n	80079dc <_printf_i+0xe8>
 80079d8:	681e      	ldr	r6, [r3, #0]
 80079da:	e002      	b.n	80079e2 <_printf_i+0xee>
 80079dc:	0641      	lsls	r1, r0, #25
 80079de:	d5fb      	bpl.n	80079d8 <_printf_i+0xe4>
 80079e0:	881e      	ldrh	r6, [r3, #0]
 80079e2:	4853      	ldr	r0, [pc, #332]	; (8007b30 <_printf_i+0x23c>)
 80079e4:	2f6f      	cmp	r7, #111	; 0x6f
 80079e6:	bf0c      	ite	eq
 80079e8:	2308      	moveq	r3, #8
 80079ea:	230a      	movne	r3, #10
 80079ec:	2100      	movs	r1, #0
 80079ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079f2:	6865      	ldr	r5, [r4, #4]
 80079f4:	60a5      	str	r5, [r4, #8]
 80079f6:	2d00      	cmp	r5, #0
 80079f8:	bfa2      	ittt	ge
 80079fa:	6821      	ldrge	r1, [r4, #0]
 80079fc:	f021 0104 	bicge.w	r1, r1, #4
 8007a00:	6021      	strge	r1, [r4, #0]
 8007a02:	b90e      	cbnz	r6, 8007a08 <_printf_i+0x114>
 8007a04:	2d00      	cmp	r5, #0
 8007a06:	d04b      	beq.n	8007aa0 <_printf_i+0x1ac>
 8007a08:	4615      	mov	r5, r2
 8007a0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a0e:	fb03 6711 	mls	r7, r3, r1, r6
 8007a12:	5dc7      	ldrb	r7, [r0, r7]
 8007a14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a18:	4637      	mov	r7, r6
 8007a1a:	42bb      	cmp	r3, r7
 8007a1c:	460e      	mov	r6, r1
 8007a1e:	d9f4      	bls.n	8007a0a <_printf_i+0x116>
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d10b      	bne.n	8007a3c <_printf_i+0x148>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	07de      	lsls	r6, r3, #31
 8007a28:	d508      	bpl.n	8007a3c <_printf_i+0x148>
 8007a2a:	6923      	ldr	r3, [r4, #16]
 8007a2c:	6861      	ldr	r1, [r4, #4]
 8007a2e:	4299      	cmp	r1, r3
 8007a30:	bfde      	ittt	le
 8007a32:	2330      	movle	r3, #48	; 0x30
 8007a34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a3c:	1b52      	subs	r2, r2, r5
 8007a3e:	6122      	str	r2, [r4, #16]
 8007a40:	f8cd a000 	str.w	sl, [sp]
 8007a44:	464b      	mov	r3, r9
 8007a46:	aa03      	add	r2, sp, #12
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	f7ff fee4 	bl	8007818 <_printf_common>
 8007a50:	3001      	adds	r0, #1
 8007a52:	d14a      	bne.n	8007aea <_printf_i+0x1f6>
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295
 8007a58:	b004      	add	sp, #16
 8007a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	f043 0320 	orr.w	r3, r3, #32
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	4833      	ldr	r0, [pc, #204]	; (8007b34 <_printf_i+0x240>)
 8007a68:	2778      	movs	r7, #120	; 0x78
 8007a6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	6829      	ldr	r1, [r5, #0]
 8007a72:	061f      	lsls	r7, r3, #24
 8007a74:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a78:	d402      	bmi.n	8007a80 <_printf_i+0x18c>
 8007a7a:	065f      	lsls	r7, r3, #25
 8007a7c:	bf48      	it	mi
 8007a7e:	b2b6      	uxthmi	r6, r6
 8007a80:	07df      	lsls	r7, r3, #31
 8007a82:	bf48      	it	mi
 8007a84:	f043 0320 	orrmi.w	r3, r3, #32
 8007a88:	6029      	str	r1, [r5, #0]
 8007a8a:	bf48      	it	mi
 8007a8c:	6023      	strmi	r3, [r4, #0]
 8007a8e:	b91e      	cbnz	r6, 8007a98 <_printf_i+0x1a4>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	f023 0320 	bic.w	r3, r3, #32
 8007a96:	6023      	str	r3, [r4, #0]
 8007a98:	2310      	movs	r3, #16
 8007a9a:	e7a7      	b.n	80079ec <_printf_i+0xf8>
 8007a9c:	4824      	ldr	r0, [pc, #144]	; (8007b30 <_printf_i+0x23c>)
 8007a9e:	e7e4      	b.n	8007a6a <_printf_i+0x176>
 8007aa0:	4615      	mov	r5, r2
 8007aa2:	e7bd      	b.n	8007a20 <_printf_i+0x12c>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	6826      	ldr	r6, [r4, #0]
 8007aa8:	6961      	ldr	r1, [r4, #20]
 8007aaa:	1d18      	adds	r0, r3, #4
 8007aac:	6028      	str	r0, [r5, #0]
 8007aae:	0635      	lsls	r5, r6, #24
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	d501      	bpl.n	8007ab8 <_printf_i+0x1c4>
 8007ab4:	6019      	str	r1, [r3, #0]
 8007ab6:	e002      	b.n	8007abe <_printf_i+0x1ca>
 8007ab8:	0670      	lsls	r0, r6, #25
 8007aba:	d5fb      	bpl.n	8007ab4 <_printf_i+0x1c0>
 8007abc:	8019      	strh	r1, [r3, #0]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	6123      	str	r3, [r4, #16]
 8007ac2:	4615      	mov	r5, r2
 8007ac4:	e7bc      	b.n	8007a40 <_printf_i+0x14c>
 8007ac6:	682b      	ldr	r3, [r5, #0]
 8007ac8:	1d1a      	adds	r2, r3, #4
 8007aca:	602a      	str	r2, [r5, #0]
 8007acc:	681d      	ldr	r5, [r3, #0]
 8007ace:	6862      	ldr	r2, [r4, #4]
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f7f8 fb84 	bl	80001e0 <memchr>
 8007ad8:	b108      	cbz	r0, 8007ade <_printf_i+0x1ea>
 8007ada:	1b40      	subs	r0, r0, r5
 8007adc:	6060      	str	r0, [r4, #4]
 8007ade:	6863      	ldr	r3, [r4, #4]
 8007ae0:	6123      	str	r3, [r4, #16]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ae8:	e7aa      	b.n	8007a40 <_printf_i+0x14c>
 8007aea:	6923      	ldr	r3, [r4, #16]
 8007aec:	462a      	mov	r2, r5
 8007aee:	4649      	mov	r1, r9
 8007af0:	4640      	mov	r0, r8
 8007af2:	47d0      	blx	sl
 8007af4:	3001      	adds	r0, #1
 8007af6:	d0ad      	beq.n	8007a54 <_printf_i+0x160>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	079b      	lsls	r3, r3, #30
 8007afc:	d413      	bmi.n	8007b26 <_printf_i+0x232>
 8007afe:	68e0      	ldr	r0, [r4, #12]
 8007b00:	9b03      	ldr	r3, [sp, #12]
 8007b02:	4298      	cmp	r0, r3
 8007b04:	bfb8      	it	lt
 8007b06:	4618      	movlt	r0, r3
 8007b08:	e7a6      	b.n	8007a58 <_printf_i+0x164>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	4632      	mov	r2, r6
 8007b0e:	4649      	mov	r1, r9
 8007b10:	4640      	mov	r0, r8
 8007b12:	47d0      	blx	sl
 8007b14:	3001      	adds	r0, #1
 8007b16:	d09d      	beq.n	8007a54 <_printf_i+0x160>
 8007b18:	3501      	adds	r5, #1
 8007b1a:	68e3      	ldr	r3, [r4, #12]
 8007b1c:	9903      	ldr	r1, [sp, #12]
 8007b1e:	1a5b      	subs	r3, r3, r1
 8007b20:	42ab      	cmp	r3, r5
 8007b22:	dcf2      	bgt.n	8007b0a <_printf_i+0x216>
 8007b24:	e7eb      	b.n	8007afe <_printf_i+0x20a>
 8007b26:	2500      	movs	r5, #0
 8007b28:	f104 0619 	add.w	r6, r4, #25
 8007b2c:	e7f5      	b.n	8007b1a <_printf_i+0x226>
 8007b2e:	bf00      	nop
 8007b30:	08009c2a 	.word	0x08009c2a
 8007b34:	08009c3b 	.word	0x08009c3b

08007b38 <std>:
 8007b38:	2300      	movs	r3, #0
 8007b3a:	b510      	push	{r4, lr}
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b46:	6083      	str	r3, [r0, #8]
 8007b48:	8181      	strh	r1, [r0, #12]
 8007b4a:	6643      	str	r3, [r0, #100]	; 0x64
 8007b4c:	81c2      	strh	r2, [r0, #14]
 8007b4e:	6183      	str	r3, [r0, #24]
 8007b50:	4619      	mov	r1, r3
 8007b52:	2208      	movs	r2, #8
 8007b54:	305c      	adds	r0, #92	; 0x5c
 8007b56:	f000 f8f4 	bl	8007d42 <memset>
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	; (8007b90 <std+0x58>)
 8007b5c:	6263      	str	r3, [r4, #36]	; 0x24
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	; (8007b94 <std+0x5c>)
 8007b60:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b62:	4b0d      	ldr	r3, [pc, #52]	; (8007b98 <std+0x60>)
 8007b64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b66:	4b0d      	ldr	r3, [pc, #52]	; (8007b9c <std+0x64>)
 8007b68:	6323      	str	r3, [r4, #48]	; 0x30
 8007b6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ba0 <std+0x68>)
 8007b6c:	6224      	str	r4, [r4, #32]
 8007b6e:	429c      	cmp	r4, r3
 8007b70:	d006      	beq.n	8007b80 <std+0x48>
 8007b72:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007b76:	4294      	cmp	r4, r2
 8007b78:	d002      	beq.n	8007b80 <std+0x48>
 8007b7a:	33d0      	adds	r3, #208	; 0xd0
 8007b7c:	429c      	cmp	r4, r3
 8007b7e:	d105      	bne.n	8007b8c <std+0x54>
 8007b80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b88:	f000 b958 	b.w	8007e3c <__retarget_lock_init_recursive>
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	bf00      	nop
 8007b90:	08007cbd 	.word	0x08007cbd
 8007b94:	08007cdf 	.word	0x08007cdf
 8007b98:	08007d17 	.word	0x08007d17
 8007b9c:	08007d3b 	.word	0x08007d3b
 8007ba0:	20000678 	.word	0x20000678

08007ba4 <stdio_exit_handler>:
 8007ba4:	4a02      	ldr	r2, [pc, #8]	; (8007bb0 <stdio_exit_handler+0xc>)
 8007ba6:	4903      	ldr	r1, [pc, #12]	; (8007bb4 <stdio_exit_handler+0x10>)
 8007ba8:	4803      	ldr	r0, [pc, #12]	; (8007bb8 <stdio_exit_handler+0x14>)
 8007baa:	f000 b869 	b.w	8007c80 <_fwalk_sglue>
 8007bae:	bf00      	nop
 8007bb0:	2000009c 	.word	0x2000009c
 8007bb4:	08009541 	.word	0x08009541
 8007bb8:	200000a8 	.word	0x200000a8

08007bbc <cleanup_stdio>:
 8007bbc:	6841      	ldr	r1, [r0, #4]
 8007bbe:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <cleanup_stdio+0x34>)
 8007bc0:	4299      	cmp	r1, r3
 8007bc2:	b510      	push	{r4, lr}
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	d001      	beq.n	8007bcc <cleanup_stdio+0x10>
 8007bc8:	f001 fcba 	bl	8009540 <_fflush_r>
 8007bcc:	68a1      	ldr	r1, [r4, #8]
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <cleanup_stdio+0x38>)
 8007bd0:	4299      	cmp	r1, r3
 8007bd2:	d002      	beq.n	8007bda <cleanup_stdio+0x1e>
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f001 fcb3 	bl	8009540 <_fflush_r>
 8007bda:	68e1      	ldr	r1, [r4, #12]
 8007bdc:	4b06      	ldr	r3, [pc, #24]	; (8007bf8 <cleanup_stdio+0x3c>)
 8007bde:	4299      	cmp	r1, r3
 8007be0:	d004      	beq.n	8007bec <cleanup_stdio+0x30>
 8007be2:	4620      	mov	r0, r4
 8007be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be8:	f001 bcaa 	b.w	8009540 <_fflush_r>
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000678 	.word	0x20000678
 8007bf4:	200006e0 	.word	0x200006e0
 8007bf8:	20000748 	.word	0x20000748

08007bfc <global_stdio_init.part.0>:
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <global_stdio_init.part.0+0x30>)
 8007c00:	4c0b      	ldr	r4, [pc, #44]	; (8007c30 <global_stdio_init.part.0+0x34>)
 8007c02:	4a0c      	ldr	r2, [pc, #48]	; (8007c34 <global_stdio_init.part.0+0x38>)
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	4620      	mov	r0, r4
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2104      	movs	r1, #4
 8007c0c:	f7ff ff94 	bl	8007b38 <std>
 8007c10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007c14:	2201      	movs	r2, #1
 8007c16:	2109      	movs	r1, #9
 8007c18:	f7ff ff8e 	bl	8007b38 <std>
 8007c1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007c20:	2202      	movs	r2, #2
 8007c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c26:	2112      	movs	r1, #18
 8007c28:	f7ff bf86 	b.w	8007b38 <std>
 8007c2c:	200007b0 	.word	0x200007b0
 8007c30:	20000678 	.word	0x20000678
 8007c34:	08007ba5 	.word	0x08007ba5

08007c38 <__sfp_lock_acquire>:
 8007c38:	4801      	ldr	r0, [pc, #4]	; (8007c40 <__sfp_lock_acquire+0x8>)
 8007c3a:	f000 b900 	b.w	8007e3e <__retarget_lock_acquire_recursive>
 8007c3e:	bf00      	nop
 8007c40:	200007b9 	.word	0x200007b9

08007c44 <__sfp_lock_release>:
 8007c44:	4801      	ldr	r0, [pc, #4]	; (8007c4c <__sfp_lock_release+0x8>)
 8007c46:	f000 b8fb 	b.w	8007e40 <__retarget_lock_release_recursive>
 8007c4a:	bf00      	nop
 8007c4c:	200007b9 	.word	0x200007b9

08007c50 <__sinit>:
 8007c50:	b510      	push	{r4, lr}
 8007c52:	4604      	mov	r4, r0
 8007c54:	f7ff fff0 	bl	8007c38 <__sfp_lock_acquire>
 8007c58:	6a23      	ldr	r3, [r4, #32]
 8007c5a:	b11b      	cbz	r3, 8007c64 <__sinit+0x14>
 8007c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c60:	f7ff bff0 	b.w	8007c44 <__sfp_lock_release>
 8007c64:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <__sinit+0x28>)
 8007c66:	6223      	str	r3, [r4, #32]
 8007c68:	4b04      	ldr	r3, [pc, #16]	; (8007c7c <__sinit+0x2c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1f5      	bne.n	8007c5c <__sinit+0xc>
 8007c70:	f7ff ffc4 	bl	8007bfc <global_stdio_init.part.0>
 8007c74:	e7f2      	b.n	8007c5c <__sinit+0xc>
 8007c76:	bf00      	nop
 8007c78:	08007bbd 	.word	0x08007bbd
 8007c7c:	200007b0 	.word	0x200007b0

08007c80 <_fwalk_sglue>:
 8007c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c84:	4607      	mov	r7, r0
 8007c86:	4688      	mov	r8, r1
 8007c88:	4614      	mov	r4, r2
 8007c8a:	2600      	movs	r6, #0
 8007c8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c90:	f1b9 0901 	subs.w	r9, r9, #1
 8007c94:	d505      	bpl.n	8007ca2 <_fwalk_sglue+0x22>
 8007c96:	6824      	ldr	r4, [r4, #0]
 8007c98:	2c00      	cmp	r4, #0
 8007c9a:	d1f7      	bne.n	8007c8c <_fwalk_sglue+0xc>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca2:	89ab      	ldrh	r3, [r5, #12]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d907      	bls.n	8007cb8 <_fwalk_sglue+0x38>
 8007ca8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cac:	3301      	adds	r3, #1
 8007cae:	d003      	beq.n	8007cb8 <_fwalk_sglue+0x38>
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	47c0      	blx	r8
 8007cb6:	4306      	orrs	r6, r0
 8007cb8:	3568      	adds	r5, #104	; 0x68
 8007cba:	e7e9      	b.n	8007c90 <_fwalk_sglue+0x10>

08007cbc <__sread>:
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	460c      	mov	r4, r1
 8007cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc4:	f000 f86c 	bl	8007da0 <_read_r>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	bfab      	itete	ge
 8007ccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cce:	89a3      	ldrhlt	r3, [r4, #12]
 8007cd0:	181b      	addge	r3, r3, r0
 8007cd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cd6:	bfac      	ite	ge
 8007cd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cda:	81a3      	strhlt	r3, [r4, #12]
 8007cdc:	bd10      	pop	{r4, pc}

08007cde <__swrite>:
 8007cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce2:	461f      	mov	r7, r3
 8007ce4:	898b      	ldrh	r3, [r1, #12]
 8007ce6:	05db      	lsls	r3, r3, #23
 8007ce8:	4605      	mov	r5, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	4616      	mov	r6, r2
 8007cee:	d505      	bpl.n	8007cfc <__swrite+0x1e>
 8007cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f000 f840 	bl	8007d7c <_lseek_r>
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d06:	81a3      	strh	r3, [r4, #12]
 8007d08:	4632      	mov	r2, r6
 8007d0a:	463b      	mov	r3, r7
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d12:	f000 b857 	b.w	8007dc4 <_write_r>

08007d16 <__sseek>:
 8007d16:	b510      	push	{r4, lr}
 8007d18:	460c      	mov	r4, r1
 8007d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d1e:	f000 f82d 	bl	8007d7c <_lseek_r>
 8007d22:	1c43      	adds	r3, r0, #1
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	bf15      	itete	ne
 8007d28:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d32:	81a3      	strheq	r3, [r4, #12]
 8007d34:	bf18      	it	ne
 8007d36:	81a3      	strhne	r3, [r4, #12]
 8007d38:	bd10      	pop	{r4, pc}

08007d3a <__sclose>:
 8007d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3e:	f000 b80d 	b.w	8007d5c <_close_r>

08007d42 <memset>:
 8007d42:	4402      	add	r2, r0
 8007d44:	4603      	mov	r3, r0
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d100      	bne.n	8007d4c <memset+0xa>
 8007d4a:	4770      	bx	lr
 8007d4c:	f803 1b01 	strb.w	r1, [r3], #1
 8007d50:	e7f9      	b.n	8007d46 <memset+0x4>
	...

08007d54 <_localeconv_r>:
 8007d54:	4800      	ldr	r0, [pc, #0]	; (8007d58 <_localeconv_r+0x4>)
 8007d56:	4770      	bx	lr
 8007d58:	200001e8 	.word	0x200001e8

08007d5c <_close_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d06      	ldr	r5, [pc, #24]	; (8007d78 <_close_r+0x1c>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7f9 ff03 	bl	8001b72 <_close>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_close_r+0x1a>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_close_r+0x1a>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	200007b4 	.word	0x200007b4

08007d7c <_lseek_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d07      	ldr	r5, [pc, #28]	; (8007d9c <_lseek_r+0x20>)
 8007d80:	4604      	mov	r4, r0
 8007d82:	4608      	mov	r0, r1
 8007d84:	4611      	mov	r1, r2
 8007d86:	2200      	movs	r2, #0
 8007d88:	602a      	str	r2, [r5, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f7f9 ff18 	bl	8001bc0 <_lseek>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_lseek_r+0x1e>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_lseek_r+0x1e>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	200007b4 	.word	0x200007b4

08007da0 <_read_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4d07      	ldr	r5, [pc, #28]	; (8007dc0 <_read_r+0x20>)
 8007da4:	4604      	mov	r4, r0
 8007da6:	4608      	mov	r0, r1
 8007da8:	4611      	mov	r1, r2
 8007daa:	2200      	movs	r2, #0
 8007dac:	602a      	str	r2, [r5, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	f7f9 fea6 	bl	8001b00 <_read>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d102      	bne.n	8007dbe <_read_r+0x1e>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	b103      	cbz	r3, 8007dbe <_read_r+0x1e>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	200007b4 	.word	0x200007b4

08007dc4 <_write_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4d07      	ldr	r5, [pc, #28]	; (8007de4 <_write_r+0x20>)
 8007dc8:	4604      	mov	r4, r0
 8007dca:	4608      	mov	r0, r1
 8007dcc:	4611      	mov	r1, r2
 8007dce:	2200      	movs	r2, #0
 8007dd0:	602a      	str	r2, [r5, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f7f9 feb1 	bl	8001b3a <_write>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_write_r+0x1e>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_write_r+0x1e>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	200007b4 	.word	0x200007b4

08007de8 <__errno>:
 8007de8:	4b01      	ldr	r3, [pc, #4]	; (8007df0 <__errno+0x8>)
 8007dea:	6818      	ldr	r0, [r3, #0]
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	200000f4 	.word	0x200000f4

08007df4 <__libc_init_array>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	4d0d      	ldr	r5, [pc, #52]	; (8007e2c <__libc_init_array+0x38>)
 8007df8:	4c0d      	ldr	r4, [pc, #52]	; (8007e30 <__libc_init_array+0x3c>)
 8007dfa:	1b64      	subs	r4, r4, r5
 8007dfc:	10a4      	asrs	r4, r4, #2
 8007dfe:	2600      	movs	r6, #0
 8007e00:	42a6      	cmp	r6, r4
 8007e02:	d109      	bne.n	8007e18 <__libc_init_array+0x24>
 8007e04:	4d0b      	ldr	r5, [pc, #44]	; (8007e34 <__libc_init_array+0x40>)
 8007e06:	4c0c      	ldr	r4, [pc, #48]	; (8007e38 <__libc_init_array+0x44>)
 8007e08:	f001 feee 	bl	8009be8 <_init>
 8007e0c:	1b64      	subs	r4, r4, r5
 8007e0e:	10a4      	asrs	r4, r4, #2
 8007e10:	2600      	movs	r6, #0
 8007e12:	42a6      	cmp	r6, r4
 8007e14:	d105      	bne.n	8007e22 <__libc_init_array+0x2e>
 8007e16:	bd70      	pop	{r4, r5, r6, pc}
 8007e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e1c:	4798      	blx	r3
 8007e1e:	3601      	adds	r6, #1
 8007e20:	e7ee      	b.n	8007e00 <__libc_init_array+0xc>
 8007e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e26:	4798      	blx	r3
 8007e28:	3601      	adds	r6, #1
 8007e2a:	e7f2      	b.n	8007e12 <__libc_init_array+0x1e>
 8007e2c:	08009f94 	.word	0x08009f94
 8007e30:	08009f94 	.word	0x08009f94
 8007e34:	08009f94 	.word	0x08009f94
 8007e38:	08009f98 	.word	0x08009f98

08007e3c <__retarget_lock_init_recursive>:
 8007e3c:	4770      	bx	lr

08007e3e <__retarget_lock_acquire_recursive>:
 8007e3e:	4770      	bx	lr

08007e40 <__retarget_lock_release_recursive>:
 8007e40:	4770      	bx	lr

08007e42 <quorem>:
 8007e42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e46:	6903      	ldr	r3, [r0, #16]
 8007e48:	690c      	ldr	r4, [r1, #16]
 8007e4a:	42a3      	cmp	r3, r4
 8007e4c:	4607      	mov	r7, r0
 8007e4e:	db7e      	blt.n	8007f4e <quorem+0x10c>
 8007e50:	3c01      	subs	r4, #1
 8007e52:	f101 0814 	add.w	r8, r1, #20
 8007e56:	f100 0514 	add.w	r5, r0, #20
 8007e5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e74:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e78:	d331      	bcc.n	8007ede <quorem+0x9c>
 8007e7a:	f04f 0e00 	mov.w	lr, #0
 8007e7e:	4640      	mov	r0, r8
 8007e80:	46ac      	mov	ip, r5
 8007e82:	46f2      	mov	sl, lr
 8007e84:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e88:	b293      	uxth	r3, r2
 8007e8a:	fb06 e303 	mla	r3, r6, r3, lr
 8007e8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e92:	0c1a      	lsrs	r2, r3, #16
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	ebaa 0303 	sub.w	r3, sl, r3
 8007e9a:	f8dc a000 	ldr.w	sl, [ip]
 8007e9e:	fa13 f38a 	uxtah	r3, r3, sl
 8007ea2:	fb06 220e 	mla	r2, r6, lr, r2
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	9b00      	ldr	r3, [sp, #0]
 8007eaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007eae:	b292      	uxth	r2, r2
 8007eb0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007eb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eb8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ebc:	4581      	cmp	r9, r0
 8007ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ec2:	f84c 3b04 	str.w	r3, [ip], #4
 8007ec6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007eca:	d2db      	bcs.n	8007e84 <quorem+0x42>
 8007ecc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ed0:	b92b      	cbnz	r3, 8007ede <quorem+0x9c>
 8007ed2:	9b01      	ldr	r3, [sp, #4]
 8007ed4:	3b04      	subs	r3, #4
 8007ed6:	429d      	cmp	r5, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	d32c      	bcc.n	8007f36 <quorem+0xf4>
 8007edc:	613c      	str	r4, [r7, #16]
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f001 f9a8 	bl	8009234 <__mcmp>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	db22      	blt.n	8007f2e <quorem+0xec>
 8007ee8:	3601      	adds	r6, #1
 8007eea:	4629      	mov	r1, r5
 8007eec:	2000      	movs	r0, #0
 8007eee:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ef2:	f8d1 c000 	ldr.w	ip, [r1]
 8007ef6:	b293      	uxth	r3, r2
 8007ef8:	1ac3      	subs	r3, r0, r3
 8007efa:	0c12      	lsrs	r2, r2, #16
 8007efc:	fa13 f38c 	uxtah	r3, r3, ip
 8007f00:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007f04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f0e:	45c1      	cmp	r9, r8
 8007f10:	f841 3b04 	str.w	r3, [r1], #4
 8007f14:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f18:	d2e9      	bcs.n	8007eee <quorem+0xac>
 8007f1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f22:	b922      	cbnz	r2, 8007f2e <quorem+0xec>
 8007f24:	3b04      	subs	r3, #4
 8007f26:	429d      	cmp	r5, r3
 8007f28:	461a      	mov	r2, r3
 8007f2a:	d30a      	bcc.n	8007f42 <quorem+0x100>
 8007f2c:	613c      	str	r4, [r7, #16]
 8007f2e:	4630      	mov	r0, r6
 8007f30:	b003      	add	sp, #12
 8007f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f36:	6812      	ldr	r2, [r2, #0]
 8007f38:	3b04      	subs	r3, #4
 8007f3a:	2a00      	cmp	r2, #0
 8007f3c:	d1ce      	bne.n	8007edc <quorem+0x9a>
 8007f3e:	3c01      	subs	r4, #1
 8007f40:	e7c9      	b.n	8007ed6 <quorem+0x94>
 8007f42:	6812      	ldr	r2, [r2, #0]
 8007f44:	3b04      	subs	r3, #4
 8007f46:	2a00      	cmp	r2, #0
 8007f48:	d1f0      	bne.n	8007f2c <quorem+0xea>
 8007f4a:	3c01      	subs	r4, #1
 8007f4c:	e7eb      	b.n	8007f26 <quorem+0xe4>
 8007f4e:	2000      	movs	r0, #0
 8007f50:	e7ee      	b.n	8007f30 <quorem+0xee>
 8007f52:	0000      	movs	r0, r0
 8007f54:	0000      	movs	r0, r0
	...

08007f58 <_dtoa_r>:
 8007f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5c:	ed2d 8b04 	vpush	{d8-d9}
 8007f60:	69c5      	ldr	r5, [r0, #28]
 8007f62:	b093      	sub	sp, #76	; 0x4c
 8007f64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007f68:	ec57 6b10 	vmov	r6, r7, d0
 8007f6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f70:	9107      	str	r1, [sp, #28]
 8007f72:	4604      	mov	r4, r0
 8007f74:	920a      	str	r2, [sp, #40]	; 0x28
 8007f76:	930d      	str	r3, [sp, #52]	; 0x34
 8007f78:	b975      	cbnz	r5, 8007f98 <_dtoa_r+0x40>
 8007f7a:	2010      	movs	r0, #16
 8007f7c:	f000 fe2a 	bl	8008bd4 <malloc>
 8007f80:	4602      	mov	r2, r0
 8007f82:	61e0      	str	r0, [r4, #28]
 8007f84:	b920      	cbnz	r0, 8007f90 <_dtoa_r+0x38>
 8007f86:	4bae      	ldr	r3, [pc, #696]	; (8008240 <_dtoa_r+0x2e8>)
 8007f88:	21ef      	movs	r1, #239	; 0xef
 8007f8a:	48ae      	ldr	r0, [pc, #696]	; (8008244 <_dtoa_r+0x2ec>)
 8007f8c:	f001 fb1e 	bl	80095cc <__assert_func>
 8007f90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f94:	6005      	str	r5, [r0, #0]
 8007f96:	60c5      	str	r5, [r0, #12]
 8007f98:	69e3      	ldr	r3, [r4, #28]
 8007f9a:	6819      	ldr	r1, [r3, #0]
 8007f9c:	b151      	cbz	r1, 8007fb4 <_dtoa_r+0x5c>
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	604a      	str	r2, [r1, #4]
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	4093      	lsls	r3, r2
 8007fa6:	608b      	str	r3, [r1, #8]
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 ff07 	bl	8008dbc <_Bfree>
 8007fae:	69e3      	ldr	r3, [r4, #28]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	1e3b      	subs	r3, r7, #0
 8007fb6:	bfbb      	ittet	lt
 8007fb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fbc:	9303      	strlt	r3, [sp, #12]
 8007fbe:	2300      	movge	r3, #0
 8007fc0:	2201      	movlt	r2, #1
 8007fc2:	bfac      	ite	ge
 8007fc4:	f8c8 3000 	strge.w	r3, [r8]
 8007fc8:	f8c8 2000 	strlt.w	r2, [r8]
 8007fcc:	4b9e      	ldr	r3, [pc, #632]	; (8008248 <_dtoa_r+0x2f0>)
 8007fce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007fd2:	ea33 0308 	bics.w	r3, r3, r8
 8007fd6:	d11b      	bne.n	8008010 <_dtoa_r+0xb8>
 8007fd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fda:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007fe4:	4333      	orrs	r3, r6
 8007fe6:	f000 8593 	beq.w	8008b10 <_dtoa_r+0xbb8>
 8007fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fec:	b963      	cbnz	r3, 8008008 <_dtoa_r+0xb0>
 8007fee:	4b97      	ldr	r3, [pc, #604]	; (800824c <_dtoa_r+0x2f4>)
 8007ff0:	e027      	b.n	8008042 <_dtoa_r+0xea>
 8007ff2:	4b97      	ldr	r3, [pc, #604]	; (8008250 <_dtoa_r+0x2f8>)
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	9800      	ldr	r0, [sp, #0]
 8007ffe:	b013      	add	sp, #76	; 0x4c
 8008000:	ecbd 8b04 	vpop	{d8-d9}
 8008004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008008:	4b90      	ldr	r3, [pc, #576]	; (800824c <_dtoa_r+0x2f4>)
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	3303      	adds	r3, #3
 800800e:	e7f3      	b.n	8007ff8 <_dtoa_r+0xa0>
 8008010:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008014:	2200      	movs	r2, #0
 8008016:	ec51 0b17 	vmov	r0, r1, d7
 800801a:	eeb0 8a47 	vmov.f32	s16, s14
 800801e:	eef0 8a67 	vmov.f32	s17, s15
 8008022:	2300      	movs	r3, #0
 8008024:	f7f8 fd58 	bl	8000ad8 <__aeabi_dcmpeq>
 8008028:	4681      	mov	r9, r0
 800802a:	b160      	cbz	r0, 8008046 <_dtoa_r+0xee>
 800802c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800802e:	2301      	movs	r3, #1
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 8568 	beq.w	8008b0a <_dtoa_r+0xbb2>
 800803a:	4b86      	ldr	r3, [pc, #536]	; (8008254 <_dtoa_r+0x2fc>)
 800803c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	3b01      	subs	r3, #1
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	e7da      	b.n	8007ffc <_dtoa_r+0xa4>
 8008046:	aa10      	add	r2, sp, #64	; 0x40
 8008048:	a911      	add	r1, sp, #68	; 0x44
 800804a:	4620      	mov	r0, r4
 800804c:	eeb0 0a48 	vmov.f32	s0, s16
 8008050:	eef0 0a68 	vmov.f32	s1, s17
 8008054:	f001 f994 	bl	8009380 <__d2b>
 8008058:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800805c:	4682      	mov	sl, r0
 800805e:	2d00      	cmp	r5, #0
 8008060:	d07f      	beq.n	8008162 <_dtoa_r+0x20a>
 8008062:	ee18 3a90 	vmov	r3, s17
 8008066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800806a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800806e:	ec51 0b18 	vmov	r0, r1, d8
 8008072:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008076:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800807a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800807e:	4619      	mov	r1, r3
 8008080:	2200      	movs	r2, #0
 8008082:	4b75      	ldr	r3, [pc, #468]	; (8008258 <_dtoa_r+0x300>)
 8008084:	f7f8 f908 	bl	8000298 <__aeabi_dsub>
 8008088:	a367      	add	r3, pc, #412	; (adr r3, 8008228 <_dtoa_r+0x2d0>)
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f7f8 fabb 	bl	8000608 <__aeabi_dmul>
 8008092:	a367      	add	r3, pc, #412	; (adr r3, 8008230 <_dtoa_r+0x2d8>)
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	f7f8 f900 	bl	800029c <__adddf3>
 800809c:	4606      	mov	r6, r0
 800809e:	4628      	mov	r0, r5
 80080a0:	460f      	mov	r7, r1
 80080a2:	f7f8 fa47 	bl	8000534 <__aeabi_i2d>
 80080a6:	a364      	add	r3, pc, #400	; (adr r3, 8008238 <_dtoa_r+0x2e0>)
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	f7f8 faac 	bl	8000608 <__aeabi_dmul>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4630      	mov	r0, r6
 80080b6:	4639      	mov	r1, r7
 80080b8:	f7f8 f8f0 	bl	800029c <__adddf3>
 80080bc:	4606      	mov	r6, r0
 80080be:	460f      	mov	r7, r1
 80080c0:	f7f8 fd52 	bl	8000b68 <__aeabi_d2iz>
 80080c4:	2200      	movs	r2, #0
 80080c6:	4683      	mov	fp, r0
 80080c8:	2300      	movs	r3, #0
 80080ca:	4630      	mov	r0, r6
 80080cc:	4639      	mov	r1, r7
 80080ce:	f7f8 fd0d 	bl	8000aec <__aeabi_dcmplt>
 80080d2:	b148      	cbz	r0, 80080e8 <_dtoa_r+0x190>
 80080d4:	4658      	mov	r0, fp
 80080d6:	f7f8 fa2d 	bl	8000534 <__aeabi_i2d>
 80080da:	4632      	mov	r2, r6
 80080dc:	463b      	mov	r3, r7
 80080de:	f7f8 fcfb 	bl	8000ad8 <__aeabi_dcmpeq>
 80080e2:	b908      	cbnz	r0, 80080e8 <_dtoa_r+0x190>
 80080e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080e8:	f1bb 0f16 	cmp.w	fp, #22
 80080ec:	d857      	bhi.n	800819e <_dtoa_r+0x246>
 80080ee:	4b5b      	ldr	r3, [pc, #364]	; (800825c <_dtoa_r+0x304>)
 80080f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80080f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f8:	ec51 0b18 	vmov	r0, r1, d8
 80080fc:	f7f8 fcf6 	bl	8000aec <__aeabi_dcmplt>
 8008100:	2800      	cmp	r0, #0
 8008102:	d04e      	beq.n	80081a2 <_dtoa_r+0x24a>
 8008104:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008108:	2300      	movs	r3, #0
 800810a:	930c      	str	r3, [sp, #48]	; 0x30
 800810c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800810e:	1b5b      	subs	r3, r3, r5
 8008110:	1e5a      	subs	r2, r3, #1
 8008112:	bf45      	ittet	mi
 8008114:	f1c3 0301 	rsbmi	r3, r3, #1
 8008118:	9305      	strmi	r3, [sp, #20]
 800811a:	2300      	movpl	r3, #0
 800811c:	2300      	movmi	r3, #0
 800811e:	9206      	str	r2, [sp, #24]
 8008120:	bf54      	ite	pl
 8008122:	9305      	strpl	r3, [sp, #20]
 8008124:	9306      	strmi	r3, [sp, #24]
 8008126:	f1bb 0f00 	cmp.w	fp, #0
 800812a:	db3c      	blt.n	80081a6 <_dtoa_r+0x24e>
 800812c:	9b06      	ldr	r3, [sp, #24]
 800812e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008132:	445b      	add	r3, fp
 8008134:	9306      	str	r3, [sp, #24]
 8008136:	2300      	movs	r3, #0
 8008138:	9308      	str	r3, [sp, #32]
 800813a:	9b07      	ldr	r3, [sp, #28]
 800813c:	2b09      	cmp	r3, #9
 800813e:	d868      	bhi.n	8008212 <_dtoa_r+0x2ba>
 8008140:	2b05      	cmp	r3, #5
 8008142:	bfc4      	itt	gt
 8008144:	3b04      	subgt	r3, #4
 8008146:	9307      	strgt	r3, [sp, #28]
 8008148:	9b07      	ldr	r3, [sp, #28]
 800814a:	f1a3 0302 	sub.w	r3, r3, #2
 800814e:	bfcc      	ite	gt
 8008150:	2500      	movgt	r5, #0
 8008152:	2501      	movle	r5, #1
 8008154:	2b03      	cmp	r3, #3
 8008156:	f200 8085 	bhi.w	8008264 <_dtoa_r+0x30c>
 800815a:	e8df f003 	tbb	[pc, r3]
 800815e:	3b2e      	.short	0x3b2e
 8008160:	5839      	.short	0x5839
 8008162:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008166:	441d      	add	r5, r3
 8008168:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800816c:	2b20      	cmp	r3, #32
 800816e:	bfc1      	itttt	gt
 8008170:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008174:	fa08 f803 	lslgt.w	r8, r8, r3
 8008178:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800817c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008180:	bfd6      	itet	le
 8008182:	f1c3 0320 	rsble	r3, r3, #32
 8008186:	ea48 0003 	orrgt.w	r0, r8, r3
 800818a:	fa06 f003 	lslle.w	r0, r6, r3
 800818e:	f7f8 f9c1 	bl	8000514 <__aeabi_ui2d>
 8008192:	2201      	movs	r2, #1
 8008194:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008198:	3d01      	subs	r5, #1
 800819a:	920e      	str	r2, [sp, #56]	; 0x38
 800819c:	e76f      	b.n	800807e <_dtoa_r+0x126>
 800819e:	2301      	movs	r3, #1
 80081a0:	e7b3      	b.n	800810a <_dtoa_r+0x1b2>
 80081a2:	900c      	str	r0, [sp, #48]	; 0x30
 80081a4:	e7b2      	b.n	800810c <_dtoa_r+0x1b4>
 80081a6:	9b05      	ldr	r3, [sp, #20]
 80081a8:	eba3 030b 	sub.w	r3, r3, fp
 80081ac:	9305      	str	r3, [sp, #20]
 80081ae:	f1cb 0300 	rsb	r3, fp, #0
 80081b2:	9308      	str	r3, [sp, #32]
 80081b4:	2300      	movs	r3, #0
 80081b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80081b8:	e7bf      	b.n	800813a <_dtoa_r+0x1e2>
 80081ba:	2300      	movs	r3, #0
 80081bc:	9309      	str	r3, [sp, #36]	; 0x24
 80081be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	dc52      	bgt.n	800826a <_dtoa_r+0x312>
 80081c4:	2301      	movs	r3, #1
 80081c6:	9301      	str	r3, [sp, #4]
 80081c8:	9304      	str	r3, [sp, #16]
 80081ca:	461a      	mov	r2, r3
 80081cc:	920a      	str	r2, [sp, #40]	; 0x28
 80081ce:	e00b      	b.n	80081e8 <_dtoa_r+0x290>
 80081d0:	2301      	movs	r3, #1
 80081d2:	e7f3      	b.n	80081bc <_dtoa_r+0x264>
 80081d4:	2300      	movs	r3, #0
 80081d6:	9309      	str	r3, [sp, #36]	; 0x24
 80081d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081da:	445b      	add	r3, fp
 80081dc:	9301      	str	r3, [sp, #4]
 80081de:	3301      	adds	r3, #1
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	9304      	str	r3, [sp, #16]
 80081e4:	bfb8      	it	lt
 80081e6:	2301      	movlt	r3, #1
 80081e8:	69e0      	ldr	r0, [r4, #28]
 80081ea:	2100      	movs	r1, #0
 80081ec:	2204      	movs	r2, #4
 80081ee:	f102 0614 	add.w	r6, r2, #20
 80081f2:	429e      	cmp	r6, r3
 80081f4:	d93d      	bls.n	8008272 <_dtoa_r+0x31a>
 80081f6:	6041      	str	r1, [r0, #4]
 80081f8:	4620      	mov	r0, r4
 80081fa:	f000 fd9f 	bl	8008d3c <_Balloc>
 80081fe:	9000      	str	r0, [sp, #0]
 8008200:	2800      	cmp	r0, #0
 8008202:	d139      	bne.n	8008278 <_dtoa_r+0x320>
 8008204:	4b16      	ldr	r3, [pc, #88]	; (8008260 <_dtoa_r+0x308>)
 8008206:	4602      	mov	r2, r0
 8008208:	f240 11af 	movw	r1, #431	; 0x1af
 800820c:	e6bd      	b.n	8007f8a <_dtoa_r+0x32>
 800820e:	2301      	movs	r3, #1
 8008210:	e7e1      	b.n	80081d6 <_dtoa_r+0x27e>
 8008212:	2501      	movs	r5, #1
 8008214:	2300      	movs	r3, #0
 8008216:	9307      	str	r3, [sp, #28]
 8008218:	9509      	str	r5, [sp, #36]	; 0x24
 800821a:	f04f 33ff 	mov.w	r3, #4294967295
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	9304      	str	r3, [sp, #16]
 8008222:	2200      	movs	r2, #0
 8008224:	2312      	movs	r3, #18
 8008226:	e7d1      	b.n	80081cc <_dtoa_r+0x274>
 8008228:	636f4361 	.word	0x636f4361
 800822c:	3fd287a7 	.word	0x3fd287a7
 8008230:	8b60c8b3 	.word	0x8b60c8b3
 8008234:	3fc68a28 	.word	0x3fc68a28
 8008238:	509f79fb 	.word	0x509f79fb
 800823c:	3fd34413 	.word	0x3fd34413
 8008240:	08009c59 	.word	0x08009c59
 8008244:	08009c70 	.word	0x08009c70
 8008248:	7ff00000 	.word	0x7ff00000
 800824c:	08009c55 	.word	0x08009c55
 8008250:	08009c4c 	.word	0x08009c4c
 8008254:	08009c29 	.word	0x08009c29
 8008258:	3ff80000 	.word	0x3ff80000
 800825c:	08009d60 	.word	0x08009d60
 8008260:	08009cc8 	.word	0x08009cc8
 8008264:	2301      	movs	r3, #1
 8008266:	9309      	str	r3, [sp, #36]	; 0x24
 8008268:	e7d7      	b.n	800821a <_dtoa_r+0x2c2>
 800826a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	9304      	str	r3, [sp, #16]
 8008270:	e7ba      	b.n	80081e8 <_dtoa_r+0x290>
 8008272:	3101      	adds	r1, #1
 8008274:	0052      	lsls	r2, r2, #1
 8008276:	e7ba      	b.n	80081ee <_dtoa_r+0x296>
 8008278:	69e3      	ldr	r3, [r4, #28]
 800827a:	9a00      	ldr	r2, [sp, #0]
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	9b04      	ldr	r3, [sp, #16]
 8008280:	2b0e      	cmp	r3, #14
 8008282:	f200 80a8 	bhi.w	80083d6 <_dtoa_r+0x47e>
 8008286:	2d00      	cmp	r5, #0
 8008288:	f000 80a5 	beq.w	80083d6 <_dtoa_r+0x47e>
 800828c:	f1bb 0f00 	cmp.w	fp, #0
 8008290:	dd38      	ble.n	8008304 <_dtoa_r+0x3ac>
 8008292:	4bc0      	ldr	r3, [pc, #768]	; (8008594 <_dtoa_r+0x63c>)
 8008294:	f00b 020f 	and.w	r2, fp, #15
 8008298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800829c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80082a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80082a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80082a8:	d019      	beq.n	80082de <_dtoa_r+0x386>
 80082aa:	4bbb      	ldr	r3, [pc, #748]	; (8008598 <_dtoa_r+0x640>)
 80082ac:	ec51 0b18 	vmov	r0, r1, d8
 80082b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082b4:	f7f8 fad2 	bl	800085c <__aeabi_ddiv>
 80082b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082bc:	f008 080f 	and.w	r8, r8, #15
 80082c0:	2503      	movs	r5, #3
 80082c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008598 <_dtoa_r+0x640>
 80082c6:	f1b8 0f00 	cmp.w	r8, #0
 80082ca:	d10a      	bne.n	80082e2 <_dtoa_r+0x38a>
 80082cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082d0:	4632      	mov	r2, r6
 80082d2:	463b      	mov	r3, r7
 80082d4:	f7f8 fac2 	bl	800085c <__aeabi_ddiv>
 80082d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082dc:	e02b      	b.n	8008336 <_dtoa_r+0x3de>
 80082de:	2502      	movs	r5, #2
 80082e0:	e7ef      	b.n	80082c2 <_dtoa_r+0x36a>
 80082e2:	f018 0f01 	tst.w	r8, #1
 80082e6:	d008      	beq.n	80082fa <_dtoa_r+0x3a2>
 80082e8:	4630      	mov	r0, r6
 80082ea:	4639      	mov	r1, r7
 80082ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80082f0:	f7f8 f98a 	bl	8000608 <__aeabi_dmul>
 80082f4:	3501      	adds	r5, #1
 80082f6:	4606      	mov	r6, r0
 80082f8:	460f      	mov	r7, r1
 80082fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80082fe:	f109 0908 	add.w	r9, r9, #8
 8008302:	e7e0      	b.n	80082c6 <_dtoa_r+0x36e>
 8008304:	f000 809f 	beq.w	8008446 <_dtoa_r+0x4ee>
 8008308:	f1cb 0600 	rsb	r6, fp, #0
 800830c:	4ba1      	ldr	r3, [pc, #644]	; (8008594 <_dtoa_r+0x63c>)
 800830e:	4fa2      	ldr	r7, [pc, #648]	; (8008598 <_dtoa_r+0x640>)
 8008310:	f006 020f 	and.w	r2, r6, #15
 8008314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	ec51 0b18 	vmov	r0, r1, d8
 8008320:	f7f8 f972 	bl	8000608 <__aeabi_dmul>
 8008324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008328:	1136      	asrs	r6, r6, #4
 800832a:	2300      	movs	r3, #0
 800832c:	2502      	movs	r5, #2
 800832e:	2e00      	cmp	r6, #0
 8008330:	d17e      	bne.n	8008430 <_dtoa_r+0x4d8>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1d0      	bne.n	80082d8 <_dtoa_r+0x380>
 8008336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008338:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 8084 	beq.w	800844a <_dtoa_r+0x4f2>
 8008342:	4b96      	ldr	r3, [pc, #600]	; (800859c <_dtoa_r+0x644>)
 8008344:	2200      	movs	r2, #0
 8008346:	4640      	mov	r0, r8
 8008348:	4649      	mov	r1, r9
 800834a:	f7f8 fbcf 	bl	8000aec <__aeabi_dcmplt>
 800834e:	2800      	cmp	r0, #0
 8008350:	d07b      	beq.n	800844a <_dtoa_r+0x4f2>
 8008352:	9b04      	ldr	r3, [sp, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d078      	beq.n	800844a <_dtoa_r+0x4f2>
 8008358:	9b01      	ldr	r3, [sp, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	dd39      	ble.n	80083d2 <_dtoa_r+0x47a>
 800835e:	4b90      	ldr	r3, [pc, #576]	; (80085a0 <_dtoa_r+0x648>)
 8008360:	2200      	movs	r2, #0
 8008362:	4640      	mov	r0, r8
 8008364:	4649      	mov	r1, r9
 8008366:	f7f8 f94f 	bl	8000608 <__aeabi_dmul>
 800836a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800836e:	9e01      	ldr	r6, [sp, #4]
 8008370:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008374:	3501      	adds	r5, #1
 8008376:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800837a:	4628      	mov	r0, r5
 800837c:	f7f8 f8da 	bl	8000534 <__aeabi_i2d>
 8008380:	4642      	mov	r2, r8
 8008382:	464b      	mov	r3, r9
 8008384:	f7f8 f940 	bl	8000608 <__aeabi_dmul>
 8008388:	4b86      	ldr	r3, [pc, #536]	; (80085a4 <_dtoa_r+0x64c>)
 800838a:	2200      	movs	r2, #0
 800838c:	f7f7 ff86 	bl	800029c <__adddf3>
 8008390:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008398:	9303      	str	r3, [sp, #12]
 800839a:	2e00      	cmp	r6, #0
 800839c:	d158      	bne.n	8008450 <_dtoa_r+0x4f8>
 800839e:	4b82      	ldr	r3, [pc, #520]	; (80085a8 <_dtoa_r+0x650>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	4640      	mov	r0, r8
 80083a4:	4649      	mov	r1, r9
 80083a6:	f7f7 ff77 	bl	8000298 <__aeabi_dsub>
 80083aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083ae:	4680      	mov	r8, r0
 80083b0:	4689      	mov	r9, r1
 80083b2:	f7f8 fbb9 	bl	8000b28 <__aeabi_dcmpgt>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	f040 8296 	bne.w	80088e8 <_dtoa_r+0x990>
 80083bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80083c0:	4640      	mov	r0, r8
 80083c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083c6:	4649      	mov	r1, r9
 80083c8:	f7f8 fb90 	bl	8000aec <__aeabi_dcmplt>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	f040 8289 	bne.w	80088e4 <_dtoa_r+0x98c>
 80083d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80083d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f2c0 814e 	blt.w	800867a <_dtoa_r+0x722>
 80083de:	f1bb 0f0e 	cmp.w	fp, #14
 80083e2:	f300 814a 	bgt.w	800867a <_dtoa_r+0x722>
 80083e6:	4b6b      	ldr	r3, [pc, #428]	; (8008594 <_dtoa_r+0x63c>)
 80083e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f280 80dc 	bge.w	80085b0 <_dtoa_r+0x658>
 80083f8:	9b04      	ldr	r3, [sp, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f300 80d8 	bgt.w	80085b0 <_dtoa_r+0x658>
 8008400:	f040 826f 	bne.w	80088e2 <_dtoa_r+0x98a>
 8008404:	4b68      	ldr	r3, [pc, #416]	; (80085a8 <_dtoa_r+0x650>)
 8008406:	2200      	movs	r2, #0
 8008408:	4640      	mov	r0, r8
 800840a:	4649      	mov	r1, r9
 800840c:	f7f8 f8fc 	bl	8000608 <__aeabi_dmul>
 8008410:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008414:	f7f8 fb7e 	bl	8000b14 <__aeabi_dcmpge>
 8008418:	9e04      	ldr	r6, [sp, #16]
 800841a:	4637      	mov	r7, r6
 800841c:	2800      	cmp	r0, #0
 800841e:	f040 8245 	bne.w	80088ac <_dtoa_r+0x954>
 8008422:	9d00      	ldr	r5, [sp, #0]
 8008424:	2331      	movs	r3, #49	; 0x31
 8008426:	f805 3b01 	strb.w	r3, [r5], #1
 800842a:	f10b 0b01 	add.w	fp, fp, #1
 800842e:	e241      	b.n	80088b4 <_dtoa_r+0x95c>
 8008430:	07f2      	lsls	r2, r6, #31
 8008432:	d505      	bpl.n	8008440 <_dtoa_r+0x4e8>
 8008434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008438:	f7f8 f8e6 	bl	8000608 <__aeabi_dmul>
 800843c:	3501      	adds	r5, #1
 800843e:	2301      	movs	r3, #1
 8008440:	1076      	asrs	r6, r6, #1
 8008442:	3708      	adds	r7, #8
 8008444:	e773      	b.n	800832e <_dtoa_r+0x3d6>
 8008446:	2502      	movs	r5, #2
 8008448:	e775      	b.n	8008336 <_dtoa_r+0x3de>
 800844a:	9e04      	ldr	r6, [sp, #16]
 800844c:	465f      	mov	r7, fp
 800844e:	e792      	b.n	8008376 <_dtoa_r+0x41e>
 8008450:	9900      	ldr	r1, [sp, #0]
 8008452:	4b50      	ldr	r3, [pc, #320]	; (8008594 <_dtoa_r+0x63c>)
 8008454:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008458:	4431      	add	r1, r6
 800845a:	9102      	str	r1, [sp, #8]
 800845c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800845e:	eeb0 9a47 	vmov.f32	s18, s14
 8008462:	eef0 9a67 	vmov.f32	s19, s15
 8008466:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800846a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800846e:	2900      	cmp	r1, #0
 8008470:	d044      	beq.n	80084fc <_dtoa_r+0x5a4>
 8008472:	494e      	ldr	r1, [pc, #312]	; (80085ac <_dtoa_r+0x654>)
 8008474:	2000      	movs	r0, #0
 8008476:	f7f8 f9f1 	bl	800085c <__aeabi_ddiv>
 800847a:	ec53 2b19 	vmov	r2, r3, d9
 800847e:	f7f7 ff0b 	bl	8000298 <__aeabi_dsub>
 8008482:	9d00      	ldr	r5, [sp, #0]
 8008484:	ec41 0b19 	vmov	d9, r0, r1
 8008488:	4649      	mov	r1, r9
 800848a:	4640      	mov	r0, r8
 800848c:	f7f8 fb6c 	bl	8000b68 <__aeabi_d2iz>
 8008490:	4606      	mov	r6, r0
 8008492:	f7f8 f84f 	bl	8000534 <__aeabi_i2d>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4640      	mov	r0, r8
 800849c:	4649      	mov	r1, r9
 800849e:	f7f7 fefb 	bl	8000298 <__aeabi_dsub>
 80084a2:	3630      	adds	r6, #48	; 0x30
 80084a4:	f805 6b01 	strb.w	r6, [r5], #1
 80084a8:	ec53 2b19 	vmov	r2, r3, d9
 80084ac:	4680      	mov	r8, r0
 80084ae:	4689      	mov	r9, r1
 80084b0:	f7f8 fb1c 	bl	8000aec <__aeabi_dcmplt>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d164      	bne.n	8008582 <_dtoa_r+0x62a>
 80084b8:	4642      	mov	r2, r8
 80084ba:	464b      	mov	r3, r9
 80084bc:	4937      	ldr	r1, [pc, #220]	; (800859c <_dtoa_r+0x644>)
 80084be:	2000      	movs	r0, #0
 80084c0:	f7f7 feea 	bl	8000298 <__aeabi_dsub>
 80084c4:	ec53 2b19 	vmov	r2, r3, d9
 80084c8:	f7f8 fb10 	bl	8000aec <__aeabi_dcmplt>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	f040 80b6 	bne.w	800863e <_dtoa_r+0x6e6>
 80084d2:	9b02      	ldr	r3, [sp, #8]
 80084d4:	429d      	cmp	r5, r3
 80084d6:	f43f af7c 	beq.w	80083d2 <_dtoa_r+0x47a>
 80084da:	4b31      	ldr	r3, [pc, #196]	; (80085a0 <_dtoa_r+0x648>)
 80084dc:	ec51 0b19 	vmov	r0, r1, d9
 80084e0:	2200      	movs	r2, #0
 80084e2:	f7f8 f891 	bl	8000608 <__aeabi_dmul>
 80084e6:	4b2e      	ldr	r3, [pc, #184]	; (80085a0 <_dtoa_r+0x648>)
 80084e8:	ec41 0b19 	vmov	d9, r0, r1
 80084ec:	2200      	movs	r2, #0
 80084ee:	4640      	mov	r0, r8
 80084f0:	4649      	mov	r1, r9
 80084f2:	f7f8 f889 	bl	8000608 <__aeabi_dmul>
 80084f6:	4680      	mov	r8, r0
 80084f8:	4689      	mov	r9, r1
 80084fa:	e7c5      	b.n	8008488 <_dtoa_r+0x530>
 80084fc:	ec51 0b17 	vmov	r0, r1, d7
 8008500:	f7f8 f882 	bl	8000608 <__aeabi_dmul>
 8008504:	9b02      	ldr	r3, [sp, #8]
 8008506:	9d00      	ldr	r5, [sp, #0]
 8008508:	930f      	str	r3, [sp, #60]	; 0x3c
 800850a:	ec41 0b19 	vmov	d9, r0, r1
 800850e:	4649      	mov	r1, r9
 8008510:	4640      	mov	r0, r8
 8008512:	f7f8 fb29 	bl	8000b68 <__aeabi_d2iz>
 8008516:	4606      	mov	r6, r0
 8008518:	f7f8 f80c 	bl	8000534 <__aeabi_i2d>
 800851c:	3630      	adds	r6, #48	; 0x30
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	4640      	mov	r0, r8
 8008524:	4649      	mov	r1, r9
 8008526:	f7f7 feb7 	bl	8000298 <__aeabi_dsub>
 800852a:	f805 6b01 	strb.w	r6, [r5], #1
 800852e:	9b02      	ldr	r3, [sp, #8]
 8008530:	429d      	cmp	r5, r3
 8008532:	4680      	mov	r8, r0
 8008534:	4689      	mov	r9, r1
 8008536:	f04f 0200 	mov.w	r2, #0
 800853a:	d124      	bne.n	8008586 <_dtoa_r+0x62e>
 800853c:	4b1b      	ldr	r3, [pc, #108]	; (80085ac <_dtoa_r+0x654>)
 800853e:	ec51 0b19 	vmov	r0, r1, d9
 8008542:	f7f7 feab 	bl	800029c <__adddf3>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	4640      	mov	r0, r8
 800854c:	4649      	mov	r1, r9
 800854e:	f7f8 faeb 	bl	8000b28 <__aeabi_dcmpgt>
 8008552:	2800      	cmp	r0, #0
 8008554:	d173      	bne.n	800863e <_dtoa_r+0x6e6>
 8008556:	ec53 2b19 	vmov	r2, r3, d9
 800855a:	4914      	ldr	r1, [pc, #80]	; (80085ac <_dtoa_r+0x654>)
 800855c:	2000      	movs	r0, #0
 800855e:	f7f7 fe9b 	bl	8000298 <__aeabi_dsub>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4640      	mov	r0, r8
 8008568:	4649      	mov	r1, r9
 800856a:	f7f8 fabf 	bl	8000aec <__aeabi_dcmplt>
 800856e:	2800      	cmp	r0, #0
 8008570:	f43f af2f 	beq.w	80083d2 <_dtoa_r+0x47a>
 8008574:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008576:	1e6b      	subs	r3, r5, #1
 8008578:	930f      	str	r3, [sp, #60]	; 0x3c
 800857a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800857e:	2b30      	cmp	r3, #48	; 0x30
 8008580:	d0f8      	beq.n	8008574 <_dtoa_r+0x61c>
 8008582:	46bb      	mov	fp, r7
 8008584:	e04a      	b.n	800861c <_dtoa_r+0x6c4>
 8008586:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <_dtoa_r+0x648>)
 8008588:	f7f8 f83e 	bl	8000608 <__aeabi_dmul>
 800858c:	4680      	mov	r8, r0
 800858e:	4689      	mov	r9, r1
 8008590:	e7bd      	b.n	800850e <_dtoa_r+0x5b6>
 8008592:	bf00      	nop
 8008594:	08009d60 	.word	0x08009d60
 8008598:	08009d38 	.word	0x08009d38
 800859c:	3ff00000 	.word	0x3ff00000
 80085a0:	40240000 	.word	0x40240000
 80085a4:	401c0000 	.word	0x401c0000
 80085a8:	40140000 	.word	0x40140000
 80085ac:	3fe00000 	.word	0x3fe00000
 80085b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085b4:	9d00      	ldr	r5, [sp, #0]
 80085b6:	4642      	mov	r2, r8
 80085b8:	464b      	mov	r3, r9
 80085ba:	4630      	mov	r0, r6
 80085bc:	4639      	mov	r1, r7
 80085be:	f7f8 f94d 	bl	800085c <__aeabi_ddiv>
 80085c2:	f7f8 fad1 	bl	8000b68 <__aeabi_d2iz>
 80085c6:	9001      	str	r0, [sp, #4]
 80085c8:	f7f7 ffb4 	bl	8000534 <__aeabi_i2d>
 80085cc:	4642      	mov	r2, r8
 80085ce:	464b      	mov	r3, r9
 80085d0:	f7f8 f81a 	bl	8000608 <__aeabi_dmul>
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	4630      	mov	r0, r6
 80085da:	4639      	mov	r1, r7
 80085dc:	f7f7 fe5c 	bl	8000298 <__aeabi_dsub>
 80085e0:	9e01      	ldr	r6, [sp, #4]
 80085e2:	9f04      	ldr	r7, [sp, #16]
 80085e4:	3630      	adds	r6, #48	; 0x30
 80085e6:	f805 6b01 	strb.w	r6, [r5], #1
 80085ea:	9e00      	ldr	r6, [sp, #0]
 80085ec:	1bae      	subs	r6, r5, r6
 80085ee:	42b7      	cmp	r7, r6
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	d134      	bne.n	8008660 <_dtoa_r+0x708>
 80085f6:	f7f7 fe51 	bl	800029c <__adddf3>
 80085fa:	4642      	mov	r2, r8
 80085fc:	464b      	mov	r3, r9
 80085fe:	4606      	mov	r6, r0
 8008600:	460f      	mov	r7, r1
 8008602:	f7f8 fa91 	bl	8000b28 <__aeabi_dcmpgt>
 8008606:	b9c8      	cbnz	r0, 800863c <_dtoa_r+0x6e4>
 8008608:	4642      	mov	r2, r8
 800860a:	464b      	mov	r3, r9
 800860c:	4630      	mov	r0, r6
 800860e:	4639      	mov	r1, r7
 8008610:	f7f8 fa62 	bl	8000ad8 <__aeabi_dcmpeq>
 8008614:	b110      	cbz	r0, 800861c <_dtoa_r+0x6c4>
 8008616:	9b01      	ldr	r3, [sp, #4]
 8008618:	07db      	lsls	r3, r3, #31
 800861a:	d40f      	bmi.n	800863c <_dtoa_r+0x6e4>
 800861c:	4651      	mov	r1, sl
 800861e:	4620      	mov	r0, r4
 8008620:	f000 fbcc 	bl	8008dbc <_Bfree>
 8008624:	2300      	movs	r3, #0
 8008626:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008628:	702b      	strb	r3, [r5, #0]
 800862a:	f10b 0301 	add.w	r3, fp, #1
 800862e:	6013      	str	r3, [r2, #0]
 8008630:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008632:	2b00      	cmp	r3, #0
 8008634:	f43f ace2 	beq.w	8007ffc <_dtoa_r+0xa4>
 8008638:	601d      	str	r5, [r3, #0]
 800863a:	e4df      	b.n	8007ffc <_dtoa_r+0xa4>
 800863c:	465f      	mov	r7, fp
 800863e:	462b      	mov	r3, r5
 8008640:	461d      	mov	r5, r3
 8008642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008646:	2a39      	cmp	r2, #57	; 0x39
 8008648:	d106      	bne.n	8008658 <_dtoa_r+0x700>
 800864a:	9a00      	ldr	r2, [sp, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d1f7      	bne.n	8008640 <_dtoa_r+0x6e8>
 8008650:	9900      	ldr	r1, [sp, #0]
 8008652:	2230      	movs	r2, #48	; 0x30
 8008654:	3701      	adds	r7, #1
 8008656:	700a      	strb	r2, [r1, #0]
 8008658:	781a      	ldrb	r2, [r3, #0]
 800865a:	3201      	adds	r2, #1
 800865c:	701a      	strb	r2, [r3, #0]
 800865e:	e790      	b.n	8008582 <_dtoa_r+0x62a>
 8008660:	4ba3      	ldr	r3, [pc, #652]	; (80088f0 <_dtoa_r+0x998>)
 8008662:	2200      	movs	r2, #0
 8008664:	f7f7 ffd0 	bl	8000608 <__aeabi_dmul>
 8008668:	2200      	movs	r2, #0
 800866a:	2300      	movs	r3, #0
 800866c:	4606      	mov	r6, r0
 800866e:	460f      	mov	r7, r1
 8008670:	f7f8 fa32 	bl	8000ad8 <__aeabi_dcmpeq>
 8008674:	2800      	cmp	r0, #0
 8008676:	d09e      	beq.n	80085b6 <_dtoa_r+0x65e>
 8008678:	e7d0      	b.n	800861c <_dtoa_r+0x6c4>
 800867a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800867c:	2a00      	cmp	r2, #0
 800867e:	f000 80ca 	beq.w	8008816 <_dtoa_r+0x8be>
 8008682:	9a07      	ldr	r2, [sp, #28]
 8008684:	2a01      	cmp	r2, #1
 8008686:	f300 80ad 	bgt.w	80087e4 <_dtoa_r+0x88c>
 800868a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800868c:	2a00      	cmp	r2, #0
 800868e:	f000 80a5 	beq.w	80087dc <_dtoa_r+0x884>
 8008692:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008696:	9e08      	ldr	r6, [sp, #32]
 8008698:	9d05      	ldr	r5, [sp, #20]
 800869a:	9a05      	ldr	r2, [sp, #20]
 800869c:	441a      	add	r2, r3
 800869e:	9205      	str	r2, [sp, #20]
 80086a0:	9a06      	ldr	r2, [sp, #24]
 80086a2:	2101      	movs	r1, #1
 80086a4:	441a      	add	r2, r3
 80086a6:	4620      	mov	r0, r4
 80086a8:	9206      	str	r2, [sp, #24]
 80086aa:	f000 fc3d 	bl	8008f28 <__i2b>
 80086ae:	4607      	mov	r7, r0
 80086b0:	b165      	cbz	r5, 80086cc <_dtoa_r+0x774>
 80086b2:	9b06      	ldr	r3, [sp, #24]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	dd09      	ble.n	80086cc <_dtoa_r+0x774>
 80086b8:	42ab      	cmp	r3, r5
 80086ba:	9a05      	ldr	r2, [sp, #20]
 80086bc:	bfa8      	it	ge
 80086be:	462b      	movge	r3, r5
 80086c0:	1ad2      	subs	r2, r2, r3
 80086c2:	9205      	str	r2, [sp, #20]
 80086c4:	9a06      	ldr	r2, [sp, #24]
 80086c6:	1aed      	subs	r5, r5, r3
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	9306      	str	r3, [sp, #24]
 80086cc:	9b08      	ldr	r3, [sp, #32]
 80086ce:	b1f3      	cbz	r3, 800870e <_dtoa_r+0x7b6>
 80086d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 80a3 	beq.w	800881e <_dtoa_r+0x8c6>
 80086d8:	2e00      	cmp	r6, #0
 80086da:	dd10      	ble.n	80086fe <_dtoa_r+0x7a6>
 80086dc:	4639      	mov	r1, r7
 80086de:	4632      	mov	r2, r6
 80086e0:	4620      	mov	r0, r4
 80086e2:	f000 fce1 	bl	80090a8 <__pow5mult>
 80086e6:	4652      	mov	r2, sl
 80086e8:	4601      	mov	r1, r0
 80086ea:	4607      	mov	r7, r0
 80086ec:	4620      	mov	r0, r4
 80086ee:	f000 fc31 	bl	8008f54 <__multiply>
 80086f2:	4651      	mov	r1, sl
 80086f4:	4680      	mov	r8, r0
 80086f6:	4620      	mov	r0, r4
 80086f8:	f000 fb60 	bl	8008dbc <_Bfree>
 80086fc:	46c2      	mov	sl, r8
 80086fe:	9b08      	ldr	r3, [sp, #32]
 8008700:	1b9a      	subs	r2, r3, r6
 8008702:	d004      	beq.n	800870e <_dtoa_r+0x7b6>
 8008704:	4651      	mov	r1, sl
 8008706:	4620      	mov	r0, r4
 8008708:	f000 fcce 	bl	80090a8 <__pow5mult>
 800870c:	4682      	mov	sl, r0
 800870e:	2101      	movs	r1, #1
 8008710:	4620      	mov	r0, r4
 8008712:	f000 fc09 	bl	8008f28 <__i2b>
 8008716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008718:	2b00      	cmp	r3, #0
 800871a:	4606      	mov	r6, r0
 800871c:	f340 8081 	ble.w	8008822 <_dtoa_r+0x8ca>
 8008720:	461a      	mov	r2, r3
 8008722:	4601      	mov	r1, r0
 8008724:	4620      	mov	r0, r4
 8008726:	f000 fcbf 	bl	80090a8 <__pow5mult>
 800872a:	9b07      	ldr	r3, [sp, #28]
 800872c:	2b01      	cmp	r3, #1
 800872e:	4606      	mov	r6, r0
 8008730:	dd7a      	ble.n	8008828 <_dtoa_r+0x8d0>
 8008732:	f04f 0800 	mov.w	r8, #0
 8008736:	6933      	ldr	r3, [r6, #16]
 8008738:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800873c:	6918      	ldr	r0, [r3, #16]
 800873e:	f000 fba5 	bl	8008e8c <__hi0bits>
 8008742:	f1c0 0020 	rsb	r0, r0, #32
 8008746:	9b06      	ldr	r3, [sp, #24]
 8008748:	4418      	add	r0, r3
 800874a:	f010 001f 	ands.w	r0, r0, #31
 800874e:	f000 8094 	beq.w	800887a <_dtoa_r+0x922>
 8008752:	f1c0 0320 	rsb	r3, r0, #32
 8008756:	2b04      	cmp	r3, #4
 8008758:	f340 8085 	ble.w	8008866 <_dtoa_r+0x90e>
 800875c:	9b05      	ldr	r3, [sp, #20]
 800875e:	f1c0 001c 	rsb	r0, r0, #28
 8008762:	4403      	add	r3, r0
 8008764:	9305      	str	r3, [sp, #20]
 8008766:	9b06      	ldr	r3, [sp, #24]
 8008768:	4403      	add	r3, r0
 800876a:	4405      	add	r5, r0
 800876c:	9306      	str	r3, [sp, #24]
 800876e:	9b05      	ldr	r3, [sp, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	dd05      	ble.n	8008780 <_dtoa_r+0x828>
 8008774:	4651      	mov	r1, sl
 8008776:	461a      	mov	r2, r3
 8008778:	4620      	mov	r0, r4
 800877a:	f000 fcef 	bl	800915c <__lshift>
 800877e:	4682      	mov	sl, r0
 8008780:	9b06      	ldr	r3, [sp, #24]
 8008782:	2b00      	cmp	r3, #0
 8008784:	dd05      	ble.n	8008792 <_dtoa_r+0x83a>
 8008786:	4631      	mov	r1, r6
 8008788:	461a      	mov	r2, r3
 800878a:	4620      	mov	r0, r4
 800878c:	f000 fce6 	bl	800915c <__lshift>
 8008790:	4606      	mov	r6, r0
 8008792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008794:	2b00      	cmp	r3, #0
 8008796:	d072      	beq.n	800887e <_dtoa_r+0x926>
 8008798:	4631      	mov	r1, r6
 800879a:	4650      	mov	r0, sl
 800879c:	f000 fd4a 	bl	8009234 <__mcmp>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	da6c      	bge.n	800887e <_dtoa_r+0x926>
 80087a4:	2300      	movs	r3, #0
 80087a6:	4651      	mov	r1, sl
 80087a8:	220a      	movs	r2, #10
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 fb28 	bl	8008e00 <__multadd>
 80087b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087b6:	4682      	mov	sl, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 81b0 	beq.w	8008b1e <_dtoa_r+0xbc6>
 80087be:	2300      	movs	r3, #0
 80087c0:	4639      	mov	r1, r7
 80087c2:	220a      	movs	r2, #10
 80087c4:	4620      	mov	r0, r4
 80087c6:	f000 fb1b 	bl	8008e00 <__multadd>
 80087ca:	9b01      	ldr	r3, [sp, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	4607      	mov	r7, r0
 80087d0:	f300 8096 	bgt.w	8008900 <_dtoa_r+0x9a8>
 80087d4:	9b07      	ldr	r3, [sp, #28]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	dc59      	bgt.n	800888e <_dtoa_r+0x936>
 80087da:	e091      	b.n	8008900 <_dtoa_r+0x9a8>
 80087dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087e2:	e758      	b.n	8008696 <_dtoa_r+0x73e>
 80087e4:	9b04      	ldr	r3, [sp, #16]
 80087e6:	1e5e      	subs	r6, r3, #1
 80087e8:	9b08      	ldr	r3, [sp, #32]
 80087ea:	42b3      	cmp	r3, r6
 80087ec:	bfbf      	itttt	lt
 80087ee:	9b08      	ldrlt	r3, [sp, #32]
 80087f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80087f2:	9608      	strlt	r6, [sp, #32]
 80087f4:	1af3      	sublt	r3, r6, r3
 80087f6:	bfb4      	ite	lt
 80087f8:	18d2      	addlt	r2, r2, r3
 80087fa:	1b9e      	subge	r6, r3, r6
 80087fc:	9b04      	ldr	r3, [sp, #16]
 80087fe:	bfbc      	itt	lt
 8008800:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008802:	2600      	movlt	r6, #0
 8008804:	2b00      	cmp	r3, #0
 8008806:	bfb7      	itett	lt
 8008808:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800880c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008810:	1a9d      	sublt	r5, r3, r2
 8008812:	2300      	movlt	r3, #0
 8008814:	e741      	b.n	800869a <_dtoa_r+0x742>
 8008816:	9e08      	ldr	r6, [sp, #32]
 8008818:	9d05      	ldr	r5, [sp, #20]
 800881a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800881c:	e748      	b.n	80086b0 <_dtoa_r+0x758>
 800881e:	9a08      	ldr	r2, [sp, #32]
 8008820:	e770      	b.n	8008704 <_dtoa_r+0x7ac>
 8008822:	9b07      	ldr	r3, [sp, #28]
 8008824:	2b01      	cmp	r3, #1
 8008826:	dc19      	bgt.n	800885c <_dtoa_r+0x904>
 8008828:	9b02      	ldr	r3, [sp, #8]
 800882a:	b9bb      	cbnz	r3, 800885c <_dtoa_r+0x904>
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008832:	b99b      	cbnz	r3, 800885c <_dtoa_r+0x904>
 8008834:	9b03      	ldr	r3, [sp, #12]
 8008836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800883a:	0d1b      	lsrs	r3, r3, #20
 800883c:	051b      	lsls	r3, r3, #20
 800883e:	b183      	cbz	r3, 8008862 <_dtoa_r+0x90a>
 8008840:	9b05      	ldr	r3, [sp, #20]
 8008842:	3301      	adds	r3, #1
 8008844:	9305      	str	r3, [sp, #20]
 8008846:	9b06      	ldr	r3, [sp, #24]
 8008848:	3301      	adds	r3, #1
 800884a:	9306      	str	r3, [sp, #24]
 800884c:	f04f 0801 	mov.w	r8, #1
 8008850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008852:	2b00      	cmp	r3, #0
 8008854:	f47f af6f 	bne.w	8008736 <_dtoa_r+0x7de>
 8008858:	2001      	movs	r0, #1
 800885a:	e774      	b.n	8008746 <_dtoa_r+0x7ee>
 800885c:	f04f 0800 	mov.w	r8, #0
 8008860:	e7f6      	b.n	8008850 <_dtoa_r+0x8f8>
 8008862:	4698      	mov	r8, r3
 8008864:	e7f4      	b.n	8008850 <_dtoa_r+0x8f8>
 8008866:	d082      	beq.n	800876e <_dtoa_r+0x816>
 8008868:	9a05      	ldr	r2, [sp, #20]
 800886a:	331c      	adds	r3, #28
 800886c:	441a      	add	r2, r3
 800886e:	9205      	str	r2, [sp, #20]
 8008870:	9a06      	ldr	r2, [sp, #24]
 8008872:	441a      	add	r2, r3
 8008874:	441d      	add	r5, r3
 8008876:	9206      	str	r2, [sp, #24]
 8008878:	e779      	b.n	800876e <_dtoa_r+0x816>
 800887a:	4603      	mov	r3, r0
 800887c:	e7f4      	b.n	8008868 <_dtoa_r+0x910>
 800887e:	9b04      	ldr	r3, [sp, #16]
 8008880:	2b00      	cmp	r3, #0
 8008882:	dc37      	bgt.n	80088f4 <_dtoa_r+0x99c>
 8008884:	9b07      	ldr	r3, [sp, #28]
 8008886:	2b02      	cmp	r3, #2
 8008888:	dd34      	ble.n	80088f4 <_dtoa_r+0x99c>
 800888a:	9b04      	ldr	r3, [sp, #16]
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	9b01      	ldr	r3, [sp, #4]
 8008890:	b963      	cbnz	r3, 80088ac <_dtoa_r+0x954>
 8008892:	4631      	mov	r1, r6
 8008894:	2205      	movs	r2, #5
 8008896:	4620      	mov	r0, r4
 8008898:	f000 fab2 	bl	8008e00 <__multadd>
 800889c:	4601      	mov	r1, r0
 800889e:	4606      	mov	r6, r0
 80088a0:	4650      	mov	r0, sl
 80088a2:	f000 fcc7 	bl	8009234 <__mcmp>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	f73f adbb 	bgt.w	8008422 <_dtoa_r+0x4ca>
 80088ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ae:	9d00      	ldr	r5, [sp, #0]
 80088b0:	ea6f 0b03 	mvn.w	fp, r3
 80088b4:	f04f 0800 	mov.w	r8, #0
 80088b8:	4631      	mov	r1, r6
 80088ba:	4620      	mov	r0, r4
 80088bc:	f000 fa7e 	bl	8008dbc <_Bfree>
 80088c0:	2f00      	cmp	r7, #0
 80088c2:	f43f aeab 	beq.w	800861c <_dtoa_r+0x6c4>
 80088c6:	f1b8 0f00 	cmp.w	r8, #0
 80088ca:	d005      	beq.n	80088d8 <_dtoa_r+0x980>
 80088cc:	45b8      	cmp	r8, r7
 80088ce:	d003      	beq.n	80088d8 <_dtoa_r+0x980>
 80088d0:	4641      	mov	r1, r8
 80088d2:	4620      	mov	r0, r4
 80088d4:	f000 fa72 	bl	8008dbc <_Bfree>
 80088d8:	4639      	mov	r1, r7
 80088da:	4620      	mov	r0, r4
 80088dc:	f000 fa6e 	bl	8008dbc <_Bfree>
 80088e0:	e69c      	b.n	800861c <_dtoa_r+0x6c4>
 80088e2:	2600      	movs	r6, #0
 80088e4:	4637      	mov	r7, r6
 80088e6:	e7e1      	b.n	80088ac <_dtoa_r+0x954>
 80088e8:	46bb      	mov	fp, r7
 80088ea:	4637      	mov	r7, r6
 80088ec:	e599      	b.n	8008422 <_dtoa_r+0x4ca>
 80088ee:	bf00      	nop
 80088f0:	40240000 	.word	0x40240000
 80088f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 80c8 	beq.w	8008a8c <_dtoa_r+0xb34>
 80088fc:	9b04      	ldr	r3, [sp, #16]
 80088fe:	9301      	str	r3, [sp, #4]
 8008900:	2d00      	cmp	r5, #0
 8008902:	dd05      	ble.n	8008910 <_dtoa_r+0x9b8>
 8008904:	4639      	mov	r1, r7
 8008906:	462a      	mov	r2, r5
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fc27 	bl	800915c <__lshift>
 800890e:	4607      	mov	r7, r0
 8008910:	f1b8 0f00 	cmp.w	r8, #0
 8008914:	d05b      	beq.n	80089ce <_dtoa_r+0xa76>
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	4620      	mov	r0, r4
 800891a:	f000 fa0f 	bl	8008d3c <_Balloc>
 800891e:	4605      	mov	r5, r0
 8008920:	b928      	cbnz	r0, 800892e <_dtoa_r+0x9d6>
 8008922:	4b83      	ldr	r3, [pc, #524]	; (8008b30 <_dtoa_r+0xbd8>)
 8008924:	4602      	mov	r2, r0
 8008926:	f240 21ef 	movw	r1, #751	; 0x2ef
 800892a:	f7ff bb2e 	b.w	8007f8a <_dtoa_r+0x32>
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	3202      	adds	r2, #2
 8008932:	0092      	lsls	r2, r2, #2
 8008934:	f107 010c 	add.w	r1, r7, #12
 8008938:	300c      	adds	r0, #12
 800893a:	f000 fe39 	bl	80095b0 <memcpy>
 800893e:	2201      	movs	r2, #1
 8008940:	4629      	mov	r1, r5
 8008942:	4620      	mov	r0, r4
 8008944:	f000 fc0a 	bl	800915c <__lshift>
 8008948:	9b00      	ldr	r3, [sp, #0]
 800894a:	3301      	adds	r3, #1
 800894c:	9304      	str	r3, [sp, #16]
 800894e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008952:	4413      	add	r3, r2
 8008954:	9308      	str	r3, [sp, #32]
 8008956:	9b02      	ldr	r3, [sp, #8]
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	46b8      	mov	r8, r7
 800895e:	9306      	str	r3, [sp, #24]
 8008960:	4607      	mov	r7, r0
 8008962:	9b04      	ldr	r3, [sp, #16]
 8008964:	4631      	mov	r1, r6
 8008966:	3b01      	subs	r3, #1
 8008968:	4650      	mov	r0, sl
 800896a:	9301      	str	r3, [sp, #4]
 800896c:	f7ff fa69 	bl	8007e42 <quorem>
 8008970:	4641      	mov	r1, r8
 8008972:	9002      	str	r0, [sp, #8]
 8008974:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008978:	4650      	mov	r0, sl
 800897a:	f000 fc5b 	bl	8009234 <__mcmp>
 800897e:	463a      	mov	r2, r7
 8008980:	9005      	str	r0, [sp, #20]
 8008982:	4631      	mov	r1, r6
 8008984:	4620      	mov	r0, r4
 8008986:	f000 fc71 	bl	800926c <__mdiff>
 800898a:	68c2      	ldr	r2, [r0, #12]
 800898c:	4605      	mov	r5, r0
 800898e:	bb02      	cbnz	r2, 80089d2 <_dtoa_r+0xa7a>
 8008990:	4601      	mov	r1, r0
 8008992:	4650      	mov	r0, sl
 8008994:	f000 fc4e 	bl	8009234 <__mcmp>
 8008998:	4602      	mov	r2, r0
 800899a:	4629      	mov	r1, r5
 800899c:	4620      	mov	r0, r4
 800899e:	9209      	str	r2, [sp, #36]	; 0x24
 80089a0:	f000 fa0c 	bl	8008dbc <_Bfree>
 80089a4:	9b07      	ldr	r3, [sp, #28]
 80089a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089a8:	9d04      	ldr	r5, [sp, #16]
 80089aa:	ea43 0102 	orr.w	r1, r3, r2
 80089ae:	9b06      	ldr	r3, [sp, #24]
 80089b0:	4319      	orrs	r1, r3
 80089b2:	d110      	bne.n	80089d6 <_dtoa_r+0xa7e>
 80089b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80089b8:	d029      	beq.n	8008a0e <_dtoa_r+0xab6>
 80089ba:	9b05      	ldr	r3, [sp, #20]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	dd02      	ble.n	80089c6 <_dtoa_r+0xa6e>
 80089c0:	9b02      	ldr	r3, [sp, #8]
 80089c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80089c6:	9b01      	ldr	r3, [sp, #4]
 80089c8:	f883 9000 	strb.w	r9, [r3]
 80089cc:	e774      	b.n	80088b8 <_dtoa_r+0x960>
 80089ce:	4638      	mov	r0, r7
 80089d0:	e7ba      	b.n	8008948 <_dtoa_r+0x9f0>
 80089d2:	2201      	movs	r2, #1
 80089d4:	e7e1      	b.n	800899a <_dtoa_r+0xa42>
 80089d6:	9b05      	ldr	r3, [sp, #20]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	db04      	blt.n	80089e6 <_dtoa_r+0xa8e>
 80089dc:	9907      	ldr	r1, [sp, #28]
 80089de:	430b      	orrs	r3, r1
 80089e0:	9906      	ldr	r1, [sp, #24]
 80089e2:	430b      	orrs	r3, r1
 80089e4:	d120      	bne.n	8008a28 <_dtoa_r+0xad0>
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	dded      	ble.n	80089c6 <_dtoa_r+0xa6e>
 80089ea:	4651      	mov	r1, sl
 80089ec:	2201      	movs	r2, #1
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 fbb4 	bl	800915c <__lshift>
 80089f4:	4631      	mov	r1, r6
 80089f6:	4682      	mov	sl, r0
 80089f8:	f000 fc1c 	bl	8009234 <__mcmp>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	dc03      	bgt.n	8008a08 <_dtoa_r+0xab0>
 8008a00:	d1e1      	bne.n	80089c6 <_dtoa_r+0xa6e>
 8008a02:	f019 0f01 	tst.w	r9, #1
 8008a06:	d0de      	beq.n	80089c6 <_dtoa_r+0xa6e>
 8008a08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008a0c:	d1d8      	bne.n	80089c0 <_dtoa_r+0xa68>
 8008a0e:	9a01      	ldr	r2, [sp, #4]
 8008a10:	2339      	movs	r3, #57	; 0x39
 8008a12:	7013      	strb	r3, [r2, #0]
 8008a14:	462b      	mov	r3, r5
 8008a16:	461d      	mov	r5, r3
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a1e:	2a39      	cmp	r2, #57	; 0x39
 8008a20:	d06c      	beq.n	8008afc <_dtoa_r+0xba4>
 8008a22:	3201      	adds	r2, #1
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	e747      	b.n	80088b8 <_dtoa_r+0x960>
 8008a28:	2a00      	cmp	r2, #0
 8008a2a:	dd07      	ble.n	8008a3c <_dtoa_r+0xae4>
 8008a2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008a30:	d0ed      	beq.n	8008a0e <_dtoa_r+0xab6>
 8008a32:	9a01      	ldr	r2, [sp, #4]
 8008a34:	f109 0301 	add.w	r3, r9, #1
 8008a38:	7013      	strb	r3, [r2, #0]
 8008a3a:	e73d      	b.n	80088b8 <_dtoa_r+0x960>
 8008a3c:	9b04      	ldr	r3, [sp, #16]
 8008a3e:	9a08      	ldr	r2, [sp, #32]
 8008a40:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d043      	beq.n	8008ad0 <_dtoa_r+0xb78>
 8008a48:	4651      	mov	r1, sl
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	220a      	movs	r2, #10
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 f9d6 	bl	8008e00 <__multadd>
 8008a54:	45b8      	cmp	r8, r7
 8008a56:	4682      	mov	sl, r0
 8008a58:	f04f 0300 	mov.w	r3, #0
 8008a5c:	f04f 020a 	mov.w	r2, #10
 8008a60:	4641      	mov	r1, r8
 8008a62:	4620      	mov	r0, r4
 8008a64:	d107      	bne.n	8008a76 <_dtoa_r+0xb1e>
 8008a66:	f000 f9cb 	bl	8008e00 <__multadd>
 8008a6a:	4680      	mov	r8, r0
 8008a6c:	4607      	mov	r7, r0
 8008a6e:	9b04      	ldr	r3, [sp, #16]
 8008a70:	3301      	adds	r3, #1
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	e775      	b.n	8008962 <_dtoa_r+0xa0a>
 8008a76:	f000 f9c3 	bl	8008e00 <__multadd>
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	4680      	mov	r8, r0
 8008a7e:	2300      	movs	r3, #0
 8008a80:	220a      	movs	r2, #10
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 f9bc 	bl	8008e00 <__multadd>
 8008a88:	4607      	mov	r7, r0
 8008a8a:	e7f0      	b.n	8008a6e <_dtoa_r+0xb16>
 8008a8c:	9b04      	ldr	r3, [sp, #16]
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	9d00      	ldr	r5, [sp, #0]
 8008a92:	4631      	mov	r1, r6
 8008a94:	4650      	mov	r0, sl
 8008a96:	f7ff f9d4 	bl	8007e42 <quorem>
 8008a9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008a9e:	9b00      	ldr	r3, [sp, #0]
 8008aa0:	f805 9b01 	strb.w	r9, [r5], #1
 8008aa4:	1aea      	subs	r2, r5, r3
 8008aa6:	9b01      	ldr	r3, [sp, #4]
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	dd07      	ble.n	8008abc <_dtoa_r+0xb64>
 8008aac:	4651      	mov	r1, sl
 8008aae:	2300      	movs	r3, #0
 8008ab0:	220a      	movs	r2, #10
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f000 f9a4 	bl	8008e00 <__multadd>
 8008ab8:	4682      	mov	sl, r0
 8008aba:	e7ea      	b.n	8008a92 <_dtoa_r+0xb3a>
 8008abc:	9b01      	ldr	r3, [sp, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bfc8      	it	gt
 8008ac2:	461d      	movgt	r5, r3
 8008ac4:	9b00      	ldr	r3, [sp, #0]
 8008ac6:	bfd8      	it	le
 8008ac8:	2501      	movle	r5, #1
 8008aca:	441d      	add	r5, r3
 8008acc:	f04f 0800 	mov.w	r8, #0
 8008ad0:	4651      	mov	r1, sl
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f000 fb41 	bl	800915c <__lshift>
 8008ada:	4631      	mov	r1, r6
 8008adc:	4682      	mov	sl, r0
 8008ade:	f000 fba9 	bl	8009234 <__mcmp>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	dc96      	bgt.n	8008a14 <_dtoa_r+0xabc>
 8008ae6:	d102      	bne.n	8008aee <_dtoa_r+0xb96>
 8008ae8:	f019 0f01 	tst.w	r9, #1
 8008aec:	d192      	bne.n	8008a14 <_dtoa_r+0xabc>
 8008aee:	462b      	mov	r3, r5
 8008af0:	461d      	mov	r5, r3
 8008af2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008af6:	2a30      	cmp	r2, #48	; 0x30
 8008af8:	d0fa      	beq.n	8008af0 <_dtoa_r+0xb98>
 8008afa:	e6dd      	b.n	80088b8 <_dtoa_r+0x960>
 8008afc:	9a00      	ldr	r2, [sp, #0]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d189      	bne.n	8008a16 <_dtoa_r+0xabe>
 8008b02:	f10b 0b01 	add.w	fp, fp, #1
 8008b06:	2331      	movs	r3, #49	; 0x31
 8008b08:	e796      	b.n	8008a38 <_dtoa_r+0xae0>
 8008b0a:	4b0a      	ldr	r3, [pc, #40]	; (8008b34 <_dtoa_r+0xbdc>)
 8008b0c:	f7ff ba99 	b.w	8008042 <_dtoa_r+0xea>
 8008b10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f47f aa6d 	bne.w	8007ff2 <_dtoa_r+0x9a>
 8008b18:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <_dtoa_r+0xbe0>)
 8008b1a:	f7ff ba92 	b.w	8008042 <_dtoa_r+0xea>
 8008b1e:	9b01      	ldr	r3, [sp, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	dcb5      	bgt.n	8008a90 <_dtoa_r+0xb38>
 8008b24:	9b07      	ldr	r3, [sp, #28]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	f73f aeb1 	bgt.w	800888e <_dtoa_r+0x936>
 8008b2c:	e7b0      	b.n	8008a90 <_dtoa_r+0xb38>
 8008b2e:	bf00      	nop
 8008b30:	08009cc8 	.word	0x08009cc8
 8008b34:	08009c28 	.word	0x08009c28
 8008b38:	08009c4c 	.word	0x08009c4c

08008b3c <_free_r>:
 8008b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b3e:	2900      	cmp	r1, #0
 8008b40:	d044      	beq.n	8008bcc <_free_r+0x90>
 8008b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b46:	9001      	str	r0, [sp, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008b4e:	bfb8      	it	lt
 8008b50:	18e4      	addlt	r4, r4, r3
 8008b52:	f000 f8e7 	bl	8008d24 <__malloc_lock>
 8008b56:	4a1e      	ldr	r2, [pc, #120]	; (8008bd0 <_free_r+0x94>)
 8008b58:	9801      	ldr	r0, [sp, #4]
 8008b5a:	6813      	ldr	r3, [r2, #0]
 8008b5c:	b933      	cbnz	r3, 8008b6c <_free_r+0x30>
 8008b5e:	6063      	str	r3, [r4, #4]
 8008b60:	6014      	str	r4, [r2, #0]
 8008b62:	b003      	add	sp, #12
 8008b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b68:	f000 b8e2 	b.w	8008d30 <__malloc_unlock>
 8008b6c:	42a3      	cmp	r3, r4
 8008b6e:	d908      	bls.n	8008b82 <_free_r+0x46>
 8008b70:	6825      	ldr	r5, [r4, #0]
 8008b72:	1961      	adds	r1, r4, r5
 8008b74:	428b      	cmp	r3, r1
 8008b76:	bf01      	itttt	eq
 8008b78:	6819      	ldreq	r1, [r3, #0]
 8008b7a:	685b      	ldreq	r3, [r3, #4]
 8008b7c:	1949      	addeq	r1, r1, r5
 8008b7e:	6021      	streq	r1, [r4, #0]
 8008b80:	e7ed      	b.n	8008b5e <_free_r+0x22>
 8008b82:	461a      	mov	r2, r3
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	b10b      	cbz	r3, 8008b8c <_free_r+0x50>
 8008b88:	42a3      	cmp	r3, r4
 8008b8a:	d9fa      	bls.n	8008b82 <_free_r+0x46>
 8008b8c:	6811      	ldr	r1, [r2, #0]
 8008b8e:	1855      	adds	r5, r2, r1
 8008b90:	42a5      	cmp	r5, r4
 8008b92:	d10b      	bne.n	8008bac <_free_r+0x70>
 8008b94:	6824      	ldr	r4, [r4, #0]
 8008b96:	4421      	add	r1, r4
 8008b98:	1854      	adds	r4, r2, r1
 8008b9a:	42a3      	cmp	r3, r4
 8008b9c:	6011      	str	r1, [r2, #0]
 8008b9e:	d1e0      	bne.n	8008b62 <_free_r+0x26>
 8008ba0:	681c      	ldr	r4, [r3, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	6053      	str	r3, [r2, #4]
 8008ba6:	440c      	add	r4, r1
 8008ba8:	6014      	str	r4, [r2, #0]
 8008baa:	e7da      	b.n	8008b62 <_free_r+0x26>
 8008bac:	d902      	bls.n	8008bb4 <_free_r+0x78>
 8008bae:	230c      	movs	r3, #12
 8008bb0:	6003      	str	r3, [r0, #0]
 8008bb2:	e7d6      	b.n	8008b62 <_free_r+0x26>
 8008bb4:	6825      	ldr	r5, [r4, #0]
 8008bb6:	1961      	adds	r1, r4, r5
 8008bb8:	428b      	cmp	r3, r1
 8008bba:	bf04      	itt	eq
 8008bbc:	6819      	ldreq	r1, [r3, #0]
 8008bbe:	685b      	ldreq	r3, [r3, #4]
 8008bc0:	6063      	str	r3, [r4, #4]
 8008bc2:	bf04      	itt	eq
 8008bc4:	1949      	addeq	r1, r1, r5
 8008bc6:	6021      	streq	r1, [r4, #0]
 8008bc8:	6054      	str	r4, [r2, #4]
 8008bca:	e7ca      	b.n	8008b62 <_free_r+0x26>
 8008bcc:	b003      	add	sp, #12
 8008bce:	bd30      	pop	{r4, r5, pc}
 8008bd0:	200007bc 	.word	0x200007bc

08008bd4 <malloc>:
 8008bd4:	4b02      	ldr	r3, [pc, #8]	; (8008be0 <malloc+0xc>)
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	f000 b823 	b.w	8008c24 <_malloc_r>
 8008bde:	bf00      	nop
 8008be0:	200000f4 	.word	0x200000f4

08008be4 <sbrk_aligned>:
 8008be4:	b570      	push	{r4, r5, r6, lr}
 8008be6:	4e0e      	ldr	r6, [pc, #56]	; (8008c20 <sbrk_aligned+0x3c>)
 8008be8:	460c      	mov	r4, r1
 8008bea:	6831      	ldr	r1, [r6, #0]
 8008bec:	4605      	mov	r5, r0
 8008bee:	b911      	cbnz	r1, 8008bf6 <sbrk_aligned+0x12>
 8008bf0:	f000 fcce 	bl	8009590 <_sbrk_r>
 8008bf4:	6030      	str	r0, [r6, #0]
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f000 fcc9 	bl	8009590 <_sbrk_r>
 8008bfe:	1c43      	adds	r3, r0, #1
 8008c00:	d00a      	beq.n	8008c18 <sbrk_aligned+0x34>
 8008c02:	1cc4      	adds	r4, r0, #3
 8008c04:	f024 0403 	bic.w	r4, r4, #3
 8008c08:	42a0      	cmp	r0, r4
 8008c0a:	d007      	beq.n	8008c1c <sbrk_aligned+0x38>
 8008c0c:	1a21      	subs	r1, r4, r0
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f000 fcbe 	bl	8009590 <_sbrk_r>
 8008c14:	3001      	adds	r0, #1
 8008c16:	d101      	bne.n	8008c1c <sbrk_aligned+0x38>
 8008c18:	f04f 34ff 	mov.w	r4, #4294967295
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	200007c0 	.word	0x200007c0

08008c24 <_malloc_r>:
 8008c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c28:	1ccd      	adds	r5, r1, #3
 8008c2a:	f025 0503 	bic.w	r5, r5, #3
 8008c2e:	3508      	adds	r5, #8
 8008c30:	2d0c      	cmp	r5, #12
 8008c32:	bf38      	it	cc
 8008c34:	250c      	movcc	r5, #12
 8008c36:	2d00      	cmp	r5, #0
 8008c38:	4607      	mov	r7, r0
 8008c3a:	db01      	blt.n	8008c40 <_malloc_r+0x1c>
 8008c3c:	42a9      	cmp	r1, r5
 8008c3e:	d905      	bls.n	8008c4c <_malloc_r+0x28>
 8008c40:	230c      	movs	r3, #12
 8008c42:	603b      	str	r3, [r7, #0]
 8008c44:	2600      	movs	r6, #0
 8008c46:	4630      	mov	r0, r6
 8008c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d20 <_malloc_r+0xfc>
 8008c50:	f000 f868 	bl	8008d24 <__malloc_lock>
 8008c54:	f8d8 3000 	ldr.w	r3, [r8]
 8008c58:	461c      	mov	r4, r3
 8008c5a:	bb5c      	cbnz	r4, 8008cb4 <_malloc_r+0x90>
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	4638      	mov	r0, r7
 8008c60:	f7ff ffc0 	bl	8008be4 <sbrk_aligned>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	4604      	mov	r4, r0
 8008c68:	d155      	bne.n	8008d16 <_malloc_r+0xf2>
 8008c6a:	f8d8 4000 	ldr.w	r4, [r8]
 8008c6e:	4626      	mov	r6, r4
 8008c70:	2e00      	cmp	r6, #0
 8008c72:	d145      	bne.n	8008d00 <_malloc_r+0xdc>
 8008c74:	2c00      	cmp	r4, #0
 8008c76:	d048      	beq.n	8008d0a <_malloc_r+0xe6>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	eb04 0903 	add.w	r9, r4, r3
 8008c82:	f000 fc85 	bl	8009590 <_sbrk_r>
 8008c86:	4581      	cmp	r9, r0
 8008c88:	d13f      	bne.n	8008d0a <_malloc_r+0xe6>
 8008c8a:	6821      	ldr	r1, [r4, #0]
 8008c8c:	1a6d      	subs	r5, r5, r1
 8008c8e:	4629      	mov	r1, r5
 8008c90:	4638      	mov	r0, r7
 8008c92:	f7ff ffa7 	bl	8008be4 <sbrk_aligned>
 8008c96:	3001      	adds	r0, #1
 8008c98:	d037      	beq.n	8008d0a <_malloc_r+0xe6>
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	442b      	add	r3, r5
 8008c9e:	6023      	str	r3, [r4, #0]
 8008ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d038      	beq.n	8008d1a <_malloc_r+0xf6>
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	42a2      	cmp	r2, r4
 8008cac:	d12b      	bne.n	8008d06 <_malloc_r+0xe2>
 8008cae:	2200      	movs	r2, #0
 8008cb0:	605a      	str	r2, [r3, #4]
 8008cb2:	e00f      	b.n	8008cd4 <_malloc_r+0xb0>
 8008cb4:	6822      	ldr	r2, [r4, #0]
 8008cb6:	1b52      	subs	r2, r2, r5
 8008cb8:	d41f      	bmi.n	8008cfa <_malloc_r+0xd6>
 8008cba:	2a0b      	cmp	r2, #11
 8008cbc:	d917      	bls.n	8008cee <_malloc_r+0xca>
 8008cbe:	1961      	adds	r1, r4, r5
 8008cc0:	42a3      	cmp	r3, r4
 8008cc2:	6025      	str	r5, [r4, #0]
 8008cc4:	bf18      	it	ne
 8008cc6:	6059      	strne	r1, [r3, #4]
 8008cc8:	6863      	ldr	r3, [r4, #4]
 8008cca:	bf08      	it	eq
 8008ccc:	f8c8 1000 	streq.w	r1, [r8]
 8008cd0:	5162      	str	r2, [r4, r5]
 8008cd2:	604b      	str	r3, [r1, #4]
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	f104 060b 	add.w	r6, r4, #11
 8008cda:	f000 f829 	bl	8008d30 <__malloc_unlock>
 8008cde:	f026 0607 	bic.w	r6, r6, #7
 8008ce2:	1d23      	adds	r3, r4, #4
 8008ce4:	1af2      	subs	r2, r6, r3
 8008ce6:	d0ae      	beq.n	8008c46 <_malloc_r+0x22>
 8008ce8:	1b9b      	subs	r3, r3, r6
 8008cea:	50a3      	str	r3, [r4, r2]
 8008cec:	e7ab      	b.n	8008c46 <_malloc_r+0x22>
 8008cee:	42a3      	cmp	r3, r4
 8008cf0:	6862      	ldr	r2, [r4, #4]
 8008cf2:	d1dd      	bne.n	8008cb0 <_malloc_r+0x8c>
 8008cf4:	f8c8 2000 	str.w	r2, [r8]
 8008cf8:	e7ec      	b.n	8008cd4 <_malloc_r+0xb0>
 8008cfa:	4623      	mov	r3, r4
 8008cfc:	6864      	ldr	r4, [r4, #4]
 8008cfe:	e7ac      	b.n	8008c5a <_malloc_r+0x36>
 8008d00:	4634      	mov	r4, r6
 8008d02:	6876      	ldr	r6, [r6, #4]
 8008d04:	e7b4      	b.n	8008c70 <_malloc_r+0x4c>
 8008d06:	4613      	mov	r3, r2
 8008d08:	e7cc      	b.n	8008ca4 <_malloc_r+0x80>
 8008d0a:	230c      	movs	r3, #12
 8008d0c:	603b      	str	r3, [r7, #0]
 8008d0e:	4638      	mov	r0, r7
 8008d10:	f000 f80e 	bl	8008d30 <__malloc_unlock>
 8008d14:	e797      	b.n	8008c46 <_malloc_r+0x22>
 8008d16:	6025      	str	r5, [r4, #0]
 8008d18:	e7dc      	b.n	8008cd4 <_malloc_r+0xb0>
 8008d1a:	605b      	str	r3, [r3, #4]
 8008d1c:	deff      	udf	#255	; 0xff
 8008d1e:	bf00      	nop
 8008d20:	200007bc 	.word	0x200007bc

08008d24 <__malloc_lock>:
 8008d24:	4801      	ldr	r0, [pc, #4]	; (8008d2c <__malloc_lock+0x8>)
 8008d26:	f7ff b88a 	b.w	8007e3e <__retarget_lock_acquire_recursive>
 8008d2a:	bf00      	nop
 8008d2c:	200007b8 	.word	0x200007b8

08008d30 <__malloc_unlock>:
 8008d30:	4801      	ldr	r0, [pc, #4]	; (8008d38 <__malloc_unlock+0x8>)
 8008d32:	f7ff b885 	b.w	8007e40 <__retarget_lock_release_recursive>
 8008d36:	bf00      	nop
 8008d38:	200007b8 	.word	0x200007b8

08008d3c <_Balloc>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	69c6      	ldr	r6, [r0, #28]
 8008d40:	4604      	mov	r4, r0
 8008d42:	460d      	mov	r5, r1
 8008d44:	b976      	cbnz	r6, 8008d64 <_Balloc+0x28>
 8008d46:	2010      	movs	r0, #16
 8008d48:	f7ff ff44 	bl	8008bd4 <malloc>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	61e0      	str	r0, [r4, #28]
 8008d50:	b920      	cbnz	r0, 8008d5c <_Balloc+0x20>
 8008d52:	4b18      	ldr	r3, [pc, #96]	; (8008db4 <_Balloc+0x78>)
 8008d54:	4818      	ldr	r0, [pc, #96]	; (8008db8 <_Balloc+0x7c>)
 8008d56:	216b      	movs	r1, #107	; 0x6b
 8008d58:	f000 fc38 	bl	80095cc <__assert_func>
 8008d5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d60:	6006      	str	r6, [r0, #0]
 8008d62:	60c6      	str	r6, [r0, #12]
 8008d64:	69e6      	ldr	r6, [r4, #28]
 8008d66:	68f3      	ldr	r3, [r6, #12]
 8008d68:	b183      	cbz	r3, 8008d8c <_Balloc+0x50>
 8008d6a:	69e3      	ldr	r3, [r4, #28]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d72:	b9b8      	cbnz	r0, 8008da4 <_Balloc+0x68>
 8008d74:	2101      	movs	r1, #1
 8008d76:	fa01 f605 	lsl.w	r6, r1, r5
 8008d7a:	1d72      	adds	r2, r6, #5
 8008d7c:	0092      	lsls	r2, r2, #2
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f000 fc42 	bl	8009608 <_calloc_r>
 8008d84:	b160      	cbz	r0, 8008da0 <_Balloc+0x64>
 8008d86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d8a:	e00e      	b.n	8008daa <_Balloc+0x6e>
 8008d8c:	2221      	movs	r2, #33	; 0x21
 8008d8e:	2104      	movs	r1, #4
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 fc39 	bl	8009608 <_calloc_r>
 8008d96:	69e3      	ldr	r3, [r4, #28]
 8008d98:	60f0      	str	r0, [r6, #12]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e4      	bne.n	8008d6a <_Balloc+0x2e>
 8008da0:	2000      	movs	r0, #0
 8008da2:	bd70      	pop	{r4, r5, r6, pc}
 8008da4:	6802      	ldr	r2, [r0, #0]
 8008da6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008daa:	2300      	movs	r3, #0
 8008dac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008db0:	e7f7      	b.n	8008da2 <_Balloc+0x66>
 8008db2:	bf00      	nop
 8008db4:	08009c59 	.word	0x08009c59
 8008db8:	08009cd9 	.word	0x08009cd9

08008dbc <_Bfree>:
 8008dbc:	b570      	push	{r4, r5, r6, lr}
 8008dbe:	69c6      	ldr	r6, [r0, #28]
 8008dc0:	4605      	mov	r5, r0
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	b976      	cbnz	r6, 8008de4 <_Bfree+0x28>
 8008dc6:	2010      	movs	r0, #16
 8008dc8:	f7ff ff04 	bl	8008bd4 <malloc>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	61e8      	str	r0, [r5, #28]
 8008dd0:	b920      	cbnz	r0, 8008ddc <_Bfree+0x20>
 8008dd2:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <_Bfree+0x3c>)
 8008dd4:	4809      	ldr	r0, [pc, #36]	; (8008dfc <_Bfree+0x40>)
 8008dd6:	218f      	movs	r1, #143	; 0x8f
 8008dd8:	f000 fbf8 	bl	80095cc <__assert_func>
 8008ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008de0:	6006      	str	r6, [r0, #0]
 8008de2:	60c6      	str	r6, [r0, #12]
 8008de4:	b13c      	cbz	r4, 8008df6 <_Bfree+0x3a>
 8008de6:	69eb      	ldr	r3, [r5, #28]
 8008de8:	6862      	ldr	r2, [r4, #4]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008df0:	6021      	str	r1, [r4, #0]
 8008df2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008df6:	bd70      	pop	{r4, r5, r6, pc}
 8008df8:	08009c59 	.word	0x08009c59
 8008dfc:	08009cd9 	.word	0x08009cd9

08008e00 <__multadd>:
 8008e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e04:	690d      	ldr	r5, [r1, #16]
 8008e06:	4607      	mov	r7, r0
 8008e08:	460c      	mov	r4, r1
 8008e0a:	461e      	mov	r6, r3
 8008e0c:	f101 0c14 	add.w	ip, r1, #20
 8008e10:	2000      	movs	r0, #0
 8008e12:	f8dc 3000 	ldr.w	r3, [ip]
 8008e16:	b299      	uxth	r1, r3
 8008e18:	fb02 6101 	mla	r1, r2, r1, r6
 8008e1c:	0c1e      	lsrs	r6, r3, #16
 8008e1e:	0c0b      	lsrs	r3, r1, #16
 8008e20:	fb02 3306 	mla	r3, r2, r6, r3
 8008e24:	b289      	uxth	r1, r1
 8008e26:	3001      	adds	r0, #1
 8008e28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e2c:	4285      	cmp	r5, r0
 8008e2e:	f84c 1b04 	str.w	r1, [ip], #4
 8008e32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e36:	dcec      	bgt.n	8008e12 <__multadd+0x12>
 8008e38:	b30e      	cbz	r6, 8008e7e <__multadd+0x7e>
 8008e3a:	68a3      	ldr	r3, [r4, #8]
 8008e3c:	42ab      	cmp	r3, r5
 8008e3e:	dc19      	bgt.n	8008e74 <__multadd+0x74>
 8008e40:	6861      	ldr	r1, [r4, #4]
 8008e42:	4638      	mov	r0, r7
 8008e44:	3101      	adds	r1, #1
 8008e46:	f7ff ff79 	bl	8008d3c <_Balloc>
 8008e4a:	4680      	mov	r8, r0
 8008e4c:	b928      	cbnz	r0, 8008e5a <__multadd+0x5a>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	4b0c      	ldr	r3, [pc, #48]	; (8008e84 <__multadd+0x84>)
 8008e52:	480d      	ldr	r0, [pc, #52]	; (8008e88 <__multadd+0x88>)
 8008e54:	21ba      	movs	r1, #186	; 0xba
 8008e56:	f000 fbb9 	bl	80095cc <__assert_func>
 8008e5a:	6922      	ldr	r2, [r4, #16]
 8008e5c:	3202      	adds	r2, #2
 8008e5e:	f104 010c 	add.w	r1, r4, #12
 8008e62:	0092      	lsls	r2, r2, #2
 8008e64:	300c      	adds	r0, #12
 8008e66:	f000 fba3 	bl	80095b0 <memcpy>
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	f7ff ffa5 	bl	8008dbc <_Bfree>
 8008e72:	4644      	mov	r4, r8
 8008e74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e78:	3501      	adds	r5, #1
 8008e7a:	615e      	str	r6, [r3, #20]
 8008e7c:	6125      	str	r5, [r4, #16]
 8008e7e:	4620      	mov	r0, r4
 8008e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e84:	08009cc8 	.word	0x08009cc8
 8008e88:	08009cd9 	.word	0x08009cd9

08008e8c <__hi0bits>:
 8008e8c:	0c03      	lsrs	r3, r0, #16
 8008e8e:	041b      	lsls	r3, r3, #16
 8008e90:	b9d3      	cbnz	r3, 8008ec8 <__hi0bits+0x3c>
 8008e92:	0400      	lsls	r0, r0, #16
 8008e94:	2310      	movs	r3, #16
 8008e96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e9a:	bf04      	itt	eq
 8008e9c:	0200      	lsleq	r0, r0, #8
 8008e9e:	3308      	addeq	r3, #8
 8008ea0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ea4:	bf04      	itt	eq
 8008ea6:	0100      	lsleq	r0, r0, #4
 8008ea8:	3304      	addeq	r3, #4
 8008eaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008eae:	bf04      	itt	eq
 8008eb0:	0080      	lsleq	r0, r0, #2
 8008eb2:	3302      	addeq	r3, #2
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	db05      	blt.n	8008ec4 <__hi0bits+0x38>
 8008eb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ebc:	f103 0301 	add.w	r3, r3, #1
 8008ec0:	bf08      	it	eq
 8008ec2:	2320      	moveq	r3, #32
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	4770      	bx	lr
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e7e4      	b.n	8008e96 <__hi0bits+0xa>

08008ecc <__lo0bits>:
 8008ecc:	6803      	ldr	r3, [r0, #0]
 8008ece:	f013 0207 	ands.w	r2, r3, #7
 8008ed2:	d00c      	beq.n	8008eee <__lo0bits+0x22>
 8008ed4:	07d9      	lsls	r1, r3, #31
 8008ed6:	d422      	bmi.n	8008f1e <__lo0bits+0x52>
 8008ed8:	079a      	lsls	r2, r3, #30
 8008eda:	bf49      	itett	mi
 8008edc:	085b      	lsrmi	r3, r3, #1
 8008ede:	089b      	lsrpl	r3, r3, #2
 8008ee0:	6003      	strmi	r3, [r0, #0]
 8008ee2:	2201      	movmi	r2, #1
 8008ee4:	bf5c      	itt	pl
 8008ee6:	6003      	strpl	r3, [r0, #0]
 8008ee8:	2202      	movpl	r2, #2
 8008eea:	4610      	mov	r0, r2
 8008eec:	4770      	bx	lr
 8008eee:	b299      	uxth	r1, r3
 8008ef0:	b909      	cbnz	r1, 8008ef6 <__lo0bits+0x2a>
 8008ef2:	0c1b      	lsrs	r3, r3, #16
 8008ef4:	2210      	movs	r2, #16
 8008ef6:	b2d9      	uxtb	r1, r3
 8008ef8:	b909      	cbnz	r1, 8008efe <__lo0bits+0x32>
 8008efa:	3208      	adds	r2, #8
 8008efc:	0a1b      	lsrs	r3, r3, #8
 8008efe:	0719      	lsls	r1, r3, #28
 8008f00:	bf04      	itt	eq
 8008f02:	091b      	lsreq	r3, r3, #4
 8008f04:	3204      	addeq	r2, #4
 8008f06:	0799      	lsls	r1, r3, #30
 8008f08:	bf04      	itt	eq
 8008f0a:	089b      	lsreq	r3, r3, #2
 8008f0c:	3202      	addeq	r2, #2
 8008f0e:	07d9      	lsls	r1, r3, #31
 8008f10:	d403      	bmi.n	8008f1a <__lo0bits+0x4e>
 8008f12:	085b      	lsrs	r3, r3, #1
 8008f14:	f102 0201 	add.w	r2, r2, #1
 8008f18:	d003      	beq.n	8008f22 <__lo0bits+0x56>
 8008f1a:	6003      	str	r3, [r0, #0]
 8008f1c:	e7e5      	b.n	8008eea <__lo0bits+0x1e>
 8008f1e:	2200      	movs	r2, #0
 8008f20:	e7e3      	b.n	8008eea <__lo0bits+0x1e>
 8008f22:	2220      	movs	r2, #32
 8008f24:	e7e1      	b.n	8008eea <__lo0bits+0x1e>
	...

08008f28 <__i2b>:
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	f7ff ff05 	bl	8008d3c <_Balloc>
 8008f32:	4602      	mov	r2, r0
 8008f34:	b928      	cbnz	r0, 8008f42 <__i2b+0x1a>
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <__i2b+0x24>)
 8008f38:	4805      	ldr	r0, [pc, #20]	; (8008f50 <__i2b+0x28>)
 8008f3a:	f240 1145 	movw	r1, #325	; 0x145
 8008f3e:	f000 fb45 	bl	80095cc <__assert_func>
 8008f42:	2301      	movs	r3, #1
 8008f44:	6144      	str	r4, [r0, #20]
 8008f46:	6103      	str	r3, [r0, #16]
 8008f48:	bd10      	pop	{r4, pc}
 8008f4a:	bf00      	nop
 8008f4c:	08009cc8 	.word	0x08009cc8
 8008f50:	08009cd9 	.word	0x08009cd9

08008f54 <__multiply>:
 8008f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f58:	4691      	mov	r9, r2
 8008f5a:	690a      	ldr	r2, [r1, #16]
 8008f5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	bfb8      	it	lt
 8008f64:	460b      	movlt	r3, r1
 8008f66:	460c      	mov	r4, r1
 8008f68:	bfbc      	itt	lt
 8008f6a:	464c      	movlt	r4, r9
 8008f6c:	4699      	movlt	r9, r3
 8008f6e:	6927      	ldr	r7, [r4, #16]
 8008f70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f74:	68a3      	ldr	r3, [r4, #8]
 8008f76:	6861      	ldr	r1, [r4, #4]
 8008f78:	eb07 060a 	add.w	r6, r7, sl
 8008f7c:	42b3      	cmp	r3, r6
 8008f7e:	b085      	sub	sp, #20
 8008f80:	bfb8      	it	lt
 8008f82:	3101      	addlt	r1, #1
 8008f84:	f7ff feda 	bl	8008d3c <_Balloc>
 8008f88:	b930      	cbnz	r0, 8008f98 <__multiply+0x44>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	4b44      	ldr	r3, [pc, #272]	; (80090a0 <__multiply+0x14c>)
 8008f8e:	4845      	ldr	r0, [pc, #276]	; (80090a4 <__multiply+0x150>)
 8008f90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008f94:	f000 fb1a 	bl	80095cc <__assert_func>
 8008f98:	f100 0514 	add.w	r5, r0, #20
 8008f9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008fa0:	462b      	mov	r3, r5
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	4543      	cmp	r3, r8
 8008fa6:	d321      	bcc.n	8008fec <__multiply+0x98>
 8008fa8:	f104 0314 	add.w	r3, r4, #20
 8008fac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008fb0:	f109 0314 	add.w	r3, r9, #20
 8008fb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008fb8:	9202      	str	r2, [sp, #8]
 8008fba:	1b3a      	subs	r2, r7, r4
 8008fbc:	3a15      	subs	r2, #21
 8008fbe:	f022 0203 	bic.w	r2, r2, #3
 8008fc2:	3204      	adds	r2, #4
 8008fc4:	f104 0115 	add.w	r1, r4, #21
 8008fc8:	428f      	cmp	r7, r1
 8008fca:	bf38      	it	cc
 8008fcc:	2204      	movcc	r2, #4
 8008fce:	9201      	str	r2, [sp, #4]
 8008fd0:	9a02      	ldr	r2, [sp, #8]
 8008fd2:	9303      	str	r3, [sp, #12]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d80c      	bhi.n	8008ff2 <__multiply+0x9e>
 8008fd8:	2e00      	cmp	r6, #0
 8008fda:	dd03      	ble.n	8008fe4 <__multiply+0x90>
 8008fdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d05b      	beq.n	800909c <__multiply+0x148>
 8008fe4:	6106      	str	r6, [r0, #16]
 8008fe6:	b005      	add	sp, #20
 8008fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fec:	f843 2b04 	str.w	r2, [r3], #4
 8008ff0:	e7d8      	b.n	8008fa4 <__multiply+0x50>
 8008ff2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ff6:	f1ba 0f00 	cmp.w	sl, #0
 8008ffa:	d024      	beq.n	8009046 <__multiply+0xf2>
 8008ffc:	f104 0e14 	add.w	lr, r4, #20
 8009000:	46a9      	mov	r9, r5
 8009002:	f04f 0c00 	mov.w	ip, #0
 8009006:	f85e 2b04 	ldr.w	r2, [lr], #4
 800900a:	f8d9 1000 	ldr.w	r1, [r9]
 800900e:	fa1f fb82 	uxth.w	fp, r2
 8009012:	b289      	uxth	r1, r1
 8009014:	fb0a 110b 	mla	r1, sl, fp, r1
 8009018:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800901c:	f8d9 2000 	ldr.w	r2, [r9]
 8009020:	4461      	add	r1, ip
 8009022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009026:	fb0a c20b 	mla	r2, sl, fp, ip
 800902a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800902e:	b289      	uxth	r1, r1
 8009030:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009034:	4577      	cmp	r7, lr
 8009036:	f849 1b04 	str.w	r1, [r9], #4
 800903a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800903e:	d8e2      	bhi.n	8009006 <__multiply+0xb2>
 8009040:	9a01      	ldr	r2, [sp, #4]
 8009042:	f845 c002 	str.w	ip, [r5, r2]
 8009046:	9a03      	ldr	r2, [sp, #12]
 8009048:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800904c:	3304      	adds	r3, #4
 800904e:	f1b9 0f00 	cmp.w	r9, #0
 8009052:	d021      	beq.n	8009098 <__multiply+0x144>
 8009054:	6829      	ldr	r1, [r5, #0]
 8009056:	f104 0c14 	add.w	ip, r4, #20
 800905a:	46ae      	mov	lr, r5
 800905c:	f04f 0a00 	mov.w	sl, #0
 8009060:	f8bc b000 	ldrh.w	fp, [ip]
 8009064:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009068:	fb09 220b 	mla	r2, r9, fp, r2
 800906c:	4452      	add	r2, sl
 800906e:	b289      	uxth	r1, r1
 8009070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009074:	f84e 1b04 	str.w	r1, [lr], #4
 8009078:	f85c 1b04 	ldr.w	r1, [ip], #4
 800907c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009080:	f8be 1000 	ldrh.w	r1, [lr]
 8009084:	fb09 110a 	mla	r1, r9, sl, r1
 8009088:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800908c:	4567      	cmp	r7, ip
 800908e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009092:	d8e5      	bhi.n	8009060 <__multiply+0x10c>
 8009094:	9a01      	ldr	r2, [sp, #4]
 8009096:	50a9      	str	r1, [r5, r2]
 8009098:	3504      	adds	r5, #4
 800909a:	e799      	b.n	8008fd0 <__multiply+0x7c>
 800909c:	3e01      	subs	r6, #1
 800909e:	e79b      	b.n	8008fd8 <__multiply+0x84>
 80090a0:	08009cc8 	.word	0x08009cc8
 80090a4:	08009cd9 	.word	0x08009cd9

080090a8 <__pow5mult>:
 80090a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090ac:	4615      	mov	r5, r2
 80090ae:	f012 0203 	ands.w	r2, r2, #3
 80090b2:	4606      	mov	r6, r0
 80090b4:	460f      	mov	r7, r1
 80090b6:	d007      	beq.n	80090c8 <__pow5mult+0x20>
 80090b8:	4c25      	ldr	r4, [pc, #148]	; (8009150 <__pow5mult+0xa8>)
 80090ba:	3a01      	subs	r2, #1
 80090bc:	2300      	movs	r3, #0
 80090be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090c2:	f7ff fe9d 	bl	8008e00 <__multadd>
 80090c6:	4607      	mov	r7, r0
 80090c8:	10ad      	asrs	r5, r5, #2
 80090ca:	d03d      	beq.n	8009148 <__pow5mult+0xa0>
 80090cc:	69f4      	ldr	r4, [r6, #28]
 80090ce:	b97c      	cbnz	r4, 80090f0 <__pow5mult+0x48>
 80090d0:	2010      	movs	r0, #16
 80090d2:	f7ff fd7f 	bl	8008bd4 <malloc>
 80090d6:	4602      	mov	r2, r0
 80090d8:	61f0      	str	r0, [r6, #28]
 80090da:	b928      	cbnz	r0, 80090e8 <__pow5mult+0x40>
 80090dc:	4b1d      	ldr	r3, [pc, #116]	; (8009154 <__pow5mult+0xac>)
 80090de:	481e      	ldr	r0, [pc, #120]	; (8009158 <__pow5mult+0xb0>)
 80090e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80090e4:	f000 fa72 	bl	80095cc <__assert_func>
 80090e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090ec:	6004      	str	r4, [r0, #0]
 80090ee:	60c4      	str	r4, [r0, #12]
 80090f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80090f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090f8:	b94c      	cbnz	r4, 800910e <__pow5mult+0x66>
 80090fa:	f240 2171 	movw	r1, #625	; 0x271
 80090fe:	4630      	mov	r0, r6
 8009100:	f7ff ff12 	bl	8008f28 <__i2b>
 8009104:	2300      	movs	r3, #0
 8009106:	f8c8 0008 	str.w	r0, [r8, #8]
 800910a:	4604      	mov	r4, r0
 800910c:	6003      	str	r3, [r0, #0]
 800910e:	f04f 0900 	mov.w	r9, #0
 8009112:	07eb      	lsls	r3, r5, #31
 8009114:	d50a      	bpl.n	800912c <__pow5mult+0x84>
 8009116:	4639      	mov	r1, r7
 8009118:	4622      	mov	r2, r4
 800911a:	4630      	mov	r0, r6
 800911c:	f7ff ff1a 	bl	8008f54 <__multiply>
 8009120:	4639      	mov	r1, r7
 8009122:	4680      	mov	r8, r0
 8009124:	4630      	mov	r0, r6
 8009126:	f7ff fe49 	bl	8008dbc <_Bfree>
 800912a:	4647      	mov	r7, r8
 800912c:	106d      	asrs	r5, r5, #1
 800912e:	d00b      	beq.n	8009148 <__pow5mult+0xa0>
 8009130:	6820      	ldr	r0, [r4, #0]
 8009132:	b938      	cbnz	r0, 8009144 <__pow5mult+0x9c>
 8009134:	4622      	mov	r2, r4
 8009136:	4621      	mov	r1, r4
 8009138:	4630      	mov	r0, r6
 800913a:	f7ff ff0b 	bl	8008f54 <__multiply>
 800913e:	6020      	str	r0, [r4, #0]
 8009140:	f8c0 9000 	str.w	r9, [r0]
 8009144:	4604      	mov	r4, r0
 8009146:	e7e4      	b.n	8009112 <__pow5mult+0x6a>
 8009148:	4638      	mov	r0, r7
 800914a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800914e:	bf00      	nop
 8009150:	08009e28 	.word	0x08009e28
 8009154:	08009c59 	.word	0x08009c59
 8009158:	08009cd9 	.word	0x08009cd9

0800915c <__lshift>:
 800915c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009160:	460c      	mov	r4, r1
 8009162:	6849      	ldr	r1, [r1, #4]
 8009164:	6923      	ldr	r3, [r4, #16]
 8009166:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800916a:	68a3      	ldr	r3, [r4, #8]
 800916c:	4607      	mov	r7, r0
 800916e:	4691      	mov	r9, r2
 8009170:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009174:	f108 0601 	add.w	r6, r8, #1
 8009178:	42b3      	cmp	r3, r6
 800917a:	db0b      	blt.n	8009194 <__lshift+0x38>
 800917c:	4638      	mov	r0, r7
 800917e:	f7ff fddd 	bl	8008d3c <_Balloc>
 8009182:	4605      	mov	r5, r0
 8009184:	b948      	cbnz	r0, 800919a <__lshift+0x3e>
 8009186:	4602      	mov	r2, r0
 8009188:	4b28      	ldr	r3, [pc, #160]	; (800922c <__lshift+0xd0>)
 800918a:	4829      	ldr	r0, [pc, #164]	; (8009230 <__lshift+0xd4>)
 800918c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009190:	f000 fa1c 	bl	80095cc <__assert_func>
 8009194:	3101      	adds	r1, #1
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	e7ee      	b.n	8009178 <__lshift+0x1c>
 800919a:	2300      	movs	r3, #0
 800919c:	f100 0114 	add.w	r1, r0, #20
 80091a0:	f100 0210 	add.w	r2, r0, #16
 80091a4:	4618      	mov	r0, r3
 80091a6:	4553      	cmp	r3, sl
 80091a8:	db33      	blt.n	8009212 <__lshift+0xb6>
 80091aa:	6920      	ldr	r0, [r4, #16]
 80091ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091b0:	f104 0314 	add.w	r3, r4, #20
 80091b4:	f019 091f 	ands.w	r9, r9, #31
 80091b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091c0:	d02b      	beq.n	800921a <__lshift+0xbe>
 80091c2:	f1c9 0e20 	rsb	lr, r9, #32
 80091c6:	468a      	mov	sl, r1
 80091c8:	2200      	movs	r2, #0
 80091ca:	6818      	ldr	r0, [r3, #0]
 80091cc:	fa00 f009 	lsl.w	r0, r0, r9
 80091d0:	4310      	orrs	r0, r2
 80091d2:	f84a 0b04 	str.w	r0, [sl], #4
 80091d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091da:	459c      	cmp	ip, r3
 80091dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80091e0:	d8f3      	bhi.n	80091ca <__lshift+0x6e>
 80091e2:	ebac 0304 	sub.w	r3, ip, r4
 80091e6:	3b15      	subs	r3, #21
 80091e8:	f023 0303 	bic.w	r3, r3, #3
 80091ec:	3304      	adds	r3, #4
 80091ee:	f104 0015 	add.w	r0, r4, #21
 80091f2:	4584      	cmp	ip, r0
 80091f4:	bf38      	it	cc
 80091f6:	2304      	movcc	r3, #4
 80091f8:	50ca      	str	r2, [r1, r3]
 80091fa:	b10a      	cbz	r2, 8009200 <__lshift+0xa4>
 80091fc:	f108 0602 	add.w	r6, r8, #2
 8009200:	3e01      	subs	r6, #1
 8009202:	4638      	mov	r0, r7
 8009204:	612e      	str	r6, [r5, #16]
 8009206:	4621      	mov	r1, r4
 8009208:	f7ff fdd8 	bl	8008dbc <_Bfree>
 800920c:	4628      	mov	r0, r5
 800920e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009212:	f842 0f04 	str.w	r0, [r2, #4]!
 8009216:	3301      	adds	r3, #1
 8009218:	e7c5      	b.n	80091a6 <__lshift+0x4a>
 800921a:	3904      	subs	r1, #4
 800921c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009220:	f841 2f04 	str.w	r2, [r1, #4]!
 8009224:	459c      	cmp	ip, r3
 8009226:	d8f9      	bhi.n	800921c <__lshift+0xc0>
 8009228:	e7ea      	b.n	8009200 <__lshift+0xa4>
 800922a:	bf00      	nop
 800922c:	08009cc8 	.word	0x08009cc8
 8009230:	08009cd9 	.word	0x08009cd9

08009234 <__mcmp>:
 8009234:	b530      	push	{r4, r5, lr}
 8009236:	6902      	ldr	r2, [r0, #16]
 8009238:	690c      	ldr	r4, [r1, #16]
 800923a:	1b12      	subs	r2, r2, r4
 800923c:	d10e      	bne.n	800925c <__mcmp+0x28>
 800923e:	f100 0314 	add.w	r3, r0, #20
 8009242:	3114      	adds	r1, #20
 8009244:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009248:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800924c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009250:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009254:	42a5      	cmp	r5, r4
 8009256:	d003      	beq.n	8009260 <__mcmp+0x2c>
 8009258:	d305      	bcc.n	8009266 <__mcmp+0x32>
 800925a:	2201      	movs	r2, #1
 800925c:	4610      	mov	r0, r2
 800925e:	bd30      	pop	{r4, r5, pc}
 8009260:	4283      	cmp	r3, r0
 8009262:	d3f3      	bcc.n	800924c <__mcmp+0x18>
 8009264:	e7fa      	b.n	800925c <__mcmp+0x28>
 8009266:	f04f 32ff 	mov.w	r2, #4294967295
 800926a:	e7f7      	b.n	800925c <__mcmp+0x28>

0800926c <__mdiff>:
 800926c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009270:	460c      	mov	r4, r1
 8009272:	4606      	mov	r6, r0
 8009274:	4611      	mov	r1, r2
 8009276:	4620      	mov	r0, r4
 8009278:	4690      	mov	r8, r2
 800927a:	f7ff ffdb 	bl	8009234 <__mcmp>
 800927e:	1e05      	subs	r5, r0, #0
 8009280:	d110      	bne.n	80092a4 <__mdiff+0x38>
 8009282:	4629      	mov	r1, r5
 8009284:	4630      	mov	r0, r6
 8009286:	f7ff fd59 	bl	8008d3c <_Balloc>
 800928a:	b930      	cbnz	r0, 800929a <__mdiff+0x2e>
 800928c:	4b3a      	ldr	r3, [pc, #232]	; (8009378 <__mdiff+0x10c>)
 800928e:	4602      	mov	r2, r0
 8009290:	f240 2137 	movw	r1, #567	; 0x237
 8009294:	4839      	ldr	r0, [pc, #228]	; (800937c <__mdiff+0x110>)
 8009296:	f000 f999 	bl	80095cc <__assert_func>
 800929a:	2301      	movs	r3, #1
 800929c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a4:	bfa4      	itt	ge
 80092a6:	4643      	movge	r3, r8
 80092a8:	46a0      	movge	r8, r4
 80092aa:	4630      	mov	r0, r6
 80092ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80092b0:	bfa6      	itte	ge
 80092b2:	461c      	movge	r4, r3
 80092b4:	2500      	movge	r5, #0
 80092b6:	2501      	movlt	r5, #1
 80092b8:	f7ff fd40 	bl	8008d3c <_Balloc>
 80092bc:	b920      	cbnz	r0, 80092c8 <__mdiff+0x5c>
 80092be:	4b2e      	ldr	r3, [pc, #184]	; (8009378 <__mdiff+0x10c>)
 80092c0:	4602      	mov	r2, r0
 80092c2:	f240 2145 	movw	r1, #581	; 0x245
 80092c6:	e7e5      	b.n	8009294 <__mdiff+0x28>
 80092c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80092cc:	6926      	ldr	r6, [r4, #16]
 80092ce:	60c5      	str	r5, [r0, #12]
 80092d0:	f104 0914 	add.w	r9, r4, #20
 80092d4:	f108 0514 	add.w	r5, r8, #20
 80092d8:	f100 0e14 	add.w	lr, r0, #20
 80092dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80092e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80092e4:	f108 0210 	add.w	r2, r8, #16
 80092e8:	46f2      	mov	sl, lr
 80092ea:	2100      	movs	r1, #0
 80092ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80092f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092f4:	fa11 f88b 	uxtah	r8, r1, fp
 80092f8:	b299      	uxth	r1, r3
 80092fa:	0c1b      	lsrs	r3, r3, #16
 80092fc:	eba8 0801 	sub.w	r8, r8, r1
 8009300:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009304:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009308:	fa1f f888 	uxth.w	r8, r8
 800930c:	1419      	asrs	r1, r3, #16
 800930e:	454e      	cmp	r6, r9
 8009310:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009314:	f84a 3b04 	str.w	r3, [sl], #4
 8009318:	d8e8      	bhi.n	80092ec <__mdiff+0x80>
 800931a:	1b33      	subs	r3, r6, r4
 800931c:	3b15      	subs	r3, #21
 800931e:	f023 0303 	bic.w	r3, r3, #3
 8009322:	3304      	adds	r3, #4
 8009324:	3415      	adds	r4, #21
 8009326:	42a6      	cmp	r6, r4
 8009328:	bf38      	it	cc
 800932a:	2304      	movcc	r3, #4
 800932c:	441d      	add	r5, r3
 800932e:	4473      	add	r3, lr
 8009330:	469e      	mov	lr, r3
 8009332:	462e      	mov	r6, r5
 8009334:	4566      	cmp	r6, ip
 8009336:	d30e      	bcc.n	8009356 <__mdiff+0xea>
 8009338:	f10c 0203 	add.w	r2, ip, #3
 800933c:	1b52      	subs	r2, r2, r5
 800933e:	f022 0203 	bic.w	r2, r2, #3
 8009342:	3d03      	subs	r5, #3
 8009344:	45ac      	cmp	ip, r5
 8009346:	bf38      	it	cc
 8009348:	2200      	movcc	r2, #0
 800934a:	4413      	add	r3, r2
 800934c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009350:	b17a      	cbz	r2, 8009372 <__mdiff+0x106>
 8009352:	6107      	str	r7, [r0, #16]
 8009354:	e7a4      	b.n	80092a0 <__mdiff+0x34>
 8009356:	f856 8b04 	ldr.w	r8, [r6], #4
 800935a:	fa11 f288 	uxtah	r2, r1, r8
 800935e:	1414      	asrs	r4, r2, #16
 8009360:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009364:	b292      	uxth	r2, r2
 8009366:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800936a:	f84e 2b04 	str.w	r2, [lr], #4
 800936e:	1421      	asrs	r1, r4, #16
 8009370:	e7e0      	b.n	8009334 <__mdiff+0xc8>
 8009372:	3f01      	subs	r7, #1
 8009374:	e7ea      	b.n	800934c <__mdiff+0xe0>
 8009376:	bf00      	nop
 8009378:	08009cc8 	.word	0x08009cc8
 800937c:	08009cd9 	.word	0x08009cd9

08009380 <__d2b>:
 8009380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009384:	460f      	mov	r7, r1
 8009386:	2101      	movs	r1, #1
 8009388:	ec59 8b10 	vmov	r8, r9, d0
 800938c:	4616      	mov	r6, r2
 800938e:	f7ff fcd5 	bl	8008d3c <_Balloc>
 8009392:	4604      	mov	r4, r0
 8009394:	b930      	cbnz	r0, 80093a4 <__d2b+0x24>
 8009396:	4602      	mov	r2, r0
 8009398:	4b24      	ldr	r3, [pc, #144]	; (800942c <__d2b+0xac>)
 800939a:	4825      	ldr	r0, [pc, #148]	; (8009430 <__d2b+0xb0>)
 800939c:	f240 310f 	movw	r1, #783	; 0x30f
 80093a0:	f000 f914 	bl	80095cc <__assert_func>
 80093a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093ac:	bb2d      	cbnz	r5, 80093fa <__d2b+0x7a>
 80093ae:	9301      	str	r3, [sp, #4]
 80093b0:	f1b8 0300 	subs.w	r3, r8, #0
 80093b4:	d026      	beq.n	8009404 <__d2b+0x84>
 80093b6:	4668      	mov	r0, sp
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	f7ff fd87 	bl	8008ecc <__lo0bits>
 80093be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093c2:	b1e8      	cbz	r0, 8009400 <__d2b+0x80>
 80093c4:	f1c0 0320 	rsb	r3, r0, #32
 80093c8:	fa02 f303 	lsl.w	r3, r2, r3
 80093cc:	430b      	orrs	r3, r1
 80093ce:	40c2      	lsrs	r2, r0
 80093d0:	6163      	str	r3, [r4, #20]
 80093d2:	9201      	str	r2, [sp, #4]
 80093d4:	9b01      	ldr	r3, [sp, #4]
 80093d6:	61a3      	str	r3, [r4, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	bf14      	ite	ne
 80093dc:	2202      	movne	r2, #2
 80093de:	2201      	moveq	r2, #1
 80093e0:	6122      	str	r2, [r4, #16]
 80093e2:	b1bd      	cbz	r5, 8009414 <__d2b+0x94>
 80093e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093e8:	4405      	add	r5, r0
 80093ea:	603d      	str	r5, [r7, #0]
 80093ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093f0:	6030      	str	r0, [r6, #0]
 80093f2:	4620      	mov	r0, r4
 80093f4:	b003      	add	sp, #12
 80093f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093fe:	e7d6      	b.n	80093ae <__d2b+0x2e>
 8009400:	6161      	str	r1, [r4, #20]
 8009402:	e7e7      	b.n	80093d4 <__d2b+0x54>
 8009404:	a801      	add	r0, sp, #4
 8009406:	f7ff fd61 	bl	8008ecc <__lo0bits>
 800940a:	9b01      	ldr	r3, [sp, #4]
 800940c:	6163      	str	r3, [r4, #20]
 800940e:	3020      	adds	r0, #32
 8009410:	2201      	movs	r2, #1
 8009412:	e7e5      	b.n	80093e0 <__d2b+0x60>
 8009414:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009418:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800941c:	6038      	str	r0, [r7, #0]
 800941e:	6918      	ldr	r0, [r3, #16]
 8009420:	f7ff fd34 	bl	8008e8c <__hi0bits>
 8009424:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009428:	e7e2      	b.n	80093f0 <__d2b+0x70>
 800942a:	bf00      	nop
 800942c:	08009cc8 	.word	0x08009cc8
 8009430:	08009cd9 	.word	0x08009cd9

08009434 <__sflush_r>:
 8009434:	898a      	ldrh	r2, [r1, #12]
 8009436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943a:	4605      	mov	r5, r0
 800943c:	0710      	lsls	r0, r2, #28
 800943e:	460c      	mov	r4, r1
 8009440:	d458      	bmi.n	80094f4 <__sflush_r+0xc0>
 8009442:	684b      	ldr	r3, [r1, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	dc05      	bgt.n	8009454 <__sflush_r+0x20>
 8009448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800944a:	2b00      	cmp	r3, #0
 800944c:	dc02      	bgt.n	8009454 <__sflush_r+0x20>
 800944e:	2000      	movs	r0, #0
 8009450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009456:	2e00      	cmp	r6, #0
 8009458:	d0f9      	beq.n	800944e <__sflush_r+0x1a>
 800945a:	2300      	movs	r3, #0
 800945c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009460:	682f      	ldr	r7, [r5, #0]
 8009462:	6a21      	ldr	r1, [r4, #32]
 8009464:	602b      	str	r3, [r5, #0]
 8009466:	d032      	beq.n	80094ce <__sflush_r+0x9a>
 8009468:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	075a      	lsls	r2, r3, #29
 800946e:	d505      	bpl.n	800947c <__sflush_r+0x48>
 8009470:	6863      	ldr	r3, [r4, #4]
 8009472:	1ac0      	subs	r0, r0, r3
 8009474:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009476:	b10b      	cbz	r3, 800947c <__sflush_r+0x48>
 8009478:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800947a:	1ac0      	subs	r0, r0, r3
 800947c:	2300      	movs	r3, #0
 800947e:	4602      	mov	r2, r0
 8009480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009482:	6a21      	ldr	r1, [r4, #32]
 8009484:	4628      	mov	r0, r5
 8009486:	47b0      	blx	r6
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	89a3      	ldrh	r3, [r4, #12]
 800948c:	d106      	bne.n	800949c <__sflush_r+0x68>
 800948e:	6829      	ldr	r1, [r5, #0]
 8009490:	291d      	cmp	r1, #29
 8009492:	d82b      	bhi.n	80094ec <__sflush_r+0xb8>
 8009494:	4a29      	ldr	r2, [pc, #164]	; (800953c <__sflush_r+0x108>)
 8009496:	410a      	asrs	r2, r1
 8009498:	07d6      	lsls	r6, r2, #31
 800949a:	d427      	bmi.n	80094ec <__sflush_r+0xb8>
 800949c:	2200      	movs	r2, #0
 800949e:	6062      	str	r2, [r4, #4]
 80094a0:	04d9      	lsls	r1, r3, #19
 80094a2:	6922      	ldr	r2, [r4, #16]
 80094a4:	6022      	str	r2, [r4, #0]
 80094a6:	d504      	bpl.n	80094b2 <__sflush_r+0x7e>
 80094a8:	1c42      	adds	r2, r0, #1
 80094aa:	d101      	bne.n	80094b0 <__sflush_r+0x7c>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	b903      	cbnz	r3, 80094b2 <__sflush_r+0x7e>
 80094b0:	6560      	str	r0, [r4, #84]	; 0x54
 80094b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094b4:	602f      	str	r7, [r5, #0]
 80094b6:	2900      	cmp	r1, #0
 80094b8:	d0c9      	beq.n	800944e <__sflush_r+0x1a>
 80094ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094be:	4299      	cmp	r1, r3
 80094c0:	d002      	beq.n	80094c8 <__sflush_r+0x94>
 80094c2:	4628      	mov	r0, r5
 80094c4:	f7ff fb3a 	bl	8008b3c <_free_r>
 80094c8:	2000      	movs	r0, #0
 80094ca:	6360      	str	r0, [r4, #52]	; 0x34
 80094cc:	e7c0      	b.n	8009450 <__sflush_r+0x1c>
 80094ce:	2301      	movs	r3, #1
 80094d0:	4628      	mov	r0, r5
 80094d2:	47b0      	blx	r6
 80094d4:	1c41      	adds	r1, r0, #1
 80094d6:	d1c8      	bne.n	800946a <__sflush_r+0x36>
 80094d8:	682b      	ldr	r3, [r5, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d0c5      	beq.n	800946a <__sflush_r+0x36>
 80094de:	2b1d      	cmp	r3, #29
 80094e0:	d001      	beq.n	80094e6 <__sflush_r+0xb2>
 80094e2:	2b16      	cmp	r3, #22
 80094e4:	d101      	bne.n	80094ea <__sflush_r+0xb6>
 80094e6:	602f      	str	r7, [r5, #0]
 80094e8:	e7b1      	b.n	800944e <__sflush_r+0x1a>
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f0:	81a3      	strh	r3, [r4, #12]
 80094f2:	e7ad      	b.n	8009450 <__sflush_r+0x1c>
 80094f4:	690f      	ldr	r7, [r1, #16]
 80094f6:	2f00      	cmp	r7, #0
 80094f8:	d0a9      	beq.n	800944e <__sflush_r+0x1a>
 80094fa:	0793      	lsls	r3, r2, #30
 80094fc:	680e      	ldr	r6, [r1, #0]
 80094fe:	bf08      	it	eq
 8009500:	694b      	ldreq	r3, [r1, #20]
 8009502:	600f      	str	r7, [r1, #0]
 8009504:	bf18      	it	ne
 8009506:	2300      	movne	r3, #0
 8009508:	eba6 0807 	sub.w	r8, r6, r7
 800950c:	608b      	str	r3, [r1, #8]
 800950e:	f1b8 0f00 	cmp.w	r8, #0
 8009512:	dd9c      	ble.n	800944e <__sflush_r+0x1a>
 8009514:	6a21      	ldr	r1, [r4, #32]
 8009516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009518:	4643      	mov	r3, r8
 800951a:	463a      	mov	r2, r7
 800951c:	4628      	mov	r0, r5
 800951e:	47b0      	blx	r6
 8009520:	2800      	cmp	r0, #0
 8009522:	dc06      	bgt.n	8009532 <__sflush_r+0xfe>
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	f04f 30ff 	mov.w	r0, #4294967295
 8009530:	e78e      	b.n	8009450 <__sflush_r+0x1c>
 8009532:	4407      	add	r7, r0
 8009534:	eba8 0800 	sub.w	r8, r8, r0
 8009538:	e7e9      	b.n	800950e <__sflush_r+0xda>
 800953a:	bf00      	nop
 800953c:	dfbffffe 	.word	0xdfbffffe

08009540 <_fflush_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	690b      	ldr	r3, [r1, #16]
 8009544:	4605      	mov	r5, r0
 8009546:	460c      	mov	r4, r1
 8009548:	b913      	cbnz	r3, 8009550 <_fflush_r+0x10>
 800954a:	2500      	movs	r5, #0
 800954c:	4628      	mov	r0, r5
 800954e:	bd38      	pop	{r3, r4, r5, pc}
 8009550:	b118      	cbz	r0, 800955a <_fflush_r+0x1a>
 8009552:	6a03      	ldr	r3, [r0, #32]
 8009554:	b90b      	cbnz	r3, 800955a <_fflush_r+0x1a>
 8009556:	f7fe fb7b 	bl	8007c50 <__sinit>
 800955a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d0f3      	beq.n	800954a <_fflush_r+0xa>
 8009562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009564:	07d0      	lsls	r0, r2, #31
 8009566:	d404      	bmi.n	8009572 <_fflush_r+0x32>
 8009568:	0599      	lsls	r1, r3, #22
 800956a:	d402      	bmi.n	8009572 <_fflush_r+0x32>
 800956c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800956e:	f7fe fc66 	bl	8007e3e <__retarget_lock_acquire_recursive>
 8009572:	4628      	mov	r0, r5
 8009574:	4621      	mov	r1, r4
 8009576:	f7ff ff5d 	bl	8009434 <__sflush_r>
 800957a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800957c:	07da      	lsls	r2, r3, #31
 800957e:	4605      	mov	r5, r0
 8009580:	d4e4      	bmi.n	800954c <_fflush_r+0xc>
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	059b      	lsls	r3, r3, #22
 8009586:	d4e1      	bmi.n	800954c <_fflush_r+0xc>
 8009588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800958a:	f7fe fc59 	bl	8007e40 <__retarget_lock_release_recursive>
 800958e:	e7dd      	b.n	800954c <_fflush_r+0xc>

08009590 <_sbrk_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d06      	ldr	r5, [pc, #24]	; (80095ac <_sbrk_r+0x1c>)
 8009594:	2300      	movs	r3, #0
 8009596:	4604      	mov	r4, r0
 8009598:	4608      	mov	r0, r1
 800959a:	602b      	str	r3, [r5, #0]
 800959c:	f7f8 fb1e 	bl	8001bdc <_sbrk>
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d102      	bne.n	80095aa <_sbrk_r+0x1a>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	b103      	cbz	r3, 80095aa <_sbrk_r+0x1a>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	200007b4 	.word	0x200007b4

080095b0 <memcpy>:
 80095b0:	440a      	add	r2, r1
 80095b2:	4291      	cmp	r1, r2
 80095b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80095b8:	d100      	bne.n	80095bc <memcpy+0xc>
 80095ba:	4770      	bx	lr
 80095bc:	b510      	push	{r4, lr}
 80095be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095c6:	4291      	cmp	r1, r2
 80095c8:	d1f9      	bne.n	80095be <memcpy+0xe>
 80095ca:	bd10      	pop	{r4, pc}

080095cc <__assert_func>:
 80095cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095ce:	4614      	mov	r4, r2
 80095d0:	461a      	mov	r2, r3
 80095d2:	4b09      	ldr	r3, [pc, #36]	; (80095f8 <__assert_func+0x2c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4605      	mov	r5, r0
 80095d8:	68d8      	ldr	r0, [r3, #12]
 80095da:	b14c      	cbz	r4, 80095f0 <__assert_func+0x24>
 80095dc:	4b07      	ldr	r3, [pc, #28]	; (80095fc <__assert_func+0x30>)
 80095de:	9100      	str	r1, [sp, #0]
 80095e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095e4:	4906      	ldr	r1, [pc, #24]	; (8009600 <__assert_func+0x34>)
 80095e6:	462b      	mov	r3, r5
 80095e8:	f000 f844 	bl	8009674 <fiprintf>
 80095ec:	f000 f854 	bl	8009698 <abort>
 80095f0:	4b04      	ldr	r3, [pc, #16]	; (8009604 <__assert_func+0x38>)
 80095f2:	461c      	mov	r4, r3
 80095f4:	e7f3      	b.n	80095de <__assert_func+0x12>
 80095f6:	bf00      	nop
 80095f8:	200000f4 	.word	0x200000f4
 80095fc:	08009e3e 	.word	0x08009e3e
 8009600:	08009e4b 	.word	0x08009e4b
 8009604:	08009e79 	.word	0x08009e79

08009608 <_calloc_r>:
 8009608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800960a:	fba1 2402 	umull	r2, r4, r1, r2
 800960e:	b94c      	cbnz	r4, 8009624 <_calloc_r+0x1c>
 8009610:	4611      	mov	r1, r2
 8009612:	9201      	str	r2, [sp, #4]
 8009614:	f7ff fb06 	bl	8008c24 <_malloc_r>
 8009618:	9a01      	ldr	r2, [sp, #4]
 800961a:	4605      	mov	r5, r0
 800961c:	b930      	cbnz	r0, 800962c <_calloc_r+0x24>
 800961e:	4628      	mov	r0, r5
 8009620:	b003      	add	sp, #12
 8009622:	bd30      	pop	{r4, r5, pc}
 8009624:	220c      	movs	r2, #12
 8009626:	6002      	str	r2, [r0, #0]
 8009628:	2500      	movs	r5, #0
 800962a:	e7f8      	b.n	800961e <_calloc_r+0x16>
 800962c:	4621      	mov	r1, r4
 800962e:	f7fe fb88 	bl	8007d42 <memset>
 8009632:	e7f4      	b.n	800961e <_calloc_r+0x16>

08009634 <__ascii_mbtowc>:
 8009634:	b082      	sub	sp, #8
 8009636:	b901      	cbnz	r1, 800963a <__ascii_mbtowc+0x6>
 8009638:	a901      	add	r1, sp, #4
 800963a:	b142      	cbz	r2, 800964e <__ascii_mbtowc+0x1a>
 800963c:	b14b      	cbz	r3, 8009652 <__ascii_mbtowc+0x1e>
 800963e:	7813      	ldrb	r3, [r2, #0]
 8009640:	600b      	str	r3, [r1, #0]
 8009642:	7812      	ldrb	r2, [r2, #0]
 8009644:	1e10      	subs	r0, r2, #0
 8009646:	bf18      	it	ne
 8009648:	2001      	movne	r0, #1
 800964a:	b002      	add	sp, #8
 800964c:	4770      	bx	lr
 800964e:	4610      	mov	r0, r2
 8009650:	e7fb      	b.n	800964a <__ascii_mbtowc+0x16>
 8009652:	f06f 0001 	mvn.w	r0, #1
 8009656:	e7f8      	b.n	800964a <__ascii_mbtowc+0x16>

08009658 <__ascii_wctomb>:
 8009658:	b149      	cbz	r1, 800966e <__ascii_wctomb+0x16>
 800965a:	2aff      	cmp	r2, #255	; 0xff
 800965c:	bf85      	ittet	hi
 800965e:	238a      	movhi	r3, #138	; 0x8a
 8009660:	6003      	strhi	r3, [r0, #0]
 8009662:	700a      	strbls	r2, [r1, #0]
 8009664:	f04f 30ff 	movhi.w	r0, #4294967295
 8009668:	bf98      	it	ls
 800966a:	2001      	movls	r0, #1
 800966c:	4770      	bx	lr
 800966e:	4608      	mov	r0, r1
 8009670:	4770      	bx	lr
	...

08009674 <fiprintf>:
 8009674:	b40e      	push	{r1, r2, r3}
 8009676:	b503      	push	{r0, r1, lr}
 8009678:	4601      	mov	r1, r0
 800967a:	ab03      	add	r3, sp, #12
 800967c:	4805      	ldr	r0, [pc, #20]	; (8009694 <fiprintf+0x20>)
 800967e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009682:	6800      	ldr	r0, [r0, #0]
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	f000 f837 	bl	80096f8 <_vfiprintf_r>
 800968a:	b002      	add	sp, #8
 800968c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009690:	b003      	add	sp, #12
 8009692:	4770      	bx	lr
 8009694:	200000f4 	.word	0x200000f4

08009698 <abort>:
 8009698:	b508      	push	{r3, lr}
 800969a:	2006      	movs	r0, #6
 800969c:	f000 fa04 	bl	8009aa8 <raise>
 80096a0:	2001      	movs	r0, #1
 80096a2:	f7f8 fa23 	bl	8001aec <_exit>

080096a6 <__sfputc_r>:
 80096a6:	6893      	ldr	r3, [r2, #8]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	b410      	push	{r4}
 80096ae:	6093      	str	r3, [r2, #8]
 80096b0:	da08      	bge.n	80096c4 <__sfputc_r+0x1e>
 80096b2:	6994      	ldr	r4, [r2, #24]
 80096b4:	42a3      	cmp	r3, r4
 80096b6:	db01      	blt.n	80096bc <__sfputc_r+0x16>
 80096b8:	290a      	cmp	r1, #10
 80096ba:	d103      	bne.n	80096c4 <__sfputc_r+0x1e>
 80096bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096c0:	f000 b934 	b.w	800992c <__swbuf_r>
 80096c4:	6813      	ldr	r3, [r2, #0]
 80096c6:	1c58      	adds	r0, r3, #1
 80096c8:	6010      	str	r0, [r2, #0]
 80096ca:	7019      	strb	r1, [r3, #0]
 80096cc:	4608      	mov	r0, r1
 80096ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <__sfputs_r>:
 80096d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d6:	4606      	mov	r6, r0
 80096d8:	460f      	mov	r7, r1
 80096da:	4614      	mov	r4, r2
 80096dc:	18d5      	adds	r5, r2, r3
 80096de:	42ac      	cmp	r4, r5
 80096e0:	d101      	bne.n	80096e6 <__sfputs_r+0x12>
 80096e2:	2000      	movs	r0, #0
 80096e4:	e007      	b.n	80096f6 <__sfputs_r+0x22>
 80096e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ea:	463a      	mov	r2, r7
 80096ec:	4630      	mov	r0, r6
 80096ee:	f7ff ffda 	bl	80096a6 <__sfputc_r>
 80096f2:	1c43      	adds	r3, r0, #1
 80096f4:	d1f3      	bne.n	80096de <__sfputs_r+0xa>
 80096f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096f8 <_vfiprintf_r>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	460d      	mov	r5, r1
 80096fe:	b09d      	sub	sp, #116	; 0x74
 8009700:	4614      	mov	r4, r2
 8009702:	4698      	mov	r8, r3
 8009704:	4606      	mov	r6, r0
 8009706:	b118      	cbz	r0, 8009710 <_vfiprintf_r+0x18>
 8009708:	6a03      	ldr	r3, [r0, #32]
 800970a:	b90b      	cbnz	r3, 8009710 <_vfiprintf_r+0x18>
 800970c:	f7fe faa0 	bl	8007c50 <__sinit>
 8009710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009712:	07d9      	lsls	r1, r3, #31
 8009714:	d405      	bmi.n	8009722 <_vfiprintf_r+0x2a>
 8009716:	89ab      	ldrh	r3, [r5, #12]
 8009718:	059a      	lsls	r2, r3, #22
 800971a:	d402      	bmi.n	8009722 <_vfiprintf_r+0x2a>
 800971c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800971e:	f7fe fb8e 	bl	8007e3e <__retarget_lock_acquire_recursive>
 8009722:	89ab      	ldrh	r3, [r5, #12]
 8009724:	071b      	lsls	r3, r3, #28
 8009726:	d501      	bpl.n	800972c <_vfiprintf_r+0x34>
 8009728:	692b      	ldr	r3, [r5, #16]
 800972a:	b99b      	cbnz	r3, 8009754 <_vfiprintf_r+0x5c>
 800972c:	4629      	mov	r1, r5
 800972e:	4630      	mov	r0, r6
 8009730:	f000 f93a 	bl	80099a8 <__swsetup_r>
 8009734:	b170      	cbz	r0, 8009754 <_vfiprintf_r+0x5c>
 8009736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009738:	07dc      	lsls	r4, r3, #31
 800973a:	d504      	bpl.n	8009746 <_vfiprintf_r+0x4e>
 800973c:	f04f 30ff 	mov.w	r0, #4294967295
 8009740:	b01d      	add	sp, #116	; 0x74
 8009742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009746:	89ab      	ldrh	r3, [r5, #12]
 8009748:	0598      	lsls	r0, r3, #22
 800974a:	d4f7      	bmi.n	800973c <_vfiprintf_r+0x44>
 800974c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800974e:	f7fe fb77 	bl	8007e40 <__retarget_lock_release_recursive>
 8009752:	e7f3      	b.n	800973c <_vfiprintf_r+0x44>
 8009754:	2300      	movs	r3, #0
 8009756:	9309      	str	r3, [sp, #36]	; 0x24
 8009758:	2320      	movs	r3, #32
 800975a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800975e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009762:	2330      	movs	r3, #48	; 0x30
 8009764:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009918 <_vfiprintf_r+0x220>
 8009768:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800976c:	f04f 0901 	mov.w	r9, #1
 8009770:	4623      	mov	r3, r4
 8009772:	469a      	mov	sl, r3
 8009774:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009778:	b10a      	cbz	r2, 800977e <_vfiprintf_r+0x86>
 800977a:	2a25      	cmp	r2, #37	; 0x25
 800977c:	d1f9      	bne.n	8009772 <_vfiprintf_r+0x7a>
 800977e:	ebba 0b04 	subs.w	fp, sl, r4
 8009782:	d00b      	beq.n	800979c <_vfiprintf_r+0xa4>
 8009784:	465b      	mov	r3, fp
 8009786:	4622      	mov	r2, r4
 8009788:	4629      	mov	r1, r5
 800978a:	4630      	mov	r0, r6
 800978c:	f7ff ffa2 	bl	80096d4 <__sfputs_r>
 8009790:	3001      	adds	r0, #1
 8009792:	f000 80a9 	beq.w	80098e8 <_vfiprintf_r+0x1f0>
 8009796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009798:	445a      	add	r2, fp
 800979a:	9209      	str	r2, [sp, #36]	; 0x24
 800979c:	f89a 3000 	ldrb.w	r3, [sl]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 80a1 	beq.w	80098e8 <_vfiprintf_r+0x1f0>
 80097a6:	2300      	movs	r3, #0
 80097a8:	f04f 32ff 	mov.w	r2, #4294967295
 80097ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097b0:	f10a 0a01 	add.w	sl, sl, #1
 80097b4:	9304      	str	r3, [sp, #16]
 80097b6:	9307      	str	r3, [sp, #28]
 80097b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097bc:	931a      	str	r3, [sp, #104]	; 0x68
 80097be:	4654      	mov	r4, sl
 80097c0:	2205      	movs	r2, #5
 80097c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c6:	4854      	ldr	r0, [pc, #336]	; (8009918 <_vfiprintf_r+0x220>)
 80097c8:	f7f6 fd0a 	bl	80001e0 <memchr>
 80097cc:	9a04      	ldr	r2, [sp, #16]
 80097ce:	b9d8      	cbnz	r0, 8009808 <_vfiprintf_r+0x110>
 80097d0:	06d1      	lsls	r1, r2, #27
 80097d2:	bf44      	itt	mi
 80097d4:	2320      	movmi	r3, #32
 80097d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097da:	0713      	lsls	r3, r2, #28
 80097dc:	bf44      	itt	mi
 80097de:	232b      	movmi	r3, #43	; 0x2b
 80097e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097e4:	f89a 3000 	ldrb.w	r3, [sl]
 80097e8:	2b2a      	cmp	r3, #42	; 0x2a
 80097ea:	d015      	beq.n	8009818 <_vfiprintf_r+0x120>
 80097ec:	9a07      	ldr	r2, [sp, #28]
 80097ee:	4654      	mov	r4, sl
 80097f0:	2000      	movs	r0, #0
 80097f2:	f04f 0c0a 	mov.w	ip, #10
 80097f6:	4621      	mov	r1, r4
 80097f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097fc:	3b30      	subs	r3, #48	; 0x30
 80097fe:	2b09      	cmp	r3, #9
 8009800:	d94d      	bls.n	800989e <_vfiprintf_r+0x1a6>
 8009802:	b1b0      	cbz	r0, 8009832 <_vfiprintf_r+0x13a>
 8009804:	9207      	str	r2, [sp, #28]
 8009806:	e014      	b.n	8009832 <_vfiprintf_r+0x13a>
 8009808:	eba0 0308 	sub.w	r3, r0, r8
 800980c:	fa09 f303 	lsl.w	r3, r9, r3
 8009810:	4313      	orrs	r3, r2
 8009812:	9304      	str	r3, [sp, #16]
 8009814:	46a2      	mov	sl, r4
 8009816:	e7d2      	b.n	80097be <_vfiprintf_r+0xc6>
 8009818:	9b03      	ldr	r3, [sp, #12]
 800981a:	1d19      	adds	r1, r3, #4
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	9103      	str	r1, [sp, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	bfbb      	ittet	lt
 8009824:	425b      	neglt	r3, r3
 8009826:	f042 0202 	orrlt.w	r2, r2, #2
 800982a:	9307      	strge	r3, [sp, #28]
 800982c:	9307      	strlt	r3, [sp, #28]
 800982e:	bfb8      	it	lt
 8009830:	9204      	strlt	r2, [sp, #16]
 8009832:	7823      	ldrb	r3, [r4, #0]
 8009834:	2b2e      	cmp	r3, #46	; 0x2e
 8009836:	d10c      	bne.n	8009852 <_vfiprintf_r+0x15a>
 8009838:	7863      	ldrb	r3, [r4, #1]
 800983a:	2b2a      	cmp	r3, #42	; 0x2a
 800983c:	d134      	bne.n	80098a8 <_vfiprintf_r+0x1b0>
 800983e:	9b03      	ldr	r3, [sp, #12]
 8009840:	1d1a      	adds	r2, r3, #4
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	9203      	str	r2, [sp, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	bfb8      	it	lt
 800984a:	f04f 33ff 	movlt.w	r3, #4294967295
 800984e:	3402      	adds	r4, #2
 8009850:	9305      	str	r3, [sp, #20]
 8009852:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009928 <_vfiprintf_r+0x230>
 8009856:	7821      	ldrb	r1, [r4, #0]
 8009858:	2203      	movs	r2, #3
 800985a:	4650      	mov	r0, sl
 800985c:	f7f6 fcc0 	bl	80001e0 <memchr>
 8009860:	b138      	cbz	r0, 8009872 <_vfiprintf_r+0x17a>
 8009862:	9b04      	ldr	r3, [sp, #16]
 8009864:	eba0 000a 	sub.w	r0, r0, sl
 8009868:	2240      	movs	r2, #64	; 0x40
 800986a:	4082      	lsls	r2, r0
 800986c:	4313      	orrs	r3, r2
 800986e:	3401      	adds	r4, #1
 8009870:	9304      	str	r3, [sp, #16]
 8009872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009876:	4829      	ldr	r0, [pc, #164]	; (800991c <_vfiprintf_r+0x224>)
 8009878:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800987c:	2206      	movs	r2, #6
 800987e:	f7f6 fcaf 	bl	80001e0 <memchr>
 8009882:	2800      	cmp	r0, #0
 8009884:	d03f      	beq.n	8009906 <_vfiprintf_r+0x20e>
 8009886:	4b26      	ldr	r3, [pc, #152]	; (8009920 <_vfiprintf_r+0x228>)
 8009888:	bb1b      	cbnz	r3, 80098d2 <_vfiprintf_r+0x1da>
 800988a:	9b03      	ldr	r3, [sp, #12]
 800988c:	3307      	adds	r3, #7
 800988e:	f023 0307 	bic.w	r3, r3, #7
 8009892:	3308      	adds	r3, #8
 8009894:	9303      	str	r3, [sp, #12]
 8009896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009898:	443b      	add	r3, r7
 800989a:	9309      	str	r3, [sp, #36]	; 0x24
 800989c:	e768      	b.n	8009770 <_vfiprintf_r+0x78>
 800989e:	fb0c 3202 	mla	r2, ip, r2, r3
 80098a2:	460c      	mov	r4, r1
 80098a4:	2001      	movs	r0, #1
 80098a6:	e7a6      	b.n	80097f6 <_vfiprintf_r+0xfe>
 80098a8:	2300      	movs	r3, #0
 80098aa:	3401      	adds	r4, #1
 80098ac:	9305      	str	r3, [sp, #20]
 80098ae:	4619      	mov	r1, r3
 80098b0:	f04f 0c0a 	mov.w	ip, #10
 80098b4:	4620      	mov	r0, r4
 80098b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ba:	3a30      	subs	r2, #48	; 0x30
 80098bc:	2a09      	cmp	r2, #9
 80098be:	d903      	bls.n	80098c8 <_vfiprintf_r+0x1d0>
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d0c6      	beq.n	8009852 <_vfiprintf_r+0x15a>
 80098c4:	9105      	str	r1, [sp, #20]
 80098c6:	e7c4      	b.n	8009852 <_vfiprintf_r+0x15a>
 80098c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80098cc:	4604      	mov	r4, r0
 80098ce:	2301      	movs	r3, #1
 80098d0:	e7f0      	b.n	80098b4 <_vfiprintf_r+0x1bc>
 80098d2:	ab03      	add	r3, sp, #12
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	462a      	mov	r2, r5
 80098d8:	4b12      	ldr	r3, [pc, #72]	; (8009924 <_vfiprintf_r+0x22c>)
 80098da:	a904      	add	r1, sp, #16
 80098dc:	4630      	mov	r0, r6
 80098de:	f7fd fd65 	bl	80073ac <_printf_float>
 80098e2:	4607      	mov	r7, r0
 80098e4:	1c78      	adds	r0, r7, #1
 80098e6:	d1d6      	bne.n	8009896 <_vfiprintf_r+0x19e>
 80098e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098ea:	07d9      	lsls	r1, r3, #31
 80098ec:	d405      	bmi.n	80098fa <_vfiprintf_r+0x202>
 80098ee:	89ab      	ldrh	r3, [r5, #12]
 80098f0:	059a      	lsls	r2, r3, #22
 80098f2:	d402      	bmi.n	80098fa <_vfiprintf_r+0x202>
 80098f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098f6:	f7fe faa3 	bl	8007e40 <__retarget_lock_release_recursive>
 80098fa:	89ab      	ldrh	r3, [r5, #12]
 80098fc:	065b      	lsls	r3, r3, #25
 80098fe:	f53f af1d 	bmi.w	800973c <_vfiprintf_r+0x44>
 8009902:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009904:	e71c      	b.n	8009740 <_vfiprintf_r+0x48>
 8009906:	ab03      	add	r3, sp, #12
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	462a      	mov	r2, r5
 800990c:	4b05      	ldr	r3, [pc, #20]	; (8009924 <_vfiprintf_r+0x22c>)
 800990e:	a904      	add	r1, sp, #16
 8009910:	4630      	mov	r0, r6
 8009912:	f7fd ffef 	bl	80078f4 <_printf_i>
 8009916:	e7e4      	b.n	80098e2 <_vfiprintf_r+0x1ea>
 8009918:	08009f7b 	.word	0x08009f7b
 800991c:	08009f85 	.word	0x08009f85
 8009920:	080073ad 	.word	0x080073ad
 8009924:	080096d5 	.word	0x080096d5
 8009928:	08009f81 	.word	0x08009f81

0800992c <__swbuf_r>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	460e      	mov	r6, r1
 8009930:	4614      	mov	r4, r2
 8009932:	4605      	mov	r5, r0
 8009934:	b118      	cbz	r0, 800993e <__swbuf_r+0x12>
 8009936:	6a03      	ldr	r3, [r0, #32]
 8009938:	b90b      	cbnz	r3, 800993e <__swbuf_r+0x12>
 800993a:	f7fe f989 	bl	8007c50 <__sinit>
 800993e:	69a3      	ldr	r3, [r4, #24]
 8009940:	60a3      	str	r3, [r4, #8]
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	071a      	lsls	r2, r3, #28
 8009946:	d525      	bpl.n	8009994 <__swbuf_r+0x68>
 8009948:	6923      	ldr	r3, [r4, #16]
 800994a:	b31b      	cbz	r3, 8009994 <__swbuf_r+0x68>
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	6922      	ldr	r2, [r4, #16]
 8009950:	1a98      	subs	r0, r3, r2
 8009952:	6963      	ldr	r3, [r4, #20]
 8009954:	b2f6      	uxtb	r6, r6
 8009956:	4283      	cmp	r3, r0
 8009958:	4637      	mov	r7, r6
 800995a:	dc04      	bgt.n	8009966 <__swbuf_r+0x3a>
 800995c:	4621      	mov	r1, r4
 800995e:	4628      	mov	r0, r5
 8009960:	f7ff fdee 	bl	8009540 <_fflush_r>
 8009964:	b9e0      	cbnz	r0, 80099a0 <__swbuf_r+0x74>
 8009966:	68a3      	ldr	r3, [r4, #8]
 8009968:	3b01      	subs	r3, #1
 800996a:	60a3      	str	r3, [r4, #8]
 800996c:	6823      	ldr	r3, [r4, #0]
 800996e:	1c5a      	adds	r2, r3, #1
 8009970:	6022      	str	r2, [r4, #0]
 8009972:	701e      	strb	r6, [r3, #0]
 8009974:	6962      	ldr	r2, [r4, #20]
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	429a      	cmp	r2, r3
 800997a:	d004      	beq.n	8009986 <__swbuf_r+0x5a>
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	07db      	lsls	r3, r3, #31
 8009980:	d506      	bpl.n	8009990 <__swbuf_r+0x64>
 8009982:	2e0a      	cmp	r6, #10
 8009984:	d104      	bne.n	8009990 <__swbuf_r+0x64>
 8009986:	4621      	mov	r1, r4
 8009988:	4628      	mov	r0, r5
 800998a:	f7ff fdd9 	bl	8009540 <_fflush_r>
 800998e:	b938      	cbnz	r0, 80099a0 <__swbuf_r+0x74>
 8009990:	4638      	mov	r0, r7
 8009992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009994:	4621      	mov	r1, r4
 8009996:	4628      	mov	r0, r5
 8009998:	f000 f806 	bl	80099a8 <__swsetup_r>
 800999c:	2800      	cmp	r0, #0
 800999e:	d0d5      	beq.n	800994c <__swbuf_r+0x20>
 80099a0:	f04f 37ff 	mov.w	r7, #4294967295
 80099a4:	e7f4      	b.n	8009990 <__swbuf_r+0x64>
	...

080099a8 <__swsetup_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4b2a      	ldr	r3, [pc, #168]	; (8009a54 <__swsetup_r+0xac>)
 80099ac:	4605      	mov	r5, r0
 80099ae:	6818      	ldr	r0, [r3, #0]
 80099b0:	460c      	mov	r4, r1
 80099b2:	b118      	cbz	r0, 80099bc <__swsetup_r+0x14>
 80099b4:	6a03      	ldr	r3, [r0, #32]
 80099b6:	b90b      	cbnz	r3, 80099bc <__swsetup_r+0x14>
 80099b8:	f7fe f94a 	bl	8007c50 <__sinit>
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099c2:	0718      	lsls	r0, r3, #28
 80099c4:	d422      	bmi.n	8009a0c <__swsetup_r+0x64>
 80099c6:	06d9      	lsls	r1, r3, #27
 80099c8:	d407      	bmi.n	80099da <__swsetup_r+0x32>
 80099ca:	2309      	movs	r3, #9
 80099cc:	602b      	str	r3, [r5, #0]
 80099ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099d2:	81a3      	strh	r3, [r4, #12]
 80099d4:	f04f 30ff 	mov.w	r0, #4294967295
 80099d8:	e034      	b.n	8009a44 <__swsetup_r+0x9c>
 80099da:	0758      	lsls	r0, r3, #29
 80099dc:	d512      	bpl.n	8009a04 <__swsetup_r+0x5c>
 80099de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099e0:	b141      	cbz	r1, 80099f4 <__swsetup_r+0x4c>
 80099e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099e6:	4299      	cmp	r1, r3
 80099e8:	d002      	beq.n	80099f0 <__swsetup_r+0x48>
 80099ea:	4628      	mov	r0, r5
 80099ec:	f7ff f8a6 	bl	8008b3c <_free_r>
 80099f0:	2300      	movs	r3, #0
 80099f2:	6363      	str	r3, [r4, #52]	; 0x34
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099fa:	81a3      	strh	r3, [r4, #12]
 80099fc:	2300      	movs	r3, #0
 80099fe:	6063      	str	r3, [r4, #4]
 8009a00:	6923      	ldr	r3, [r4, #16]
 8009a02:	6023      	str	r3, [r4, #0]
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	f043 0308 	orr.w	r3, r3, #8
 8009a0a:	81a3      	strh	r3, [r4, #12]
 8009a0c:	6923      	ldr	r3, [r4, #16]
 8009a0e:	b94b      	cbnz	r3, 8009a24 <__swsetup_r+0x7c>
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a1a:	d003      	beq.n	8009a24 <__swsetup_r+0x7c>
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f000 f884 	bl	8009b2c <__smakebuf_r>
 8009a24:	89a0      	ldrh	r0, [r4, #12]
 8009a26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a2a:	f010 0301 	ands.w	r3, r0, #1
 8009a2e:	d00a      	beq.n	8009a46 <__swsetup_r+0x9e>
 8009a30:	2300      	movs	r3, #0
 8009a32:	60a3      	str	r3, [r4, #8]
 8009a34:	6963      	ldr	r3, [r4, #20]
 8009a36:	425b      	negs	r3, r3
 8009a38:	61a3      	str	r3, [r4, #24]
 8009a3a:	6923      	ldr	r3, [r4, #16]
 8009a3c:	b943      	cbnz	r3, 8009a50 <__swsetup_r+0xa8>
 8009a3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a42:	d1c4      	bne.n	80099ce <__swsetup_r+0x26>
 8009a44:	bd38      	pop	{r3, r4, r5, pc}
 8009a46:	0781      	lsls	r1, r0, #30
 8009a48:	bf58      	it	pl
 8009a4a:	6963      	ldrpl	r3, [r4, #20]
 8009a4c:	60a3      	str	r3, [r4, #8]
 8009a4e:	e7f4      	b.n	8009a3a <__swsetup_r+0x92>
 8009a50:	2000      	movs	r0, #0
 8009a52:	e7f7      	b.n	8009a44 <__swsetup_r+0x9c>
 8009a54:	200000f4 	.word	0x200000f4

08009a58 <_raise_r>:
 8009a58:	291f      	cmp	r1, #31
 8009a5a:	b538      	push	{r3, r4, r5, lr}
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	460d      	mov	r5, r1
 8009a60:	d904      	bls.n	8009a6c <_raise_r+0x14>
 8009a62:	2316      	movs	r3, #22
 8009a64:	6003      	str	r3, [r0, #0]
 8009a66:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
 8009a6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009a6e:	b112      	cbz	r2, 8009a76 <_raise_r+0x1e>
 8009a70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a74:	b94b      	cbnz	r3, 8009a8a <_raise_r+0x32>
 8009a76:	4620      	mov	r0, r4
 8009a78:	f000 f830 	bl	8009adc <_getpid_r>
 8009a7c:	462a      	mov	r2, r5
 8009a7e:	4601      	mov	r1, r0
 8009a80:	4620      	mov	r0, r4
 8009a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a86:	f000 b817 	b.w	8009ab8 <_kill_r>
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d00a      	beq.n	8009aa4 <_raise_r+0x4c>
 8009a8e:	1c59      	adds	r1, r3, #1
 8009a90:	d103      	bne.n	8009a9a <_raise_r+0x42>
 8009a92:	2316      	movs	r3, #22
 8009a94:	6003      	str	r3, [r0, #0]
 8009a96:	2001      	movs	r0, #1
 8009a98:	e7e7      	b.n	8009a6a <_raise_r+0x12>
 8009a9a:	2400      	movs	r4, #0
 8009a9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	4798      	blx	r3
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	e7e0      	b.n	8009a6a <_raise_r+0x12>

08009aa8 <raise>:
 8009aa8:	4b02      	ldr	r3, [pc, #8]	; (8009ab4 <raise+0xc>)
 8009aaa:	4601      	mov	r1, r0
 8009aac:	6818      	ldr	r0, [r3, #0]
 8009aae:	f7ff bfd3 	b.w	8009a58 <_raise_r>
 8009ab2:	bf00      	nop
 8009ab4:	200000f4 	.word	0x200000f4

08009ab8 <_kill_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	4d07      	ldr	r5, [pc, #28]	; (8009ad8 <_kill_r+0x20>)
 8009abc:	2300      	movs	r3, #0
 8009abe:	4604      	mov	r4, r0
 8009ac0:	4608      	mov	r0, r1
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	602b      	str	r3, [r5, #0]
 8009ac6:	f7f8 f801 	bl	8001acc <_kill>
 8009aca:	1c43      	adds	r3, r0, #1
 8009acc:	d102      	bne.n	8009ad4 <_kill_r+0x1c>
 8009ace:	682b      	ldr	r3, [r5, #0]
 8009ad0:	b103      	cbz	r3, 8009ad4 <_kill_r+0x1c>
 8009ad2:	6023      	str	r3, [r4, #0]
 8009ad4:	bd38      	pop	{r3, r4, r5, pc}
 8009ad6:	bf00      	nop
 8009ad8:	200007b4 	.word	0x200007b4

08009adc <_getpid_r>:
 8009adc:	f7f7 bfee 	b.w	8001abc <_getpid>

08009ae0 <__swhatbuf_r>:
 8009ae0:	b570      	push	{r4, r5, r6, lr}
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae8:	2900      	cmp	r1, #0
 8009aea:	b096      	sub	sp, #88	; 0x58
 8009aec:	4615      	mov	r5, r2
 8009aee:	461e      	mov	r6, r3
 8009af0:	da0d      	bge.n	8009b0e <__swhatbuf_r+0x2e>
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009af8:	f04f 0100 	mov.w	r1, #0
 8009afc:	bf0c      	ite	eq
 8009afe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b02:	2340      	movne	r3, #64	; 0x40
 8009b04:	2000      	movs	r0, #0
 8009b06:	6031      	str	r1, [r6, #0]
 8009b08:	602b      	str	r3, [r5, #0]
 8009b0a:	b016      	add	sp, #88	; 0x58
 8009b0c:	bd70      	pop	{r4, r5, r6, pc}
 8009b0e:	466a      	mov	r2, sp
 8009b10:	f000 f848 	bl	8009ba4 <_fstat_r>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	dbec      	blt.n	8009af2 <__swhatbuf_r+0x12>
 8009b18:	9901      	ldr	r1, [sp, #4]
 8009b1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b22:	4259      	negs	r1, r3
 8009b24:	4159      	adcs	r1, r3
 8009b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b2a:	e7eb      	b.n	8009b04 <__swhatbuf_r+0x24>

08009b2c <__smakebuf_r>:
 8009b2c:	898b      	ldrh	r3, [r1, #12]
 8009b2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b30:	079d      	lsls	r5, r3, #30
 8009b32:	4606      	mov	r6, r0
 8009b34:	460c      	mov	r4, r1
 8009b36:	d507      	bpl.n	8009b48 <__smakebuf_r+0x1c>
 8009b38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	6123      	str	r3, [r4, #16]
 8009b40:	2301      	movs	r3, #1
 8009b42:	6163      	str	r3, [r4, #20]
 8009b44:	b002      	add	sp, #8
 8009b46:	bd70      	pop	{r4, r5, r6, pc}
 8009b48:	ab01      	add	r3, sp, #4
 8009b4a:	466a      	mov	r2, sp
 8009b4c:	f7ff ffc8 	bl	8009ae0 <__swhatbuf_r>
 8009b50:	9900      	ldr	r1, [sp, #0]
 8009b52:	4605      	mov	r5, r0
 8009b54:	4630      	mov	r0, r6
 8009b56:	f7ff f865 	bl	8008c24 <_malloc_r>
 8009b5a:	b948      	cbnz	r0, 8009b70 <__smakebuf_r+0x44>
 8009b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b60:	059a      	lsls	r2, r3, #22
 8009b62:	d4ef      	bmi.n	8009b44 <__smakebuf_r+0x18>
 8009b64:	f023 0303 	bic.w	r3, r3, #3
 8009b68:	f043 0302 	orr.w	r3, r3, #2
 8009b6c:	81a3      	strh	r3, [r4, #12]
 8009b6e:	e7e3      	b.n	8009b38 <__smakebuf_r+0xc>
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	6020      	str	r0, [r4, #0]
 8009b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b78:	81a3      	strh	r3, [r4, #12]
 8009b7a:	9b00      	ldr	r3, [sp, #0]
 8009b7c:	6163      	str	r3, [r4, #20]
 8009b7e:	9b01      	ldr	r3, [sp, #4]
 8009b80:	6120      	str	r0, [r4, #16]
 8009b82:	b15b      	cbz	r3, 8009b9c <__smakebuf_r+0x70>
 8009b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f000 f81d 	bl	8009bc8 <_isatty_r>
 8009b8e:	b128      	cbz	r0, 8009b9c <__smakebuf_r+0x70>
 8009b90:	89a3      	ldrh	r3, [r4, #12]
 8009b92:	f023 0303 	bic.w	r3, r3, #3
 8009b96:	f043 0301 	orr.w	r3, r3, #1
 8009b9a:	81a3      	strh	r3, [r4, #12]
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	431d      	orrs	r5, r3
 8009ba0:	81a5      	strh	r5, [r4, #12]
 8009ba2:	e7cf      	b.n	8009b44 <__smakebuf_r+0x18>

08009ba4 <_fstat_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4d07      	ldr	r5, [pc, #28]	; (8009bc4 <_fstat_r+0x20>)
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4604      	mov	r4, r0
 8009bac:	4608      	mov	r0, r1
 8009bae:	4611      	mov	r1, r2
 8009bb0:	602b      	str	r3, [r5, #0]
 8009bb2:	f7f7 ffea 	bl	8001b8a <_fstat>
 8009bb6:	1c43      	adds	r3, r0, #1
 8009bb8:	d102      	bne.n	8009bc0 <_fstat_r+0x1c>
 8009bba:	682b      	ldr	r3, [r5, #0]
 8009bbc:	b103      	cbz	r3, 8009bc0 <_fstat_r+0x1c>
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	bd38      	pop	{r3, r4, r5, pc}
 8009bc2:	bf00      	nop
 8009bc4:	200007b4 	.word	0x200007b4

08009bc8 <_isatty_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	4d06      	ldr	r5, [pc, #24]	; (8009be4 <_isatty_r+0x1c>)
 8009bcc:	2300      	movs	r3, #0
 8009bce:	4604      	mov	r4, r0
 8009bd0:	4608      	mov	r0, r1
 8009bd2:	602b      	str	r3, [r5, #0]
 8009bd4:	f7f7 ffe9 	bl	8001baa <_isatty>
 8009bd8:	1c43      	adds	r3, r0, #1
 8009bda:	d102      	bne.n	8009be2 <_isatty_r+0x1a>
 8009bdc:	682b      	ldr	r3, [r5, #0]
 8009bde:	b103      	cbz	r3, 8009be2 <_isatty_r+0x1a>
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	bd38      	pop	{r3, r4, r5, pc}
 8009be4:	200007b4 	.word	0x200007b4

08009be8 <_init>:
 8009be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bea:	bf00      	nop
 8009bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bee:	bc08      	pop	{r3}
 8009bf0:	469e      	mov	lr, r3
 8009bf2:	4770      	bx	lr

08009bf4 <_fini>:
 8009bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf6:	bf00      	nop
 8009bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bfa:	bc08      	pop	{r3}
 8009bfc:	469e      	mov	lr, r3
 8009bfe:	4770      	bx	lr
