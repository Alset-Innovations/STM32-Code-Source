
Commutation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f240  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800f3e0  0800f3e0  0001f3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7cc  0800f7cc  000202e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7cc  0800f7cc  0001f7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7d4  0800f7d4  000202e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7d4  0800f7d4  0001f7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7d8  0800f7d8  0001f7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  0800f7dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fd8  200002e8  0800fac4  000202e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200022c0  0800fac4  000222c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ceba  00000000  00000000  0002039e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004106  00000000  00000000  0003d258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a10  00000000  00000000  00041360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001453  00000000  00000000  00042d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c372  00000000  00000000  000441c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000202fa  00000000  00000000  00060535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3b86  00000000  00000000  0008082f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000080f0  00000000  00000000  001243b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0012c4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e8 	.word	0x200002e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f3c8 	.word	0x0800f3c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002ec 	.word	0x200002ec
 80001dc:	0800f3c8 	.word	0x0800f3c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efa:	f001 f8cb 	bl	8002094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efe:	f000 f87b 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f02:	f000 fb0f 	bl	8001524 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f06:	f000 f8e1 	bl	80010cc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f0a:	f000 f995 	bl	8001238 <MX_TIM1_Init>
  MX_I2C2_Init();
 8000f0e:	f000 f92f 	bl	8001170 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000f12:	f000 f95b 	bl	80011cc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f16:	f000 fadb 	bl	80014d0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000f1a:	f00a feab 	bl	800bc74 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000f1e:	f000 fa49 	bl	80013b4 <MX_TIM2_Init>
  MX_TIM9_Init();
 8000f22:	f000 fa91 	bl	8001448 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  StartupSequence('F');
 8000f26:	2046      	movs	r0, #70	; 0x46
 8000f28:	f000 fb5c 	bl	80015e4 <StartupSequence>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// Read Hall sensor for new PWM calculation
	HAL_ADC_Start(&hadc1);
 8000f2c:	482b      	ldr	r0, [pc, #172]	; (8000fdc <main+0xe8>)
 8000f2e:	f001 f98b 	bl	8002248 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f32:	f04f 31ff 	mov.w	r1, #4294967295
 8000f36:	4829      	ldr	r0, [pc, #164]	; (8000fdc <main+0xe8>)
 8000f38:	f001 fa3a 	bl	80023b0 <HAL_ADC_PollForConversion>
	uint32_t PWM = (HAL_ADC_GetValue(&hadc1) / 4096.0) * TIM1->ARR;
 8000f3c:	4827      	ldr	r0, [pc, #156]	; (8000fdc <main+0xe8>)
 8000f3e:	f001 fac2 	bl	80024c6 <HAL_ADC_GetValue>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fae5 	bl	8000514 <__aeabi_ui2d>
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <main+0xec>)
 8000f50:	f7ff fc84 	bl	800085c <__aeabi_ddiv>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4614      	mov	r4, r2
 8000f5a:	461d      	mov	r5, r3
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <main+0xf0>)
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fad7 	bl	8000514 <__aeabi_ui2d>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	4629      	mov	r1, r5
 8000f6e:	f7ff fb4b 	bl	8000608 <__aeabi_dmul>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f7ff fe1d 	bl	8000bb8 <__aeabi_d2uiz>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	607b      	str	r3, [r7, #4]

	// Update PWM according to temporary potentiometer input
	TIM1->CR1 |= 0x0002;  // Disable Update Events
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <main+0xf0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <main+0xf0>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6013      	str	r3, [r2, #0]
	TIM1->CCR1 = PWM;	  // Set new PWM for channel 1
 8000f8e:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <main+0xf0>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = PWM;	  // Set new PWM for channel 2
 8000f94:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <main+0xf0>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = PWM;	  // Set new PWM for channel 3
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <main+0xf0>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CR1 &= ~0x0002; // Enable Update Events
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <main+0xf0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <main+0xf0>)
 8000fa6:	f023 0302 	bic.w	r3, r3, #2
 8000faa:	6013      	str	r3, [r2, #0]

	// Transmit RPM value to PC via USB
	len = snprintf(buf, sizeof(buf), "\n\rCurrent RPM: %04.2lf", CurrentRPM);
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <main+0xf4>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	e9cd 2300 	strd	r2, r3, [sp]
 8000fb6:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <main+0xf8>)
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <main+0xfc>)
 8000fbc:	f00c f892 	bl	800d0e4 <sniprintf>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <main+0x100>)
 8000fc6:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS((uint8_t *) buf, len);
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <main+0x100>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <main+0xfc>)
 8000fd0:	f00a ff0e 	bl	800bdf0 <CDC_Transmit_FS>

	HAL_Delay(10);
 8000fd4:	200a      	movs	r0, #10
 8000fd6:	f001 f8cf 	bl	8002178 <HAL_Delay>
  {
 8000fda:	e7a7      	b.n	8000f2c <main+0x38>
 8000fdc:	20000304 	.word	0x20000304
 8000fe0:	40b00000 	.word	0x40b00000
 8000fe4:	40010000 	.word	0x40010000
 8000fe8:	20000518 	.word	0x20000518
 8000fec:	0800f3e0 	.word	0x0800f3e0
 8000ff0:	20000520 	.word	0x20000520
 8000ff4:	20000514 	.word	0x20000514

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2230      	movs	r2, #48	; 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f00c f8e3 	bl	800d1d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <SystemClock_Config+0xcc>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <SystemClock_Config+0xcc>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <SystemClock_Config+0xcc>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <SystemClock_Config+0xd0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <SystemClock_Config+0xd0>)
 8001042:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <SystemClock_Config+0xd0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001054:	2301      	movs	r3, #1
 8001056:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105e:	2302      	movs	r3, #2
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001062:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001068:	2319      	movs	r3, #25
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800106c:	23c0      	movs	r3, #192	; 0xc0
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001070:	2302      	movs	r3, #2
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001074:	2304      	movs	r3, #4
 8001076:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	4618      	mov	r0, r3
 800107e:	f004 ffb1 	bl	8005fe4 <HAL_RCC_OscConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001088:	f000 fba0 	bl	80017cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	230f      	movs	r3, #15
 800108e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001090:	2302      	movs	r3, #2
 8001092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800109e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2103      	movs	r1, #3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fa12 	bl	80064d4 <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010b6:	f000 fb89 	bl	80017cc <Error_Handler>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3750      	adds	r7, #80	; 0x50
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_ADC1_Init+0x98>)
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <MX_ADC1_Init+0x9c>)
 80010e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <MX_ADC1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <MX_ADC1_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_ADC1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_ADC1_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MX_ADC1_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_ADC1_Init+0x98>)
 800110c:	4a17      	ldr	r2, [pc, #92]	; (800116c <MX_ADC1_Init+0xa0>)
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_ADC1_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_ADC1_Init+0x98>)
 8001118:	2201      	movs	r2, #1
 800111a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_ADC1_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_ADC1_Init+0x98>)
 8001126:	2201      	movs	r2, #1
 8001128:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800112a:	480e      	ldr	r0, [pc, #56]	; (8001164 <MX_ADC1_Init+0x98>)
 800112c:	f001 f848 	bl	80021c0 <HAL_ADC_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001136:	f000 fb49 	bl	80017cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800113a:	2304      	movs	r3, #4
 800113c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800113e:	2301      	movs	r3, #1
 8001140:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_ADC1_Init+0x98>)
 800114c:	f001 f9c8 	bl	80024e0 <HAL_ADC_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001156:	f000 fb39 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000304 	.word	0x20000304
 8001168:	40012000 	.word	0x40012000
 800116c:	0f000001 	.word	0x0f000001

08001170 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_I2C2_Init+0x50>)
 8001176:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <MX_I2C2_Init+0x54>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_I2C2_Init+0x50>)
 800117c:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <MX_I2C2_Init+0x58>)
 800117e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_I2C2_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 36;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_I2C2_Init+0x50>)
 8001188:	2224      	movs	r2, #36	; 0x24
 800118a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_I2C2_Init+0x50>)
 800118e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001192:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <MX_I2C2_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_I2C2_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <MX_I2C2_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_I2C2_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <MX_I2C2_Init+0x50>)
 80011ae:	f001 fea5 	bl	8002efc <HAL_I2C_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011b8:	f000 fb08 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000034c 	.word	0x2000034c
 80011c4:	40005800 	.word	0x40005800
 80011c8:	000186a0 	.word	0x000186a0

080011cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_SPI1_Init+0x64>)
 80011d2:	4a18      	ldr	r2, [pc, #96]	; (8001234 <MX_SPI1_Init+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_SPI1_Init+0x64>)
 80011d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_SPI1_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_SPI1_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_SPI1_Init+0x64>)
 80011f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_SPI1_Init+0x64>)
 8001218:	220a      	movs	r2, #10
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_SPI1_Init+0x64>)
 800121e:	f005 fb39 	bl	8006894 <HAL_SPI_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001228:	f000 fad0 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200003a0 	.word	0x200003a0
 8001234:	40013000 	.word	0x40013000

08001238 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b096      	sub	sp, #88	; 0x58
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800123e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	615a      	str	r2, [r3, #20]
 800126a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2220      	movs	r2, #32
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f00b ffad 	bl	800d1d2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001278:	4b4c      	ldr	r3, [pc, #304]	; (80013ac <MX_TIM1_Init+0x174>)
 800127a:	4a4d      	ldr	r2, [pc, #308]	; (80013b0 <MX_TIM1_Init+0x178>)
 800127c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800127e:	4b4b      	ldr	r3, [pc, #300]	; (80013ac <MX_TIM1_Init+0x174>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b49      	ldr	r3, [pc, #292]	; (80013ac <MX_TIM1_Init+0x174>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1919;
 800128a:	4b48      	ldr	r3, [pc, #288]	; (80013ac <MX_TIM1_Init+0x174>)
 800128c:	f240 727f 	movw	r2, #1919	; 0x77f
 8001290:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b46      	ldr	r3, [pc, #280]	; (80013ac <MX_TIM1_Init+0x174>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001298:	4b44      	ldr	r3, [pc, #272]	; (80013ac <MX_TIM1_Init+0x174>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b43      	ldr	r3, [pc, #268]	; (80013ac <MX_TIM1_Init+0x174>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012a4:	4841      	ldr	r0, [pc, #260]	; (80013ac <MX_TIM1_Init+0x174>)
 80012a6:	f005 fb7e 	bl	80069a6 <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012b0:	f000 fa8c 	bl	80017cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012b4:	483d      	ldr	r0, [pc, #244]	; (80013ac <MX_TIM1_Init+0x174>)
 80012b6:	f005 fc76 	bl	8006ba6 <HAL_TIM_PWM_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80012c0:	f000 fa84 	bl	80017cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80012c4:	2304      	movs	r3, #4
 80012c6:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80012cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012d0:	4619      	mov	r1, r3
 80012d2:	4836      	ldr	r0, [pc, #216]	; (80013ac <MX_TIM1_Init+0x174>)
 80012d4:	f005 ff96 	bl	8007204 <HAL_TIM_SlaveConfigSynchro>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80012de:	f000 fa75 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012ee:	4619      	mov	r1, r3
 80012f0:	482e      	ldr	r0, [pc, #184]	; (80013ac <MX_TIM1_Init+0x174>)
 80012f2:	f006 fd13 	bl	8007d1c <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80012fc:	f000 fa66 	bl	80017cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001300:	2360      	movs	r3, #96	; 0x60
 8001302:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 500;
 8001304:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	4821      	ldr	r0, [pc, #132]	; (80013ac <MX_TIM1_Init+0x174>)
 8001328:	f005 feaa 	bl	8007080 <HAL_TIM_PWM_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001332:	f000 fa4b 	bl	80017cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001336:	f107 0320 	add.w	r3, r7, #32
 800133a:	2204      	movs	r2, #4
 800133c:	4619      	mov	r1, r3
 800133e:	481b      	ldr	r0, [pc, #108]	; (80013ac <MX_TIM1_Init+0x174>)
 8001340:	f005 fe9e 	bl	8007080 <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800134a:	f000 fa3f 	bl	80017cc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	2208      	movs	r2, #8
 8001358:	4619      	mov	r1, r3
 800135a:	4814      	ldr	r0, [pc, #80]	; (80013ac <MX_TIM1_Init+0x174>)
 800135c:	f005 fe90 	bl	8007080 <HAL_TIM_PWM_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8001366:	f000 fa31 	bl	80017cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800137e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001382:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <MX_TIM1_Init+0x174>)
 800138e:	f006 fd33 	bl	8007df8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8001398:	f000 fa18 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <MX_TIM1_Init+0x174>)
 800139e:	f000 fbdf 	bl	8001b60 <HAL_TIM_MspPostInit>

}
 80013a2:	bf00      	nop
 80013a4:	3758      	adds	r7, #88	; 0x58
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200003f8 	.word	0x200003f8
 80013b0:	40010000 	.word	0x40010000

080013b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM2_Init+0x90>)
 80013d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_TIM2_Init+0x90>)
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_TIM2_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_TIM2_Init+0x90>)
 80013e6:	f04f 32ff 	mov.w	r2, #4294967295
 80013ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_TIM2_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_TIM2_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4619      	mov	r1, r3
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_TIM2_Init+0x90>)
 8001410:	f006 fb5a 	bl	8007ac8 <HAL_TIMEx_HallSensor_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800141a:	f000 f9d7 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800141e:	2350      	movs	r3, #80	; 0x50
 8001420:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001426:	463b      	mov	r3, r7
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <MX_TIM2_Init+0x90>)
 800142c:	f006 fc76 	bl	8007d1c <HAL_TIMEx_MasterConfigSynchronization>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001436:	f000 f9c9 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000440 	.word	0x20000440

08001448 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
 800145c:	615a      	str	r2, [r3, #20]
 800145e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_TIM9_Init+0x80>)
 8001462:	4a1a      	ldr	r2, [pc, #104]	; (80014cc <MX_TIM9_Init+0x84>)
 8001464:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 9999;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_TIM9_Init+0x80>)
 8001468:	f242 720f 	movw	r2, #9999	; 0x270f
 800146c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_TIM9_Init+0x80>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9599;
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_TIM9_Init+0x80>)
 8001476:	f242 527f 	movw	r2, #9599	; 0x257f
 800147a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_TIM9_Init+0x80>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_TIM9_Init+0x80>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8001488:	480f      	ldr	r0, [pc, #60]	; (80014c8 <MX_TIM9_Init+0x80>)
 800148a:	f005 fb3d 	bl	8006b08 <HAL_TIM_OC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8001494:	f000 f99a 	bl	80017cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2200      	movs	r2, #0
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_TIM9_Init+0x80>)
 80014b0:	f005 fd8a 	bl	8006fc8 <HAL_TIM_OC_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80014ba:	f000 f987 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	3720      	adds	r7, #32
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000488 	.word	0x20000488
 80014cc:	40014000 	.word	0x40014000

080014d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_USART1_UART_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_USART1_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_USART1_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_USART1_UART_Init+0x4c>)
 8001508:	f006 fcdc 	bl	8007ec4 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001512:	f000 f95b 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200004d0 	.word	0x200004d0
 8001520:	40011000 	.word	0x40011000

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b27      	ldr	r3, [pc, #156]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a26      	ldr	r2, [pc, #152]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <MX_GPIO_Init+0xb8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <MX_GPIO_Init+0xb8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a18      	ldr	r2, [pc, #96]	; (80015dc <MX_GPIO_Init+0xb8>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <MX_GPIO_Init+0xb8>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_GPIO_Init+0xb8>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <MX_GPIO_Init+0xbc>)
 80015b2:	f001 fc89 	bl	8002ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80015b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4804      	ldr	r0, [pc, #16]	; (80015e0 <MX_GPIO_Init+0xbc>)
 80015d0:	f001 faf6 	bl	8002bc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020800 	.word	0x40020800

080015e4 <StartupSequence>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef StartupSequence(char Direction) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]

	// Set first commutation state according to Hall sensors
	if (PrepareCommutation(Direction) == HAL_ERROR) {
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 f887 	bl	8001704 <PrepareCommutation>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <StartupSequence+0x1c>
		return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e072      	b.n	80016e6 <StartupSequence+0x102>
	}

	// Start HallSensor timer
	HAL_TIMEx_HallSensor_Start(&htim2);
 8001600:	483b      	ldr	r0, [pc, #236]	; (80016f0 <StartupSequence+0x10c>)
 8001602:	f006 fb0b 	bl	8007c1c <HAL_TIMEx_HallSensor_Start>

	// Start all PWM signals on TIM1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001606:	2100      	movs	r1, #0
 8001608:	483a      	ldr	r0, [pc, #232]	; (80016f4 <StartupSequence+0x110>)
 800160a:	f005 fb25 	bl	8006c58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800160e:	2104      	movs	r1, #4
 8001610:	4838      	ldr	r0, [pc, #224]	; (80016f4 <StartupSequence+0x110>)
 8001612:	f005 fb21 	bl	8006c58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001616:	2108      	movs	r1, #8
 8001618:	4836      	ldr	r0, [pc, #216]	; (80016f4 <StartupSequence+0x110>)
 800161a:	f005 fb1d 	bl	8006c58 <HAL_TIM_PWM_Start>

	// Disable all interrupts
	TIM1->DIER &= ~TIM_DIER_COMIE;	// Disable Commutation events in DIER register
 800161e:	4b36      	ldr	r3, [pc, #216]	; (80016f8 <StartupSequence+0x114>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	4a35      	ldr	r2, [pc, #212]	; (80016f8 <StartupSequence+0x114>)
 8001624:	f023 0320 	bic.w	r3, r3, #32
 8001628:	60d3      	str	r3, [r2, #12]
	TIM1->DIER &= ~TIM_DIER_BIE; 	// Disable break interrupt as this is shared with timer 9 interrupt
 800162a:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <StartupSequence+0x114>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	4a32      	ldr	r2, [pc, #200]	; (80016f8 <StartupSequence+0x114>)
 8001630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001634:	60d3      	str	r3, [r2, #12]
	TIM2->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 2
 8001636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001644:	60d3      	str	r3, [r2, #12]
	TIM9->DIER &= ~TIM_DIER_TIE; 	// Disable interrupt on timer 9
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <StartupSequence+0x118>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	4a2c      	ldr	r2, [pc, #176]	; (80016fc <StartupSequence+0x118>)
 800164c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001650:	60d3      	str	r3, [r2, #12]

	// Start Interrupts
	HAL_TIM_Base_Start_IT(&htim1);
 8001652:	4828      	ldr	r0, [pc, #160]	; (80016f4 <StartupSequence+0x110>)
 8001654:	f005 f9f6 	bl	8006a44 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001658:	4825      	ldr	r0, [pc, #148]	; (80016f0 <StartupSequence+0x10c>)
 800165a:	f005 f9f3 	bl	8006a44 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);
 800165e:	4828      	ldr	r0, [pc, #160]	; (8001700 <StartupSequence+0x11c>)
 8001660:	f005 f9f0 	bl	8006a44 <HAL_TIM_Base_Start_IT>

	// Clear all interrupt triggers
	TIM1->SR &= ~TIM_SR_COMIF;		// Clear Commutation interrupt flag
 8001664:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <StartupSequence+0x114>)
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <StartupSequence+0x114>)
 800166a:	f023 0320 	bic.w	r3, r3, #32
 800166e:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~TIM_SR_BIF;		// Clear Break interrupt flag
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <StartupSequence+0x114>)
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	4a20      	ldr	r2, [pc, #128]	; (80016f8 <StartupSequence+0x114>)
 8001676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800167a:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~TIM_SR_TIF;		// Clear timer 2 interrupt flag
 800167c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800168a:	6113      	str	r3, [r2, #16]
	TIM9->SR &= ~TIM_SR_TIF;		// Clear timer 9 interrupt flag
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <StartupSequence+0x118>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <StartupSequence+0x118>)
 8001692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001696:	6113      	str	r3, [r2, #16]

	// Enable interrupts
	TIM1->DIER |= TIM_DIER_COMIE;	// Enable Commutation events in DIER register
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <StartupSequence+0x114>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4a16      	ldr	r2, [pc, #88]	; (80016f8 <StartupSequence+0x114>)
 800169e:	f043 0320 	orr.w	r3, r3, #32
 80016a2:	60d3      	str	r3, [r2, #12]
	TIM2->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 2
 80016a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b2:	60d3      	str	r3, [r2, #12]
	TIM9->DIER |= TIM_DIER_TIE; 	// Enable interrupt on timer 9
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <StartupSequence+0x118>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4a10      	ldr	r2, [pc, #64]	; (80016fc <StartupSequence+0x118>)
 80016ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016be:	60d3      	str	r3, [r2, #12]

	// Write some registers
	TIM1->CR2  |= 0x0005; 			// Set CCPC 1 and CCUS 1 in CR2
 80016c0:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <StartupSequence+0x114>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a0c      	ldr	r2, [pc, #48]	; (80016f8 <StartupSequence+0x114>)
 80016c6:	f043 0305 	orr.w	r3, r3, #5
 80016ca:	6053      	str	r3, [r2, #4]
	TIM1->EGR  |= TIM_EGR_COMG; 	// Set COMG bit in EGR for first commutation
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <StartupSequence+0x114>)
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <StartupSequence+0x114>)
 80016d2:	f043 0320 	orr.w	r3, r3, #32
 80016d6:	6153      	str	r3, [r2, #20]
	TIM1->DIER |= TIM_DIER_COMIE; 	// Enable Commutation events in DIER register
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <StartupSequence+0x114>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <StartupSequence+0x114>)
 80016de:	f043 0320 	orr.w	r3, r3, #32
 80016e2:	60d3      	str	r3, [r2, #12]
	// TIM1->BDTR |= TIM_BDTR_OSSR;

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0

}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000440 	.word	0x20000440
 80016f4:	200003f8 	.word	0x200003f8
 80016f8:	40010000 	.word	0x40010000
 80016fc:	40014000 	.word	0x40014000
 8001700:	20000488 	.word	0x20000488

08001704 <PrepareCommutation>:

  return HAL_OK;

}

HAL_StatusTypeDef PrepareCommutation(char Direction) {
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]

  // Read IDR for Hall Sensor status
  uint8_t Hall = (GPIOA->IDR & 0x0007) - 1;
 800170e:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <PrepareCommutation+0xb8>)
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	b2db      	uxtb	r3, r3
 800171a:	3b01      	subs	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]

  // Edit Hall data according to direction.
  switch (Direction) {
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b42      	cmp	r3, #66	; 0x42
 8001722:	d010      	beq.n	8001746 <PrepareCommutation+0x42>
 8001724:	2b46      	cmp	r3, #70	; 0x46
 8001726:	d120      	bne.n	800176a <PrepareCommutation+0x66>
  case 'F':
  	  Hall += 2; // Select next value in the array to go forward
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	3302      	adds	r3, #2
 800172c:	73fb      	strb	r3, [r7, #15]
	  Hall %= 6; // If original was 5 it needs to be 0 to we use % 6
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <PrepareCommutation+0xbc>)
 8001732:	fba3 1302 	umull	r1, r3, r3, r2
 8001736:	0899      	lsrs	r1, r3, #2
 8001738:	460b      	mov	r3, r1
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	440b      	add	r3, r1
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	73fb      	strb	r3, [r7, #15]
  break;
 8001744:	e013      	b.n	800176e <PrepareCommutation+0x6a>
  case 'B':
	  Hall += 6; // To not go negative in the next step we add 6
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	3306      	adds	r3, #6
 800174a:	73fb      	strb	r3, [r7, #15]
	  Hall -= 2; // Select previous value to go backwards
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	3b02      	subs	r3, #2
 8001750:	73fb      	strb	r3, [r7, #15]
	  Hall %= 6; // If original was 0 it needs to become 5, this also negates the 6 we added previously
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <PrepareCommutation+0xbc>)
 8001756:	fba3 1302 	umull	r1, r3, r3, r2
 800175a:	0899      	lsrs	r1, r3, #2
 800175c:	460b      	mov	r3, r1
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	440b      	add	r3, r1
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	73fb      	strb	r3, [r7, #15]
  break;
 8001768:	e001      	b.n	800176e <PrepareCommutation+0x6a>
  default:
	  // If F or B is not supplied the function should return with an error
	  return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e020      	b.n	80017b0 <PrepareCommutation+0xac>
  break;
  }

  // Set Registers to required values
  TIM1->CCER  = Commutation[Hall][0];
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	4914      	ldr	r1, [pc, #80]	; (80017c4 <PrepareCommutation+0xc0>)
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	440b      	add	r3, r1
 800177c:	881a      	ldrh	r2, [r3, #0]
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <PrepareCommutation+0xc4>)
 8001780:	621a      	str	r2, [r3, #32]
  TIM1->CCMR1 = Commutation[Hall][2];
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	490f      	ldr	r1, [pc, #60]	; (80017c4 <PrepareCommutation+0xc0>)
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	440b      	add	r3, r1
 8001790:	3304      	adds	r3, #4
 8001792:	881a      	ldrh	r2, [r3, #0]
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <PrepareCommutation+0xc4>)
 8001796:	619a      	str	r2, [r3, #24]
  TIM1->CCMR2 = Commutation[Hall][1];
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	490a      	ldr	r1, [pc, #40]	; (80017c4 <PrepareCommutation+0xc0>)
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	440b      	add	r3, r1
 80017a6:	3302      	adds	r3, #2
 80017a8:	881a      	ldrh	r2, [r3, #0]
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <PrepareCommutation+0xc4>)
 80017ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80017ae:	2300      	movs	r3, #0

}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40020000 	.word	0x40020000
 80017c0:	aaaaaaab 	.word	0xaaaaaaab
 80017c4:	20000000 	.word	0x20000000
 80017c8:	40010000 	.word	0x40010000

080017cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
}
 80017d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <Error_Handler+0x8>
	...

080017d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_MspInit+0x4c>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <HAL_MspInit+0x4c>)
 80017e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_MspInit+0x4c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a08      	ldr	r2, [pc, #32]	; (8001824 <HAL_MspInit+0x4c>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <HAL_ADC_MspInit+0x7c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d127      	bne.n	800189a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_ADC_MspInit+0x80>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <HAL_ADC_MspInit+0x80>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_ADC_MspInit+0x80>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_ADC_MspInit+0x80>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <HAL_ADC_MspInit+0x80>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_ADC_MspInit+0x80>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001882:	2310      	movs	r3, #16
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001886:	2303      	movs	r3, #3
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <HAL_ADC_MspInit+0x84>)
 8001896:	f001 f993 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40012000 	.word	0x40012000
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020000 	.word	0x40020000

080018b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a2a      	ldr	r2, [pc, #168]	; (8001978 <HAL_I2C_MspInit+0xc8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d14d      	bne.n	800196e <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b29      	ldr	r3, [pc, #164]	; (800197c <HAL_I2C_MspInit+0xcc>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a28      	ldr	r2, [pc, #160]	; (800197c <HAL_I2C_MspInit+0xcc>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <HAL_I2C_MspInit+0xcc>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f4:	2312      	movs	r3, #18
 80018f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001900:	2304      	movs	r3, #4
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	481d      	ldr	r0, [pc, #116]	; (8001980 <HAL_I2C_MspInit+0xd0>)
 800190c:	f001 f958 	bl	8002bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001916:	2312      	movs	r3, #18
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001922:	2309      	movs	r3, #9
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4814      	ldr	r0, [pc, #80]	; (8001980 <HAL_I2C_MspInit+0xd0>)
 800192e:	f001 f947 	bl	8002bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_I2C_MspInit+0xcc>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <HAL_I2C_MspInit+0xcc>)
 800193c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_I2C_MspInit+0xcc>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	2021      	movs	r0, #33	; 0x21
 8001954:	f001 f8cd 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001958:	2021      	movs	r0, #33	; 0x21
 800195a:	f001 f8e6 	bl	8002b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	2022      	movs	r0, #34	; 0x22
 8001964:	f001 f8c5 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001968:	2022      	movs	r0, #34	; 0x22
 800196a:	f001 f8de 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40005800 	.word	0x40005800
 800197c:	40023800 	.word	0x40023800
 8001980:	40020400 	.word	0x40020400

08001984 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <HAL_SPI_MspInit+0x84>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d12b      	bne.n	80019fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_SPI_MspInit+0x88>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a17      	ldr	r2, [pc, #92]	; (8001a0c <HAL_SPI_MspInit+0x88>)
 80019b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_SPI_MspInit+0x88>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_SPI_MspInit+0x88>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <HAL_SPI_MspInit+0x88>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_SPI_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019de:	23e0      	movs	r3, #224	; 0xe0
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ee:	2305      	movs	r3, #5
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <HAL_SPI_MspInit+0x8c>)
 80019fa:	f001 f8e1 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40013000 	.word	0x40013000
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000

08001a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <HAL_TIM_Base_MspInit+0x58>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d11d      	bne.n	8001a62 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_TIM_Base_MspInit+0x5c>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <HAL_TIM_Base_MspInit+0x5c>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6453      	str	r3, [r2, #68]	; 0x44
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_TIM_Base_MspInit+0x5c>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	2018      	movs	r0, #24
 8001a48:	f001 f853 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a4c:	2018      	movs	r0, #24
 8001a4e:	f001 f86c 	bl	8002b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	201a      	movs	r0, #26
 8001a58:	f001 f84b 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a5c:	201a      	movs	r0, #26
 8001a5e:	f001 f864 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40010000 	.word	0x40010000
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a94:	d133      	bne.n	8001afe <HAL_TIMEx_HallSensor_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a1a      	ldr	r2, [pc, #104]	; (8001b08 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_TIMEx_HallSensor_MspInit+0x94>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001ace:	2307      	movs	r3, #7
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4808      	ldr	r0, [pc, #32]	; (8001b0c <HAL_TIMEx_HallSensor_MspInit+0x98>)
 8001aea:	f001 f869 	bl	8002bc0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	201c      	movs	r0, #28
 8001af4:	f000 fffd 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001af8:	201c      	movs	r0, #28
 8001afa:	f001 f816 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	; 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020000 	.word	0x40020000

08001b10 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM9)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <HAL_TIM_OC_MspInit+0x48>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d115      	bne.n	8001b4e <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <HAL_TIM_OC_MspInit+0x4c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <HAL_TIM_OC_MspInit+0x4c>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_TIM_OC_MspInit+0x4c>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2018      	movs	r0, #24
 8001b44:	f000 ffd5 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b48:	2018      	movs	r0, #24
 8001b4a:	f000 ffee 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40014000 	.word	0x40014000
 8001b5c:	40023800 	.word	0x40023800

08001b60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a22      	ldr	r2, [pc, #136]	; (8001c08 <HAL_TIM_MspPostInit+0xa8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d13d      	bne.n	8001bfe <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <HAL_TIM_MspPostInit+0xac>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a20      	ldr	r2, [pc, #128]	; (8001c0c <HAL_TIM_MspPostInit+0xac>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <HAL_TIM_MspPostInit+0xac>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <HAL_TIM_MspPostInit+0xac>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_TIM_MspPostInit+0xac>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_TIM_MspPostInit+0xac>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8001bba:	f242 0303 	movw	r3, #8195	; 0x2003
 8001bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480e      	ldr	r0, [pc, #56]	; (8001c10 <HAL_TIM_MspPostInit+0xb0>)
 8001bd8:	f000 fff2 	bl	8002bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001bdc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4806      	ldr	r0, [pc, #24]	; (8001c14 <HAL_TIM_MspPostInit+0xb4>)
 8001bfa:	f000 ffe1 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40020000 	.word	0x40020000

08001c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a28      	ldr	r2, [pc, #160]	; (8001cd8 <HAL_UART_MspInit+0xc0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d14a      	bne.n	8001cd0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <HAL_UART_MspInit+0xc4>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a26      	ldr	r2, [pc, #152]	; (8001cdc <HAL_UART_MspInit+0xc4>)
 8001c44:	f043 0310 	orr.w	r3, r3, #16
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_UART_MspInit+0xc4>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <HAL_UART_MspInit+0xc4>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <HAL_UART_MspInit+0xc4>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_UART_MspInit+0xc4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_UART_MspInit+0xc4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_UART_MspInit+0xc4>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <HAL_UART_MspInit+0xc4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ca0:	2307      	movs	r3, #7
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <HAL_UART_MspInit+0xc8>)
 8001cac:	f000 ff88 	bl	8002bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <HAL_UART_MspInit+0xcc>)
 8001ccc:	f000 ff78 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cd0:	bf00      	nop
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40011000 	.word	0x40011000
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400

08001ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <NMI_Handler+0x4>

08001cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <HardFault_Handler+0x4>

08001cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <MemManage_Handler+0x4>

08001cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <BusFault_Handler+0x4>

08001d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <UsageFault_Handler+0x4>

08001d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d34:	f000 fa00 	bl	8002138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  CurrentRPM = 0;
 8001d40:	4907      	ldr	r1, [pc, #28]	; (8001d60 <TIM1_BRK_TIM9_IRQHandler+0x24>)
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9c1 2300 	strd	r2, r3, [r1]

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <TIM1_BRK_TIM9_IRQHandler+0x28>)
 8001d50:	f005 f832 	bl	8006db8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001d54:	4804      	ldr	r0, [pc, #16]	; (8001d68 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 8001d56:	f005 f82f 	bl	8006db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000518 	.word	0x20000518
 8001d64:	200003f8 	.word	0x200003f8
 8001d68:	20000488 	.word	0x20000488

08001d6c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  // Set next Commutation states
  PrepareCommutation('F');
 8001d70:	2046      	movs	r0, #70	; 0x46
 8001d72:	f7ff fcc7 	bl	8001704 <PrepareCommutation>

  // Reset COMIF in SR register
  TIM1->SR &= ~TIM_SR_COMIF;
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 8001d7c:	f023 0320 	bic.w	r3, r3, #32
 8001d80:	6113      	str	r3, [r2, #16]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d82:	4803      	ldr	r0, [pc, #12]	; (8001d90 <TIM1_TRG_COM_TIM11_IRQHandler+0x24>)
 8001d84:	f005 f818 	bl	8006db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	200003f8 	.word	0x200003f8
 8001d94:	00000000 	.word	0x00000000

08001d98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  uint32_t HallTime = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4825      	ldr	r0, [pc, #148]	; (8001e38 <TIM2_IRQHandler+0xa0>)
 8001da2:	f005 fa71 	bl	8007288 <HAL_TIM_ReadCapturedValue>
 8001da6:	6078      	str	r0, [r7, #4]
  if ( HallTime > 0 ) {
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d026      	beq.n	8001dfc <TIM2_IRQHandler+0x64>
	  CurrentRPM = 1 / ((HallTime * 6.0 / Fapb1clk) / 60);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fbb0 	bl	8000514 <__aeabi_ui2d>
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <TIM2_IRQHandler+0xa4>)
 8001dba:	f7fe fc25 	bl	8000608 <__aeabi_dmul>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	a31a      	add	r3, pc, #104	; (adr r3, 8001e30 <TIM2_IRQHandler+0x98>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fd46 	bl	800085c <__aeabi_ddiv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <TIM2_IRQHandler+0xa8>)
 8001dde:	f7fe fd3d 	bl	800085c <__aeabi_ddiv>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	f04f 0000 	mov.w	r0, #0
 8001dea:	4916      	ldr	r1, [pc, #88]	; (8001e44 <TIM2_IRQHandler+0xac>)
 8001dec:	f7fe fd36 	bl	800085c <__aeabi_ddiv>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4914      	ldr	r1, [pc, #80]	; (8001e48 <TIM2_IRQHandler+0xb0>)
 8001df6:	e9c1 2300 	strd	r2, r3, [r1]
 8001dfa:	e006      	b.n	8001e0a <TIM2_IRQHandler+0x72>
  } else {
	  CurrentRPM = 0;
 8001dfc:	4912      	ldr	r1, [pc, #72]	; (8001e48 <TIM2_IRQHandler+0xb0>)
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9c1 2300 	strd	r2, r3, [r1]
  }

  // Reset Timer 9 counter.
  TIM9->CNT = 0x0;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <TIM2_IRQHandler+0xb4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24

  // Set COMG bit in EGR
  TIM1->EGR |= TIM_EGR_COMG;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <TIM2_IRQHandler+0xb8>)
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	4a0e      	ldr	r2, [pc, #56]	; (8001e50 <TIM2_IRQHandler+0xb8>)
 8001e16:	f043 0320 	orr.w	r3, r3, #32
 8001e1a:	6153      	str	r3, [r2, #20]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e1c:	4806      	ldr	r0, [pc, #24]	; (8001e38 <TIM2_IRQHandler+0xa0>)
 8001e1e:	f004 ffcb 	bl	8006db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	f3af 8000 	nop.w
 8001e30:	00000000 	.word	0x00000000
 8001e34:	4196e360 	.word	0x4196e360
 8001e38:	20000440 	.word	0x20000440
 8001e3c:	40180000 	.word	0x40180000
 8001e40:	404e0000 	.word	0x404e0000
 8001e44:	3ff00000 	.word	0x3ff00000
 8001e48:	20000518 	.word	0x20000518
 8001e4c:	40014000 	.word	0x40014000
 8001e50:	40010000 	.word	0x40010000

08001e54 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <I2C2_EV_IRQHandler+0x10>)
 8001e5a:	f001 f993 	bl	8003184 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000034c 	.word	0x2000034c

08001e68 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <I2C2_ER_IRQHandler+0x10>)
 8001e6e:	f001 fadc 	bl	800342a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000034c 	.word	0x2000034c

08001e7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <OTG_FS_IRQHandler+0x10>)
 8001e82:	f002 ff82 	bl	8004d8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20001a48 	.word	0x20001a48

08001e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return 1;
 8001e94:	2301      	movs	r3, #1
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <_kill>:

int _kill(int pid, int sig)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eaa:	f00b f9e5 	bl	800d278 <__errno>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2216      	movs	r2, #22
 8001eb2:	601a      	str	r2, [r3, #0]
  return -1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_exit>:

void _exit (int status)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ffe7 	bl	8001ea0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ed2:	e7fe      	b.n	8001ed2 <_exit+0x12>

08001ed4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	e00a      	b.n	8001efc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee6:	f3af 8000 	nop.w
 8001eea:	4601      	mov	r1, r0
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	60ba      	str	r2, [r7, #8]
 8001ef2:	b2ca      	uxtb	r2, r1
 8001ef4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	dbf0      	blt.n	8001ee6 <_read+0x12>
  }

  return len;
 8001f04:	687b      	ldr	r3, [r7, #4]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e009      	b.n	8001f34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	60ba      	str	r2, [r7, #8]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3301      	adds	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	dbf1      	blt.n	8001f20 <_write+0x12>
  }
  return len;
 8001f3c:	687b      	ldr	r3, [r7, #4]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_close>:

int _close(int file)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <_isatty>:

int _isatty(int file)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f86:	2301      	movs	r3, #1
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb8:	4a14      	ldr	r2, [pc, #80]	; (800200c <_sbrk+0x5c>)
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <_sbrk+0x60>)
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <_sbrk+0x64>)
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <_sbrk+0x68>)
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d207      	bcs.n	8001ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe0:	f00b f94a 	bl	800d278 <__errno>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	e009      	b.n	8002004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <_sbrk+0x64>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a05      	ldr	r2, [pc, #20]	; (8002014 <_sbrk+0x64>)
 8002000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20020000 	.word	0x20020000
 8002010:	00000400 	.word	0x00000400
 8002014:	20000560 	.word	0x20000560
 8002018:	200022c0 	.word	0x200022c0

0800201c <SystemInit>:
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <SystemInit+0x20>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	4a05      	ldr	r2, [pc, #20]	; (800203c <SystemInit+0x20>)
 8002028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800202c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002078 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002044:	480d      	ldr	r0, [pc, #52]	; (800207c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002046:	490e      	ldr	r1, [pc, #56]	; (8002080 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002048:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800204c:	e002      	b.n	8002054 <LoopCopyDataInit>

0800204e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002052:	3304      	adds	r3, #4

08002054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002058:	d3f9      	bcc.n	800204e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205a:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800205c:	4c0b      	ldr	r4, [pc, #44]	; (800208c <LoopFillZerobss+0x26>)
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002060:	e001      	b.n	8002066 <LoopFillZerobss>

08002062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002064:	3204      	adds	r2, #4

08002066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002068:	d3fb      	bcc.n	8002062 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800206a:	f7ff ffd7 	bl	800201c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800206e:	f00b f909 	bl	800d284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002072:	f7fe ff3f 	bl	8000ef4 <main>
  bx  lr    
 8002076:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800207c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002080:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8002084:	0800f7dc 	.word	0x0800f7dc
  ldr r2, =_sbss
 8002088:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 800208c:	200022c0 	.word	0x200022c0

08002090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC_IRQHandler>
	...

08002094 <HAL_Init>:
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
 8002098:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <HAL_Init+0x40>)
 800209e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <HAL_Init+0x40>)
 80020aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <HAL_Init+0x40>)
 80020b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 fd0d 	bl	8002adc <HAL_NVIC_SetPriorityGrouping>
 80020c2:	200f      	movs	r0, #15
 80020c4:	f000 f808 	bl	80020d8 <HAL_InitTick>
 80020c8:	f7ff fb86 	bl	80017d8 <HAL_MspInit>
 80020cc:	2300      	movs	r3, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023c00 	.word	0x40023c00

080020d8 <HAL_InitTick>:
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_InitTick+0x54>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_InitTick+0x58>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4619      	mov	r1, r3
 80020ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fd25 	bl	8002b46 <HAL_SYSTICK_Config>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_InitTick+0x2e>
 8002102:	2301      	movs	r3, #1
 8002104:	e00e      	b.n	8002124 <HAL_InitTick+0x4c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b0f      	cmp	r3, #15
 800210a:	d80a      	bhi.n	8002122 <HAL_InitTick+0x4a>
 800210c:	2200      	movs	r2, #0
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f000 fced 	bl	8002af2 <HAL_NVIC_SetPriority>
 8002118:	4a06      	ldr	r2, [pc, #24]	; (8002134 <HAL_InitTick+0x5c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	2300      	movs	r3, #0
 8002120:	e000      	b.n	8002124 <HAL_InitTick+0x4c>
 8002122:	2301      	movs	r3, #1
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000024 	.word	0x20000024
 8002130:	2000002c 	.word	0x2000002c
 8002134:	20000028 	.word	0x20000028

08002138 <HAL_IncTick>:
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_IncTick+0x20>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_IncTick+0x24>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4413      	add	r3, r2
 8002148:	4a04      	ldr	r2, [pc, #16]	; (800215c <HAL_IncTick+0x24>)
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	2000002c 	.word	0x2000002c
 800215c:	20000564 	.word	0x20000564

08002160 <HAL_GetTick>:
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <HAL_GetTick+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000564 	.word	0x20000564

08002178 <HAL_Delay>:
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	f7ff ffee 	bl	8002160 <HAL_GetTick>
 8002184:	60b8      	str	r0, [r7, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d005      	beq.n	800219e <HAL_Delay+0x26>
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_Delay+0x44>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	bf00      	nop
 80021a0:	f7ff ffde 	bl	8002160 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d8f7      	bhi.n	80021a0 <HAL_Delay+0x28>
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000002c 	.word	0x2000002c

080021c0 <HAL_ADC_Init>:
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_Init+0x16>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e033      	b.n	800223e <HAL_ADC_Init+0x7e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_ADC_Init+0x32>
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fb22 	bl	8001828 <HAL_ADC_MspInit>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d118      	bne.n	8002230 <HAL_ADC_Init+0x70>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002206:	f023 0302 	bic.w	r3, r3, #2
 800220a:	f043 0202 	orr.w	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fa96 	bl	8002744 <ADC_Init>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f023 0303 	bic.w	r3, r3, #3
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
 800222e:	e001      	b.n	8002234 <HAL_ADC_Init+0x74>
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_ADC_Start>:
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_ADC_Start+0x1a>
 800225e:	2302      	movs	r3, #2
 8002260:	e097      	b.n	8002392 <HAL_ADC_Start+0x14a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d018      	beq.n	80022aa <HAL_ADC_Start+0x62>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	4b45      	ldr	r3, [pc, #276]	; (80023a0 <HAL_ADC_Start+0x158>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a45      	ldr	r2, [pc, #276]	; (80023a4 <HAL_ADC_Start+0x15c>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	0c9a      	lsrs	r2, r3, #18
 8002294:	4613      	mov	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	e002      	b.n	80022a4 <HAL_ADC_Start+0x5c>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f9      	bne.n	800229e <HAL_ADC_Start+0x56>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d15f      	bne.n	8002378 <HAL_ADC_Start+0x130>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <HAL_ADC_Start+0xa2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f6:	d106      	bne.n	8002306 <HAL_ADC_Start+0xbe>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	f023 0206 	bic.w	r2, r3, #6
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	645a      	str	r2, [r3, #68]	; 0x44
 8002304:	e002      	b.n	800230c <HAL_ADC_Start+0xc4>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	645a      	str	r2, [r3, #68]	; 0x44
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_ADC_Start+0x160>)
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10f      	bne.n	800234e <HAL_ADC_Start+0x106>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d129      	bne.n	8002390 <HAL_ADC_Start+0x148>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	e020      	b.n	8002390 <HAL_ADC_Start+0x148>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a16      	ldr	r2, [pc, #88]	; (80023ac <HAL_ADC_Start+0x164>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d11b      	bne.n	8002390 <HAL_ADC_Start+0x148>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d114      	bne.n	8002390 <HAL_ADC_Start+0x148>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	e00b      	b.n	8002390 <HAL_ADC_Start+0x148>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f043 0210 	orr.w	r2, r3, #16
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	645a      	str	r2, [r3, #68]	; 0x44
 8002390:	2300      	movs	r3, #0
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000024 	.word	0x20000024
 80023a4:	431bde83 	.word	0x431bde83
 80023a8:	40012300 	.word	0x40012300
 80023ac:	40012000 	.word	0x40012000

080023b0 <HAL_ADC_PollForConversion>:
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023cc:	d113      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x46>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023dc:	d10b      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x46>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f043 0220 	orr.w	r2, r3, #32
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80023f2:	2301      	movs	r3, #1
 80023f4:	e063      	b.n	80024be <HAL_ADC_PollForConversion+0x10e>
 80023f6:	f7ff feb3 	bl	8002160 <HAL_GetTick>
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	e021      	b.n	8002442 <HAL_ADC_PollForConversion+0x92>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002404:	d01d      	beq.n	8002442 <HAL_ADC_PollForConversion+0x92>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_ADC_PollForConversion+0x6c>
 800240c:	f7ff fea8 	bl	8002160 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d212      	bcs.n	8002442 <HAL_ADC_PollForConversion+0x92>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d00b      	beq.n	8002442 <HAL_ADC_PollForConversion+0x92>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f043 0204 	orr.w	r2, r3, #4
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800243e:	2303      	movs	r3, #3
 8002440:	e03d      	b.n	80024be <HAL_ADC_PollForConversion+0x10e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b02      	cmp	r3, #2
 800244e:	d1d6      	bne.n	80023fe <HAL_ADC_PollForConversion+0x4e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0212 	mvn.w	r2, #18
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d123      	bne.n	80024bc <HAL_ADC_PollForConversion+0x10c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e1b      	ldrb	r3, [r3, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d11f      	bne.n	80024bc <HAL_ADC_PollForConversion+0x10c>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <HAL_ADC_PollForConversion+0xe8>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <HAL_ADC_PollForConversion+0x10c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_ADC_PollForConversion+0x10c>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40
 80024bc:	2300      	movs	r3, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_ADC_GetValue>:
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_ADC_ConfigChannel>:
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1c>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e113      	b.n	8002724 <HAL_ADC_ConfigChannel+0x244>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b09      	cmp	r3, #9
 800250a:	d925      	bls.n	8002558 <HAL_ADC_ConfigChannel+0x78>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68d9      	ldr	r1, [r3, #12]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	3b1e      	subs	r3, #30
 8002522:	2207      	movs	r2, #7
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43da      	mvns	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	400a      	ands	r2, r1
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68d9      	ldr	r1, [r3, #12]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	4618      	mov	r0, r3
 8002544:	4603      	mov	r3, r0
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4403      	add	r3, r0
 800254a:	3b1e      	subs	r3, #30
 800254c:	409a      	lsls	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	e022      	b.n	800259e <HAL_ADC_ConfigChannel+0xbe>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6919      	ldr	r1, [r3, #16]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	2207      	movs	r2, #7
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	400a      	ands	r2, r1
 800257a:	611a      	str	r2, [r3, #16]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6919      	ldr	r1, [r3, #16]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	4618      	mov	r0, r3
 800258e:	4603      	mov	r3, r0
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4403      	add	r3, r0
 8002594:	409a      	lsls	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	611a      	str	r2, [r3, #16]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d824      	bhi.n	80025f0 <HAL_ADC_ConfigChannel+0x110>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	3b05      	subs	r3, #5
 80025b8:	221f      	movs	r2, #31
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	400a      	ands	r2, r1
 80025c6:	635a      	str	r2, [r3, #52]	; 0x34
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	3b05      	subs	r3, #5
 80025e2:	fa00 f203 	lsl.w	r2, r0, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34
 80025ee:	e04c      	b.n	800268a <HAL_ADC_ConfigChannel+0x1aa>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b0c      	cmp	r3, #12
 80025f6:	d824      	bhi.n	8002642 <HAL_ADC_ConfigChannel+0x162>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	3b23      	subs	r3, #35	; 0x23
 800260a:	221f      	movs	r2, #31
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43da      	mvns	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	400a      	ands	r2, r1
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	4618      	mov	r0, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	3b23      	subs	r3, #35	; 0x23
 8002634:	fa00 f203 	lsl.w	r2, r0, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
 8002640:	e023      	b.n	800268a <HAL_ADC_ConfigChannel+0x1aa>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	3b41      	subs	r3, #65	; 0x41
 8002654:	221f      	movs	r2, #31
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	400a      	ands	r2, r1
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	4618      	mov	r0, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	3b41      	subs	r3, #65	; 0x41
 800267e:	fa00 f203 	lsl.w	r2, r0, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	62da      	str	r2, [r3, #44]	; 0x2c
 800268a:	4b29      	ldr	r3, [pc, #164]	; (8002730 <HAL_ADC_ConfigChannel+0x250>)
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a28      	ldr	r2, [pc, #160]	; (8002734 <HAL_ADC_ConfigChannel+0x254>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d10f      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1d8>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b12      	cmp	r3, #18
 800269e:	d10b      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1d8>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a1d      	ldr	r2, [pc, #116]	; (8002734 <HAL_ADC_ConfigChannel+0x254>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d12b      	bne.n	800271a <HAL_ADC_ConfigChannel+0x23a>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <HAL_ADC_ConfigChannel+0x258>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <HAL_ADC_ConfigChannel+0x1f4>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b11      	cmp	r3, #17
 80026d2:	d122      	bne.n	800271a <HAL_ADC_ConfigChannel+0x23a>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a11      	ldr	r2, [pc, #68]	; (8002738 <HAL_ADC_ConfigChannel+0x258>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d111      	bne.n	800271a <HAL_ADC_ConfigChannel+0x23a>
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_ADC_ConfigChannel+0x25c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a11      	ldr	r2, [pc, #68]	; (8002740 <HAL_ADC_ConfigChannel+0x260>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	0c9a      	lsrs	r2, r3, #18
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	e002      	b.n	8002714 <HAL_ADC_ConfigChannel+0x234>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3b01      	subs	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f9      	bne.n	800270e <HAL_ADC_ConfigChannel+0x22e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002722:	2300      	movs	r3, #0
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	40012300 	.word	0x40012300
 8002734:	40012000 	.word	0x40012000
 8002738:	10000012 	.word	0x10000012
 800273c:	20000024 	.word	0x20000024
 8002740:	431bde83 	.word	0x431bde83

08002744 <ADC_Init>:
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	4b79      	ldr	r3, [pc, #484]	; (8002934 <ADC_Init+0x1f0>)
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	431a      	orrs	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	021a      	lsls	r2, r3, #8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6899      	ldr	r1, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	4a58      	ldr	r2, [pc, #352]	; (8002938 <ADC_Init+0x1f4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d022      	beq.n	8002822 <ADC_Init+0xde>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6899      	ldr	r1, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	e00f      	b.n	8002842 <ADC_Init+0xfe>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002830:	609a      	str	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0202 	bic.w	r2, r2, #2
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6899      	ldr	r1, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7e1b      	ldrb	r3, [r3, #24]
 800285c:	005a      	lsls	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <ADC_Init+0x164>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6859      	ldr	r1, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	3b01      	subs	r3, #1
 800289c:	035a      	lsls	r2, r3, #13
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	e007      	b.n	80028b8 <ADC_Init+0x174>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	051a      	lsls	r2, r3, #20
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6899      	ldr	r1, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028fa:	025a      	lsls	r2, r3, #9
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	029a      	lsls	r2, r3, #10
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	40012300 	.word	0x40012300
 8002938:	0f000001 	.word	0x0f000001

0800293c <__NVIC_SetPriorityGrouping>:
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	021a      	lsls	r2, r3, #8
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4313      	orrs	r3, r2
 8002964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4a04      	ldr	r2, [pc, #16]	; (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	60d3      	str	r3, [r2, #12]
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_GetPriorityGrouping>:
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <__NVIC_GetPriorityGrouping+0x18>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	0a1b      	lsrs	r3, r3, #8
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_EnableIRQ>:
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	db0b      	blt.n	80029ca <__NVIC_EnableIRQ+0x2a>
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4907      	ldr	r1, [pc, #28]	; (80029d8 <__NVIC_EnableIRQ+0x38>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2001      	movs	r0, #1
 80029c2:	fa00 f202 	lsl.w	r2, r0, r2
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000e100 	.word	0xe000e100

080029dc <__NVIC_SetPriority>:
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	db0a      	blt.n	8002a06 <__NVIC_SetPriority+0x2a>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	490c      	ldr	r1, [pc, #48]	; (8002a28 <__NVIC_SetPriority+0x4c>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	440b      	add	r3, r1
 8002a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002a04:	e00a      	b.n	8002a1c <__NVIC_SetPriority+0x40>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4908      	ldr	r1, [pc, #32]	; (8002a2c <__NVIC_SetPriority+0x50>)
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	3b04      	subs	r3, #4
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	440b      	add	r3, r1
 8002a1a:	761a      	strb	r2, [r3, #24]
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000e100 	.word	0xe000e100
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <NVIC_EncodePriority>:
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	; 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f1c3 0307 	rsb	r3, r3, #7
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	bf28      	it	cs
 8002a4e:	2304      	movcs	r3, #4
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d902      	bls.n	8002a60 <NVIC_EncodePriority+0x30>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3b03      	subs	r3, #3
 8002a5e:	e000      	b.n	8002a62 <NVIC_EncodePriority+0x32>
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	401a      	ands	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	409a      	lsls	r2, r3
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43d9      	mvns	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	400b      	ands	r3, r1
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3724      	adds	r7, #36	; 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <SysTick_Config>:
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa8:	d301      	bcc.n	8002aae <SysTick_Config+0x16>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00f      	b.n	8002ace <SysTick_Config+0x36>
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <SysTick_Config+0x40>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	6053      	str	r3, [r2, #4]
 8002ab6:	210f      	movs	r1, #15
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	f7ff ff8e 	bl	80029dc <__NVIC_SetPriority>
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <SysTick_Config+0x40>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <SysTick_Config+0x40>)
 8002ac8:	2207      	movs	r2, #7
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	2300      	movs	r3, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	e000e010 	.word	0xe000e010

08002adc <HAL_NVIC_SetPriorityGrouping>:
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ff29 	bl	800293c <__NVIC_SetPriorityGrouping>
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_SetPriority>:
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b086      	sub	sp, #24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	f7ff ff3e 	bl	8002984 <__NVIC_GetPriorityGrouping>
 8002b08:	6178      	str	r0, [r7, #20]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	6978      	ldr	r0, [r7, #20]
 8002b10:	f7ff ff8e 	bl	8002a30 <NVIC_EncodePriority>
 8002b14:	4602      	mov	r2, r0
 8002b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff5d 	bl	80029dc <__NVIC_SetPriority>
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_NVIC_EnableIRQ>:
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	71fb      	strb	r3, [r7, #7]
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff31 	bl	80029a0 <__NVIC_EnableIRQ>
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_SYSTICK_Config>:
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffa2 	bl	8002a98 <SysTick_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_DMA_Abort_IT>:
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d004      	beq.n	8002b7c <HAL_DMA_Abort_IT+0x1e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e00c      	b.n	8002b96 <HAL_DMA_Abort_IT+0x38>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2205      	movs	r2, #5
 8002b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_DMA_GetState>:
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_GPIO_Init>:
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e159      	b.n	8002e90 <HAL_GPIO_Init+0x2d0>
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f040 8148 	bne.w	8002e8a <HAL_GPIO_Init+0x2ca>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d005      	beq.n	8002c12 <HAL_GPIO_Init+0x52>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d130      	bne.n	8002c74 <HAL_GPIO_Init+0xb4>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 0201 	and.w	r2, r3, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d017      	beq.n	8002cb0 <HAL_GPIO_Init+0xf0>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	60da      	str	r2, [r3, #12]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d123      	bne.n	8002d04 <HAL_GPIO_Init+0x144>
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	08da      	lsrs	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3208      	adds	r2, #8
 8002cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	08da      	lsrs	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3208      	adds	r2, #8
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0203 	and.w	r2, r3, #3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80a2 	beq.w	8002e8a <HAL_GPIO_Init+0x2ca>
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b57      	ldr	r3, [pc, #348]	; (8002ea8 <HAL_GPIO_Init+0x2e8>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	4a56      	ldr	r2, [pc, #344]	; (8002ea8 <HAL_GPIO_Init+0x2e8>)
 8002d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d54:	6453      	str	r3, [r2, #68]	; 0x44
 8002d56:	4b54      	ldr	r3, [pc, #336]	; (8002ea8 <HAL_GPIO_Init+0x2e8>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a52      	ldr	r2, [pc, #328]	; (8002eac <HAL_GPIO_Init+0x2ec>)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	220f      	movs	r2, #15
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a49      	ldr	r2, [pc, #292]	; (8002eb0 <HAL_GPIO_Init+0x2f0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d019      	beq.n	8002dc2 <HAL_GPIO_Init+0x202>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a48      	ldr	r2, [pc, #288]	; (8002eb4 <HAL_GPIO_Init+0x2f4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_GPIO_Init+0x1fe>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a47      	ldr	r2, [pc, #284]	; (8002eb8 <HAL_GPIO_Init+0x2f8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00d      	beq.n	8002dba <HAL_GPIO_Init+0x1fa>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a46      	ldr	r2, [pc, #280]	; (8002ebc <HAL_GPIO_Init+0x2fc>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <HAL_GPIO_Init+0x1f6>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a45      	ldr	r2, [pc, #276]	; (8002ec0 <HAL_GPIO_Init+0x300>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_GPIO_Init+0x1f2>
 8002dae:	2304      	movs	r3, #4
 8002db0:	e008      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002db2:	2307      	movs	r3, #7
 8002db4:	e006      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002db6:	2303      	movs	r3, #3
 8002db8:	e004      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e002      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	f002 0203 	and.w	r2, r2, #3
 8002dca:	0092      	lsls	r2, r2, #2
 8002dcc:	4093      	lsls	r3, r2
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
 8002dd4:	4935      	ldr	r1, [pc, #212]	; (8002eac <HAL_GPIO_Init+0x2ec>)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	3302      	adds	r3, #2
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002de2:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_Init+0x246>
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	4a2f      	ldr	r2, [pc, #188]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	6093      	str	r3, [r2, #8]
 8002e0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x270>
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	4a24      	ldr	r2, [pc, #144]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	60d3      	str	r3, [r2, #12]
 8002e36:	4b23      	ldr	r3, [pc, #140]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_Init+0x29a>
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	4a1a      	ldr	r2, [pc, #104]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	6053      	str	r3, [r2, #4]
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x2c4>
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	4a0f      	ldr	r2, [pc, #60]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	f67f aea2 	bls.w	8002bdc <HAL_GPIO_Init+0x1c>
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40013800 	.word	0x40013800
 8002eb0:	40020000 	.word	0x40020000
 8002eb4:	40020400 	.word	0x40020400
 8002eb8:	40020800 	.word	0x40020800
 8002ebc:	40020c00 	.word	0x40020c00
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40013c00 	.word	0x40013c00

08002ec8 <HAL_GPIO_WritePin>:
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	707b      	strb	r3, [r7, #1]
 8002ed8:	787b      	ldrb	r3, [r7, #1]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_WritePin+0x1e>
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	619a      	str	r2, [r3, #24]
 8002ee4:	e003      	b.n	8002eee <HAL_GPIO_WritePin+0x26>
 8002ee6:	887b      	ldrh	r3, [r7, #2]
 8002ee8:	041a      	lsls	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	619a      	str	r2, [r3, #24]
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <HAL_I2C_Init>:
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_I2C_Init+0x12>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e12b      	b.n	8003166 <HAL_I2C_Init+0x26a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_I2C_Init+0x2c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fe fcc4 	bl	80018b0 <HAL_I2C_MspInit>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	; 0x24
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	f003 fc70 	bl	8006844 <HAL_RCC_GetPCLK1Freq>
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4a81      	ldr	r2, [pc, #516]	; (8003170 <HAL_I2C_Init+0x274>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d807      	bhi.n	8002f80 <HAL_I2C_Init+0x84>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4a80      	ldr	r2, [pc, #512]	; (8003174 <HAL_I2C_Init+0x278>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	bf94      	ite	ls
 8002f78:	2301      	movls	r3, #1
 8002f7a:	2300      	movhi	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e006      	b.n	8002f8e <HAL_I2C_Init+0x92>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a7d      	ldr	r2, [pc, #500]	; (8003178 <HAL_I2C_Init+0x27c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	bf94      	ite	ls
 8002f88:	2301      	movls	r3, #1
 8002f8a:	2300      	movhi	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_Init+0x9a>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0e7      	b.n	8003166 <HAL_I2C_Init+0x26a>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a78      	ldr	r2, [pc, #480]	; (800317c <HAL_I2C_Init+0x280>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0c9b      	lsrs	r3, r3, #18
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a6a      	ldr	r2, [pc, #424]	; (8003170 <HAL_I2C_Init+0x274>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d802      	bhi.n	8002fd0 <HAL_I2C_Init+0xd4>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	e009      	b.n	8002fe4 <HAL_I2C_Init+0xe8>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	4a69      	ldr	r2, [pc, #420]	; (8003180 <HAL_I2C_Init+0x284>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6213      	str	r3, [r2, #32]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ff6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	495c      	ldr	r1, [pc, #368]	; (8003170 <HAL_I2C_Init+0x274>)
 8003000:	428b      	cmp	r3, r1
 8003002:	d819      	bhi.n	8003038 <HAL_I2C_Init+0x13c>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1e59      	subs	r1, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003012:	1c59      	adds	r1, r3, #1
 8003014:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003018:	400b      	ands	r3, r1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_I2C_Init+0x138>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1e59      	subs	r1, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fbb1 f3f3 	udiv	r3, r1, r3
 800302c:	3301      	adds	r3, #1
 800302e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003032:	e051      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 8003034:	2304      	movs	r3, #4
 8003036:	e04f      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d111      	bne.n	8003064 <HAL_I2C_Init+0x168>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	440b      	add	r3, r1
 800304e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003052:	3301      	adds	r3, #1
 8003054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e012      	b.n	800308a <HAL_I2C_Init+0x18e>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1e58      	subs	r0, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	0099      	lsls	r1, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	fbb0 f3f3 	udiv	r3, r0, r3
 800307a:	3301      	adds	r3, #1
 800307c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Init+0x196>
 800308e:	2301      	movs	r3, #1
 8003090:	e022      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10e      	bne.n	80030b8 <HAL_I2C_Init+0x1bc>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1e58      	subs	r0, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	440b      	add	r3, r1
 80030a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ac:	3301      	adds	r3, #1
 80030ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b6:	e00f      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e58      	subs	r0, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	0099      	lsls	r1, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ce:	3301      	adds	r3, #1
 80030d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	6809      	ldr	r1, [r1, #0]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61cb      	str	r3, [r1, #28]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6911      	ldr	r1, [r2, #16]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68d2      	ldr	r2, [r2, #12]
 8003112:	4311      	orrs	r1, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	430b      	orrs	r3, r1
 800311a:	6093      	str	r3, [r2, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003164:	2300      	movs	r3, #0
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	000186a0 	.word	0x000186a0
 8003174:	001e847f 	.word	0x001e847f
 8003178:	003d08ff 	.word	0x003d08ff
 800317c:	431bde83 	.word	0x431bde83
 8003180:	10624dd3 	.word	0x10624dd3

08003184 <HAL_I2C_EV_IRQHandler>:
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	2300      	movs	r3, #0
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ac:	73bb      	strb	r3, [r7, #14]
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d003      	beq.n	80031bc <HAL_I2C_EV_IRQHandler+0x38>
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b40      	cmp	r3, #64	; 0x40
 80031b8:	f040 80b1 	bne.w	800331e <HAL_I2C_EV_IRQHandler+0x19a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10d      	bne.n	80031f2 <HAL_I2C_EV_IRQHandler+0x6e>
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80031dc:	d003      	beq.n	80031e6 <HAL_I2C_EV_IRQHandler+0x62>
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80031e4:	d101      	bne.n	80031ea <HAL_I2C_EV_IRQHandler+0x66>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_I2C_EV_IRQHandler+0x68>
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	f000 8114 	beq.w	800341a <HAL_I2C_EV_IRQHandler+0x296>
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00b      	beq.n	8003214 <HAL_I2C_EV_IRQHandler+0x90>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003202:	2b00      	cmp	r3, #0
 8003204:	d006      	beq.n	8003214 <HAL_I2C_EV_IRQHandler+0x90>
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f001 fc54 	bl	8004ab4 <I2C_ConvertOtherXferOptions>
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fd5e 	bl	8003cce <I2C_Master_SB>
 8003212:	e083      	b.n	800331c <HAL_I2C_EV_IRQHandler+0x198>
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <HAL_I2C_EV_IRQHandler+0xac>
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_I2C_EV_IRQHandler+0xac>
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fdd6 	bl	8003dda <I2C_Master_ADD10>
 800322e:	e075      	b.n	800331c <HAL_I2C_EV_IRQHandler+0x198>
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_I2C_EV_IRQHandler+0xc8>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_I2C_EV_IRQHandler+0xc8>
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fdf2 	bl	8003e2e <I2C_Master_ADDR>
 800324a:	e067      	b.n	800331c <HAL_I2C_EV_IRQHandler+0x198>
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d036      	beq.n	80032c4 <HAL_I2C_EV_IRQHandler+0x140>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003264:	f000 80db 	beq.w	800341e <HAL_I2C_EV_IRQHandler+0x29a>
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <HAL_I2C_EV_IRQHandler+0x10a>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_I2C_EV_IRQHandler+0x10a>
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d103      	bne.n	800328e <HAL_I2C_EV_IRQHandler+0x10a>
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f9d6 	bl	8003638 <I2C_MasterTransmit_TXE>
 800328c:	e046      	b.n	800331c <HAL_I2C_EV_IRQHandler+0x198>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80c2 	beq.w	800341e <HAL_I2C_EV_IRQHandler+0x29a>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80bc 	beq.w	800341e <HAL_I2C_EV_IRQHandler+0x29a>
 80032a6:	7bbb      	ldrb	r3, [r7, #14]
 80032a8:	2b21      	cmp	r3, #33	; 0x21
 80032aa:	d103      	bne.n	80032b4 <HAL_I2C_EV_IRQHandler+0x130>
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fa5f 	bl	8003770 <I2C_MasterTransmit_BTF>
 80032b2:	e0b4      	b.n	800341e <HAL_I2C_EV_IRQHandler+0x29a>
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	f040 80b1 	bne.w	800341e <HAL_I2C_EV_IRQHandler+0x29a>
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 facd 	bl	800385c <I2C_MemoryTransmit_TXE_BTF>
 80032c2:	e0ac      	b.n	800341e <HAL_I2C_EV_IRQHandler+0x29a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d2:	f000 80a4 	beq.w	800341e <HAL_I2C_EV_IRQHandler+0x29a>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <HAL_I2C_EV_IRQHandler+0x178>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d008      	beq.n	80032fc <HAL_I2C_EV_IRQHandler+0x178>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d103      	bne.n	80032fc <HAL_I2C_EV_IRQHandler+0x178>
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fb45 	bl	8003984 <I2C_MasterReceive_RXNE>
 80032fa:	e00f      	b.n	800331c <HAL_I2C_EV_IRQHandler+0x198>
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 808b 	beq.w	800341e <HAL_I2C_EV_IRQHandler+0x29a>
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8085 	beq.w	800341e <HAL_I2C_EV_IRQHandler+0x29a>
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fbf0 	bl	8003afa <I2C_MasterReceive_BTF>
 800331a:	e080      	b.n	800341e <HAL_I2C_EV_IRQHandler+0x29a>
 800331c:	e07f      	b.n	800341e <HAL_I2C_EV_IRQHandler+0x29a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d004      	beq.n	8003330 <HAL_I2C_EV_IRQHandler+0x1ac>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	e007      	b.n	8003340 <HAL_I2C_EV_IRQHandler+0x1bc>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	61fb      	str	r3, [r7, #28]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d011      	beq.n	800336e <HAL_I2C_EV_IRQHandler+0x1ea>
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00c      	beq.n	800336e <HAL_I2C_EV_IRQHandler+0x1ea>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_I2C_EV_IRQHandler+0x1e0>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	69b9      	ldr	r1, [r7, #24]
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 ffb0 	bl	80042cc <I2C_Slave_ADDR>
 800336c:	e05a      	b.n	8003424 <HAL_I2C_EV_IRQHandler+0x2a0>
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_I2C_EV_IRQHandler+0x206>
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_I2C_EV_IRQHandler+0x206>
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 ffea 	bl	800435c <I2C_Slave_STOPF>
 8003388:	e04c      	b.n	8003424 <HAL_I2C_EV_IRQHandler+0x2a0>
 800338a:	7bbb      	ldrb	r3, [r7, #14]
 800338c:	2b21      	cmp	r3, #33	; 0x21
 800338e:	d002      	beq.n	8003396 <HAL_I2C_EV_IRQHandler+0x212>
 8003390:	7bbb      	ldrb	r3, [r7, #14]
 8003392:	2b29      	cmp	r3, #41	; 0x29
 8003394:	d120      	bne.n	80033d8 <HAL_I2C_EV_IRQHandler+0x254>
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <HAL_I2C_EV_IRQHandler+0x238>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_I2C_EV_IRQHandler+0x238>
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <HAL_I2C_EV_IRQHandler+0x238>
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fecb 	bl	8004150 <I2C_SlaveTransmit_TXE>
 80033ba:	e032      	b.n	8003422 <HAL_I2C_EV_IRQHandler+0x29e>
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d02d      	beq.n	8003422 <HAL_I2C_EV_IRQHandler+0x29e>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d028      	beq.n	8003422 <HAL_I2C_EV_IRQHandler+0x29e>
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fefa 	bl	80041ca <I2C_SlaveTransmit_BTF>
 80033d6:	e024      	b.n	8003422 <HAL_I2C_EV_IRQHandler+0x29e>
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <HAL_I2C_EV_IRQHandler+0x27a>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_I2C_EV_IRQHandler+0x27a>
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <HAL_I2C_EV_IRQHandler+0x27a>
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 ff08 	bl	800420c <I2C_SlaveReceive_RXNE>
 80033fc:	e012      	b.n	8003424 <HAL_I2C_EV_IRQHandler+0x2a0>
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 ff38 	bl	8004288 <I2C_SlaveReceive_BTF>
 8003418:	e004      	b.n	8003424 <HAL_I2C_EV_IRQHandler+0x2a0>
 800341a:	bf00      	nop
 800341c:	e002      	b.n	8003424 <HAL_I2C_EV_IRQHandler+0x2a0>
 800341e:	bf00      	nop
 8003420:	e000      	b.n	8003424 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003422:	bf00      	nop
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_I2C_ER_IRQHandler>:
 800342a:	b580      	push	{r7, lr}
 800342c:	b08a      	sub	sp, #40	; 0x28
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	623b      	str	r3, [r7, #32]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	2300      	movs	r3, #0
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800344c:	76fb      	strb	r3, [r7, #27]
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00d      	beq.n	8003474 <HAL_I2C_ER_IRQHandler+0x4a>
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <HAL_I2C_ER_IRQHandler+0x4a>
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003472:	615a      	str	r2, [r3, #20]
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00d      	beq.n	800349a <HAL_I2C_ER_IRQHandler+0x70>
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_I2C_ER_IRQHandler+0x70>
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	f043 0302 	orr.w	r3, r3, #2
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003498:	615a      	str	r2, [r3, #20]
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d03e      	beq.n	8003522 <HAL_I2C_ER_IRQHandler+0xf8>
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d039      	beq.n	8003522 <HAL_I2C_ER_IRQHandler+0xf8>
 80034ae:	7efb      	ldrb	r3, [r7, #27]
 80034b0:	76bb      	strb	r3, [r7, #26]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	74fb      	strb	r3, [r7, #19]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	7ebb      	ldrb	r3, [r7, #26]
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d112      	bne.n	80034f4 <HAL_I2C_ER_IRQHandler+0xca>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10f      	bne.n	80034f4 <HAL_I2C_ER_IRQHandler+0xca>
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	2b21      	cmp	r3, #33	; 0x21
 80034d8:	d008      	beq.n	80034ec <HAL_I2C_ER_IRQHandler+0xc2>
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	2b29      	cmp	r3, #41	; 0x29
 80034de:	d005      	beq.n	80034ec <HAL_I2C_ER_IRQHandler+0xc2>
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	2b28      	cmp	r3, #40	; 0x28
 80034e4:	d106      	bne.n	80034f4 <HAL_I2C_ER_IRQHandler+0xca>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b21      	cmp	r3, #33	; 0x21
 80034ea:	d103      	bne.n	80034f4 <HAL_I2C_ER_IRQHandler+0xca>
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f001 f865 	bl	80045bc <I2C_Slave_AF>
 80034f2:	e016      	b.n	8003522 <HAL_I2C_ER_IRQHandler+0xf8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034fc:	615a      	str	r2, [r3, #20]
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
 8003506:	7efb      	ldrb	r3, [r7, #27]
 8003508:	2b10      	cmp	r3, #16
 800350a:	d002      	beq.n	8003512 <HAL_I2C_ER_IRQHandler+0xe8>
 800350c:	7efb      	ldrb	r3, [r7, #27]
 800350e:	2b40      	cmp	r3, #64	; 0x40
 8003510:	d107      	bne.n	8003522 <HAL_I2C_ER_IRQHandler+0xf8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <HAL_I2C_ER_IRQHandler+0x11e>
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_I2C_ER_IRQHandler+0x11e>
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	f043 0308 	orr.w	r3, r3, #8
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003546:	615a      	str	r2, [r3, #20]
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_I2C_ER_IRQHandler+0x136>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f001 f89e 	bl	800469c <I2C_ITError>
 8003560:	bf00      	nop
 8003562:	3728      	adds	r7, #40	; 0x28
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_I2C_MasterTxCpltCallback>:
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_I2C_MasterRxCpltCallback>:
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_I2C_SlaveTxCpltCallback>:
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_I2C_SlaveRxCpltCallback>:
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_I2C_AddrCallback>:
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	70fb      	strb	r3, [r7, #3]
 80035c4:	4613      	mov	r3, r2
 80035c6:	803b      	strh	r3, [r7, #0]
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_I2C_ListenCpltCallback>:
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_I2C_MemTxCpltCallback>:
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_I2C_MemRxCpltCallback>:
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_I2C_ErrorCallback>:
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_I2C_AbortCpltCallback>:
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <I2C_MasterTransmit_TXE>:
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003646:	73fb      	strb	r3, [r7, #15]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800364e:	73bb      	strb	r3, [r7, #14]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365a:	2b00      	cmp	r3, #0
 800365c:	d150      	bne.n	8003700 <I2C_MasterTransmit_TXE+0xc8>
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b21      	cmp	r3, #33	; 0x21
 8003662:	d14d      	bne.n	8003700 <I2C_MasterTransmit_TXE+0xc8>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b08      	cmp	r3, #8
 8003668:	d01d      	beq.n	80036a6 <I2C_MasterTransmit_TXE+0x6e>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b20      	cmp	r3, #32
 800366e:	d01a      	beq.n	80036a6 <I2C_MasterTransmit_TXE+0x6e>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003676:	d016      	beq.n	80036a6 <I2C_MasterTransmit_TXE+0x6e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003686:	605a      	str	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2211      	movs	r2, #17
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff ff62 	bl	8003568 <HAL_I2C_MasterTxCpltCallback>
 80036a4:	e060      	b.n	8003768 <I2C_MasterTransmit_TXE+0x130>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b40      	cmp	r3, #64	; 0x40
 80036de:	d107      	bne.n	80036f0 <I2C_MasterTransmit_TXE+0xb8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff7d 	bl	80035e8 <HAL_I2C_MemTxCpltCallback>
 80036ee:	e03b      	b.n	8003768 <I2C_MasterTransmit_TXE+0x130>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ff35 	bl	8003568 <HAL_I2C_MasterTxCpltCallback>
 80036fe:	e033      	b.n	8003768 <I2C_MasterTransmit_TXE+0x130>
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	2b21      	cmp	r3, #33	; 0x21
 8003704:	d005      	beq.n	8003712 <I2C_MasterTransmit_TXE+0xda>
 8003706:	7bbb      	ldrb	r3, [r7, #14]
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	d12d      	bne.n	8003768 <I2C_MasterTransmit_TXE+0x130>
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	2b22      	cmp	r3, #34	; 0x22
 8003710:	d12a      	bne.n	8003768 <I2C_MasterTransmit_TXE+0x130>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d108      	bne.n	800372e <I2C_MasterTransmit_TXE+0xf6>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	e01c      	b.n	8003768 <I2C_MasterTransmit_TXE+0x130>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d103      	bne.n	8003742 <I2C_MasterTransmit_TXE+0x10a>
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f88e 	bl	800385c <I2C_MemoryTransmit_TXE_BTF>
 8003740:	e012      	b.n	8003768 <I2C_MasterTransmit_TXE+0x130>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	781a      	ldrb	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	611a      	str	r2, [r3, #16]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	625a      	str	r2, [r3, #36]	; 0x24
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003766:	e7ff      	b.n	8003768 <I2C_MasterTransmit_TXE+0x130>
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <I2C_MasterTransmit_BTF>:
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b21      	cmp	r3, #33	; 0x21
 8003788:	d164      	bne.n	8003854 <I2C_MasterTransmit_BTF+0xe4>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d012      	beq.n	80037ba <I2C_MasterTransmit_BTF+0x4a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	781a      	ldrb	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	611a      	str	r2, [r3, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037b8:	e04c      	b.n	8003854 <I2C_MasterTransmit_BTF+0xe4>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d01d      	beq.n	80037fc <I2C_MasterTransmit_BTF+0x8c>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d01a      	beq.n	80037fc <I2C_MasterTransmit_BTF+0x8c>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037cc:	d016      	beq.n	80037fc <I2C_MasterTransmit_BTF+0x8c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2211      	movs	r2, #17
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff feb7 	bl	8003568 <HAL_I2C_MasterTxCpltCallback>
 80037fa:	e02b      	b.n	8003854 <I2C_MasterTransmit_BTF+0xe4>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b40      	cmp	r3, #64	; 0x40
 8003834:	d107      	bne.n	8003846 <I2C_MasterTransmit_BTF+0xd6>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff fed2 	bl	80035e8 <HAL_I2C_MemTxCpltCallback>
 8003844:	e006      	b.n	8003854 <I2C_MasterTransmit_BTF+0xe4>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fe8a 	bl	8003568 <HAL_I2C_MasterTxCpltCallback>
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2C_MemoryTransmit_TXE_BTF>:
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003870:	2b00      	cmp	r3, #0
 8003872:	d11d      	bne.n	80038b0 <I2C_MemoryTransmit_TXE_BTF+0x54>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d10b      	bne.n	8003894 <I2C_MemoryTransmit_TXE_BTF+0x38>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003880:	b2da      	uxtb	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	611a      	str	r2, [r3, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388c:	1c9a      	adds	r2, r3, #2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	651a      	str	r2, [r3, #80]	; 0x50
 8003892:	e073      	b.n	800397c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003898:	b29b      	uxth	r3, r3
 800389a:	121b      	asrs	r3, r3, #8
 800389c:	b2da      	uxtb	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	611a      	str	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	651a      	str	r2, [r3, #80]	; 0x50
 80038ae:	e065      	b.n	800397c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d10b      	bne.n	80038d0 <I2C_MemoryTransmit_TXE_BTF+0x74>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	611a      	str	r2, [r3, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	651a      	str	r2, [r3, #80]	; 0x50
 80038ce:	e055      	b.n	800397c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d151      	bne.n	800397c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b22      	cmp	r3, #34	; 0x22
 80038dc:	d10d      	bne.n	80038fa <I2C_MemoryTransmit_TXE_BTF+0x9e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	651a      	str	r2, [r3, #80]	; 0x50
 80038f8:	e040      	b.n	800397c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d015      	beq.n	8003930 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b21      	cmp	r3, #33	; 0x21
 8003908:	d112      	bne.n	8003930 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	781a      	ldrb	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	611a      	str	r2, [r3, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	625a      	str	r2, [r3, #36]	; 0x24
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800392e:	e025      	b.n	800397c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d120      	bne.n	800397c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b21      	cmp	r3, #33	; 0x21
 800393e:	d11d      	bne.n	800397c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fe36 	bl	80035e8 <HAL_I2C_MemTxCpltCallback>
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <I2C_MasterReceive_RXNE>:
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b22      	cmp	r3, #34	; 0x22
 8003996:	f040 80ac 	bne.w	8003af2 <I2C_MasterReceive_RXNE+0x16e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d921      	bls.n	80039ec <I2C_MasterReceive_RXNE+0x68>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	625a      	str	r2, [r3, #36]	; 0x24
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	f040 808c 	bne.w	8003af2 <I2C_MasterReceive_RXNE+0x16e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	e082      	b.n	8003af2 <I2C_MasterReceive_RXNE+0x16e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d075      	beq.n	8003ae0 <I2C_MasterReceive_RXNE+0x15c>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d002      	beq.n	8003a00 <I2C_MasterReceive_RXNE+0x7c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d16f      	bne.n	8003ae0 <I2C_MasterReceive_RXNE+0x15c>
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f001 f825 	bl	8004a50 <I2C_WaitOnSTOPRequestThroughIT>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d142      	bne.n	8003a92 <I2C_MasterReceive_RXNE+0x10e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a2a:	605a      	str	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d10a      	bne.n	8003a7c <I2C_MasterReceive_RXNE+0xf8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff fdc1 	bl	80035fc <HAL_I2C_MemRxCpltCallback>
 8003a7a:	e03a      	b.n	8003af2 <I2C_MasterReceive_RXNE+0x16e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2212      	movs	r2, #18
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff fd76 	bl	800357c <HAL_I2C_MasterRxCpltCallback>
 8003a90:	e02f      	b.n	8003af2 <I2C_MasterReceive_RXNE+0x16e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff fd99 	bl	8003610 <HAL_I2C_ErrorCallback>
 8003ade:	e008      	b.n	8003af2 <I2C_MasterReceive_RXNE+0x16e>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aee:	605a      	str	r2, [r3, #4]
 8003af0:	e7ff      	b.n	8003af2 <I2C_MasterReceive_RXNE+0x16e>
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <I2C_MasterReceive_BTF>:
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d11b      	bne.n	8003b4a <I2C_MasterReceive_BTF+0x50>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b48:	e0bd      	b.n	8003cc6 <I2C_MasterReceive_BTF+0x1cc>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d129      	bne.n	8003ba8 <I2C_MasterReceive_BTF+0xae>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d00a      	beq.n	8003b80 <I2C_MasterReceive_BTF+0x86>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d007      	beq.n	8003b80 <I2C_MasterReceive_BTF+0x86>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ba6:	e08e      	b.n	8003cc6 <I2C_MasterReceive_BTF+0x1cc>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d176      	bne.n	8003ca0 <I2C_MasterReceive_BTF+0x1a6>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d002      	beq.n	8003bbe <I2C_MasterReceive_BTF+0xc4>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d108      	bne.n	8003bd0 <I2C_MasterReceive_BTF+0xd6>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e019      	b.n	8003c04 <I2C_MasterReceive_BTF+0x10a>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d002      	beq.n	8003bdc <I2C_MasterReceive_BTF+0xe2>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d108      	bne.n	8003bee <I2C_MasterReceive_BTF+0xf4>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e00a      	b.n	8003c04 <I2C_MasterReceive_BTF+0x10a>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d007      	beq.n	8003c04 <I2C_MasterReceive_BTF+0x10a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c5e:	605a      	str	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d10a      	bne.n	8003c8a <I2C_MasterReceive_BTF+0x190>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fcba 	bl	80035fc <HAL_I2C_MemRxCpltCallback>
 8003c88:	e01d      	b.n	8003cc6 <I2C_MasterReceive_BTF+0x1cc>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2212      	movs	r2, #18
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff fc6f 	bl	800357c <HAL_I2C_MasterRxCpltCallback>
 8003c9e:	e012      	b.n	8003cc6 <I2C_MasterReceive_BTF+0x1cc>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <I2C_Master_SB>:
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d117      	bne.n	8003d12 <I2C_Master_SB+0x44>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <I2C_Master_SB+0x30>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cfa:	611a      	str	r2, [r3, #16]
 8003cfc:	e067      	b.n	8003dce <I2C_Master_SB+0x100>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	611a      	str	r2, [r3, #16]
 8003d10:	e05d      	b.n	8003dce <I2C_Master_SB+0x100>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d1a:	d133      	bne.n	8003d84 <I2C_Master_SB+0xb6>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b21      	cmp	r3, #33	; 0x21
 8003d26:	d109      	bne.n	8003d3c <I2C_Master_SB+0x6e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d38:	611a      	str	r2, [r3, #16]
 8003d3a:	e008      	b.n	8003d4e <I2C_Master_SB+0x80>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	611a      	str	r2, [r3, #16]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d004      	beq.n	8003d60 <I2C_Master_SB+0x92>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d108      	bne.n	8003d72 <I2C_Master_SB+0xa4>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d032      	beq.n	8003dce <I2C_Master_SB+0x100>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d02d      	beq.n	8003dce <I2C_Master_SB+0x100>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	e024      	b.n	8003dce <I2C_Master_SB+0x100>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10e      	bne.n	8003daa <I2C_Master_SB+0xdc>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	11db      	asrs	r3, r3, #7
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f003 0306 	and.w	r3, r3, #6
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	f063 030f 	orn	r3, r3, #15
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	611a      	str	r2, [r3, #16]
 8003da8:	e011      	b.n	8003dce <I2C_Master_SB+0x100>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d10d      	bne.n	8003dce <I2C_Master_SB+0x100>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	11db      	asrs	r3, r3, #7
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f003 0306 	and.w	r3, r3, #6
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f063 030e 	orn	r3, r3, #14
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	611a      	str	r2, [r3, #16]
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <I2C_Master_ADD10>:
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	611a      	str	r2, [r3, #16]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d004      	beq.n	8003e00 <I2C_Master_ADD10+0x26>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d108      	bne.n	8003e12 <I2C_Master_ADD10+0x38>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00c      	beq.n	8003e22 <I2C_Master_ADD10+0x48>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d007      	beq.n	8003e22 <I2C_Master_ADD10+0x48>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <I2C_Master_ADDR>:
 8003e2e:	b480      	push	{r7}
 8003e30:	b091      	sub	sp, #68	; 0x44
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b22      	cmp	r3, #34	; 0x22
 8003e56:	f040 8169 	bne.w	800412c <I2C_Master_ADDR+0x2fe>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10f      	bne.n	8003e82 <I2C_Master_ADDR+0x54>
 8003e62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e66:	2b40      	cmp	r3, #64	; 0x40
 8003e68:	d10b      	bne.n	8003e82 <I2C_Master_ADDR+0x54>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	633b      	str	r3, [r7, #48]	; 0x30
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	e160      	b.n	8004144 <I2C_Master_ADDR+0x316>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d11d      	bne.n	8003ec6 <I2C_Master_ADDR+0x98>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e92:	d118      	bne.n	8003ec6 <I2C_Master_ADDR+0x98>
 8003e94:	2300      	movs	r3, #0
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	651a      	str	r2, [r3, #80]	; 0x50
 8003ec4:	e13e      	b.n	8004144 <I2C_Master_ADDR+0x316>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d113      	bne.n	8003ef8 <I2C_Master_ADDR+0xca>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e115      	b.n	8004124 <I2C_Master_ADDR+0x2f6>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	f040 808a 	bne.w	8004018 <I2C_Master_ADDR+0x1ea>
 8003f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f0a:	d137      	bne.n	8003f7c <I2C_Master_ADDR+0x14e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2a:	d113      	bne.n	8003f54 <I2C_Master_ADDR+0x126>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	e0e7      	b.n	8004124 <I2C_Master_ADDR+0x2f6>
 8003f54:	2300      	movs	r3, #0
 8003f56:	623b      	str	r3, [r7, #32]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	623b      	str	r3, [r7, #32]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	623b      	str	r3, [r7, #32]
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e0d3      	b.n	8004124 <I2C_Master_ADDR+0x2f6>
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d02e      	beq.n	8003fe0 <I2C_Master_ADDR+0x1b2>
 8003f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d02b      	beq.n	8003fe0 <I2C_Master_ADDR+0x1b2>
 8003f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8a:	2b12      	cmp	r3, #18
 8003f8c:	d102      	bne.n	8003f94 <I2C_Master_ADDR+0x166>
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d125      	bne.n	8003fe0 <I2C_Master_ADDR+0x1b2>
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d00e      	beq.n	8003fb8 <I2C_Master_ADDR+0x18a>
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d00b      	beq.n	8003fb8 <I2C_Master_ADDR+0x18a>
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa2:	2b10      	cmp	r3, #16
 8003fa4:	d008      	beq.n	8003fb8 <I2C_Master_ADDR+0x18a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e007      	b.n	8003fc8 <I2C_Master_ADDR+0x19a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	e0a1      	b.n	8004124 <I2C_Master_ADDR+0x2f6>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	61bb      	str	r3, [r7, #24]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	61bb      	str	r3, [r7, #24]
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	e085      	b.n	8004124 <I2C_Master_ADDR+0x2f6>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d14d      	bne.n	80040be <I2C_Master_ADDR+0x290>
 8004022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004024:	2b04      	cmp	r3, #4
 8004026:	d016      	beq.n	8004056 <I2C_Master_ADDR+0x228>
 8004028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402a:	2b02      	cmp	r3, #2
 800402c:	d013      	beq.n	8004056 <I2C_Master_ADDR+0x228>
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	2b10      	cmp	r3, #16
 8004032:	d010      	beq.n	8004056 <I2C_Master_ADDR+0x228>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e007      	b.n	8004066 <I2C_Master_ADDR+0x238>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004074:	d117      	bne.n	80040a6 <I2C_Master_ADDR+0x278>
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800407c:	d00b      	beq.n	8004096 <I2C_Master_ADDR+0x268>
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	2b01      	cmp	r3, #1
 8004082:	d008      	beq.n	8004096 <I2C_Master_ADDR+0x268>
 8004084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004086:	2b08      	cmp	r3, #8
 8004088:	d005      	beq.n	8004096 <I2C_Master_ADDR+0x268>
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	2b10      	cmp	r3, #16
 800408e:	d002      	beq.n	8004096 <I2C_Master_ADDR+0x268>
 8004090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004092:	2b20      	cmp	r3, #32
 8004094:	d107      	bne.n	80040a6 <I2C_Master_ADDR+0x278>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	e032      	b.n	8004124 <I2C_Master_ADDR+0x2f6>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040dc:	d117      	bne.n	800410e <I2C_Master_ADDR+0x2e0>
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040e4:	d00b      	beq.n	80040fe <I2C_Master_ADDR+0x2d0>
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d008      	beq.n	80040fe <I2C_Master_ADDR+0x2d0>
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d005      	beq.n	80040fe <I2C_Master_ADDR+0x2d0>
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d002      	beq.n	80040fe <I2C_Master_ADDR+0x2d0>
 80040f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d107      	bne.n	800410e <I2C_Master_ADDR+0x2e0>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	651a      	str	r2, [r3, #80]	; 0x50
 800412a:	e00b      	b.n	8004144 <I2C_Master_ADDR+0x316>
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	e7ff      	b.n	8004144 <I2C_Master_ADDR+0x316>
 8004144:	bf00      	nop
 8004146:	3744      	adds	r7, #68	; 0x44
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <I2C_SlaveTransmit_TXE>:
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d02b      	beq.n	80041c2 <I2C_SlaveTransmit_TXE+0x72>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	781a      	ldrb	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	611a      	str	r2, [r3, #16]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d114      	bne.n	80041c2 <I2C_SlaveTransmit_TXE+0x72>
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	2b29      	cmp	r3, #41	; 0x29
 800419c:	d111      	bne.n	80041c2 <I2C_SlaveTransmit_TXE+0x72>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2221      	movs	r2, #33	; 0x21
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2228      	movs	r2, #40	; 0x28
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff f9e7 	bl	8003590 <HAL_I2C_SlaveTxCpltCallback>
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <I2C_SlaveTransmit_BTF>:
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d011      	beq.n	8004200 <I2C_SlaveTransmit_BTF+0x36>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	611a      	str	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <I2C_SlaveReceive_RXNE>:
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d02c      	beq.n	8004280 <I2C_SlaveReceive_RXNE+0x74>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	625a      	str	r2, [r3, #36]	; 0x24
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d114      	bne.n	8004280 <I2C_SlaveReceive_RXNE+0x74>
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	2b2a      	cmp	r3, #42	; 0x2a
 800425a:	d111      	bne.n	8004280 <I2C_SlaveReceive_RXNE+0x74>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426a:	605a      	str	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2222      	movs	r2, #34	; 0x22
 8004270:	631a      	str	r2, [r3, #48]	; 0x30
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2228      	movs	r2, #40	; 0x28
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff f992 	bl	80035a4 <HAL_I2C_SlaveRxCpltCallback>
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2C_SlaveReceive_BTF>:
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d012      	beq.n	80042c0 <I2C_SlaveReceive_BTF+0x38>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <I2C_Slave_ADDR>:
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
 80042d6:	2300      	movs	r3, #0
 80042d8:	73fb      	strb	r3, [r7, #15]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042e6:	2b28      	cmp	r3, #40	; 0x28
 80042e8:	d125      	bne.n	8004336 <I2C_Slave_ADDR+0x6a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <I2C_Slave_ADDR+0x3c>
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <I2C_Slave_ADDR+0x4e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	81bb      	strh	r3, [r7, #12]
 8004318:	e002      	b.n	8004320 <I2C_Slave_ADDR+0x54>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	81bb      	strh	r3, [r7, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004328:	89ba      	ldrh	r2, [r7, #12]
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	4619      	mov	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff f942 	bl	80035b8 <HAL_I2C_AddrCallback>
 8004334:	e00e      	b.n	8004354 <I2C_Slave_ADDR+0x88>
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <I2C_Slave_STOPF>:
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436a:	73fb      	strb	r3, [r7, #15]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b8:	d172      	bne.n	80044a0 <I2C_Slave_STOPF+0x144>
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b22      	cmp	r3, #34	; 0x22
 80043be:	d002      	beq.n	80043c6 <I2C_Slave_STOPF+0x6a>
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b2a      	cmp	r3, #42	; 0x2a
 80043c4:	d135      	bne.n	8004432 <I2C_Slave_STOPF+0xd6>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <I2C_Slave_STOPF+0x8e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f043 0204 	orr.w	r2, r3, #4
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fbcf 	bl	8002ba2 <HAL_DMA_GetState>
 8004404:	4603      	mov	r3, r0
 8004406:	2b01      	cmp	r3, #1
 8004408:	d049      	beq.n	800449e <I2C_Slave_STOPF+0x142>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	4a69      	ldr	r2, [pc, #420]	; (80045b4 <I2C_Slave_STOPF+0x258>)
 8004410:	651a      	str	r2, [r3, #80]	; 0x50
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe fba1 	bl	8002b5e <HAL_DMA_Abort_IT>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03d      	beq.n	800449e <I2C_Slave_STOPF+0x142>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800442c:	4610      	mov	r0, r2
 800442e:	4798      	blx	r3
 8004430:	e035      	b.n	800449e <I2C_Slave_STOPF+0x142>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	b29a      	uxth	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <I2C_Slave_STOPF+0xfa>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f043 0204 	orr.w	r2, r3, #4
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe fb99 	bl	8002ba2 <HAL_DMA_GetState>
 8004470:	4603      	mov	r3, r0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d014      	beq.n	80044a0 <I2C_Slave_STOPF+0x144>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447a:	4a4e      	ldr	r2, [pc, #312]	; (80045b4 <I2C_Slave_STOPF+0x258>)
 800447c:	651a      	str	r2, [r3, #80]	; 0x50
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe fb6b 	bl	8002b5e <HAL_DMA_Abort_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <I2C_Slave_STOPF+0x144>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004498:	4610      	mov	r0, r2
 800449a:	4798      	blx	r3
 800449c:	e000      	b.n	80044a0 <I2C_Slave_STOPF+0x144>
 800449e:	bf00      	nop
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d03e      	beq.n	8004528 <I2C_Slave_STOPF+0x1cc>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d112      	bne.n	80044de <I2C_Slave_STOPF+0x182>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b40      	cmp	r3, #64	; 0x40
 80044ea:	d112      	bne.n	8004512 <I2C_Slave_STOPF+0x1b6>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	625a      	str	r2, [r3, #36]	; 0x24
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <I2C_Slave_STOPF+0x1cc>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	f043 0204 	orr.w	r2, r3, #4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	641a      	str	r2, [r3, #64]	; 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <I2C_Slave_STOPF+0x1dc>
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8b3 	bl	800469c <I2C_ITError>
 8004536:	e039      	b.n	80045ac <I2C_Slave_STOPF+0x250>
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	2b2a      	cmp	r3, #42	; 0x2a
 800453c:	d109      	bne.n	8004552 <I2C_Slave_STOPF+0x1f6>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2228      	movs	r2, #40	; 0x28
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff f829 	bl	80035a4 <HAL_I2C_SlaveRxCpltCallback>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b28      	cmp	r3, #40	; 0x28
 800455c:	d111      	bne.n	8004582 <I2C_Slave_STOPF+0x226>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a15      	ldr	r2, [pc, #84]	; (80045b8 <I2C_Slave_STOPF+0x25c>)
 8004562:	62da      	str	r2, [r3, #44]	; 0x2c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff f82a 	bl	80035d4 <HAL_I2C_ListenCpltCallback>
 8004580:	e014      	b.n	80045ac <I2C_Slave_STOPF+0x250>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	2b22      	cmp	r3, #34	; 0x22
 8004588:	d002      	beq.n	8004590 <I2C_Slave_STOPF+0x234>
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b22      	cmp	r3, #34	; 0x22
 800458e:	d10d      	bne.n	80045ac <I2C_Slave_STOPF+0x250>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	; 0x30
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fe fffc 	bl	80035a4 <HAL_I2C_SlaveRxCpltCallback>
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	08004901 	.word	0x08004901
 80045b8:	ffff0000 	.word	0xffff0000

080045bc <I2C_Slave_AF>:
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ca:	73fb      	strb	r3, [r7, #15]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d002      	beq.n	80045de <I2C_Slave_AF+0x22>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d129      	bne.n	8004632 <I2C_Slave_AF+0x76>
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b28      	cmp	r3, #40	; 0x28
 80045e2:	d126      	bne.n	8004632 <I2C_Slave_AF+0x76>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a2c      	ldr	r2, [pc, #176]	; (8004698 <I2C_Slave_AF+0xdc>)
 80045e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004602:	615a      	str	r2, [r3, #20]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fe ffd2 	bl	80035d4 <HAL_I2C_ListenCpltCallback>
 8004630:	e02e      	b.n	8004690 <I2C_Slave_AF+0xd4>
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	2b21      	cmp	r3, #33	; 0x21
 8004636:	d126      	bne.n	8004686 <I2C_Slave_AF+0xca>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a17      	ldr	r2, [pc, #92]	; (8004698 <I2C_Slave_AF+0xdc>)
 800463c:	62da      	str	r2, [r3, #44]	; 0x2c
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2221      	movs	r2, #33	; 0x21
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004662:	605a      	str	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800466c:	615a      	str	r2, [r3, #20]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fe ff86 	bl	8003590 <HAL_I2C_SlaveTxCpltCallback>
 8004684:	e004      	b.n	8004690 <I2C_Slave_AF+0xd4>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800468e:	615a      	str	r2, [r3, #20]
 8004690:	bf00      	nop
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	ffff0000 	.word	0xffff0000

0800469c <I2C_ITError>:
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046aa:	73fb      	strb	r3, [r7, #15]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b2:	73bb      	strb	r3, [r7, #14]
 80046b4:	7bbb      	ldrb	r3, [r7, #14]
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d002      	beq.n	80046c0 <I2C_ITError+0x24>
 80046ba:	7bbb      	ldrb	r3, [r7, #14]
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d10a      	bne.n	80046d6 <I2C_ITError+0x3a>
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b22      	cmp	r3, #34	; 0x22
 80046c4:	d107      	bne.n	80046d6 <I2C_ITError+0x3a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046dc:	2b28      	cmp	r3, #40	; 0x28
 80046de:	d107      	bne.n	80046f0 <I2C_ITError+0x54>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2228      	movs	r2, #40	; 0x28
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046ee:	e015      	b.n	800471c <I2C_ITError+0x80>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046fe:	d00a      	beq.n	8004716 <I2C_ITError+0x7a>
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b60      	cmp	r3, #96	; 0x60
 8004704:	d007      	beq.n	8004716 <I2C_ITError+0x7a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800472a:	d162      	bne.n	80047f2 <I2C_ITError+0x156>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800473a:	605a      	str	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b01      	cmp	r3, #1
 8004748:	d020      	beq.n	800478c <I2C_ITError+0xf0>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474e:	4a6a      	ldr	r2, [pc, #424]	; (80048f8 <I2C_ITError+0x25c>)
 8004750:	651a      	str	r2, [r3, #80]	; 0x50
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe fa01 	bl	8002b5e <HAL_DMA_Abort_IT>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8089 	beq.w	8004876 <I2C_ITError+0x1da>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004786:	4610      	mov	r0, r2
 8004788:	4798      	blx	r3
 800478a:	e074      	b.n	8004876 <I2C_ITError+0x1da>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	4a59      	ldr	r2, [pc, #356]	; (80048f8 <I2C_ITError+0x25c>)
 8004792:	651a      	str	r2, [r3, #80]	; 0x50
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe f9e0 	bl	8002b5e <HAL_DMA_Abort_IT>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d068      	beq.n	8004876 <I2C_ITError+0x1da>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d10b      	bne.n	80047ca <I2C_ITError+0x12e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	701a      	strb	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047ec:	4610      	mov	r0, r2
 80047ee:	4798      	blx	r3
 80047f0:	e041      	b.n	8004876 <I2C_ITError+0x1da>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b60      	cmp	r3, #96	; 0x60
 80047fc:	d125      	bne.n	800484a <I2C_ITError+0x1ae>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	641a      	str	r2, [r3, #64]	; 0x40
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	d10b      	bne.n	8004832 <I2C_ITError+0x196>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	625a      	str	r2, [r3, #36]	; 0x24
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0201 	bic.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fe feee 	bl	8003624 <HAL_I2C_AbortCpltCallback>
 8004848:	e015      	b.n	8004876 <I2C_ITError+0x1da>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004854:	2b40      	cmp	r3, #64	; 0x40
 8004856:	d10b      	bne.n	8004870 <I2C_ITError+0x1d4>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	625a      	str	r2, [r3, #36]	; 0x24
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7fe fecd 	bl	8003610 <HAL_I2C_ErrorCallback>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	60bb      	str	r3, [r7, #8]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10e      	bne.n	80048a4 <I2C_ITError+0x208>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <I2C_ITError+0x208>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <I2C_ITError+0x208>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <I2C_ITError+0x218>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048b2:	605a      	str	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ba:	73fb      	strb	r3, [r7, #15]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d113      	bne.n	80048f0 <I2C_ITError+0x254>
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b28      	cmp	r3, #40	; 0x28
 80048cc:	d110      	bne.n	80048f0 <I2C_ITError+0x254>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <I2C_ITError+0x260>)
 80048d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fe fe72 	bl	80035d4 <HAL_I2C_ListenCpltCallback>
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	08004901 	.word	0x08004901
 80048fc:	ffff0000 	.word	0xffff0000

08004900 <I2C_DMAAbort>:
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004918:	74fb      	strb	r3, [r7, #19]
 800491a:	4b4b      	ldr	r3, [pc, #300]	; (8004a48 <I2C_DMAAbort+0x148>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	08db      	lsrs	r3, r3, #3
 8004920:	4a4a      	ldr	r2, [pc, #296]	; (8004a4c <I2C_DMAAbort+0x14c>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	0a1a      	lsrs	r2, r3, #8
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	00da      	lsls	r2, r3, #3
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <I2C_DMAAbort+0x48>
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f043 0220 	orr.w	r2, r3, #32
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
 8004946:	e00a      	b.n	800495e <I2C_DMAAbort+0x5e>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3b01      	subs	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800495c:	d0ea      	beq.n	8004934 <I2C_DMAAbort+0x34>
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <I2C_DMAAbort+0x6e>
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	2200      	movs	r2, #0
 800496c:	63da      	str	r2, [r3, #60]	; 0x3c
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <I2C_DMAAbort+0x7e>
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	2200      	movs	r2, #0
 800497c:	63da      	str	r2, [r3, #60]	; 0x3c
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2200      	movs	r2, #0
 8004992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <I2C_DMAAbort+0xa4>
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	2200      	movs	r2, #0
 80049a2:	651a      	str	r2, [r3, #80]	; 0x50
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <I2C_DMAAbort+0xb4>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	2200      	movs	r2, #0
 80049b2:	651a      	str	r2, [r3, #80]	; 0x50
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b60      	cmp	r3, #96	; 0x60
 80049ce:	d10e      	bne.n	80049ee <I2C_DMAAbort+0xee>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2200      	movs	r2, #0
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40
 80049e6:	6978      	ldr	r0, [r7, #20]
 80049e8:	f7fe fe1c 	bl	8003624 <HAL_I2C_AbortCpltCallback>
 80049ec:	e027      	b.n	8004a3e <I2C_DMAAbort+0x13e>
 80049ee:	7cfb      	ldrb	r3, [r7, #19]
 80049f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049f4:	2b28      	cmp	r3, #40	; 0x28
 80049f6:	d117      	bne.n	8004a28 <I2C_DMAAbort+0x128>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2228      	movs	r2, #40	; 0x28
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a26:	e007      	b.n	8004a38 <I2C_DMAAbort+0x138>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a38:	6978      	ldr	r0, [r7, #20]
 8004a3a:	f7fe fde9 	bl	8003610 <HAL_I2C_ErrorCallback>
 8004a3e:	bf00      	nop
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000024 	.word	0x20000024
 8004a4c:	14f8b589 	.word	0x14f8b589

08004a50 <I2C_WaitOnSTOPRequestThroughIT>:
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	4b13      	ldr	r3, [pc, #76]	; (8004aac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	08db      	lsrs	r3, r3, #3
 8004a62:	4a13      	ldr	r2, [pc, #76]	; (8004ab0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	0a1a      	lsrs	r2, r3, #8
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d107      	bne.n	8004a8e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f043 0220 	orr.w	r2, r3, #32
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	641a      	str	r2, [r3, #64]	; 0x40
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e008      	b.n	8004aa0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a9c:	d0e9      	beq.n	8004a72 <I2C_WaitOnSTOPRequestThroughIT+0x22>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	20000024 	.word	0x20000024
 8004ab0:	14f8b589 	.word	0x14f8b589

08004ab4 <I2C_ConvertOtherXferOptions>:
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ac4:	d103      	bne.n	8004ace <I2C_ConvertOtherXferOptions+0x1a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	62da      	str	r2, [r3, #44]	; 0x2c
 8004acc:	e007      	b.n	8004ade <I2C_ConvertOtherXferOptions+0x2a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ad6:	d102      	bne.n	8004ade <I2C_ConvertOtherXferOptions+0x2a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2208      	movs	r2, #8
 8004adc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <HAL_PCD_Init>:
 8004aea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aec:	b08f      	sub	sp, #60	; 0x3c
 8004aee:	af0a      	add	r7, sp, #40	; 0x28
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_PCD_Init+0x12>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e10f      	b.n	8004d1c <HAL_PCD_Init+0x232>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_PCD_Init+0x32>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f007 fab2 	bl	800c080 <HAL_PCD_MspInit>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2203      	movs	r2, #3
 8004b20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <HAL_PCD_Init+0x4c>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	611a      	str	r2, [r3, #16]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f003 fd99 	bl	8008672 <USB_DisableGlobalInt>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	687e      	ldr	r6, [r7, #4]
 8004b48:	466d      	mov	r5, sp
 8004b4a:	f106 0410 	add.w	r4, r6, #16
 8004b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b5e:	1d33      	adds	r3, r6, #4
 8004b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b62:	6838      	ldr	r0, [r7, #0]
 8004b64:	f003 fc70 	bl	8008448 <USB_CoreInit>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_PCD_Init+0x90>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8004b76:	2301      	movs	r3, #1
 8004b78:	e0d0      	b.n	8004d1c <HAL_PCD_Init+0x232>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f003 fd87 	bl	8008694 <USB_SetCurrentMode>
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
 8004b8a:	e04a      	b.n	8004c22 <HAL_PCD_Init+0x138>
 8004b8c:	7bfa      	ldrb	r2, [r7, #15]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	333d      	adds	r3, #61	; 0x3d
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	7bfa      	ldrb	r2, [r7, #15]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	333c      	adds	r3, #60	; 0x3c
 8004bb0:	7bfa      	ldrb	r2, [r7, #15]
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	7bfa      	ldrb	r2, [r7, #15]
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	b298      	uxth	r0, r3
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3344      	adds	r3, #68	; 0x44
 8004bc8:	4602      	mov	r2, r0
 8004bca:	801a      	strh	r2, [r3, #0]
 8004bcc:	7bfa      	ldrb	r2, [r7, #15]
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	3340      	adds	r3, #64	; 0x40
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	7bfa      	ldrb	r2, [r7, #15]
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	4613      	mov	r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	3348      	adds	r3, #72	; 0x48
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	7bfa      	ldrb	r2, [r7, #15]
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	334c      	adds	r3, #76	; 0x4c
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	7bfa      	ldrb	r2, [r7, #15]
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	3354      	adds	r3, #84	; 0x54
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
 8004c22:	7bfa      	ldrb	r2, [r7, #15]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d3af      	bcc.n	8004b8c <HAL_PCD_Init+0xa2>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	73fb      	strb	r3, [r7, #15]
 8004c30:	e044      	b.n	8004cbc <HAL_PCD_Init+0x1d2>
 8004c32:	7bfa      	ldrb	r2, [r7, #15]
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	7bfa      	ldrb	r2, [r7, #15]
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004c5a:	7bfa      	ldrb	r2, [r7, #15]
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	7bfa      	ldrb	r2, [r7, #15]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	7bfa      	ldrb	r2, [r7, #15]
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	7bfa      	ldrb	r2, [r7, #15]
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	7bfa      	ldrb	r2, [r7, #15]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
 8004cbc:	7bfa      	ldrb	r2, [r7, #15]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d3b5      	bcc.n	8004c32 <HAL_PCD_Init+0x148>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	687e      	ldr	r6, [r7, #4]
 8004cce:	466d      	mov	r5, sp
 8004cd0:	f106 0410 	add.w	r4, r6, #16
 8004cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ce0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ce4:	1d33      	adds	r3, r6, #4
 8004ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ce8:	6838      	ldr	r0, [r7, #0]
 8004cea:	f003 fd1f 	bl	800872c <USB_DevInit>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_PCD_Init+0x216>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e00d      	b.n	8004d1c <HAL_PCD_Init+0x232>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f004 fe6e 	bl	80099f6 <USB_DevDisconnect>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d24 <HAL_PCD_Start>:
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_PCD_Start+0x1c>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e020      	b.n	8004d82 <HAL_PCD_Start+0x5e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d109      	bne.n	8004d64 <HAL_PCD_Start+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d005      	beq.n	8004d64 <HAL_PCD_Start+0x40>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f003 fc71 	bl	8008650 <USB_EnableGlobalInt>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f004 fe1e 	bl	80099b4 <USB_DevConnect>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004d80:	2300      	movs	r3, #0
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_PCD_IRQHandler>:
 8004d8a:	b590      	push	{r4, r7, lr}
 8004d8c:	b08d      	sub	sp, #52	; 0x34
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	623b      	str	r3, [r7, #32]
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f004 fedc 	bl	8009b5e <USB_GetMode>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f040 848a 	bne.w	80056c2 <HAL_PCD_IRQHandler+0x938>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f004 fe40 	bl	8009a38 <USB_ReadInterrupts>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 8480 	beq.w	80056c0 <HAL_PCD_IRQHandler+0x936>
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	0a1b      	lsrs	r3, r3, #8
 8004dca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f004 fe2d 	bl	8009a38 <USB_ReadInterrupts>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d107      	bne.n	8004df8 <HAL_PCD_IRQHandler+0x6e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f002 0202 	and.w	r2, r2, #2
 8004df6:	615a      	str	r2, [r3, #20]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f004 fe1b 	bl	8009a38 <USB_ReadInterrupts>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d161      	bne.n	8004ed0 <HAL_PCD_IRQHandler+0x146>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0210 	bic.w	r2, r2, #16
 8004e1a:	619a      	str	r2, [r3, #24]
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	f003 020f 	and.w	r2, r3, #15
 8004e28:	4613      	mov	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	4413      	add	r3, r2
 8004e38:	3304      	adds	r3, #4
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	0c5b      	lsrs	r3, r3, #17
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d124      	bne.n	8004e92 <HAL_PCD_IRQHandler+0x108>
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d035      	beq.n	8004ec0 <HAL_PCD_IRQHandler+0x136>
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	6919      	ldr	r1, [r3, #16]
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	091b      	lsrs	r3, r3, #4
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	6a38      	ldr	r0, [r7, #32]
 8004e68:	f004 fc52 	bl	8009710 <USB_ReadPacket>
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	091b      	lsrs	r3, r3, #4
 8004e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e78:	441a      	add	r2, r3
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	611a      	str	r2, [r3, #16]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e8a:	441a      	add	r2, r3
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	621a      	str	r2, [r3, #32]
 8004e90:	e016      	b.n	8004ec0 <HAL_PCD_IRQHandler+0x136>
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	0c5b      	lsrs	r3, r3, #17
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	2b06      	cmp	r3, #6
 8004e9c:	d110      	bne.n	8004ec0 <HAL_PCD_IRQHandler+0x136>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6a38      	ldr	r0, [r7, #32]
 8004eaa:	f004 fc31 	bl	8009710 <USB_ReadPacket>
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	6a1a      	ldr	r2, [r3, #32]
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	091b      	lsrs	r3, r3, #4
 8004eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eba:	441a      	add	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	621a      	str	r2, [r3, #32]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0210 	orr.w	r2, r2, #16
 8004ece:	619a      	str	r2, [r3, #24]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f004 fdaf 	bl	8009a38 <USB_ReadInterrupts>
 8004eda:	4603      	mov	r3, r0
 8004edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ee0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ee4:	f040 80a7 	bne.w	8005036 <HAL_PCD_IRQHandler+0x2ac>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f004 fdb4 	bl	8009a5e <USB_ReadDevAllOutEpInterrupt>
 8004ef6:	62b8      	str	r0, [r7, #40]	; 0x28
 8004ef8:	e099      	b.n	800502e <HAL_PCD_IRQHandler+0x2a4>
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 808e 	beq.w	8005022 <HAL_PCD_IRQHandler+0x298>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	4611      	mov	r1, r2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f004 fdd8 	bl	8009ac6 <USB_ReadDevOutEPInterrupt>
 8004f16:	6138      	str	r0, [r7, #16]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00c      	beq.n	8004f3c <HAL_PCD_IRQHandler+0x1b2>
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2301      	movs	r3, #1
 8004f32:	6093      	str	r3, [r2, #8]
 8004f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fec2 	bl	8005cc0 <PCD_EP_OutXfrComplete_int>
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00c      	beq.n	8004f60 <HAL_PCD_IRQHandler+0x1d6>
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f52:	461a      	mov	r2, r3
 8004f54:	2308      	movs	r3, #8
 8004f56:	6093      	str	r3, [r2, #8]
 8004f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 ff98 	bl	8005e90 <PCD_EP_OutSetupPacket_int>
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f003 0310 	and.w	r3, r3, #16
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d008      	beq.n	8004f7c <HAL_PCD_IRQHandler+0x1f2>
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f76:	461a      	mov	r2, r3
 8004f78:	2310      	movs	r3, #16
 8004f7a:	6093      	str	r3, [r2, #8]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d030      	beq.n	8004fe8 <HAL_PCD_IRQHandler+0x25e>
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8e:	2b80      	cmp	r3, #128	; 0x80
 8004f90:	d109      	bne.n	8004fa6 <HAL_PCD_IRQHandler+0x21c>
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fa4:	6053      	str	r3, [r2, #4]
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa8:	4613      	mov	r3, r2
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	4413      	add	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3304      	adds	r3, #4
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	78db      	ldrb	r3, [r3, #3]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d108      	bne.n	8004fd6 <HAL_PCD_IRQHandler+0x24c>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	70da      	strb	r2, [r3, #3]
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f007 f951 	bl	800c278 <HAL_PCD_ISOOUTIncompleteCallback>
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	6093      	str	r3, [r2, #8]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d008      	beq.n	8005004 <HAL_PCD_IRQHandler+0x27a>
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffe:	461a      	mov	r2, r3
 8005000:	2320      	movs	r3, #32
 8005002:	6093      	str	r3, [r2, #8]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <HAL_PCD_IRQHandler+0x298>
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501a:	461a      	mov	r2, r3
 800501c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005020:	6093      	str	r3, [r2, #8]
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	3301      	adds	r3, #1
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	085b      	lsrs	r3, r3, #1
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	2b00      	cmp	r3, #0
 8005032:	f47f af62 	bne.w	8004efa <HAL_PCD_IRQHandler+0x170>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f004 fcfc 	bl	8009a38 <USB_ReadInterrupts>
 8005040:	4603      	mov	r3, r0
 8005042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005046:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800504a:	f040 80db 	bne.w	8005204 <HAL_PCD_IRQHandler+0x47a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f004 fd1d 	bl	8009a92 <USB_ReadDevAllInEpInterrupt>
 8005058:	62b8      	str	r0, [r7, #40]	; 0x28
 800505a:	2300      	movs	r3, #0
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	e0cd      	b.n	80051fc <HAL_PCD_IRQHandler+0x472>
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80c2 	beq.w	80051f0 <HAL_PCD_IRQHandler+0x466>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	4611      	mov	r1, r2
 8005076:	4618      	mov	r0, r3
 8005078:	f004 fd43 	bl	8009b02 <USB_ReadDevInEPInterrupt>
 800507c:	6138      	str	r0, [r7, #16]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d057      	beq.n	8005138 <HAL_PCD_IRQHandler+0x3ae>
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	2201      	movs	r2, #1
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	69f9      	ldr	r1, [r7, #28]
 80050a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050a8:	4013      	ands	r3, r2
 80050aa:	634b      	str	r3, [r1, #52]	; 0x34
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	461a      	mov	r2, r3
 80050ba:	2301      	movs	r3, #1
 80050bc:	6093      	str	r3, [r2, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d132      	bne.n	800512c <HAL_PCD_IRQHandler+0x3a2>
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ca:	4613      	mov	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	334c      	adds	r3, #76	; 0x4c
 80050d6:	6819      	ldr	r1, [r3, #0]
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050dc:	4613      	mov	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4403      	add	r3, r0
 80050e6:	3348      	adds	r3, #72	; 0x48
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4419      	add	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f0:	4613      	mov	r3, r2
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4403      	add	r3, r0
 80050fa:	334c      	adds	r3, #76	; 0x4c
 80050fc:	6019      	str	r1, [r3, #0]
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	d113      	bne.n	800512c <HAL_PCD_IRQHandler+0x3a2>
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	3354      	adds	r3, #84	; 0x54
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d108      	bne.n	800512c <HAL_PCD_IRQHandler+0x3a2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005124:	461a      	mov	r2, r3
 8005126:	2101      	movs	r1, #1
 8005128:	f004 fd4a 	bl	8009bc0 <USB_EP0_OutStart>
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	b2db      	uxtb	r3, r3
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f007 f825 	bl	800c182 <HAL_PCD_DataInStageCallback>
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d008      	beq.n	8005154 <HAL_PCD_IRQHandler+0x3ca>
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	461a      	mov	r2, r3
 8005150:	2308      	movs	r3, #8
 8005152:	6093      	str	r3, [r2, #8]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	2b00      	cmp	r3, #0
 800515c:	d008      	beq.n	8005170 <HAL_PCD_IRQHandler+0x3e6>
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	461a      	mov	r2, r3
 800516c:	2310      	movs	r3, #16
 800516e:	6093      	str	r3, [r2, #8]
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d008      	beq.n	800518c <HAL_PCD_IRQHandler+0x402>
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005186:	461a      	mov	r2, r3
 8005188:	2340      	movs	r3, #64	; 0x40
 800518a:	6093      	str	r3, [r2, #8]
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d023      	beq.n	80051de <HAL_PCD_IRQHandler+0x454>
 8005196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005198:	6a38      	ldr	r0, [r7, #32]
 800519a:	f003 fc2b 	bl	80089f4 <USB_FlushTxFifo>
 800519e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a0:	4613      	mov	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	3338      	adds	r3, #56	; 0x38
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4413      	add	r3, r2
 80051ae:	3304      	adds	r3, #4
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	78db      	ldrb	r3, [r3, #3]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d108      	bne.n	80051cc <HAL_PCD_IRQHandler+0x442>
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2200      	movs	r2, #0
 80051be:	70da      	strb	r2, [r3, #3]
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	4619      	mov	r1, r3
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f007 f868 	bl	800c29c <HAL_PCD_ISOINIncompleteCallback>
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d8:	461a      	mov	r2, r3
 80051da:	2302      	movs	r3, #2
 80051dc:	6093      	str	r3, [r2, #8]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_PCD_IRQHandler+0x466>
 80051e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fcdb 	bl	8005ba6 <PCD_WriteEmptyTxFifo>
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	3301      	adds	r3, #1
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f47f af2e 	bne.w	8005060 <HAL_PCD_IRQHandler+0x2d6>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f004 fc15 	bl	8009a38 <USB_ReadInterrupts>
 800520e:	4603      	mov	r3, r0
 8005210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005218:	d122      	bne.n	8005260 <HAL_PCD_IRQHandler+0x4d6>
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005228:	f023 0301 	bic.w	r3, r3, #1
 800522c:	6053      	str	r3, [r2, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005234:	2b01      	cmp	r3, #1
 8005236:	d108      	bne.n	800524a <HAL_PCD_IRQHandler+0x4c0>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8005240:	2100      	movs	r1, #0
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fec2 	bl	8005fcc <HAL_PCDEx_LPM_Callback>
 8005248:	e002      	b.n	8005250 <HAL_PCD_IRQHandler+0x4c6>
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f007 f806 	bl	800c25c <HAL_PCD_ResumeCallback>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695a      	ldr	r2, [r3, #20]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800525e:	615a      	str	r2, [r3, #20]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f004 fbe7 	bl	8009a38 <USB_ReadInterrupts>
 800526a:	4603      	mov	r3, r0
 800526c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005274:	d112      	bne.n	800529c <HAL_PCD_IRQHandler+0x512>
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b01      	cmp	r3, #1
 8005284:	d102      	bne.n	800528c <HAL_PCD_IRQHandler+0x502>
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f006 ffc2 	bl	800c210 <HAL_PCD_SuspendCallback>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695a      	ldr	r2, [r3, #20]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800529a:	615a      	str	r2, [r3, #20]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f004 fbc9 	bl	8009a38 <USB_ReadInterrupts>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b0:	f040 80b7 	bne.w	8005422 <HAL_PCD_IRQHandler+0x698>
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c2:	f023 0301 	bic.w	r3, r3, #1
 80052c6:	6053      	str	r3, [r2, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2110      	movs	r1, #16
 80052ce:	4618      	mov	r0, r3
 80052d0:	f003 fb90 	bl	80089f4 <USB_FlushTxFifo>
 80052d4:	2300      	movs	r3, #0
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d8:	e046      	b.n	8005368 <HAL_PCD_IRQHandler+0x5de>
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e6:	461a      	mov	r2, r3
 80052e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052ec:	6093      	str	r3, [r2, #8]
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	440a      	add	r2, r1
 8005304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005308:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531a:	461a      	mov	r2, r3
 800531c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005320:	6093      	str	r3, [r2, #8]
 8005322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800533c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800535c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	3301      	adds	r3, #1
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800536e:	429a      	cmp	r2, r3
 8005370:	d3b3      	bcc.n	80052da <HAL_PCD_IRQHandler+0x550>
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005380:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005384:	61d3      	str	r3, [r2, #28]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	2b00      	cmp	r3, #0
 800538c:	d016      	beq.n	80053bc <HAL_PCD_IRQHandler+0x632>
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800539e:	f043 030b 	orr.w	r3, r3, #11
 80053a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b4:	f043 030b 	orr.w	r3, r3, #11
 80053b8:	6453      	str	r3, [r2, #68]	; 0x44
 80053ba:	e015      	b.n	80053e8 <HAL_PCD_IRQHandler+0x65e>
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053ce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80053d2:	6153      	str	r3, [r2, #20]
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053e2:	f043 030b 	orr.w	r3, r3, #11
 80053e6:	6113      	str	r3, [r2, #16]
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	b2d9      	uxtb	r1, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800540c:	461a      	mov	r2, r3
 800540e:	f004 fbd7 	bl	8009bc0 <USB_EP0_OutStart>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695a      	ldr	r2, [r3, #20]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005420:	615a      	str	r2, [r3, #20]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f004 fb06 	bl	8009a38 <USB_ReadInterrupts>
 800542c:	4603      	mov	r3, r0
 800542e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005436:	d124      	bne.n	8005482 <HAL_PCD_IRQHandler+0x6f8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f004 fb9c 	bl	8009b7a <USB_ActivateSetup>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f003 fb51 	bl	8008aee <USB_GetDevSpeed>
 800544c:	4603      	mov	r3, r0
 800544e:	461a      	mov	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60da      	str	r2, [r3, #12]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681c      	ldr	r4, [r3, #0]
 8005458:	f001 f9e8 	bl	800682c <HAL_RCC_GetHCLKFreq>
 800545c:	4601      	mov	r1, r0
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	461a      	mov	r2, r3
 8005466:	4620      	mov	r0, r4
 8005468:	f003 f850 	bl	800850c <USB_SetTurnaroundTime>
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f006 feb0 	bl	800c1d2 <HAL_PCD_ResetCallback>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695a      	ldr	r2, [r3, #20]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005480:	615a      	str	r2, [r3, #20]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f004 fad6 	bl	8009a38 <USB_ReadInterrupts>
 800548c:	4603      	mov	r3, r0
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b08      	cmp	r3, #8
 8005494:	d10a      	bne.n	80054ac <HAL_PCD_IRQHandler+0x722>
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f006 fe8d 	bl	800c1b6 <HAL_PCD_SOFCallback>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695a      	ldr	r2, [r3, #20]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f002 0208 	and.w	r2, r2, #8
 80054aa:	615a      	str	r2, [r3, #20]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f004 fac1 	bl	8009a38 <USB_ReadInterrupts>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054bc:	2b80      	cmp	r3, #128	; 0x80
 80054be:	d122      	bne.n	8005506 <HAL_PCD_IRQHandler+0x77c>
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	619a      	str	r2, [r3, #24]
 80054cc:	2301      	movs	r3, #1
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
 80054d0:	e014      	b.n	80054fc <HAL_PCD_IRQHandler+0x772>
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d6:	4613      	mov	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d105      	bne.n	80054f6 <HAL_PCD_IRQHandler+0x76c>
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fb27 	bl	8005b44 <HAL_PCD_EP_Abort>
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	3301      	adds	r3, #1
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005502:	429a      	cmp	r2, r3
 8005504:	d3e5      	bcc.n	80054d2 <HAL_PCD_IRQHandler+0x748>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f004 fa94 	bl	8009a38 <USB_ReadInterrupts>
 8005510:	4603      	mov	r3, r0
 8005512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551a:	d13b      	bne.n	8005594 <HAL_PCD_IRQHandler+0x80a>
 800551c:	2301      	movs	r3, #1
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
 8005520:	e02b      	b.n	800557a <HAL_PCD_IRQHandler+0x7f0>
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005536:	4613      	mov	r3, r2
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	3340      	adds	r3, #64	; 0x40
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d115      	bne.n	8005574 <HAL_PCD_IRQHandler+0x7ea>
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	2b00      	cmp	r3, #0
 800554c:	da12      	bge.n	8005574 <HAL_PCD_IRQHandler+0x7ea>
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005552:	4613      	mov	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	4413      	add	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	333f      	adds	r3, #63	; 0x3f
 800555e:	2201      	movs	r2, #1
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	b2db      	uxtb	r3, r3
 8005566:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800556a:	b2db      	uxtb	r3, r3
 800556c:	4619      	mov	r1, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fae8 	bl	8005b44 <HAL_PCD_EP_Abort>
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	3301      	adds	r3, #1
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005580:	429a      	cmp	r2, r3
 8005582:	d3ce      	bcc.n	8005522 <HAL_PCD_IRQHandler+0x798>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695a      	ldr	r2, [r3, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005592:	615a      	str	r2, [r3, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f004 fa4d 	bl	8009a38 <USB_ReadInterrupts>
 800559e:	4603      	mov	r3, r0
 80055a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055a8:	d155      	bne.n	8005656 <HAL_PCD_IRQHandler+0x8cc>
 80055aa:	2301      	movs	r3, #1
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
 80055ae:	e045      	b.n	800563c <HAL_PCD_IRQHandler+0x8b2>
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c4:	4613      	mov	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d12e      	bne.n	8005636 <HAL_PCD_IRQHandler+0x8ac>
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	da2b      	bge.n	8005636 <HAL_PCD_IRQHandler+0x8ac>
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d121      	bne.n	8005636 <HAL_PCD_IRQHandler+0x8ac>
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f6:	4613      	mov	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005604:	2201      	movs	r2, #1
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	619a      	str	r2, [r3, #24]
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <HAL_PCD_IRQHandler+0x8ac>
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800562e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005632:	6053      	str	r3, [r2, #4]
 8005634:	e007      	b.n	8005646 <HAL_PCD_IRQHandler+0x8bc>
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	3301      	adds	r3, #1
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005642:	429a      	cmp	r2, r3
 8005644:	d3b4      	bcc.n	80055b0 <HAL_PCD_IRQHandler+0x826>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695a      	ldr	r2, [r3, #20]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005654:	615a      	str	r2, [r3, #20]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f004 f9ec 	bl	8009a38 <USB_ReadInterrupts>
 8005660:	4603      	mov	r3, r0
 8005662:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566a:	d10a      	bne.n	8005682 <HAL_PCD_IRQHandler+0x8f8>
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f006 fe27 	bl	800c2c0 <HAL_PCD_ConnectCallback>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695a      	ldr	r2, [r3, #20]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005680:	615a      	str	r2, [r3, #20]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f004 f9d6 	bl	8009a38 <USB_ReadInterrupts>
 800568c:	4603      	mov	r3, r0
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b04      	cmp	r3, #4
 8005694:	d115      	bne.n	80056c2 <HAL_PCD_IRQHandler+0x938>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <HAL_PCD_IRQHandler+0x924>
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f006 fe17 	bl	800c2dc <HAL_PCD_DisconnectCallback>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6859      	ldr	r1, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	605a      	str	r2, [r3, #4]
 80056be:	e000      	b.n	80056c2 <HAL_PCD_IRQHandler+0x938>
 80056c0:	bf00      	nop
 80056c2:	3734      	adds	r7, #52	; 0x34
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd90      	pop	{r4, r7, pc}

080056c8 <HAL_PCD_SetAddress>:
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	70fb      	strb	r3, [r7, #3]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_PCD_SetAddress+0x1a>
 80056de:	2302      	movs	r3, #2
 80056e0:	e013      	b.n	800570a <HAL_PCD_SetAddress+0x42>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	78fa      	ldrb	r2, [r7, #3]
 80056f8:	4611      	mov	r1, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f004 f934 	bl	8009968 <USB_SetDevAddress>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005708:	2300      	movs	r3, #0
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_PCD_EP_Open>:
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	4608      	mov	r0, r1
 800571c:	4611      	mov	r1, r2
 800571e:	461a      	mov	r2, r3
 8005720:	4603      	mov	r3, r0
 8005722:	70fb      	strb	r3, [r7, #3]
 8005724:	460b      	mov	r3, r1
 8005726:	803b      	strh	r3, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	70bb      	strb	r3, [r7, #2]
 800572c:	2300      	movs	r3, #0
 800572e:	72fb      	strb	r3, [r7, #11]
 8005730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005734:	2b00      	cmp	r3, #0
 8005736:	da0f      	bge.n	8005758 <HAL_PCD_EP_Open+0x46>
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	f003 020f 	and.w	r2, r3, #15
 800573e:	4613      	mov	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	3338      	adds	r3, #56	; 0x38
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	4413      	add	r3, r2
 800574c:	3304      	adds	r3, #4
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2201      	movs	r2, #1
 8005754:	705a      	strb	r2, [r3, #1]
 8005756:	e00f      	b.n	8005778 <HAL_PCD_EP_Open+0x66>
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	f003 020f 	and.w	r2, r3, #15
 800575e:	4613      	mov	r3, r2
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	4413      	add	r3, r2
 800576e:	3304      	adds	r3, #4
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	705a      	strb	r2, [r3, #1]
 8005778:	78fb      	ldrb	r3, [r7, #3]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	b2da      	uxtb	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	883a      	ldrh	r2, [r7, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	60da      	str	r2, [r3, #12]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	78ba      	ldrb	r2, [r7, #2]
 800578e:	711a      	strb	r2, [r3, #4]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d004      	beq.n	80057a2 <HAL_PCD_EP_Open+0x90>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	811a      	strh	r2, [r3, #8]
 80057a2:	78bb      	ldrb	r3, [r7, #2]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d102      	bne.n	80057ae <HAL_PCD_EP_Open+0x9c>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	715a      	strb	r2, [r3, #5]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_PCD_EP_Open+0xaa>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e00e      	b.n	80057da <HAL_PCD_EP_Open+0xc8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68f9      	ldr	r1, [r7, #12]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f003 f9b4 	bl	8008b38 <USB_ActivateEndpoint>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80057d8:	7afb      	ldrb	r3, [r7, #11]
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_PCD_EP_Close>:
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	460b      	mov	r3, r1
 80057ec:	70fb      	strb	r3, [r7, #3]
 80057ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	da0f      	bge.n	8005816 <HAL_PCD_EP_Close+0x34>
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	f003 020f 	and.w	r2, r3, #15
 80057fc:	4613      	mov	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	3338      	adds	r3, #56	; 0x38
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	4413      	add	r3, r2
 800580a:	3304      	adds	r3, #4
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	705a      	strb	r2, [r3, #1]
 8005814:	e00f      	b.n	8005836 <HAL_PCD_EP_Close+0x54>
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	f003 020f 	and.w	r2, r3, #15
 800581c:	4613      	mov	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	4413      	add	r3, r2
 800582c:	3304      	adds	r3, #4
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	705a      	strb	r2, [r3, #1]
 8005836:	78fb      	ldrb	r3, [r7, #3]
 8005838:	f003 030f 	and.w	r3, r3, #15
 800583c:	b2da      	uxtb	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_PCD_EP_Close+0x6e>
 800584c:	2302      	movs	r3, #2
 800584e:	e00e      	b.n	800586e <HAL_PCD_EP_Close+0x8c>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68f9      	ldr	r1, [r7, #12]
 800585e:	4618      	mov	r0, r3
 8005860:	f003 f9f2 	bl	8008c48 <USB_DeactivateEndpoint>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800586c:	2300      	movs	r3, #0
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_PCD_EP_Receive>:
 8005876:	b580      	push	{r7, lr}
 8005878:	b086      	sub	sp, #24
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
 8005882:	460b      	mov	r3, r1
 8005884:	72fb      	strb	r3, [r7, #11]
 8005886:	7afb      	ldrb	r3, [r7, #11]
 8005888:	f003 020f 	and.w	r2, r3, #15
 800588c:	4613      	mov	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	3304      	adds	r3, #4
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	611a      	str	r2, [r3, #16]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	619a      	str	r2, [r3, #24]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2200      	movs	r2, #0
 80058b0:	621a      	str	r2, [r3, #32]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2200      	movs	r2, #0
 80058b6:	705a      	strb	r2, [r3, #1]
 80058b8:	7afb      	ldrb	r3, [r7, #11]
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d102      	bne.n	80058d2 <HAL_PCD_EP_Receive+0x5c>
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	615a      	str	r2, [r3, #20]
 80058d2:	7afb      	ldrb	r3, [r7, #11]
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d109      	bne.n	80058f0 <HAL_PCD_EP_Receive+0x7a>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	6979      	ldr	r1, [r7, #20]
 80058ea:	f003 fcd1 	bl	8009290 <USB_EP0StartXfer>
 80058ee:	e008      	b.n	8005902 <HAL_PCD_EP_Receive+0x8c>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	6979      	ldr	r1, [r7, #20]
 80058fe:	f003 fa7f 	bl	8008e00 <USB_EPStartXfer>
 8005902:	2300      	movs	r3, #0
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_PCD_EP_GetRxCount>:
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	70fb      	strb	r3, [r7, #3]
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	f003 020f 	and.w	r2, r3, #15
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	440b      	add	r3, r1
 800592a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_PCD_EP_Transmit>:
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	607a      	str	r2, [r7, #4]
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	460b      	mov	r3, r1
 800594a:	72fb      	strb	r3, [r7, #11]
 800594c:	7afb      	ldrb	r3, [r7, #11]
 800594e:	f003 020f 	and.w	r2, r3, #15
 8005952:	4613      	mov	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	3338      	adds	r3, #56	; 0x38
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	3304      	adds	r3, #4
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	611a      	str	r2, [r3, #16]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	619a      	str	r2, [r3, #24]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2200      	movs	r2, #0
 8005974:	621a      	str	r2, [r3, #32]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2201      	movs	r2, #1
 800597a:	705a      	strb	r2, [r3, #1]
 800597c:	7afb      	ldrb	r3, [r7, #11]
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	b2da      	uxtb	r2, r3
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d102      	bne.n	8005996 <HAL_PCD_EP_Transmit+0x5a>
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	615a      	str	r2, [r3, #20]
 8005996:	7afb      	ldrb	r3, [r7, #11]
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	2b00      	cmp	r3, #0
 800599e:	d109      	bne.n	80059b4 <HAL_PCD_EP_Transmit+0x78>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6818      	ldr	r0, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	6979      	ldr	r1, [r7, #20]
 80059ae:	f003 fc6f 	bl	8009290 <USB_EP0StartXfer>
 80059b2:	e008      	b.n	80059c6 <HAL_PCD_EP_Transmit+0x8a>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	6979      	ldr	r1, [r7, #20]
 80059c2:	f003 fa1d 	bl	8008e00 <USB_EPStartXfer>
 80059c6:	2300      	movs	r3, #0
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_PCD_EP_SetStall>:
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	70fb      	strb	r3, [r7, #3]
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	f003 020f 	and.w	r2, r3, #15
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d901      	bls.n	80059ee <HAL_PCD_EP_SetStall+0x1e>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e050      	b.n	8005a90 <HAL_PCD_EP_SetStall+0xc0>
 80059ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	da0f      	bge.n	8005a16 <HAL_PCD_EP_SetStall+0x46>
 80059f6:	78fb      	ldrb	r3, [r7, #3]
 80059f8:	f003 020f 	and.w	r2, r3, #15
 80059fc:	4613      	mov	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	3338      	adds	r3, #56	; 0x38
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	4413      	add	r3, r2
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	705a      	strb	r2, [r3, #1]
 8005a14:	e00d      	b.n	8005a32 <HAL_PCD_EP_SetStall+0x62>
 8005a16:	78fa      	ldrb	r2, [r7, #3]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4413      	add	r3, r2
 8005a28:	3304      	adds	r3, #4
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	705a      	strb	r2, [r3, #1]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	709a      	strb	r2, [r3, #2]
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d101      	bne.n	8005a52 <HAL_PCD_EP_SetStall+0x82>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e01e      	b.n	8005a90 <HAL_PCD_EP_SetStall+0xc0>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f003 fead 	bl	80097c0 <USB_EPSetStall>
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10a      	bne.n	8005a86 <HAL_PCD_EP_SetStall+0xb6>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	b2d9      	uxtb	r1, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a80:	461a      	mov	r2, r3
 8005a82:	f004 f89d 	bl	8009bc0 <USB_EP0_OutStart>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005a8e:	2300      	movs	r3, #0
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_PCD_EP_ClrStall>:
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
 8005aa4:	78fb      	ldrb	r3, [r7, #3]
 8005aa6:	f003 020f 	and.w	r2, r3, #15
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d901      	bls.n	8005ab6 <HAL_PCD_EP_ClrStall+0x1e>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e042      	b.n	8005b3c <HAL_PCD_EP_ClrStall+0xa4>
 8005ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	da0f      	bge.n	8005ade <HAL_PCD_EP_ClrStall+0x46>
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	f003 020f 	and.w	r2, r3, #15
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	3338      	adds	r3, #56	; 0x38
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	705a      	strb	r2, [r3, #1]
 8005adc:	e00f      	b.n	8005afe <HAL_PCD_EP_ClrStall+0x66>
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	f003 020f 	and.w	r2, r3, #15
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	4413      	add	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	4413      	add	r3, r2
 8005af4:	3304      	adds	r3, #4
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	705a      	strb	r2, [r3, #1]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	709a      	strb	r2, [r3, #2]
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_PCD_EP_ClrStall+0x86>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e00e      	b.n	8005b3c <HAL_PCD_EP_ClrStall+0xa4>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68f9      	ldr	r1, [r7, #12]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f003 feb5 	bl	800989c <USB_EPClearStall>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_PCD_EP_Abort>:
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
 8005b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	da0c      	bge.n	8005b72 <HAL_PCD_EP_Abort+0x2e>
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	f003 020f 	and.w	r2, r3, #15
 8005b5e:	4613      	mov	r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	3338      	adds	r3, #56	; 0x38
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	e00c      	b.n	8005b8c <HAL_PCD_EP_Abort+0x48>
 8005b72:	78fb      	ldrb	r3, [r7, #3]
 8005b74:	f003 020f 	and.w	r2, r3, #15
 8005b78:	4613      	mov	r3, r2
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	4413      	add	r3, r2
 8005b88:	3304      	adds	r3, #4
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68f9      	ldr	r1, [r7, #12]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f003 fcd4 	bl	8009540 <USB_EPStopXfer>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	72fb      	strb	r3, [r7, #11]
 8005b9c:	7afb      	ldrb	r3, [r7, #11]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <PCD_WriteEmptyTxFifo>:
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b08a      	sub	sp, #40	; 0x28
 8005baa:	af02      	add	r7, sp, #8
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	3338      	adds	r3, #56	; 0x38
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4413      	add	r3, r2
 8005bca:	3304      	adds	r3, #4
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a1a      	ldr	r2, [r3, #32]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d901      	bls.n	8005bde <PCD_WriteEmptyTxFifo+0x38>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e06c      	b.n	8005cb8 <PCD_WriteEmptyTxFifo+0x112>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	61fb      	str	r3, [r7, #28]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d902      	bls.n	8005bfa <PCD_WriteEmptyTxFifo+0x54>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	3303      	adds	r3, #3
 8005bfe:	089b      	lsrs	r3, r3, #2
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	e02b      	b.n	8005c5c <PCD_WriteEmptyTxFifo+0xb6>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d902      	bls.n	8005c20 <PCD_WriteEmptyTxFifo+0x7a>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	3303      	adds	r3, #3
 8005c24:	089b      	lsrs	r3, r3, #2
 8005c26:	61bb      	str	r3, [r7, #24]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6919      	ldr	r1, [r3, #16]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	b298      	uxth	r0, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	6978      	ldr	r0, [r7, #20]
 8005c40:	f003 fd28 	bl	8009694 <USB_WritePacket>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	441a      	add	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	611a      	str	r2, [r3, #16]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a1a      	ldr	r2, [r3, #32]
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	441a      	add	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	621a      	str	r2, [r3, #32]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d809      	bhi.n	8005c86 <PCD_WriteEmptyTxFifo+0xe0>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a1a      	ldr	r2, [r3, #32]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d203      	bcs.n	8005c86 <PCD_WriteEmptyTxFifo+0xe0>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1be      	bne.n	8005c04 <PCD_WriteEmptyTxFifo+0x5e>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	699a      	ldr	r2, [r3, #24]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d811      	bhi.n	8005cb6 <PCD_WriteEmptyTxFifo+0x110>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	2201      	movs	r2, #1
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	60bb      	str	r3, [r7, #8]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	43db      	mvns	r3, r3
 8005cac:	6939      	ldr	r1, [r7, #16]
 8005cae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	634b      	str	r3, [r1, #52]	; 0x34
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3720      	adds	r7, #32
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <PCD_EP_OutXfrComplete_int>:
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	61bb      	str	r3, [r7, #24]
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	333c      	adds	r3, #60	; 0x3c
 8005cd8:	3304      	adds	r3, #4
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	613b      	str	r3, [r7, #16]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d17b      	bne.n	8005dee <PCD_EP_OutXfrComplete_int+0x12e>
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d015      	beq.n	8005d2c <PCD_EP_OutXfrComplete_int+0x6c>
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	4a61      	ldr	r2, [pc, #388]	; (8005e88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	f240 80b9 	bls.w	8005e7c <PCD_EP_OutXfrComplete_int+0x1bc>
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 80b3 	beq.w	8005e7c <PCD_EP_OutXfrComplete_int+0x1bc>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	461a      	mov	r2, r3
 8005d24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d28:	6093      	str	r3, [r2, #8]
 8005d2a:	e0a7      	b.n	8005e7c <PCD_EP_OutXfrComplete_int+0x1bc>
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d009      	beq.n	8005d4a <PCD_EP_OutXfrComplete_int+0x8a>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d42:	461a      	mov	r2, r3
 8005d44:	2320      	movs	r3, #32
 8005d46:	6093      	str	r3, [r2, #8]
 8005d48:	e098      	b.n	8005e7c <PCD_EP_OutXfrComplete_int+0x1bc>
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f040 8093 	bne.w	8005e7c <PCD_EP_OutXfrComplete_int+0x1bc>
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	4a4b      	ldr	r2, [pc, #300]	; (8005e88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d90f      	bls.n	8005d7e <PCD_EP_OutXfrComplete_int+0xbe>
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <PCD_EP_OutXfrComplete_int+0xbe>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d74:	461a      	mov	r2, r3
 8005d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7a:	6093      	str	r3, [r2, #8]
 8005d7c:	e07e      	b.n	8005e7c <PCD_EP_OutXfrComplete_int+0x1bc>
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	4413      	add	r3, r2
 8005d90:	3304      	adds	r3, #4
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	69da      	ldr	r2, [r3, #28]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	0159      	lsls	r1, r3, #5
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	440b      	add	r3, r1
 8005da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005daa:	1ad2      	subs	r2, r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	621a      	str	r2, [r3, #32]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d114      	bne.n	8005de0 <PCD_EP_OutXfrComplete_int+0x120>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d109      	bne.n	8005dd2 <PCD_EP_OutXfrComplete_int+0x112>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005dc8:	461a      	mov	r2, r3
 8005dca:	2101      	movs	r1, #1
 8005dcc:	f003 fef8 	bl	8009bc0 <USB_EP0_OutStart>
 8005dd0:	e006      	b.n	8005de0 <PCD_EP_OutXfrComplete_int+0x120>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	441a      	add	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	611a      	str	r2, [r3, #16]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	4619      	mov	r1, r3
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f006 f9b0 	bl	800c14c <HAL_PCD_DataOutStageCallback>
 8005dec:	e046      	b.n	8005e7c <PCD_EP_OutXfrComplete_int+0x1bc>
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4a26      	ldr	r2, [pc, #152]	; (8005e8c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d124      	bne.n	8005e40 <PCD_EP_OutXfrComplete_int+0x180>
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <PCD_EP_OutXfrComplete_int+0x156>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e12:	6093      	str	r3, [r2, #8]
 8005e14:	e032      	b.n	8005e7c <PCD_EP_OutXfrComplete_int+0x1bc>
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d008      	beq.n	8005e32 <PCD_EP_OutXfrComplete_int+0x172>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	2320      	movs	r3, #32
 8005e30:	6093      	str	r3, [r2, #8]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f006 f987 	bl	800c14c <HAL_PCD_DataOutStageCallback>
 8005e3e:	e01d      	b.n	8005e7c <PCD_EP_OutXfrComplete_int+0x1bc>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d114      	bne.n	8005e70 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d108      	bne.n	8005e70 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e68:	461a      	mov	r2, r3
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	f003 fea8 	bl	8009bc0 <USB_EP0_OutStart>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f006 f968 	bl	800c14c <HAL_PCD_DataOutStageCallback>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3720      	adds	r7, #32
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	4f54300a 	.word	0x4f54300a
 8005e8c:	4f54310a 	.word	0x4f54310a

08005e90 <PCD_EP_OutSetupPacket_int>:
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	333c      	adds	r3, #60	; 0x3c
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <PCD_EP_OutSetupPacket_int+0x88>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d90e      	bls.n	8005ee4 <PCD_EP_OutSetupPacket_int+0x54>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d009      	beq.n	8005ee4 <PCD_EP_OutSetupPacket_int+0x54>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005edc:	461a      	mov	r2, r3
 8005ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee2:	6093      	str	r3, [r2, #8]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f006 f91f 	bl	800c128 <HAL_PCD_SetupStageCallback>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4a0a      	ldr	r2, [pc, #40]	; (8005f18 <PCD_EP_OutSetupPacket_int+0x88>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d90c      	bls.n	8005f0c <PCD_EP_OutSetupPacket_int+0x7c>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d108      	bne.n	8005f0c <PCD_EP_OutSetupPacket_int+0x7c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6818      	ldr	r0, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f04:	461a      	mov	r2, r3
 8005f06:	2101      	movs	r1, #1
 8005f08:	f003 fe5a 	bl	8009bc0 <USB_EP0_OutStart>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	4f54300a 	.word	0x4f54300a

08005f1c <HAL_PCDEx_SetTxFiFo>:
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	70fb      	strb	r3, [r7, #3]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	803b      	strh	r3, [r7, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	60bb      	str	r3, [r7, #8]
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d107      	bne.n	8005f4a <HAL_PCDEx_SetTxFiFo+0x2e>
 8005f3a:	883b      	ldrh	r3, [r7, #0]
 8005f3c:	0419      	lsls	r1, r3, #16
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	629a      	str	r2, [r3, #40]	; 0x28
 8005f48:	e028      	b.n	8005f9c <HAL_PCDEx_SetTxFiFo+0x80>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f50:	0c1b      	lsrs	r3, r3, #16
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4413      	add	r3, r2
 8005f56:	60bb      	str	r3, [r7, #8]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	73fb      	strb	r3, [r7, #15]
 8005f5c:	e00d      	b.n	8005f7a <HAL_PCDEx_SetTxFiFo+0x5e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	3340      	adds	r3, #64	; 0x40
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	0c1b      	lsrs	r3, r3, #16
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	4413      	add	r3, r2
 8005f72:	60bb      	str	r3, [r7, #8]
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	3301      	adds	r3, #1
 8005f78:	73fb      	strb	r3, [r7, #15]
 8005f7a:	7bfa      	ldrb	r2, [r7, #15]
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d3ec      	bcc.n	8005f5e <HAL_PCDEx_SetTxFiFo+0x42>
 8005f84:	883b      	ldrh	r3, [r7, #0]
 8005f86:	0418      	lsls	r0, r3, #16
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6819      	ldr	r1, [r3, #0]
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	4302      	orrs	r2, r0
 8005f94:	3340      	adds	r3, #64	; 0x40
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	605a      	str	r2, [r3, #4]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_PCDEx_SetRxFiFo>:
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	807b      	strh	r3, [r7, #2]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	887a      	ldrh	r2, [r7, #2]
 8005fbc:	625a      	str	r2, [r3, #36]	; 0x24
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_PCDEx_LPM_Callback>:
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	70fb      	strb	r3, [r7, #3]
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_RCC_OscConfig>:
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x12>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e267      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d075      	beq.n	80060ee <HAL_RCC_OscConfig+0x10a>
 8006002:	4b88      	ldr	r3, [pc, #544]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 030c 	and.w	r3, r3, #12
 800600a:	2b04      	cmp	r3, #4
 800600c:	d00c      	beq.n	8006028 <HAL_RCC_OscConfig+0x44>
 800600e:	4b85      	ldr	r3, [pc, #532]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 030c 	and.w	r3, r3, #12
 8006016:	2b08      	cmp	r3, #8
 8006018:	d112      	bne.n	8006040 <HAL_RCC_OscConfig+0x5c>
 800601a:	4b82      	ldr	r3, [pc, #520]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006026:	d10b      	bne.n	8006040 <HAL_RCC_OscConfig+0x5c>
 8006028:	4b7e      	ldr	r3, [pc, #504]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d05b      	beq.n	80060ec <HAL_RCC_OscConfig+0x108>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d157      	bne.n	80060ec <HAL_RCC_OscConfig+0x108>
 800603c:	2301      	movs	r3, #1
 800603e:	e242      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006048:	d106      	bne.n	8006058 <HAL_RCC_OscConfig+0x74>
 800604a:	4b76      	ldr	r3, [pc, #472]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a75      	ldr	r2, [pc, #468]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	e01d      	b.n	8006094 <HAL_RCC_OscConfig+0xb0>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006060:	d10c      	bne.n	800607c <HAL_RCC_OscConfig+0x98>
 8006062:	4b70      	ldr	r3, [pc, #448]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a6f      	ldr	r2, [pc, #444]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	4b6d      	ldr	r3, [pc, #436]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a6c      	ldr	r2, [pc, #432]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	e00b      	b.n	8006094 <HAL_RCC_OscConfig+0xb0>
 800607c:	4b69      	ldr	r3, [pc, #420]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a68      	ldr	r2, [pc, #416]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	4b66      	ldr	r3, [pc, #408]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a65      	ldr	r2, [pc, #404]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 800608e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d013      	beq.n	80060c4 <HAL_RCC_OscConfig+0xe0>
 800609c:	f7fc f860 	bl	8002160 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0xd2>
 80060a4:	f7fc f85c 	bl	8002160 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b64      	cmp	r3, #100	; 0x64
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0xd2>
 80060b2:	2303      	movs	r3, #3
 80060b4:	e207      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 80060b6:	4b5b      	ldr	r3, [pc, #364]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f0      	beq.n	80060a4 <HAL_RCC_OscConfig+0xc0>
 80060c2:	e014      	b.n	80060ee <HAL_RCC_OscConfig+0x10a>
 80060c4:	f7fc f84c 	bl	8002160 <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0xfa>
 80060cc:	f7fc f848 	bl	8002160 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b64      	cmp	r3, #100	; 0x64
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0xfa>
 80060da:	2303      	movs	r3, #3
 80060dc:	e1f3      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 80060de:	4b51      	ldr	r3, [pc, #324]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1f0      	bne.n	80060cc <HAL_RCC_OscConfig+0xe8>
 80060ea:	e000      	b.n	80060ee <HAL_RCC_OscConfig+0x10a>
 80060ec:	bf00      	nop
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d063      	beq.n	80061c2 <HAL_RCC_OscConfig+0x1de>
 80060fa:	4b4a      	ldr	r3, [pc, #296]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 030c 	and.w	r3, r3, #12
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00b      	beq.n	800611e <HAL_RCC_OscConfig+0x13a>
 8006106:	4b47      	ldr	r3, [pc, #284]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 030c 	and.w	r3, r3, #12
 800610e:	2b08      	cmp	r3, #8
 8006110:	d11c      	bne.n	800614c <HAL_RCC_OscConfig+0x168>
 8006112:	4b44      	ldr	r3, [pc, #272]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d116      	bne.n	800614c <HAL_RCC_OscConfig+0x168>
 800611e:	4b41      	ldr	r3, [pc, #260]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d005      	beq.n	8006136 <HAL_RCC_OscConfig+0x152>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d001      	beq.n	8006136 <HAL_RCC_OscConfig+0x152>
 8006132:	2301      	movs	r3, #1
 8006134:	e1c7      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 8006136:	4b3b      	ldr	r3, [pc, #236]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	4937      	ldr	r1, [pc, #220]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006146:	4313      	orrs	r3, r2
 8006148:	600b      	str	r3, [r1, #0]
 800614a:	e03a      	b.n	80061c2 <HAL_RCC_OscConfig+0x1de>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d020      	beq.n	8006196 <HAL_RCC_OscConfig+0x1b2>
 8006154:	4b34      	ldr	r3, [pc, #208]	; (8006228 <HAL_RCC_OscConfig+0x244>)
 8006156:	2201      	movs	r2, #1
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	f7fc f801 	bl	8002160 <HAL_GetTick>
 800615e:	6138      	str	r0, [r7, #16]
 8006160:	e008      	b.n	8006174 <HAL_RCC_OscConfig+0x190>
 8006162:	f7fb fffd 	bl	8002160 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x190>
 8006170:	2303      	movs	r3, #3
 8006172:	e1a8      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 8006174:	4b2b      	ldr	r3, [pc, #172]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0f0      	beq.n	8006162 <HAL_RCC_OscConfig+0x17e>
 8006180:	4b28      	ldr	r3, [pc, #160]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	4925      	ldr	r1, [pc, #148]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 8006190:	4313      	orrs	r3, r2
 8006192:	600b      	str	r3, [r1, #0]
 8006194:	e015      	b.n	80061c2 <HAL_RCC_OscConfig+0x1de>
 8006196:	4b24      	ldr	r3, [pc, #144]	; (8006228 <HAL_RCC_OscConfig+0x244>)
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	f7fb ffe0 	bl	8002160 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x1d2>
 80061a4:	f7fb ffdc 	bl	8002160 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x1d2>
 80061b2:	2303      	movs	r3, #3
 80061b4:	e187      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 80061b6:	4b1b      	ldr	r3, [pc, #108]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f0      	bne.n	80061a4 <HAL_RCC_OscConfig+0x1c0>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d036      	beq.n	800623c <HAL_RCC_OscConfig+0x258>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d016      	beq.n	8006204 <HAL_RCC_OscConfig+0x220>
 80061d6:	4b15      	ldr	r3, [pc, #84]	; (800622c <HAL_RCC_OscConfig+0x248>)
 80061d8:	2201      	movs	r2, #1
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	f7fb ffc0 	bl	8002160 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x212>
 80061e4:	f7fb ffbc 	bl	8002160 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x212>
 80061f2:	2303      	movs	r3, #3
 80061f4:	e167      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <HAL_RCC_OscConfig+0x240>)
 80061f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0f0      	beq.n	80061e4 <HAL_RCC_OscConfig+0x200>
 8006202:	e01b      	b.n	800623c <HAL_RCC_OscConfig+0x258>
 8006204:	4b09      	ldr	r3, [pc, #36]	; (800622c <HAL_RCC_OscConfig+0x248>)
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	f7fb ffa9 	bl	8002160 <HAL_GetTick>
 800620e:	6138      	str	r0, [r7, #16]
 8006210:	e00e      	b.n	8006230 <HAL_RCC_OscConfig+0x24c>
 8006212:	f7fb ffa5 	bl	8002160 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d907      	bls.n	8006230 <HAL_RCC_OscConfig+0x24c>
 8006220:	2303      	movs	r3, #3
 8006222:	e150      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 8006224:	40023800 	.word	0x40023800
 8006228:	42470000 	.word	0x42470000
 800622c:	42470e80 	.word	0x42470e80
 8006230:	4b88      	ldr	r3, [pc, #544]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1ea      	bne.n	8006212 <HAL_RCC_OscConfig+0x22e>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 8097 	beq.w	8006378 <HAL_RCC_OscConfig+0x394>
 800624a:	2300      	movs	r3, #0
 800624c:	75fb      	strb	r3, [r7, #23]
 800624e:	4b81      	ldr	r3, [pc, #516]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10f      	bne.n	800627a <HAL_RCC_OscConfig+0x296>
 800625a:	2300      	movs	r3, #0
 800625c:	60bb      	str	r3, [r7, #8]
 800625e:	4b7d      	ldr	r3, [pc, #500]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	4a7c      	ldr	r2, [pc, #496]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006268:	6413      	str	r3, [r2, #64]	; 0x40
 800626a:	4b7a      	ldr	r3, [pc, #488]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006272:	60bb      	str	r3, [r7, #8]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2301      	movs	r3, #1
 8006278:	75fb      	strb	r3, [r7, #23]
 800627a:	4b77      	ldr	r3, [pc, #476]	; (8006458 <HAL_RCC_OscConfig+0x474>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006282:	2b00      	cmp	r3, #0
 8006284:	d118      	bne.n	80062b8 <HAL_RCC_OscConfig+0x2d4>
 8006286:	4b74      	ldr	r3, [pc, #464]	; (8006458 <HAL_RCC_OscConfig+0x474>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a73      	ldr	r2, [pc, #460]	; (8006458 <HAL_RCC_OscConfig+0x474>)
 800628c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	f7fb ff65 	bl	8002160 <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]
 8006298:	e008      	b.n	80062ac <HAL_RCC_OscConfig+0x2c8>
 800629a:	f7fb ff61 	bl	8002160 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x2c8>
 80062a8:	2303      	movs	r3, #3
 80062aa:	e10c      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 80062ac:	4b6a      	ldr	r3, [pc, #424]	; (8006458 <HAL_RCC_OscConfig+0x474>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0f0      	beq.n	800629a <HAL_RCC_OscConfig+0x2b6>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d106      	bne.n	80062ce <HAL_RCC_OscConfig+0x2ea>
 80062c0:	4b64      	ldr	r3, [pc, #400]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c4:	4a63      	ldr	r2, [pc, #396]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	6713      	str	r3, [r2, #112]	; 0x70
 80062cc:	e01c      	b.n	8006308 <HAL_RCC_OscConfig+0x324>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	2b05      	cmp	r3, #5
 80062d4:	d10c      	bne.n	80062f0 <HAL_RCC_OscConfig+0x30c>
 80062d6:	4b5f      	ldr	r3, [pc, #380]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062da:	4a5e      	ldr	r2, [pc, #376]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062dc:	f043 0304 	orr.w	r3, r3, #4
 80062e0:	6713      	str	r3, [r2, #112]	; 0x70
 80062e2:	4b5c      	ldr	r3, [pc, #368]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e6:	4a5b      	ldr	r2, [pc, #364]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062e8:	f043 0301 	orr.w	r3, r3, #1
 80062ec:	6713      	str	r3, [r2, #112]	; 0x70
 80062ee:	e00b      	b.n	8006308 <HAL_RCC_OscConfig+0x324>
 80062f0:	4b58      	ldr	r3, [pc, #352]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f4:	4a57      	ldr	r2, [pc, #348]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062f6:	f023 0301 	bic.w	r3, r3, #1
 80062fa:	6713      	str	r3, [r2, #112]	; 0x70
 80062fc:	4b55      	ldr	r3, [pc, #340]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80062fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006300:	4a54      	ldr	r2, [pc, #336]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006302:	f023 0304 	bic.w	r3, r3, #4
 8006306:	6713      	str	r3, [r2, #112]	; 0x70
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d015      	beq.n	800633c <HAL_RCC_OscConfig+0x358>
 8006310:	f7fb ff26 	bl	8002160 <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]
 8006316:	e00a      	b.n	800632e <HAL_RCC_OscConfig+0x34a>
 8006318:	f7fb ff22 	bl	8002160 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	f241 3288 	movw	r2, #5000	; 0x1388
 8006326:	4293      	cmp	r3, r2
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x34a>
 800632a:	2303      	movs	r3, #3
 800632c:	e0cb      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 800632e:	4b49      	ldr	r3, [pc, #292]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0ee      	beq.n	8006318 <HAL_RCC_OscConfig+0x334>
 800633a:	e014      	b.n	8006366 <HAL_RCC_OscConfig+0x382>
 800633c:	f7fb ff10 	bl	8002160 <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]
 8006342:	e00a      	b.n	800635a <HAL_RCC_OscConfig+0x376>
 8006344:	f7fb ff0c 	bl	8002160 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006352:	4293      	cmp	r3, r2
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x376>
 8006356:	2303      	movs	r3, #3
 8006358:	e0b5      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 800635a:	4b3e      	ldr	r3, [pc, #248]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 800635c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1ee      	bne.n	8006344 <HAL_RCC_OscConfig+0x360>
 8006366:	7dfb      	ldrb	r3, [r7, #23]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d105      	bne.n	8006378 <HAL_RCC_OscConfig+0x394>
 800636c:	4b39      	ldr	r3, [pc, #228]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	4a38      	ldr	r2, [pc, #224]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006376:	6413      	str	r3, [r2, #64]	; 0x40
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 80a1 	beq.w	80064c4 <HAL_RCC_OscConfig+0x4e0>
 8006382:	4b34      	ldr	r3, [pc, #208]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 030c 	and.w	r3, r3, #12
 800638a:	2b08      	cmp	r3, #8
 800638c:	d05c      	beq.n	8006448 <HAL_RCC_OscConfig+0x464>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d141      	bne.n	800641a <HAL_RCC_OscConfig+0x436>
 8006396:	4b31      	ldr	r3, [pc, #196]	; (800645c <HAL_RCC_OscConfig+0x478>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	f7fb fee0 	bl	8002160 <HAL_GetTick>
 80063a0:	6138      	str	r0, [r7, #16]
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_OscConfig+0x3d2>
 80063a4:	f7fb fedc 	bl	8002160 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x3d2>
 80063b2:	2303      	movs	r3, #3
 80063b4:	e087      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 80063b6:	4b27      	ldr	r3, [pc, #156]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1f0      	bne.n	80063a4 <HAL_RCC_OscConfig+0x3c0>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69da      	ldr	r2, [r3, #28]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	019b      	lsls	r3, r3, #6
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d8:	085b      	lsrs	r3, r3, #1
 80063da:	3b01      	subs	r3, #1
 80063dc:	041b      	lsls	r3, r3, #16
 80063de:	431a      	orrs	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	061b      	lsls	r3, r3, #24
 80063e6:	491b      	ldr	r1, [pc, #108]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	604b      	str	r3, [r1, #4]
 80063ec:	4b1b      	ldr	r3, [pc, #108]	; (800645c <HAL_RCC_OscConfig+0x478>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	f7fb feb5 	bl	8002160 <HAL_GetTick>
 80063f6:	6138      	str	r0, [r7, #16]
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x428>
 80063fa:	f7fb feb1 	bl	8002160 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x428>
 8006408:	2303      	movs	r3, #3
 800640a:	e05c      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 800640c:	4b11      	ldr	r3, [pc, #68]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0f0      	beq.n	80063fa <HAL_RCC_OscConfig+0x416>
 8006418:	e054      	b.n	80064c4 <HAL_RCC_OscConfig+0x4e0>
 800641a:	4b10      	ldr	r3, [pc, #64]	; (800645c <HAL_RCC_OscConfig+0x478>)
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	f7fb fe9e 	bl	8002160 <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0x456>
 8006428:	f7fb fe9a 	bl	8002160 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x456>
 8006436:	2303      	movs	r3, #3
 8006438:	e045      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 800643a:	4b06      	ldr	r3, [pc, #24]	; (8006454 <HAL_RCC_OscConfig+0x470>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1f0      	bne.n	8006428 <HAL_RCC_OscConfig+0x444>
 8006446:	e03d      	b.n	80064c4 <HAL_RCC_OscConfig+0x4e0>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d107      	bne.n	8006460 <HAL_RCC_OscConfig+0x47c>
 8006450:	2301      	movs	r3, #1
 8006452:	e038      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 8006454:	40023800 	.word	0x40023800
 8006458:	40007000 	.word	0x40007000
 800645c:	42470060 	.word	0x42470060
 8006460:	4b1b      	ldr	r3, [pc, #108]	; (80064d0 <HAL_RCC_OscConfig+0x4ec>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d028      	beq.n	80064c0 <HAL_RCC_OscConfig+0x4dc>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	429a      	cmp	r2, r3
 800647a:	d121      	bne.n	80064c0 <HAL_RCC_OscConfig+0x4dc>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	429a      	cmp	r2, r3
 8006488:	d11a      	bne.n	80064c0 <HAL_RCC_OscConfig+0x4dc>
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006490:	4013      	ands	r3, r2
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006496:	0192      	lsls	r2, r2, #6
 8006498:	4293      	cmp	r3, r2
 800649a:	d111      	bne.n	80064c0 <HAL_RCC_OscConfig+0x4dc>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a6:	085b      	lsrs	r3, r3, #1
 80064a8:	3b01      	subs	r3, #1
 80064aa:	041b      	lsls	r3, r3, #16
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d107      	bne.n	80064c0 <HAL_RCC_OscConfig+0x4dc>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	061b      	lsls	r3, r3, #24
 80064bc:	429a      	cmp	r2, r3
 80064be:	d001      	beq.n	80064c4 <HAL_RCC_OscConfig+0x4e0>
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <HAL_RCC_OscConfig+0x4e2>
 80064c4:	2300      	movs	r3, #0
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	40023800 	.word	0x40023800

080064d4 <HAL_RCC_ClockConfig>:
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_RCC_ClockConfig+0x14>
 80064e4:	2301      	movs	r3, #1
 80064e6:	e0cc      	b.n	8006682 <HAL_RCC_ClockConfig+0x1ae>
 80064e8:	4b68      	ldr	r3, [pc, #416]	; (800668c <HAL_RCC_ClockConfig+0x1b8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0307 	and.w	r3, r3, #7
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d90c      	bls.n	8006510 <HAL_RCC_ClockConfig+0x3c>
 80064f6:	4b65      	ldr	r3, [pc, #404]	; (800668c <HAL_RCC_ClockConfig+0x1b8>)
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	4b63      	ldr	r3, [pc, #396]	; (800668c <HAL_RCC_ClockConfig+0x1b8>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d001      	beq.n	8006510 <HAL_RCC_ClockConfig+0x3c>
 800650c:	2301      	movs	r3, #1
 800650e:	e0b8      	b.n	8006682 <HAL_RCC_ClockConfig+0x1ae>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d020      	beq.n	800655e <HAL_RCC_ClockConfig+0x8a>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <HAL_RCC_ClockConfig+0x60>
 8006528:	4b59      	ldr	r3, [pc, #356]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	4a58      	ldr	r2, [pc, #352]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006532:	6093      	str	r3, [r2, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0308 	and.w	r3, r3, #8
 800653c:	2b00      	cmp	r3, #0
 800653e:	d005      	beq.n	800654c <HAL_RCC_ClockConfig+0x78>
 8006540:	4b53      	ldr	r3, [pc, #332]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	4a52      	ldr	r2, [pc, #328]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800654a:	6093      	str	r3, [r2, #8]
 800654c:	4b50      	ldr	r3, [pc, #320]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	494d      	ldr	r1, [pc, #308]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	4313      	orrs	r3, r2
 800655c:	608b      	str	r3, [r1, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d044      	beq.n	80065f4 <HAL_RCC_ClockConfig+0x120>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d107      	bne.n	8006582 <HAL_RCC_ClockConfig+0xae>
 8006572:	4b47      	ldr	r3, [pc, #284]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d119      	bne.n	80065b2 <HAL_RCC_ClockConfig+0xde>
 800657e:	2301      	movs	r3, #1
 8006580:	e07f      	b.n	8006682 <HAL_RCC_ClockConfig+0x1ae>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b02      	cmp	r3, #2
 8006588:	d003      	beq.n	8006592 <HAL_RCC_ClockConfig+0xbe>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b03      	cmp	r3, #3
 8006590:	d107      	bne.n	80065a2 <HAL_RCC_ClockConfig+0xce>
 8006592:	4b3f      	ldr	r3, [pc, #252]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d109      	bne.n	80065b2 <HAL_RCC_ClockConfig+0xde>
 800659e:	2301      	movs	r3, #1
 80065a0:	e06f      	b.n	8006682 <HAL_RCC_ClockConfig+0x1ae>
 80065a2:	4b3b      	ldr	r3, [pc, #236]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_RCC_ClockConfig+0xde>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e067      	b.n	8006682 <HAL_RCC_ClockConfig+0x1ae>
 80065b2:	4b37      	ldr	r3, [pc, #220]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f023 0203 	bic.w	r2, r3, #3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	4934      	ldr	r1, [pc, #208]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	608b      	str	r3, [r1, #8]
 80065c4:	f7fb fdcc 	bl	8002160 <HAL_GetTick>
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	e00a      	b.n	80065e2 <HAL_RCC_ClockConfig+0x10e>
 80065cc:	f7fb fdc8 	bl	8002160 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065da:	4293      	cmp	r3, r2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_ClockConfig+0x10e>
 80065de:	2303      	movs	r3, #3
 80065e0:	e04f      	b.n	8006682 <HAL_RCC_ClockConfig+0x1ae>
 80065e2:	4b2b      	ldr	r3, [pc, #172]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f003 020c 	and.w	r2, r3, #12
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d1eb      	bne.n	80065cc <HAL_RCC_ClockConfig+0xf8>
 80065f4:	4b25      	ldr	r3, [pc, #148]	; (800668c <HAL_RCC_ClockConfig+0x1b8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d20c      	bcs.n	800661c <HAL_RCC_ClockConfig+0x148>
 8006602:	4b22      	ldr	r3, [pc, #136]	; (800668c <HAL_RCC_ClockConfig+0x1b8>)
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	4b20      	ldr	r3, [pc, #128]	; (800668c <HAL_RCC_ClockConfig+0x1b8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d001      	beq.n	800661c <HAL_RCC_ClockConfig+0x148>
 8006618:	2301      	movs	r3, #1
 800661a:	e032      	b.n	8006682 <HAL_RCC_ClockConfig+0x1ae>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <HAL_RCC_ClockConfig+0x166>
 8006628:	4b19      	ldr	r3, [pc, #100]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	4916      	ldr	r1, [pc, #88]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006636:	4313      	orrs	r3, r2
 8006638:	608b      	str	r3, [r1, #8]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b00      	cmp	r3, #0
 8006644:	d009      	beq.n	800665a <HAL_RCC_ClockConfig+0x186>
 8006646:	4b12      	ldr	r3, [pc, #72]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	490e      	ldr	r1, [pc, #56]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006656:	4313      	orrs	r3, r2
 8006658:	608b      	str	r3, [r1, #8]
 800665a:	f000 f821 	bl	80066a0 <HAL_RCC_GetSysClockFreq>
 800665e:	4602      	mov	r2, r0
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <HAL_RCC_ClockConfig+0x1bc>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	091b      	lsrs	r3, r3, #4
 8006666:	f003 030f 	and.w	r3, r3, #15
 800666a:	490a      	ldr	r1, [pc, #40]	; (8006694 <HAL_RCC_ClockConfig+0x1c0>)
 800666c:	5ccb      	ldrb	r3, [r1, r3]
 800666e:	fa22 f303 	lsr.w	r3, r2, r3
 8006672:	4a09      	ldr	r2, [pc, #36]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	4b09      	ldr	r3, [pc, #36]	; (800669c <HAL_RCC_ClockConfig+0x1c8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f7fb fd2c 	bl	80020d8 <HAL_InitTick>
 8006680:	2300      	movs	r3, #0
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40023c00 	.word	0x40023c00
 8006690:	40023800 	.word	0x40023800
 8006694:	0800f440 	.word	0x0800f440
 8006698:	20000024 	.word	0x20000024
 800669c:	20000028 	.word	0x20000028

080066a0 <HAL_RCC_GetSysClockFreq>:
 80066a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a4:	b090      	sub	sp, #64	; 0x40
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	2300      	movs	r3, #0
 80066aa:	637b      	str	r3, [r7, #52]	; 0x34
 80066ac:	2300      	movs	r3, #0
 80066ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066b0:	2300      	movs	r3, #0
 80066b2:	633b      	str	r3, [r7, #48]	; 0x30
 80066b4:	2300      	movs	r3, #0
 80066b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80066b8:	4b59      	ldr	r3, [pc, #356]	; (8006820 <HAL_RCC_GetSysClockFreq+0x180>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f003 030c 	and.w	r3, r3, #12
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d00d      	beq.n	80066e0 <HAL_RCC_GetSysClockFreq+0x40>
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	f200 80a1 	bhi.w	800680c <HAL_RCC_GetSysClockFreq+0x16c>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <HAL_RCC_GetSysClockFreq+0x34>
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d003      	beq.n	80066da <HAL_RCC_GetSysClockFreq+0x3a>
 80066d2:	e09b      	b.n	800680c <HAL_RCC_GetSysClockFreq+0x16c>
 80066d4:	4b53      	ldr	r3, [pc, #332]	; (8006824 <HAL_RCC_GetSysClockFreq+0x184>)
 80066d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80066d8:	e09b      	b.n	8006812 <HAL_RCC_GetSysClockFreq+0x172>
 80066da:	4b53      	ldr	r3, [pc, #332]	; (8006828 <HAL_RCC_GetSysClockFreq+0x188>)
 80066dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80066de:	e098      	b.n	8006812 <HAL_RCC_GetSysClockFreq+0x172>
 80066e0:	4b4f      	ldr	r3, [pc, #316]	; (8006820 <HAL_RCC_GetSysClockFreq+0x180>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
 80066ea:	4b4d      	ldr	r3, [pc, #308]	; (8006820 <HAL_RCC_GetSysClockFreq+0x180>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d028      	beq.n	8006748 <HAL_RCC_GetSysClockFreq+0xa8>
 80066f6:	4b4a      	ldr	r3, [pc, #296]	; (8006820 <HAL_RCC_GetSysClockFreq+0x180>)
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	099b      	lsrs	r3, r3, #6
 80066fc:	2200      	movs	r2, #0
 80066fe:	623b      	str	r3, [r7, #32]
 8006700:	627a      	str	r2, [r7, #36]	; 0x24
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006708:	2100      	movs	r1, #0
 800670a:	4b47      	ldr	r3, [pc, #284]	; (8006828 <HAL_RCC_GetSysClockFreq+0x188>)
 800670c:	fb03 f201 	mul.w	r2, r3, r1
 8006710:	2300      	movs	r3, #0
 8006712:	fb00 f303 	mul.w	r3, r0, r3
 8006716:	4413      	add	r3, r2
 8006718:	4a43      	ldr	r2, [pc, #268]	; (8006828 <HAL_RCC_GetSysClockFreq+0x188>)
 800671a:	fba0 1202 	umull	r1, r2, r0, r2
 800671e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006720:	460a      	mov	r2, r1
 8006722:	62ba      	str	r2, [r7, #40]	; 0x28
 8006724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006726:	4413      	add	r3, r2
 8006728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800672a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672c:	2200      	movs	r2, #0
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	61fa      	str	r2, [r7, #28]
 8006732:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006736:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800673a:	f7fa fa5d 	bl	8000bf8 <__aeabi_uldivmod>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4613      	mov	r3, r2
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006746:	e053      	b.n	80067f0 <HAL_RCC_GetSysClockFreq+0x150>
 8006748:	4b35      	ldr	r3, [pc, #212]	; (8006820 <HAL_RCC_GetSysClockFreq+0x180>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	099b      	lsrs	r3, r3, #6
 800674e:	2200      	movs	r2, #0
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	617a      	str	r2, [r7, #20]
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800675a:	f04f 0b00 	mov.w	fp, #0
 800675e:	4652      	mov	r2, sl
 8006760:	465b      	mov	r3, fp
 8006762:	f04f 0000 	mov.w	r0, #0
 8006766:	f04f 0100 	mov.w	r1, #0
 800676a:	0159      	lsls	r1, r3, #5
 800676c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006770:	0150      	lsls	r0, r2, #5
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	ebb2 080a 	subs.w	r8, r2, sl
 800677a:	eb63 090b 	sbc.w	r9, r3, fp
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800678a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800678e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006792:	ebb2 0408 	subs.w	r4, r2, r8
 8006796:	eb63 0509 	sbc.w	r5, r3, r9
 800679a:	f04f 0200 	mov.w	r2, #0
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	00eb      	lsls	r3, r5, #3
 80067a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067a8:	00e2      	lsls	r2, r4, #3
 80067aa:	4614      	mov	r4, r2
 80067ac:	461d      	mov	r5, r3
 80067ae:	eb14 030a 	adds.w	r3, r4, sl
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	eb45 030b 	adc.w	r3, r5, fp
 80067b8:	607b      	str	r3, [r7, #4]
 80067ba:	f04f 0200 	mov.w	r2, #0
 80067be:	f04f 0300 	mov.w	r3, #0
 80067c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067c6:	4629      	mov	r1, r5
 80067c8:	028b      	lsls	r3, r1, #10
 80067ca:	4621      	mov	r1, r4
 80067cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067d0:	4621      	mov	r1, r4
 80067d2:	028a      	lsls	r2, r1, #10
 80067d4:	4610      	mov	r0, r2
 80067d6:	4619      	mov	r1, r3
 80067d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067da:	2200      	movs	r2, #0
 80067dc:	60bb      	str	r3, [r7, #8]
 80067de:	60fa      	str	r2, [r7, #12]
 80067e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067e4:	f7fa fa08 	bl	8000bf8 <__aeabi_uldivmod>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4613      	mov	r3, r2
 80067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f0:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <HAL_RCC_GetSysClockFreq+0x180>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	0c1b      	lsrs	r3, r3, #16
 80067f6:	f003 0303 	and.w	r3, r3, #3
 80067fa:	3301      	adds	r3, #1
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	fbb2 f3f3 	udiv	r3, r2, r3
 8006808:	63bb      	str	r3, [r7, #56]	; 0x38
 800680a:	e002      	b.n	8006812 <HAL_RCC_GetSysClockFreq+0x172>
 800680c:	4b05      	ldr	r3, [pc, #20]	; (8006824 <HAL_RCC_GetSysClockFreq+0x184>)
 800680e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006810:	bf00      	nop
 8006812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006814:	4618      	mov	r0, r3
 8006816:	3740      	adds	r7, #64	; 0x40
 8006818:	46bd      	mov	sp, r7
 800681a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800681e:	bf00      	nop
 8006820:	40023800 	.word	0x40023800
 8006824:	00f42400 	.word	0x00f42400
 8006828:	017d7840 	.word	0x017d7840

0800682c <HAL_RCC_GetHCLKFreq>:
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
 8006830:	4b03      	ldr	r3, [pc, #12]	; (8006840 <HAL_RCC_GetHCLKFreq+0x14>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20000024 	.word	0x20000024

08006844 <HAL_RCC_GetPCLK1Freq>:
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
 8006848:	f7ff fff0 	bl	800682c <HAL_RCC_GetHCLKFreq>
 800684c:	4602      	mov	r2, r0
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	0a9b      	lsrs	r3, r3, #10
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	4903      	ldr	r1, [pc, #12]	; (8006868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800685a:	5ccb      	ldrb	r3, [r1, r3]
 800685c:	fa22 f303 	lsr.w	r3, r2, r3
 8006860:	4618      	mov	r0, r3
 8006862:	bd80      	pop	{r7, pc}
 8006864:	40023800 	.word	0x40023800
 8006868:	0800f450 	.word	0x0800f450

0800686c <HAL_RCC_GetPCLK2Freq>:
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
 8006870:	f7ff ffdc 	bl	800682c <HAL_RCC_GetHCLKFreq>
 8006874:	4602      	mov	r2, r0
 8006876:	4b05      	ldr	r3, [pc, #20]	; (800688c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	0b5b      	lsrs	r3, r3, #13
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	4903      	ldr	r1, [pc, #12]	; (8006890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006882:	5ccb      	ldrb	r3, [r1, r3]
 8006884:	fa22 f303 	lsr.w	r3, r2, r3
 8006888:	4618      	mov	r0, r3
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40023800 	.word	0x40023800
 8006890:	0800f450 	.word	0x0800f450

08006894 <HAL_SPI_Init>:
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_SPI_Init+0x12>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e07b      	b.n	800699e <HAL_SPI_Init+0x10a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d108      	bne.n	80068c0 <HAL_SPI_Init+0x2c>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068b6:	d009      	beq.n	80068cc <HAL_SPI_Init+0x38>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	61da      	str	r2, [r3, #28]
 80068be:	e005      	b.n	80068cc <HAL_SPI_Init+0x38>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	611a      	str	r2, [r3, #16]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	615a      	str	r2, [r3, #20]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	629a      	str	r2, [r3, #40]	; 0x28
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d106      	bne.n	80068ec <HAL_SPI_Init+0x58>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7fb f84c 	bl	8001984 <HAL_SPI_MspInit>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800693c:	431a      	orrs	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006950:	ea42 0103 	orr.w	r1, r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006958:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	0c1b      	lsrs	r3, r3, #16
 800696a:	f003 0104 	and.w	r1, r3, #4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	f003 0210 	and.w	r2, r3, #16
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69da      	ldr	r2, [r3, #28]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800698c:	61da      	str	r2, [r3, #28]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	655a      	str	r2, [r3, #84]	; 0x54
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800699c:	2300      	movs	r3, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_TIM_Base_Init>:
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b082      	sub	sp, #8
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_TIM_Base_Init+0x12>
 80069b4:	2301      	movs	r3, #1
 80069b6:	e041      	b.n	8006a3c <HAL_TIM_Base_Init+0x96>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d106      	bne.n	80069d2 <HAL_TIM_Base_Init+0x2c>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7fb f821 	bl	8001a14 <HAL_TIM_Base_MspInit>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2202      	movs	r2, #2
 80069d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3304      	adds	r3, #4
 80069e2:	4619      	mov	r1, r3
 80069e4:	4610      	mov	r0, r2
 80069e6:	f000 fcc5 	bl	8007374 <TIM_Base_SetConfig>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_TIM_Base_Start_IT>:
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d001      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0x18>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e044      	b.n	8006ae6 <HAL_TIM_Base_Start_IT+0xa2>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	60da      	str	r2, [r3, #12]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1e      	ldr	r2, [pc, #120]	; (8006af4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d018      	beq.n	8006ab0 <HAL_TIM_Base_Start_IT+0x6c>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a86:	d013      	beq.n	8006ab0 <HAL_TIM_Base_Start_IT+0x6c>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1a      	ldr	r2, [pc, #104]	; (8006af8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00e      	beq.n	8006ab0 <HAL_TIM_Base_Start_IT+0x6c>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a19      	ldr	r2, [pc, #100]	; (8006afc <HAL_TIM_Base_Start_IT+0xb8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d009      	beq.n	8006ab0 <HAL_TIM_Base_Start_IT+0x6c>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a17      	ldr	r2, [pc, #92]	; (8006b00 <HAL_TIM_Base_Start_IT+0xbc>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d004      	beq.n	8006ab0 <HAL_TIM_Base_Start_IT+0x6c>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <HAL_TIM_Base_Start_IT+0xc0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d111      	bne.n	8006ad4 <HAL_TIM_Base_Start_IT+0x90>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b06      	cmp	r3, #6
 8006ac0:	d010      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0xa0>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f042 0201 	orr.w	r2, r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	e007      	b.n	8006ae4 <HAL_TIM_Base_Start_IT+0xa0>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0201 	orr.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40010000 	.word	0x40010000
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800
 8006b00:	40000c00 	.word	0x40000c00
 8006b04:	40014000 	.word	0x40014000

08006b08 <HAL_TIM_OC_Init>:
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_TIM_OC_Init+0x12>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e041      	b.n	8006b9e <HAL_TIM_OC_Init+0x96>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d106      	bne.n	8006b34 <HAL_TIM_OC_Init+0x2c>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7fa ffee 	bl	8001b10 <HAL_TIM_OC_MspInit>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4619      	mov	r1, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	f000 fc14 	bl	8007374 <TIM_Base_SetConfig>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_TIM_PWM_Init>:
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_TIM_PWM_Init+0x12>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e041      	b.n	8006c3c <HAL_TIM_PWM_Init+0x96>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d106      	bne.n	8006bd2 <HAL_TIM_PWM_Init+0x2c>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f839 	bl	8006c44 <HAL_TIM_PWM_MspInit>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3304      	adds	r3, #4
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f000 fbc5 	bl	8007374 <TIM_Base_SetConfig>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_TIM_PWM_MspInit>:
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_TIM_PWM_Start>:
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d109      	bne.n	8006c7c <HAL_TIM_PWM_Start+0x24>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	bf14      	ite	ne
 8006c74:	2301      	movne	r3, #1
 8006c76:	2300      	moveq	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	e022      	b.n	8006cc2 <HAL_TIM_PWM_Start+0x6a>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d109      	bne.n	8006c96 <HAL_TIM_PWM_Start+0x3e>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	bf14      	ite	ne
 8006c8e:	2301      	movne	r3, #1
 8006c90:	2300      	moveq	r3, #0
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	e015      	b.n	8006cc2 <HAL_TIM_PWM_Start+0x6a>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d109      	bne.n	8006cb0 <HAL_TIM_PWM_Start+0x58>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	bf14      	ite	ne
 8006ca8:	2301      	movne	r3, #1
 8006caa:	2300      	moveq	r3, #0
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	e008      	b.n	8006cc2 <HAL_TIM_PWM_Start+0x6a>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	bf14      	ite	ne
 8006cbc:	2301      	movne	r3, #1
 8006cbe:	2300      	moveq	r3, #0
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <HAL_TIM_PWM_Start+0x72>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e068      	b.n	8006d9c <HAL_TIM_PWM_Start+0x144>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d104      	bne.n	8006cda <HAL_TIM_PWM_Start+0x82>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cd8:	e013      	b.n	8006d02 <HAL_TIM_PWM_Start+0xaa>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b04      	cmp	r3, #4
 8006cde:	d104      	bne.n	8006cea <HAL_TIM_PWM_Start+0x92>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ce8:	e00b      	b.n	8006d02 <HAL_TIM_PWM_Start+0xaa>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d104      	bne.n	8006cfa <HAL_TIM_PWM_Start+0xa2>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cf8:	e003      	b.n	8006d02 <HAL_TIM_PWM_Start+0xaa>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2201      	movs	r2, #1
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 feb7 	bl	8007a7e <TIM_CCxChannelCmd>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a23      	ldr	r2, [pc, #140]	; (8006da4 <HAL_TIM_PWM_Start+0x14c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d107      	bne.n	8006d2a <HAL_TIM_PWM_Start+0xd2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d28:	645a      	str	r2, [r3, #68]	; 0x44
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <HAL_TIM_PWM_Start+0x14c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d018      	beq.n	8006d66 <HAL_TIM_PWM_Start+0x10e>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d3c:	d013      	beq.n	8006d66 <HAL_TIM_PWM_Start+0x10e>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a19      	ldr	r2, [pc, #100]	; (8006da8 <HAL_TIM_PWM_Start+0x150>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00e      	beq.n	8006d66 <HAL_TIM_PWM_Start+0x10e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a17      	ldr	r2, [pc, #92]	; (8006dac <HAL_TIM_PWM_Start+0x154>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d009      	beq.n	8006d66 <HAL_TIM_PWM_Start+0x10e>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a16      	ldr	r2, [pc, #88]	; (8006db0 <HAL_TIM_PWM_Start+0x158>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d004      	beq.n	8006d66 <HAL_TIM_PWM_Start+0x10e>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a14      	ldr	r2, [pc, #80]	; (8006db4 <HAL_TIM_PWM_Start+0x15c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d111      	bne.n	8006d8a <HAL_TIM_PWM_Start+0x132>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f003 0307 	and.w	r3, r3, #7
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b06      	cmp	r3, #6
 8006d76:	d010      	beq.n	8006d9a <HAL_TIM_PWM_Start+0x142>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0201 	orr.w	r2, r2, #1
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	e007      	b.n	8006d9a <HAL_TIM_PWM_Start+0x142>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f042 0201 	orr.w	r2, r2, #1
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40010000 	.word	0x40010000
 8006da8:	40000400 	.word	0x40000400
 8006dac:	40000800 	.word	0x40000800
 8006db0:	40000c00 	.word	0x40000c00
 8006db4:	40014000 	.word	0x40014000

08006db8 <HAL_TIM_IRQHandler>:
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d122      	bne.n	8006e14 <HAL_TIM_IRQHandler+0x5c>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d11b      	bne.n	8006e14 <HAL_TIM_IRQHandler+0x5c>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0202 	mvn.w	r2, #2
 8006de4:	611a      	str	r2, [r3, #16]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	771a      	strb	r2, [r3, #28]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <HAL_TIM_IRQHandler+0x4a>
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa9c 	bl	8007338 <HAL_TIM_IC_CaptureCallback>
 8006e00:	e005      	b.n	8006e0e <HAL_TIM_IRQHandler+0x56>
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fa8e 	bl	8007324 <HAL_TIM_OC_DelayElapsedCallback>
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fa9f 	bl	800734c <HAL_TIM_PWM_PulseFinishedCallback>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	771a      	strb	r2, [r3, #28]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f003 0304 	and.w	r3, r3, #4
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d122      	bne.n	8006e68 <HAL_TIM_IRQHandler+0xb0>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d11b      	bne.n	8006e68 <HAL_TIM_IRQHandler+0xb0>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f06f 0204 	mvn.w	r2, #4
 8006e38:	611a      	str	r2, [r3, #16]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	771a      	strb	r2, [r3, #28]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <HAL_TIM_IRQHandler+0x9e>
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fa72 	bl	8007338 <HAL_TIM_IC_CaptureCallback>
 8006e54:	e005      	b.n	8006e62 <HAL_TIM_IRQHandler+0xaa>
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fa64 	bl	8007324 <HAL_TIM_OC_DelayElapsedCallback>
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fa75 	bl	800734c <HAL_TIM_PWM_PulseFinishedCallback>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	771a      	strb	r2, [r3, #28]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b08      	cmp	r3, #8
 8006e74:	d122      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x104>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f003 0308 	and.w	r3, r3, #8
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d11b      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x104>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f06f 0208 	mvn.w	r2, #8
 8006e8c:	611a      	str	r2, [r3, #16]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2204      	movs	r2, #4
 8006e92:	771a      	strb	r2, [r3, #28]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_TIM_IRQHandler+0xf2>
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa48 	bl	8007338 <HAL_TIM_IC_CaptureCallback>
 8006ea8:	e005      	b.n	8006eb6 <HAL_TIM_IRQHandler+0xfe>
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa3a 	bl	8007324 <HAL_TIM_OC_DelayElapsedCallback>
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fa4b 	bl	800734c <HAL_TIM_PWM_PulseFinishedCallback>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	771a      	strb	r2, [r3, #28]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0310 	and.w	r3, r3, #16
 8006ec6:	2b10      	cmp	r3, #16
 8006ec8:	d122      	bne.n	8006f10 <HAL_TIM_IRQHandler+0x158>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b10      	cmp	r3, #16
 8006ed6:	d11b      	bne.n	8006f10 <HAL_TIM_IRQHandler+0x158>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0210 	mvn.w	r2, #16
 8006ee0:	611a      	str	r2, [r3, #16]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2208      	movs	r2, #8
 8006ee6:	771a      	strb	r2, [r3, #28]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_TIM_IRQHandler+0x146>
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fa1e 	bl	8007338 <HAL_TIM_IC_CaptureCallback>
 8006efc:	e005      	b.n	8006f0a <HAL_TIM_IRQHandler+0x152>
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa10 	bl	8007324 <HAL_TIM_OC_DelayElapsedCallback>
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fa21 	bl	800734c <HAL_TIM_PWM_PulseFinishedCallback>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	771a      	strb	r2, [r3, #28]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d10e      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x184>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d107      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x184>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f06f 0201 	mvn.w	r2, #1
 8006f34:	611a      	str	r2, [r3, #16]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f9ea 	bl	8007310 <HAL_TIM_PeriodElapsedCallback>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f46:	2b80      	cmp	r3, #128	; 0x80
 8006f48:	d10e      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x1b0>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f54:	2b80      	cmp	r3, #128	; 0x80
 8006f56:	d107      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x1b0>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f60:	611a      	str	r2, [r3, #16]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 ffa4 	bl	8007eb0 <HAL_TIMEx_BreakCallback>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f72:	2b40      	cmp	r3, #64	; 0x40
 8006f74:	d10e      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x1dc>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f80:	2b40      	cmp	r3, #64	; 0x40
 8006f82:	d107      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x1dc>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f8c:	611a      	str	r2, [r3, #16]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f9e6 	bl	8007360 <HAL_TIM_TriggerCallback>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d10e      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x208>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b20      	cmp	r3, #32
 8006fae:	d107      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x208>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f06f 0220 	mvn.w	r2, #32
 8006fb8:	611a      	str	r2, [r3, #16]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 ff6e 	bl	8007e9c <HAL_TIMEx_CommutCallback>
 8006fc0:	bf00      	nop
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <HAL_TIM_OC_ConfigChannel>:
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	75fb      	strb	r3, [r7, #23]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	e048      	b.n	8007078 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b0c      	cmp	r3, #12
 8006ff2:	d839      	bhi.n	8007068 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006ff4:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <HAL_TIM_OC_ConfigChannel+0x34>)
 8006ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffa:	bf00      	nop
 8006ffc:	08007031 	.word	0x08007031
 8007000:	08007069 	.word	0x08007069
 8007004:	08007069 	.word	0x08007069
 8007008:	08007069 	.word	0x08007069
 800700c:	0800703f 	.word	0x0800703f
 8007010:	08007069 	.word	0x08007069
 8007014:	08007069 	.word	0x08007069
 8007018:	08007069 	.word	0x08007069
 800701c:	0800704d 	.word	0x0800704d
 8007020:	08007069 	.word	0x08007069
 8007024:	08007069 	.word	0x08007069
 8007028:	08007069 	.word	0x08007069
 800702c:	0800705b 	.word	0x0800705b
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68b9      	ldr	r1, [r7, #8]
 8007036:	4618      	mov	r0, r3
 8007038:	f000 fa1c 	bl	8007474 <TIM_OC1_SetConfig>
 800703c:	e017      	b.n	800706e <HAL_TIM_OC_ConfigChannel+0xa6>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 fa7b 	bl	8007540 <TIM_OC2_SetConfig>
 800704a:	e010      	b.n	800706e <HAL_TIM_OC_ConfigChannel+0xa6>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68b9      	ldr	r1, [r7, #8]
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fae0 	bl	8007618 <TIM_OC3_SetConfig>
 8007058:	e009      	b.n	800706e <HAL_TIM_OC_ConfigChannel+0xa6>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68b9      	ldr	r1, [r7, #8]
 8007060:	4618      	mov	r0, r3
 8007062:	f000 fb43 	bl	80076ec <TIM_OC4_SetConfig>
 8007066:	e002      	b.n	800706e <HAL_TIM_OC_ConfigChannel+0xa6>
 8007068:	2301      	movs	r3, #1
 800706a:	75fb      	strb	r3, [r7, #23]
 800706c:	bf00      	nop
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007076:	7dfb      	ldrb	r3, [r7, #23]
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_TIM_PWM_ConfigChannel>:
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	2300      	movs	r3, #0
 800708e:	75fb      	strb	r3, [r7, #23]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007096:	2b01      	cmp	r3, #1
 8007098:	d101      	bne.n	800709e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800709a:	2302      	movs	r3, #2
 800709c:	e0ae      	b.n	80071fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b0c      	cmp	r3, #12
 80070aa:	f200 809f 	bhi.w	80071ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80070ae:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b4:	080070e9 	.word	0x080070e9
 80070b8:	080071ed 	.word	0x080071ed
 80070bc:	080071ed 	.word	0x080071ed
 80070c0:	080071ed 	.word	0x080071ed
 80070c4:	08007129 	.word	0x08007129
 80070c8:	080071ed 	.word	0x080071ed
 80070cc:	080071ed 	.word	0x080071ed
 80070d0:	080071ed 	.word	0x080071ed
 80070d4:	0800716b 	.word	0x0800716b
 80070d8:	080071ed 	.word	0x080071ed
 80070dc:	080071ed 	.word	0x080071ed
 80070e0:	080071ed 	.word	0x080071ed
 80070e4:	080071ab 	.word	0x080071ab
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68b9      	ldr	r1, [r7, #8]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 f9c0 	bl	8007474 <TIM_OC1_SetConfig>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 0208 	orr.w	r2, r2, #8
 8007102:	619a      	str	r2, [r3, #24]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0204 	bic.w	r2, r2, #4
 8007112:	619a      	str	r2, [r3, #24]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6999      	ldr	r1, [r3, #24]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	691a      	ldr	r2, [r3, #16]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	619a      	str	r2, [r3, #24]
 8007126:	e064      	b.n	80071f2 <HAL_TIM_PWM_ConfigChannel+0x172>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	4618      	mov	r0, r3
 8007130:	f000 fa06 	bl	8007540 <TIM_OC2_SetConfig>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007142:	619a      	str	r2, [r3, #24]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	699a      	ldr	r2, [r3, #24]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007152:	619a      	str	r2, [r3, #24]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6999      	ldr	r1, [r3, #24]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	021a      	lsls	r2, r3, #8
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	619a      	str	r2, [r3, #24]
 8007168:	e043      	b.n	80071f2 <HAL_TIM_PWM_ConfigChannel+0x172>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fa51 	bl	8007618 <TIM_OC3_SetConfig>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69da      	ldr	r2, [r3, #28]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f042 0208 	orr.w	r2, r2, #8
 8007184:	61da      	str	r2, [r3, #28]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69da      	ldr	r2, [r3, #28]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0204 	bic.w	r2, r2, #4
 8007194:	61da      	str	r2, [r3, #28]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69d9      	ldr	r1, [r3, #28]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	691a      	ldr	r2, [r3, #16]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	61da      	str	r2, [r3, #28]
 80071a8:	e023      	b.n	80071f2 <HAL_TIM_PWM_ConfigChannel+0x172>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68b9      	ldr	r1, [r7, #8]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 fa9b 	bl	80076ec <TIM_OC4_SetConfig>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69da      	ldr	r2, [r3, #28]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071c4:	61da      	str	r2, [r3, #28]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69da      	ldr	r2, [r3, #28]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071d4:	61da      	str	r2, [r3, #28]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	69d9      	ldr	r1, [r3, #28]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	021a      	lsls	r2, r3, #8
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	61da      	str	r2, [r3, #28]
 80071ea:	e002      	b.n	80071f2 <HAL_TIM_PWM_ConfigChannel+0x172>
 80071ec:	2301      	movs	r3, #1
 80071ee:	75fb      	strb	r3, [r7, #23]
 80071f0:	bf00      	nop
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	4618      	mov	r0, r3
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_TIM_SlaveConfigSynchro>:
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007214:	2b01      	cmp	r3, #1
 8007216:	d101      	bne.n	800721c <HAL_TIM_SlaveConfigSynchro+0x18>
 8007218:	2302      	movs	r3, #2
 800721a:	e031      	b.n	8007280 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 faac 	bl	800778c <TIM_SlaveTimer_SetConfig>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d009      	beq.n	800724e <HAL_TIM_SlaveConfigSynchro+0x4a>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800724a:	2301      	movs	r3, #1
 800724c:	e018      	b.n	8007280 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68da      	ldr	r2, [r3, #12]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800725c:	60da      	str	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800726c:	60da      	str	r2, [r3, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800727e:	2300      	movs	r3, #0
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_TIM_ReadCapturedValue>:
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
 8007292:	2300      	movs	r3, #0
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b0c      	cmp	r3, #12
 800729a:	d831      	bhi.n	8007300 <HAL_TIM_ReadCapturedValue+0x78>
 800729c:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800729e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a2:	bf00      	nop
 80072a4:	080072d9 	.word	0x080072d9
 80072a8:	08007301 	.word	0x08007301
 80072ac:	08007301 	.word	0x08007301
 80072b0:	08007301 	.word	0x08007301
 80072b4:	080072e3 	.word	0x080072e3
 80072b8:	08007301 	.word	0x08007301
 80072bc:	08007301 	.word	0x08007301
 80072c0:	08007301 	.word	0x08007301
 80072c4:	080072ed 	.word	0x080072ed
 80072c8:	08007301 	.word	0x08007301
 80072cc:	08007301 	.word	0x08007301
 80072d0:	08007301 	.word	0x08007301
 80072d4:	080072f7 	.word	0x080072f7
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	e00f      	b.n	8007302 <HAL_TIM_ReadCapturedValue+0x7a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	e00a      	b.n	8007302 <HAL_TIM_ReadCapturedValue+0x7a>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	e005      	b.n	8007302 <HAL_TIM_ReadCapturedValue+0x7a>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	e000      	b.n	8007302 <HAL_TIM_ReadCapturedValue+0x7a>
 8007300:	bf00      	nop
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIM_PeriodElapsedCallback>:
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIM_OC_DelayElapsedCallback>:
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIM_IC_CaptureCallback>:
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_TIM_PWM_PulseFinishedCallback>:
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_TIM_TriggerCallback>:
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <TIM_Base_SetConfig>:
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a34      	ldr	r2, [pc, #208]	; (8007458 <TIM_Base_SetConfig+0xe4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00f      	beq.n	80073ac <TIM_Base_SetConfig+0x38>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007392:	d00b      	beq.n	80073ac <TIM_Base_SetConfig+0x38>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a31      	ldr	r2, [pc, #196]	; (800745c <TIM_Base_SetConfig+0xe8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d007      	beq.n	80073ac <TIM_Base_SetConfig+0x38>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a30      	ldr	r2, [pc, #192]	; (8007460 <TIM_Base_SetConfig+0xec>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d003      	beq.n	80073ac <TIM_Base_SetConfig+0x38>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a2f      	ldr	r2, [pc, #188]	; (8007464 <TIM_Base_SetConfig+0xf0>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d108      	bne.n	80073be <TIM_Base_SetConfig+0x4a>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a25      	ldr	r2, [pc, #148]	; (8007458 <TIM_Base_SetConfig+0xe4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d01b      	beq.n	80073fe <TIM_Base_SetConfig+0x8a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073cc:	d017      	beq.n	80073fe <TIM_Base_SetConfig+0x8a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a22      	ldr	r2, [pc, #136]	; (800745c <TIM_Base_SetConfig+0xe8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d013      	beq.n	80073fe <TIM_Base_SetConfig+0x8a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a21      	ldr	r2, [pc, #132]	; (8007460 <TIM_Base_SetConfig+0xec>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00f      	beq.n	80073fe <TIM_Base_SetConfig+0x8a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a20      	ldr	r2, [pc, #128]	; (8007464 <TIM_Base_SetConfig+0xf0>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d00b      	beq.n	80073fe <TIM_Base_SetConfig+0x8a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a1f      	ldr	r2, [pc, #124]	; (8007468 <TIM_Base_SetConfig+0xf4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d007      	beq.n	80073fe <TIM_Base_SetConfig+0x8a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a1e      	ldr	r2, [pc, #120]	; (800746c <TIM_Base_SetConfig+0xf8>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d003      	beq.n	80073fe <TIM_Base_SetConfig+0x8a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a1d      	ldr	r2, [pc, #116]	; (8007470 <TIM_Base_SetConfig+0xfc>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d108      	bne.n	8007410 <TIM_Base_SetConfig+0x9c>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	4313      	orrs	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	62da      	str	r2, [r3, #44]	; 0x2c
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	629a      	str	r2, [r3, #40]	; 0x28
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a08      	ldr	r2, [pc, #32]	; (8007458 <TIM_Base_SetConfig+0xe4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d103      	bne.n	8007444 <TIM_Base_SetConfig+0xd0>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	691a      	ldr	r2, [r3, #16]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	631a      	str	r2, [r3, #48]	; 0x30
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	615a      	str	r2, [r3, #20]
 800744a:	bf00      	nop
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40010000 	.word	0x40010000
 800745c:	40000400 	.word	0x40000400
 8007460:	40000800 	.word	0x40000800
 8007464:	40000c00 	.word	0x40000c00
 8007468:	40014000 	.word	0x40014000
 800746c:	40014400 	.word	0x40014400
 8007470:	40014800 	.word	0x40014800

08007474 <TIM_OC1_SetConfig>:
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	f023 0201 	bic.w	r2, r3, #1
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	621a      	str	r2, [r3, #32]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	613b      	str	r3, [r7, #16]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0303 	bic.w	r3, r3, #3
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f023 0302 	bic.w	r3, r3, #2
 80074bc:	617b      	str	r3, [r7, #20]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a1c      	ldr	r2, [pc, #112]	; (800753c <TIM_OC1_SetConfig+0xc8>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d10c      	bne.n	80074ea <TIM_OC1_SetConfig+0x76>
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f023 0308 	bic.w	r3, r3, #8
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	4313      	orrs	r3, r2
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f023 0304 	bic.w	r3, r3, #4
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a13      	ldr	r2, [pc, #76]	; (800753c <TIM_OC1_SetConfig+0xc8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d111      	bne.n	8007516 <TIM_OC1_SetConfig+0xa2>
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074f8:	613b      	str	r3, [r7, #16]
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	4313      	orrs	r3, r2
 800750a:	613b      	str	r3, [r7, #16]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	613b      	str	r3, [r7, #16]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	605a      	str	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	619a      	str	r2, [r3, #24]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	635a      	str	r2, [r3, #52]	; 0x34
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	621a      	str	r2, [r3, #32]
 8007530:	bf00      	nop
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	40010000 	.word	0x40010000

08007540 <TIM_OC2_SetConfig>:
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	f023 0210 	bic.w	r2, r3, #16
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	621a      	str	r2, [r3, #32]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	613b      	str	r3, [r7, #16]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	021b      	lsls	r3, r3, #8
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f023 0320 	bic.w	r3, r3, #32
 800758a:	617b      	str	r3, [r7, #20]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	4313      	orrs	r3, r2
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a1e      	ldr	r2, [pc, #120]	; (8007614 <TIM_OC2_SetConfig+0xd4>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d10d      	bne.n	80075bc <TIM_OC2_SetConfig+0x7c>
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a15      	ldr	r2, [pc, #84]	; (8007614 <TIM_OC2_SetConfig+0xd4>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d113      	bne.n	80075ec <TIM_OC2_SetConfig+0xac>
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075ca:	613b      	str	r3, [r7, #16]
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075d2:	613b      	str	r3, [r7, #16]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	4313      	orrs	r3, r2
 80075de:	613b      	str	r3, [r7, #16]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	605a      	str	r2, [r3, #4]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	619a      	str	r2, [r3, #24]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	621a      	str	r2, [r3, #32]
 8007606:	bf00      	nop
 8007608:	371c      	adds	r7, #28
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	40010000 	.word	0x40010000

08007618 <TIM_OC3_SetConfig>:
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	621a      	str	r2, [r3, #32]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 0303 	bic.w	r3, r3, #3
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a1d      	ldr	r2, [pc, #116]	; (80076e8 <TIM_OC3_SetConfig+0xd0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d10d      	bne.n	8007692 <TIM_OC3_SetConfig+0x7a>
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800767c:	617b      	str	r3, [r7, #20]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	021b      	lsls	r3, r3, #8
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007690:	617b      	str	r3, [r7, #20]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a14      	ldr	r2, [pc, #80]	; (80076e8 <TIM_OC3_SetConfig+0xd0>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d113      	bne.n	80076c2 <TIM_OC3_SetConfig+0xaa>
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076a0:	613b      	str	r3, [r7, #16]
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076a8:	613b      	str	r3, [r7, #16]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	011b      	lsls	r3, r3, #4
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	613b      	str	r3, [r7, #16]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	011b      	lsls	r3, r3, #4
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	4313      	orrs	r3, r2
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	605a      	str	r2, [r3, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	61da      	str	r2, [r3, #28]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	621a      	str	r2, [r3, #32]
 80076dc:	bf00      	nop
 80076de:	371c      	adds	r7, #28
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	40010000 	.word	0x40010000

080076ec <TIM_OC4_SetConfig>:
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	621a      	str	r2, [r3, #32]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	613b      	str	r3, [r7, #16]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	021b      	lsls	r3, r3, #8
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4313      	orrs	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	031b      	lsls	r3, r3, #12
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a10      	ldr	r2, [pc, #64]	; (8007788 <TIM_OC4_SetConfig+0x9c>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d109      	bne.n	8007760 <TIM_OC4_SetConfig+0x74>
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	019b      	lsls	r3, r3, #6
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	605a      	str	r2, [r3, #4]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	61da      	str	r2, [r3, #28]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	641a      	str	r2, [r3, #64]	; 0x40
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	621a      	str	r2, [r3, #32]
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40010000 	.word	0x40010000

0800778c <TIM_SlaveTimer_SetConfig>:
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
 8007796:	2300      	movs	r3, #0
 8007798:	75fb      	strb	r3, [r7, #23]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	613b      	str	r3, [r7, #16]
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a8:	613b      	str	r3, [r7, #16]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f023 0307 	bic.w	r3, r3, #7
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	613b      	str	r3, [r7, #16]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	609a      	str	r2, [r3, #8]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2b70      	cmp	r3, #112	; 0x70
 80077d4:	d01a      	beq.n	800780c <TIM_SlaveTimer_SetConfig+0x80>
 80077d6:	2b70      	cmp	r3, #112	; 0x70
 80077d8:	d860      	bhi.n	800789c <TIM_SlaveTimer_SetConfig+0x110>
 80077da:	2b60      	cmp	r3, #96	; 0x60
 80077dc:	d054      	beq.n	8007888 <TIM_SlaveTimer_SetConfig+0xfc>
 80077de:	2b60      	cmp	r3, #96	; 0x60
 80077e0:	d85c      	bhi.n	800789c <TIM_SlaveTimer_SetConfig+0x110>
 80077e2:	2b50      	cmp	r3, #80	; 0x50
 80077e4:	d046      	beq.n	8007874 <TIM_SlaveTimer_SetConfig+0xe8>
 80077e6:	2b50      	cmp	r3, #80	; 0x50
 80077e8:	d858      	bhi.n	800789c <TIM_SlaveTimer_SetConfig+0x110>
 80077ea:	2b40      	cmp	r3, #64	; 0x40
 80077ec:	d019      	beq.n	8007822 <TIM_SlaveTimer_SetConfig+0x96>
 80077ee:	2b40      	cmp	r3, #64	; 0x40
 80077f0:	d854      	bhi.n	800789c <TIM_SlaveTimer_SetConfig+0x110>
 80077f2:	2b30      	cmp	r3, #48	; 0x30
 80077f4:	d055      	beq.n	80078a2 <TIM_SlaveTimer_SetConfig+0x116>
 80077f6:	2b30      	cmp	r3, #48	; 0x30
 80077f8:	d850      	bhi.n	800789c <TIM_SlaveTimer_SetConfig+0x110>
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	d051      	beq.n	80078a2 <TIM_SlaveTimer_SetConfig+0x116>
 80077fe:	2b20      	cmp	r3, #32
 8007800:	d84c      	bhi.n	800789c <TIM_SlaveTimer_SetConfig+0x110>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d04d      	beq.n	80078a2 <TIM_SlaveTimer_SetConfig+0x116>
 8007806:	2b10      	cmp	r3, #16
 8007808:	d04b      	beq.n	80078a2 <TIM_SlaveTimer_SetConfig+0x116>
 800780a:	e047      	b.n	800789c <TIM_SlaveTimer_SetConfig+0x110>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	68d9      	ldr	r1, [r3, #12]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	f000 f90f 	bl	8007a3e <TIM_ETR_SetConfig>
 8007820:	e040      	b.n	80078a4 <TIM_SlaveTimer_SetConfig+0x118>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b05      	cmp	r3, #5
 8007828:	d101      	bne.n	800782e <TIM_SlaveTimer_SetConfig+0xa2>
 800782a:	2301      	movs	r3, #1
 800782c:	e03b      	b.n	80078a6 <TIM_SlaveTimer_SetConfig+0x11a>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6a1b      	ldr	r3, [r3, #32]
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6a1a      	ldr	r2, [r3, #32]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 0201 	bic.w	r2, r2, #1
 8007844:	621a      	str	r2, [r3, #32]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	60bb      	str	r3, [r7, #8]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007854:	60bb      	str	r3, [r7, #8]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	011b      	lsls	r3, r3, #4
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	4313      	orrs	r3, r2
 8007860:	60bb      	str	r3, [r7, #8]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	619a      	str	r2, [r3, #24]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	621a      	str	r2, [r3, #32]
 8007872:	e017      	b.n	80078a4 <TIM_SlaveTimer_SetConfig+0x118>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	6899      	ldr	r1, [r3, #8]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	461a      	mov	r2, r3
 8007882:	f000 f87d 	bl	8007980 <TIM_TI1_ConfigInputStage>
 8007886:	e00d      	b.n	80078a4 <TIM_SlaveTimer_SetConfig+0x118>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6818      	ldr	r0, [r3, #0]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	6899      	ldr	r1, [r3, #8]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	461a      	mov	r2, r3
 8007896:	f000 f8a2 	bl	80079de <TIM_TI2_ConfigInputStage>
 800789a:	e003      	b.n	80078a4 <TIM_SlaveTimer_SetConfig+0x118>
 800789c:	2301      	movs	r3, #1
 800789e:	75fb      	strb	r3, [r7, #23]
 80078a0:	e000      	b.n	80078a4 <TIM_SlaveTimer_SetConfig+0x118>
 80078a2:	bf00      	nop
 80078a4:	7dfb      	ldrb	r3, [r7, #23]
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <TIM_TI1_SetConfig>:
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	603b      	str	r3, [r7, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	f023 0201 	bic.w	r2, r3, #1
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	621a      	str	r2, [r3, #32]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	617b      	str	r3, [r7, #20]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	613b      	str	r3, [r7, #16]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	4a24      	ldr	r2, [pc, #144]	; (800796c <TIM_TI1_SetConfig+0xbc>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d013      	beq.n	8007906 <TIM_TI1_SetConfig+0x56>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e4:	d00f      	beq.n	8007906 <TIM_TI1_SetConfig+0x56>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4a21      	ldr	r2, [pc, #132]	; (8007970 <TIM_TI1_SetConfig+0xc0>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00b      	beq.n	8007906 <TIM_TI1_SetConfig+0x56>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4a20      	ldr	r2, [pc, #128]	; (8007974 <TIM_TI1_SetConfig+0xc4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d007      	beq.n	8007906 <TIM_TI1_SetConfig+0x56>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a1f      	ldr	r2, [pc, #124]	; (8007978 <TIM_TI1_SetConfig+0xc8>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d003      	beq.n	8007906 <TIM_TI1_SetConfig+0x56>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4a1e      	ldr	r2, [pc, #120]	; (800797c <TIM_TI1_SetConfig+0xcc>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d101      	bne.n	800790a <TIM_TI1_SetConfig+0x5a>
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <TIM_TI1_SetConfig+0x5c>
 800790a:	2300      	movs	r3, #0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d008      	beq.n	8007922 <TIM_TI1_SetConfig+0x72>
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f023 0303 	bic.w	r3, r3, #3
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4313      	orrs	r3, r2
 800791e:	617b      	str	r3, [r7, #20]
 8007920:	e003      	b.n	800792a <TIM_TI1_SetConfig+0x7a>
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f043 0301 	orr.w	r3, r3, #1
 8007928:	617b      	str	r3, [r7, #20]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007930:	617b      	str	r3, [r7, #20]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	b2db      	uxtb	r3, r3
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	f023 030a 	bic.w	r3, r3, #10
 8007944:	613b      	str	r3, [r7, #16]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f003 030a 	and.w	r3, r3, #10
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	4313      	orrs	r3, r2
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	619a      	str	r2, [r3, #24]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	621a      	str	r2, [r3, #32]
 800795e:	bf00      	nop
 8007960:	371c      	adds	r7, #28
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	40010000 	.word	0x40010000
 8007970:	40000400 	.word	0x40000400
 8007974:	40000800 	.word	0x40000800
 8007978:	40000c00 	.word	0x40000c00
 800797c:	40014000 	.word	0x40014000

08007980 <TIM_TI1_ConfigInputStage>:
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	617b      	str	r3, [r7, #20]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	f023 0201 	bic.w	r2, r3, #1
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	621a      	str	r2, [r3, #32]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	613b      	str	r3, [r7, #16]
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079aa:	613b      	str	r3, [r7, #16]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f023 030a 	bic.w	r3, r3, #10
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	619a      	str	r2, [r3, #24]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	621a      	str	r2, [r3, #32]
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <TIM_TI2_ConfigInputStage>:
 80079de:	b480      	push	{r7}
 80079e0:	b087      	sub	sp, #28
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f023 0210 	bic.w	r2, r3, #16
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	621a      	str	r2, [r3, #32]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	613b      	str	r3, [r7, #16]
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a08:	617b      	str	r3, [r7, #20]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	031b      	lsls	r3, r3, #12
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	617b      	str	r3, [r7, #20]
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	613b      	str	r3, [r7, #16]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	619a      	str	r2, [r3, #24]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	621a      	str	r2, [r3, #32]
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <TIM_ETR_SetConfig>:
 8007a3e:	b480      	push	{r7}
 8007a40:	b087      	sub	sp, #28
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	60b9      	str	r1, [r7, #8]
 8007a48:	607a      	str	r2, [r7, #4]
 8007a4a:	603b      	str	r3, [r7, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	021a      	lsls	r2, r3, #8
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	431a      	orrs	r2, r3
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	609a      	str	r2, [r3, #8]
 8007a72:	bf00      	nop
 8007a74:	371c      	adds	r7, #28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <TIM_CCxChannelCmd>:
 8007a7e:	b480      	push	{r7}
 8007a80:	b087      	sub	sp, #28
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	607a      	str	r2, [r7, #4]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f003 031f 	and.w	r3, r3, #31
 8007a90:	2201      	movs	r2, #1
 8007a92:	fa02 f303 	lsl.w	r3, r2, r3
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a1a      	ldr	r2, [r3, #32]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	43db      	mvns	r3, r3
 8007aa0:	401a      	ands	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	621a      	str	r2, [r3, #32]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a1a      	ldr	r2, [r3, #32]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f003 031f 	and.w	r3, r3, #31
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	621a      	str	r2, [r3, #32]
 8007abc:	bf00      	nop
 8007abe:	371c      	adds	r7, #28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_TIMEx_HallSensor_Init>:
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	; 0x28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <HAL_TIMEx_HallSensor_Init+0x14>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e09a      	b.n	8007c12 <HAL_TIMEx_HallSensor_Init+0x14a>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d106      	bne.n	8007af6 <HAL_TIMEx_HallSensor_Init+0x2e>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7f9 ffbf 	bl	8001a74 <HAL_TIMEx_HallSensor_MspInit>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2202      	movs	r2, #2
 8007afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	3304      	adds	r3, #4
 8007b06:	4619      	mov	r1, r3
 8007b08:	4610      	mov	r0, r2
 8007b0a:	f7ff fc33 	bl	8007374 <TIM_Base_SetConfig>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	6819      	ldr	r1, [r3, #0]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	2203      	movs	r2, #3
 8007b1c:	f7ff fec8 	bl	80078b0 <TIM_TI1_SetConfig>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699a      	ldr	r2, [r3, #24]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 020c 	bic.w	r2, r2, #12
 8007b2e:	619a      	str	r2, [r3, #24]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6999      	ldr	r1, [r3, #24]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	619a      	str	r2, [r3, #24]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007b60:	609a      	str	r2, [r3, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b70:	609a      	str	r2, [r3, #8]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0207 	bic.w	r2, r2, #7
 8007b80:	609a      	str	r2, [r3, #8]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f042 0204 	orr.w	r2, r2, #4
 8007b90:	609a      	str	r2, [r3, #8]
 8007b92:	2300      	movs	r3, #0
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	2300      	movs	r3, #0
 8007b98:	623b      	str	r3, [r7, #32]
 8007b9a:	2370      	movs	r3, #112	; 0x70
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	61bb      	str	r3, [r7, #24]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	613b      	str	r3, [r7, #16]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f107 020c 	add.w	r2, r7, #12
 8007bb8:	4611      	mov	r1, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7ff fcc0 	bl	8007540 <TIM_OC2_SetConfig>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007bce:	605a      	str	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8007bde:	605a      	str	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c10:	2300      	movs	r3, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	3728      	adds	r7, #40	; 0x28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <HAL_TIMEx_HallSensor_Start>:
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c2a:	73fb      	strb	r3, [r7, #15]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c32:	73bb      	strb	r3, [r7, #14]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c3a:	737b      	strb	r3, [r7, #13]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c42:	733b      	strb	r3, [r7, #12]
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d108      	bne.n	8007c5c <HAL_TIMEx_HallSensor_Start+0x40>
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d105      	bne.n	8007c5c <HAL_TIMEx_HallSensor_Start+0x40>
 8007c50:	7b7b      	ldrb	r3, [r7, #13]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d102      	bne.n	8007c5c <HAL_TIMEx_HallSensor_Start+0x40>
 8007c56:	7b3b      	ldrb	r3, [r7, #12]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d001      	beq.n	8007c60 <HAL_TIMEx_HallSensor_Start+0x44>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e04f      	b.n	8007d00 <HAL_TIMEx_HallSensor_Start+0xe4>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2202      	movs	r2, #2
 8007c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2201      	movs	r2, #1
 8007c86:	2100      	movs	r1, #0
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7ff fef8 	bl	8007a7e <TIM_CCxChannelCmd>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1d      	ldr	r2, [pc, #116]	; (8007d08 <HAL_TIMEx_HallSensor_Start+0xec>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d018      	beq.n	8007cca <HAL_TIMEx_HallSensor_Start+0xae>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca0:	d013      	beq.n	8007cca <HAL_TIMEx_HallSensor_Start+0xae>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a19      	ldr	r2, [pc, #100]	; (8007d0c <HAL_TIMEx_HallSensor_Start+0xf0>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d00e      	beq.n	8007cca <HAL_TIMEx_HallSensor_Start+0xae>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a17      	ldr	r2, [pc, #92]	; (8007d10 <HAL_TIMEx_HallSensor_Start+0xf4>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d009      	beq.n	8007cca <HAL_TIMEx_HallSensor_Start+0xae>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a16      	ldr	r2, [pc, #88]	; (8007d14 <HAL_TIMEx_HallSensor_Start+0xf8>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d004      	beq.n	8007cca <HAL_TIMEx_HallSensor_Start+0xae>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a14      	ldr	r2, [pc, #80]	; (8007d18 <HAL_TIMEx_HallSensor_Start+0xfc>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d111      	bne.n	8007cee <HAL_TIMEx_HallSensor_Start+0xd2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f003 0307 	and.w	r3, r3, #7
 8007cd4:	60bb      	str	r3, [r7, #8]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b06      	cmp	r3, #6
 8007cda:	d010      	beq.n	8007cfe <HAL_TIMEx_HallSensor_Start+0xe2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0201 	orr.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	e007      	b.n	8007cfe <HAL_TIMEx_HallSensor_Start+0xe2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f042 0201 	orr.w	r2, r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	40010000 	.word	0x40010000
 8007d0c:	40000400 	.word	0x40000400
 8007d10:	40000800 	.word	0x40000800
 8007d14:	40000c00 	.word	0x40000c00
 8007d18:	40014000 	.word	0x40014000

08007d1c <HAL_TIMEx_MasterConfigSynchronization>:
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d101      	bne.n	8007d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d30:	2302      	movs	r3, #2
 8007d32:	e050      	b.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	60bb      	str	r3, [r7, #8]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	605a      	str	r2, [r3, #4]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a1c      	ldr	r2, [pc, #112]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d018      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d80:	d013      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a18      	ldr	r2, [pc, #96]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00e      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a16      	ldr	r2, [pc, #88]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d009      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a15      	ldr	r2, [pc, #84]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d004      	beq.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a13      	ldr	r2, [pc, #76]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d10c      	bne.n	8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007db0:	60bb      	str	r3, [r7, #8]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	60bb      	str	r3, [r7, #8]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	609a      	str	r2, [r3, #8]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	40010000 	.word	0x40010000
 8007de8:	40000400 	.word	0x40000400
 8007dec:	40000800 	.word	0x40000800
 8007df0:	40000c00 	.word	0x40000c00
 8007df4:	40014000 	.word	0x40014000

08007df8 <HAL_TIMEx_ConfigBreakDeadTime>:
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d101      	bne.n	8007e14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e10:	2302      	movs	r3, #2
 8007e12:	e03d      	b.n	8007e90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	645a      	str	r2, [r3, #68]	; 0x44
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007e8e:	2300      	movs	r3, #0
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_TIMEx_CommutCallback>:
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_TIMEx_BreakCallback>:
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_UART_Init>:
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <HAL_UART_Init+0x12>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e03f      	b.n	8007f56 <HAL_UART_Init+0x92>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d106      	bne.n	8007ef0 <HAL_UART_Init+0x2c>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7f9 fe94 	bl	8001c18 <HAL_UART_MspInit>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2224      	movs	r2, #36	; 0x24
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f06:	60da      	str	r2, [r3, #12]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f829 	bl	8007f60 <UART_SetConfig>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	691a      	ldr	r2, [r3, #16]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f1c:	611a      	str	r2, [r3, #16]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	695a      	ldr	r2, [r3, #20]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f2c:	615a      	str	r2, [r3, #20]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68da      	ldr	r2, [r3, #12]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f3c:	60da      	str	r2, [r3, #12]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	641a      	str	r2, [r3, #64]	; 0x40
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2220      	movs	r2, #32
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f54:	2300      	movs	r3, #0
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
	...

08007f60 <UART_SetConfig>:
 8007f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f64:	b0c0      	sub	sp, #256	; 0x100
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8007f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7c:	68d9      	ldr	r1, [r3, #12]
 8007f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	ea40 0301 	orr.w	r3, r0, r1
 8007f88:	6113      	str	r3, [r2, #16]
 8007f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007fb8:	f021 010c 	bic.w	r1, r1, #12
 8007fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	60d3      	str	r3, [r2, #12]
 8007fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fda:	6999      	ldr	r1, [r3, #24]
 8007fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	ea40 0301 	orr.w	r3, r0, r1
 8007fe6:	6153      	str	r3, [r2, #20]
 8007fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	4b8f      	ldr	r3, [pc, #572]	; (800822c <UART_SetConfig+0x2cc>)
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d005      	beq.n	8008000 <UART_SetConfig+0xa0>
 8007ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	4b8d      	ldr	r3, [pc, #564]	; (8008230 <UART_SetConfig+0x2d0>)
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d104      	bne.n	800800a <UART_SetConfig+0xaa>
 8008000:	f7fe fc34 	bl	800686c <HAL_RCC_GetPCLK2Freq>
 8008004:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008008:	e003      	b.n	8008012 <UART_SetConfig+0xb2>
 800800a:	f7fe fc1b 	bl	8006844 <HAL_RCC_GetPCLK1Freq>
 800800e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800801c:	f040 810c 	bne.w	8008238 <UART_SetConfig+0x2d8>
 8008020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008024:	2200      	movs	r2, #0
 8008026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800802a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800802e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008032:	4622      	mov	r2, r4
 8008034:	462b      	mov	r3, r5
 8008036:	1891      	adds	r1, r2, r2
 8008038:	65b9      	str	r1, [r7, #88]	; 0x58
 800803a:	415b      	adcs	r3, r3
 800803c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800803e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008042:	4621      	mov	r1, r4
 8008044:	eb12 0801 	adds.w	r8, r2, r1
 8008048:	4629      	mov	r1, r5
 800804a:	eb43 0901 	adc.w	r9, r3, r1
 800804e:	f04f 0200 	mov.w	r2, #0
 8008052:	f04f 0300 	mov.w	r3, #0
 8008056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800805a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800805e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008062:	4690      	mov	r8, r2
 8008064:	4699      	mov	r9, r3
 8008066:	4623      	mov	r3, r4
 8008068:	eb18 0303 	adds.w	r3, r8, r3
 800806c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008070:	462b      	mov	r3, r5
 8008072:	eb49 0303 	adc.w	r3, r9, r3
 8008076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800807a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008086:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800808a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800808e:	460b      	mov	r3, r1
 8008090:	18db      	adds	r3, r3, r3
 8008092:	653b      	str	r3, [r7, #80]	; 0x50
 8008094:	4613      	mov	r3, r2
 8008096:	eb42 0303 	adc.w	r3, r2, r3
 800809a:	657b      	str	r3, [r7, #84]	; 0x54
 800809c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80080a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80080a4:	f7f8 fda8 	bl	8000bf8 <__aeabi_uldivmod>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	4b61      	ldr	r3, [pc, #388]	; (8008234 <UART_SetConfig+0x2d4>)
 80080ae:	fba3 2302 	umull	r2, r3, r3, r2
 80080b2:	095b      	lsrs	r3, r3, #5
 80080b4:	011c      	lsls	r4, r3, #4
 80080b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80080c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80080c8:	4642      	mov	r2, r8
 80080ca:	464b      	mov	r3, r9
 80080cc:	1891      	adds	r1, r2, r2
 80080ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80080d0:	415b      	adcs	r3, r3
 80080d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80080d8:	4641      	mov	r1, r8
 80080da:	eb12 0a01 	adds.w	sl, r2, r1
 80080de:	4649      	mov	r1, r9
 80080e0:	eb43 0b01 	adc.w	fp, r3, r1
 80080e4:	f04f 0200 	mov.w	r2, #0
 80080e8:	f04f 0300 	mov.w	r3, #0
 80080ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080f8:	4692      	mov	sl, r2
 80080fa:	469b      	mov	fp, r3
 80080fc:	4643      	mov	r3, r8
 80080fe:	eb1a 0303 	adds.w	r3, sl, r3
 8008102:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008106:	464b      	mov	r3, r9
 8008108:	eb4b 0303 	adc.w	r3, fp, r3
 800810c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800811c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008120:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008124:	460b      	mov	r3, r1
 8008126:	18db      	adds	r3, r3, r3
 8008128:	643b      	str	r3, [r7, #64]	; 0x40
 800812a:	4613      	mov	r3, r2
 800812c:	eb42 0303 	adc.w	r3, r2, r3
 8008130:	647b      	str	r3, [r7, #68]	; 0x44
 8008132:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008136:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800813a:	f7f8 fd5d 	bl	8000bf8 <__aeabi_uldivmod>
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	4611      	mov	r1, r2
 8008144:	4b3b      	ldr	r3, [pc, #236]	; (8008234 <UART_SetConfig+0x2d4>)
 8008146:	fba3 2301 	umull	r2, r3, r3, r1
 800814a:	095b      	lsrs	r3, r3, #5
 800814c:	2264      	movs	r2, #100	; 0x64
 800814e:	fb02 f303 	mul.w	r3, r2, r3
 8008152:	1acb      	subs	r3, r1, r3
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800815a:	4b36      	ldr	r3, [pc, #216]	; (8008234 <UART_SetConfig+0x2d4>)
 800815c:	fba3 2302 	umull	r2, r3, r3, r2
 8008160:	095b      	lsrs	r3, r3, #5
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008168:	441c      	add	r4, r3
 800816a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800816e:	2200      	movs	r2, #0
 8008170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008174:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008178:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800817c:	4642      	mov	r2, r8
 800817e:	464b      	mov	r3, r9
 8008180:	1891      	adds	r1, r2, r2
 8008182:	63b9      	str	r1, [r7, #56]	; 0x38
 8008184:	415b      	adcs	r3, r3
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800818c:	4641      	mov	r1, r8
 800818e:	1851      	adds	r1, r2, r1
 8008190:	6339      	str	r1, [r7, #48]	; 0x30
 8008192:	4649      	mov	r1, r9
 8008194:	414b      	adcs	r3, r1
 8008196:	637b      	str	r3, [r7, #52]	; 0x34
 8008198:	f04f 0200 	mov.w	r2, #0
 800819c:	f04f 0300 	mov.w	r3, #0
 80081a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80081a4:	4659      	mov	r1, fp
 80081a6:	00cb      	lsls	r3, r1, #3
 80081a8:	4651      	mov	r1, sl
 80081aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081ae:	4651      	mov	r1, sl
 80081b0:	00ca      	lsls	r2, r1, #3
 80081b2:	4610      	mov	r0, r2
 80081b4:	4619      	mov	r1, r3
 80081b6:	4603      	mov	r3, r0
 80081b8:	4642      	mov	r2, r8
 80081ba:	189b      	adds	r3, r3, r2
 80081bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081c0:	464b      	mov	r3, r9
 80081c2:	460a      	mov	r2, r1
 80081c4:	eb42 0303 	adc.w	r3, r2, r3
 80081c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80081d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80081dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80081e0:	460b      	mov	r3, r1
 80081e2:	18db      	adds	r3, r3, r3
 80081e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80081e6:	4613      	mov	r3, r2
 80081e8:	eb42 0303 	adc.w	r3, r2, r3
 80081ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80081f6:	f7f8 fcff 	bl	8000bf8 <__aeabi_uldivmod>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4b0d      	ldr	r3, [pc, #52]	; (8008234 <UART_SetConfig+0x2d4>)
 8008200:	fba3 1302 	umull	r1, r3, r3, r2
 8008204:	095b      	lsrs	r3, r3, #5
 8008206:	2164      	movs	r1, #100	; 0x64
 8008208:	fb01 f303 	mul.w	r3, r1, r3
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	3332      	adds	r3, #50	; 0x32
 8008212:	4a08      	ldr	r2, [pc, #32]	; (8008234 <UART_SetConfig+0x2d4>)
 8008214:	fba2 2303 	umull	r2, r3, r2, r3
 8008218:	095b      	lsrs	r3, r3, #5
 800821a:	f003 0207 	and.w	r2, r3, #7
 800821e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4422      	add	r2, r4
 8008226:	609a      	str	r2, [r3, #8]
 8008228:	e106      	b.n	8008438 <UART_SetConfig+0x4d8>
 800822a:	bf00      	nop
 800822c:	40011000 	.word	0x40011000
 8008230:	40011400 	.word	0x40011400
 8008234:	51eb851f 	.word	0x51eb851f
 8008238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800823c:	2200      	movs	r2, #0
 800823e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008242:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008246:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800824a:	4642      	mov	r2, r8
 800824c:	464b      	mov	r3, r9
 800824e:	1891      	adds	r1, r2, r2
 8008250:	6239      	str	r1, [r7, #32]
 8008252:	415b      	adcs	r3, r3
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
 8008256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800825a:	4641      	mov	r1, r8
 800825c:	1854      	adds	r4, r2, r1
 800825e:	4649      	mov	r1, r9
 8008260:	eb43 0501 	adc.w	r5, r3, r1
 8008264:	f04f 0200 	mov.w	r2, #0
 8008268:	f04f 0300 	mov.w	r3, #0
 800826c:	00eb      	lsls	r3, r5, #3
 800826e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008272:	00e2      	lsls	r2, r4, #3
 8008274:	4614      	mov	r4, r2
 8008276:	461d      	mov	r5, r3
 8008278:	4643      	mov	r3, r8
 800827a:	18e3      	adds	r3, r4, r3
 800827c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008280:	464b      	mov	r3, r9
 8008282:	eb45 0303 	adc.w	r3, r5, r3
 8008286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800828a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008296:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800829a:	f04f 0200 	mov.w	r2, #0
 800829e:	f04f 0300 	mov.w	r3, #0
 80082a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80082a6:	4629      	mov	r1, r5
 80082a8:	008b      	lsls	r3, r1, #2
 80082aa:	4621      	mov	r1, r4
 80082ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082b0:	4621      	mov	r1, r4
 80082b2:	008a      	lsls	r2, r1, #2
 80082b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80082b8:	f7f8 fc9e 	bl	8000bf8 <__aeabi_uldivmod>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4b60      	ldr	r3, [pc, #384]	; (8008444 <UART_SetConfig+0x4e4>)
 80082c2:	fba3 2302 	umull	r2, r3, r3, r2
 80082c6:	095b      	lsrs	r3, r3, #5
 80082c8:	011c      	lsls	r4, r3, #4
 80082ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80082d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80082d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80082dc:	4642      	mov	r2, r8
 80082de:	464b      	mov	r3, r9
 80082e0:	1891      	adds	r1, r2, r2
 80082e2:	61b9      	str	r1, [r7, #24]
 80082e4:	415b      	adcs	r3, r3
 80082e6:	61fb      	str	r3, [r7, #28]
 80082e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082ec:	4641      	mov	r1, r8
 80082ee:	1851      	adds	r1, r2, r1
 80082f0:	6139      	str	r1, [r7, #16]
 80082f2:	4649      	mov	r1, r9
 80082f4:	414b      	adcs	r3, r1
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	f04f 0300 	mov.w	r3, #0
 8008300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008304:	4659      	mov	r1, fp
 8008306:	00cb      	lsls	r3, r1, #3
 8008308:	4651      	mov	r1, sl
 800830a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800830e:	4651      	mov	r1, sl
 8008310:	00ca      	lsls	r2, r1, #3
 8008312:	4610      	mov	r0, r2
 8008314:	4619      	mov	r1, r3
 8008316:	4603      	mov	r3, r0
 8008318:	4642      	mov	r2, r8
 800831a:	189b      	adds	r3, r3, r2
 800831c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008320:	464b      	mov	r3, r9
 8008322:	460a      	mov	r2, r1
 8008324:	eb42 0303 	adc.w	r3, r2, r3
 8008328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	67bb      	str	r3, [r7, #120]	; 0x78
 8008336:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008344:	4649      	mov	r1, r9
 8008346:	008b      	lsls	r3, r1, #2
 8008348:	4641      	mov	r1, r8
 800834a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800834e:	4641      	mov	r1, r8
 8008350:	008a      	lsls	r2, r1, #2
 8008352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008356:	f7f8 fc4f 	bl	8000bf8 <__aeabi_uldivmod>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	4611      	mov	r1, r2
 8008360:	4b38      	ldr	r3, [pc, #224]	; (8008444 <UART_SetConfig+0x4e4>)
 8008362:	fba3 2301 	umull	r2, r3, r3, r1
 8008366:	095b      	lsrs	r3, r3, #5
 8008368:	2264      	movs	r2, #100	; 0x64
 800836a:	fb02 f303 	mul.w	r3, r2, r3
 800836e:	1acb      	subs	r3, r1, r3
 8008370:	011b      	lsls	r3, r3, #4
 8008372:	3332      	adds	r3, #50	; 0x32
 8008374:	4a33      	ldr	r2, [pc, #204]	; (8008444 <UART_SetConfig+0x4e4>)
 8008376:	fba2 2303 	umull	r2, r3, r2, r3
 800837a:	095b      	lsrs	r3, r3, #5
 800837c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008380:	441c      	add	r4, r3
 8008382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008386:	2200      	movs	r2, #0
 8008388:	673b      	str	r3, [r7, #112]	; 0x70
 800838a:	677a      	str	r2, [r7, #116]	; 0x74
 800838c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008390:	4642      	mov	r2, r8
 8008392:	464b      	mov	r3, r9
 8008394:	1891      	adds	r1, r2, r2
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	415b      	adcs	r3, r3
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083a0:	4641      	mov	r1, r8
 80083a2:	1851      	adds	r1, r2, r1
 80083a4:	6039      	str	r1, [r7, #0]
 80083a6:	4649      	mov	r1, r9
 80083a8:	414b      	adcs	r3, r1
 80083aa:	607b      	str	r3, [r7, #4]
 80083ac:	f04f 0200 	mov.w	r2, #0
 80083b0:	f04f 0300 	mov.w	r3, #0
 80083b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80083b8:	4659      	mov	r1, fp
 80083ba:	00cb      	lsls	r3, r1, #3
 80083bc:	4651      	mov	r1, sl
 80083be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083c2:	4651      	mov	r1, sl
 80083c4:	00ca      	lsls	r2, r1, #3
 80083c6:	4610      	mov	r0, r2
 80083c8:	4619      	mov	r1, r3
 80083ca:	4603      	mov	r3, r0
 80083cc:	4642      	mov	r2, r8
 80083ce:	189b      	adds	r3, r3, r2
 80083d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80083d2:	464b      	mov	r3, r9
 80083d4:	460a      	mov	r2, r1
 80083d6:	eb42 0303 	adc.w	r3, r2, r3
 80083da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	663b      	str	r3, [r7, #96]	; 0x60
 80083e6:	667a      	str	r2, [r7, #100]	; 0x64
 80083e8:	f04f 0200 	mov.w	r2, #0
 80083ec:	f04f 0300 	mov.w	r3, #0
 80083f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80083f4:	4649      	mov	r1, r9
 80083f6:	008b      	lsls	r3, r1, #2
 80083f8:	4641      	mov	r1, r8
 80083fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083fe:	4641      	mov	r1, r8
 8008400:	008a      	lsls	r2, r1, #2
 8008402:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008406:	f7f8 fbf7 	bl	8000bf8 <__aeabi_uldivmod>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <UART_SetConfig+0x4e4>)
 8008410:	fba3 1302 	umull	r1, r3, r3, r2
 8008414:	095b      	lsrs	r3, r3, #5
 8008416:	2164      	movs	r1, #100	; 0x64
 8008418:	fb01 f303 	mul.w	r3, r1, r3
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	3332      	adds	r3, #50	; 0x32
 8008422:	4a08      	ldr	r2, [pc, #32]	; (8008444 <UART_SetConfig+0x4e4>)
 8008424:	fba2 2303 	umull	r2, r3, r2, r3
 8008428:	095b      	lsrs	r3, r3, #5
 800842a:	f003 020f 	and.w	r2, r3, #15
 800842e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4422      	add	r2, r4
 8008436:	609a      	str	r2, [r3, #8]
 8008438:	bf00      	nop
 800843a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800843e:	46bd      	mov	sp, r7
 8008440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008444:	51eb851f 	.word	0x51eb851f

08008448 <USB_CoreInit>:
 8008448:	b084      	sub	sp, #16
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	f107 001c 	add.w	r0, r7, #28
 8008456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	2b01      	cmp	r3, #1
 800845e:	d122      	bne.n	80084a6 <USB_CoreInit+0x5e>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008464:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	639a      	str	r2, [r3, #56]	; 0x38
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	60d3      	str	r3, [r2, #12]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	60da      	str	r2, [r3, #12]
 8008488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848a:	2b01      	cmp	r3, #1
 800848c:	d105      	bne.n	800849a <USB_CoreInit+0x52>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	60da      	str	r2, [r3, #12]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f001 fbee 	bl	8009c7c <USB_CoreReset>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73fb      	strb	r3, [r7, #15]
 80084a4:	e01a      	b.n	80084dc <USB_CoreInit+0x94>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	60da      	str	r2, [r3, #12]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 fbe2 	bl	8009c7c <USB_CoreReset>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]
 80084bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d106      	bne.n	80084d0 <USB_CoreInit+0x88>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	639a      	str	r2, [r3, #56]	; 0x38
 80084ce:	e005      	b.n	80084dc <USB_CoreInit+0x94>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	639a      	str	r2, [r3, #56]	; 0x38
 80084dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d10b      	bne.n	80084fa <USB_CoreInit+0xb2>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f043 0206 	orr.w	r2, r3, #6
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	609a      	str	r2, [r3, #8]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f043 0220 	orr.w	r2, r3, #32
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	609a      	str	r2, [r3, #8]
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008506:	b004      	add	sp, #16
 8008508:	4770      	bx	lr
	...

0800850c <USB_SetTurnaroundTime>:
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	4613      	mov	r3, r2
 8008518:	71fb      	strb	r3, [r7, #7]
 800851a:	79fb      	ldrb	r3, [r7, #7]
 800851c:	2b02      	cmp	r3, #2
 800851e:	d165      	bne.n	80085ec <USB_SetTurnaroundTime+0xe0>
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	4a41      	ldr	r2, [pc, #260]	; (8008628 <USB_SetTurnaroundTime+0x11c>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d906      	bls.n	8008536 <USB_SetTurnaroundTime+0x2a>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4a40      	ldr	r2, [pc, #256]	; (800862c <USB_SetTurnaroundTime+0x120>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d202      	bcs.n	8008536 <USB_SetTurnaroundTime+0x2a>
 8008530:	230f      	movs	r3, #15
 8008532:	617b      	str	r3, [r7, #20]
 8008534:	e062      	b.n	80085fc <USB_SetTurnaroundTime+0xf0>
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	4a3c      	ldr	r2, [pc, #240]	; (800862c <USB_SetTurnaroundTime+0x120>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d306      	bcc.n	800854c <USB_SetTurnaroundTime+0x40>
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4a3b      	ldr	r2, [pc, #236]	; (8008630 <USB_SetTurnaroundTime+0x124>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d202      	bcs.n	800854c <USB_SetTurnaroundTime+0x40>
 8008546:	230e      	movs	r3, #14
 8008548:	617b      	str	r3, [r7, #20]
 800854a:	e057      	b.n	80085fc <USB_SetTurnaroundTime+0xf0>
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	4a38      	ldr	r2, [pc, #224]	; (8008630 <USB_SetTurnaroundTime+0x124>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d306      	bcc.n	8008562 <USB_SetTurnaroundTime+0x56>
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	4a37      	ldr	r2, [pc, #220]	; (8008634 <USB_SetTurnaroundTime+0x128>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d202      	bcs.n	8008562 <USB_SetTurnaroundTime+0x56>
 800855c:	230d      	movs	r3, #13
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	e04c      	b.n	80085fc <USB_SetTurnaroundTime+0xf0>
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	4a33      	ldr	r2, [pc, #204]	; (8008634 <USB_SetTurnaroundTime+0x128>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d306      	bcc.n	8008578 <USB_SetTurnaroundTime+0x6c>
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4a32      	ldr	r2, [pc, #200]	; (8008638 <USB_SetTurnaroundTime+0x12c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d802      	bhi.n	8008578 <USB_SetTurnaroundTime+0x6c>
 8008572:	230c      	movs	r3, #12
 8008574:	617b      	str	r3, [r7, #20]
 8008576:	e041      	b.n	80085fc <USB_SetTurnaroundTime+0xf0>
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	4a2f      	ldr	r2, [pc, #188]	; (8008638 <USB_SetTurnaroundTime+0x12c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d906      	bls.n	800858e <USB_SetTurnaroundTime+0x82>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4a2e      	ldr	r2, [pc, #184]	; (800863c <USB_SetTurnaroundTime+0x130>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d802      	bhi.n	800858e <USB_SetTurnaroundTime+0x82>
 8008588:	230b      	movs	r3, #11
 800858a:	617b      	str	r3, [r7, #20]
 800858c:	e036      	b.n	80085fc <USB_SetTurnaroundTime+0xf0>
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	4a2a      	ldr	r2, [pc, #168]	; (800863c <USB_SetTurnaroundTime+0x130>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d906      	bls.n	80085a4 <USB_SetTurnaroundTime+0x98>
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	4a29      	ldr	r2, [pc, #164]	; (8008640 <USB_SetTurnaroundTime+0x134>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d802      	bhi.n	80085a4 <USB_SetTurnaroundTime+0x98>
 800859e:	230a      	movs	r3, #10
 80085a0:	617b      	str	r3, [r7, #20]
 80085a2:	e02b      	b.n	80085fc <USB_SetTurnaroundTime+0xf0>
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4a26      	ldr	r2, [pc, #152]	; (8008640 <USB_SetTurnaroundTime+0x134>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d906      	bls.n	80085ba <USB_SetTurnaroundTime+0xae>
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4a25      	ldr	r2, [pc, #148]	; (8008644 <USB_SetTurnaroundTime+0x138>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d202      	bcs.n	80085ba <USB_SetTurnaroundTime+0xae>
 80085b4:	2309      	movs	r3, #9
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	e020      	b.n	80085fc <USB_SetTurnaroundTime+0xf0>
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	4a21      	ldr	r2, [pc, #132]	; (8008644 <USB_SetTurnaroundTime+0x138>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d306      	bcc.n	80085d0 <USB_SetTurnaroundTime+0xc4>
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4a20      	ldr	r2, [pc, #128]	; (8008648 <USB_SetTurnaroundTime+0x13c>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d802      	bhi.n	80085d0 <USB_SetTurnaroundTime+0xc4>
 80085ca:	2308      	movs	r3, #8
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	e015      	b.n	80085fc <USB_SetTurnaroundTime+0xf0>
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4a1d      	ldr	r2, [pc, #116]	; (8008648 <USB_SetTurnaroundTime+0x13c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d906      	bls.n	80085e6 <USB_SetTurnaroundTime+0xda>
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4a1c      	ldr	r2, [pc, #112]	; (800864c <USB_SetTurnaroundTime+0x140>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d202      	bcs.n	80085e6 <USB_SetTurnaroundTime+0xda>
 80085e0:	2307      	movs	r3, #7
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	e00a      	b.n	80085fc <USB_SetTurnaroundTime+0xf0>
 80085e6:	2306      	movs	r3, #6
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	e007      	b.n	80085fc <USB_SetTurnaroundTime+0xf0>
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d102      	bne.n	80085f8 <USB_SetTurnaroundTime+0xec>
 80085f2:	2309      	movs	r3, #9
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	e001      	b.n	80085fc <USB_SetTurnaroundTime+0xf0>
 80085f8:	2309      	movs	r3, #9
 80085fa:	617b      	str	r3, [r7, #20]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	60da      	str	r2, [r3, #12]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	68da      	ldr	r2, [r3, #12]
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	029b      	lsls	r3, r3, #10
 8008610:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008614:	431a      	orrs	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	60da      	str	r2, [r3, #12]
 800861a:	2300      	movs	r3, #0
 800861c:	4618      	mov	r0, r3
 800861e:	371c      	adds	r7, #28
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	00d8acbf 	.word	0x00d8acbf
 800862c:	00e4e1c0 	.word	0x00e4e1c0
 8008630:	00f42400 	.word	0x00f42400
 8008634:	01067380 	.word	0x01067380
 8008638:	011a499f 	.word	0x011a499f
 800863c:	01312cff 	.word	0x01312cff
 8008640:	014ca43f 	.word	0x014ca43f
 8008644:	016e3600 	.word	0x016e3600
 8008648:	01a6ab1f 	.word	0x01a6ab1f
 800864c:	01e84800 	.word	0x01e84800

08008650 <USB_EnableGlobalInt>:
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f043 0201 	orr.w	r2, r3, #1
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	609a      	str	r2, [r3, #8]
 8008664:	2300      	movs	r3, #0
 8008666:	4618      	mov	r0, r3
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <USB_DisableGlobalInt>:
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f023 0201 	bic.w	r2, r3, #1
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	609a      	str	r2, [r3, #8]
 8008686:	2300      	movs	r3, #0
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USB_SetCurrentMode>:
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	70fb      	strb	r3, [r7, #3]
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	60da      	str	r2, [r3, #12]
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d115      	bne.n	80086e2 <USB_SetCurrentMode+0x4e>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	60da      	str	r2, [r3, #12]
 80086c2:	2001      	movs	r0, #1
 80086c4:	f7f9 fd58 	bl	8002178 <HAL_Delay>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3301      	adds	r3, #1
 80086cc:	60fb      	str	r3, [r7, #12]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f001 fa45 	bl	8009b5e <USB_GetMode>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d01e      	beq.n	8008718 <USB_SetCurrentMode+0x84>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b31      	cmp	r3, #49	; 0x31
 80086de:	d9f0      	bls.n	80086c2 <USB_SetCurrentMode+0x2e>
 80086e0:	e01a      	b.n	8008718 <USB_SetCurrentMode+0x84>
 80086e2:	78fb      	ldrb	r3, [r7, #3]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d115      	bne.n	8008714 <USB_SetCurrentMode+0x80>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60da      	str	r2, [r3, #12]
 80086f4:	2001      	movs	r0, #1
 80086f6:	f7f9 fd3f 	bl	8002178 <HAL_Delay>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3301      	adds	r3, #1
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f001 fa2c 	bl	8009b5e <USB_GetMode>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <USB_SetCurrentMode+0x84>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2b31      	cmp	r3, #49	; 0x31
 8008710:	d9f0      	bls.n	80086f4 <USB_SetCurrentMode+0x60>
 8008712:	e001      	b.n	8008718 <USB_SetCurrentMode+0x84>
 8008714:	2301      	movs	r3, #1
 8008716:	e005      	b.n	8008724 <USB_SetCurrentMode+0x90>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b32      	cmp	r3, #50	; 0x32
 800871c:	d101      	bne.n	8008722 <USB_SetCurrentMode+0x8e>
 800871e:	2301      	movs	r3, #1
 8008720:	e000      	b.n	8008724 <USB_SetCurrentMode+0x90>
 8008722:	2300      	movs	r3, #0
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USB_DevInit>:
 800872c:	b084      	sub	sp, #16
 800872e:	b580      	push	{r7, lr}
 8008730:	b086      	sub	sp, #24
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800873a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800873e:	2300      	movs	r3, #0
 8008740:	75fb      	strb	r3, [r7, #23]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	2300      	movs	r3, #0
 8008748:	613b      	str	r3, [r7, #16]
 800874a:	e009      	b.n	8008760 <USB_DevInit+0x34>
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	3340      	adds	r3, #64	; 0x40
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	2200      	movs	r2, #0
 8008758:	605a      	str	r2, [r3, #4]
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	3301      	adds	r3, #1
 800875e:	613b      	str	r3, [r7, #16]
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	2b0e      	cmp	r3, #14
 8008764:	d9f2      	bls.n	800874c <USB_DevInit+0x20>
 8008766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008768:	2b00      	cmp	r3, #0
 800876a:	d11c      	bne.n	80087a6 <USB_DevInit+0x7a>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800877a:	f043 0302 	orr.w	r3, r3, #2
 800877e:	6053      	str	r3, [r2, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008784:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	639a      	str	r2, [r3, #56]	; 0x38
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008790:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	639a      	str	r2, [r3, #56]	; 0x38
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	639a      	str	r2, [r3, #56]	; 0x38
 80087a4:	e00b      	b.n	80087be <USB_DevInit+0x92>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	639a      	str	r2, [r3, #56]	; 0x38
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	639a      	str	r2, [r3, #56]	; 0x38
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087c4:	461a      	mov	r2, r3
 80087c6:	2300      	movs	r3, #0
 80087c8:	6013      	str	r3, [r2, #0]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d0:	4619      	mov	r1, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d8:	461a      	mov	r2, r3
 80087da:	680b      	ldr	r3, [r1, #0]
 80087dc:	6013      	str	r3, [r2, #0]
 80087de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d10c      	bne.n	80087fe <USB_DevInit+0xd2>
 80087e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d104      	bne.n	80087f4 <USB_DevInit+0xc8>
 80087ea:	2100      	movs	r1, #0
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f965 	bl	8008abc <USB_SetDevSpeed>
 80087f2:	e008      	b.n	8008806 <USB_DevInit+0xda>
 80087f4:	2101      	movs	r1, #1
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f960 	bl	8008abc <USB_SetDevSpeed>
 80087fc:	e003      	b.n	8008806 <USB_DevInit+0xda>
 80087fe:	2103      	movs	r1, #3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f95b 	bl	8008abc <USB_SetDevSpeed>
 8008806:	2110      	movs	r1, #16
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f8f3 	bl	80089f4 <USB_FlushTxFifo>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <USB_DevInit+0xec>
 8008814:	2301      	movs	r3, #1
 8008816:	75fb      	strb	r3, [r7, #23]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f91f 	bl	8008a5c <USB_FlushRxFifo>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <USB_DevInit+0xfc>
 8008824:	2301      	movs	r3, #1
 8008826:	75fb      	strb	r3, [r7, #23]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800882e:	461a      	mov	r2, r3
 8008830:	2300      	movs	r3, #0
 8008832:	6113      	str	r3, [r2, #16]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800883a:	461a      	mov	r2, r3
 800883c:	2300      	movs	r3, #0
 800883e:	6153      	str	r3, [r2, #20]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008846:	461a      	mov	r2, r3
 8008848:	2300      	movs	r3, #0
 800884a:	61d3      	str	r3, [r2, #28]
 800884c:	2300      	movs	r3, #0
 800884e:	613b      	str	r3, [r7, #16]
 8008850:	e043      	b.n	80088da <USB_DevInit+0x1ae>
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008868:	d118      	bne.n	800889c <USB_DevInit+0x170>
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <USB_DevInit+0x15a>
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800887c:	461a      	mov	r2, r3
 800887e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	e013      	b.n	80088ae <USB_DevInit+0x182>
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008892:	461a      	mov	r2, r3
 8008894:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008898:	6013      	str	r3, [r2, #0]
 800889a:	e008      	b.n	80088ae <USB_DevInit+0x182>
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a8:	461a      	mov	r2, r3
 80088aa:	2300      	movs	r3, #0
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ba:	461a      	mov	r2, r3
 80088bc:	2300      	movs	r3, #0
 80088be:	6113      	str	r3, [r2, #16]
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088cc:	461a      	mov	r2, r3
 80088ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088d2:	6093      	str	r3, [r2, #8]
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	3301      	adds	r3, #1
 80088d8:	613b      	str	r3, [r7, #16]
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d3b7      	bcc.n	8008852 <USB_DevInit+0x126>
 80088e2:	2300      	movs	r3, #0
 80088e4:	613b      	str	r3, [r7, #16]
 80088e6:	e043      	b.n	8008970 <USB_DevInit+0x244>
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088fe:	d118      	bne.n	8008932 <USB_DevInit+0x206>
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <USB_DevInit+0x1f0>
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4413      	add	r3, r2
 800890e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008912:	461a      	mov	r2, r3
 8008914:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	e013      	b.n	8008944 <USB_DevInit+0x218>
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008928:	461a      	mov	r2, r3
 800892a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	e008      	b.n	8008944 <USB_DevInit+0x218>
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	015a      	lsls	r2, r3, #5
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4413      	add	r3, r2
 800893a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893e:	461a      	mov	r2, r3
 8008940:	2300      	movs	r3, #0
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4413      	add	r3, r2
 800894c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008950:	461a      	mov	r2, r3
 8008952:	2300      	movs	r3, #0
 8008954:	6113      	str	r3, [r2, #16]
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	4413      	add	r3, r2
 800895e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008962:	461a      	mov	r2, r3
 8008964:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008968:	6093      	str	r3, [r2, #8]
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	3301      	adds	r3, #1
 800896e:	613b      	str	r3, [r7, #16]
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	429a      	cmp	r2, r3
 8008976:	d3b7      	bcc.n	80088e8 <USB_DevInit+0x1bc>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800898a:	6113      	str	r3, [r2, #16]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	619a      	str	r2, [r3, #24]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008998:	615a      	str	r2, [r3, #20]
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	2b00      	cmp	r3, #0
 800899e:	d105      	bne.n	80089ac <USB_DevInit+0x280>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	f043 0210 	orr.w	r2, r3, #16
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	619a      	str	r2, [r3, #24]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699a      	ldr	r2, [r3, #24]
 80089b0:	4b0f      	ldr	r3, [pc, #60]	; (80089f0 <USB_DevInit+0x2c4>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	6193      	str	r3, [r2, #24]
 80089b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d005      	beq.n	80089ca <USB_DevInit+0x29e>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	f043 0208 	orr.w	r2, r3, #8
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	619a      	str	r2, [r3, #24]
 80089ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d107      	bne.n	80089e0 <USB_DevInit+0x2b4>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089d8:	f043 0304 	orr.w	r3, r3, #4
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	6193      	str	r3, [r2, #24]
 80089e0:	7dfb      	ldrb	r3, [r7, #23]
 80089e2:	4618      	mov	r0, r3
 80089e4:	3718      	adds	r7, #24
 80089e6:	46bd      	mov	sp, r7
 80089e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089ec:	b004      	add	sp, #16
 80089ee:	4770      	bx	lr
 80089f0:	803c3800 	.word	0x803c3800

080089f4 <USB_FlushTxFifo>:
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
 80089fe:	2300      	movs	r3, #0
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3301      	adds	r3, #1
 8008a06:	60fb      	str	r3, [r7, #12]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4a13      	ldr	r2, [pc, #76]	; (8008a58 <USB_FlushTxFifo+0x64>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d901      	bls.n	8008a14 <USB_FlushTxFifo+0x20>
 8008a10:	2303      	movs	r3, #3
 8008a12:	e01b      	b.n	8008a4c <USB_FlushTxFifo+0x58>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	daf2      	bge.n	8008a02 <USB_FlushTxFifo+0xe>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	019b      	lsls	r3, r3, #6
 8008a24:	f043 0220 	orr.w	r2, r3, #32
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	611a      	str	r2, [r3, #16]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4a08      	ldr	r2, [pc, #32]	; (8008a58 <USB_FlushTxFifo+0x64>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d901      	bls.n	8008a3e <USB_FlushTxFifo+0x4a>
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e006      	b.n	8008a4c <USB_FlushTxFifo+0x58>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	f003 0320 	and.w	r3, r3, #32
 8008a46:	2b20      	cmp	r3, #32
 8008a48:	d0f0      	beq.n	8008a2c <USB_FlushTxFifo+0x38>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	00030d40 	.word	0x00030d40

08008a5c <USB_FlushRxFifo>:
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	2300      	movs	r3, #0
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	4a11      	ldr	r2, [pc, #68]	; (8008ab8 <USB_FlushRxFifo+0x5c>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d901      	bls.n	8008a7a <USB_FlushRxFifo+0x1e>
 8008a76:	2303      	movs	r3, #3
 8008a78:	e018      	b.n	8008aac <USB_FlushRxFifo+0x50>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	daf2      	bge.n	8008a68 <USB_FlushRxFifo+0xc>
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2210      	movs	r2, #16
 8008a8a:	611a      	str	r2, [r3, #16]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	60fb      	str	r3, [r7, #12]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4a08      	ldr	r2, [pc, #32]	; (8008ab8 <USB_FlushRxFifo+0x5c>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d901      	bls.n	8008a9e <USB_FlushRxFifo+0x42>
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e006      	b.n	8008aac <USB_FlushRxFifo+0x50>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f003 0310 	and.w	r3, r3, #16
 8008aa6:	2b10      	cmp	r3, #16
 8008aa8:	d0f0      	beq.n	8008a8c <USB_FlushRxFifo+0x30>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr
 8008ab8:	00030d40 	.word	0x00030d40

08008abc <USB_SetDevSpeed>:
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	68f9      	ldr	r1, [r7, #12]
 8008ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008adc:	4313      	orrs	r3, r2
 8008ade:	600b      	str	r3, [r1, #0]
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <USB_GetDevSpeed>:
 8008aee:	b480      	push	{r7}
 8008af0:	b087      	sub	sp, #28
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	613b      	str	r3, [r7, #16]
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f003 0306 	and.w	r3, r3, #6
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d102      	bne.n	8008b14 <USB_GetDevSpeed+0x26>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	75fb      	strb	r3, [r7, #23]
 8008b12:	e00a      	b.n	8008b2a <USB_GetDevSpeed+0x3c>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d002      	beq.n	8008b20 <USB_GetDevSpeed+0x32>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2b06      	cmp	r3, #6
 8008b1e:	d102      	bne.n	8008b26 <USB_GetDevSpeed+0x38>
 8008b20:	2302      	movs	r3, #2
 8008b22:	75fb      	strb	r3, [r7, #23]
 8008b24:	e001      	b.n	8008b2a <USB_GetDevSpeed+0x3c>
 8008b26:	230f      	movs	r3, #15
 8008b28:	75fb      	strb	r3, [r7, #23]
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	371c      	adds	r7, #28
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <USB_ActivateEndpoint>:
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	60bb      	str	r3, [r7, #8]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	785b      	ldrb	r3, [r3, #1]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d13a      	bne.n	8008bca <USB_ActivateEndpoint+0x92>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5a:	69da      	ldr	r2, [r3, #28]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	f003 030f 	and.w	r3, r3, #15
 8008b64:	2101      	movs	r1, #1
 8008b66:	fa01 f303 	lsl.w	r3, r1, r3
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	68f9      	ldr	r1, [r7, #12]
 8008b6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b72:	4313      	orrs	r3, r2
 8008b74:	61cb      	str	r3, [r1, #28]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d155      	bne.n	8008c38 <USB_ActivateEndpoint+0x100>
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	791b      	ldrb	r3, [r3, #4]
 8008ba6:	049b      	lsls	r3, r3, #18
 8008ba8:	4319      	orrs	r1, r3
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	059b      	lsls	r3, r3, #22
 8008bae:	430b      	orrs	r3, r1
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	0151      	lsls	r1, r2, #5
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	440a      	add	r2, r1
 8008bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	e036      	b.n	8008c38 <USB_ActivateEndpoint+0x100>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd0:	69da      	ldr	r2, [r3, #28]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	2101      	movs	r1, #1
 8008bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8008be0:	041b      	lsls	r3, r3, #16
 8008be2:	68f9      	ldr	r1, [r7, #12]
 8008be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008be8:	4313      	orrs	r3, r2
 8008bea:	61cb      	str	r3, [r1, #28]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d11a      	bne.n	8008c38 <USB_ActivateEndpoint+0x100>
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	791b      	ldrb	r3, [r3, #4]
 8008c1c:	049b      	lsls	r3, r3, #18
 8008c1e:	430b      	orrs	r3, r1
 8008c20:	4313      	orrs	r3, r2
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	0151      	lsls	r1, r2, #5
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	440a      	add	r2, r1
 8008c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c36:	6013      	str	r3, [r2, #0]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
	...

08008c48 <USB_DeactivateEndpoint>:
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	60fb      	str	r3, [r7, #12]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	60bb      	str	r3, [r7, #8]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	785b      	ldrb	r3, [r3, #1]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d161      	bne.n	8008d28 <USB_DeactivateEndpoint+0xe0>
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c7a:	d11f      	bne.n	8008cbc <USB_DeactivateEndpoint+0x74>
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	0151      	lsls	r1, r2, #5
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	440a      	add	r2, r1
 8008c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	0151      	lsls	r1, r2, #5
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	440a      	add	r2, r1
 8008cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	f003 030f 	and.w	r3, r3, #15
 8008ccc:	2101      	movs	r1, #1
 8008cce:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	43db      	mvns	r3, r3
 8008cd6:	68f9      	ldr	r1, [r7, #12]
 8008cd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cdc:	4013      	ands	r3, r2
 8008cde:	63cb      	str	r3, [r1, #60]	; 0x3c
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce6:	69da      	ldr	r2, [r3, #28]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	f003 030f 	and.w	r3, r3, #15
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	43db      	mvns	r3, r3
 8008cfa:	68f9      	ldr	r1, [r7, #12]
 8008cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d00:	4013      	ands	r3, r2
 8008d02:	61cb      	str	r3, [r1, #28]
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	0159      	lsls	r1, r3, #5
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	440b      	add	r3, r1
 8008d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4b35      	ldr	r3, [pc, #212]	; (8008df8 <USB_DeactivateEndpoint+0x1b0>)
 8008d22:	4013      	ands	r3, r2
 8008d24:	600b      	str	r3, [r1, #0]
 8008d26:	e060      	b.n	8008dea <USB_DeactivateEndpoint+0x1a2>
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d3e:	d11f      	bne.n	8008d80 <USB_DeactivateEndpoint+0x138>
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	0151      	lsls	r1, r2, #5
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	440a      	add	r2, r1
 8008d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d5e:	6013      	str	r3, [r2, #0]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	0151      	lsls	r1, r2, #5
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	440a      	add	r2, r1
 8008d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	f003 030f 	and.w	r3, r3, #15
 8008d90:	2101      	movs	r1, #1
 8008d92:	fa01 f303 	lsl.w	r3, r1, r3
 8008d96:	041b      	lsls	r3, r3, #16
 8008d98:	43db      	mvns	r3, r3
 8008d9a:	68f9      	ldr	r1, [r7, #12]
 8008d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008da0:	4013      	ands	r3, r2
 8008da2:	63cb      	str	r3, [r1, #60]	; 0x3c
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008daa:	69da      	ldr	r2, [r3, #28]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	2101      	movs	r1, #1
 8008db6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dba:	041b      	lsls	r3, r3, #16
 8008dbc:	43db      	mvns	r3, r3
 8008dbe:	68f9      	ldr	r1, [r7, #12]
 8008dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	61cb      	str	r3, [r1, #28]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	0159      	lsls	r1, r3, #5
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	440b      	add	r3, r1
 8008dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de2:	4619      	mov	r1, r3
 8008de4:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <USB_DeactivateEndpoint+0x1b4>)
 8008de6:	4013      	ands	r3, r2
 8008de8:	600b      	str	r3, [r1, #0]
 8008dea:	2300      	movs	r3, #0
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	ec337800 	.word	0xec337800
 8008dfc:	eff37800 	.word	0xeff37800

08008e00 <USB_EPStartXfer>:
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b08a      	sub	sp, #40	; 0x28
 8008e04:	af02      	add	r7, sp, #8
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	71fb      	strb	r3, [r7, #7]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	61fb      	str	r3, [r7, #28]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	61bb      	str	r3, [r7, #24]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	785b      	ldrb	r3, [r3, #1]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	f040 815c 	bne.w	80090da <USB_EPStartXfer+0x2da>
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d132      	bne.n	8008e90 <USB_EPStartXfer+0x90>
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	0151      	lsls	r1, r2, #5
 8008e3c:	69fa      	ldr	r2, [r7, #28]
 8008e3e:	440a      	add	r2, r1
 8008e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e4c:	6113      	str	r3, [r2, #16]
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	0151      	lsls	r1, r2, #5
 8008e60:	69fa      	ldr	r2, [r7, #28]
 8008e62:	440a      	add	r2, r1
 8008e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e6c:	6113      	str	r3, [r2, #16]
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	015a      	lsls	r2, r3, #5
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	4413      	add	r3, r2
 8008e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	69ba      	ldr	r2, [r7, #24]
 8008e7e:	0151      	lsls	r1, r2, #5
 8008e80:	69fa      	ldr	r2, [r7, #28]
 8008e82:	440a      	add	r2, r1
 8008e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e88:	0cdb      	lsrs	r3, r3, #19
 8008e8a:	04db      	lsls	r3, r3, #19
 8008e8c:	6113      	str	r3, [r2, #16]
 8008e8e:	e074      	b.n	8008f7a <USB_EPStartXfer+0x17a>
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	69ba      	ldr	r2, [r7, #24]
 8008ea0:	0151      	lsls	r1, r2, #5
 8008ea2:	69fa      	ldr	r2, [r7, #28]
 8008ea4:	440a      	add	r2, r1
 8008ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eaa:	0cdb      	lsrs	r3, r3, #19
 8008eac:	04db      	lsls	r3, r3, #19
 8008eae:	6113      	str	r3, [r2, #16]
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	69ba      	ldr	r2, [r7, #24]
 8008ec0:	0151      	lsls	r1, r2, #5
 8008ec2:	69fa      	ldr	r2, [r7, #28]
 8008ec4:	440a      	add	r2, r1
 8008ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ece:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ed2:	6113      	str	r3, [r2, #16]
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee0:	691a      	ldr	r2, [r3, #16]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	6999      	ldr	r1, [r3, #24]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	440b      	add	r3, r1
 8008eec:	1e59      	subs	r1, r3, #1
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ef6:	04d9      	lsls	r1, r3, #19
 8008ef8:	4b9d      	ldr	r3, [pc, #628]	; (8009170 <USB_EPStartXfer+0x370>)
 8008efa:	400b      	ands	r3, r1
 8008efc:	69b9      	ldr	r1, [r7, #24]
 8008efe:	0148      	lsls	r0, r1, #5
 8008f00:	69f9      	ldr	r1, [r7, #28]
 8008f02:	4401      	add	r1, r0
 8008f04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	610b      	str	r3, [r1, #16]
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f18:	691a      	ldr	r2, [r3, #16]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f22:	69b9      	ldr	r1, [r7, #24]
 8008f24:	0148      	lsls	r0, r1, #5
 8008f26:	69f9      	ldr	r1, [r7, #28]
 8008f28:	4401      	add	r1, r0
 8008f2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	610b      	str	r3, [r1, #16]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	791b      	ldrb	r3, [r3, #4]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d11f      	bne.n	8008f7a <USB_EPStartXfer+0x17a>
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	69ba      	ldr	r2, [r7, #24]
 8008f4a:	0151      	lsls	r1, r2, #5
 8008f4c:	69fa      	ldr	r2, [r7, #28]
 8008f4e:	440a      	add	r2, r1
 8008f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008f58:	6113      	str	r3, [r2, #16]
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	0151      	lsls	r1, r2, #5
 8008f6c:	69fa      	ldr	r2, [r7, #28]
 8008f6e:	440a      	add	r2, r1
 8008f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f78:	6113      	str	r3, [r2, #16]
 8008f7a:	79fb      	ldrb	r3, [r7, #7]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d14b      	bne.n	8009018 <USB_EPStartXfer+0x218>
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d009      	beq.n	8008f9c <USB_EPStartXfer+0x19c>
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f94:	461a      	mov	r2, r3
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	6153      	str	r3, [r2, #20]
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	791b      	ldrb	r3, [r3, #4]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d128      	bne.n	8008ff6 <USB_EPStartXfer+0x1f6>
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d110      	bne.n	8008fd6 <USB_EPStartXfer+0x1d6>
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	69ba      	ldr	r2, [r7, #24]
 8008fc4:	0151      	lsls	r1, r2, #5
 8008fc6:	69fa      	ldr	r2, [r7, #28]
 8008fc8:	440a      	add	r2, r1
 8008fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	e00f      	b.n	8008ff6 <USB_EPStartXfer+0x1f6>
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	0151      	lsls	r1, r2, #5
 8008fe8:	69fa      	ldr	r2, [r7, #28]
 8008fea:	440a      	add	r2, r1
 8008fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	0151      	lsls	r1, r2, #5
 8009008:	69fa      	ldr	r2, [r7, #28]
 800900a:	440a      	add	r2, r1
 800900c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009010:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009014:	6013      	str	r3, [r2, #0]
 8009016:	e133      	b.n	8009280 <USB_EPStartXfer+0x480>
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009032:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	791b      	ldrb	r3, [r3, #4]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d015      	beq.n	800906c <USB_EPStartXfer+0x26c>
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 811b 	beq.w	8009280 <USB_EPStartXfer+0x480>
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	f003 030f 	and.w	r3, r3, #15
 800905a:	2101      	movs	r1, #1
 800905c:	fa01 f303 	lsl.w	r3, r1, r3
 8009060:	69f9      	ldr	r1, [r7, #28]
 8009062:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009066:	4313      	orrs	r3, r2
 8009068:	634b      	str	r3, [r1, #52]	; 0x34
 800906a:	e109      	b.n	8009280 <USB_EPStartXfer+0x480>
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009078:	2b00      	cmp	r3, #0
 800907a:	d110      	bne.n	800909e <USB_EPStartXfer+0x29e>
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	0151      	lsls	r1, r2, #5
 800908e:	69fa      	ldr	r2, [r7, #28]
 8009090:	440a      	add	r2, r1
 8009092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009096:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	e00f      	b.n	80090be <USB_EPStartXfer+0x2be>
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	015a      	lsls	r2, r3, #5
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	4413      	add	r3, r2
 80090a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	69ba      	ldr	r2, [r7, #24]
 80090ae:	0151      	lsls	r1, r2, #5
 80090b0:	69fa      	ldr	r2, [r7, #28]
 80090b2:	440a      	add	r2, r1
 80090b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090bc:	6013      	str	r3, [r2, #0]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	6919      	ldr	r1, [r3, #16]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	781a      	ldrb	r2, [r3, #0]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	b298      	uxth	r0, r3
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	4603      	mov	r3, r0
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 fade 	bl	8009694 <USB_WritePacket>
 80090d8:	e0d2      	b.n	8009280 <USB_EPStartXfer+0x480>
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	0151      	lsls	r1, r2, #5
 80090ec:	69fa      	ldr	r2, [r7, #28]
 80090ee:	440a      	add	r2, r1
 80090f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090f4:	0cdb      	lsrs	r3, r3, #19
 80090f6:	04db      	lsls	r3, r3, #19
 80090f8:	6113      	str	r3, [r2, #16]
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	015a      	lsls	r2, r3, #5
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	4413      	add	r3, r2
 8009102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	0151      	lsls	r1, r2, #5
 800910c:	69fa      	ldr	r2, [r7, #28]
 800910e:	440a      	add	r2, r1
 8009110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009114:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009118:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800911c:	6113      	str	r3, [r2, #16]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d126      	bne.n	8009174 <USB_EPStartXfer+0x374>
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	4413      	add	r3, r2
 800912e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009132:	691a      	ldr	r2, [r3, #16]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800913c:	69b9      	ldr	r1, [r7, #24]
 800913e:	0148      	lsls	r0, r1, #5
 8009140:	69f9      	ldr	r1, [r7, #28]
 8009142:	4401      	add	r1, r0
 8009144:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009148:	4313      	orrs	r3, r2
 800914a:	610b      	str	r3, [r1, #16]
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	0151      	lsls	r1, r2, #5
 800915e:	69fa      	ldr	r2, [r7, #28]
 8009160:	440a      	add	r2, r1
 8009162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009166:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800916a:	6113      	str	r3, [r2, #16]
 800916c:	e03a      	b.n	80091e4 <USB_EPStartXfer+0x3e4>
 800916e:	bf00      	nop
 8009170:	1ff80000 	.word	0x1ff80000
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	699a      	ldr	r2, [r3, #24]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	4413      	add	r3, r2
 800917e:	1e5a      	subs	r2, r3, #1
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	fbb2 f3f3 	udiv	r3, r2, r3
 8009188:	82fb      	strh	r3, [r7, #22]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	8afa      	ldrh	r2, [r7, #22]
 8009190:	fb03 f202 	mul.w	r2, r3, r2
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	61da      	str	r2, [r3, #28]
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a4:	691a      	ldr	r2, [r3, #16]
 80091a6:	8afb      	ldrh	r3, [r7, #22]
 80091a8:	04d9      	lsls	r1, r3, #19
 80091aa:	4b38      	ldr	r3, [pc, #224]	; (800928c <USB_EPStartXfer+0x48c>)
 80091ac:	400b      	ands	r3, r1
 80091ae:	69b9      	ldr	r1, [r7, #24]
 80091b0:	0148      	lsls	r0, r1, #5
 80091b2:	69f9      	ldr	r1, [r7, #28]
 80091b4:	4401      	add	r1, r0
 80091b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091ba:	4313      	orrs	r3, r2
 80091bc:	610b      	str	r3, [r1, #16]
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ca:	691a      	ldr	r2, [r3, #16]
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091d4:	69b9      	ldr	r1, [r7, #24]
 80091d6:	0148      	lsls	r0, r1, #5
 80091d8:	69f9      	ldr	r1, [r7, #28]
 80091da:	4401      	add	r1, r0
 80091dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091e0:	4313      	orrs	r3, r2
 80091e2:	610b      	str	r3, [r1, #16]
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d10d      	bne.n	8009206 <USB_EPStartXfer+0x406>
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d009      	beq.n	8009206 <USB_EPStartXfer+0x406>
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	6919      	ldr	r1, [r3, #16]
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009202:	460a      	mov	r2, r1
 8009204:	615a      	str	r2, [r3, #20]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	791b      	ldrb	r3, [r3, #4]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d128      	bne.n	8009260 <USB_EPStartXfer+0x460>
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921a:	2b00      	cmp	r3, #0
 800921c:	d110      	bne.n	8009240 <USB_EPStartXfer+0x440>
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	0151      	lsls	r1, r2, #5
 8009230:	69fa      	ldr	r2, [r7, #28]
 8009232:	440a      	add	r2, r1
 8009234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800923c:	6013      	str	r3, [r2, #0]
 800923e:	e00f      	b.n	8009260 <USB_EPStartXfer+0x460>
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	0151      	lsls	r1, r2, #5
 8009252:	69fa      	ldr	r2, [r7, #28]
 8009254:	440a      	add	r2, r1
 8009256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800925a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800925e:	6013      	str	r3, [r2, #0]
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	69ba      	ldr	r2, [r7, #24]
 8009270:	0151      	lsls	r1, r2, #5
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	440a      	add	r2, r1
 8009276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800927a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800927e:	6013      	str	r3, [r2, #0]
 8009280:	2300      	movs	r3, #0
 8009282:	4618      	mov	r0, r3
 8009284:	3720      	adds	r7, #32
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	1ff80000 	.word	0x1ff80000

08009290 <USB_EP0StartXfer>:
 8009290:	b480      	push	{r7}
 8009292:	b087      	sub	sp, #28
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	4613      	mov	r3, r2
 800929c:	71fb      	strb	r3, [r7, #7]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	617b      	str	r3, [r7, #20]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	613b      	str	r3, [r7, #16]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	785b      	ldrb	r3, [r3, #1]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	f040 80ce 	bne.w	800944e <USB_EP0StartXfer+0x1be>
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d132      	bne.n	8009320 <USB_EP0StartXfer+0x90>
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	0151      	lsls	r1, r2, #5
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	440a      	add	r2, r1
 80092d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092dc:	6113      	str	r3, [r2, #16]
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	0151      	lsls	r1, r2, #5
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	440a      	add	r2, r1
 80092f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092fc:	6113      	str	r3, [r2, #16]
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	4413      	add	r3, r2
 8009306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	0151      	lsls	r1, r2, #5
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	440a      	add	r2, r1
 8009314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009318:	0cdb      	lsrs	r3, r3, #19
 800931a:	04db      	lsls	r3, r3, #19
 800931c:	6113      	str	r3, [r2, #16]
 800931e:	e04e      	b.n	80093be <USB_EP0StartXfer+0x12e>
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	0151      	lsls	r1, r2, #5
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	440a      	add	r2, r1
 8009336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800933a:	0cdb      	lsrs	r3, r3, #19
 800933c:	04db      	lsls	r3, r3, #19
 800933e:	6113      	str	r3, [r2, #16]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	4413      	add	r3, r2
 8009348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	0151      	lsls	r1, r2, #5
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	440a      	add	r2, r1
 8009356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800935a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800935e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009362:	6113      	str	r3, [r2, #16]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	699a      	ldr	r2, [r3, #24]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	429a      	cmp	r2, r3
 800936e:	d903      	bls.n	8009378 <USB_EP0StartXfer+0xe8>
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	68da      	ldr	r2, [r3, #12]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	619a      	str	r2, [r3, #24]
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	4413      	add	r3, r2
 8009380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	0151      	lsls	r1, r2, #5
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	440a      	add	r2, r1
 800938e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009392:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009396:	6113      	str	r3, [r2, #16]
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a4:	691a      	ldr	r2, [r3, #16]
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093ae:	6939      	ldr	r1, [r7, #16]
 80093b0:	0148      	lsls	r0, r1, #5
 80093b2:	6979      	ldr	r1, [r7, #20]
 80093b4:	4401      	add	r1, r0
 80093b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093ba:	4313      	orrs	r3, r2
 80093bc:	610b      	str	r3, [r1, #16]
 80093be:	79fb      	ldrb	r3, [r7, #7]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d11e      	bne.n	8009402 <USB_EP0StartXfer+0x172>
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d009      	beq.n	80093e0 <USB_EP0StartXfer+0x150>
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	015a      	lsls	r2, r3, #5
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	4413      	add	r3, r2
 80093d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d8:	461a      	mov	r2, r3
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	6153      	str	r3, [r2, #20]
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	0151      	lsls	r1, r2, #5
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	440a      	add	r2, r1
 80093f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	e097      	b.n	8009532 <USB_EP0StartXfer+0x2a2>
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	0151      	lsls	r1, r2, #5
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	440a      	add	r2, r1
 8009418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800941c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	2b00      	cmp	r3, #0
 8009428:	f000 8083 	beq.w	8009532 <USB_EP0StartXfer+0x2a2>
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	f003 030f 	and.w	r3, r3, #15
 800943c:	2101      	movs	r1, #1
 800943e:	fa01 f303 	lsl.w	r3, r1, r3
 8009442:	6979      	ldr	r1, [r7, #20]
 8009444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009448:	4313      	orrs	r3, r2
 800944a:	634b      	str	r3, [r1, #52]	; 0x34
 800944c:	e071      	b.n	8009532 <USB_EP0StartXfer+0x2a2>
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	4413      	add	r3, r2
 8009456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	0151      	lsls	r1, r2, #5
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	440a      	add	r2, r1
 8009464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009468:	0cdb      	lsrs	r3, r3, #19
 800946a:	04db      	lsls	r3, r3, #19
 800946c:	6113      	str	r3, [r2, #16]
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	4413      	add	r3, r2
 8009476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	0151      	lsls	r1, r2, #5
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	440a      	add	r2, r1
 8009484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009488:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800948c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009490:	6113      	str	r3, [r2, #16]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d003      	beq.n	80094a2 <USB_EP0StartXfer+0x212>
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	619a      	str	r2, [r3, #24]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	68da      	ldr	r2, [r3, #12]
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	61da      	str	r2, [r3, #28]
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	015a      	lsls	r2, r3, #5
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	4413      	add	r3, r2
 80094b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	0151      	lsls	r1, r2, #5
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	440a      	add	r2, r1
 80094c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094c8:	6113      	str	r3, [r2, #16]
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d6:	691a      	ldr	r2, [r3, #16]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	69db      	ldr	r3, [r3, #28]
 80094dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094e0:	6939      	ldr	r1, [r7, #16]
 80094e2:	0148      	lsls	r0, r1, #5
 80094e4:	6979      	ldr	r1, [r7, #20]
 80094e6:	4401      	add	r1, r0
 80094e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094ec:	4313      	orrs	r3, r2
 80094ee:	610b      	str	r3, [r1, #16]
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d10d      	bne.n	8009512 <USB_EP0StartXfer+0x282>
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d009      	beq.n	8009512 <USB_EP0StartXfer+0x282>
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	6919      	ldr	r1, [r3, #16]
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	4413      	add	r3, r2
 800950a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950e:	460a      	mov	r2, r1
 8009510:	615a      	str	r2, [r3, #20]
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	015a      	lsls	r2, r3, #5
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	4413      	add	r3, r2
 800951a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	0151      	lsls	r1, r2, #5
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	440a      	add	r2, r1
 8009528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800952c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009530:	6013      	str	r3, [r2, #0]
 8009532:	2300      	movs	r3, #0
 8009534:	4618      	mov	r0, r3
 8009536:	371c      	adds	r7, #28
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USB_EPStopXfer>:
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]
 800954e:	2300      	movs	r3, #0
 8009550:	75fb      	strb	r3, [r7, #23]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	613b      	str	r3, [r7, #16]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	785b      	ldrb	r3, [r3, #1]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d14a      	bne.n	80095f4 <USB_EPStopXfer+0xb4>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	015a      	lsls	r2, r3, #5
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	4413      	add	r3, r2
 8009568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009572:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009576:	f040 8086 	bne.w	8009686 <USB_EPStopXfer+0x146>
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	7812      	ldrb	r2, [r2, #0]
 800958e:	0151      	lsls	r1, r2, #5
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	440a      	add	r2, r1
 8009594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009598:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800959c:	6013      	str	r3, [r2, #0]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	7812      	ldrb	r2, [r2, #0]
 80095b2:	0151      	lsls	r1, r2, #5
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	440a      	add	r2, r1
 80095b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3301      	adds	r3, #1
 80095c6:	60fb      	str	r3, [r7, #12]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d902      	bls.n	80095d8 <USB_EPStopXfer+0x98>
 80095d2:	2301      	movs	r3, #1
 80095d4:	75fb      	strb	r3, [r7, #23]
 80095d6:	e056      	b.n	8009686 <USB_EPStopXfer+0x146>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095f0:	d0e7      	beq.n	80095c2 <USB_EPStopXfer+0x82>
 80095f2:	e048      	b.n	8009686 <USB_EPStopXfer+0x146>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800960c:	d13b      	bne.n	8009686 <USB_EPStopXfer+0x146>
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	7812      	ldrb	r2, [r2, #0]
 8009622:	0151      	lsls	r1, r2, #5
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	440a      	add	r2, r1
 8009628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800962c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009630:	6013      	str	r3, [r2, #0]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	7812      	ldrb	r2, [r2, #0]
 8009646:	0151      	lsls	r1, r2, #5
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	440a      	add	r2, r1
 800964c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	3301      	adds	r3, #1
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009662:	4293      	cmp	r3, r2
 8009664:	d902      	bls.n	800966c <USB_EPStopXfer+0x12c>
 8009666:	2301      	movs	r3, #1
 8009668:	75fb      	strb	r3, [r7, #23]
 800966a:	e00c      	b.n	8009686 <USB_EPStopXfer+0x146>
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	4413      	add	r3, r2
 8009676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009684:	d0e7      	beq.n	8009656 <USB_EPStopXfer+0x116>
 8009686:	7dfb      	ldrb	r3, [r7, #23]
 8009688:	4618      	mov	r0, r3
 800968a:	371c      	adds	r7, #28
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <USB_WritePacket>:
 8009694:	b480      	push	{r7}
 8009696:	b089      	sub	sp, #36	; 0x24
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	4611      	mov	r1, r2
 80096a0:	461a      	mov	r2, r3
 80096a2:	460b      	mov	r3, r1
 80096a4:	71fb      	strb	r3, [r7, #7]
 80096a6:	4613      	mov	r3, r2
 80096a8:	80bb      	strh	r3, [r7, #4]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	617b      	str	r3, [r7, #20]
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	61fb      	str	r3, [r7, #28]
 80096b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d123      	bne.n	8009702 <USB_WritePacket+0x6e>
 80096ba:	88bb      	ldrh	r3, [r7, #4]
 80096bc:	3303      	adds	r3, #3
 80096be:	089b      	lsrs	r3, r3, #2
 80096c0:	613b      	str	r3, [r7, #16]
 80096c2:	2300      	movs	r3, #0
 80096c4:	61bb      	str	r3, [r7, #24]
 80096c6:	e018      	b.n	80096fa <USB_WritePacket+0x66>
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	031a      	lsls	r2, r3, #12
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d4:	461a      	mov	r2, r3
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6013      	str	r3, [r2, #0]
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	3301      	adds	r3, #1
 80096e0:	61fb      	str	r3, [r7, #28]
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	3301      	adds	r3, #1
 80096e6:	61fb      	str	r3, [r7, #28]
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	3301      	adds	r3, #1
 80096ec:	61fb      	str	r3, [r7, #28]
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	3301      	adds	r3, #1
 80096f2:	61fb      	str	r3, [r7, #28]
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	3301      	adds	r3, #1
 80096f8:	61bb      	str	r3, [r7, #24]
 80096fa:	69ba      	ldr	r2, [r7, #24]
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d3e2      	bcc.n	80096c8 <USB_WritePacket+0x34>
 8009702:	2300      	movs	r3, #0
 8009704:	4618      	mov	r0, r3
 8009706:	3724      	adds	r7, #36	; 0x24
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <USB_ReadPacket>:
 8009710:	b480      	push	{r7}
 8009712:	b08b      	sub	sp, #44	; 0x2c
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	4613      	mov	r3, r2
 800971c:	80fb      	strh	r3, [r7, #6]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	61bb      	str	r3, [r7, #24]
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	627b      	str	r3, [r7, #36]	; 0x24
 8009726:	88fb      	ldrh	r3, [r7, #6]
 8009728:	089b      	lsrs	r3, r3, #2
 800972a:	b29b      	uxth	r3, r3
 800972c:	617b      	str	r3, [r7, #20]
 800972e:	88fb      	ldrh	r3, [r7, #6]
 8009730:	f003 0303 	and.w	r3, r3, #3
 8009734:	83fb      	strh	r3, [r7, #30]
 8009736:	2300      	movs	r3, #0
 8009738:	623b      	str	r3, [r7, #32]
 800973a:	e014      	b.n	8009766 <USB_ReadPacket+0x56>
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	601a      	str	r2, [r3, #0]
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	3301      	adds	r3, #1
 800974c:	627b      	str	r3, [r7, #36]	; 0x24
 800974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009750:	3301      	adds	r3, #1
 8009752:	627b      	str	r3, [r7, #36]	; 0x24
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	3301      	adds	r3, #1
 8009758:	627b      	str	r3, [r7, #36]	; 0x24
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	3301      	adds	r3, #1
 800975e:	627b      	str	r3, [r7, #36]	; 0x24
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	3301      	adds	r3, #1
 8009764:	623b      	str	r3, [r7, #32]
 8009766:	6a3a      	ldr	r2, [r7, #32]
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	429a      	cmp	r2, r3
 800976c:	d3e6      	bcc.n	800973c <USB_ReadPacket+0x2c>
 800976e:	8bfb      	ldrh	r3, [r7, #30]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d01e      	beq.n	80097b2 <USB_ReadPacket+0xa2>
 8009774:	2300      	movs	r3, #0
 8009776:	623b      	str	r3, [r7, #32]
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800977e:	461a      	mov	r2, r3
 8009780:	f107 0310 	add.w	r3, r7, #16
 8009784:	6812      	ldr	r2, [r2, #0]
 8009786:	601a      	str	r2, [r3, #0]
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	b2db      	uxtb	r3, r3
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	fa22 f303 	lsr.w	r3, r2, r3
 8009794:	b2da      	uxtb	r2, r3
 8009796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009798:	701a      	strb	r2, [r3, #0]
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	3301      	adds	r3, #1
 800979e:	623b      	str	r3, [r7, #32]
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	3301      	adds	r3, #1
 80097a4:	627b      	str	r3, [r7, #36]	; 0x24
 80097a6:	8bfb      	ldrh	r3, [r7, #30]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	83fb      	strh	r3, [r7, #30]
 80097ac:	8bfb      	ldrh	r3, [r7, #30]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1ea      	bne.n	8009788 <USB_ReadPacket+0x78>
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	4618      	mov	r0, r3
 80097b6:	372c      	adds	r7, #44	; 0x2c
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <USB_EPSetStall>:
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	60fb      	str	r3, [r7, #12]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	60bb      	str	r3, [r7, #8]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	785b      	ldrb	r3, [r3, #1]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d12c      	bne.n	8009836 <USB_EPSetStall+0x76>
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	db12      	blt.n	8009814 <USB_EPSetStall+0x54>
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00f      	beq.n	8009814 <USB_EPSetStall+0x54>
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	015a      	lsls	r2, r3, #5
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	4413      	add	r3, r2
 80097fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	0151      	lsls	r1, r2, #5
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	440a      	add	r2, r1
 800980a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800980e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009812:	6013      	str	r3, [r2, #0]
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	0151      	lsls	r1, r2, #5
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	440a      	add	r2, r1
 800982a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800982e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	e02b      	b.n	800988e <USB_EPSetStall+0xce>
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	4413      	add	r3, r2
 800983e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	db12      	blt.n	800986e <USB_EPSetStall+0xae>
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00f      	beq.n	800986e <USB_EPSetStall+0xae>
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	015a      	lsls	r2, r3, #5
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	4413      	add	r3, r2
 8009856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	0151      	lsls	r1, r2, #5
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	440a      	add	r2, r1
 8009864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009868:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800986c:	6013      	str	r3, [r2, #0]
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	015a      	lsls	r2, r3, #5
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	4413      	add	r3, r2
 8009876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	440a      	add	r2, r1
 8009884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009888:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800988c:	6013      	str	r3, [r2, #0]
 800988e:	2300      	movs	r3, #0
 8009890:	4618      	mov	r0, r3
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <USB_EPClearStall>:
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	60fb      	str	r3, [r7, #12]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	60bb      	str	r3, [r7, #8]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	785b      	ldrb	r3, [r3, #1]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d128      	bne.n	800990a <USB_EPClearStall+0x6e>
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	0151      	lsls	r1, r2, #5
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	440a      	add	r2, r1
 80098ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	791b      	ldrb	r3, [r3, #4]
 80098dc:	2b03      	cmp	r3, #3
 80098de:	d003      	beq.n	80098e8 <USB_EPClearStall+0x4c>
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	791b      	ldrb	r3, [r3, #4]
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d138      	bne.n	800995a <USB_EPClearStall+0xbe>
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	015a      	lsls	r2, r3, #5
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4413      	add	r3, r2
 80098f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	0151      	lsls	r1, r2, #5
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	440a      	add	r2, r1
 80098fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009906:	6013      	str	r3, [r2, #0]
 8009908:	e027      	b.n	800995a <USB_EPClearStall+0xbe>
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	015a      	lsls	r2, r3, #5
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	4413      	add	r3, r2
 8009912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	0151      	lsls	r1, r2, #5
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	440a      	add	r2, r1
 8009920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009924:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009928:	6013      	str	r3, [r2, #0]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	791b      	ldrb	r3, [r3, #4]
 800992e:	2b03      	cmp	r3, #3
 8009930:	d003      	beq.n	800993a <USB_EPClearStall+0x9e>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	791b      	ldrb	r3, [r3, #4]
 8009936:	2b02      	cmp	r3, #2
 8009938:	d10f      	bne.n	800995a <USB_EPClearStall+0xbe>
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	015a      	lsls	r2, r3, #5
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	4413      	add	r3, r2
 8009942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	0151      	lsls	r1, r2, #5
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	440a      	add	r2, r1
 8009950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	2300      	movs	r3, #0
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <USB_SetDevAddress>:
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	70fb      	strb	r3, [r7, #3]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	60fb      	str	r3, [r7, #12]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009986:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	78fb      	ldrb	r3, [r7, #3]
 8009996:	011b      	lsls	r3, r3, #4
 8009998:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800999c:	68f9      	ldr	r1, [r7, #12]
 800999e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099a2:	4313      	orrs	r3, r2
 80099a4:	600b      	str	r3, [r1, #0]
 80099a6:	2300      	movs	r3, #0
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <USB_DevConnect>:
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	60fb      	str	r3, [r7, #12]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099ce:	f023 0303 	bic.w	r3, r3, #3
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099e2:	f023 0302 	bic.w	r3, r3, #2
 80099e6:	6053      	str	r3, [r2, #4]
 80099e8:	2300      	movs	r3, #0
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <USB_DevDisconnect>:
 80099f6:	b480      	push	{r7}
 80099f8:	b085      	sub	sp, #20
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	60fb      	str	r3, [r7, #12]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a10:	f023 0303 	bic.w	r3, r3, #3
 8009a14:	6013      	str	r3, [r2, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a24:	f043 0302 	orr.w	r3, r3, #2
 8009a28:	6053      	str	r3, [r2, #4]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <USB_ReadInterrupts>:
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	695b      	ldr	r3, [r3, #20]
 8009a44:	60fb      	str	r3, [r7, #12]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4618      	mov	r0, r3
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr

08009a5e <USB_ReadDevAllOutEpInterrupt>:
 8009a5e:	b480      	push	{r7}
 8009a60:	b085      	sub	sp, #20
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	60fb      	str	r3, [r7, #12]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	60bb      	str	r3, [r7, #8]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	60bb      	str	r3, [r7, #8]
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	0c1b      	lsrs	r3, r3, #16
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <USB_ReadDevAllInEpInterrupt>:
 8009a92:	b480      	push	{r7}
 8009a94:	b085      	sub	sp, #20
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	60fb      	str	r3, [r7, #12]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	60bb      	str	r3, [r7, #8]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	60bb      	str	r3, [r7, #8]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	4618      	mov	r0, r3
 8009abc:	3714      	adds	r7, #20
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <USB_ReadDevOutEPInterrupt>:
 8009ac6:	b480      	push	{r7}
 8009ac8:	b085      	sub	sp, #20
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	70fb      	strb	r3, [r7, #3]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	60fb      	str	r3, [r7, #12]
 8009ad6:	78fb      	ldrb	r3, [r7, #3]
 8009ad8:	015a      	lsls	r2, r3, #5
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	4413      	add	r3, r2
 8009ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	60bb      	str	r3, [r7, #8]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	4013      	ands	r3, r2
 8009af2:	60bb      	str	r3, [r7, #8]
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	4618      	mov	r0, r3
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <USB_ReadDevInEPInterrupt>:
 8009b02:	b480      	push	{r7}
 8009b04:	b087      	sub	sp, #28
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	70fb      	strb	r3, [r7, #3]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	617b      	str	r3, [r7, #20]
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	613b      	str	r3, [r7, #16]
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b24:	60fb      	str	r3, [r7, #12]
 8009b26:	78fb      	ldrb	r3, [r7, #3]
 8009b28:	f003 030f 	and.w	r3, r3, #15
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b32:	01db      	lsls	r3, r3, #7
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	613b      	str	r3, [r7, #16]
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	015a      	lsls	r2, r3, #5
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	60bb      	str	r3, [r7, #8]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	4618      	mov	r0, r3
 8009b54:	371c      	adds	r7, #28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <USB_GetMode>:
 8009b5e:	b480      	push	{r7}
 8009b60:	b083      	sub	sp, #12
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	4618      	mov	r0, r3
 8009b70:	370c      	adds	r7, #12
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr

08009b7a <USB_ActivateSetup>:
 8009b7a:	b480      	push	{r7}
 8009b7c:	b085      	sub	sp, #20
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	60fb      	str	r3, [r7, #12]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b94:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009b98:	f023 0307 	bic.w	r3, r3, #7
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bb0:	6053      	str	r3, [r2, #4]
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3714      	adds	r7, #20
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <USB_EP0_OutStart>:
 8009bc0:	b480      	push	{r7}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	72fb      	strb	r3, [r7, #11]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	617b      	str	r3, [r7, #20]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	333c      	adds	r3, #60	; 0x3c
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	613b      	str	r3, [r7, #16]
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	4a26      	ldr	r2, [pc, #152]	; (8009c78 <USB_EP0_OutStart+0xb8>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d90a      	bls.n	8009bfa <USB_EP0_OutStart+0x3a>
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bf4:	d101      	bne.n	8009bfa <USB_EP0_OutStart+0x3a>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	e037      	b.n	8009c6a <USB_EP0_OutStart+0xaa>
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c00:	461a      	mov	r2, r3
 8009c02:	2300      	movs	r3, #0
 8009c04:	6113      	str	r3, [r2, #16]
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c18:	6113      	str	r3, [r2, #16]
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c28:	f043 0318 	orr.w	r3, r3, #24
 8009c2c:	6113      	str	r3, [r2, #16]
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c3c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009c40:	6113      	str	r3, [r2, #16]
 8009c42:	7afb      	ldrb	r3, [r7, #11]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d10f      	bne.n	8009c68 <USB_EP0_OutStart+0xa8>
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c4e:	461a      	mov	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6153      	str	r3, [r2, #20]
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c62:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009c66:	6013      	str	r3, [r2, #0]
 8009c68:	2300      	movs	r3, #0
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	371c      	adds	r7, #28
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	4f54300a 	.word	0x4f54300a

08009c7c <USB_CoreReset>:
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	2300      	movs	r3, #0
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4a13      	ldr	r2, [pc, #76]	; (8009ce0 <USB_CoreReset+0x64>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d901      	bls.n	8009c9a <USB_CoreReset+0x1e>
 8009c96:	2303      	movs	r3, #3
 8009c98:	e01b      	b.n	8009cd2 <USB_CoreReset+0x56>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	daf2      	bge.n	8009c88 <USB_CoreReset+0xc>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	60fb      	str	r3, [r7, #12]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	f043 0201 	orr.w	r2, r3, #1
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	611a      	str	r2, [r3, #16]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	4a09      	ldr	r2, [pc, #36]	; (8009ce0 <USB_CoreReset+0x64>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d901      	bls.n	8009cc4 <USB_CoreReset+0x48>
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e006      	b.n	8009cd2 <USB_CoreReset+0x56>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d0f0      	beq.n	8009cb2 <USB_CoreReset+0x36>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	00030d40 	.word	0x00030d40

08009ce4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009cf0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009cf4:	f002 fc8a 	bl	800c60c <USBD_static_malloc>
 8009cf8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d109      	bne.n	8009d14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	32b0      	adds	r2, #176	; 0xb0
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009d10:	2302      	movs	r3, #2
 8009d12:	e0d4      	b.n	8009ebe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009d14:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009d18:	2100      	movs	r1, #0
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f003 fa59 	bl	800d1d2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	32b0      	adds	r2, #176	; 0xb0
 8009d2a:	68f9      	ldr	r1, [r7, #12]
 8009d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	32b0      	adds	r2, #176	; 0xb0
 8009d3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	7c1b      	ldrb	r3, [r3, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d138      	bne.n	8009dbe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009d4c:	4b5e      	ldr	r3, [pc, #376]	; (8009ec8 <USBD_CDC_Init+0x1e4>)
 8009d4e:	7819      	ldrb	r1, [r3, #0]
 8009d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d54:	2202      	movs	r2, #2
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f002 fb35 	bl	800c3c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009d5c:	4b5a      	ldr	r3, [pc, #360]	; (8009ec8 <USBD_CDC_Init+0x1e4>)
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	f003 020f 	and.w	r2, r3, #15
 8009d64:	6879      	ldr	r1, [r7, #4]
 8009d66:	4613      	mov	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	440b      	add	r3, r1
 8009d70:	3324      	adds	r3, #36	; 0x24
 8009d72:	2201      	movs	r2, #1
 8009d74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009d76:	4b55      	ldr	r3, [pc, #340]	; (8009ecc <USBD_CDC_Init+0x1e8>)
 8009d78:	7819      	ldrb	r1, [r3, #0]
 8009d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d7e:	2202      	movs	r2, #2
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f002 fb20 	bl	800c3c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009d86:	4b51      	ldr	r3, [pc, #324]	; (8009ecc <USBD_CDC_Init+0x1e8>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	f003 020f 	and.w	r2, r3, #15
 8009d8e:	6879      	ldr	r1, [r7, #4]
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	440b      	add	r3, r1
 8009d9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d9e:	2201      	movs	r2, #1
 8009da0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009da2:	4b4b      	ldr	r3, [pc, #300]	; (8009ed0 <USBD_CDC_Init+0x1ec>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	f003 020f 	and.w	r2, r3, #15
 8009daa:	6879      	ldr	r1, [r7, #4]
 8009dac:	4613      	mov	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	440b      	add	r3, r1
 8009db6:	3326      	adds	r3, #38	; 0x26
 8009db8:	2210      	movs	r2, #16
 8009dba:	801a      	strh	r2, [r3, #0]
 8009dbc:	e035      	b.n	8009e2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009dbe:	4b42      	ldr	r3, [pc, #264]	; (8009ec8 <USBD_CDC_Init+0x1e4>)
 8009dc0:	7819      	ldrb	r1, [r3, #0]
 8009dc2:	2340      	movs	r3, #64	; 0x40
 8009dc4:	2202      	movs	r2, #2
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f002 fafd 	bl	800c3c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009dcc:	4b3e      	ldr	r3, [pc, #248]	; (8009ec8 <USBD_CDC_Init+0x1e4>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	f003 020f 	and.w	r2, r3, #15
 8009dd4:	6879      	ldr	r1, [r7, #4]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	440b      	add	r3, r1
 8009de0:	3324      	adds	r3, #36	; 0x24
 8009de2:	2201      	movs	r2, #1
 8009de4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009de6:	4b39      	ldr	r3, [pc, #228]	; (8009ecc <USBD_CDC_Init+0x1e8>)
 8009de8:	7819      	ldrb	r1, [r3, #0]
 8009dea:	2340      	movs	r3, #64	; 0x40
 8009dec:	2202      	movs	r2, #2
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f002 fae9 	bl	800c3c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009df4:	4b35      	ldr	r3, [pc, #212]	; (8009ecc <USBD_CDC_Init+0x1e8>)
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	f003 020f 	and.w	r2, r3, #15
 8009dfc:	6879      	ldr	r1, [r7, #4]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	440b      	add	r3, r1
 8009e08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009e10:	4b2f      	ldr	r3, [pc, #188]	; (8009ed0 <USBD_CDC_Init+0x1ec>)
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	f003 020f 	and.w	r2, r3, #15
 8009e18:	6879      	ldr	r1, [r7, #4]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	440b      	add	r3, r1
 8009e24:	3326      	adds	r3, #38	; 0x26
 8009e26:	2210      	movs	r2, #16
 8009e28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009e2a:	4b29      	ldr	r3, [pc, #164]	; (8009ed0 <USBD_CDC_Init+0x1ec>)
 8009e2c:	7819      	ldrb	r1, [r3, #0]
 8009e2e:	2308      	movs	r3, #8
 8009e30:	2203      	movs	r2, #3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f002 fac7 	bl	800c3c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009e38:	4b25      	ldr	r3, [pc, #148]	; (8009ed0 <USBD_CDC_Init+0x1ec>)
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	f003 020f 	and.w	r2, r3, #15
 8009e40:	6879      	ldr	r1, [r7, #4]
 8009e42:	4613      	mov	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	440b      	add	r3, r1
 8009e4c:	3324      	adds	r3, #36	; 0x24
 8009e4e:	2201      	movs	r2, #1
 8009e50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	33b0      	adds	r3, #176	; 0xb0
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009e88:	2302      	movs	r3, #2
 8009e8a:	e018      	b.n	8009ebe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	7c1b      	ldrb	r3, [r3, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10a      	bne.n	8009eaa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e94:	4b0d      	ldr	r3, [pc, #52]	; (8009ecc <USBD_CDC_Init+0x1e8>)
 8009e96:	7819      	ldrb	r1, [r3, #0]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f002 fb7e 	bl	800c5a4 <USBD_LL_PrepareReceive>
 8009ea8:	e008      	b.n	8009ebc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009eaa:	4b08      	ldr	r3, [pc, #32]	; (8009ecc <USBD_CDC_Init+0x1e8>)
 8009eac:	7819      	ldrb	r1, [r3, #0]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009eb4:	2340      	movs	r3, #64	; 0x40
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f002 fb74 	bl	800c5a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	200000b7 	.word	0x200000b7
 8009ecc:	200000b8 	.word	0x200000b8
 8009ed0:	200000b9 	.word	0x200000b9

08009ed4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	460b      	mov	r3, r1
 8009ede:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009ee0:	4b3a      	ldr	r3, [pc, #232]	; (8009fcc <USBD_CDC_DeInit+0xf8>)
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f002 fa93 	bl	800c412 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009eec:	4b37      	ldr	r3, [pc, #220]	; (8009fcc <USBD_CDC_DeInit+0xf8>)
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	f003 020f 	and.w	r2, r3, #15
 8009ef4:	6879      	ldr	r1, [r7, #4]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	440b      	add	r3, r1
 8009f00:	3324      	adds	r3, #36	; 0x24
 8009f02:	2200      	movs	r2, #0
 8009f04:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009f06:	4b32      	ldr	r3, [pc, #200]	; (8009fd0 <USBD_CDC_DeInit+0xfc>)
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f002 fa80 	bl	800c412 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009f12:	4b2f      	ldr	r3, [pc, #188]	; (8009fd0 <USBD_CDC_DeInit+0xfc>)
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	f003 020f 	and.w	r2, r3, #15
 8009f1a:	6879      	ldr	r1, [r7, #4]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	440b      	add	r3, r1
 8009f26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009f2e:	4b29      	ldr	r3, [pc, #164]	; (8009fd4 <USBD_CDC_DeInit+0x100>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f002 fa6c 	bl	800c412 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009f3a:	4b26      	ldr	r3, [pc, #152]	; (8009fd4 <USBD_CDC_DeInit+0x100>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	f003 020f 	and.w	r2, r3, #15
 8009f42:	6879      	ldr	r1, [r7, #4]
 8009f44:	4613      	mov	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	440b      	add	r3, r1
 8009f4e:	3324      	adds	r3, #36	; 0x24
 8009f50:	2200      	movs	r2, #0
 8009f52:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009f54:	4b1f      	ldr	r3, [pc, #124]	; (8009fd4 <USBD_CDC_DeInit+0x100>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	f003 020f 	and.w	r2, r3, #15
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	440b      	add	r3, r1
 8009f68:	3326      	adds	r3, #38	; 0x26
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	32b0      	adds	r2, #176	; 0xb0
 8009f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d01f      	beq.n	8009fc0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	33b0      	adds	r3, #176	; 0xb0
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	32b0      	adds	r2, #176	; 0xb0
 8009f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f002 fb40 	bl	800c628 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	32b0      	adds	r2, #176	; 0xb0
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	200000b7 	.word	0x200000b7
 8009fd0:	200000b8 	.word	0x200000b8
 8009fd4:	200000b9 	.word	0x200000b9

08009fd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	32b0      	adds	r2, #176	; 0xb0
 8009fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a004:	2303      	movs	r3, #3
 800a006:	e0bf      	b.n	800a188 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a010:	2b00      	cmp	r3, #0
 800a012:	d050      	beq.n	800a0b6 <USBD_CDC_Setup+0xde>
 800a014:	2b20      	cmp	r3, #32
 800a016:	f040 80af 	bne.w	800a178 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	88db      	ldrh	r3, [r3, #6]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d03a      	beq.n	800a098 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	b25b      	sxtb	r3, r3
 800a028:	2b00      	cmp	r3, #0
 800a02a:	da1b      	bge.n	800a064 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	33b0      	adds	r3, #176	; 0xb0
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a042:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	88d2      	ldrh	r2, [r2, #6]
 800a048:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	88db      	ldrh	r3, [r3, #6]
 800a04e:	2b07      	cmp	r3, #7
 800a050:	bf28      	it	cs
 800a052:	2307      	movcs	r3, #7
 800a054:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	89fa      	ldrh	r2, [r7, #14]
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f001 fd89 	bl	800bb74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a062:	e090      	b.n	800a186 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	785a      	ldrb	r2, [r3, #1]
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	88db      	ldrh	r3, [r3, #6]
 800a072:	2b3f      	cmp	r3, #63	; 0x3f
 800a074:	d803      	bhi.n	800a07e <USBD_CDC_Setup+0xa6>
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	88db      	ldrh	r3, [r3, #6]
 800a07a:	b2da      	uxtb	r2, r3
 800a07c:	e000      	b.n	800a080 <USBD_CDC_Setup+0xa8>
 800a07e:	2240      	movs	r2, #64	; 0x40
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a086:	6939      	ldr	r1, [r7, #16]
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a08e:	461a      	mov	r2, r3
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f001 fd9b 	bl	800bbcc <USBD_CtlPrepareRx>
      break;
 800a096:	e076      	b.n	800a186 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	33b0      	adds	r3, #176	; 0xb0
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	7850      	ldrb	r0, [r2, #1]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	4798      	blx	r3
      break;
 800a0b4:	e067      	b.n	800a186 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	785b      	ldrb	r3, [r3, #1]
 800a0ba:	2b0b      	cmp	r3, #11
 800a0bc:	d851      	bhi.n	800a162 <USBD_CDC_Setup+0x18a>
 800a0be:	a201      	add	r2, pc, #4	; (adr r2, 800a0c4 <USBD_CDC_Setup+0xec>)
 800a0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c4:	0800a0f5 	.word	0x0800a0f5
 800a0c8:	0800a171 	.word	0x0800a171
 800a0cc:	0800a163 	.word	0x0800a163
 800a0d0:	0800a163 	.word	0x0800a163
 800a0d4:	0800a163 	.word	0x0800a163
 800a0d8:	0800a163 	.word	0x0800a163
 800a0dc:	0800a163 	.word	0x0800a163
 800a0e0:	0800a163 	.word	0x0800a163
 800a0e4:	0800a163 	.word	0x0800a163
 800a0e8:	0800a163 	.word	0x0800a163
 800a0ec:	0800a11f 	.word	0x0800a11f
 800a0f0:	0800a149 	.word	0x0800a149
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d107      	bne.n	800a110 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a100:	f107 030a 	add.w	r3, r7, #10
 800a104:	2202      	movs	r2, #2
 800a106:	4619      	mov	r1, r3
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f001 fd33 	bl	800bb74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a10e:	e032      	b.n	800a176 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f001 fcbd 	bl	800ba92 <USBD_CtlError>
            ret = USBD_FAIL;
 800a118:	2303      	movs	r3, #3
 800a11a:	75fb      	strb	r3, [r7, #23]
          break;
 800a11c:	e02b      	b.n	800a176 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b03      	cmp	r3, #3
 800a128:	d107      	bne.n	800a13a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a12a:	f107 030d 	add.w	r3, r7, #13
 800a12e:	2201      	movs	r2, #1
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f001 fd1e 	bl	800bb74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a138:	e01d      	b.n	800a176 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f001 fca8 	bl	800ba92 <USBD_CtlError>
            ret = USBD_FAIL;
 800a142:	2303      	movs	r3, #3
 800a144:	75fb      	strb	r3, [r7, #23]
          break;
 800a146:	e016      	b.n	800a176 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	2b03      	cmp	r3, #3
 800a152:	d00f      	beq.n	800a174 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f001 fc9b 	bl	800ba92 <USBD_CtlError>
            ret = USBD_FAIL;
 800a15c:	2303      	movs	r3, #3
 800a15e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a160:	e008      	b.n	800a174 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a162:	6839      	ldr	r1, [r7, #0]
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f001 fc94 	bl	800ba92 <USBD_CtlError>
          ret = USBD_FAIL;
 800a16a:	2303      	movs	r3, #3
 800a16c:	75fb      	strb	r3, [r7, #23]
          break;
 800a16e:	e002      	b.n	800a176 <USBD_CDC_Setup+0x19e>
          break;
 800a170:	bf00      	nop
 800a172:	e008      	b.n	800a186 <USBD_CDC_Setup+0x1ae>
          break;
 800a174:	bf00      	nop
      }
      break;
 800a176:	e006      	b.n	800a186 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a178:	6839      	ldr	r1, [r7, #0]
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f001 fc89 	bl	800ba92 <USBD_CtlError>
      ret = USBD_FAIL;
 800a180:	2303      	movs	r3, #3
 800a182:	75fb      	strb	r3, [r7, #23]
      break;
 800a184:	bf00      	nop
  }

  return (uint8_t)ret;
 800a186:	7dfb      	ldrb	r3, [r7, #23]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3718      	adds	r7, #24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	32b0      	adds	r2, #176	; 0xb0
 800a1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	e065      	b.n	800a286 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	32b0      	adds	r2, #176	; 0xb0
 800a1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a1ca:	78fb      	ldrb	r3, [r7, #3]
 800a1cc:	f003 020f 	and.w	r2, r3, #15
 800a1d0:	6879      	ldr	r1, [r7, #4]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	440b      	add	r3, r1
 800a1dc:	3318      	adds	r3, #24
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d02f      	beq.n	800a244 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a1e4:	78fb      	ldrb	r3, [r7, #3]
 800a1e6:	f003 020f 	and.w	r2, r3, #15
 800a1ea:	6879      	ldr	r1, [r7, #4]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	440b      	add	r3, r1
 800a1f6:	3318      	adds	r3, #24
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	78fb      	ldrb	r3, [r7, #3]
 800a1fc:	f003 010f 	and.w	r1, r3, #15
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	460b      	mov	r3, r1
 800a204:	00db      	lsls	r3, r3, #3
 800a206:	440b      	add	r3, r1
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4403      	add	r3, r0
 800a20c:	3348      	adds	r3, #72	; 0x48
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	fbb2 f1f3 	udiv	r1, r2, r3
 800a214:	fb01 f303 	mul.w	r3, r1, r3
 800a218:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d112      	bne.n	800a244 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a21e:	78fb      	ldrb	r3, [r7, #3]
 800a220:	f003 020f 	and.w	r2, r3, #15
 800a224:	6879      	ldr	r1, [r7, #4]
 800a226:	4613      	mov	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	440b      	add	r3, r1
 800a230:	3318      	adds	r3, #24
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a236:	78f9      	ldrb	r1, [r7, #3]
 800a238:	2300      	movs	r3, #0
 800a23a:	2200      	movs	r2, #0
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f002 f990 	bl	800c562 <USBD_LL_Transmit>
 800a242:	e01f      	b.n	800a284 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	2200      	movs	r2, #0
 800a248:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	33b0      	adds	r3, #176	; 0xb0
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d010      	beq.n	800a284 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	33b0      	adds	r3, #176	; 0xb0
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4413      	add	r3, r2
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a280:	78fa      	ldrb	r2, [r7, #3]
 800a282:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b084      	sub	sp, #16
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	460b      	mov	r3, r1
 800a298:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	32b0      	adds	r2, #176	; 0xb0
 800a2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	32b0      	adds	r2, #176	; 0xb0
 800a2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e01a      	b.n	800a2f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a2c0:	78fb      	ldrb	r3, [r7, #3]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f002 f98e 	bl	800c5e6 <USBD_LL_GetRxDataSize>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	33b0      	adds	r3, #176	; 0xb0
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4413      	add	r3, r2
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	32b0      	adds	r2, #176	; 0xb0
 800a310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a314:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d101      	bne.n	800a320 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a31c:	2303      	movs	r3, #3
 800a31e:	e025      	b.n	800a36c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	33b0      	adds	r3, #176	; 0xb0
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d01a      	beq.n	800a36a <USBD_CDC_EP0_RxReady+0x6c>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a33a:	2bff      	cmp	r3, #255	; 0xff
 800a33c:	d015      	beq.n	800a36a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	33b0      	adds	r3, #176	; 0xb0
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a356:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a35e:	b292      	uxth	r2, r2
 800a360:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	22ff      	movs	r2, #255	; 0xff
 800a366:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a37c:	2182      	movs	r1, #130	; 0x82
 800a37e:	4818      	ldr	r0, [pc, #96]	; (800a3e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a380:	f000 fd4f 	bl	800ae22 <USBD_GetEpDesc>
 800a384:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a386:	2101      	movs	r1, #1
 800a388:	4815      	ldr	r0, [pc, #84]	; (800a3e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a38a:	f000 fd4a 	bl	800ae22 <USBD_GetEpDesc>
 800a38e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a390:	2181      	movs	r1, #129	; 0x81
 800a392:	4813      	ldr	r0, [pc, #76]	; (800a3e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a394:	f000 fd45 	bl	800ae22 <USBD_GetEpDesc>
 800a398:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2210      	movs	r2, #16
 800a3a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d006      	beq.n	800a3ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3b4:	711a      	strb	r2, [r3, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d006      	beq.n	800a3ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3c8:	711a      	strb	r2, [r3, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2243      	movs	r2, #67	; 0x43
 800a3d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3d4:	4b02      	ldr	r3, [pc, #8]	; (800a3e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3718      	adds	r7, #24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	20000074 	.word	0x20000074

0800a3e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a3ec:	2182      	movs	r1, #130	; 0x82
 800a3ee:	4818      	ldr	r0, [pc, #96]	; (800a450 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a3f0:	f000 fd17 	bl	800ae22 <USBD_GetEpDesc>
 800a3f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	4815      	ldr	r0, [pc, #84]	; (800a450 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a3fa:	f000 fd12 	bl	800ae22 <USBD_GetEpDesc>
 800a3fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a400:	2181      	movs	r1, #129	; 0x81
 800a402:	4813      	ldr	r0, [pc, #76]	; (800a450 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a404:	f000 fd0d 	bl	800ae22 <USBD_GetEpDesc>
 800a408:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2210      	movs	r2, #16
 800a414:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d006      	beq.n	800a42a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	2200      	movs	r2, #0
 800a420:	711a      	strb	r2, [r3, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	f042 0202 	orr.w	r2, r2, #2
 800a428:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d006      	beq.n	800a43e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	711a      	strb	r2, [r3, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	f042 0202 	orr.w	r2, r2, #2
 800a43c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2243      	movs	r2, #67	; 0x43
 800a442:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a444:	4b02      	ldr	r3, [pc, #8]	; (800a450 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a446:	4618      	mov	r0, r3
 800a448:	3718      	adds	r7, #24
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	20000074 	.word	0x20000074

0800a454 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b086      	sub	sp, #24
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a45c:	2182      	movs	r1, #130	; 0x82
 800a45e:	4818      	ldr	r0, [pc, #96]	; (800a4c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a460:	f000 fcdf 	bl	800ae22 <USBD_GetEpDesc>
 800a464:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a466:	2101      	movs	r1, #1
 800a468:	4815      	ldr	r0, [pc, #84]	; (800a4c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a46a:	f000 fcda 	bl	800ae22 <USBD_GetEpDesc>
 800a46e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a470:	2181      	movs	r1, #129	; 0x81
 800a472:	4813      	ldr	r0, [pc, #76]	; (800a4c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a474:	f000 fcd5 	bl	800ae22 <USBD_GetEpDesc>
 800a478:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	2210      	movs	r2, #16
 800a484:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d006      	beq.n	800a49a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	2200      	movs	r2, #0
 800a490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a494:	711a      	strb	r2, [r3, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d006      	beq.n	800a4ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4a8:	711a      	strb	r2, [r3, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2243      	movs	r2, #67	; 0x43
 800a4b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a4b4:	4b02      	ldr	r3, [pc, #8]	; (800a4c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3718      	adds	r7, #24
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20000074 	.word	0x20000074

0800a4c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	220a      	movs	r2, #10
 800a4d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a4d2:	4b03      	ldr	r3, [pc, #12]	; (800a4e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	20000030 	.word	0x20000030

0800a4e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d101      	bne.n	800a4f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e009      	b.n	800a50c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	33b0      	adds	r3, #176	; 0xb0
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a518:	b480      	push	{r7}
 800a51a:	b087      	sub	sp, #28
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	32b0      	adds	r2, #176	; 0xb0
 800a52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a532:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a53a:	2303      	movs	r3, #3
 800a53c:	e008      	b.n	800a550 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	371c      	adds	r7, #28
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	32b0      	adds	r2, #176	; 0xb0
 800a570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a574:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a57c:	2303      	movs	r3, #3
 800a57e:	e004      	b.n	800a58a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
	...

0800a598 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	32b0      	adds	r2, #176	; 0xb0
 800a5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	32b0      	adds	r2, #176	; 0xb0
 800a5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	e025      	b.n	800a616 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d11f      	bne.n	800a614 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a5dc:	4b10      	ldr	r3, [pc, #64]	; (800a620 <USBD_CDC_TransmitPacket+0x88>)
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	f003 020f 	and.w	r2, r3, #15
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4403      	add	r3, r0
 800a5f6:	3318      	adds	r3, #24
 800a5f8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a5fa:	4b09      	ldr	r3, [pc, #36]	; (800a620 <USBD_CDC_TransmitPacket+0x88>)
 800a5fc:	7819      	ldrb	r1, [r3, #0]
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 ffa9 	bl	800c562 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a610:	2300      	movs	r3, #0
 800a612:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a614:	7bfb      	ldrb	r3, [r7, #15]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	200000b7 	.word	0x200000b7

0800a624 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	32b0      	adds	r2, #176	; 0xb0
 800a636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	32b0      	adds	r2, #176	; 0xb0
 800a646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d101      	bne.n	800a652 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a64e:	2303      	movs	r3, #3
 800a650:	e018      	b.n	800a684 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	7c1b      	ldrb	r3, [r3, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10a      	bne.n	800a670 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a65a:	4b0c      	ldr	r3, [pc, #48]	; (800a68c <USBD_CDC_ReceivePacket+0x68>)
 800a65c:	7819      	ldrb	r1, [r3, #0]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a664:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f001 ff9b 	bl	800c5a4 <USBD_LL_PrepareReceive>
 800a66e:	e008      	b.n	800a682 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a670:	4b06      	ldr	r3, [pc, #24]	; (800a68c <USBD_CDC_ReceivePacket+0x68>)
 800a672:	7819      	ldrb	r1, [r3, #0]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a67a:	2340      	movs	r3, #64	; 0x40
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f001 ff91 	bl	800c5a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	200000b8 	.word	0x200000b8

0800a690 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	4613      	mov	r3, r2
 800a69c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d101      	bne.n	800a6a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e01f      	b.n	800a6e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	79fa      	ldrb	r2, [r7, #7]
 800a6da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f001 fe0b 	bl	800c2f8 <USBD_LL_Init>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a6e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3718      	adds	r7, #24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d101      	bne.n	800a708 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a704:	2303      	movs	r3, #3
 800a706:	e025      	b.n	800a754 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	683a      	ldr	r2, [r7, #0]
 800a70c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	32ae      	adds	r2, #174	; 0xae
 800a71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00f      	beq.n	800a744 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	32ae      	adds	r2, #174	; 0xae
 800a72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a734:	f107 020e 	add.w	r2, r7, #14
 800a738:	4610      	mov	r0, r2
 800a73a:	4798      	blx	r3
 800a73c:	4602      	mov	r2, r0
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a74a:	1c5a      	adds	r2, r3, #1
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f001 fe13 	bl	800c390 <USBD_LL_Start>
 800a76a:	4603      	mov	r3, r0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a77c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a77e:	4618      	mov	r0, r3
 800a780:	370c      	adds	r7, #12
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	460b      	mov	r3, r1
 800a794:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d009      	beq.n	800a7b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	78fa      	ldrb	r2, [r7, #3]
 800a7ae:	4611      	mov	r1, r2
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	4798      	blx	r3
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	78fa      	ldrb	r2, [r7, #3]
 800a7dc:	4611      	mov	r1, r2
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	4798      	blx	r3
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d001      	beq.n	800a7ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b084      	sub	sp, #16
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a806:	6839      	ldr	r1, [r7, #0]
 800a808:	4618      	mov	r0, r3
 800a80a:	f001 f908 	bl	800ba1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2201      	movs	r2, #1
 800a812:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a81c:	461a      	mov	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a82a:	f003 031f 	and.w	r3, r3, #31
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d01a      	beq.n	800a868 <USBD_LL_SetupStage+0x72>
 800a832:	2b02      	cmp	r3, #2
 800a834:	d822      	bhi.n	800a87c <USBD_LL_SetupStage+0x86>
 800a836:	2b00      	cmp	r3, #0
 800a838:	d002      	beq.n	800a840 <USBD_LL_SetupStage+0x4a>
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d00a      	beq.n	800a854 <USBD_LL_SetupStage+0x5e>
 800a83e:	e01d      	b.n	800a87c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fb5f 	bl	800af0c <USBD_StdDevReq>
 800a84e:	4603      	mov	r3, r0
 800a850:	73fb      	strb	r3, [r7, #15]
      break;
 800a852:	e020      	b.n	800a896 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fbc7 	bl	800aff0 <USBD_StdItfReq>
 800a862:	4603      	mov	r3, r0
 800a864:	73fb      	strb	r3, [r7, #15]
      break;
 800a866:	e016      	b.n	800a896 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a86e:	4619      	mov	r1, r3
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fc29 	bl	800b0c8 <USBD_StdEPReq>
 800a876:	4603      	mov	r3, r0
 800a878:	73fb      	strb	r3, [r7, #15]
      break;
 800a87a:	e00c      	b.n	800a896 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a882:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a886:	b2db      	uxtb	r3, r3
 800a888:	4619      	mov	r1, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f001 fde0 	bl	800c450 <USBD_LL_StallEP>
 800a890:	4603      	mov	r3, r0
 800a892:	73fb      	strb	r3, [r7, #15]
      break;
 800a894:	bf00      	nop
  }

  return ret;
 800a896:	7bfb      	ldrb	r3, [r7, #15]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a8b2:	7afb      	ldrb	r3, [r7, #11]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d16e      	bne.n	800a996 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a8be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	f040 8098 	bne.w	800a9fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	689a      	ldr	r2, [r3, #8]
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d913      	bls.n	800a900 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	689a      	ldr	r2, [r3, #8]
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	1ad2      	subs	r2, r2, r3
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	68da      	ldr	r2, [r3, #12]
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	bf28      	it	cs
 800a8f2:	4613      	movcs	r3, r2
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	6879      	ldr	r1, [r7, #4]
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f001 f984 	bl	800bc06 <USBD_CtlContinueRx>
 800a8fe:	e07d      	b.n	800a9fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a906:	f003 031f 	and.w	r3, r3, #31
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d014      	beq.n	800a938 <USBD_LL_DataOutStage+0x98>
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d81d      	bhi.n	800a94e <USBD_LL_DataOutStage+0xae>
 800a912:	2b00      	cmp	r3, #0
 800a914:	d002      	beq.n	800a91c <USBD_LL_DataOutStage+0x7c>
 800a916:	2b01      	cmp	r3, #1
 800a918:	d003      	beq.n	800a922 <USBD_LL_DataOutStage+0x82>
 800a91a:	e018      	b.n	800a94e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	75bb      	strb	r3, [r7, #22]
            break;
 800a920:	e018      	b.n	800a954 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	4619      	mov	r1, r3
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f000 fa5e 	bl	800adee <USBD_CoreFindIF>
 800a932:	4603      	mov	r3, r0
 800a934:	75bb      	strb	r3, [r7, #22]
            break;
 800a936:	e00d      	b.n	800a954 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	4619      	mov	r1, r3
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f000 fa60 	bl	800ae08 <USBD_CoreFindEP>
 800a948:	4603      	mov	r3, r0
 800a94a:	75bb      	strb	r3, [r7, #22]
            break;
 800a94c:	e002      	b.n	800a954 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a94e:	2300      	movs	r3, #0
 800a950:	75bb      	strb	r3, [r7, #22]
            break;
 800a952:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a954:	7dbb      	ldrb	r3, [r7, #22]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d119      	bne.n	800a98e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b03      	cmp	r3, #3
 800a964:	d113      	bne.n	800a98e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a966:	7dba      	ldrb	r2, [r7, #22]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	32ae      	adds	r2, #174	; 0xae
 800a96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00b      	beq.n	800a98e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a976:	7dba      	ldrb	r2, [r7, #22]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a97e:	7dba      	ldrb	r2, [r7, #22]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	32ae      	adds	r2, #174	; 0xae
 800a984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a988:	691b      	ldr	r3, [r3, #16]
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f001 f94a 	bl	800bc28 <USBD_CtlSendStatus>
 800a994:	e032      	b.n	800a9fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a996:	7afb      	ldrb	r3, [r7, #11]
 800a998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	4619      	mov	r1, r3
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 fa31 	bl	800ae08 <USBD_CoreFindEP>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9aa:	7dbb      	ldrb	r3, [r7, #22]
 800a9ac:	2bff      	cmp	r3, #255	; 0xff
 800a9ae:	d025      	beq.n	800a9fc <USBD_LL_DataOutStage+0x15c>
 800a9b0:	7dbb      	ldrb	r3, [r7, #22]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d122      	bne.n	800a9fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b03      	cmp	r3, #3
 800a9c0:	d117      	bne.n	800a9f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a9c2:	7dba      	ldrb	r2, [r7, #22]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	32ae      	adds	r2, #174	; 0xae
 800a9c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00f      	beq.n	800a9f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a9d2:	7dba      	ldrb	r2, [r7, #22]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a9da:	7dba      	ldrb	r2, [r7, #22]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	32ae      	adds	r2, #174	; 0xae
 800a9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	7afa      	ldrb	r2, [r7, #11]
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	4798      	blx	r3
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a9f2:	7dfb      	ldrb	r3, [r7, #23]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a9f8:	7dfb      	ldrb	r3, [r7, #23]
 800a9fa:	e000      	b.n	800a9fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b086      	sub	sp, #24
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	607a      	str	r2, [r7, #4]
 800aa12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800aa14:	7afb      	ldrb	r3, [r7, #11]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d16f      	bne.n	800aafa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3314      	adds	r3, #20
 800aa1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d15a      	bne.n	800aae0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	689a      	ldr	r2, [r3, #8]
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d914      	bls.n	800aa60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	689a      	ldr	r2, [r3, #8]
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	1ad2      	subs	r2, r2, r3
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	461a      	mov	r2, r3
 800aa4a:	6879      	ldr	r1, [r7, #4]
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f001 f8ac 	bl	800bbaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa52:	2300      	movs	r3, #0
 800aa54:	2200      	movs	r2, #0
 800aa56:	2100      	movs	r1, #0
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f001 fda3 	bl	800c5a4 <USBD_LL_PrepareReceive>
 800aa5e:	e03f      	b.n	800aae0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	68da      	ldr	r2, [r3, #12]
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d11c      	bne.n	800aaa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	685a      	ldr	r2, [r3, #4]
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d316      	bcc.n	800aaa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d20f      	bcs.n	800aaa6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa86:	2200      	movs	r2, #0
 800aa88:	2100      	movs	r1, #0
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	f001 f88d 	bl	800bbaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa98:	2300      	movs	r3, #0
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f001 fd80 	bl	800c5a4 <USBD_LL_PrepareReceive>
 800aaa4:	e01c      	b.n	800aae0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d10f      	bne.n	800aad2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d009      	beq.n	800aad2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aad2:	2180      	movs	r1, #128	; 0x80
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f001 fcbb 	bl	800c450 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f001 f8b7 	bl	800bc4e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d03a      	beq.n	800ab60 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f7ff fe42 	bl	800a774 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aaf8:	e032      	b.n	800ab60 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aafa:	7afb      	ldrb	r3, [r7, #11]
 800aafc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	4619      	mov	r1, r3
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f000 f97f 	bl	800ae08 <USBD_CoreFindEP>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab0e:	7dfb      	ldrb	r3, [r7, #23]
 800ab10:	2bff      	cmp	r3, #255	; 0xff
 800ab12:	d025      	beq.n	800ab60 <USBD_LL_DataInStage+0x15a>
 800ab14:	7dfb      	ldrb	r3, [r7, #23]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d122      	bne.n	800ab60 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	d11c      	bne.n	800ab60 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ab26:	7dfa      	ldrb	r2, [r7, #23]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	32ae      	adds	r2, #174	; 0xae
 800ab2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab30:	695b      	ldr	r3, [r3, #20]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d014      	beq.n	800ab60 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ab36:	7dfa      	ldrb	r2, [r7, #23]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ab3e:	7dfa      	ldrb	r2, [r7, #23]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	32ae      	adds	r2, #174	; 0xae
 800ab44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab48:	695b      	ldr	r3, [r3, #20]
 800ab4a:	7afa      	ldrb	r2, [r7, #11]
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	4798      	blx	r3
 800ab52:	4603      	mov	r3, r0
 800ab54:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ab56:	7dbb      	ldrb	r3, [r7, #22]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ab5c:	7dbb      	ldrb	r3, [r7, #22]
 800ab5e:	e000      	b.n	800ab62 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3718      	adds	r7, #24
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b084      	sub	sp, #16
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d014      	beq.n	800abd0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00e      	beq.n	800abd0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	6852      	ldr	r2, [r2, #4]
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	4611      	mov	r1, r2
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	4798      	blx	r3
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d001      	beq.n	800abd0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800abcc:	2303      	movs	r3, #3
 800abce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abd0:	2340      	movs	r3, #64	; 0x40
 800abd2:	2200      	movs	r2, #0
 800abd4:	2100      	movs	r1, #0
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f001 fbf5 	bl	800c3c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2240      	movs	r2, #64	; 0x40
 800abe8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abec:	2340      	movs	r3, #64	; 0x40
 800abee:	2200      	movs	r2, #0
 800abf0:	2180      	movs	r1, #128	; 0x80
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f001 fbe7 	bl	800c3c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2240      	movs	r2, #64	; 0x40
 800ac02:	621a      	str	r2, [r3, #32]

  return ret;
 800ac04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b083      	sub	sp, #12
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	460b      	mov	r3, r1
 800ac18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	78fa      	ldrb	r2, [r7, #3]
 800ac1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	370c      	adds	r7, #12
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr

0800ac2e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac2e:	b480      	push	{r7}
 800ac30:	b083      	sub	sp, #12
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2204      	movs	r2, #4
 800ac48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b083      	sub	sp, #12
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	2b04      	cmp	r3, #4
 800ac6c:	d106      	bne.n	800ac7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ac74:	b2da      	uxtb	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	370c      	adds	r7, #12
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b082      	sub	sp, #8
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d110      	bne.n	800acc0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acae:	69db      	ldr	r3, [r3, #28]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d005      	beq.n	800acc0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acba:	69db      	ldr	r3, [r3, #28]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b082      	sub	sp, #8
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	460b      	mov	r3, r1
 800acd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	32ae      	adds	r2, #174	; 0xae
 800ace0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ace8:	2303      	movs	r3, #3
 800acea:	e01c      	b.n	800ad26 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	2b03      	cmp	r3, #3
 800acf6:	d115      	bne.n	800ad24 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	32ae      	adds	r2, #174	; 0xae
 800ad02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad06:	6a1b      	ldr	r3, [r3, #32]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00b      	beq.n	800ad24 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	32ae      	adds	r2, #174	; 0xae
 800ad16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad1a:	6a1b      	ldr	r3, [r3, #32]
 800ad1c:	78fa      	ldrb	r2, [r7, #3]
 800ad1e:	4611      	mov	r1, r2
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b082      	sub	sp, #8
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	460b      	mov	r3, r1
 800ad38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	32ae      	adds	r2, #174	; 0xae
 800ad44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d101      	bne.n	800ad50 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	e01c      	b.n	800ad8a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	2b03      	cmp	r3, #3
 800ad5a:	d115      	bne.n	800ad88 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	32ae      	adds	r2, #174	; 0xae
 800ad66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00b      	beq.n	800ad88 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	32ae      	adds	r2, #174	; 0xae
 800ad7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad80:	78fa      	ldrb	r2, [r7, #3]
 800ad82:	4611      	mov	r1, r2
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00e      	beq.n	800ade4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	6852      	ldr	r2, [r2, #4]
 800add2:	b2d2      	uxtb	r2, r2
 800add4:	4611      	mov	r1, r2
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	4798      	blx	r3
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d001      	beq.n	800ade4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ade0:	2303      	movs	r3, #3
 800ade2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800adee:	b480      	push	{r7}
 800adf0:	b083      	sub	sp, #12
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	460b      	mov	r3, r1
 800adf8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800adfa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	460b      	mov	r3, r1
 800ae12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b086      	sub	sp, #24
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ae36:	2300      	movs	r3, #0
 800ae38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	885b      	ldrh	r3, [r3, #2]
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d920      	bls.n	800ae8c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ae52:	e013      	b.n	800ae7c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ae54:	f107 030a 	add.w	r3, r7, #10
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6978      	ldr	r0, [r7, #20]
 800ae5c:	f000 f81b 	bl	800ae96 <USBD_GetNextDesc>
 800ae60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	785b      	ldrb	r3, [r3, #1]
 800ae66:	2b05      	cmp	r3, #5
 800ae68:	d108      	bne.n	800ae7c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	789b      	ldrb	r3, [r3, #2]
 800ae72:	78fa      	ldrb	r2, [r7, #3]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d008      	beq.n	800ae8a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	885b      	ldrh	r3, [r3, #2]
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	897b      	ldrh	r3, [r7, #10]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d8e5      	bhi.n	800ae54 <USBD_GetEpDesc+0x32>
 800ae88:	e000      	b.n	800ae8c <USBD_GetEpDesc+0x6a>
          break;
 800ae8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ae8c:	693b      	ldr	r3, [r7, #16]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3718      	adds	r7, #24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b085      	sub	sp, #20
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	881a      	ldrh	r2, [r3, #0]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	4413      	add	r3, r2
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4413      	add	r3, r2
 800aec0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aec2:	68fb      	ldr	r3, [r7, #12]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	3301      	adds	r3, #1
 800aee6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aeee:	8a3b      	ldrh	r3, [r7, #16]
 800aef0:	021b      	lsls	r3, r3, #8
 800aef2:	b21a      	sxth	r2, r3
 800aef4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	b21b      	sxth	r3, r3
 800aefc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aefe:	89fb      	ldrh	r3, [r7, #14]
}
 800af00:	4618      	mov	r0, r3
 800af02:	371c      	adds	r7, #28
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af22:	2b40      	cmp	r3, #64	; 0x40
 800af24:	d005      	beq.n	800af32 <USBD_StdDevReq+0x26>
 800af26:	2b40      	cmp	r3, #64	; 0x40
 800af28:	d857      	bhi.n	800afda <USBD_StdDevReq+0xce>
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00f      	beq.n	800af4e <USBD_StdDevReq+0x42>
 800af2e:	2b20      	cmp	r3, #32
 800af30:	d153      	bne.n	800afda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	32ae      	adds	r2, #174	; 0xae
 800af3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	4798      	blx	r3
 800af48:	4603      	mov	r3, r0
 800af4a:	73fb      	strb	r3, [r7, #15]
      break;
 800af4c:	e04a      	b.n	800afe4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	785b      	ldrb	r3, [r3, #1]
 800af52:	2b09      	cmp	r3, #9
 800af54:	d83b      	bhi.n	800afce <USBD_StdDevReq+0xc2>
 800af56:	a201      	add	r2, pc, #4	; (adr r2, 800af5c <USBD_StdDevReq+0x50>)
 800af58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5c:	0800afb1 	.word	0x0800afb1
 800af60:	0800afc5 	.word	0x0800afc5
 800af64:	0800afcf 	.word	0x0800afcf
 800af68:	0800afbb 	.word	0x0800afbb
 800af6c:	0800afcf 	.word	0x0800afcf
 800af70:	0800af8f 	.word	0x0800af8f
 800af74:	0800af85 	.word	0x0800af85
 800af78:	0800afcf 	.word	0x0800afcf
 800af7c:	0800afa7 	.word	0x0800afa7
 800af80:	0800af99 	.word	0x0800af99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fa3c 	bl	800b404 <USBD_GetDescriptor>
          break;
 800af8c:	e024      	b.n	800afd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800af8e:	6839      	ldr	r1, [r7, #0]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fba1 	bl	800b6d8 <USBD_SetAddress>
          break;
 800af96:	e01f      	b.n	800afd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fbe0 	bl	800b760 <USBD_SetConfig>
 800afa0:	4603      	mov	r3, r0
 800afa2:	73fb      	strb	r3, [r7, #15]
          break;
 800afa4:	e018      	b.n	800afd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fc83 	bl	800b8b4 <USBD_GetConfig>
          break;
 800afae:	e013      	b.n	800afd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fcb4 	bl	800b920 <USBD_GetStatus>
          break;
 800afb8:	e00e      	b.n	800afd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fce3 	bl	800b988 <USBD_SetFeature>
          break;
 800afc2:	e009      	b.n	800afd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800afc4:	6839      	ldr	r1, [r7, #0]
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fd07 	bl	800b9da <USBD_ClrFeature>
          break;
 800afcc:	e004      	b.n	800afd8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fd5e 	bl	800ba92 <USBD_CtlError>
          break;
 800afd6:	bf00      	nop
      }
      break;
 800afd8:	e004      	b.n	800afe4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800afda:	6839      	ldr	r1, [r7, #0]
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 fd58 	bl	800ba92 <USBD_CtlError>
      break;
 800afe2:	bf00      	nop
  }

  return ret;
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop

0800aff0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b006:	2b40      	cmp	r3, #64	; 0x40
 800b008:	d005      	beq.n	800b016 <USBD_StdItfReq+0x26>
 800b00a:	2b40      	cmp	r3, #64	; 0x40
 800b00c:	d852      	bhi.n	800b0b4 <USBD_StdItfReq+0xc4>
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <USBD_StdItfReq+0x26>
 800b012:	2b20      	cmp	r3, #32
 800b014:	d14e      	bne.n	800b0b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	3b01      	subs	r3, #1
 800b020:	2b02      	cmp	r3, #2
 800b022:	d840      	bhi.n	800b0a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	889b      	ldrh	r3, [r3, #4]
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d836      	bhi.n	800b09c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	889b      	ldrh	r3, [r3, #4]
 800b032:	b2db      	uxtb	r3, r3
 800b034:	4619      	mov	r1, r3
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f7ff fed9 	bl	800adee <USBD_CoreFindIF>
 800b03c:	4603      	mov	r3, r0
 800b03e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b040:	7bbb      	ldrb	r3, [r7, #14]
 800b042:	2bff      	cmp	r3, #255	; 0xff
 800b044:	d01d      	beq.n	800b082 <USBD_StdItfReq+0x92>
 800b046:	7bbb      	ldrb	r3, [r7, #14]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d11a      	bne.n	800b082 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b04c:	7bba      	ldrb	r2, [r7, #14]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	32ae      	adds	r2, #174	; 0xae
 800b052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00f      	beq.n	800b07c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b05c:	7bba      	ldrb	r2, [r7, #14]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b064:	7bba      	ldrb	r2, [r7, #14]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	32ae      	adds	r2, #174	; 0xae
 800b06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	6839      	ldr	r1, [r7, #0]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	4798      	blx	r3
 800b076:	4603      	mov	r3, r0
 800b078:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b07a:	e004      	b.n	800b086 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b07c:	2303      	movs	r3, #3
 800b07e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b080:	e001      	b.n	800b086 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b082:	2303      	movs	r3, #3
 800b084:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	88db      	ldrh	r3, [r3, #6]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d110      	bne.n	800b0b0 <USBD_StdItfReq+0xc0>
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10d      	bne.n	800b0b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 fdc7 	bl	800bc28 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b09a:	e009      	b.n	800b0b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fcf7 	bl	800ba92 <USBD_CtlError>
          break;
 800b0a4:	e004      	b.n	800b0b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fcf2 	bl	800ba92 <USBD_CtlError>
          break;
 800b0ae:	e000      	b.n	800b0b2 <USBD_StdItfReq+0xc2>
          break;
 800b0b0:	bf00      	nop
      }
      break;
 800b0b2:	e004      	b.n	800b0be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b0b4:	6839      	ldr	r1, [r7, #0]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 fceb 	bl	800ba92 <USBD_CtlError>
      break;
 800b0bc:	bf00      	nop
  }

  return ret;
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	889b      	ldrh	r3, [r3, #4]
 800b0da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0e4:	2b40      	cmp	r3, #64	; 0x40
 800b0e6:	d007      	beq.n	800b0f8 <USBD_StdEPReq+0x30>
 800b0e8:	2b40      	cmp	r3, #64	; 0x40
 800b0ea:	f200 817f 	bhi.w	800b3ec <USBD_StdEPReq+0x324>
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d02a      	beq.n	800b148 <USBD_StdEPReq+0x80>
 800b0f2:	2b20      	cmp	r3, #32
 800b0f4:	f040 817a 	bne.w	800b3ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0f8:	7bbb      	ldrb	r3, [r7, #14]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7ff fe83 	bl	800ae08 <USBD_CoreFindEP>
 800b102:	4603      	mov	r3, r0
 800b104:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b106:	7b7b      	ldrb	r3, [r7, #13]
 800b108:	2bff      	cmp	r3, #255	; 0xff
 800b10a:	f000 8174 	beq.w	800b3f6 <USBD_StdEPReq+0x32e>
 800b10e:	7b7b      	ldrb	r3, [r7, #13]
 800b110:	2b00      	cmp	r3, #0
 800b112:	f040 8170 	bne.w	800b3f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b116:	7b7a      	ldrb	r2, [r7, #13]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b11e:	7b7a      	ldrb	r2, [r7, #13]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	32ae      	adds	r2, #174	; 0xae
 800b124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f000 8163 	beq.w	800b3f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b130:	7b7a      	ldrb	r2, [r7, #13]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	32ae      	adds	r2, #174	; 0xae
 800b136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	6839      	ldr	r1, [r7, #0]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	4798      	blx	r3
 800b142:	4603      	mov	r3, r0
 800b144:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b146:	e156      	b.n	800b3f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	785b      	ldrb	r3, [r3, #1]
 800b14c:	2b03      	cmp	r3, #3
 800b14e:	d008      	beq.n	800b162 <USBD_StdEPReq+0x9a>
 800b150:	2b03      	cmp	r3, #3
 800b152:	f300 8145 	bgt.w	800b3e0 <USBD_StdEPReq+0x318>
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 809b 	beq.w	800b292 <USBD_StdEPReq+0x1ca>
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d03c      	beq.n	800b1da <USBD_StdEPReq+0x112>
 800b160:	e13e      	b.n	800b3e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	2b02      	cmp	r3, #2
 800b16c:	d002      	beq.n	800b174 <USBD_StdEPReq+0xac>
 800b16e:	2b03      	cmp	r3, #3
 800b170:	d016      	beq.n	800b1a0 <USBD_StdEPReq+0xd8>
 800b172:	e02c      	b.n	800b1ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b174:	7bbb      	ldrb	r3, [r7, #14]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00d      	beq.n	800b196 <USBD_StdEPReq+0xce>
 800b17a:	7bbb      	ldrb	r3, [r7, #14]
 800b17c:	2b80      	cmp	r3, #128	; 0x80
 800b17e:	d00a      	beq.n	800b196 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b180:	7bbb      	ldrb	r3, [r7, #14]
 800b182:	4619      	mov	r1, r3
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f001 f963 	bl	800c450 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b18a:	2180      	movs	r1, #128	; 0x80
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f001 f95f 	bl	800c450 <USBD_LL_StallEP>
 800b192:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b194:	e020      	b.n	800b1d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fc7a 	bl	800ba92 <USBD_CtlError>
              break;
 800b19e:	e01b      	b.n	800b1d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	885b      	ldrh	r3, [r3, #2]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d10e      	bne.n	800b1c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1a8:	7bbb      	ldrb	r3, [r7, #14]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00b      	beq.n	800b1c6 <USBD_StdEPReq+0xfe>
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]
 800b1b0:	2b80      	cmp	r3, #128	; 0x80
 800b1b2:	d008      	beq.n	800b1c6 <USBD_StdEPReq+0xfe>
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	88db      	ldrh	r3, [r3, #6]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d104      	bne.n	800b1c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1bc:	7bbb      	ldrb	r3, [r7, #14]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f001 f945 	bl	800c450 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fd2e 	bl	800bc28 <USBD_CtlSendStatus>

              break;
 800b1cc:	e004      	b.n	800b1d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fc5e 	bl	800ba92 <USBD_CtlError>
              break;
 800b1d6:	bf00      	nop
          }
          break;
 800b1d8:	e107      	b.n	800b3ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d002      	beq.n	800b1ec <USBD_StdEPReq+0x124>
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	d016      	beq.n	800b218 <USBD_StdEPReq+0x150>
 800b1ea:	e04b      	b.n	800b284 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1ec:	7bbb      	ldrb	r3, [r7, #14]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00d      	beq.n	800b20e <USBD_StdEPReq+0x146>
 800b1f2:	7bbb      	ldrb	r3, [r7, #14]
 800b1f4:	2b80      	cmp	r3, #128	; 0x80
 800b1f6:	d00a      	beq.n	800b20e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1f8:	7bbb      	ldrb	r3, [r7, #14]
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f001 f927 	bl	800c450 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b202:	2180      	movs	r1, #128	; 0x80
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f001 f923 	bl	800c450 <USBD_LL_StallEP>
 800b20a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b20c:	e040      	b.n	800b290 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fc3e 	bl	800ba92 <USBD_CtlError>
              break;
 800b216:	e03b      	b.n	800b290 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	885b      	ldrh	r3, [r3, #2]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d136      	bne.n	800b28e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b226:	2b00      	cmp	r3, #0
 800b228:	d004      	beq.n	800b234 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b22a:	7bbb      	ldrb	r3, [r7, #14]
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f001 f92d 	bl	800c48e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 fcf7 	bl	800bc28 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b23a:	7bbb      	ldrb	r3, [r7, #14]
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f7ff fde2 	bl	800ae08 <USBD_CoreFindEP>
 800b244:	4603      	mov	r3, r0
 800b246:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b248:	7b7b      	ldrb	r3, [r7, #13]
 800b24a:	2bff      	cmp	r3, #255	; 0xff
 800b24c:	d01f      	beq.n	800b28e <USBD_StdEPReq+0x1c6>
 800b24e:	7b7b      	ldrb	r3, [r7, #13]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d11c      	bne.n	800b28e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b254:	7b7a      	ldrb	r2, [r7, #13]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b25c:	7b7a      	ldrb	r2, [r7, #13]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	32ae      	adds	r2, #174	; 0xae
 800b262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d010      	beq.n	800b28e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b26c:	7b7a      	ldrb	r2, [r7, #13]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	32ae      	adds	r2, #174	; 0xae
 800b272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	4798      	blx	r3
 800b27e:	4603      	mov	r3, r0
 800b280:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b282:	e004      	b.n	800b28e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fc03 	bl	800ba92 <USBD_CtlError>
              break;
 800b28c:	e000      	b.n	800b290 <USBD_StdEPReq+0x1c8>
              break;
 800b28e:	bf00      	nop
          }
          break;
 800b290:	e0ab      	b.n	800b3ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d002      	beq.n	800b2a4 <USBD_StdEPReq+0x1dc>
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	d032      	beq.n	800b308 <USBD_StdEPReq+0x240>
 800b2a2:	e097      	b.n	800b3d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2a4:	7bbb      	ldrb	r3, [r7, #14]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d007      	beq.n	800b2ba <USBD_StdEPReq+0x1f2>
 800b2aa:	7bbb      	ldrb	r3, [r7, #14]
 800b2ac:	2b80      	cmp	r3, #128	; 0x80
 800b2ae:	d004      	beq.n	800b2ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fbed 	bl	800ba92 <USBD_CtlError>
                break;
 800b2b8:	e091      	b.n	800b3de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	da0b      	bge.n	800b2da <USBD_StdEPReq+0x212>
 800b2c2:	7bbb      	ldrb	r3, [r7, #14]
 800b2c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4413      	add	r3, r2
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	3310      	adds	r3, #16
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	e00b      	b.n	800b2f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2da:	7bbb      	ldrb	r3, [r7, #14]
 800b2dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4413      	add	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	3304      	adds	r3, #4
 800b2f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	2202      	movs	r2, #2
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fc37 	bl	800bb74 <USBD_CtlSendData>
              break;
 800b306:	e06a      	b.n	800b3de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	da11      	bge.n	800b334 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b310:	7bbb      	ldrb	r3, [r7, #14]
 800b312:	f003 020f 	and.w	r2, r3, #15
 800b316:	6879      	ldr	r1, [r7, #4]
 800b318:	4613      	mov	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	440b      	add	r3, r1
 800b322:	3324      	adds	r3, #36	; 0x24
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d117      	bne.n	800b35a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 fbb0 	bl	800ba92 <USBD_CtlError>
                  break;
 800b332:	e054      	b.n	800b3de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b334:	7bbb      	ldrb	r3, [r7, #14]
 800b336:	f003 020f 	and.w	r2, r3, #15
 800b33a:	6879      	ldr	r1, [r7, #4]
 800b33c:	4613      	mov	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	440b      	add	r3, r1
 800b346:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b34a:	881b      	ldrh	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d104      	bne.n	800b35a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b350:	6839      	ldr	r1, [r7, #0]
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 fb9d 	bl	800ba92 <USBD_CtlError>
                  break;
 800b358:	e041      	b.n	800b3de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b35a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	da0b      	bge.n	800b37a <USBD_StdEPReq+0x2b2>
 800b362:	7bbb      	ldrb	r3, [r7, #14]
 800b364:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b368:	4613      	mov	r3, r2
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	4413      	add	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	3310      	adds	r3, #16
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	4413      	add	r3, r2
 800b376:	3304      	adds	r3, #4
 800b378:	e00b      	b.n	800b392 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b37a:	7bbb      	ldrb	r3, [r7, #14]
 800b37c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b380:	4613      	mov	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	4413      	add	r3, r2
 800b390:	3304      	adds	r3, #4
 800b392:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b394:	7bbb      	ldrb	r3, [r7, #14]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d002      	beq.n	800b3a0 <USBD_StdEPReq+0x2d8>
 800b39a:	7bbb      	ldrb	r3, [r7, #14]
 800b39c:	2b80      	cmp	r3, #128	; 0x80
 800b39e:	d103      	bne.n	800b3a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	e00e      	b.n	800b3c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b3a8:	7bbb      	ldrb	r3, [r7, #14]
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f001 f88d 	bl	800c4cc <USBD_LL_IsStallEP>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d003      	beq.n	800b3c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	601a      	str	r2, [r3, #0]
 800b3be:	e002      	b.n	800b3c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 fbd1 	bl	800bb74 <USBD_CtlSendData>
              break;
 800b3d2:	e004      	b.n	800b3de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fb5b 	bl	800ba92 <USBD_CtlError>
              break;
 800b3dc:	bf00      	nop
          }
          break;
 800b3de:	e004      	b.n	800b3ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fb55 	bl	800ba92 <USBD_CtlError>
          break;
 800b3e8:	bf00      	nop
      }
      break;
 800b3ea:	e005      	b.n	800b3f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fb4f 	bl	800ba92 <USBD_CtlError>
      break;
 800b3f4:	e000      	b.n	800b3f8 <USBD_StdEPReq+0x330>
      break;
 800b3f6:	bf00      	nop
  }

  return ret;
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
	...

0800b404 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b40e:	2300      	movs	r3, #0
 800b410:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b412:	2300      	movs	r3, #0
 800b414:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b416:	2300      	movs	r3, #0
 800b418:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	885b      	ldrh	r3, [r3, #2]
 800b41e:	0a1b      	lsrs	r3, r3, #8
 800b420:	b29b      	uxth	r3, r3
 800b422:	3b01      	subs	r3, #1
 800b424:	2b06      	cmp	r3, #6
 800b426:	f200 8128 	bhi.w	800b67a <USBD_GetDescriptor+0x276>
 800b42a:	a201      	add	r2, pc, #4	; (adr r2, 800b430 <USBD_GetDescriptor+0x2c>)
 800b42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b430:	0800b44d 	.word	0x0800b44d
 800b434:	0800b465 	.word	0x0800b465
 800b438:	0800b4a5 	.word	0x0800b4a5
 800b43c:	0800b67b 	.word	0x0800b67b
 800b440:	0800b67b 	.word	0x0800b67b
 800b444:	0800b61b 	.word	0x0800b61b
 800b448:	0800b647 	.word	0x0800b647
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	7c12      	ldrb	r2, [r2, #16]
 800b458:	f107 0108 	add.w	r1, r7, #8
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
 800b460:	60f8      	str	r0, [r7, #12]
      break;
 800b462:	e112      	b.n	800b68a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	7c1b      	ldrb	r3, [r3, #16]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10d      	bne.n	800b488 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b474:	f107 0208 	add.w	r2, r7, #8
 800b478:	4610      	mov	r0, r2
 800b47a:	4798      	blx	r3
 800b47c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	3301      	adds	r3, #1
 800b482:	2202      	movs	r2, #2
 800b484:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b486:	e100      	b.n	800b68a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b490:	f107 0208 	add.w	r2, r7, #8
 800b494:	4610      	mov	r0, r2
 800b496:	4798      	blx	r3
 800b498:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	3301      	adds	r3, #1
 800b49e:	2202      	movs	r2, #2
 800b4a0:	701a      	strb	r2, [r3, #0]
      break;
 800b4a2:	e0f2      	b.n	800b68a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	885b      	ldrh	r3, [r3, #2]
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b05      	cmp	r3, #5
 800b4ac:	f200 80ac 	bhi.w	800b608 <USBD_GetDescriptor+0x204>
 800b4b0:	a201      	add	r2, pc, #4	; (adr r2, 800b4b8 <USBD_GetDescriptor+0xb4>)
 800b4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b6:	bf00      	nop
 800b4b8:	0800b4d1 	.word	0x0800b4d1
 800b4bc:	0800b505 	.word	0x0800b505
 800b4c0:	0800b539 	.word	0x0800b539
 800b4c4:	0800b56d 	.word	0x0800b56d
 800b4c8:	0800b5a1 	.word	0x0800b5a1
 800b4cc:	0800b5d5 	.word	0x0800b5d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00b      	beq.n	800b4f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	7c12      	ldrb	r2, [r2, #16]
 800b4e8:	f107 0108 	add.w	r1, r7, #8
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	4798      	blx	r3
 800b4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4f2:	e091      	b.n	800b618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 facb 	bl	800ba92 <USBD_CtlError>
            err++;
 800b4fc:	7afb      	ldrb	r3, [r7, #11]
 800b4fe:	3301      	adds	r3, #1
 800b500:	72fb      	strb	r3, [r7, #11]
          break;
 800b502:	e089      	b.n	800b618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00b      	beq.n	800b528 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	7c12      	ldrb	r2, [r2, #16]
 800b51c:	f107 0108 	add.w	r1, r7, #8
 800b520:	4610      	mov	r0, r2
 800b522:	4798      	blx	r3
 800b524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b526:	e077      	b.n	800b618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b528:	6839      	ldr	r1, [r7, #0]
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 fab1 	bl	800ba92 <USBD_CtlError>
            err++;
 800b530:	7afb      	ldrb	r3, [r7, #11]
 800b532:	3301      	adds	r3, #1
 800b534:	72fb      	strb	r3, [r7, #11]
          break;
 800b536:	e06f      	b.n	800b618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00b      	beq.n	800b55c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	7c12      	ldrb	r2, [r2, #16]
 800b550:	f107 0108 	add.w	r1, r7, #8
 800b554:	4610      	mov	r0, r2
 800b556:	4798      	blx	r3
 800b558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b55a:	e05d      	b.n	800b618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b55c:	6839      	ldr	r1, [r7, #0]
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 fa97 	bl	800ba92 <USBD_CtlError>
            err++;
 800b564:	7afb      	ldrb	r3, [r7, #11]
 800b566:	3301      	adds	r3, #1
 800b568:	72fb      	strb	r3, [r7, #11]
          break;
 800b56a:	e055      	b.n	800b618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00b      	beq.n	800b590 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	7c12      	ldrb	r2, [r2, #16]
 800b584:	f107 0108 	add.w	r1, r7, #8
 800b588:	4610      	mov	r0, r2
 800b58a:	4798      	blx	r3
 800b58c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b58e:	e043      	b.n	800b618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fa7d 	bl	800ba92 <USBD_CtlError>
            err++;
 800b598:	7afb      	ldrb	r3, [r7, #11]
 800b59a:	3301      	adds	r3, #1
 800b59c:	72fb      	strb	r3, [r7, #11]
          break;
 800b59e:	e03b      	b.n	800b618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5a6:	695b      	ldr	r3, [r3, #20]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00b      	beq.n	800b5c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5b2:	695b      	ldr	r3, [r3, #20]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	7c12      	ldrb	r2, [r2, #16]
 800b5b8:	f107 0108 	add.w	r1, r7, #8
 800b5bc:	4610      	mov	r0, r2
 800b5be:	4798      	blx	r3
 800b5c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5c2:	e029      	b.n	800b618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fa63 	bl	800ba92 <USBD_CtlError>
            err++;
 800b5cc:	7afb      	ldrb	r3, [r7, #11]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b5d2:	e021      	b.n	800b618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5da:	699b      	ldr	r3, [r3, #24]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00b      	beq.n	800b5f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	7c12      	ldrb	r2, [r2, #16]
 800b5ec:	f107 0108 	add.w	r1, r7, #8
 800b5f0:	4610      	mov	r0, r2
 800b5f2:	4798      	blx	r3
 800b5f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5f6:	e00f      	b.n	800b618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fa49 	bl	800ba92 <USBD_CtlError>
            err++;
 800b600:	7afb      	ldrb	r3, [r7, #11]
 800b602:	3301      	adds	r3, #1
 800b604:	72fb      	strb	r3, [r7, #11]
          break;
 800b606:	e007      	b.n	800b618 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b608:	6839      	ldr	r1, [r7, #0]
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fa41 	bl	800ba92 <USBD_CtlError>
          err++;
 800b610:	7afb      	ldrb	r3, [r7, #11]
 800b612:	3301      	adds	r3, #1
 800b614:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b616:	bf00      	nop
      }
      break;
 800b618:	e037      	b.n	800b68a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	7c1b      	ldrb	r3, [r3, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d109      	bne.n	800b636 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b62a:	f107 0208 	add.w	r2, r7, #8
 800b62e:	4610      	mov	r0, r2
 800b630:	4798      	blx	r3
 800b632:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b634:	e029      	b.n	800b68a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 fa2a 	bl	800ba92 <USBD_CtlError>
        err++;
 800b63e:	7afb      	ldrb	r3, [r7, #11]
 800b640:	3301      	adds	r3, #1
 800b642:	72fb      	strb	r3, [r7, #11]
      break;
 800b644:	e021      	b.n	800b68a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	7c1b      	ldrb	r3, [r3, #16]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d10d      	bne.n	800b66a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b656:	f107 0208 	add.w	r2, r7, #8
 800b65a:	4610      	mov	r0, r2
 800b65c:	4798      	blx	r3
 800b65e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	3301      	adds	r3, #1
 800b664:	2207      	movs	r2, #7
 800b666:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b668:	e00f      	b.n	800b68a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fa10 	bl	800ba92 <USBD_CtlError>
        err++;
 800b672:	7afb      	ldrb	r3, [r7, #11]
 800b674:	3301      	adds	r3, #1
 800b676:	72fb      	strb	r3, [r7, #11]
      break;
 800b678:	e007      	b.n	800b68a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b67a:	6839      	ldr	r1, [r7, #0]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 fa08 	bl	800ba92 <USBD_CtlError>
      err++;
 800b682:	7afb      	ldrb	r3, [r7, #11]
 800b684:	3301      	adds	r3, #1
 800b686:	72fb      	strb	r3, [r7, #11]
      break;
 800b688:	bf00      	nop
  }

  if (err != 0U)
 800b68a:	7afb      	ldrb	r3, [r7, #11]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d11e      	bne.n	800b6ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	88db      	ldrh	r3, [r3, #6]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d016      	beq.n	800b6c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b698:	893b      	ldrh	r3, [r7, #8]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00e      	beq.n	800b6bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	88da      	ldrh	r2, [r3, #6]
 800b6a2:	893b      	ldrh	r3, [r7, #8]
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	bf28      	it	cs
 800b6a8:	4613      	movcs	r3, r2
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6ae:	893b      	ldrh	r3, [r7, #8]
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	68f9      	ldr	r1, [r7, #12]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 fa5d 	bl	800bb74 <USBD_CtlSendData>
 800b6ba:	e009      	b.n	800b6d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f9e7 	bl	800ba92 <USBD_CtlError>
 800b6c4:	e004      	b.n	800b6d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 faae 	bl	800bc28 <USBD_CtlSendStatus>
 800b6cc:	e000      	b.n	800b6d0 <USBD_GetDescriptor+0x2cc>
    return;
 800b6ce:	bf00      	nop
  }
}
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop

0800b6d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	889b      	ldrh	r3, [r3, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d131      	bne.n	800b74e <USBD_SetAddress+0x76>
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	88db      	ldrh	r3, [r3, #6]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d12d      	bne.n	800b74e <USBD_SetAddress+0x76>
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	885b      	ldrh	r3, [r3, #2]
 800b6f6:	2b7f      	cmp	r3, #127	; 0x7f
 800b6f8:	d829      	bhi.n	800b74e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	885b      	ldrh	r3, [r3, #2]
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b704:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	2b03      	cmp	r3, #3
 800b710:	d104      	bne.n	800b71c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f9bc 	bl	800ba92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b71a:	e01d      	b.n	800b758 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	7bfa      	ldrb	r2, [r7, #15]
 800b720:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b724:	7bfb      	ldrb	r3, [r7, #15]
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fefb 	bl	800c524 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fa7a 	bl	800bc28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b734:	7bfb      	ldrb	r3, [r7, #15]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d004      	beq.n	800b744 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2202      	movs	r2, #2
 800b73e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b742:	e009      	b.n	800b758 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b74c:	e004      	b.n	800b758 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b74e:	6839      	ldr	r1, [r7, #0]
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f99e 	bl	800ba92 <USBD_CtlError>
  }
}
 800b756:	bf00      	nop
 800b758:	bf00      	nop
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	885b      	ldrh	r3, [r3, #2]
 800b772:	b2da      	uxtb	r2, r3
 800b774:	4b4e      	ldr	r3, [pc, #312]	; (800b8b0 <USBD_SetConfig+0x150>)
 800b776:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b778:	4b4d      	ldr	r3, [pc, #308]	; (800b8b0 <USBD_SetConfig+0x150>)
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d905      	bls.n	800b78c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f985 	bl	800ba92 <USBD_CtlError>
    return USBD_FAIL;
 800b788:	2303      	movs	r3, #3
 800b78a:	e08c      	b.n	800b8a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b792:	b2db      	uxtb	r3, r3
 800b794:	2b02      	cmp	r3, #2
 800b796:	d002      	beq.n	800b79e <USBD_SetConfig+0x3e>
 800b798:	2b03      	cmp	r3, #3
 800b79a:	d029      	beq.n	800b7f0 <USBD_SetConfig+0x90>
 800b79c:	e075      	b.n	800b88a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b79e:	4b44      	ldr	r3, [pc, #272]	; (800b8b0 <USBD_SetConfig+0x150>)
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d020      	beq.n	800b7e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b7a6:	4b42      	ldr	r3, [pc, #264]	; (800b8b0 <USBD_SetConfig+0x150>)
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7b0:	4b3f      	ldr	r3, [pc, #252]	; (800b8b0 <USBD_SetConfig+0x150>)
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f7fe ffe7 	bl	800a78a <USBD_SetClassConfig>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b7c0:	7bfb      	ldrb	r3, [r7, #15]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d008      	beq.n	800b7d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b7c6:	6839      	ldr	r1, [r7, #0]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f962 	bl	800ba92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2202      	movs	r2, #2
 800b7d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b7d6:	e065      	b.n	800b8a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 fa25 	bl	800bc28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2203      	movs	r2, #3
 800b7e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b7e6:	e05d      	b.n	800b8a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fa1d 	bl	800bc28 <USBD_CtlSendStatus>
      break;
 800b7ee:	e059      	b.n	800b8a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b7f0:	4b2f      	ldr	r3, [pc, #188]	; (800b8b0 <USBD_SetConfig+0x150>)
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d112      	bne.n	800b81e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b800:	4b2b      	ldr	r3, [pc, #172]	; (800b8b0 <USBD_SetConfig+0x150>)
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b80a:	4b29      	ldr	r3, [pc, #164]	; (800b8b0 <USBD_SetConfig+0x150>)
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	4619      	mov	r1, r3
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7fe ffd6 	bl	800a7c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fa06 	bl	800bc28 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b81c:	e042      	b.n	800b8a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b81e:	4b24      	ldr	r3, [pc, #144]	; (800b8b0 <USBD_SetConfig+0x150>)
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d02a      	beq.n	800b882 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	b2db      	uxtb	r3, r3
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f7fe ffc4 	bl	800a7c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b83a:	4b1d      	ldr	r3, [pc, #116]	; (800b8b0 <USBD_SetConfig+0x150>)
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	461a      	mov	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b844:	4b1a      	ldr	r3, [pc, #104]	; (800b8b0 <USBD_SetConfig+0x150>)
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	4619      	mov	r1, r3
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f7fe ff9d 	bl	800a78a <USBD_SetClassConfig>
 800b850:	4603      	mov	r3, r0
 800b852:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b854:	7bfb      	ldrb	r3, [r7, #15]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00f      	beq.n	800b87a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f918 	bl	800ba92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	b2db      	uxtb	r3, r3
 800b868:	4619      	mov	r1, r3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f7fe ffa9 	bl	800a7c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2202      	movs	r2, #2
 800b874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b878:	e014      	b.n	800b8a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f9d4 	bl	800bc28 <USBD_CtlSendStatus>
      break;
 800b880:	e010      	b.n	800b8a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f9d0 	bl	800bc28 <USBD_CtlSendStatus>
      break;
 800b888:	e00c      	b.n	800b8a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 f900 	bl	800ba92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b892:	4b07      	ldr	r3, [pc, #28]	; (800b8b0 <USBD_SetConfig+0x150>)
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	4619      	mov	r1, r3
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f7fe ff92 	bl	800a7c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b89e:	2303      	movs	r3, #3
 800b8a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b8a2:	bf00      	nop
  }

  return ret;
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	20000568 	.word	0x20000568

0800b8b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	88db      	ldrh	r3, [r3, #6]
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d004      	beq.n	800b8d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f8e2 	bl	800ba92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b8ce:	e023      	b.n	800b918 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	dc02      	bgt.n	800b8e2 <USBD_GetConfig+0x2e>
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	dc03      	bgt.n	800b8e8 <USBD_GetConfig+0x34>
 800b8e0:	e015      	b.n	800b90e <USBD_GetConfig+0x5a>
 800b8e2:	2b03      	cmp	r3, #3
 800b8e4:	d00b      	beq.n	800b8fe <USBD_GetConfig+0x4a>
 800b8e6:	e012      	b.n	800b90e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	3308      	adds	r3, #8
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 f93c 	bl	800bb74 <USBD_CtlSendData>
        break;
 800b8fc:	e00c      	b.n	800b918 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	3304      	adds	r3, #4
 800b902:	2201      	movs	r2, #1
 800b904:	4619      	mov	r1, r3
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f934 	bl	800bb74 <USBD_CtlSendData>
        break;
 800b90c:	e004      	b.n	800b918 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 f8be 	bl	800ba92 <USBD_CtlError>
        break;
 800b916:	bf00      	nop
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b930:	b2db      	uxtb	r3, r3
 800b932:	3b01      	subs	r3, #1
 800b934:	2b02      	cmp	r3, #2
 800b936:	d81e      	bhi.n	800b976 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	88db      	ldrh	r3, [r3, #6]
 800b93c:	2b02      	cmp	r3, #2
 800b93e:	d004      	beq.n	800b94a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b940:	6839      	ldr	r1, [r7, #0]
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 f8a5 	bl	800ba92 <USBD_CtlError>
        break;
 800b948:	e01a      	b.n	800b980 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2201      	movs	r2, #1
 800b94e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b956:	2b00      	cmp	r3, #0
 800b958:	d005      	beq.n	800b966 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	f043 0202 	orr.w	r2, r3, #2
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	330c      	adds	r3, #12
 800b96a:	2202      	movs	r2, #2
 800b96c:	4619      	mov	r1, r3
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f900 	bl	800bb74 <USBD_CtlSendData>
      break;
 800b974:	e004      	b.n	800b980 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b976:	6839      	ldr	r1, [r7, #0]
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 f88a 	bl	800ba92 <USBD_CtlError>
      break;
 800b97e:	bf00      	nop
  }
}
 800b980:	bf00      	nop
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	885b      	ldrh	r3, [r3, #2]
 800b996:	2b01      	cmp	r3, #1
 800b998:	d107      	bne.n	800b9aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f940 	bl	800bc28 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b9a8:	e013      	b.n	800b9d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	885b      	ldrh	r3, [r3, #2]
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	d10b      	bne.n	800b9ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	889b      	ldrh	r3, [r3, #4]
 800b9b6:	0a1b      	lsrs	r3, r3, #8
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f930 	bl	800bc28 <USBD_CtlSendStatus>
}
 800b9c8:	e003      	b.n	800b9d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 f860 	bl	800ba92 <USBD_CtlError>
}
 800b9d2:	bf00      	nop
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b082      	sub	sp, #8
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	3b01      	subs	r3, #1
 800b9ee:	2b02      	cmp	r3, #2
 800b9f0:	d80b      	bhi.n	800ba0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	885b      	ldrh	r3, [r3, #2]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d10c      	bne.n	800ba14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f910 	bl	800bc28 <USBD_CtlSendStatus>
      }
      break;
 800ba08:	e004      	b.n	800ba14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba0a:	6839      	ldr	r1, [r7, #0]
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f840 	bl	800ba92 <USBD_CtlError>
      break;
 800ba12:	e000      	b.n	800ba16 <USBD_ClrFeature+0x3c>
      break;
 800ba14:	bf00      	nop
  }
}
 800ba16:	bf00      	nop
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b084      	sub	sp, #16
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	781a      	ldrb	r2, [r3, #0]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	3301      	adds	r3, #1
 800ba38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	781a      	ldrb	r2, [r3, #0]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	3301      	adds	r3, #1
 800ba46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f7ff fa41 	bl	800aed0 <SWAPBYTE>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	461a      	mov	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f7ff fa34 	bl	800aed0 <SWAPBYTE>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	3301      	adds	r3, #1
 800ba74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f7ff fa27 	bl	800aed0 <SWAPBYTE>
 800ba82:	4603      	mov	r3, r0
 800ba84:	461a      	mov	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	80da      	strh	r2, [r3, #6]
}
 800ba8a:	bf00      	nop
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b082      	sub	sp, #8
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
 800ba9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba9c:	2180      	movs	r1, #128	; 0x80
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 fcd6 	bl	800c450 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800baa4:	2100      	movs	r1, #0
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 fcd2 	bl	800c450 <USBD_LL_StallEP>
}
 800baac:	bf00      	nop
 800baae:	3708      	adds	r7, #8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b086      	sub	sp, #24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bac0:	2300      	movs	r3, #0
 800bac2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d036      	beq.n	800bb38 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bace:	6938      	ldr	r0, [r7, #16]
 800bad0:	f000 f836 	bl	800bb40 <USBD_GetLen>
 800bad4:	4603      	mov	r3, r0
 800bad6:	3301      	adds	r3, #1
 800bad8:	b29b      	uxth	r3, r3
 800bada:	005b      	lsls	r3, r3, #1
 800badc:	b29a      	uxth	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bae2:	7dfb      	ldrb	r3, [r7, #23]
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	4413      	add	r3, r2
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	7812      	ldrb	r2, [r2, #0]
 800baec:	701a      	strb	r2, [r3, #0]
  idx++;
 800baee:	7dfb      	ldrb	r3, [r7, #23]
 800baf0:	3301      	adds	r3, #1
 800baf2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800baf4:	7dfb      	ldrb	r3, [r7, #23]
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	4413      	add	r3, r2
 800bafa:	2203      	movs	r2, #3
 800bafc:	701a      	strb	r2, [r3, #0]
  idx++;
 800bafe:	7dfb      	ldrb	r3, [r7, #23]
 800bb00:	3301      	adds	r3, #1
 800bb02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb04:	e013      	b.n	800bb2e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb06:	7dfb      	ldrb	r3, [r7, #23]
 800bb08:	68ba      	ldr	r2, [r7, #8]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	7812      	ldrb	r2, [r2, #0]
 800bb10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	3301      	adds	r3, #1
 800bb16:	613b      	str	r3, [r7, #16]
    idx++;
 800bb18:	7dfb      	ldrb	r3, [r7, #23]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb1e:	7dfb      	ldrb	r3, [r7, #23]
 800bb20:	68ba      	ldr	r2, [r7, #8]
 800bb22:	4413      	add	r3, r2
 800bb24:	2200      	movs	r2, #0
 800bb26:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb28:	7dfb      	ldrb	r3, [r7, #23]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1e7      	bne.n	800bb06 <USBD_GetString+0x52>
 800bb36:	e000      	b.n	800bb3a <USBD_GetString+0x86>
    return;
 800bb38:	bf00      	nop
  }
}
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bb50:	e005      	b.n	800bb5e <USBD_GetLen+0x1e>
  {
    len++;
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
 800bb54:	3301      	adds	r3, #1
 800bb56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1f5      	bne.n	800bb52 <USBD_GetLen+0x12>
  }

  return len;
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3714      	adds	r7, #20
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2202      	movs	r2, #2
 800bb84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	68ba      	ldr	r2, [r7, #8]
 800bb98:	2100      	movs	r1, #0
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f000 fce1 	bl	800c562 <USBD_LL_Transmit>

  return USBD_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b084      	sub	sp, #16
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	60f8      	str	r0, [r7, #12]
 800bbb2:	60b9      	str	r1, [r7, #8]
 800bbb4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	2100      	movs	r1, #0
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f000 fcd0 	bl	800c562 <USBD_LL_Transmit>

  return USBD_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2203      	movs	r2, #3
 800bbdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	687a      	ldr	r2, [r7, #4]
 800bbec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f000 fcd4 	bl	800c5a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b084      	sub	sp, #16
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	60f8      	str	r0, [r7, #12]
 800bc0e:	60b9      	str	r1, [r7, #8]
 800bc10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	68ba      	ldr	r2, [r7, #8]
 800bc16:	2100      	movs	r1, #0
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 fcc3 	bl	800c5a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2204      	movs	r2, #4
 800bc34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc38:	2300      	movs	r3, #0
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 fc8f 	bl	800c562 <USBD_LL_Transmit>

  return USBD_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b082      	sub	sp, #8
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2205      	movs	r2, #5
 800bc5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc5e:	2300      	movs	r3, #0
 800bc60:	2200      	movs	r2, #0
 800bc62:	2100      	movs	r1, #0
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 fc9d 	bl	800c5a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3708      	adds	r7, #8
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc78:	2200      	movs	r2, #0
 800bc7a:	4912      	ldr	r1, [pc, #72]	; (800bcc4 <MX_USB_DEVICE_Init+0x50>)
 800bc7c:	4812      	ldr	r0, [pc, #72]	; (800bcc8 <MX_USB_DEVICE_Init+0x54>)
 800bc7e:	f7fe fd07 	bl	800a690 <USBD_Init>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc88:	f7f5 fda0 	bl	80017cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc8c:	490f      	ldr	r1, [pc, #60]	; (800bccc <MX_USB_DEVICE_Init+0x58>)
 800bc8e:	480e      	ldr	r0, [pc, #56]	; (800bcc8 <MX_USB_DEVICE_Init+0x54>)
 800bc90:	f7fe fd2e 	bl	800a6f0 <USBD_RegisterClass>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc9a:	f7f5 fd97 	bl	80017cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc9e:	490c      	ldr	r1, [pc, #48]	; (800bcd0 <MX_USB_DEVICE_Init+0x5c>)
 800bca0:	4809      	ldr	r0, [pc, #36]	; (800bcc8 <MX_USB_DEVICE_Init+0x54>)
 800bca2:	f7fe fc1f 	bl	800a4e4 <USBD_CDC_RegisterInterface>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bcac:	f7f5 fd8e 	bl	80017cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bcb0:	4805      	ldr	r0, [pc, #20]	; (800bcc8 <MX_USB_DEVICE_Init+0x54>)
 800bcb2:	f7fe fd53 	bl	800a75c <USBD_Start>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bcbc:	f7f5 fd86 	bl	80017cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bcc0:	bf00      	nop
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	200000d0 	.word	0x200000d0
 800bcc8:	2000056c 	.word	0x2000056c
 800bccc:	2000003c 	.word	0x2000003c
 800bcd0:	200000bc 	.word	0x200000bc

0800bcd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bcd8:	2200      	movs	r2, #0
 800bcda:	4905      	ldr	r1, [pc, #20]	; (800bcf0 <CDC_Init_FS+0x1c>)
 800bcdc:	4805      	ldr	r0, [pc, #20]	; (800bcf4 <CDC_Init_FS+0x20>)
 800bcde:	f7fe fc1b 	bl	800a518 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bce2:	4905      	ldr	r1, [pc, #20]	; (800bcf8 <CDC_Init_FS+0x24>)
 800bce4:	4803      	ldr	r0, [pc, #12]	; (800bcf4 <CDC_Init_FS+0x20>)
 800bce6:	f7fe fc39 	bl	800a55c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bcea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	20001048 	.word	0x20001048
 800bcf4:	2000056c 	.word	0x2000056c
 800bcf8:	20000848 	.word	0x20000848

0800bcfc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bd00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	4603      	mov	r3, r0
 800bd14:	6039      	str	r1, [r7, #0]
 800bd16:	71fb      	strb	r3, [r7, #7]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bd1c:	79fb      	ldrb	r3, [r7, #7]
 800bd1e:	2b23      	cmp	r3, #35	; 0x23
 800bd20:	d84a      	bhi.n	800bdb8 <CDC_Control_FS+0xac>
 800bd22:	a201      	add	r2, pc, #4	; (adr r2, 800bd28 <CDC_Control_FS+0x1c>)
 800bd24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd28:	0800bdb9 	.word	0x0800bdb9
 800bd2c:	0800bdb9 	.word	0x0800bdb9
 800bd30:	0800bdb9 	.word	0x0800bdb9
 800bd34:	0800bdb9 	.word	0x0800bdb9
 800bd38:	0800bdb9 	.word	0x0800bdb9
 800bd3c:	0800bdb9 	.word	0x0800bdb9
 800bd40:	0800bdb9 	.word	0x0800bdb9
 800bd44:	0800bdb9 	.word	0x0800bdb9
 800bd48:	0800bdb9 	.word	0x0800bdb9
 800bd4c:	0800bdb9 	.word	0x0800bdb9
 800bd50:	0800bdb9 	.word	0x0800bdb9
 800bd54:	0800bdb9 	.word	0x0800bdb9
 800bd58:	0800bdb9 	.word	0x0800bdb9
 800bd5c:	0800bdb9 	.word	0x0800bdb9
 800bd60:	0800bdb9 	.word	0x0800bdb9
 800bd64:	0800bdb9 	.word	0x0800bdb9
 800bd68:	0800bdb9 	.word	0x0800bdb9
 800bd6c:	0800bdb9 	.word	0x0800bdb9
 800bd70:	0800bdb9 	.word	0x0800bdb9
 800bd74:	0800bdb9 	.word	0x0800bdb9
 800bd78:	0800bdb9 	.word	0x0800bdb9
 800bd7c:	0800bdb9 	.word	0x0800bdb9
 800bd80:	0800bdb9 	.word	0x0800bdb9
 800bd84:	0800bdb9 	.word	0x0800bdb9
 800bd88:	0800bdb9 	.word	0x0800bdb9
 800bd8c:	0800bdb9 	.word	0x0800bdb9
 800bd90:	0800bdb9 	.word	0x0800bdb9
 800bd94:	0800bdb9 	.word	0x0800bdb9
 800bd98:	0800bdb9 	.word	0x0800bdb9
 800bd9c:	0800bdb9 	.word	0x0800bdb9
 800bda0:	0800bdb9 	.word	0x0800bdb9
 800bda4:	0800bdb9 	.word	0x0800bdb9
 800bda8:	0800bdb9 	.word	0x0800bdb9
 800bdac:	0800bdb9 	.word	0x0800bdb9
 800bdb0:	0800bdb9 	.word	0x0800bdb9
 800bdb4:	0800bdb9 	.word	0x0800bdb9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bdb8:	bf00      	nop
  }

  return (USBD_OK);
 800bdba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bdd2:	6879      	ldr	r1, [r7, #4]
 800bdd4:	4805      	ldr	r0, [pc, #20]	; (800bdec <CDC_Receive_FS+0x24>)
 800bdd6:	f7fe fbc1 	bl	800a55c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bdda:	4804      	ldr	r0, [pc, #16]	; (800bdec <CDC_Receive_FS+0x24>)
 800bddc:	f7fe fc22 	bl	800a624 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bde0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3708      	adds	r7, #8
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	2000056c 	.word	0x2000056c

0800bdf0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800be00:	4b0d      	ldr	r3, [pc, #52]	; (800be38 <CDC_Transmit_FS+0x48>)
 800be02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d001      	beq.n	800be16 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800be12:	2301      	movs	r3, #1
 800be14:	e00b      	b.n	800be2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800be16:	887b      	ldrh	r3, [r7, #2]
 800be18:	461a      	mov	r2, r3
 800be1a:	6879      	ldr	r1, [r7, #4]
 800be1c:	4806      	ldr	r0, [pc, #24]	; (800be38 <CDC_Transmit_FS+0x48>)
 800be1e:	f7fe fb7b 	bl	800a518 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800be22:	4805      	ldr	r0, [pc, #20]	; (800be38 <CDC_Transmit_FS+0x48>)
 800be24:	f7fe fbb8 	bl	800a598 <USBD_CDC_TransmitPacket>
 800be28:	4603      	mov	r3, r0
 800be2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800be2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	2000056c 	.word	0x2000056c

0800be3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b087      	sub	sp, #28
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	4613      	mov	r3, r2
 800be48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800be4a:	2300      	movs	r3, #0
 800be4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800be4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be52:	4618      	mov	r0, r3
 800be54:	371c      	adds	r7, #28
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
	...

0800be60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	4603      	mov	r3, r0
 800be68:	6039      	str	r1, [r7, #0]
 800be6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	2212      	movs	r2, #18
 800be70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be72:	4b03      	ldr	r3, [pc, #12]	; (800be80 <USBD_FS_DeviceDescriptor+0x20>)
}
 800be74:	4618      	mov	r0, r3
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr
 800be80:	200000ec 	.word	0x200000ec

0800be84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	4603      	mov	r3, r0
 800be8c:	6039      	str	r1, [r7, #0]
 800be8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	2204      	movs	r2, #4
 800be94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be96:	4b03      	ldr	r3, [pc, #12]	; (800bea4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be98:	4618      	mov	r0, r3
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr
 800bea4:	20000100 	.word	0x20000100

0800bea8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	4603      	mov	r3, r0
 800beb0:	6039      	str	r1, [r7, #0]
 800beb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800beb4:	79fb      	ldrb	r3, [r7, #7]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d105      	bne.n	800bec6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	4907      	ldr	r1, [pc, #28]	; (800bedc <USBD_FS_ProductStrDescriptor+0x34>)
 800bebe:	4808      	ldr	r0, [pc, #32]	; (800bee0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bec0:	f7ff fdf8 	bl	800bab4 <USBD_GetString>
 800bec4:	e004      	b.n	800bed0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	4904      	ldr	r1, [pc, #16]	; (800bedc <USBD_FS_ProductStrDescriptor+0x34>)
 800beca:	4805      	ldr	r0, [pc, #20]	; (800bee0 <USBD_FS_ProductStrDescriptor+0x38>)
 800becc:	f7ff fdf2 	bl	800bab4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bed0:	4b02      	ldr	r3, [pc, #8]	; (800bedc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	20001848 	.word	0x20001848
 800bee0:	0800f3f8 	.word	0x0800f3f8

0800bee4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	4603      	mov	r3, r0
 800beec:	6039      	str	r1, [r7, #0]
 800beee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bef0:	683a      	ldr	r2, [r7, #0]
 800bef2:	4904      	ldr	r1, [pc, #16]	; (800bf04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bef4:	4804      	ldr	r0, [pc, #16]	; (800bf08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bef6:	f7ff fddd 	bl	800bab4 <USBD_GetString>
  return USBD_StrDesc;
 800befa:	4b02      	ldr	r3, [pc, #8]	; (800bf04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	20001848 	.word	0x20001848
 800bf08:	0800f410 	.word	0x0800f410

0800bf0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	4603      	mov	r3, r0
 800bf14:	6039      	str	r1, [r7, #0]
 800bf16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	221a      	movs	r2, #26
 800bf1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bf1e:	f000 f843 	bl	800bfa8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bf22:	4b02      	ldr	r3, [pc, #8]	; (800bf2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3708      	adds	r7, #8
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	20000104 	.word	0x20000104

0800bf30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	4603      	mov	r3, r0
 800bf38:	6039      	str	r1, [r7, #0]
 800bf3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf3c:	79fb      	ldrb	r3, [r7, #7]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d105      	bne.n	800bf4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	4907      	ldr	r1, [pc, #28]	; (800bf64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf46:	4808      	ldr	r0, [pc, #32]	; (800bf68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf48:	f7ff fdb4 	bl	800bab4 <USBD_GetString>
 800bf4c:	e004      	b.n	800bf58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf4e:	683a      	ldr	r2, [r7, #0]
 800bf50:	4904      	ldr	r1, [pc, #16]	; (800bf64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf52:	4805      	ldr	r0, [pc, #20]	; (800bf68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf54:	f7ff fdae 	bl	800bab4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf58:	4b02      	ldr	r3, [pc, #8]	; (800bf64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	20001848 	.word	0x20001848
 800bf68:	0800f424 	.word	0x0800f424

0800bf6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	4603      	mov	r3, r0
 800bf74:	6039      	str	r1, [r7, #0]
 800bf76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf78:	79fb      	ldrb	r3, [r7, #7]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d105      	bne.n	800bf8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf7e:	683a      	ldr	r2, [r7, #0]
 800bf80:	4907      	ldr	r1, [pc, #28]	; (800bfa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf82:	4808      	ldr	r0, [pc, #32]	; (800bfa4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf84:	f7ff fd96 	bl	800bab4 <USBD_GetString>
 800bf88:	e004      	b.n	800bf94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf8a:	683a      	ldr	r2, [r7, #0]
 800bf8c:	4904      	ldr	r1, [pc, #16]	; (800bfa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf8e:	4805      	ldr	r0, [pc, #20]	; (800bfa4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf90:	f7ff fd90 	bl	800bab4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf94:	4b02      	ldr	r3, [pc, #8]	; (800bfa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	20001848 	.word	0x20001848
 800bfa4:	0800f430 	.word	0x0800f430

0800bfa8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bfae:	4b0f      	ldr	r3, [pc, #60]	; (800bfec <Get_SerialNum+0x44>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bfb4:	4b0e      	ldr	r3, [pc, #56]	; (800bff0 <Get_SerialNum+0x48>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bfba:	4b0e      	ldr	r3, [pc, #56]	; (800bff4 <Get_SerialNum+0x4c>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d009      	beq.n	800bfe2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bfce:	2208      	movs	r2, #8
 800bfd0:	4909      	ldr	r1, [pc, #36]	; (800bff8 <Get_SerialNum+0x50>)
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f000 f814 	bl	800c000 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bfd8:	2204      	movs	r2, #4
 800bfda:	4908      	ldr	r1, [pc, #32]	; (800bffc <Get_SerialNum+0x54>)
 800bfdc:	68b8      	ldr	r0, [r7, #8]
 800bfde:	f000 f80f 	bl	800c000 <IntToUnicode>
  }
}
 800bfe2:	bf00      	nop
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	1fff7a10 	.word	0x1fff7a10
 800bff0:	1fff7a14 	.word	0x1fff7a14
 800bff4:	1fff7a18 	.word	0x1fff7a18
 800bff8:	20000106 	.word	0x20000106
 800bffc:	20000116 	.word	0x20000116

0800c000 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c000:	b480      	push	{r7}
 800c002:	b087      	sub	sp, #28
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	4613      	mov	r3, r2
 800c00c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c00e:	2300      	movs	r3, #0
 800c010:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c012:	2300      	movs	r3, #0
 800c014:	75fb      	strb	r3, [r7, #23]
 800c016:	e027      	b.n	800c068 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	0f1b      	lsrs	r3, r3, #28
 800c01c:	2b09      	cmp	r3, #9
 800c01e:	d80b      	bhi.n	800c038 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	0f1b      	lsrs	r3, r3, #28
 800c024:	b2da      	uxtb	r2, r3
 800c026:	7dfb      	ldrb	r3, [r7, #23]
 800c028:	005b      	lsls	r3, r3, #1
 800c02a:	4619      	mov	r1, r3
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	440b      	add	r3, r1
 800c030:	3230      	adds	r2, #48	; 0x30
 800c032:	b2d2      	uxtb	r2, r2
 800c034:	701a      	strb	r2, [r3, #0]
 800c036:	e00a      	b.n	800c04e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	0f1b      	lsrs	r3, r3, #28
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	4619      	mov	r1, r3
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	440b      	add	r3, r1
 800c048:	3237      	adds	r2, #55	; 0x37
 800c04a:	b2d2      	uxtb	r2, r2
 800c04c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	011b      	lsls	r3, r3, #4
 800c052:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c054:	7dfb      	ldrb	r3, [r7, #23]
 800c056:	005b      	lsls	r3, r3, #1
 800c058:	3301      	adds	r3, #1
 800c05a:	68ba      	ldr	r2, [r7, #8]
 800c05c:	4413      	add	r3, r2
 800c05e:	2200      	movs	r2, #0
 800c060:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c062:	7dfb      	ldrb	r3, [r7, #23]
 800c064:	3301      	adds	r3, #1
 800c066:	75fb      	strb	r3, [r7, #23]
 800c068:	7dfa      	ldrb	r2, [r7, #23]
 800c06a:	79fb      	ldrb	r3, [r7, #7]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d3d3      	bcc.n	800c018 <IntToUnicode+0x18>
  }
}
 800c070:	bf00      	nop
 800c072:	bf00      	nop
 800c074:	371c      	adds	r7, #28
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
	...

0800c080 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b08a      	sub	sp, #40	; 0x28
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c088:	f107 0314 	add.w	r3, r7, #20
 800c08c:	2200      	movs	r2, #0
 800c08e:	601a      	str	r2, [r3, #0]
 800c090:	605a      	str	r2, [r3, #4]
 800c092:	609a      	str	r2, [r3, #8]
 800c094:	60da      	str	r2, [r3, #12]
 800c096:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0a0:	d13a      	bne.n	800c118 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	613b      	str	r3, [r7, #16]
 800c0a6:	4b1e      	ldr	r3, [pc, #120]	; (800c120 <HAL_PCD_MspInit+0xa0>)
 800c0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0aa:	4a1d      	ldr	r2, [pc, #116]	; (800c120 <HAL_PCD_MspInit+0xa0>)
 800c0ac:	f043 0301 	orr.w	r3, r3, #1
 800c0b0:	6313      	str	r3, [r2, #48]	; 0x30
 800c0b2:	4b1b      	ldr	r3, [pc, #108]	; (800c120 <HAL_PCD_MspInit+0xa0>)
 800c0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b6:	f003 0301 	and.w	r3, r3, #1
 800c0ba:	613b      	str	r3, [r7, #16]
 800c0bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c0be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c0c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0c4:	2302      	movs	r3, #2
 800c0c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0cc:	2303      	movs	r3, #3
 800c0ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c0d0:	230a      	movs	r3, #10
 800c0d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0d4:	f107 0314 	add.w	r3, r7, #20
 800c0d8:	4619      	mov	r1, r3
 800c0da:	4812      	ldr	r0, [pc, #72]	; (800c124 <HAL_PCD_MspInit+0xa4>)
 800c0dc:	f7f6 fd70 	bl	8002bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c0e0:	4b0f      	ldr	r3, [pc, #60]	; (800c120 <HAL_PCD_MspInit+0xa0>)
 800c0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0e4:	4a0e      	ldr	r2, [pc, #56]	; (800c120 <HAL_PCD_MspInit+0xa0>)
 800c0e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ea:	6353      	str	r3, [r2, #52]	; 0x34
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	60fb      	str	r3, [r7, #12]
 800c0f0:	4b0b      	ldr	r3, [pc, #44]	; (800c120 <HAL_PCD_MspInit+0xa0>)
 800c0f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0f4:	4a0a      	ldr	r2, [pc, #40]	; (800c120 <HAL_PCD_MspInit+0xa0>)
 800c0f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c0fa:	6453      	str	r3, [r2, #68]	; 0x44
 800c0fc:	4b08      	ldr	r3, [pc, #32]	; (800c120 <HAL_PCD_MspInit+0xa0>)
 800c0fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c104:	60fb      	str	r3, [r7, #12]
 800c106:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c108:	2200      	movs	r2, #0
 800c10a:	2100      	movs	r1, #0
 800c10c:	2043      	movs	r0, #67	; 0x43
 800c10e:	f7f6 fcf0 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c112:	2043      	movs	r0, #67	; 0x43
 800c114:	f7f6 fd09 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c118:	bf00      	nop
 800c11a:	3728      	adds	r7, #40	; 0x28
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	40023800 	.word	0x40023800
 800c124:	40020000 	.word	0x40020000

0800c128 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c13c:	4619      	mov	r1, r3
 800c13e:	4610      	mov	r0, r2
 800c140:	f7fe fb59 	bl	800a7f6 <USBD_LL_SetupStage>
}
 800c144:	bf00      	nop
 800c146:	3708      	adds	r7, #8
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	460b      	mov	r3, r1
 800c156:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c15e:	78fa      	ldrb	r2, [r7, #3]
 800c160:	6879      	ldr	r1, [r7, #4]
 800c162:	4613      	mov	r3, r2
 800c164:	00db      	lsls	r3, r3, #3
 800c166:	4413      	add	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	440b      	add	r3, r1
 800c16c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	78fb      	ldrb	r3, [r7, #3]
 800c174:	4619      	mov	r1, r3
 800c176:	f7fe fb93 	bl	800a8a0 <USBD_LL_DataOutStage>
}
 800c17a:	bf00      	nop
 800c17c:	3708      	adds	r7, #8
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b082      	sub	sp, #8
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
 800c18a:	460b      	mov	r3, r1
 800c18c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c194:	78fa      	ldrb	r2, [r7, #3]
 800c196:	6879      	ldr	r1, [r7, #4]
 800c198:	4613      	mov	r3, r2
 800c19a:	00db      	lsls	r3, r3, #3
 800c19c:	4413      	add	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	440b      	add	r3, r1
 800c1a2:	334c      	adds	r3, #76	; 0x4c
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	78fb      	ldrb	r3, [r7, #3]
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	f7fe fc2c 	bl	800aa06 <USBD_LL_DataInStage>
}
 800c1ae:	bf00      	nop
 800c1b0:	3708      	adds	r7, #8
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b082      	sub	sp, #8
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fe fd60 	bl	800ac8a <USBD_LL_SOF>
}
 800c1ca:	bf00      	nop
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b084      	sub	sp, #16
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	d001      	beq.n	800c1ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c1e6:	f7f5 faf1 	bl	80017cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1f0:	7bfa      	ldrb	r2, [r7, #15]
 800c1f2:	4611      	mov	r1, r2
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fe fd0a 	bl	800ac0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c200:	4618      	mov	r0, r3
 800c202:	f7fe fcb2 	bl	800ab6a <USBD_LL_Reset>
}
 800c206:	bf00      	nop
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
	...

0800c210 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fe fd05 	bl	800ac2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	6812      	ldr	r2, [r2, #0]
 800c232:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c236:	f043 0301 	orr.w	r3, r3, #1
 800c23a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a1b      	ldr	r3, [r3, #32]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d005      	beq.n	800c250 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c244:	4b04      	ldr	r3, [pc, #16]	; (800c258 <HAL_PCD_SuspendCallback+0x48>)
 800c246:	691b      	ldr	r3, [r3, #16]
 800c248:	4a03      	ldr	r2, [pc, #12]	; (800c258 <HAL_PCD_SuspendCallback+0x48>)
 800c24a:	f043 0306 	orr.w	r3, r3, #6
 800c24e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c250:	bf00      	nop
 800c252:	3708      	adds	r7, #8
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	e000ed00 	.word	0xe000ed00

0800c25c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fe fcf5 	bl	800ac5a <USBD_LL_Resume>
}
 800c270:	bf00      	nop
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	460b      	mov	r3, r1
 800c282:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c28a:	78fa      	ldrb	r2, [r7, #3]
 800c28c:	4611      	mov	r1, r2
 800c28e:	4618      	mov	r0, r3
 800c290:	f7fe fd4d 	bl	800ad2e <USBD_LL_IsoOUTIncomplete>
}
 800c294:	bf00      	nop
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2ae:	78fa      	ldrb	r2, [r7, #3]
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fe fd09 	bl	800acca <USBD_LL_IsoINIncomplete>
}
 800c2b8:	bf00      	nop
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fe fd5f 	bl	800ad92 <USBD_LL_DevConnected>
}
 800c2d4:	bf00      	nop
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fe fd5c 	bl	800ada8 <USBD_LL_DevDisconnected>
}
 800c2f0:	bf00      	nop
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d13c      	bne.n	800c382 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c308:	4a20      	ldr	r2, [pc, #128]	; (800c38c <USBD_LL_Init+0x94>)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4a1e      	ldr	r2, [pc, #120]	; (800c38c <USBD_LL_Init+0x94>)
 800c314:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c318:	4b1c      	ldr	r3, [pc, #112]	; (800c38c <USBD_LL_Init+0x94>)
 800c31a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c31e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c320:	4b1a      	ldr	r3, [pc, #104]	; (800c38c <USBD_LL_Init+0x94>)
 800c322:	2204      	movs	r2, #4
 800c324:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c326:	4b19      	ldr	r3, [pc, #100]	; (800c38c <USBD_LL_Init+0x94>)
 800c328:	2202      	movs	r2, #2
 800c32a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c32c:	4b17      	ldr	r3, [pc, #92]	; (800c38c <USBD_LL_Init+0x94>)
 800c32e:	2200      	movs	r2, #0
 800c330:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c332:	4b16      	ldr	r3, [pc, #88]	; (800c38c <USBD_LL_Init+0x94>)
 800c334:	2202      	movs	r2, #2
 800c336:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c338:	4b14      	ldr	r3, [pc, #80]	; (800c38c <USBD_LL_Init+0x94>)
 800c33a:	2200      	movs	r2, #0
 800c33c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c33e:	4b13      	ldr	r3, [pc, #76]	; (800c38c <USBD_LL_Init+0x94>)
 800c340:	2200      	movs	r2, #0
 800c342:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c344:	4b11      	ldr	r3, [pc, #68]	; (800c38c <USBD_LL_Init+0x94>)
 800c346:	2200      	movs	r2, #0
 800c348:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c34a:	4b10      	ldr	r3, [pc, #64]	; (800c38c <USBD_LL_Init+0x94>)
 800c34c:	2200      	movs	r2, #0
 800c34e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c350:	4b0e      	ldr	r3, [pc, #56]	; (800c38c <USBD_LL_Init+0x94>)
 800c352:	2200      	movs	r2, #0
 800c354:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c356:	480d      	ldr	r0, [pc, #52]	; (800c38c <USBD_LL_Init+0x94>)
 800c358:	f7f8 fbc7 	bl	8004aea <HAL_PCD_Init>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c362:	f7f5 fa33 	bl	80017cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c366:	2180      	movs	r1, #128	; 0x80
 800c368:	4808      	ldr	r0, [pc, #32]	; (800c38c <USBD_LL_Init+0x94>)
 800c36a:	f7f9 fe1e 	bl	8005faa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c36e:	2240      	movs	r2, #64	; 0x40
 800c370:	2100      	movs	r1, #0
 800c372:	4806      	ldr	r0, [pc, #24]	; (800c38c <USBD_LL_Init+0x94>)
 800c374:	f7f9 fdd2 	bl	8005f1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c378:	2280      	movs	r2, #128	; 0x80
 800c37a:	2101      	movs	r1, #1
 800c37c:	4803      	ldr	r0, [pc, #12]	; (800c38c <USBD_LL_Init+0x94>)
 800c37e:	f7f9 fdcd 	bl	8005f1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c382:	2300      	movs	r3, #0
}
 800c384:	4618      	mov	r0, r3
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	20001a48 	.word	0x20001a48

0800c390 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c398:	2300      	movs	r3, #0
 800c39a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c39c:	2300      	movs	r3, #0
 800c39e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7f8 fcbc 	bl	8004d24 <HAL_PCD_Start>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f000 f942 	bl	800c63c <USBD_Get_USB_Status>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b084      	sub	sp, #16
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
 800c3ce:	4608      	mov	r0, r1
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	70fb      	strb	r3, [r7, #3]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	70bb      	strb	r3, [r7, #2]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3ee:	78bb      	ldrb	r3, [r7, #2]
 800c3f0:	883a      	ldrh	r2, [r7, #0]
 800c3f2:	78f9      	ldrb	r1, [r7, #3]
 800c3f4:	f7f9 f98d 	bl	8005712 <HAL_PCD_EP_Open>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3fc:	7bfb      	ldrb	r3, [r7, #15]
 800c3fe:	4618      	mov	r0, r3
 800c400:	f000 f91c 	bl	800c63c <USBD_Get_USB_Status>
 800c404:	4603      	mov	r3, r0
 800c406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c408:	7bbb      	ldrb	r3, [r7, #14]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
 800c41a:	460b      	mov	r3, r1
 800c41c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c41e:	2300      	movs	r3, #0
 800c420:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c422:	2300      	movs	r3, #0
 800c424:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c42c:	78fa      	ldrb	r2, [r7, #3]
 800c42e:	4611      	mov	r1, r2
 800c430:	4618      	mov	r0, r3
 800c432:	f7f9 f9d6 	bl	80057e2 <HAL_PCD_EP_Close>
 800c436:	4603      	mov	r3, r0
 800c438:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c43a:	7bfb      	ldrb	r3, [r7, #15]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f000 f8fd 	bl	800c63c <USBD_Get_USB_Status>
 800c442:	4603      	mov	r3, r0
 800c444:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c446:	7bbb      	ldrb	r3, [r7, #14]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3710      	adds	r7, #16
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	460b      	mov	r3, r1
 800c45a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c460:	2300      	movs	r3, #0
 800c462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c46a:	78fa      	ldrb	r2, [r7, #3]
 800c46c:	4611      	mov	r1, r2
 800c46e:	4618      	mov	r0, r3
 800c470:	f7f9 faae 	bl	80059d0 <HAL_PCD_EP_SetStall>
 800c474:	4603      	mov	r3, r0
 800c476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c478:	7bfb      	ldrb	r3, [r7, #15]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f000 f8de 	bl	800c63c <USBD_Get_USB_Status>
 800c480:	4603      	mov	r3, r0
 800c482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c484:	7bbb      	ldrb	r3, [r7, #14]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b084      	sub	sp, #16
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
 800c496:	460b      	mov	r3, r1
 800c498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c49a:	2300      	movs	r3, #0
 800c49c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4a8:	78fa      	ldrb	r2, [r7, #3]
 800c4aa:	4611      	mov	r1, r2
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7f9 faf3 	bl	8005a98 <HAL_PCD_EP_ClrStall>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4b6:	7bfb      	ldrb	r3, [r7, #15]
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f000 f8bf 	bl	800c63c <USBD_Get_USB_Status>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b085      	sub	sp, #20
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c4e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	da0b      	bge.n	800c500 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c4e8:	78fb      	ldrb	r3, [r7, #3]
 800c4ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4ee:	68f9      	ldr	r1, [r7, #12]
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	4413      	add	r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	440b      	add	r3, r1
 800c4fa:	333e      	adds	r3, #62	; 0x3e
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	e00b      	b.n	800c518 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c500:	78fb      	ldrb	r3, [r7, #3]
 800c502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c506:	68f9      	ldr	r1, [r7, #12]
 800c508:	4613      	mov	r3, r2
 800c50a:	00db      	lsls	r3, r3, #3
 800c50c:	4413      	add	r3, r2
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	440b      	add	r3, r1
 800c512:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c516:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	460b      	mov	r3, r1
 800c52e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c530:	2300      	movs	r3, #0
 800c532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c534:	2300      	movs	r3, #0
 800c536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c53e:	78fa      	ldrb	r2, [r7, #3]
 800c540:	4611      	mov	r1, r2
 800c542:	4618      	mov	r0, r3
 800c544:	f7f9 f8c0 	bl	80056c8 <HAL_PCD_SetAddress>
 800c548:	4603      	mov	r3, r0
 800c54a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
 800c54e:	4618      	mov	r0, r3
 800c550:	f000 f874 	bl	800c63c <USBD_Get_USB_Status>
 800c554:	4603      	mov	r3, r0
 800c556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c558:	7bbb      	ldrb	r3, [r7, #14]
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b086      	sub	sp, #24
 800c566:	af00      	add	r7, sp, #0
 800c568:	60f8      	str	r0, [r7, #12]
 800c56a:	607a      	str	r2, [r7, #4]
 800c56c:	603b      	str	r3, [r7, #0]
 800c56e:	460b      	mov	r3, r1
 800c570:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c580:	7af9      	ldrb	r1, [r7, #11]
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	f7f9 f9d9 	bl	800593c <HAL_PCD_EP_Transmit>
 800c58a:	4603      	mov	r3, r0
 800c58c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
 800c590:	4618      	mov	r0, r3
 800c592:	f000 f853 	bl	800c63c <USBD_Get_USB_Status>
 800c596:	4603      	mov	r3, r0
 800c598:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c59a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3718      	adds	r7, #24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b086      	sub	sp, #24
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	607a      	str	r2, [r7, #4]
 800c5ae:	603b      	str	r3, [r7, #0]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c5c2:	7af9      	ldrb	r1, [r7, #11]
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	f7f9 f955 	bl	8005876 <HAL_PCD_EP_Receive>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5d0:	7dfb      	ldrb	r3, [r7, #23]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f000 f832 	bl	800c63c <USBD_Get_USB_Status>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5dc:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3718      	adds	r7, #24
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b082      	sub	sp, #8
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c5f8:	78fa      	ldrb	r2, [r7, #3]
 800c5fa:	4611      	mov	r1, r2
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7f9 f985 	bl	800590c <HAL_PCD_EP_GetRxCount>
 800c602:	4603      	mov	r3, r0
}
 800c604:	4618      	mov	r0, r3
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c614:	4b03      	ldr	r3, [pc, #12]	; (800c624 <USBD_static_malloc+0x18>)
}
 800c616:	4618      	mov	r0, r3
 800c618:	370c      	adds	r7, #12
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	20001f54 	.word	0x20001f54

0800c628 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]

}
 800c630:	bf00      	nop
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	4603      	mov	r3, r0
 800c644:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c646:	2300      	movs	r3, #0
 800c648:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c64a:	79fb      	ldrb	r3, [r7, #7]
 800c64c:	2b03      	cmp	r3, #3
 800c64e:	d817      	bhi.n	800c680 <USBD_Get_USB_Status+0x44>
 800c650:	a201      	add	r2, pc, #4	; (adr r2, 800c658 <USBD_Get_USB_Status+0x1c>)
 800c652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c656:	bf00      	nop
 800c658:	0800c669 	.word	0x0800c669
 800c65c:	0800c66f 	.word	0x0800c66f
 800c660:	0800c675 	.word	0x0800c675
 800c664:	0800c67b 	.word	0x0800c67b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c668:	2300      	movs	r3, #0
 800c66a:	73fb      	strb	r3, [r7, #15]
    break;
 800c66c:	e00b      	b.n	800c686 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c66e:	2303      	movs	r3, #3
 800c670:	73fb      	strb	r3, [r7, #15]
    break;
 800c672:	e008      	b.n	800c686 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c674:	2301      	movs	r3, #1
 800c676:	73fb      	strb	r3, [r7, #15]
    break;
 800c678:	e005      	b.n	800c686 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c67a:	2303      	movs	r3, #3
 800c67c:	73fb      	strb	r3, [r7, #15]
    break;
 800c67e:	e002      	b.n	800c686 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c680:	2303      	movs	r3, #3
 800c682:	73fb      	strb	r3, [r7, #15]
    break;
 800c684:	bf00      	nop
  }
  return usb_status;
 800c686:	7bfb      	ldrb	r3, [r7, #15]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3714      	adds	r7, #20
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <__cvt>:
 800c694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c698:	ec55 4b10 	vmov	r4, r5, d0
 800c69c:	2d00      	cmp	r5, #0
 800c69e:	460e      	mov	r6, r1
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	462b      	mov	r3, r5
 800c6a4:	bfbb      	ittet	lt
 800c6a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c6aa:	461d      	movlt	r5, r3
 800c6ac:	2300      	movge	r3, #0
 800c6ae:	232d      	movlt	r3, #45	; 0x2d
 800c6b0:	700b      	strb	r3, [r1, #0]
 800c6b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c6b8:	4691      	mov	r9, r2
 800c6ba:	f023 0820 	bic.w	r8, r3, #32
 800c6be:	bfbc      	itt	lt
 800c6c0:	4622      	movlt	r2, r4
 800c6c2:	4614      	movlt	r4, r2
 800c6c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c6c8:	d005      	beq.n	800c6d6 <__cvt+0x42>
 800c6ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c6ce:	d100      	bne.n	800c6d2 <__cvt+0x3e>
 800c6d0:	3601      	adds	r6, #1
 800c6d2:	2102      	movs	r1, #2
 800c6d4:	e000      	b.n	800c6d8 <__cvt+0x44>
 800c6d6:	2103      	movs	r1, #3
 800c6d8:	ab03      	add	r3, sp, #12
 800c6da:	9301      	str	r3, [sp, #4]
 800c6dc:	ab02      	add	r3, sp, #8
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	ec45 4b10 	vmov	d0, r4, r5
 800c6e4:	4653      	mov	r3, sl
 800c6e6:	4632      	mov	r2, r6
 800c6e8:	f000 fe7e 	bl	800d3e8 <_dtoa_r>
 800c6ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c6f0:	4607      	mov	r7, r0
 800c6f2:	d102      	bne.n	800c6fa <__cvt+0x66>
 800c6f4:	f019 0f01 	tst.w	r9, #1
 800c6f8:	d022      	beq.n	800c740 <__cvt+0xac>
 800c6fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c6fe:	eb07 0906 	add.w	r9, r7, r6
 800c702:	d110      	bne.n	800c726 <__cvt+0x92>
 800c704:	783b      	ldrb	r3, [r7, #0]
 800c706:	2b30      	cmp	r3, #48	; 0x30
 800c708:	d10a      	bne.n	800c720 <__cvt+0x8c>
 800c70a:	2200      	movs	r2, #0
 800c70c:	2300      	movs	r3, #0
 800c70e:	4620      	mov	r0, r4
 800c710:	4629      	mov	r1, r5
 800c712:	f7f4 f9e1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c716:	b918      	cbnz	r0, 800c720 <__cvt+0x8c>
 800c718:	f1c6 0601 	rsb	r6, r6, #1
 800c71c:	f8ca 6000 	str.w	r6, [sl]
 800c720:	f8da 3000 	ldr.w	r3, [sl]
 800c724:	4499      	add	r9, r3
 800c726:	2200      	movs	r2, #0
 800c728:	2300      	movs	r3, #0
 800c72a:	4620      	mov	r0, r4
 800c72c:	4629      	mov	r1, r5
 800c72e:	f7f4 f9d3 	bl	8000ad8 <__aeabi_dcmpeq>
 800c732:	b108      	cbz	r0, 800c738 <__cvt+0xa4>
 800c734:	f8cd 900c 	str.w	r9, [sp, #12]
 800c738:	2230      	movs	r2, #48	; 0x30
 800c73a:	9b03      	ldr	r3, [sp, #12]
 800c73c:	454b      	cmp	r3, r9
 800c73e:	d307      	bcc.n	800c750 <__cvt+0xbc>
 800c740:	9b03      	ldr	r3, [sp, #12]
 800c742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c744:	1bdb      	subs	r3, r3, r7
 800c746:	4638      	mov	r0, r7
 800c748:	6013      	str	r3, [r2, #0]
 800c74a:	b004      	add	sp, #16
 800c74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c750:	1c59      	adds	r1, r3, #1
 800c752:	9103      	str	r1, [sp, #12]
 800c754:	701a      	strb	r2, [r3, #0]
 800c756:	e7f0      	b.n	800c73a <__cvt+0xa6>

0800c758 <__exponent>:
 800c758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c75a:	4603      	mov	r3, r0
 800c75c:	2900      	cmp	r1, #0
 800c75e:	bfb8      	it	lt
 800c760:	4249      	neglt	r1, r1
 800c762:	f803 2b02 	strb.w	r2, [r3], #2
 800c766:	bfb4      	ite	lt
 800c768:	222d      	movlt	r2, #45	; 0x2d
 800c76a:	222b      	movge	r2, #43	; 0x2b
 800c76c:	2909      	cmp	r1, #9
 800c76e:	7042      	strb	r2, [r0, #1]
 800c770:	dd2a      	ble.n	800c7c8 <__exponent+0x70>
 800c772:	f10d 0207 	add.w	r2, sp, #7
 800c776:	4617      	mov	r7, r2
 800c778:	260a      	movs	r6, #10
 800c77a:	4694      	mov	ip, r2
 800c77c:	fb91 f5f6 	sdiv	r5, r1, r6
 800c780:	fb06 1415 	mls	r4, r6, r5, r1
 800c784:	3430      	adds	r4, #48	; 0x30
 800c786:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c78a:	460c      	mov	r4, r1
 800c78c:	2c63      	cmp	r4, #99	; 0x63
 800c78e:	f102 32ff 	add.w	r2, r2, #4294967295
 800c792:	4629      	mov	r1, r5
 800c794:	dcf1      	bgt.n	800c77a <__exponent+0x22>
 800c796:	3130      	adds	r1, #48	; 0x30
 800c798:	f1ac 0402 	sub.w	r4, ip, #2
 800c79c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c7a0:	1c41      	adds	r1, r0, #1
 800c7a2:	4622      	mov	r2, r4
 800c7a4:	42ba      	cmp	r2, r7
 800c7a6:	d30a      	bcc.n	800c7be <__exponent+0x66>
 800c7a8:	f10d 0209 	add.w	r2, sp, #9
 800c7ac:	eba2 020c 	sub.w	r2, r2, ip
 800c7b0:	42bc      	cmp	r4, r7
 800c7b2:	bf88      	it	hi
 800c7b4:	2200      	movhi	r2, #0
 800c7b6:	4413      	add	r3, r2
 800c7b8:	1a18      	subs	r0, r3, r0
 800c7ba:	b003      	add	sp, #12
 800c7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7be:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c7c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c7c6:	e7ed      	b.n	800c7a4 <__exponent+0x4c>
 800c7c8:	2330      	movs	r3, #48	; 0x30
 800c7ca:	3130      	adds	r1, #48	; 0x30
 800c7cc:	7083      	strb	r3, [r0, #2]
 800c7ce:	70c1      	strb	r1, [r0, #3]
 800c7d0:	1d03      	adds	r3, r0, #4
 800c7d2:	e7f1      	b.n	800c7b8 <__exponent+0x60>

0800c7d4 <_printf_float>:
 800c7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d8:	ed2d 8b02 	vpush	{d8}
 800c7dc:	b08d      	sub	sp, #52	; 0x34
 800c7de:	460c      	mov	r4, r1
 800c7e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c7e4:	4616      	mov	r6, r2
 800c7e6:	461f      	mov	r7, r3
 800c7e8:	4605      	mov	r5, r0
 800c7ea:	f000 fcfb 	bl	800d1e4 <_localeconv_r>
 800c7ee:	f8d0 a000 	ldr.w	sl, [r0]
 800c7f2:	4650      	mov	r0, sl
 800c7f4:	f7f3 fd44 	bl	8000280 <strlen>
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	930a      	str	r3, [sp, #40]	; 0x28
 800c7fc:	6823      	ldr	r3, [r4, #0]
 800c7fe:	9305      	str	r3, [sp, #20]
 800c800:	f8d8 3000 	ldr.w	r3, [r8]
 800c804:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c808:	3307      	adds	r3, #7
 800c80a:	f023 0307 	bic.w	r3, r3, #7
 800c80e:	f103 0208 	add.w	r2, r3, #8
 800c812:	f8c8 2000 	str.w	r2, [r8]
 800c816:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c81a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c81e:	9307      	str	r3, [sp, #28]
 800c820:	f8cd 8018 	str.w	r8, [sp, #24]
 800c824:	ee08 0a10 	vmov	s16, r0
 800c828:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c82c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c830:	4b9e      	ldr	r3, [pc, #632]	; (800caac <_printf_float+0x2d8>)
 800c832:	f04f 32ff 	mov.w	r2, #4294967295
 800c836:	f7f4 f981 	bl	8000b3c <__aeabi_dcmpun>
 800c83a:	bb88      	cbnz	r0, 800c8a0 <_printf_float+0xcc>
 800c83c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c840:	4b9a      	ldr	r3, [pc, #616]	; (800caac <_printf_float+0x2d8>)
 800c842:	f04f 32ff 	mov.w	r2, #4294967295
 800c846:	f7f4 f95b 	bl	8000b00 <__aeabi_dcmple>
 800c84a:	bb48      	cbnz	r0, 800c8a0 <_printf_float+0xcc>
 800c84c:	2200      	movs	r2, #0
 800c84e:	2300      	movs	r3, #0
 800c850:	4640      	mov	r0, r8
 800c852:	4649      	mov	r1, r9
 800c854:	f7f4 f94a 	bl	8000aec <__aeabi_dcmplt>
 800c858:	b110      	cbz	r0, 800c860 <_printf_float+0x8c>
 800c85a:	232d      	movs	r3, #45	; 0x2d
 800c85c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c860:	4a93      	ldr	r2, [pc, #588]	; (800cab0 <_printf_float+0x2dc>)
 800c862:	4b94      	ldr	r3, [pc, #592]	; (800cab4 <_printf_float+0x2e0>)
 800c864:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c868:	bf94      	ite	ls
 800c86a:	4690      	movls	r8, r2
 800c86c:	4698      	movhi	r8, r3
 800c86e:	2303      	movs	r3, #3
 800c870:	6123      	str	r3, [r4, #16]
 800c872:	9b05      	ldr	r3, [sp, #20]
 800c874:	f023 0304 	bic.w	r3, r3, #4
 800c878:	6023      	str	r3, [r4, #0]
 800c87a:	f04f 0900 	mov.w	r9, #0
 800c87e:	9700      	str	r7, [sp, #0]
 800c880:	4633      	mov	r3, r6
 800c882:	aa0b      	add	r2, sp, #44	; 0x2c
 800c884:	4621      	mov	r1, r4
 800c886:	4628      	mov	r0, r5
 800c888:	f000 f9da 	bl	800cc40 <_printf_common>
 800c88c:	3001      	adds	r0, #1
 800c88e:	f040 8090 	bne.w	800c9b2 <_printf_float+0x1de>
 800c892:	f04f 30ff 	mov.w	r0, #4294967295
 800c896:	b00d      	add	sp, #52	; 0x34
 800c898:	ecbd 8b02 	vpop	{d8}
 800c89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a0:	4642      	mov	r2, r8
 800c8a2:	464b      	mov	r3, r9
 800c8a4:	4640      	mov	r0, r8
 800c8a6:	4649      	mov	r1, r9
 800c8a8:	f7f4 f948 	bl	8000b3c <__aeabi_dcmpun>
 800c8ac:	b140      	cbz	r0, 800c8c0 <_printf_float+0xec>
 800c8ae:	464b      	mov	r3, r9
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	bfbc      	itt	lt
 800c8b4:	232d      	movlt	r3, #45	; 0x2d
 800c8b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c8ba:	4a7f      	ldr	r2, [pc, #508]	; (800cab8 <_printf_float+0x2e4>)
 800c8bc:	4b7f      	ldr	r3, [pc, #508]	; (800cabc <_printf_float+0x2e8>)
 800c8be:	e7d1      	b.n	800c864 <_printf_float+0x90>
 800c8c0:	6863      	ldr	r3, [r4, #4]
 800c8c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c8c6:	9206      	str	r2, [sp, #24]
 800c8c8:	1c5a      	adds	r2, r3, #1
 800c8ca:	d13f      	bne.n	800c94c <_printf_float+0x178>
 800c8cc:	2306      	movs	r3, #6
 800c8ce:	6063      	str	r3, [r4, #4]
 800c8d0:	9b05      	ldr	r3, [sp, #20]
 800c8d2:	6861      	ldr	r1, [r4, #4]
 800c8d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c8d8:	2300      	movs	r3, #0
 800c8da:	9303      	str	r3, [sp, #12]
 800c8dc:	ab0a      	add	r3, sp, #40	; 0x28
 800c8de:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c8e2:	ab09      	add	r3, sp, #36	; 0x24
 800c8e4:	ec49 8b10 	vmov	d0, r8, r9
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	6022      	str	r2, [r4, #0]
 800c8ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c8f0:	4628      	mov	r0, r5
 800c8f2:	f7ff fecf 	bl	800c694 <__cvt>
 800c8f6:	9b06      	ldr	r3, [sp, #24]
 800c8f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8fa:	2b47      	cmp	r3, #71	; 0x47
 800c8fc:	4680      	mov	r8, r0
 800c8fe:	d108      	bne.n	800c912 <_printf_float+0x13e>
 800c900:	1cc8      	adds	r0, r1, #3
 800c902:	db02      	blt.n	800c90a <_printf_float+0x136>
 800c904:	6863      	ldr	r3, [r4, #4]
 800c906:	4299      	cmp	r1, r3
 800c908:	dd41      	ble.n	800c98e <_printf_float+0x1ba>
 800c90a:	f1ab 0302 	sub.w	r3, fp, #2
 800c90e:	fa5f fb83 	uxtb.w	fp, r3
 800c912:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c916:	d820      	bhi.n	800c95a <_printf_float+0x186>
 800c918:	3901      	subs	r1, #1
 800c91a:	465a      	mov	r2, fp
 800c91c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c920:	9109      	str	r1, [sp, #36]	; 0x24
 800c922:	f7ff ff19 	bl	800c758 <__exponent>
 800c926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c928:	1813      	adds	r3, r2, r0
 800c92a:	2a01      	cmp	r2, #1
 800c92c:	4681      	mov	r9, r0
 800c92e:	6123      	str	r3, [r4, #16]
 800c930:	dc02      	bgt.n	800c938 <_printf_float+0x164>
 800c932:	6822      	ldr	r2, [r4, #0]
 800c934:	07d2      	lsls	r2, r2, #31
 800c936:	d501      	bpl.n	800c93c <_printf_float+0x168>
 800c938:	3301      	adds	r3, #1
 800c93a:	6123      	str	r3, [r4, #16]
 800c93c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c940:	2b00      	cmp	r3, #0
 800c942:	d09c      	beq.n	800c87e <_printf_float+0xaa>
 800c944:	232d      	movs	r3, #45	; 0x2d
 800c946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c94a:	e798      	b.n	800c87e <_printf_float+0xaa>
 800c94c:	9a06      	ldr	r2, [sp, #24]
 800c94e:	2a47      	cmp	r2, #71	; 0x47
 800c950:	d1be      	bne.n	800c8d0 <_printf_float+0xfc>
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1bc      	bne.n	800c8d0 <_printf_float+0xfc>
 800c956:	2301      	movs	r3, #1
 800c958:	e7b9      	b.n	800c8ce <_printf_float+0xfa>
 800c95a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c95e:	d118      	bne.n	800c992 <_printf_float+0x1be>
 800c960:	2900      	cmp	r1, #0
 800c962:	6863      	ldr	r3, [r4, #4]
 800c964:	dd0b      	ble.n	800c97e <_printf_float+0x1aa>
 800c966:	6121      	str	r1, [r4, #16]
 800c968:	b913      	cbnz	r3, 800c970 <_printf_float+0x19c>
 800c96a:	6822      	ldr	r2, [r4, #0]
 800c96c:	07d0      	lsls	r0, r2, #31
 800c96e:	d502      	bpl.n	800c976 <_printf_float+0x1a2>
 800c970:	3301      	adds	r3, #1
 800c972:	440b      	add	r3, r1
 800c974:	6123      	str	r3, [r4, #16]
 800c976:	65a1      	str	r1, [r4, #88]	; 0x58
 800c978:	f04f 0900 	mov.w	r9, #0
 800c97c:	e7de      	b.n	800c93c <_printf_float+0x168>
 800c97e:	b913      	cbnz	r3, 800c986 <_printf_float+0x1b2>
 800c980:	6822      	ldr	r2, [r4, #0]
 800c982:	07d2      	lsls	r2, r2, #31
 800c984:	d501      	bpl.n	800c98a <_printf_float+0x1b6>
 800c986:	3302      	adds	r3, #2
 800c988:	e7f4      	b.n	800c974 <_printf_float+0x1a0>
 800c98a:	2301      	movs	r3, #1
 800c98c:	e7f2      	b.n	800c974 <_printf_float+0x1a0>
 800c98e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c994:	4299      	cmp	r1, r3
 800c996:	db05      	blt.n	800c9a4 <_printf_float+0x1d0>
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	6121      	str	r1, [r4, #16]
 800c99c:	07d8      	lsls	r0, r3, #31
 800c99e:	d5ea      	bpl.n	800c976 <_printf_float+0x1a2>
 800c9a0:	1c4b      	adds	r3, r1, #1
 800c9a2:	e7e7      	b.n	800c974 <_printf_float+0x1a0>
 800c9a4:	2900      	cmp	r1, #0
 800c9a6:	bfd4      	ite	le
 800c9a8:	f1c1 0202 	rsble	r2, r1, #2
 800c9ac:	2201      	movgt	r2, #1
 800c9ae:	4413      	add	r3, r2
 800c9b0:	e7e0      	b.n	800c974 <_printf_float+0x1a0>
 800c9b2:	6823      	ldr	r3, [r4, #0]
 800c9b4:	055a      	lsls	r2, r3, #21
 800c9b6:	d407      	bmi.n	800c9c8 <_printf_float+0x1f4>
 800c9b8:	6923      	ldr	r3, [r4, #16]
 800c9ba:	4642      	mov	r2, r8
 800c9bc:	4631      	mov	r1, r6
 800c9be:	4628      	mov	r0, r5
 800c9c0:	47b8      	blx	r7
 800c9c2:	3001      	adds	r0, #1
 800c9c4:	d12c      	bne.n	800ca20 <_printf_float+0x24c>
 800c9c6:	e764      	b.n	800c892 <_printf_float+0xbe>
 800c9c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c9cc:	f240 80e0 	bls.w	800cb90 <_printf_float+0x3bc>
 800c9d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	f7f4 f87e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d034      	beq.n	800ca4a <_printf_float+0x276>
 800c9e0:	4a37      	ldr	r2, [pc, #220]	; (800cac0 <_printf_float+0x2ec>)
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	4631      	mov	r1, r6
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	47b8      	blx	r7
 800c9ea:	3001      	adds	r0, #1
 800c9ec:	f43f af51 	beq.w	800c892 <_printf_float+0xbe>
 800c9f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	db02      	blt.n	800c9fe <_printf_float+0x22a>
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	07d8      	lsls	r0, r3, #31
 800c9fc:	d510      	bpl.n	800ca20 <_printf_float+0x24c>
 800c9fe:	ee18 3a10 	vmov	r3, s16
 800ca02:	4652      	mov	r2, sl
 800ca04:	4631      	mov	r1, r6
 800ca06:	4628      	mov	r0, r5
 800ca08:	47b8      	blx	r7
 800ca0a:	3001      	adds	r0, #1
 800ca0c:	f43f af41 	beq.w	800c892 <_printf_float+0xbe>
 800ca10:	f04f 0800 	mov.w	r8, #0
 800ca14:	f104 091a 	add.w	r9, r4, #26
 800ca18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	4543      	cmp	r3, r8
 800ca1e:	dc09      	bgt.n	800ca34 <_printf_float+0x260>
 800ca20:	6823      	ldr	r3, [r4, #0]
 800ca22:	079b      	lsls	r3, r3, #30
 800ca24:	f100 8107 	bmi.w	800cc36 <_printf_float+0x462>
 800ca28:	68e0      	ldr	r0, [r4, #12]
 800ca2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca2c:	4298      	cmp	r0, r3
 800ca2e:	bfb8      	it	lt
 800ca30:	4618      	movlt	r0, r3
 800ca32:	e730      	b.n	800c896 <_printf_float+0xc2>
 800ca34:	2301      	movs	r3, #1
 800ca36:	464a      	mov	r2, r9
 800ca38:	4631      	mov	r1, r6
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	47b8      	blx	r7
 800ca3e:	3001      	adds	r0, #1
 800ca40:	f43f af27 	beq.w	800c892 <_printf_float+0xbe>
 800ca44:	f108 0801 	add.w	r8, r8, #1
 800ca48:	e7e6      	b.n	800ca18 <_printf_float+0x244>
 800ca4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	dc39      	bgt.n	800cac4 <_printf_float+0x2f0>
 800ca50:	4a1b      	ldr	r2, [pc, #108]	; (800cac0 <_printf_float+0x2ec>)
 800ca52:	2301      	movs	r3, #1
 800ca54:	4631      	mov	r1, r6
 800ca56:	4628      	mov	r0, r5
 800ca58:	47b8      	blx	r7
 800ca5a:	3001      	adds	r0, #1
 800ca5c:	f43f af19 	beq.w	800c892 <_printf_float+0xbe>
 800ca60:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ca64:	4313      	orrs	r3, r2
 800ca66:	d102      	bne.n	800ca6e <_printf_float+0x29a>
 800ca68:	6823      	ldr	r3, [r4, #0]
 800ca6a:	07d9      	lsls	r1, r3, #31
 800ca6c:	d5d8      	bpl.n	800ca20 <_printf_float+0x24c>
 800ca6e:	ee18 3a10 	vmov	r3, s16
 800ca72:	4652      	mov	r2, sl
 800ca74:	4631      	mov	r1, r6
 800ca76:	4628      	mov	r0, r5
 800ca78:	47b8      	blx	r7
 800ca7a:	3001      	adds	r0, #1
 800ca7c:	f43f af09 	beq.w	800c892 <_printf_float+0xbe>
 800ca80:	f04f 0900 	mov.w	r9, #0
 800ca84:	f104 0a1a 	add.w	sl, r4, #26
 800ca88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca8a:	425b      	negs	r3, r3
 800ca8c:	454b      	cmp	r3, r9
 800ca8e:	dc01      	bgt.n	800ca94 <_printf_float+0x2c0>
 800ca90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca92:	e792      	b.n	800c9ba <_printf_float+0x1e6>
 800ca94:	2301      	movs	r3, #1
 800ca96:	4652      	mov	r2, sl
 800ca98:	4631      	mov	r1, r6
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	47b8      	blx	r7
 800ca9e:	3001      	adds	r0, #1
 800caa0:	f43f aef7 	beq.w	800c892 <_printf_float+0xbe>
 800caa4:	f109 0901 	add.w	r9, r9, #1
 800caa8:	e7ee      	b.n	800ca88 <_printf_float+0x2b4>
 800caaa:	bf00      	nop
 800caac:	7fefffff 	.word	0x7fefffff
 800cab0:	0800f458 	.word	0x0800f458
 800cab4:	0800f45c 	.word	0x0800f45c
 800cab8:	0800f460 	.word	0x0800f460
 800cabc:	0800f464 	.word	0x0800f464
 800cac0:	0800f468 	.word	0x0800f468
 800cac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cac6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cac8:	429a      	cmp	r2, r3
 800caca:	bfa8      	it	ge
 800cacc:	461a      	movge	r2, r3
 800cace:	2a00      	cmp	r2, #0
 800cad0:	4691      	mov	r9, r2
 800cad2:	dc37      	bgt.n	800cb44 <_printf_float+0x370>
 800cad4:	f04f 0b00 	mov.w	fp, #0
 800cad8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cadc:	f104 021a 	add.w	r2, r4, #26
 800cae0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cae2:	9305      	str	r3, [sp, #20]
 800cae4:	eba3 0309 	sub.w	r3, r3, r9
 800cae8:	455b      	cmp	r3, fp
 800caea:	dc33      	bgt.n	800cb54 <_printf_float+0x380>
 800caec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800caf0:	429a      	cmp	r2, r3
 800caf2:	db3b      	blt.n	800cb6c <_printf_float+0x398>
 800caf4:	6823      	ldr	r3, [r4, #0]
 800caf6:	07da      	lsls	r2, r3, #31
 800caf8:	d438      	bmi.n	800cb6c <_printf_float+0x398>
 800cafa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cafe:	eba2 0903 	sub.w	r9, r2, r3
 800cb02:	9b05      	ldr	r3, [sp, #20]
 800cb04:	1ad2      	subs	r2, r2, r3
 800cb06:	4591      	cmp	r9, r2
 800cb08:	bfa8      	it	ge
 800cb0a:	4691      	movge	r9, r2
 800cb0c:	f1b9 0f00 	cmp.w	r9, #0
 800cb10:	dc35      	bgt.n	800cb7e <_printf_float+0x3aa>
 800cb12:	f04f 0800 	mov.w	r8, #0
 800cb16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb1a:	f104 0a1a 	add.w	sl, r4, #26
 800cb1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb22:	1a9b      	subs	r3, r3, r2
 800cb24:	eba3 0309 	sub.w	r3, r3, r9
 800cb28:	4543      	cmp	r3, r8
 800cb2a:	f77f af79 	ble.w	800ca20 <_printf_float+0x24c>
 800cb2e:	2301      	movs	r3, #1
 800cb30:	4652      	mov	r2, sl
 800cb32:	4631      	mov	r1, r6
 800cb34:	4628      	mov	r0, r5
 800cb36:	47b8      	blx	r7
 800cb38:	3001      	adds	r0, #1
 800cb3a:	f43f aeaa 	beq.w	800c892 <_printf_float+0xbe>
 800cb3e:	f108 0801 	add.w	r8, r8, #1
 800cb42:	e7ec      	b.n	800cb1e <_printf_float+0x34a>
 800cb44:	4613      	mov	r3, r2
 800cb46:	4631      	mov	r1, r6
 800cb48:	4642      	mov	r2, r8
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	47b8      	blx	r7
 800cb4e:	3001      	adds	r0, #1
 800cb50:	d1c0      	bne.n	800cad4 <_printf_float+0x300>
 800cb52:	e69e      	b.n	800c892 <_printf_float+0xbe>
 800cb54:	2301      	movs	r3, #1
 800cb56:	4631      	mov	r1, r6
 800cb58:	4628      	mov	r0, r5
 800cb5a:	9205      	str	r2, [sp, #20]
 800cb5c:	47b8      	blx	r7
 800cb5e:	3001      	adds	r0, #1
 800cb60:	f43f ae97 	beq.w	800c892 <_printf_float+0xbe>
 800cb64:	9a05      	ldr	r2, [sp, #20]
 800cb66:	f10b 0b01 	add.w	fp, fp, #1
 800cb6a:	e7b9      	b.n	800cae0 <_printf_float+0x30c>
 800cb6c:	ee18 3a10 	vmov	r3, s16
 800cb70:	4652      	mov	r2, sl
 800cb72:	4631      	mov	r1, r6
 800cb74:	4628      	mov	r0, r5
 800cb76:	47b8      	blx	r7
 800cb78:	3001      	adds	r0, #1
 800cb7a:	d1be      	bne.n	800cafa <_printf_float+0x326>
 800cb7c:	e689      	b.n	800c892 <_printf_float+0xbe>
 800cb7e:	9a05      	ldr	r2, [sp, #20]
 800cb80:	464b      	mov	r3, r9
 800cb82:	4442      	add	r2, r8
 800cb84:	4631      	mov	r1, r6
 800cb86:	4628      	mov	r0, r5
 800cb88:	47b8      	blx	r7
 800cb8a:	3001      	adds	r0, #1
 800cb8c:	d1c1      	bne.n	800cb12 <_printf_float+0x33e>
 800cb8e:	e680      	b.n	800c892 <_printf_float+0xbe>
 800cb90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb92:	2a01      	cmp	r2, #1
 800cb94:	dc01      	bgt.n	800cb9a <_printf_float+0x3c6>
 800cb96:	07db      	lsls	r3, r3, #31
 800cb98:	d53a      	bpl.n	800cc10 <_printf_float+0x43c>
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	4642      	mov	r2, r8
 800cb9e:	4631      	mov	r1, r6
 800cba0:	4628      	mov	r0, r5
 800cba2:	47b8      	blx	r7
 800cba4:	3001      	adds	r0, #1
 800cba6:	f43f ae74 	beq.w	800c892 <_printf_float+0xbe>
 800cbaa:	ee18 3a10 	vmov	r3, s16
 800cbae:	4652      	mov	r2, sl
 800cbb0:	4631      	mov	r1, r6
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	47b8      	blx	r7
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	f43f ae6b 	beq.w	800c892 <_printf_float+0xbe>
 800cbbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cbc8:	f7f3 ff86 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbcc:	b9d8      	cbnz	r0, 800cc06 <_printf_float+0x432>
 800cbce:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cbd2:	f108 0201 	add.w	r2, r8, #1
 800cbd6:	4631      	mov	r1, r6
 800cbd8:	4628      	mov	r0, r5
 800cbda:	47b8      	blx	r7
 800cbdc:	3001      	adds	r0, #1
 800cbde:	d10e      	bne.n	800cbfe <_printf_float+0x42a>
 800cbe0:	e657      	b.n	800c892 <_printf_float+0xbe>
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	4652      	mov	r2, sl
 800cbe6:	4631      	mov	r1, r6
 800cbe8:	4628      	mov	r0, r5
 800cbea:	47b8      	blx	r7
 800cbec:	3001      	adds	r0, #1
 800cbee:	f43f ae50 	beq.w	800c892 <_printf_float+0xbe>
 800cbf2:	f108 0801 	add.w	r8, r8, #1
 800cbf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	4543      	cmp	r3, r8
 800cbfc:	dcf1      	bgt.n	800cbe2 <_printf_float+0x40e>
 800cbfe:	464b      	mov	r3, r9
 800cc00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc04:	e6da      	b.n	800c9bc <_printf_float+0x1e8>
 800cc06:	f04f 0800 	mov.w	r8, #0
 800cc0a:	f104 0a1a 	add.w	sl, r4, #26
 800cc0e:	e7f2      	b.n	800cbf6 <_printf_float+0x422>
 800cc10:	2301      	movs	r3, #1
 800cc12:	4642      	mov	r2, r8
 800cc14:	e7df      	b.n	800cbd6 <_printf_float+0x402>
 800cc16:	2301      	movs	r3, #1
 800cc18:	464a      	mov	r2, r9
 800cc1a:	4631      	mov	r1, r6
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	47b8      	blx	r7
 800cc20:	3001      	adds	r0, #1
 800cc22:	f43f ae36 	beq.w	800c892 <_printf_float+0xbe>
 800cc26:	f108 0801 	add.w	r8, r8, #1
 800cc2a:	68e3      	ldr	r3, [r4, #12]
 800cc2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc2e:	1a5b      	subs	r3, r3, r1
 800cc30:	4543      	cmp	r3, r8
 800cc32:	dcf0      	bgt.n	800cc16 <_printf_float+0x442>
 800cc34:	e6f8      	b.n	800ca28 <_printf_float+0x254>
 800cc36:	f04f 0800 	mov.w	r8, #0
 800cc3a:	f104 0919 	add.w	r9, r4, #25
 800cc3e:	e7f4      	b.n	800cc2a <_printf_float+0x456>

0800cc40 <_printf_common>:
 800cc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc44:	4616      	mov	r6, r2
 800cc46:	4699      	mov	r9, r3
 800cc48:	688a      	ldr	r2, [r1, #8]
 800cc4a:	690b      	ldr	r3, [r1, #16]
 800cc4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc50:	4293      	cmp	r3, r2
 800cc52:	bfb8      	it	lt
 800cc54:	4613      	movlt	r3, r2
 800cc56:	6033      	str	r3, [r6, #0]
 800cc58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc5c:	4607      	mov	r7, r0
 800cc5e:	460c      	mov	r4, r1
 800cc60:	b10a      	cbz	r2, 800cc66 <_printf_common+0x26>
 800cc62:	3301      	adds	r3, #1
 800cc64:	6033      	str	r3, [r6, #0]
 800cc66:	6823      	ldr	r3, [r4, #0]
 800cc68:	0699      	lsls	r1, r3, #26
 800cc6a:	bf42      	ittt	mi
 800cc6c:	6833      	ldrmi	r3, [r6, #0]
 800cc6e:	3302      	addmi	r3, #2
 800cc70:	6033      	strmi	r3, [r6, #0]
 800cc72:	6825      	ldr	r5, [r4, #0]
 800cc74:	f015 0506 	ands.w	r5, r5, #6
 800cc78:	d106      	bne.n	800cc88 <_printf_common+0x48>
 800cc7a:	f104 0a19 	add.w	sl, r4, #25
 800cc7e:	68e3      	ldr	r3, [r4, #12]
 800cc80:	6832      	ldr	r2, [r6, #0]
 800cc82:	1a9b      	subs	r3, r3, r2
 800cc84:	42ab      	cmp	r3, r5
 800cc86:	dc26      	bgt.n	800ccd6 <_printf_common+0x96>
 800cc88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc8c:	1e13      	subs	r3, r2, #0
 800cc8e:	6822      	ldr	r2, [r4, #0]
 800cc90:	bf18      	it	ne
 800cc92:	2301      	movne	r3, #1
 800cc94:	0692      	lsls	r2, r2, #26
 800cc96:	d42b      	bmi.n	800ccf0 <_printf_common+0xb0>
 800cc98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc9c:	4649      	mov	r1, r9
 800cc9e:	4638      	mov	r0, r7
 800cca0:	47c0      	blx	r8
 800cca2:	3001      	adds	r0, #1
 800cca4:	d01e      	beq.n	800cce4 <_printf_common+0xa4>
 800cca6:	6823      	ldr	r3, [r4, #0]
 800cca8:	6922      	ldr	r2, [r4, #16]
 800ccaa:	f003 0306 	and.w	r3, r3, #6
 800ccae:	2b04      	cmp	r3, #4
 800ccb0:	bf02      	ittt	eq
 800ccb2:	68e5      	ldreq	r5, [r4, #12]
 800ccb4:	6833      	ldreq	r3, [r6, #0]
 800ccb6:	1aed      	subeq	r5, r5, r3
 800ccb8:	68a3      	ldr	r3, [r4, #8]
 800ccba:	bf0c      	ite	eq
 800ccbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccc0:	2500      	movne	r5, #0
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	bfc4      	itt	gt
 800ccc6:	1a9b      	subgt	r3, r3, r2
 800ccc8:	18ed      	addgt	r5, r5, r3
 800ccca:	2600      	movs	r6, #0
 800cccc:	341a      	adds	r4, #26
 800ccce:	42b5      	cmp	r5, r6
 800ccd0:	d11a      	bne.n	800cd08 <_printf_common+0xc8>
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	e008      	b.n	800cce8 <_printf_common+0xa8>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	4652      	mov	r2, sl
 800ccda:	4649      	mov	r1, r9
 800ccdc:	4638      	mov	r0, r7
 800ccde:	47c0      	blx	r8
 800cce0:	3001      	adds	r0, #1
 800cce2:	d103      	bne.n	800ccec <_printf_common+0xac>
 800cce4:	f04f 30ff 	mov.w	r0, #4294967295
 800cce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccec:	3501      	adds	r5, #1
 800ccee:	e7c6      	b.n	800cc7e <_printf_common+0x3e>
 800ccf0:	18e1      	adds	r1, r4, r3
 800ccf2:	1c5a      	adds	r2, r3, #1
 800ccf4:	2030      	movs	r0, #48	; 0x30
 800ccf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ccfa:	4422      	add	r2, r4
 800ccfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd04:	3302      	adds	r3, #2
 800cd06:	e7c7      	b.n	800cc98 <_printf_common+0x58>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	4622      	mov	r2, r4
 800cd0c:	4649      	mov	r1, r9
 800cd0e:	4638      	mov	r0, r7
 800cd10:	47c0      	blx	r8
 800cd12:	3001      	adds	r0, #1
 800cd14:	d0e6      	beq.n	800cce4 <_printf_common+0xa4>
 800cd16:	3601      	adds	r6, #1
 800cd18:	e7d9      	b.n	800ccce <_printf_common+0x8e>
	...

0800cd1c <_printf_i>:
 800cd1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd20:	7e0f      	ldrb	r7, [r1, #24]
 800cd22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd24:	2f78      	cmp	r7, #120	; 0x78
 800cd26:	4691      	mov	r9, r2
 800cd28:	4680      	mov	r8, r0
 800cd2a:	460c      	mov	r4, r1
 800cd2c:	469a      	mov	sl, r3
 800cd2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd32:	d807      	bhi.n	800cd44 <_printf_i+0x28>
 800cd34:	2f62      	cmp	r7, #98	; 0x62
 800cd36:	d80a      	bhi.n	800cd4e <_printf_i+0x32>
 800cd38:	2f00      	cmp	r7, #0
 800cd3a:	f000 80d4 	beq.w	800cee6 <_printf_i+0x1ca>
 800cd3e:	2f58      	cmp	r7, #88	; 0x58
 800cd40:	f000 80c0 	beq.w	800cec4 <_printf_i+0x1a8>
 800cd44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd4c:	e03a      	b.n	800cdc4 <_printf_i+0xa8>
 800cd4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd52:	2b15      	cmp	r3, #21
 800cd54:	d8f6      	bhi.n	800cd44 <_printf_i+0x28>
 800cd56:	a101      	add	r1, pc, #4	; (adr r1, 800cd5c <_printf_i+0x40>)
 800cd58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd5c:	0800cdb5 	.word	0x0800cdb5
 800cd60:	0800cdc9 	.word	0x0800cdc9
 800cd64:	0800cd45 	.word	0x0800cd45
 800cd68:	0800cd45 	.word	0x0800cd45
 800cd6c:	0800cd45 	.word	0x0800cd45
 800cd70:	0800cd45 	.word	0x0800cd45
 800cd74:	0800cdc9 	.word	0x0800cdc9
 800cd78:	0800cd45 	.word	0x0800cd45
 800cd7c:	0800cd45 	.word	0x0800cd45
 800cd80:	0800cd45 	.word	0x0800cd45
 800cd84:	0800cd45 	.word	0x0800cd45
 800cd88:	0800cecd 	.word	0x0800cecd
 800cd8c:	0800cdf5 	.word	0x0800cdf5
 800cd90:	0800ce87 	.word	0x0800ce87
 800cd94:	0800cd45 	.word	0x0800cd45
 800cd98:	0800cd45 	.word	0x0800cd45
 800cd9c:	0800ceef 	.word	0x0800ceef
 800cda0:	0800cd45 	.word	0x0800cd45
 800cda4:	0800cdf5 	.word	0x0800cdf5
 800cda8:	0800cd45 	.word	0x0800cd45
 800cdac:	0800cd45 	.word	0x0800cd45
 800cdb0:	0800ce8f 	.word	0x0800ce8f
 800cdb4:	682b      	ldr	r3, [r5, #0]
 800cdb6:	1d1a      	adds	r2, r3, #4
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	602a      	str	r2, [r5, #0]
 800cdbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	e09f      	b.n	800cf08 <_printf_i+0x1ec>
 800cdc8:	6820      	ldr	r0, [r4, #0]
 800cdca:	682b      	ldr	r3, [r5, #0]
 800cdcc:	0607      	lsls	r7, r0, #24
 800cdce:	f103 0104 	add.w	r1, r3, #4
 800cdd2:	6029      	str	r1, [r5, #0]
 800cdd4:	d501      	bpl.n	800cdda <_printf_i+0xbe>
 800cdd6:	681e      	ldr	r6, [r3, #0]
 800cdd8:	e003      	b.n	800cde2 <_printf_i+0xc6>
 800cdda:	0646      	lsls	r6, r0, #25
 800cddc:	d5fb      	bpl.n	800cdd6 <_printf_i+0xba>
 800cdde:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cde2:	2e00      	cmp	r6, #0
 800cde4:	da03      	bge.n	800cdee <_printf_i+0xd2>
 800cde6:	232d      	movs	r3, #45	; 0x2d
 800cde8:	4276      	negs	r6, r6
 800cdea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdee:	485a      	ldr	r0, [pc, #360]	; (800cf58 <_printf_i+0x23c>)
 800cdf0:	230a      	movs	r3, #10
 800cdf2:	e012      	b.n	800ce1a <_printf_i+0xfe>
 800cdf4:	682b      	ldr	r3, [r5, #0]
 800cdf6:	6820      	ldr	r0, [r4, #0]
 800cdf8:	1d19      	adds	r1, r3, #4
 800cdfa:	6029      	str	r1, [r5, #0]
 800cdfc:	0605      	lsls	r5, r0, #24
 800cdfe:	d501      	bpl.n	800ce04 <_printf_i+0xe8>
 800ce00:	681e      	ldr	r6, [r3, #0]
 800ce02:	e002      	b.n	800ce0a <_printf_i+0xee>
 800ce04:	0641      	lsls	r1, r0, #25
 800ce06:	d5fb      	bpl.n	800ce00 <_printf_i+0xe4>
 800ce08:	881e      	ldrh	r6, [r3, #0]
 800ce0a:	4853      	ldr	r0, [pc, #332]	; (800cf58 <_printf_i+0x23c>)
 800ce0c:	2f6f      	cmp	r7, #111	; 0x6f
 800ce0e:	bf0c      	ite	eq
 800ce10:	2308      	moveq	r3, #8
 800ce12:	230a      	movne	r3, #10
 800ce14:	2100      	movs	r1, #0
 800ce16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce1a:	6865      	ldr	r5, [r4, #4]
 800ce1c:	60a5      	str	r5, [r4, #8]
 800ce1e:	2d00      	cmp	r5, #0
 800ce20:	bfa2      	ittt	ge
 800ce22:	6821      	ldrge	r1, [r4, #0]
 800ce24:	f021 0104 	bicge.w	r1, r1, #4
 800ce28:	6021      	strge	r1, [r4, #0]
 800ce2a:	b90e      	cbnz	r6, 800ce30 <_printf_i+0x114>
 800ce2c:	2d00      	cmp	r5, #0
 800ce2e:	d04b      	beq.n	800cec8 <_printf_i+0x1ac>
 800ce30:	4615      	mov	r5, r2
 800ce32:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce36:	fb03 6711 	mls	r7, r3, r1, r6
 800ce3a:	5dc7      	ldrb	r7, [r0, r7]
 800ce3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce40:	4637      	mov	r7, r6
 800ce42:	42bb      	cmp	r3, r7
 800ce44:	460e      	mov	r6, r1
 800ce46:	d9f4      	bls.n	800ce32 <_printf_i+0x116>
 800ce48:	2b08      	cmp	r3, #8
 800ce4a:	d10b      	bne.n	800ce64 <_printf_i+0x148>
 800ce4c:	6823      	ldr	r3, [r4, #0]
 800ce4e:	07de      	lsls	r6, r3, #31
 800ce50:	d508      	bpl.n	800ce64 <_printf_i+0x148>
 800ce52:	6923      	ldr	r3, [r4, #16]
 800ce54:	6861      	ldr	r1, [r4, #4]
 800ce56:	4299      	cmp	r1, r3
 800ce58:	bfde      	ittt	le
 800ce5a:	2330      	movle	r3, #48	; 0x30
 800ce5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce60:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce64:	1b52      	subs	r2, r2, r5
 800ce66:	6122      	str	r2, [r4, #16]
 800ce68:	f8cd a000 	str.w	sl, [sp]
 800ce6c:	464b      	mov	r3, r9
 800ce6e:	aa03      	add	r2, sp, #12
 800ce70:	4621      	mov	r1, r4
 800ce72:	4640      	mov	r0, r8
 800ce74:	f7ff fee4 	bl	800cc40 <_printf_common>
 800ce78:	3001      	adds	r0, #1
 800ce7a:	d14a      	bne.n	800cf12 <_printf_i+0x1f6>
 800ce7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce80:	b004      	add	sp, #16
 800ce82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce86:	6823      	ldr	r3, [r4, #0]
 800ce88:	f043 0320 	orr.w	r3, r3, #32
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	4833      	ldr	r0, [pc, #204]	; (800cf5c <_printf_i+0x240>)
 800ce90:	2778      	movs	r7, #120	; 0x78
 800ce92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce96:	6823      	ldr	r3, [r4, #0]
 800ce98:	6829      	ldr	r1, [r5, #0]
 800ce9a:	061f      	lsls	r7, r3, #24
 800ce9c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cea0:	d402      	bmi.n	800cea8 <_printf_i+0x18c>
 800cea2:	065f      	lsls	r7, r3, #25
 800cea4:	bf48      	it	mi
 800cea6:	b2b6      	uxthmi	r6, r6
 800cea8:	07df      	lsls	r7, r3, #31
 800ceaa:	bf48      	it	mi
 800ceac:	f043 0320 	orrmi.w	r3, r3, #32
 800ceb0:	6029      	str	r1, [r5, #0]
 800ceb2:	bf48      	it	mi
 800ceb4:	6023      	strmi	r3, [r4, #0]
 800ceb6:	b91e      	cbnz	r6, 800cec0 <_printf_i+0x1a4>
 800ceb8:	6823      	ldr	r3, [r4, #0]
 800ceba:	f023 0320 	bic.w	r3, r3, #32
 800cebe:	6023      	str	r3, [r4, #0]
 800cec0:	2310      	movs	r3, #16
 800cec2:	e7a7      	b.n	800ce14 <_printf_i+0xf8>
 800cec4:	4824      	ldr	r0, [pc, #144]	; (800cf58 <_printf_i+0x23c>)
 800cec6:	e7e4      	b.n	800ce92 <_printf_i+0x176>
 800cec8:	4615      	mov	r5, r2
 800ceca:	e7bd      	b.n	800ce48 <_printf_i+0x12c>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	6826      	ldr	r6, [r4, #0]
 800ced0:	6961      	ldr	r1, [r4, #20]
 800ced2:	1d18      	adds	r0, r3, #4
 800ced4:	6028      	str	r0, [r5, #0]
 800ced6:	0635      	lsls	r5, r6, #24
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	d501      	bpl.n	800cee0 <_printf_i+0x1c4>
 800cedc:	6019      	str	r1, [r3, #0]
 800cede:	e002      	b.n	800cee6 <_printf_i+0x1ca>
 800cee0:	0670      	lsls	r0, r6, #25
 800cee2:	d5fb      	bpl.n	800cedc <_printf_i+0x1c0>
 800cee4:	8019      	strh	r1, [r3, #0]
 800cee6:	2300      	movs	r3, #0
 800cee8:	6123      	str	r3, [r4, #16]
 800ceea:	4615      	mov	r5, r2
 800ceec:	e7bc      	b.n	800ce68 <_printf_i+0x14c>
 800ceee:	682b      	ldr	r3, [r5, #0]
 800cef0:	1d1a      	adds	r2, r3, #4
 800cef2:	602a      	str	r2, [r5, #0]
 800cef4:	681d      	ldr	r5, [r3, #0]
 800cef6:	6862      	ldr	r2, [r4, #4]
 800cef8:	2100      	movs	r1, #0
 800cefa:	4628      	mov	r0, r5
 800cefc:	f7f3 f970 	bl	80001e0 <memchr>
 800cf00:	b108      	cbz	r0, 800cf06 <_printf_i+0x1ea>
 800cf02:	1b40      	subs	r0, r0, r5
 800cf04:	6060      	str	r0, [r4, #4]
 800cf06:	6863      	ldr	r3, [r4, #4]
 800cf08:	6123      	str	r3, [r4, #16]
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf10:	e7aa      	b.n	800ce68 <_printf_i+0x14c>
 800cf12:	6923      	ldr	r3, [r4, #16]
 800cf14:	462a      	mov	r2, r5
 800cf16:	4649      	mov	r1, r9
 800cf18:	4640      	mov	r0, r8
 800cf1a:	47d0      	blx	sl
 800cf1c:	3001      	adds	r0, #1
 800cf1e:	d0ad      	beq.n	800ce7c <_printf_i+0x160>
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	079b      	lsls	r3, r3, #30
 800cf24:	d413      	bmi.n	800cf4e <_printf_i+0x232>
 800cf26:	68e0      	ldr	r0, [r4, #12]
 800cf28:	9b03      	ldr	r3, [sp, #12]
 800cf2a:	4298      	cmp	r0, r3
 800cf2c:	bfb8      	it	lt
 800cf2e:	4618      	movlt	r0, r3
 800cf30:	e7a6      	b.n	800ce80 <_printf_i+0x164>
 800cf32:	2301      	movs	r3, #1
 800cf34:	4632      	mov	r2, r6
 800cf36:	4649      	mov	r1, r9
 800cf38:	4640      	mov	r0, r8
 800cf3a:	47d0      	blx	sl
 800cf3c:	3001      	adds	r0, #1
 800cf3e:	d09d      	beq.n	800ce7c <_printf_i+0x160>
 800cf40:	3501      	adds	r5, #1
 800cf42:	68e3      	ldr	r3, [r4, #12]
 800cf44:	9903      	ldr	r1, [sp, #12]
 800cf46:	1a5b      	subs	r3, r3, r1
 800cf48:	42ab      	cmp	r3, r5
 800cf4a:	dcf2      	bgt.n	800cf32 <_printf_i+0x216>
 800cf4c:	e7eb      	b.n	800cf26 <_printf_i+0x20a>
 800cf4e:	2500      	movs	r5, #0
 800cf50:	f104 0619 	add.w	r6, r4, #25
 800cf54:	e7f5      	b.n	800cf42 <_printf_i+0x226>
 800cf56:	bf00      	nop
 800cf58:	0800f46a 	.word	0x0800f46a
 800cf5c:	0800f47b 	.word	0x0800f47b

0800cf60 <std>:
 800cf60:	2300      	movs	r3, #0
 800cf62:	b510      	push	{r4, lr}
 800cf64:	4604      	mov	r4, r0
 800cf66:	e9c0 3300 	strd	r3, r3, [r0]
 800cf6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf6e:	6083      	str	r3, [r0, #8]
 800cf70:	8181      	strh	r1, [r0, #12]
 800cf72:	6643      	str	r3, [r0, #100]	; 0x64
 800cf74:	81c2      	strh	r2, [r0, #14]
 800cf76:	6183      	str	r3, [r0, #24]
 800cf78:	4619      	mov	r1, r3
 800cf7a:	2208      	movs	r2, #8
 800cf7c:	305c      	adds	r0, #92	; 0x5c
 800cf7e:	f000 f928 	bl	800d1d2 <memset>
 800cf82:	4b0d      	ldr	r3, [pc, #52]	; (800cfb8 <std+0x58>)
 800cf84:	6263      	str	r3, [r4, #36]	; 0x24
 800cf86:	4b0d      	ldr	r3, [pc, #52]	; (800cfbc <std+0x5c>)
 800cf88:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf8a:	4b0d      	ldr	r3, [pc, #52]	; (800cfc0 <std+0x60>)
 800cf8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf8e:	4b0d      	ldr	r3, [pc, #52]	; (800cfc4 <std+0x64>)
 800cf90:	6323      	str	r3, [r4, #48]	; 0x30
 800cf92:	4b0d      	ldr	r3, [pc, #52]	; (800cfc8 <std+0x68>)
 800cf94:	6224      	str	r4, [r4, #32]
 800cf96:	429c      	cmp	r4, r3
 800cf98:	d006      	beq.n	800cfa8 <std+0x48>
 800cf9a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cf9e:	4294      	cmp	r4, r2
 800cfa0:	d002      	beq.n	800cfa8 <std+0x48>
 800cfa2:	33d0      	adds	r3, #208	; 0xd0
 800cfa4:	429c      	cmp	r4, r3
 800cfa6:	d105      	bne.n	800cfb4 <std+0x54>
 800cfa8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cfac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfb0:	f000 b98c 	b.w	800d2cc <__retarget_lock_init_recursive>
 800cfb4:	bd10      	pop	{r4, pc}
 800cfb6:	bf00      	nop
 800cfb8:	0800d14d 	.word	0x0800d14d
 800cfbc:	0800d16f 	.word	0x0800d16f
 800cfc0:	0800d1a7 	.word	0x0800d1a7
 800cfc4:	0800d1cb 	.word	0x0800d1cb
 800cfc8:	20002174 	.word	0x20002174

0800cfcc <stdio_exit_handler>:
 800cfcc:	4a02      	ldr	r2, [pc, #8]	; (800cfd8 <stdio_exit_handler+0xc>)
 800cfce:	4903      	ldr	r1, [pc, #12]	; (800cfdc <stdio_exit_handler+0x10>)
 800cfd0:	4803      	ldr	r0, [pc, #12]	; (800cfe0 <stdio_exit_handler+0x14>)
 800cfd2:	f000 b869 	b.w	800d0a8 <_fwalk_sglue>
 800cfd6:	bf00      	nop
 800cfd8:	20000120 	.word	0x20000120
 800cfdc:	0800ec81 	.word	0x0800ec81
 800cfe0:	2000012c 	.word	0x2000012c

0800cfe4 <cleanup_stdio>:
 800cfe4:	6841      	ldr	r1, [r0, #4]
 800cfe6:	4b0c      	ldr	r3, [pc, #48]	; (800d018 <cleanup_stdio+0x34>)
 800cfe8:	4299      	cmp	r1, r3
 800cfea:	b510      	push	{r4, lr}
 800cfec:	4604      	mov	r4, r0
 800cfee:	d001      	beq.n	800cff4 <cleanup_stdio+0x10>
 800cff0:	f001 fe46 	bl	800ec80 <_fflush_r>
 800cff4:	68a1      	ldr	r1, [r4, #8]
 800cff6:	4b09      	ldr	r3, [pc, #36]	; (800d01c <cleanup_stdio+0x38>)
 800cff8:	4299      	cmp	r1, r3
 800cffa:	d002      	beq.n	800d002 <cleanup_stdio+0x1e>
 800cffc:	4620      	mov	r0, r4
 800cffe:	f001 fe3f 	bl	800ec80 <_fflush_r>
 800d002:	68e1      	ldr	r1, [r4, #12]
 800d004:	4b06      	ldr	r3, [pc, #24]	; (800d020 <cleanup_stdio+0x3c>)
 800d006:	4299      	cmp	r1, r3
 800d008:	d004      	beq.n	800d014 <cleanup_stdio+0x30>
 800d00a:	4620      	mov	r0, r4
 800d00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d010:	f001 be36 	b.w	800ec80 <_fflush_r>
 800d014:	bd10      	pop	{r4, pc}
 800d016:	bf00      	nop
 800d018:	20002174 	.word	0x20002174
 800d01c:	200021dc 	.word	0x200021dc
 800d020:	20002244 	.word	0x20002244

0800d024 <global_stdio_init.part.0>:
 800d024:	b510      	push	{r4, lr}
 800d026:	4b0b      	ldr	r3, [pc, #44]	; (800d054 <global_stdio_init.part.0+0x30>)
 800d028:	4c0b      	ldr	r4, [pc, #44]	; (800d058 <global_stdio_init.part.0+0x34>)
 800d02a:	4a0c      	ldr	r2, [pc, #48]	; (800d05c <global_stdio_init.part.0+0x38>)
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	4620      	mov	r0, r4
 800d030:	2200      	movs	r2, #0
 800d032:	2104      	movs	r1, #4
 800d034:	f7ff ff94 	bl	800cf60 <std>
 800d038:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d03c:	2201      	movs	r2, #1
 800d03e:	2109      	movs	r1, #9
 800d040:	f7ff ff8e 	bl	800cf60 <std>
 800d044:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d048:	2202      	movs	r2, #2
 800d04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d04e:	2112      	movs	r1, #18
 800d050:	f7ff bf86 	b.w	800cf60 <std>
 800d054:	200022ac 	.word	0x200022ac
 800d058:	20002174 	.word	0x20002174
 800d05c:	0800cfcd 	.word	0x0800cfcd

0800d060 <__sfp_lock_acquire>:
 800d060:	4801      	ldr	r0, [pc, #4]	; (800d068 <__sfp_lock_acquire+0x8>)
 800d062:	f000 b934 	b.w	800d2ce <__retarget_lock_acquire_recursive>
 800d066:	bf00      	nop
 800d068:	200022b5 	.word	0x200022b5

0800d06c <__sfp_lock_release>:
 800d06c:	4801      	ldr	r0, [pc, #4]	; (800d074 <__sfp_lock_release+0x8>)
 800d06e:	f000 b92f 	b.w	800d2d0 <__retarget_lock_release_recursive>
 800d072:	bf00      	nop
 800d074:	200022b5 	.word	0x200022b5

0800d078 <__sinit>:
 800d078:	b510      	push	{r4, lr}
 800d07a:	4604      	mov	r4, r0
 800d07c:	f7ff fff0 	bl	800d060 <__sfp_lock_acquire>
 800d080:	6a23      	ldr	r3, [r4, #32]
 800d082:	b11b      	cbz	r3, 800d08c <__sinit+0x14>
 800d084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d088:	f7ff bff0 	b.w	800d06c <__sfp_lock_release>
 800d08c:	4b04      	ldr	r3, [pc, #16]	; (800d0a0 <__sinit+0x28>)
 800d08e:	6223      	str	r3, [r4, #32]
 800d090:	4b04      	ldr	r3, [pc, #16]	; (800d0a4 <__sinit+0x2c>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d1f5      	bne.n	800d084 <__sinit+0xc>
 800d098:	f7ff ffc4 	bl	800d024 <global_stdio_init.part.0>
 800d09c:	e7f2      	b.n	800d084 <__sinit+0xc>
 800d09e:	bf00      	nop
 800d0a0:	0800cfe5 	.word	0x0800cfe5
 800d0a4:	200022ac 	.word	0x200022ac

0800d0a8 <_fwalk_sglue>:
 800d0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0ac:	4607      	mov	r7, r0
 800d0ae:	4688      	mov	r8, r1
 800d0b0:	4614      	mov	r4, r2
 800d0b2:	2600      	movs	r6, #0
 800d0b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0b8:	f1b9 0901 	subs.w	r9, r9, #1
 800d0bc:	d505      	bpl.n	800d0ca <_fwalk_sglue+0x22>
 800d0be:	6824      	ldr	r4, [r4, #0]
 800d0c0:	2c00      	cmp	r4, #0
 800d0c2:	d1f7      	bne.n	800d0b4 <_fwalk_sglue+0xc>
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ca:	89ab      	ldrh	r3, [r5, #12]
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d907      	bls.n	800d0e0 <_fwalk_sglue+0x38>
 800d0d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	d003      	beq.n	800d0e0 <_fwalk_sglue+0x38>
 800d0d8:	4629      	mov	r1, r5
 800d0da:	4638      	mov	r0, r7
 800d0dc:	47c0      	blx	r8
 800d0de:	4306      	orrs	r6, r0
 800d0e0:	3568      	adds	r5, #104	; 0x68
 800d0e2:	e7e9      	b.n	800d0b8 <_fwalk_sglue+0x10>

0800d0e4 <sniprintf>:
 800d0e4:	b40c      	push	{r2, r3}
 800d0e6:	b530      	push	{r4, r5, lr}
 800d0e8:	4b17      	ldr	r3, [pc, #92]	; (800d148 <sniprintf+0x64>)
 800d0ea:	1e0c      	subs	r4, r1, #0
 800d0ec:	681d      	ldr	r5, [r3, #0]
 800d0ee:	b09d      	sub	sp, #116	; 0x74
 800d0f0:	da08      	bge.n	800d104 <sniprintf+0x20>
 800d0f2:	238b      	movs	r3, #139	; 0x8b
 800d0f4:	602b      	str	r3, [r5, #0]
 800d0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0fa:	b01d      	add	sp, #116	; 0x74
 800d0fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d100:	b002      	add	sp, #8
 800d102:	4770      	bx	lr
 800d104:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d108:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d10c:	bf14      	ite	ne
 800d10e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d112:	4623      	moveq	r3, r4
 800d114:	9304      	str	r3, [sp, #16]
 800d116:	9307      	str	r3, [sp, #28]
 800d118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d11c:	9002      	str	r0, [sp, #8]
 800d11e:	9006      	str	r0, [sp, #24]
 800d120:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d124:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d126:	ab21      	add	r3, sp, #132	; 0x84
 800d128:	a902      	add	r1, sp, #8
 800d12a:	4628      	mov	r0, r5
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	f001 fc23 	bl	800e978 <_svfiprintf_r>
 800d132:	1c43      	adds	r3, r0, #1
 800d134:	bfbc      	itt	lt
 800d136:	238b      	movlt	r3, #139	; 0x8b
 800d138:	602b      	strlt	r3, [r5, #0]
 800d13a:	2c00      	cmp	r4, #0
 800d13c:	d0dd      	beq.n	800d0fa <sniprintf+0x16>
 800d13e:	9b02      	ldr	r3, [sp, #8]
 800d140:	2200      	movs	r2, #0
 800d142:	701a      	strb	r2, [r3, #0]
 800d144:	e7d9      	b.n	800d0fa <sniprintf+0x16>
 800d146:	bf00      	nop
 800d148:	20000178 	.word	0x20000178

0800d14c <__sread>:
 800d14c:	b510      	push	{r4, lr}
 800d14e:	460c      	mov	r4, r1
 800d150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d154:	f000 f86c 	bl	800d230 <_read_r>
 800d158:	2800      	cmp	r0, #0
 800d15a:	bfab      	itete	ge
 800d15c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d15e:	89a3      	ldrhlt	r3, [r4, #12]
 800d160:	181b      	addge	r3, r3, r0
 800d162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d166:	bfac      	ite	ge
 800d168:	6563      	strge	r3, [r4, #84]	; 0x54
 800d16a:	81a3      	strhlt	r3, [r4, #12]
 800d16c:	bd10      	pop	{r4, pc}

0800d16e <__swrite>:
 800d16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d172:	461f      	mov	r7, r3
 800d174:	898b      	ldrh	r3, [r1, #12]
 800d176:	05db      	lsls	r3, r3, #23
 800d178:	4605      	mov	r5, r0
 800d17a:	460c      	mov	r4, r1
 800d17c:	4616      	mov	r6, r2
 800d17e:	d505      	bpl.n	800d18c <__swrite+0x1e>
 800d180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d184:	2302      	movs	r3, #2
 800d186:	2200      	movs	r2, #0
 800d188:	f000 f840 	bl	800d20c <_lseek_r>
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d196:	81a3      	strh	r3, [r4, #12]
 800d198:	4632      	mov	r2, r6
 800d19a:	463b      	mov	r3, r7
 800d19c:	4628      	mov	r0, r5
 800d19e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1a2:	f000 b857 	b.w	800d254 <_write_r>

0800d1a6 <__sseek>:
 800d1a6:	b510      	push	{r4, lr}
 800d1a8:	460c      	mov	r4, r1
 800d1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ae:	f000 f82d 	bl	800d20c <_lseek_r>
 800d1b2:	1c43      	adds	r3, r0, #1
 800d1b4:	89a3      	ldrh	r3, [r4, #12]
 800d1b6:	bf15      	itete	ne
 800d1b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d1ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d1be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d1c2:	81a3      	strheq	r3, [r4, #12]
 800d1c4:	bf18      	it	ne
 800d1c6:	81a3      	strhne	r3, [r4, #12]
 800d1c8:	bd10      	pop	{r4, pc}

0800d1ca <__sclose>:
 800d1ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ce:	f000 b80d 	b.w	800d1ec <_close_r>

0800d1d2 <memset>:
 800d1d2:	4402      	add	r2, r0
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d100      	bne.n	800d1dc <memset+0xa>
 800d1da:	4770      	bx	lr
 800d1dc:	f803 1b01 	strb.w	r1, [r3], #1
 800d1e0:	e7f9      	b.n	800d1d6 <memset+0x4>
	...

0800d1e4 <_localeconv_r>:
 800d1e4:	4800      	ldr	r0, [pc, #0]	; (800d1e8 <_localeconv_r+0x4>)
 800d1e6:	4770      	bx	lr
 800d1e8:	2000026c 	.word	0x2000026c

0800d1ec <_close_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4d06      	ldr	r5, [pc, #24]	; (800d208 <_close_r+0x1c>)
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	4608      	mov	r0, r1
 800d1f6:	602b      	str	r3, [r5, #0]
 800d1f8:	f7f4 fea5 	bl	8001f46 <_close>
 800d1fc:	1c43      	adds	r3, r0, #1
 800d1fe:	d102      	bne.n	800d206 <_close_r+0x1a>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	b103      	cbz	r3, 800d206 <_close_r+0x1a>
 800d204:	6023      	str	r3, [r4, #0]
 800d206:	bd38      	pop	{r3, r4, r5, pc}
 800d208:	200022b0 	.word	0x200022b0

0800d20c <_lseek_r>:
 800d20c:	b538      	push	{r3, r4, r5, lr}
 800d20e:	4d07      	ldr	r5, [pc, #28]	; (800d22c <_lseek_r+0x20>)
 800d210:	4604      	mov	r4, r0
 800d212:	4608      	mov	r0, r1
 800d214:	4611      	mov	r1, r2
 800d216:	2200      	movs	r2, #0
 800d218:	602a      	str	r2, [r5, #0]
 800d21a:	461a      	mov	r2, r3
 800d21c:	f7f4 feba 	bl	8001f94 <_lseek>
 800d220:	1c43      	adds	r3, r0, #1
 800d222:	d102      	bne.n	800d22a <_lseek_r+0x1e>
 800d224:	682b      	ldr	r3, [r5, #0]
 800d226:	b103      	cbz	r3, 800d22a <_lseek_r+0x1e>
 800d228:	6023      	str	r3, [r4, #0]
 800d22a:	bd38      	pop	{r3, r4, r5, pc}
 800d22c:	200022b0 	.word	0x200022b0

0800d230 <_read_r>:
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	4d07      	ldr	r5, [pc, #28]	; (800d250 <_read_r+0x20>)
 800d234:	4604      	mov	r4, r0
 800d236:	4608      	mov	r0, r1
 800d238:	4611      	mov	r1, r2
 800d23a:	2200      	movs	r2, #0
 800d23c:	602a      	str	r2, [r5, #0]
 800d23e:	461a      	mov	r2, r3
 800d240:	f7f4 fe48 	bl	8001ed4 <_read>
 800d244:	1c43      	adds	r3, r0, #1
 800d246:	d102      	bne.n	800d24e <_read_r+0x1e>
 800d248:	682b      	ldr	r3, [r5, #0]
 800d24a:	b103      	cbz	r3, 800d24e <_read_r+0x1e>
 800d24c:	6023      	str	r3, [r4, #0]
 800d24e:	bd38      	pop	{r3, r4, r5, pc}
 800d250:	200022b0 	.word	0x200022b0

0800d254 <_write_r>:
 800d254:	b538      	push	{r3, r4, r5, lr}
 800d256:	4d07      	ldr	r5, [pc, #28]	; (800d274 <_write_r+0x20>)
 800d258:	4604      	mov	r4, r0
 800d25a:	4608      	mov	r0, r1
 800d25c:	4611      	mov	r1, r2
 800d25e:	2200      	movs	r2, #0
 800d260:	602a      	str	r2, [r5, #0]
 800d262:	461a      	mov	r2, r3
 800d264:	f7f4 fe53 	bl	8001f0e <_write>
 800d268:	1c43      	adds	r3, r0, #1
 800d26a:	d102      	bne.n	800d272 <_write_r+0x1e>
 800d26c:	682b      	ldr	r3, [r5, #0]
 800d26e:	b103      	cbz	r3, 800d272 <_write_r+0x1e>
 800d270:	6023      	str	r3, [r4, #0]
 800d272:	bd38      	pop	{r3, r4, r5, pc}
 800d274:	200022b0 	.word	0x200022b0

0800d278 <__errno>:
 800d278:	4b01      	ldr	r3, [pc, #4]	; (800d280 <__errno+0x8>)
 800d27a:	6818      	ldr	r0, [r3, #0]
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	20000178 	.word	0x20000178

0800d284 <__libc_init_array>:
 800d284:	b570      	push	{r4, r5, r6, lr}
 800d286:	4d0d      	ldr	r5, [pc, #52]	; (800d2bc <__libc_init_array+0x38>)
 800d288:	4c0d      	ldr	r4, [pc, #52]	; (800d2c0 <__libc_init_array+0x3c>)
 800d28a:	1b64      	subs	r4, r4, r5
 800d28c:	10a4      	asrs	r4, r4, #2
 800d28e:	2600      	movs	r6, #0
 800d290:	42a6      	cmp	r6, r4
 800d292:	d109      	bne.n	800d2a8 <__libc_init_array+0x24>
 800d294:	4d0b      	ldr	r5, [pc, #44]	; (800d2c4 <__libc_init_array+0x40>)
 800d296:	4c0c      	ldr	r4, [pc, #48]	; (800d2c8 <__libc_init_array+0x44>)
 800d298:	f002 f896 	bl	800f3c8 <_init>
 800d29c:	1b64      	subs	r4, r4, r5
 800d29e:	10a4      	asrs	r4, r4, #2
 800d2a0:	2600      	movs	r6, #0
 800d2a2:	42a6      	cmp	r6, r4
 800d2a4:	d105      	bne.n	800d2b2 <__libc_init_array+0x2e>
 800d2a6:	bd70      	pop	{r4, r5, r6, pc}
 800d2a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2ac:	4798      	blx	r3
 800d2ae:	3601      	adds	r6, #1
 800d2b0:	e7ee      	b.n	800d290 <__libc_init_array+0xc>
 800d2b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2b6:	4798      	blx	r3
 800d2b8:	3601      	adds	r6, #1
 800d2ba:	e7f2      	b.n	800d2a2 <__libc_init_array+0x1e>
 800d2bc:	0800f7d4 	.word	0x0800f7d4
 800d2c0:	0800f7d4 	.word	0x0800f7d4
 800d2c4:	0800f7d4 	.word	0x0800f7d4
 800d2c8:	0800f7d8 	.word	0x0800f7d8

0800d2cc <__retarget_lock_init_recursive>:
 800d2cc:	4770      	bx	lr

0800d2ce <__retarget_lock_acquire_recursive>:
 800d2ce:	4770      	bx	lr

0800d2d0 <__retarget_lock_release_recursive>:
 800d2d0:	4770      	bx	lr

0800d2d2 <quorem>:
 800d2d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d6:	6903      	ldr	r3, [r0, #16]
 800d2d8:	690c      	ldr	r4, [r1, #16]
 800d2da:	42a3      	cmp	r3, r4
 800d2dc:	4607      	mov	r7, r0
 800d2de:	db7e      	blt.n	800d3de <quorem+0x10c>
 800d2e0:	3c01      	subs	r4, #1
 800d2e2:	f101 0814 	add.w	r8, r1, #20
 800d2e6:	f100 0514 	add.w	r5, r0, #20
 800d2ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2ee:	9301      	str	r3, [sp, #4]
 800d2f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d300:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d304:	fbb2 f6f3 	udiv	r6, r2, r3
 800d308:	d331      	bcc.n	800d36e <quorem+0x9c>
 800d30a:	f04f 0e00 	mov.w	lr, #0
 800d30e:	4640      	mov	r0, r8
 800d310:	46ac      	mov	ip, r5
 800d312:	46f2      	mov	sl, lr
 800d314:	f850 2b04 	ldr.w	r2, [r0], #4
 800d318:	b293      	uxth	r3, r2
 800d31a:	fb06 e303 	mla	r3, r6, r3, lr
 800d31e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d322:	0c1a      	lsrs	r2, r3, #16
 800d324:	b29b      	uxth	r3, r3
 800d326:	ebaa 0303 	sub.w	r3, sl, r3
 800d32a:	f8dc a000 	ldr.w	sl, [ip]
 800d32e:	fa13 f38a 	uxtah	r3, r3, sl
 800d332:	fb06 220e 	mla	r2, r6, lr, r2
 800d336:	9300      	str	r3, [sp, #0]
 800d338:	9b00      	ldr	r3, [sp, #0]
 800d33a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d33e:	b292      	uxth	r2, r2
 800d340:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d344:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d348:	f8bd 3000 	ldrh.w	r3, [sp]
 800d34c:	4581      	cmp	r9, r0
 800d34e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d352:	f84c 3b04 	str.w	r3, [ip], #4
 800d356:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d35a:	d2db      	bcs.n	800d314 <quorem+0x42>
 800d35c:	f855 300b 	ldr.w	r3, [r5, fp]
 800d360:	b92b      	cbnz	r3, 800d36e <quorem+0x9c>
 800d362:	9b01      	ldr	r3, [sp, #4]
 800d364:	3b04      	subs	r3, #4
 800d366:	429d      	cmp	r5, r3
 800d368:	461a      	mov	r2, r3
 800d36a:	d32c      	bcc.n	800d3c6 <quorem+0xf4>
 800d36c:	613c      	str	r4, [r7, #16]
 800d36e:	4638      	mov	r0, r7
 800d370:	f001 f9a8 	bl	800e6c4 <__mcmp>
 800d374:	2800      	cmp	r0, #0
 800d376:	db22      	blt.n	800d3be <quorem+0xec>
 800d378:	3601      	adds	r6, #1
 800d37a:	4629      	mov	r1, r5
 800d37c:	2000      	movs	r0, #0
 800d37e:	f858 2b04 	ldr.w	r2, [r8], #4
 800d382:	f8d1 c000 	ldr.w	ip, [r1]
 800d386:	b293      	uxth	r3, r2
 800d388:	1ac3      	subs	r3, r0, r3
 800d38a:	0c12      	lsrs	r2, r2, #16
 800d38c:	fa13 f38c 	uxtah	r3, r3, ip
 800d390:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d394:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d398:	b29b      	uxth	r3, r3
 800d39a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d39e:	45c1      	cmp	r9, r8
 800d3a0:	f841 3b04 	str.w	r3, [r1], #4
 800d3a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d3a8:	d2e9      	bcs.n	800d37e <quorem+0xac>
 800d3aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3b2:	b922      	cbnz	r2, 800d3be <quorem+0xec>
 800d3b4:	3b04      	subs	r3, #4
 800d3b6:	429d      	cmp	r5, r3
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	d30a      	bcc.n	800d3d2 <quorem+0x100>
 800d3bc:	613c      	str	r4, [r7, #16]
 800d3be:	4630      	mov	r0, r6
 800d3c0:	b003      	add	sp, #12
 800d3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3c6:	6812      	ldr	r2, [r2, #0]
 800d3c8:	3b04      	subs	r3, #4
 800d3ca:	2a00      	cmp	r2, #0
 800d3cc:	d1ce      	bne.n	800d36c <quorem+0x9a>
 800d3ce:	3c01      	subs	r4, #1
 800d3d0:	e7c9      	b.n	800d366 <quorem+0x94>
 800d3d2:	6812      	ldr	r2, [r2, #0]
 800d3d4:	3b04      	subs	r3, #4
 800d3d6:	2a00      	cmp	r2, #0
 800d3d8:	d1f0      	bne.n	800d3bc <quorem+0xea>
 800d3da:	3c01      	subs	r4, #1
 800d3dc:	e7eb      	b.n	800d3b6 <quorem+0xe4>
 800d3de:	2000      	movs	r0, #0
 800d3e0:	e7ee      	b.n	800d3c0 <quorem+0xee>
 800d3e2:	0000      	movs	r0, r0
 800d3e4:	0000      	movs	r0, r0
	...

0800d3e8 <_dtoa_r>:
 800d3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ec:	ed2d 8b04 	vpush	{d8-d9}
 800d3f0:	69c5      	ldr	r5, [r0, #28]
 800d3f2:	b093      	sub	sp, #76	; 0x4c
 800d3f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d3f8:	ec57 6b10 	vmov	r6, r7, d0
 800d3fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d400:	9107      	str	r1, [sp, #28]
 800d402:	4604      	mov	r4, r0
 800d404:	920a      	str	r2, [sp, #40]	; 0x28
 800d406:	930d      	str	r3, [sp, #52]	; 0x34
 800d408:	b975      	cbnz	r5, 800d428 <_dtoa_r+0x40>
 800d40a:	2010      	movs	r0, #16
 800d40c:	f000 fe2a 	bl	800e064 <malloc>
 800d410:	4602      	mov	r2, r0
 800d412:	61e0      	str	r0, [r4, #28]
 800d414:	b920      	cbnz	r0, 800d420 <_dtoa_r+0x38>
 800d416:	4bae      	ldr	r3, [pc, #696]	; (800d6d0 <_dtoa_r+0x2e8>)
 800d418:	21ef      	movs	r1, #239	; 0xef
 800d41a:	48ae      	ldr	r0, [pc, #696]	; (800d6d4 <_dtoa_r+0x2ec>)
 800d41c:	f001 fc90 	bl	800ed40 <__assert_func>
 800d420:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d424:	6005      	str	r5, [r0, #0]
 800d426:	60c5      	str	r5, [r0, #12]
 800d428:	69e3      	ldr	r3, [r4, #28]
 800d42a:	6819      	ldr	r1, [r3, #0]
 800d42c:	b151      	cbz	r1, 800d444 <_dtoa_r+0x5c>
 800d42e:	685a      	ldr	r2, [r3, #4]
 800d430:	604a      	str	r2, [r1, #4]
 800d432:	2301      	movs	r3, #1
 800d434:	4093      	lsls	r3, r2
 800d436:	608b      	str	r3, [r1, #8]
 800d438:	4620      	mov	r0, r4
 800d43a:	f000 ff07 	bl	800e24c <_Bfree>
 800d43e:	69e3      	ldr	r3, [r4, #28]
 800d440:	2200      	movs	r2, #0
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	1e3b      	subs	r3, r7, #0
 800d446:	bfbb      	ittet	lt
 800d448:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d44c:	9303      	strlt	r3, [sp, #12]
 800d44e:	2300      	movge	r3, #0
 800d450:	2201      	movlt	r2, #1
 800d452:	bfac      	ite	ge
 800d454:	f8c8 3000 	strge.w	r3, [r8]
 800d458:	f8c8 2000 	strlt.w	r2, [r8]
 800d45c:	4b9e      	ldr	r3, [pc, #632]	; (800d6d8 <_dtoa_r+0x2f0>)
 800d45e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d462:	ea33 0308 	bics.w	r3, r3, r8
 800d466:	d11b      	bne.n	800d4a0 <_dtoa_r+0xb8>
 800d468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d46a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d46e:	6013      	str	r3, [r2, #0]
 800d470:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d474:	4333      	orrs	r3, r6
 800d476:	f000 8593 	beq.w	800dfa0 <_dtoa_r+0xbb8>
 800d47a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d47c:	b963      	cbnz	r3, 800d498 <_dtoa_r+0xb0>
 800d47e:	4b97      	ldr	r3, [pc, #604]	; (800d6dc <_dtoa_r+0x2f4>)
 800d480:	e027      	b.n	800d4d2 <_dtoa_r+0xea>
 800d482:	4b97      	ldr	r3, [pc, #604]	; (800d6e0 <_dtoa_r+0x2f8>)
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	3308      	adds	r3, #8
 800d488:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d48a:	6013      	str	r3, [r2, #0]
 800d48c:	9800      	ldr	r0, [sp, #0]
 800d48e:	b013      	add	sp, #76	; 0x4c
 800d490:	ecbd 8b04 	vpop	{d8-d9}
 800d494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d498:	4b90      	ldr	r3, [pc, #576]	; (800d6dc <_dtoa_r+0x2f4>)
 800d49a:	9300      	str	r3, [sp, #0]
 800d49c:	3303      	adds	r3, #3
 800d49e:	e7f3      	b.n	800d488 <_dtoa_r+0xa0>
 800d4a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	ec51 0b17 	vmov	r0, r1, d7
 800d4aa:	eeb0 8a47 	vmov.f32	s16, s14
 800d4ae:	eef0 8a67 	vmov.f32	s17, s15
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	f7f3 fb10 	bl	8000ad8 <__aeabi_dcmpeq>
 800d4b8:	4681      	mov	r9, r0
 800d4ba:	b160      	cbz	r0, 800d4d6 <_dtoa_r+0xee>
 800d4bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4be:	2301      	movs	r3, #1
 800d4c0:	6013      	str	r3, [r2, #0]
 800d4c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f000 8568 	beq.w	800df9a <_dtoa_r+0xbb2>
 800d4ca:	4b86      	ldr	r3, [pc, #536]	; (800d6e4 <_dtoa_r+0x2fc>)
 800d4cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d4ce:	6013      	str	r3, [r2, #0]
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	e7da      	b.n	800d48c <_dtoa_r+0xa4>
 800d4d6:	aa10      	add	r2, sp, #64	; 0x40
 800d4d8:	a911      	add	r1, sp, #68	; 0x44
 800d4da:	4620      	mov	r0, r4
 800d4dc:	eeb0 0a48 	vmov.f32	s0, s16
 800d4e0:	eef0 0a68 	vmov.f32	s1, s17
 800d4e4:	f001 f994 	bl	800e810 <__d2b>
 800d4e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d4ec:	4682      	mov	sl, r0
 800d4ee:	2d00      	cmp	r5, #0
 800d4f0:	d07f      	beq.n	800d5f2 <_dtoa_r+0x20a>
 800d4f2:	ee18 3a90 	vmov	r3, s17
 800d4f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d4fe:	ec51 0b18 	vmov	r0, r1, d8
 800d502:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d506:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d50a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d50e:	4619      	mov	r1, r3
 800d510:	2200      	movs	r2, #0
 800d512:	4b75      	ldr	r3, [pc, #468]	; (800d6e8 <_dtoa_r+0x300>)
 800d514:	f7f2 fec0 	bl	8000298 <__aeabi_dsub>
 800d518:	a367      	add	r3, pc, #412	; (adr r3, 800d6b8 <_dtoa_r+0x2d0>)
 800d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51e:	f7f3 f873 	bl	8000608 <__aeabi_dmul>
 800d522:	a367      	add	r3, pc, #412	; (adr r3, 800d6c0 <_dtoa_r+0x2d8>)
 800d524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d528:	f7f2 feb8 	bl	800029c <__adddf3>
 800d52c:	4606      	mov	r6, r0
 800d52e:	4628      	mov	r0, r5
 800d530:	460f      	mov	r7, r1
 800d532:	f7f2 ffff 	bl	8000534 <__aeabi_i2d>
 800d536:	a364      	add	r3, pc, #400	; (adr r3, 800d6c8 <_dtoa_r+0x2e0>)
 800d538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53c:	f7f3 f864 	bl	8000608 <__aeabi_dmul>
 800d540:	4602      	mov	r2, r0
 800d542:	460b      	mov	r3, r1
 800d544:	4630      	mov	r0, r6
 800d546:	4639      	mov	r1, r7
 800d548:	f7f2 fea8 	bl	800029c <__adddf3>
 800d54c:	4606      	mov	r6, r0
 800d54e:	460f      	mov	r7, r1
 800d550:	f7f3 fb0a 	bl	8000b68 <__aeabi_d2iz>
 800d554:	2200      	movs	r2, #0
 800d556:	4683      	mov	fp, r0
 800d558:	2300      	movs	r3, #0
 800d55a:	4630      	mov	r0, r6
 800d55c:	4639      	mov	r1, r7
 800d55e:	f7f3 fac5 	bl	8000aec <__aeabi_dcmplt>
 800d562:	b148      	cbz	r0, 800d578 <_dtoa_r+0x190>
 800d564:	4658      	mov	r0, fp
 800d566:	f7f2 ffe5 	bl	8000534 <__aeabi_i2d>
 800d56a:	4632      	mov	r2, r6
 800d56c:	463b      	mov	r3, r7
 800d56e:	f7f3 fab3 	bl	8000ad8 <__aeabi_dcmpeq>
 800d572:	b908      	cbnz	r0, 800d578 <_dtoa_r+0x190>
 800d574:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d578:	f1bb 0f16 	cmp.w	fp, #22
 800d57c:	d857      	bhi.n	800d62e <_dtoa_r+0x246>
 800d57e:	4b5b      	ldr	r3, [pc, #364]	; (800d6ec <_dtoa_r+0x304>)
 800d580:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d588:	ec51 0b18 	vmov	r0, r1, d8
 800d58c:	f7f3 faae 	bl	8000aec <__aeabi_dcmplt>
 800d590:	2800      	cmp	r0, #0
 800d592:	d04e      	beq.n	800d632 <_dtoa_r+0x24a>
 800d594:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d598:	2300      	movs	r3, #0
 800d59a:	930c      	str	r3, [sp, #48]	; 0x30
 800d59c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d59e:	1b5b      	subs	r3, r3, r5
 800d5a0:	1e5a      	subs	r2, r3, #1
 800d5a2:	bf45      	ittet	mi
 800d5a4:	f1c3 0301 	rsbmi	r3, r3, #1
 800d5a8:	9305      	strmi	r3, [sp, #20]
 800d5aa:	2300      	movpl	r3, #0
 800d5ac:	2300      	movmi	r3, #0
 800d5ae:	9206      	str	r2, [sp, #24]
 800d5b0:	bf54      	ite	pl
 800d5b2:	9305      	strpl	r3, [sp, #20]
 800d5b4:	9306      	strmi	r3, [sp, #24]
 800d5b6:	f1bb 0f00 	cmp.w	fp, #0
 800d5ba:	db3c      	blt.n	800d636 <_dtoa_r+0x24e>
 800d5bc:	9b06      	ldr	r3, [sp, #24]
 800d5be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d5c2:	445b      	add	r3, fp
 800d5c4:	9306      	str	r3, [sp, #24]
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	9308      	str	r3, [sp, #32]
 800d5ca:	9b07      	ldr	r3, [sp, #28]
 800d5cc:	2b09      	cmp	r3, #9
 800d5ce:	d868      	bhi.n	800d6a2 <_dtoa_r+0x2ba>
 800d5d0:	2b05      	cmp	r3, #5
 800d5d2:	bfc4      	itt	gt
 800d5d4:	3b04      	subgt	r3, #4
 800d5d6:	9307      	strgt	r3, [sp, #28]
 800d5d8:	9b07      	ldr	r3, [sp, #28]
 800d5da:	f1a3 0302 	sub.w	r3, r3, #2
 800d5de:	bfcc      	ite	gt
 800d5e0:	2500      	movgt	r5, #0
 800d5e2:	2501      	movle	r5, #1
 800d5e4:	2b03      	cmp	r3, #3
 800d5e6:	f200 8085 	bhi.w	800d6f4 <_dtoa_r+0x30c>
 800d5ea:	e8df f003 	tbb	[pc, r3]
 800d5ee:	3b2e      	.short	0x3b2e
 800d5f0:	5839      	.short	0x5839
 800d5f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d5f6:	441d      	add	r5, r3
 800d5f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d5fc:	2b20      	cmp	r3, #32
 800d5fe:	bfc1      	itttt	gt
 800d600:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d604:	fa08 f803 	lslgt.w	r8, r8, r3
 800d608:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d60c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d610:	bfd6      	itet	le
 800d612:	f1c3 0320 	rsble	r3, r3, #32
 800d616:	ea48 0003 	orrgt.w	r0, r8, r3
 800d61a:	fa06 f003 	lslle.w	r0, r6, r3
 800d61e:	f7f2 ff79 	bl	8000514 <__aeabi_ui2d>
 800d622:	2201      	movs	r2, #1
 800d624:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d628:	3d01      	subs	r5, #1
 800d62a:	920e      	str	r2, [sp, #56]	; 0x38
 800d62c:	e76f      	b.n	800d50e <_dtoa_r+0x126>
 800d62e:	2301      	movs	r3, #1
 800d630:	e7b3      	b.n	800d59a <_dtoa_r+0x1b2>
 800d632:	900c      	str	r0, [sp, #48]	; 0x30
 800d634:	e7b2      	b.n	800d59c <_dtoa_r+0x1b4>
 800d636:	9b05      	ldr	r3, [sp, #20]
 800d638:	eba3 030b 	sub.w	r3, r3, fp
 800d63c:	9305      	str	r3, [sp, #20]
 800d63e:	f1cb 0300 	rsb	r3, fp, #0
 800d642:	9308      	str	r3, [sp, #32]
 800d644:	2300      	movs	r3, #0
 800d646:	930b      	str	r3, [sp, #44]	; 0x2c
 800d648:	e7bf      	b.n	800d5ca <_dtoa_r+0x1e2>
 800d64a:	2300      	movs	r3, #0
 800d64c:	9309      	str	r3, [sp, #36]	; 0x24
 800d64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d650:	2b00      	cmp	r3, #0
 800d652:	dc52      	bgt.n	800d6fa <_dtoa_r+0x312>
 800d654:	2301      	movs	r3, #1
 800d656:	9301      	str	r3, [sp, #4]
 800d658:	9304      	str	r3, [sp, #16]
 800d65a:	461a      	mov	r2, r3
 800d65c:	920a      	str	r2, [sp, #40]	; 0x28
 800d65e:	e00b      	b.n	800d678 <_dtoa_r+0x290>
 800d660:	2301      	movs	r3, #1
 800d662:	e7f3      	b.n	800d64c <_dtoa_r+0x264>
 800d664:	2300      	movs	r3, #0
 800d666:	9309      	str	r3, [sp, #36]	; 0x24
 800d668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d66a:	445b      	add	r3, fp
 800d66c:	9301      	str	r3, [sp, #4]
 800d66e:	3301      	adds	r3, #1
 800d670:	2b01      	cmp	r3, #1
 800d672:	9304      	str	r3, [sp, #16]
 800d674:	bfb8      	it	lt
 800d676:	2301      	movlt	r3, #1
 800d678:	69e0      	ldr	r0, [r4, #28]
 800d67a:	2100      	movs	r1, #0
 800d67c:	2204      	movs	r2, #4
 800d67e:	f102 0614 	add.w	r6, r2, #20
 800d682:	429e      	cmp	r6, r3
 800d684:	d93d      	bls.n	800d702 <_dtoa_r+0x31a>
 800d686:	6041      	str	r1, [r0, #4]
 800d688:	4620      	mov	r0, r4
 800d68a:	f000 fd9f 	bl	800e1cc <_Balloc>
 800d68e:	9000      	str	r0, [sp, #0]
 800d690:	2800      	cmp	r0, #0
 800d692:	d139      	bne.n	800d708 <_dtoa_r+0x320>
 800d694:	4b16      	ldr	r3, [pc, #88]	; (800d6f0 <_dtoa_r+0x308>)
 800d696:	4602      	mov	r2, r0
 800d698:	f240 11af 	movw	r1, #431	; 0x1af
 800d69c:	e6bd      	b.n	800d41a <_dtoa_r+0x32>
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e7e1      	b.n	800d666 <_dtoa_r+0x27e>
 800d6a2:	2501      	movs	r5, #1
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	9307      	str	r3, [sp, #28]
 800d6a8:	9509      	str	r5, [sp, #36]	; 0x24
 800d6aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ae:	9301      	str	r3, [sp, #4]
 800d6b0:	9304      	str	r3, [sp, #16]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	2312      	movs	r3, #18
 800d6b6:	e7d1      	b.n	800d65c <_dtoa_r+0x274>
 800d6b8:	636f4361 	.word	0x636f4361
 800d6bc:	3fd287a7 	.word	0x3fd287a7
 800d6c0:	8b60c8b3 	.word	0x8b60c8b3
 800d6c4:	3fc68a28 	.word	0x3fc68a28
 800d6c8:	509f79fb 	.word	0x509f79fb
 800d6cc:	3fd34413 	.word	0x3fd34413
 800d6d0:	0800f499 	.word	0x0800f499
 800d6d4:	0800f4b0 	.word	0x0800f4b0
 800d6d8:	7ff00000 	.word	0x7ff00000
 800d6dc:	0800f495 	.word	0x0800f495
 800d6e0:	0800f48c 	.word	0x0800f48c
 800d6e4:	0800f469 	.word	0x0800f469
 800d6e8:	3ff80000 	.word	0x3ff80000
 800d6ec:	0800f5a0 	.word	0x0800f5a0
 800d6f0:	0800f508 	.word	0x0800f508
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6f8:	e7d7      	b.n	800d6aa <_dtoa_r+0x2c2>
 800d6fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	9304      	str	r3, [sp, #16]
 800d700:	e7ba      	b.n	800d678 <_dtoa_r+0x290>
 800d702:	3101      	adds	r1, #1
 800d704:	0052      	lsls	r2, r2, #1
 800d706:	e7ba      	b.n	800d67e <_dtoa_r+0x296>
 800d708:	69e3      	ldr	r3, [r4, #28]
 800d70a:	9a00      	ldr	r2, [sp, #0]
 800d70c:	601a      	str	r2, [r3, #0]
 800d70e:	9b04      	ldr	r3, [sp, #16]
 800d710:	2b0e      	cmp	r3, #14
 800d712:	f200 80a8 	bhi.w	800d866 <_dtoa_r+0x47e>
 800d716:	2d00      	cmp	r5, #0
 800d718:	f000 80a5 	beq.w	800d866 <_dtoa_r+0x47e>
 800d71c:	f1bb 0f00 	cmp.w	fp, #0
 800d720:	dd38      	ble.n	800d794 <_dtoa_r+0x3ac>
 800d722:	4bc0      	ldr	r3, [pc, #768]	; (800da24 <_dtoa_r+0x63c>)
 800d724:	f00b 020f 	and.w	r2, fp, #15
 800d728:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d72c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d730:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d734:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d738:	d019      	beq.n	800d76e <_dtoa_r+0x386>
 800d73a:	4bbb      	ldr	r3, [pc, #748]	; (800da28 <_dtoa_r+0x640>)
 800d73c:	ec51 0b18 	vmov	r0, r1, d8
 800d740:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d744:	f7f3 f88a 	bl	800085c <__aeabi_ddiv>
 800d748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d74c:	f008 080f 	and.w	r8, r8, #15
 800d750:	2503      	movs	r5, #3
 800d752:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800da28 <_dtoa_r+0x640>
 800d756:	f1b8 0f00 	cmp.w	r8, #0
 800d75a:	d10a      	bne.n	800d772 <_dtoa_r+0x38a>
 800d75c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d760:	4632      	mov	r2, r6
 800d762:	463b      	mov	r3, r7
 800d764:	f7f3 f87a 	bl	800085c <__aeabi_ddiv>
 800d768:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d76c:	e02b      	b.n	800d7c6 <_dtoa_r+0x3de>
 800d76e:	2502      	movs	r5, #2
 800d770:	e7ef      	b.n	800d752 <_dtoa_r+0x36a>
 800d772:	f018 0f01 	tst.w	r8, #1
 800d776:	d008      	beq.n	800d78a <_dtoa_r+0x3a2>
 800d778:	4630      	mov	r0, r6
 800d77a:	4639      	mov	r1, r7
 800d77c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d780:	f7f2 ff42 	bl	8000608 <__aeabi_dmul>
 800d784:	3501      	adds	r5, #1
 800d786:	4606      	mov	r6, r0
 800d788:	460f      	mov	r7, r1
 800d78a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d78e:	f109 0908 	add.w	r9, r9, #8
 800d792:	e7e0      	b.n	800d756 <_dtoa_r+0x36e>
 800d794:	f000 809f 	beq.w	800d8d6 <_dtoa_r+0x4ee>
 800d798:	f1cb 0600 	rsb	r6, fp, #0
 800d79c:	4ba1      	ldr	r3, [pc, #644]	; (800da24 <_dtoa_r+0x63c>)
 800d79e:	4fa2      	ldr	r7, [pc, #648]	; (800da28 <_dtoa_r+0x640>)
 800d7a0:	f006 020f 	and.w	r2, r6, #15
 800d7a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ac:	ec51 0b18 	vmov	r0, r1, d8
 800d7b0:	f7f2 ff2a 	bl	8000608 <__aeabi_dmul>
 800d7b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7b8:	1136      	asrs	r6, r6, #4
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	2502      	movs	r5, #2
 800d7be:	2e00      	cmp	r6, #0
 800d7c0:	d17e      	bne.n	800d8c0 <_dtoa_r+0x4d8>
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d1d0      	bne.n	800d768 <_dtoa_r+0x380>
 800d7c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f000 8084 	beq.w	800d8da <_dtoa_r+0x4f2>
 800d7d2:	4b96      	ldr	r3, [pc, #600]	; (800da2c <_dtoa_r+0x644>)
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	4640      	mov	r0, r8
 800d7d8:	4649      	mov	r1, r9
 800d7da:	f7f3 f987 	bl	8000aec <__aeabi_dcmplt>
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	d07b      	beq.n	800d8da <_dtoa_r+0x4f2>
 800d7e2:	9b04      	ldr	r3, [sp, #16]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d078      	beq.n	800d8da <_dtoa_r+0x4f2>
 800d7e8:	9b01      	ldr	r3, [sp, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	dd39      	ble.n	800d862 <_dtoa_r+0x47a>
 800d7ee:	4b90      	ldr	r3, [pc, #576]	; (800da30 <_dtoa_r+0x648>)
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	4640      	mov	r0, r8
 800d7f4:	4649      	mov	r1, r9
 800d7f6:	f7f2 ff07 	bl	8000608 <__aeabi_dmul>
 800d7fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7fe:	9e01      	ldr	r6, [sp, #4]
 800d800:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d804:	3501      	adds	r5, #1
 800d806:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d80a:	4628      	mov	r0, r5
 800d80c:	f7f2 fe92 	bl	8000534 <__aeabi_i2d>
 800d810:	4642      	mov	r2, r8
 800d812:	464b      	mov	r3, r9
 800d814:	f7f2 fef8 	bl	8000608 <__aeabi_dmul>
 800d818:	4b86      	ldr	r3, [pc, #536]	; (800da34 <_dtoa_r+0x64c>)
 800d81a:	2200      	movs	r2, #0
 800d81c:	f7f2 fd3e 	bl	800029c <__adddf3>
 800d820:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d828:	9303      	str	r3, [sp, #12]
 800d82a:	2e00      	cmp	r6, #0
 800d82c:	d158      	bne.n	800d8e0 <_dtoa_r+0x4f8>
 800d82e:	4b82      	ldr	r3, [pc, #520]	; (800da38 <_dtoa_r+0x650>)
 800d830:	2200      	movs	r2, #0
 800d832:	4640      	mov	r0, r8
 800d834:	4649      	mov	r1, r9
 800d836:	f7f2 fd2f 	bl	8000298 <__aeabi_dsub>
 800d83a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d83e:	4680      	mov	r8, r0
 800d840:	4689      	mov	r9, r1
 800d842:	f7f3 f971 	bl	8000b28 <__aeabi_dcmpgt>
 800d846:	2800      	cmp	r0, #0
 800d848:	f040 8296 	bne.w	800dd78 <_dtoa_r+0x990>
 800d84c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d850:	4640      	mov	r0, r8
 800d852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d856:	4649      	mov	r1, r9
 800d858:	f7f3 f948 	bl	8000aec <__aeabi_dcmplt>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	f040 8289 	bne.w	800dd74 <_dtoa_r+0x98c>
 800d862:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d868:	2b00      	cmp	r3, #0
 800d86a:	f2c0 814e 	blt.w	800db0a <_dtoa_r+0x722>
 800d86e:	f1bb 0f0e 	cmp.w	fp, #14
 800d872:	f300 814a 	bgt.w	800db0a <_dtoa_r+0x722>
 800d876:	4b6b      	ldr	r3, [pc, #428]	; (800da24 <_dtoa_r+0x63c>)
 800d878:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d87c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d882:	2b00      	cmp	r3, #0
 800d884:	f280 80dc 	bge.w	800da40 <_dtoa_r+0x658>
 800d888:	9b04      	ldr	r3, [sp, #16]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f300 80d8 	bgt.w	800da40 <_dtoa_r+0x658>
 800d890:	f040 826f 	bne.w	800dd72 <_dtoa_r+0x98a>
 800d894:	4b68      	ldr	r3, [pc, #416]	; (800da38 <_dtoa_r+0x650>)
 800d896:	2200      	movs	r2, #0
 800d898:	4640      	mov	r0, r8
 800d89a:	4649      	mov	r1, r9
 800d89c:	f7f2 feb4 	bl	8000608 <__aeabi_dmul>
 800d8a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8a4:	f7f3 f936 	bl	8000b14 <__aeabi_dcmpge>
 800d8a8:	9e04      	ldr	r6, [sp, #16]
 800d8aa:	4637      	mov	r7, r6
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	f040 8245 	bne.w	800dd3c <_dtoa_r+0x954>
 800d8b2:	9d00      	ldr	r5, [sp, #0]
 800d8b4:	2331      	movs	r3, #49	; 0x31
 800d8b6:	f805 3b01 	strb.w	r3, [r5], #1
 800d8ba:	f10b 0b01 	add.w	fp, fp, #1
 800d8be:	e241      	b.n	800dd44 <_dtoa_r+0x95c>
 800d8c0:	07f2      	lsls	r2, r6, #31
 800d8c2:	d505      	bpl.n	800d8d0 <_dtoa_r+0x4e8>
 800d8c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8c8:	f7f2 fe9e 	bl	8000608 <__aeabi_dmul>
 800d8cc:	3501      	adds	r5, #1
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	1076      	asrs	r6, r6, #1
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	e773      	b.n	800d7be <_dtoa_r+0x3d6>
 800d8d6:	2502      	movs	r5, #2
 800d8d8:	e775      	b.n	800d7c6 <_dtoa_r+0x3de>
 800d8da:	9e04      	ldr	r6, [sp, #16]
 800d8dc:	465f      	mov	r7, fp
 800d8de:	e792      	b.n	800d806 <_dtoa_r+0x41e>
 800d8e0:	9900      	ldr	r1, [sp, #0]
 800d8e2:	4b50      	ldr	r3, [pc, #320]	; (800da24 <_dtoa_r+0x63c>)
 800d8e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8e8:	4431      	add	r1, r6
 800d8ea:	9102      	str	r1, [sp, #8]
 800d8ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8ee:	eeb0 9a47 	vmov.f32	s18, s14
 800d8f2:	eef0 9a67 	vmov.f32	s19, s15
 800d8f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d8fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d8fe:	2900      	cmp	r1, #0
 800d900:	d044      	beq.n	800d98c <_dtoa_r+0x5a4>
 800d902:	494e      	ldr	r1, [pc, #312]	; (800da3c <_dtoa_r+0x654>)
 800d904:	2000      	movs	r0, #0
 800d906:	f7f2 ffa9 	bl	800085c <__aeabi_ddiv>
 800d90a:	ec53 2b19 	vmov	r2, r3, d9
 800d90e:	f7f2 fcc3 	bl	8000298 <__aeabi_dsub>
 800d912:	9d00      	ldr	r5, [sp, #0]
 800d914:	ec41 0b19 	vmov	d9, r0, r1
 800d918:	4649      	mov	r1, r9
 800d91a:	4640      	mov	r0, r8
 800d91c:	f7f3 f924 	bl	8000b68 <__aeabi_d2iz>
 800d920:	4606      	mov	r6, r0
 800d922:	f7f2 fe07 	bl	8000534 <__aeabi_i2d>
 800d926:	4602      	mov	r2, r0
 800d928:	460b      	mov	r3, r1
 800d92a:	4640      	mov	r0, r8
 800d92c:	4649      	mov	r1, r9
 800d92e:	f7f2 fcb3 	bl	8000298 <__aeabi_dsub>
 800d932:	3630      	adds	r6, #48	; 0x30
 800d934:	f805 6b01 	strb.w	r6, [r5], #1
 800d938:	ec53 2b19 	vmov	r2, r3, d9
 800d93c:	4680      	mov	r8, r0
 800d93e:	4689      	mov	r9, r1
 800d940:	f7f3 f8d4 	bl	8000aec <__aeabi_dcmplt>
 800d944:	2800      	cmp	r0, #0
 800d946:	d164      	bne.n	800da12 <_dtoa_r+0x62a>
 800d948:	4642      	mov	r2, r8
 800d94a:	464b      	mov	r3, r9
 800d94c:	4937      	ldr	r1, [pc, #220]	; (800da2c <_dtoa_r+0x644>)
 800d94e:	2000      	movs	r0, #0
 800d950:	f7f2 fca2 	bl	8000298 <__aeabi_dsub>
 800d954:	ec53 2b19 	vmov	r2, r3, d9
 800d958:	f7f3 f8c8 	bl	8000aec <__aeabi_dcmplt>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	f040 80b6 	bne.w	800dace <_dtoa_r+0x6e6>
 800d962:	9b02      	ldr	r3, [sp, #8]
 800d964:	429d      	cmp	r5, r3
 800d966:	f43f af7c 	beq.w	800d862 <_dtoa_r+0x47a>
 800d96a:	4b31      	ldr	r3, [pc, #196]	; (800da30 <_dtoa_r+0x648>)
 800d96c:	ec51 0b19 	vmov	r0, r1, d9
 800d970:	2200      	movs	r2, #0
 800d972:	f7f2 fe49 	bl	8000608 <__aeabi_dmul>
 800d976:	4b2e      	ldr	r3, [pc, #184]	; (800da30 <_dtoa_r+0x648>)
 800d978:	ec41 0b19 	vmov	d9, r0, r1
 800d97c:	2200      	movs	r2, #0
 800d97e:	4640      	mov	r0, r8
 800d980:	4649      	mov	r1, r9
 800d982:	f7f2 fe41 	bl	8000608 <__aeabi_dmul>
 800d986:	4680      	mov	r8, r0
 800d988:	4689      	mov	r9, r1
 800d98a:	e7c5      	b.n	800d918 <_dtoa_r+0x530>
 800d98c:	ec51 0b17 	vmov	r0, r1, d7
 800d990:	f7f2 fe3a 	bl	8000608 <__aeabi_dmul>
 800d994:	9b02      	ldr	r3, [sp, #8]
 800d996:	9d00      	ldr	r5, [sp, #0]
 800d998:	930f      	str	r3, [sp, #60]	; 0x3c
 800d99a:	ec41 0b19 	vmov	d9, r0, r1
 800d99e:	4649      	mov	r1, r9
 800d9a0:	4640      	mov	r0, r8
 800d9a2:	f7f3 f8e1 	bl	8000b68 <__aeabi_d2iz>
 800d9a6:	4606      	mov	r6, r0
 800d9a8:	f7f2 fdc4 	bl	8000534 <__aeabi_i2d>
 800d9ac:	3630      	adds	r6, #48	; 0x30
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	4649      	mov	r1, r9
 800d9b6:	f7f2 fc6f 	bl	8000298 <__aeabi_dsub>
 800d9ba:	f805 6b01 	strb.w	r6, [r5], #1
 800d9be:	9b02      	ldr	r3, [sp, #8]
 800d9c0:	429d      	cmp	r5, r3
 800d9c2:	4680      	mov	r8, r0
 800d9c4:	4689      	mov	r9, r1
 800d9c6:	f04f 0200 	mov.w	r2, #0
 800d9ca:	d124      	bne.n	800da16 <_dtoa_r+0x62e>
 800d9cc:	4b1b      	ldr	r3, [pc, #108]	; (800da3c <_dtoa_r+0x654>)
 800d9ce:	ec51 0b19 	vmov	r0, r1, d9
 800d9d2:	f7f2 fc63 	bl	800029c <__adddf3>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	460b      	mov	r3, r1
 800d9da:	4640      	mov	r0, r8
 800d9dc:	4649      	mov	r1, r9
 800d9de:	f7f3 f8a3 	bl	8000b28 <__aeabi_dcmpgt>
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d173      	bne.n	800dace <_dtoa_r+0x6e6>
 800d9e6:	ec53 2b19 	vmov	r2, r3, d9
 800d9ea:	4914      	ldr	r1, [pc, #80]	; (800da3c <_dtoa_r+0x654>)
 800d9ec:	2000      	movs	r0, #0
 800d9ee:	f7f2 fc53 	bl	8000298 <__aeabi_dsub>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	4640      	mov	r0, r8
 800d9f8:	4649      	mov	r1, r9
 800d9fa:	f7f3 f877 	bl	8000aec <__aeabi_dcmplt>
 800d9fe:	2800      	cmp	r0, #0
 800da00:	f43f af2f 	beq.w	800d862 <_dtoa_r+0x47a>
 800da04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800da06:	1e6b      	subs	r3, r5, #1
 800da08:	930f      	str	r3, [sp, #60]	; 0x3c
 800da0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da0e:	2b30      	cmp	r3, #48	; 0x30
 800da10:	d0f8      	beq.n	800da04 <_dtoa_r+0x61c>
 800da12:	46bb      	mov	fp, r7
 800da14:	e04a      	b.n	800daac <_dtoa_r+0x6c4>
 800da16:	4b06      	ldr	r3, [pc, #24]	; (800da30 <_dtoa_r+0x648>)
 800da18:	f7f2 fdf6 	bl	8000608 <__aeabi_dmul>
 800da1c:	4680      	mov	r8, r0
 800da1e:	4689      	mov	r9, r1
 800da20:	e7bd      	b.n	800d99e <_dtoa_r+0x5b6>
 800da22:	bf00      	nop
 800da24:	0800f5a0 	.word	0x0800f5a0
 800da28:	0800f578 	.word	0x0800f578
 800da2c:	3ff00000 	.word	0x3ff00000
 800da30:	40240000 	.word	0x40240000
 800da34:	401c0000 	.word	0x401c0000
 800da38:	40140000 	.word	0x40140000
 800da3c:	3fe00000 	.word	0x3fe00000
 800da40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800da44:	9d00      	ldr	r5, [sp, #0]
 800da46:	4642      	mov	r2, r8
 800da48:	464b      	mov	r3, r9
 800da4a:	4630      	mov	r0, r6
 800da4c:	4639      	mov	r1, r7
 800da4e:	f7f2 ff05 	bl	800085c <__aeabi_ddiv>
 800da52:	f7f3 f889 	bl	8000b68 <__aeabi_d2iz>
 800da56:	9001      	str	r0, [sp, #4]
 800da58:	f7f2 fd6c 	bl	8000534 <__aeabi_i2d>
 800da5c:	4642      	mov	r2, r8
 800da5e:	464b      	mov	r3, r9
 800da60:	f7f2 fdd2 	bl	8000608 <__aeabi_dmul>
 800da64:	4602      	mov	r2, r0
 800da66:	460b      	mov	r3, r1
 800da68:	4630      	mov	r0, r6
 800da6a:	4639      	mov	r1, r7
 800da6c:	f7f2 fc14 	bl	8000298 <__aeabi_dsub>
 800da70:	9e01      	ldr	r6, [sp, #4]
 800da72:	9f04      	ldr	r7, [sp, #16]
 800da74:	3630      	adds	r6, #48	; 0x30
 800da76:	f805 6b01 	strb.w	r6, [r5], #1
 800da7a:	9e00      	ldr	r6, [sp, #0]
 800da7c:	1bae      	subs	r6, r5, r6
 800da7e:	42b7      	cmp	r7, r6
 800da80:	4602      	mov	r2, r0
 800da82:	460b      	mov	r3, r1
 800da84:	d134      	bne.n	800daf0 <_dtoa_r+0x708>
 800da86:	f7f2 fc09 	bl	800029c <__adddf3>
 800da8a:	4642      	mov	r2, r8
 800da8c:	464b      	mov	r3, r9
 800da8e:	4606      	mov	r6, r0
 800da90:	460f      	mov	r7, r1
 800da92:	f7f3 f849 	bl	8000b28 <__aeabi_dcmpgt>
 800da96:	b9c8      	cbnz	r0, 800dacc <_dtoa_r+0x6e4>
 800da98:	4642      	mov	r2, r8
 800da9a:	464b      	mov	r3, r9
 800da9c:	4630      	mov	r0, r6
 800da9e:	4639      	mov	r1, r7
 800daa0:	f7f3 f81a 	bl	8000ad8 <__aeabi_dcmpeq>
 800daa4:	b110      	cbz	r0, 800daac <_dtoa_r+0x6c4>
 800daa6:	9b01      	ldr	r3, [sp, #4]
 800daa8:	07db      	lsls	r3, r3, #31
 800daaa:	d40f      	bmi.n	800dacc <_dtoa_r+0x6e4>
 800daac:	4651      	mov	r1, sl
 800daae:	4620      	mov	r0, r4
 800dab0:	f000 fbcc 	bl	800e24c <_Bfree>
 800dab4:	2300      	movs	r3, #0
 800dab6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dab8:	702b      	strb	r3, [r5, #0]
 800daba:	f10b 0301 	add.w	r3, fp, #1
 800dabe:	6013      	str	r3, [r2, #0]
 800dac0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	f43f ace2 	beq.w	800d48c <_dtoa_r+0xa4>
 800dac8:	601d      	str	r5, [r3, #0]
 800daca:	e4df      	b.n	800d48c <_dtoa_r+0xa4>
 800dacc:	465f      	mov	r7, fp
 800dace:	462b      	mov	r3, r5
 800dad0:	461d      	mov	r5, r3
 800dad2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dad6:	2a39      	cmp	r2, #57	; 0x39
 800dad8:	d106      	bne.n	800dae8 <_dtoa_r+0x700>
 800dada:	9a00      	ldr	r2, [sp, #0]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d1f7      	bne.n	800dad0 <_dtoa_r+0x6e8>
 800dae0:	9900      	ldr	r1, [sp, #0]
 800dae2:	2230      	movs	r2, #48	; 0x30
 800dae4:	3701      	adds	r7, #1
 800dae6:	700a      	strb	r2, [r1, #0]
 800dae8:	781a      	ldrb	r2, [r3, #0]
 800daea:	3201      	adds	r2, #1
 800daec:	701a      	strb	r2, [r3, #0]
 800daee:	e790      	b.n	800da12 <_dtoa_r+0x62a>
 800daf0:	4ba3      	ldr	r3, [pc, #652]	; (800dd80 <_dtoa_r+0x998>)
 800daf2:	2200      	movs	r2, #0
 800daf4:	f7f2 fd88 	bl	8000608 <__aeabi_dmul>
 800daf8:	2200      	movs	r2, #0
 800dafa:	2300      	movs	r3, #0
 800dafc:	4606      	mov	r6, r0
 800dafe:	460f      	mov	r7, r1
 800db00:	f7f2 ffea 	bl	8000ad8 <__aeabi_dcmpeq>
 800db04:	2800      	cmp	r0, #0
 800db06:	d09e      	beq.n	800da46 <_dtoa_r+0x65e>
 800db08:	e7d0      	b.n	800daac <_dtoa_r+0x6c4>
 800db0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db0c:	2a00      	cmp	r2, #0
 800db0e:	f000 80ca 	beq.w	800dca6 <_dtoa_r+0x8be>
 800db12:	9a07      	ldr	r2, [sp, #28]
 800db14:	2a01      	cmp	r2, #1
 800db16:	f300 80ad 	bgt.w	800dc74 <_dtoa_r+0x88c>
 800db1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db1c:	2a00      	cmp	r2, #0
 800db1e:	f000 80a5 	beq.w	800dc6c <_dtoa_r+0x884>
 800db22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800db26:	9e08      	ldr	r6, [sp, #32]
 800db28:	9d05      	ldr	r5, [sp, #20]
 800db2a:	9a05      	ldr	r2, [sp, #20]
 800db2c:	441a      	add	r2, r3
 800db2e:	9205      	str	r2, [sp, #20]
 800db30:	9a06      	ldr	r2, [sp, #24]
 800db32:	2101      	movs	r1, #1
 800db34:	441a      	add	r2, r3
 800db36:	4620      	mov	r0, r4
 800db38:	9206      	str	r2, [sp, #24]
 800db3a:	f000 fc3d 	bl	800e3b8 <__i2b>
 800db3e:	4607      	mov	r7, r0
 800db40:	b165      	cbz	r5, 800db5c <_dtoa_r+0x774>
 800db42:	9b06      	ldr	r3, [sp, #24]
 800db44:	2b00      	cmp	r3, #0
 800db46:	dd09      	ble.n	800db5c <_dtoa_r+0x774>
 800db48:	42ab      	cmp	r3, r5
 800db4a:	9a05      	ldr	r2, [sp, #20]
 800db4c:	bfa8      	it	ge
 800db4e:	462b      	movge	r3, r5
 800db50:	1ad2      	subs	r2, r2, r3
 800db52:	9205      	str	r2, [sp, #20]
 800db54:	9a06      	ldr	r2, [sp, #24]
 800db56:	1aed      	subs	r5, r5, r3
 800db58:	1ad3      	subs	r3, r2, r3
 800db5a:	9306      	str	r3, [sp, #24]
 800db5c:	9b08      	ldr	r3, [sp, #32]
 800db5e:	b1f3      	cbz	r3, 800db9e <_dtoa_r+0x7b6>
 800db60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db62:	2b00      	cmp	r3, #0
 800db64:	f000 80a3 	beq.w	800dcae <_dtoa_r+0x8c6>
 800db68:	2e00      	cmp	r6, #0
 800db6a:	dd10      	ble.n	800db8e <_dtoa_r+0x7a6>
 800db6c:	4639      	mov	r1, r7
 800db6e:	4632      	mov	r2, r6
 800db70:	4620      	mov	r0, r4
 800db72:	f000 fce1 	bl	800e538 <__pow5mult>
 800db76:	4652      	mov	r2, sl
 800db78:	4601      	mov	r1, r0
 800db7a:	4607      	mov	r7, r0
 800db7c:	4620      	mov	r0, r4
 800db7e:	f000 fc31 	bl	800e3e4 <__multiply>
 800db82:	4651      	mov	r1, sl
 800db84:	4680      	mov	r8, r0
 800db86:	4620      	mov	r0, r4
 800db88:	f000 fb60 	bl	800e24c <_Bfree>
 800db8c:	46c2      	mov	sl, r8
 800db8e:	9b08      	ldr	r3, [sp, #32]
 800db90:	1b9a      	subs	r2, r3, r6
 800db92:	d004      	beq.n	800db9e <_dtoa_r+0x7b6>
 800db94:	4651      	mov	r1, sl
 800db96:	4620      	mov	r0, r4
 800db98:	f000 fcce 	bl	800e538 <__pow5mult>
 800db9c:	4682      	mov	sl, r0
 800db9e:	2101      	movs	r1, #1
 800dba0:	4620      	mov	r0, r4
 800dba2:	f000 fc09 	bl	800e3b8 <__i2b>
 800dba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	4606      	mov	r6, r0
 800dbac:	f340 8081 	ble.w	800dcb2 <_dtoa_r+0x8ca>
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	4601      	mov	r1, r0
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	f000 fcbf 	bl	800e538 <__pow5mult>
 800dbba:	9b07      	ldr	r3, [sp, #28]
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	dd7a      	ble.n	800dcb8 <_dtoa_r+0x8d0>
 800dbc2:	f04f 0800 	mov.w	r8, #0
 800dbc6:	6933      	ldr	r3, [r6, #16]
 800dbc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dbcc:	6918      	ldr	r0, [r3, #16]
 800dbce:	f000 fba5 	bl	800e31c <__hi0bits>
 800dbd2:	f1c0 0020 	rsb	r0, r0, #32
 800dbd6:	9b06      	ldr	r3, [sp, #24]
 800dbd8:	4418      	add	r0, r3
 800dbda:	f010 001f 	ands.w	r0, r0, #31
 800dbde:	f000 8094 	beq.w	800dd0a <_dtoa_r+0x922>
 800dbe2:	f1c0 0320 	rsb	r3, r0, #32
 800dbe6:	2b04      	cmp	r3, #4
 800dbe8:	f340 8085 	ble.w	800dcf6 <_dtoa_r+0x90e>
 800dbec:	9b05      	ldr	r3, [sp, #20]
 800dbee:	f1c0 001c 	rsb	r0, r0, #28
 800dbf2:	4403      	add	r3, r0
 800dbf4:	9305      	str	r3, [sp, #20]
 800dbf6:	9b06      	ldr	r3, [sp, #24]
 800dbf8:	4403      	add	r3, r0
 800dbfa:	4405      	add	r5, r0
 800dbfc:	9306      	str	r3, [sp, #24]
 800dbfe:	9b05      	ldr	r3, [sp, #20]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	dd05      	ble.n	800dc10 <_dtoa_r+0x828>
 800dc04:	4651      	mov	r1, sl
 800dc06:	461a      	mov	r2, r3
 800dc08:	4620      	mov	r0, r4
 800dc0a:	f000 fcef 	bl	800e5ec <__lshift>
 800dc0e:	4682      	mov	sl, r0
 800dc10:	9b06      	ldr	r3, [sp, #24]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	dd05      	ble.n	800dc22 <_dtoa_r+0x83a>
 800dc16:	4631      	mov	r1, r6
 800dc18:	461a      	mov	r2, r3
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f000 fce6 	bl	800e5ec <__lshift>
 800dc20:	4606      	mov	r6, r0
 800dc22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d072      	beq.n	800dd0e <_dtoa_r+0x926>
 800dc28:	4631      	mov	r1, r6
 800dc2a:	4650      	mov	r0, sl
 800dc2c:	f000 fd4a 	bl	800e6c4 <__mcmp>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	da6c      	bge.n	800dd0e <_dtoa_r+0x926>
 800dc34:	2300      	movs	r3, #0
 800dc36:	4651      	mov	r1, sl
 800dc38:	220a      	movs	r2, #10
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f000 fb28 	bl	800e290 <__multadd>
 800dc40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc42:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dc46:	4682      	mov	sl, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f000 81b0 	beq.w	800dfae <_dtoa_r+0xbc6>
 800dc4e:	2300      	movs	r3, #0
 800dc50:	4639      	mov	r1, r7
 800dc52:	220a      	movs	r2, #10
 800dc54:	4620      	mov	r0, r4
 800dc56:	f000 fb1b 	bl	800e290 <__multadd>
 800dc5a:	9b01      	ldr	r3, [sp, #4]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	4607      	mov	r7, r0
 800dc60:	f300 8096 	bgt.w	800dd90 <_dtoa_r+0x9a8>
 800dc64:	9b07      	ldr	r3, [sp, #28]
 800dc66:	2b02      	cmp	r3, #2
 800dc68:	dc59      	bgt.n	800dd1e <_dtoa_r+0x936>
 800dc6a:	e091      	b.n	800dd90 <_dtoa_r+0x9a8>
 800dc6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dc72:	e758      	b.n	800db26 <_dtoa_r+0x73e>
 800dc74:	9b04      	ldr	r3, [sp, #16]
 800dc76:	1e5e      	subs	r6, r3, #1
 800dc78:	9b08      	ldr	r3, [sp, #32]
 800dc7a:	42b3      	cmp	r3, r6
 800dc7c:	bfbf      	itttt	lt
 800dc7e:	9b08      	ldrlt	r3, [sp, #32]
 800dc80:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800dc82:	9608      	strlt	r6, [sp, #32]
 800dc84:	1af3      	sublt	r3, r6, r3
 800dc86:	bfb4      	ite	lt
 800dc88:	18d2      	addlt	r2, r2, r3
 800dc8a:	1b9e      	subge	r6, r3, r6
 800dc8c:	9b04      	ldr	r3, [sp, #16]
 800dc8e:	bfbc      	itt	lt
 800dc90:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800dc92:	2600      	movlt	r6, #0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	bfb7      	itett	lt
 800dc98:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800dc9c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800dca0:	1a9d      	sublt	r5, r3, r2
 800dca2:	2300      	movlt	r3, #0
 800dca4:	e741      	b.n	800db2a <_dtoa_r+0x742>
 800dca6:	9e08      	ldr	r6, [sp, #32]
 800dca8:	9d05      	ldr	r5, [sp, #20]
 800dcaa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dcac:	e748      	b.n	800db40 <_dtoa_r+0x758>
 800dcae:	9a08      	ldr	r2, [sp, #32]
 800dcb0:	e770      	b.n	800db94 <_dtoa_r+0x7ac>
 800dcb2:	9b07      	ldr	r3, [sp, #28]
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	dc19      	bgt.n	800dcec <_dtoa_r+0x904>
 800dcb8:	9b02      	ldr	r3, [sp, #8]
 800dcba:	b9bb      	cbnz	r3, 800dcec <_dtoa_r+0x904>
 800dcbc:	9b03      	ldr	r3, [sp, #12]
 800dcbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcc2:	b99b      	cbnz	r3, 800dcec <_dtoa_r+0x904>
 800dcc4:	9b03      	ldr	r3, [sp, #12]
 800dcc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dcca:	0d1b      	lsrs	r3, r3, #20
 800dccc:	051b      	lsls	r3, r3, #20
 800dcce:	b183      	cbz	r3, 800dcf2 <_dtoa_r+0x90a>
 800dcd0:	9b05      	ldr	r3, [sp, #20]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	9305      	str	r3, [sp, #20]
 800dcd6:	9b06      	ldr	r3, [sp, #24]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	9306      	str	r3, [sp, #24]
 800dcdc:	f04f 0801 	mov.w	r8, #1
 800dce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	f47f af6f 	bne.w	800dbc6 <_dtoa_r+0x7de>
 800dce8:	2001      	movs	r0, #1
 800dcea:	e774      	b.n	800dbd6 <_dtoa_r+0x7ee>
 800dcec:	f04f 0800 	mov.w	r8, #0
 800dcf0:	e7f6      	b.n	800dce0 <_dtoa_r+0x8f8>
 800dcf2:	4698      	mov	r8, r3
 800dcf4:	e7f4      	b.n	800dce0 <_dtoa_r+0x8f8>
 800dcf6:	d082      	beq.n	800dbfe <_dtoa_r+0x816>
 800dcf8:	9a05      	ldr	r2, [sp, #20]
 800dcfa:	331c      	adds	r3, #28
 800dcfc:	441a      	add	r2, r3
 800dcfe:	9205      	str	r2, [sp, #20]
 800dd00:	9a06      	ldr	r2, [sp, #24]
 800dd02:	441a      	add	r2, r3
 800dd04:	441d      	add	r5, r3
 800dd06:	9206      	str	r2, [sp, #24]
 800dd08:	e779      	b.n	800dbfe <_dtoa_r+0x816>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	e7f4      	b.n	800dcf8 <_dtoa_r+0x910>
 800dd0e:	9b04      	ldr	r3, [sp, #16]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	dc37      	bgt.n	800dd84 <_dtoa_r+0x99c>
 800dd14:	9b07      	ldr	r3, [sp, #28]
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	dd34      	ble.n	800dd84 <_dtoa_r+0x99c>
 800dd1a:	9b04      	ldr	r3, [sp, #16]
 800dd1c:	9301      	str	r3, [sp, #4]
 800dd1e:	9b01      	ldr	r3, [sp, #4]
 800dd20:	b963      	cbnz	r3, 800dd3c <_dtoa_r+0x954>
 800dd22:	4631      	mov	r1, r6
 800dd24:	2205      	movs	r2, #5
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 fab2 	bl	800e290 <__multadd>
 800dd2c:	4601      	mov	r1, r0
 800dd2e:	4606      	mov	r6, r0
 800dd30:	4650      	mov	r0, sl
 800dd32:	f000 fcc7 	bl	800e6c4 <__mcmp>
 800dd36:	2800      	cmp	r0, #0
 800dd38:	f73f adbb 	bgt.w	800d8b2 <_dtoa_r+0x4ca>
 800dd3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd3e:	9d00      	ldr	r5, [sp, #0]
 800dd40:	ea6f 0b03 	mvn.w	fp, r3
 800dd44:	f04f 0800 	mov.w	r8, #0
 800dd48:	4631      	mov	r1, r6
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f000 fa7e 	bl	800e24c <_Bfree>
 800dd50:	2f00      	cmp	r7, #0
 800dd52:	f43f aeab 	beq.w	800daac <_dtoa_r+0x6c4>
 800dd56:	f1b8 0f00 	cmp.w	r8, #0
 800dd5a:	d005      	beq.n	800dd68 <_dtoa_r+0x980>
 800dd5c:	45b8      	cmp	r8, r7
 800dd5e:	d003      	beq.n	800dd68 <_dtoa_r+0x980>
 800dd60:	4641      	mov	r1, r8
 800dd62:	4620      	mov	r0, r4
 800dd64:	f000 fa72 	bl	800e24c <_Bfree>
 800dd68:	4639      	mov	r1, r7
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f000 fa6e 	bl	800e24c <_Bfree>
 800dd70:	e69c      	b.n	800daac <_dtoa_r+0x6c4>
 800dd72:	2600      	movs	r6, #0
 800dd74:	4637      	mov	r7, r6
 800dd76:	e7e1      	b.n	800dd3c <_dtoa_r+0x954>
 800dd78:	46bb      	mov	fp, r7
 800dd7a:	4637      	mov	r7, r6
 800dd7c:	e599      	b.n	800d8b2 <_dtoa_r+0x4ca>
 800dd7e:	bf00      	nop
 800dd80:	40240000 	.word	0x40240000
 800dd84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	f000 80c8 	beq.w	800df1c <_dtoa_r+0xb34>
 800dd8c:	9b04      	ldr	r3, [sp, #16]
 800dd8e:	9301      	str	r3, [sp, #4]
 800dd90:	2d00      	cmp	r5, #0
 800dd92:	dd05      	ble.n	800dda0 <_dtoa_r+0x9b8>
 800dd94:	4639      	mov	r1, r7
 800dd96:	462a      	mov	r2, r5
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f000 fc27 	bl	800e5ec <__lshift>
 800dd9e:	4607      	mov	r7, r0
 800dda0:	f1b8 0f00 	cmp.w	r8, #0
 800dda4:	d05b      	beq.n	800de5e <_dtoa_r+0xa76>
 800dda6:	6879      	ldr	r1, [r7, #4]
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f000 fa0f 	bl	800e1cc <_Balloc>
 800ddae:	4605      	mov	r5, r0
 800ddb0:	b928      	cbnz	r0, 800ddbe <_dtoa_r+0x9d6>
 800ddb2:	4b83      	ldr	r3, [pc, #524]	; (800dfc0 <_dtoa_r+0xbd8>)
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ddba:	f7ff bb2e 	b.w	800d41a <_dtoa_r+0x32>
 800ddbe:	693a      	ldr	r2, [r7, #16]
 800ddc0:	3202      	adds	r2, #2
 800ddc2:	0092      	lsls	r2, r2, #2
 800ddc4:	f107 010c 	add.w	r1, r7, #12
 800ddc8:	300c      	adds	r0, #12
 800ddca:	f000 ffab 	bl	800ed24 <memcpy>
 800ddce:	2201      	movs	r2, #1
 800ddd0:	4629      	mov	r1, r5
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f000 fc0a 	bl	800e5ec <__lshift>
 800ddd8:	9b00      	ldr	r3, [sp, #0]
 800ddda:	3301      	adds	r3, #1
 800dddc:	9304      	str	r3, [sp, #16]
 800ddde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dde2:	4413      	add	r3, r2
 800dde4:	9308      	str	r3, [sp, #32]
 800dde6:	9b02      	ldr	r3, [sp, #8]
 800dde8:	f003 0301 	and.w	r3, r3, #1
 800ddec:	46b8      	mov	r8, r7
 800ddee:	9306      	str	r3, [sp, #24]
 800ddf0:	4607      	mov	r7, r0
 800ddf2:	9b04      	ldr	r3, [sp, #16]
 800ddf4:	4631      	mov	r1, r6
 800ddf6:	3b01      	subs	r3, #1
 800ddf8:	4650      	mov	r0, sl
 800ddfa:	9301      	str	r3, [sp, #4]
 800ddfc:	f7ff fa69 	bl	800d2d2 <quorem>
 800de00:	4641      	mov	r1, r8
 800de02:	9002      	str	r0, [sp, #8]
 800de04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800de08:	4650      	mov	r0, sl
 800de0a:	f000 fc5b 	bl	800e6c4 <__mcmp>
 800de0e:	463a      	mov	r2, r7
 800de10:	9005      	str	r0, [sp, #20]
 800de12:	4631      	mov	r1, r6
 800de14:	4620      	mov	r0, r4
 800de16:	f000 fc71 	bl	800e6fc <__mdiff>
 800de1a:	68c2      	ldr	r2, [r0, #12]
 800de1c:	4605      	mov	r5, r0
 800de1e:	bb02      	cbnz	r2, 800de62 <_dtoa_r+0xa7a>
 800de20:	4601      	mov	r1, r0
 800de22:	4650      	mov	r0, sl
 800de24:	f000 fc4e 	bl	800e6c4 <__mcmp>
 800de28:	4602      	mov	r2, r0
 800de2a:	4629      	mov	r1, r5
 800de2c:	4620      	mov	r0, r4
 800de2e:	9209      	str	r2, [sp, #36]	; 0x24
 800de30:	f000 fa0c 	bl	800e24c <_Bfree>
 800de34:	9b07      	ldr	r3, [sp, #28]
 800de36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de38:	9d04      	ldr	r5, [sp, #16]
 800de3a:	ea43 0102 	orr.w	r1, r3, r2
 800de3e:	9b06      	ldr	r3, [sp, #24]
 800de40:	4319      	orrs	r1, r3
 800de42:	d110      	bne.n	800de66 <_dtoa_r+0xa7e>
 800de44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800de48:	d029      	beq.n	800de9e <_dtoa_r+0xab6>
 800de4a:	9b05      	ldr	r3, [sp, #20]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	dd02      	ble.n	800de56 <_dtoa_r+0xa6e>
 800de50:	9b02      	ldr	r3, [sp, #8]
 800de52:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800de56:	9b01      	ldr	r3, [sp, #4]
 800de58:	f883 9000 	strb.w	r9, [r3]
 800de5c:	e774      	b.n	800dd48 <_dtoa_r+0x960>
 800de5e:	4638      	mov	r0, r7
 800de60:	e7ba      	b.n	800ddd8 <_dtoa_r+0x9f0>
 800de62:	2201      	movs	r2, #1
 800de64:	e7e1      	b.n	800de2a <_dtoa_r+0xa42>
 800de66:	9b05      	ldr	r3, [sp, #20]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	db04      	blt.n	800de76 <_dtoa_r+0xa8e>
 800de6c:	9907      	ldr	r1, [sp, #28]
 800de6e:	430b      	orrs	r3, r1
 800de70:	9906      	ldr	r1, [sp, #24]
 800de72:	430b      	orrs	r3, r1
 800de74:	d120      	bne.n	800deb8 <_dtoa_r+0xad0>
 800de76:	2a00      	cmp	r2, #0
 800de78:	dded      	ble.n	800de56 <_dtoa_r+0xa6e>
 800de7a:	4651      	mov	r1, sl
 800de7c:	2201      	movs	r2, #1
 800de7e:	4620      	mov	r0, r4
 800de80:	f000 fbb4 	bl	800e5ec <__lshift>
 800de84:	4631      	mov	r1, r6
 800de86:	4682      	mov	sl, r0
 800de88:	f000 fc1c 	bl	800e6c4 <__mcmp>
 800de8c:	2800      	cmp	r0, #0
 800de8e:	dc03      	bgt.n	800de98 <_dtoa_r+0xab0>
 800de90:	d1e1      	bne.n	800de56 <_dtoa_r+0xa6e>
 800de92:	f019 0f01 	tst.w	r9, #1
 800de96:	d0de      	beq.n	800de56 <_dtoa_r+0xa6e>
 800de98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800de9c:	d1d8      	bne.n	800de50 <_dtoa_r+0xa68>
 800de9e:	9a01      	ldr	r2, [sp, #4]
 800dea0:	2339      	movs	r3, #57	; 0x39
 800dea2:	7013      	strb	r3, [r2, #0]
 800dea4:	462b      	mov	r3, r5
 800dea6:	461d      	mov	r5, r3
 800dea8:	3b01      	subs	r3, #1
 800deaa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800deae:	2a39      	cmp	r2, #57	; 0x39
 800deb0:	d06c      	beq.n	800df8c <_dtoa_r+0xba4>
 800deb2:	3201      	adds	r2, #1
 800deb4:	701a      	strb	r2, [r3, #0]
 800deb6:	e747      	b.n	800dd48 <_dtoa_r+0x960>
 800deb8:	2a00      	cmp	r2, #0
 800deba:	dd07      	ble.n	800decc <_dtoa_r+0xae4>
 800debc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dec0:	d0ed      	beq.n	800de9e <_dtoa_r+0xab6>
 800dec2:	9a01      	ldr	r2, [sp, #4]
 800dec4:	f109 0301 	add.w	r3, r9, #1
 800dec8:	7013      	strb	r3, [r2, #0]
 800deca:	e73d      	b.n	800dd48 <_dtoa_r+0x960>
 800decc:	9b04      	ldr	r3, [sp, #16]
 800dece:	9a08      	ldr	r2, [sp, #32]
 800ded0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d043      	beq.n	800df60 <_dtoa_r+0xb78>
 800ded8:	4651      	mov	r1, sl
 800deda:	2300      	movs	r3, #0
 800dedc:	220a      	movs	r2, #10
 800dede:	4620      	mov	r0, r4
 800dee0:	f000 f9d6 	bl	800e290 <__multadd>
 800dee4:	45b8      	cmp	r8, r7
 800dee6:	4682      	mov	sl, r0
 800dee8:	f04f 0300 	mov.w	r3, #0
 800deec:	f04f 020a 	mov.w	r2, #10
 800def0:	4641      	mov	r1, r8
 800def2:	4620      	mov	r0, r4
 800def4:	d107      	bne.n	800df06 <_dtoa_r+0xb1e>
 800def6:	f000 f9cb 	bl	800e290 <__multadd>
 800defa:	4680      	mov	r8, r0
 800defc:	4607      	mov	r7, r0
 800defe:	9b04      	ldr	r3, [sp, #16]
 800df00:	3301      	adds	r3, #1
 800df02:	9304      	str	r3, [sp, #16]
 800df04:	e775      	b.n	800ddf2 <_dtoa_r+0xa0a>
 800df06:	f000 f9c3 	bl	800e290 <__multadd>
 800df0a:	4639      	mov	r1, r7
 800df0c:	4680      	mov	r8, r0
 800df0e:	2300      	movs	r3, #0
 800df10:	220a      	movs	r2, #10
 800df12:	4620      	mov	r0, r4
 800df14:	f000 f9bc 	bl	800e290 <__multadd>
 800df18:	4607      	mov	r7, r0
 800df1a:	e7f0      	b.n	800defe <_dtoa_r+0xb16>
 800df1c:	9b04      	ldr	r3, [sp, #16]
 800df1e:	9301      	str	r3, [sp, #4]
 800df20:	9d00      	ldr	r5, [sp, #0]
 800df22:	4631      	mov	r1, r6
 800df24:	4650      	mov	r0, sl
 800df26:	f7ff f9d4 	bl	800d2d2 <quorem>
 800df2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800df2e:	9b00      	ldr	r3, [sp, #0]
 800df30:	f805 9b01 	strb.w	r9, [r5], #1
 800df34:	1aea      	subs	r2, r5, r3
 800df36:	9b01      	ldr	r3, [sp, #4]
 800df38:	4293      	cmp	r3, r2
 800df3a:	dd07      	ble.n	800df4c <_dtoa_r+0xb64>
 800df3c:	4651      	mov	r1, sl
 800df3e:	2300      	movs	r3, #0
 800df40:	220a      	movs	r2, #10
 800df42:	4620      	mov	r0, r4
 800df44:	f000 f9a4 	bl	800e290 <__multadd>
 800df48:	4682      	mov	sl, r0
 800df4a:	e7ea      	b.n	800df22 <_dtoa_r+0xb3a>
 800df4c:	9b01      	ldr	r3, [sp, #4]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	bfc8      	it	gt
 800df52:	461d      	movgt	r5, r3
 800df54:	9b00      	ldr	r3, [sp, #0]
 800df56:	bfd8      	it	le
 800df58:	2501      	movle	r5, #1
 800df5a:	441d      	add	r5, r3
 800df5c:	f04f 0800 	mov.w	r8, #0
 800df60:	4651      	mov	r1, sl
 800df62:	2201      	movs	r2, #1
 800df64:	4620      	mov	r0, r4
 800df66:	f000 fb41 	bl	800e5ec <__lshift>
 800df6a:	4631      	mov	r1, r6
 800df6c:	4682      	mov	sl, r0
 800df6e:	f000 fba9 	bl	800e6c4 <__mcmp>
 800df72:	2800      	cmp	r0, #0
 800df74:	dc96      	bgt.n	800dea4 <_dtoa_r+0xabc>
 800df76:	d102      	bne.n	800df7e <_dtoa_r+0xb96>
 800df78:	f019 0f01 	tst.w	r9, #1
 800df7c:	d192      	bne.n	800dea4 <_dtoa_r+0xabc>
 800df7e:	462b      	mov	r3, r5
 800df80:	461d      	mov	r5, r3
 800df82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df86:	2a30      	cmp	r2, #48	; 0x30
 800df88:	d0fa      	beq.n	800df80 <_dtoa_r+0xb98>
 800df8a:	e6dd      	b.n	800dd48 <_dtoa_r+0x960>
 800df8c:	9a00      	ldr	r2, [sp, #0]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d189      	bne.n	800dea6 <_dtoa_r+0xabe>
 800df92:	f10b 0b01 	add.w	fp, fp, #1
 800df96:	2331      	movs	r3, #49	; 0x31
 800df98:	e796      	b.n	800dec8 <_dtoa_r+0xae0>
 800df9a:	4b0a      	ldr	r3, [pc, #40]	; (800dfc4 <_dtoa_r+0xbdc>)
 800df9c:	f7ff ba99 	b.w	800d4d2 <_dtoa_r+0xea>
 800dfa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	f47f aa6d 	bne.w	800d482 <_dtoa_r+0x9a>
 800dfa8:	4b07      	ldr	r3, [pc, #28]	; (800dfc8 <_dtoa_r+0xbe0>)
 800dfaa:	f7ff ba92 	b.w	800d4d2 <_dtoa_r+0xea>
 800dfae:	9b01      	ldr	r3, [sp, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	dcb5      	bgt.n	800df20 <_dtoa_r+0xb38>
 800dfb4:	9b07      	ldr	r3, [sp, #28]
 800dfb6:	2b02      	cmp	r3, #2
 800dfb8:	f73f aeb1 	bgt.w	800dd1e <_dtoa_r+0x936>
 800dfbc:	e7b0      	b.n	800df20 <_dtoa_r+0xb38>
 800dfbe:	bf00      	nop
 800dfc0:	0800f508 	.word	0x0800f508
 800dfc4:	0800f468 	.word	0x0800f468
 800dfc8:	0800f48c 	.word	0x0800f48c

0800dfcc <_free_r>:
 800dfcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfce:	2900      	cmp	r1, #0
 800dfd0:	d044      	beq.n	800e05c <_free_r+0x90>
 800dfd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfd6:	9001      	str	r0, [sp, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	f1a1 0404 	sub.w	r4, r1, #4
 800dfde:	bfb8      	it	lt
 800dfe0:	18e4      	addlt	r4, r4, r3
 800dfe2:	f000 f8e7 	bl	800e1b4 <__malloc_lock>
 800dfe6:	4a1e      	ldr	r2, [pc, #120]	; (800e060 <_free_r+0x94>)
 800dfe8:	9801      	ldr	r0, [sp, #4]
 800dfea:	6813      	ldr	r3, [r2, #0]
 800dfec:	b933      	cbnz	r3, 800dffc <_free_r+0x30>
 800dfee:	6063      	str	r3, [r4, #4]
 800dff0:	6014      	str	r4, [r2, #0]
 800dff2:	b003      	add	sp, #12
 800dff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dff8:	f000 b8e2 	b.w	800e1c0 <__malloc_unlock>
 800dffc:	42a3      	cmp	r3, r4
 800dffe:	d908      	bls.n	800e012 <_free_r+0x46>
 800e000:	6825      	ldr	r5, [r4, #0]
 800e002:	1961      	adds	r1, r4, r5
 800e004:	428b      	cmp	r3, r1
 800e006:	bf01      	itttt	eq
 800e008:	6819      	ldreq	r1, [r3, #0]
 800e00a:	685b      	ldreq	r3, [r3, #4]
 800e00c:	1949      	addeq	r1, r1, r5
 800e00e:	6021      	streq	r1, [r4, #0]
 800e010:	e7ed      	b.n	800dfee <_free_r+0x22>
 800e012:	461a      	mov	r2, r3
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	b10b      	cbz	r3, 800e01c <_free_r+0x50>
 800e018:	42a3      	cmp	r3, r4
 800e01a:	d9fa      	bls.n	800e012 <_free_r+0x46>
 800e01c:	6811      	ldr	r1, [r2, #0]
 800e01e:	1855      	adds	r5, r2, r1
 800e020:	42a5      	cmp	r5, r4
 800e022:	d10b      	bne.n	800e03c <_free_r+0x70>
 800e024:	6824      	ldr	r4, [r4, #0]
 800e026:	4421      	add	r1, r4
 800e028:	1854      	adds	r4, r2, r1
 800e02a:	42a3      	cmp	r3, r4
 800e02c:	6011      	str	r1, [r2, #0]
 800e02e:	d1e0      	bne.n	800dff2 <_free_r+0x26>
 800e030:	681c      	ldr	r4, [r3, #0]
 800e032:	685b      	ldr	r3, [r3, #4]
 800e034:	6053      	str	r3, [r2, #4]
 800e036:	440c      	add	r4, r1
 800e038:	6014      	str	r4, [r2, #0]
 800e03a:	e7da      	b.n	800dff2 <_free_r+0x26>
 800e03c:	d902      	bls.n	800e044 <_free_r+0x78>
 800e03e:	230c      	movs	r3, #12
 800e040:	6003      	str	r3, [r0, #0]
 800e042:	e7d6      	b.n	800dff2 <_free_r+0x26>
 800e044:	6825      	ldr	r5, [r4, #0]
 800e046:	1961      	adds	r1, r4, r5
 800e048:	428b      	cmp	r3, r1
 800e04a:	bf04      	itt	eq
 800e04c:	6819      	ldreq	r1, [r3, #0]
 800e04e:	685b      	ldreq	r3, [r3, #4]
 800e050:	6063      	str	r3, [r4, #4]
 800e052:	bf04      	itt	eq
 800e054:	1949      	addeq	r1, r1, r5
 800e056:	6021      	streq	r1, [r4, #0]
 800e058:	6054      	str	r4, [r2, #4]
 800e05a:	e7ca      	b.n	800dff2 <_free_r+0x26>
 800e05c:	b003      	add	sp, #12
 800e05e:	bd30      	pop	{r4, r5, pc}
 800e060:	200022b8 	.word	0x200022b8

0800e064 <malloc>:
 800e064:	4b02      	ldr	r3, [pc, #8]	; (800e070 <malloc+0xc>)
 800e066:	4601      	mov	r1, r0
 800e068:	6818      	ldr	r0, [r3, #0]
 800e06a:	f000 b823 	b.w	800e0b4 <_malloc_r>
 800e06e:	bf00      	nop
 800e070:	20000178 	.word	0x20000178

0800e074 <sbrk_aligned>:
 800e074:	b570      	push	{r4, r5, r6, lr}
 800e076:	4e0e      	ldr	r6, [pc, #56]	; (800e0b0 <sbrk_aligned+0x3c>)
 800e078:	460c      	mov	r4, r1
 800e07a:	6831      	ldr	r1, [r6, #0]
 800e07c:	4605      	mov	r5, r0
 800e07e:	b911      	cbnz	r1, 800e086 <sbrk_aligned+0x12>
 800e080:	f000 fe40 	bl	800ed04 <_sbrk_r>
 800e084:	6030      	str	r0, [r6, #0]
 800e086:	4621      	mov	r1, r4
 800e088:	4628      	mov	r0, r5
 800e08a:	f000 fe3b 	bl	800ed04 <_sbrk_r>
 800e08e:	1c43      	adds	r3, r0, #1
 800e090:	d00a      	beq.n	800e0a8 <sbrk_aligned+0x34>
 800e092:	1cc4      	adds	r4, r0, #3
 800e094:	f024 0403 	bic.w	r4, r4, #3
 800e098:	42a0      	cmp	r0, r4
 800e09a:	d007      	beq.n	800e0ac <sbrk_aligned+0x38>
 800e09c:	1a21      	subs	r1, r4, r0
 800e09e:	4628      	mov	r0, r5
 800e0a0:	f000 fe30 	bl	800ed04 <_sbrk_r>
 800e0a4:	3001      	adds	r0, #1
 800e0a6:	d101      	bne.n	800e0ac <sbrk_aligned+0x38>
 800e0a8:	f04f 34ff 	mov.w	r4, #4294967295
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	bd70      	pop	{r4, r5, r6, pc}
 800e0b0:	200022bc 	.word	0x200022bc

0800e0b4 <_malloc_r>:
 800e0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0b8:	1ccd      	adds	r5, r1, #3
 800e0ba:	f025 0503 	bic.w	r5, r5, #3
 800e0be:	3508      	adds	r5, #8
 800e0c0:	2d0c      	cmp	r5, #12
 800e0c2:	bf38      	it	cc
 800e0c4:	250c      	movcc	r5, #12
 800e0c6:	2d00      	cmp	r5, #0
 800e0c8:	4607      	mov	r7, r0
 800e0ca:	db01      	blt.n	800e0d0 <_malloc_r+0x1c>
 800e0cc:	42a9      	cmp	r1, r5
 800e0ce:	d905      	bls.n	800e0dc <_malloc_r+0x28>
 800e0d0:	230c      	movs	r3, #12
 800e0d2:	603b      	str	r3, [r7, #0]
 800e0d4:	2600      	movs	r6, #0
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e1b0 <_malloc_r+0xfc>
 800e0e0:	f000 f868 	bl	800e1b4 <__malloc_lock>
 800e0e4:	f8d8 3000 	ldr.w	r3, [r8]
 800e0e8:	461c      	mov	r4, r3
 800e0ea:	bb5c      	cbnz	r4, 800e144 <_malloc_r+0x90>
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	4638      	mov	r0, r7
 800e0f0:	f7ff ffc0 	bl	800e074 <sbrk_aligned>
 800e0f4:	1c43      	adds	r3, r0, #1
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	d155      	bne.n	800e1a6 <_malloc_r+0xf2>
 800e0fa:	f8d8 4000 	ldr.w	r4, [r8]
 800e0fe:	4626      	mov	r6, r4
 800e100:	2e00      	cmp	r6, #0
 800e102:	d145      	bne.n	800e190 <_malloc_r+0xdc>
 800e104:	2c00      	cmp	r4, #0
 800e106:	d048      	beq.n	800e19a <_malloc_r+0xe6>
 800e108:	6823      	ldr	r3, [r4, #0]
 800e10a:	4631      	mov	r1, r6
 800e10c:	4638      	mov	r0, r7
 800e10e:	eb04 0903 	add.w	r9, r4, r3
 800e112:	f000 fdf7 	bl	800ed04 <_sbrk_r>
 800e116:	4581      	cmp	r9, r0
 800e118:	d13f      	bne.n	800e19a <_malloc_r+0xe6>
 800e11a:	6821      	ldr	r1, [r4, #0]
 800e11c:	1a6d      	subs	r5, r5, r1
 800e11e:	4629      	mov	r1, r5
 800e120:	4638      	mov	r0, r7
 800e122:	f7ff ffa7 	bl	800e074 <sbrk_aligned>
 800e126:	3001      	adds	r0, #1
 800e128:	d037      	beq.n	800e19a <_malloc_r+0xe6>
 800e12a:	6823      	ldr	r3, [r4, #0]
 800e12c:	442b      	add	r3, r5
 800e12e:	6023      	str	r3, [r4, #0]
 800e130:	f8d8 3000 	ldr.w	r3, [r8]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d038      	beq.n	800e1aa <_malloc_r+0xf6>
 800e138:	685a      	ldr	r2, [r3, #4]
 800e13a:	42a2      	cmp	r2, r4
 800e13c:	d12b      	bne.n	800e196 <_malloc_r+0xe2>
 800e13e:	2200      	movs	r2, #0
 800e140:	605a      	str	r2, [r3, #4]
 800e142:	e00f      	b.n	800e164 <_malloc_r+0xb0>
 800e144:	6822      	ldr	r2, [r4, #0]
 800e146:	1b52      	subs	r2, r2, r5
 800e148:	d41f      	bmi.n	800e18a <_malloc_r+0xd6>
 800e14a:	2a0b      	cmp	r2, #11
 800e14c:	d917      	bls.n	800e17e <_malloc_r+0xca>
 800e14e:	1961      	adds	r1, r4, r5
 800e150:	42a3      	cmp	r3, r4
 800e152:	6025      	str	r5, [r4, #0]
 800e154:	bf18      	it	ne
 800e156:	6059      	strne	r1, [r3, #4]
 800e158:	6863      	ldr	r3, [r4, #4]
 800e15a:	bf08      	it	eq
 800e15c:	f8c8 1000 	streq.w	r1, [r8]
 800e160:	5162      	str	r2, [r4, r5]
 800e162:	604b      	str	r3, [r1, #4]
 800e164:	4638      	mov	r0, r7
 800e166:	f104 060b 	add.w	r6, r4, #11
 800e16a:	f000 f829 	bl	800e1c0 <__malloc_unlock>
 800e16e:	f026 0607 	bic.w	r6, r6, #7
 800e172:	1d23      	adds	r3, r4, #4
 800e174:	1af2      	subs	r2, r6, r3
 800e176:	d0ae      	beq.n	800e0d6 <_malloc_r+0x22>
 800e178:	1b9b      	subs	r3, r3, r6
 800e17a:	50a3      	str	r3, [r4, r2]
 800e17c:	e7ab      	b.n	800e0d6 <_malloc_r+0x22>
 800e17e:	42a3      	cmp	r3, r4
 800e180:	6862      	ldr	r2, [r4, #4]
 800e182:	d1dd      	bne.n	800e140 <_malloc_r+0x8c>
 800e184:	f8c8 2000 	str.w	r2, [r8]
 800e188:	e7ec      	b.n	800e164 <_malloc_r+0xb0>
 800e18a:	4623      	mov	r3, r4
 800e18c:	6864      	ldr	r4, [r4, #4]
 800e18e:	e7ac      	b.n	800e0ea <_malloc_r+0x36>
 800e190:	4634      	mov	r4, r6
 800e192:	6876      	ldr	r6, [r6, #4]
 800e194:	e7b4      	b.n	800e100 <_malloc_r+0x4c>
 800e196:	4613      	mov	r3, r2
 800e198:	e7cc      	b.n	800e134 <_malloc_r+0x80>
 800e19a:	230c      	movs	r3, #12
 800e19c:	603b      	str	r3, [r7, #0]
 800e19e:	4638      	mov	r0, r7
 800e1a0:	f000 f80e 	bl	800e1c0 <__malloc_unlock>
 800e1a4:	e797      	b.n	800e0d6 <_malloc_r+0x22>
 800e1a6:	6025      	str	r5, [r4, #0]
 800e1a8:	e7dc      	b.n	800e164 <_malloc_r+0xb0>
 800e1aa:	605b      	str	r3, [r3, #4]
 800e1ac:	deff      	udf	#255	; 0xff
 800e1ae:	bf00      	nop
 800e1b0:	200022b8 	.word	0x200022b8

0800e1b4 <__malloc_lock>:
 800e1b4:	4801      	ldr	r0, [pc, #4]	; (800e1bc <__malloc_lock+0x8>)
 800e1b6:	f7ff b88a 	b.w	800d2ce <__retarget_lock_acquire_recursive>
 800e1ba:	bf00      	nop
 800e1bc:	200022b4 	.word	0x200022b4

0800e1c0 <__malloc_unlock>:
 800e1c0:	4801      	ldr	r0, [pc, #4]	; (800e1c8 <__malloc_unlock+0x8>)
 800e1c2:	f7ff b885 	b.w	800d2d0 <__retarget_lock_release_recursive>
 800e1c6:	bf00      	nop
 800e1c8:	200022b4 	.word	0x200022b4

0800e1cc <_Balloc>:
 800e1cc:	b570      	push	{r4, r5, r6, lr}
 800e1ce:	69c6      	ldr	r6, [r0, #28]
 800e1d0:	4604      	mov	r4, r0
 800e1d2:	460d      	mov	r5, r1
 800e1d4:	b976      	cbnz	r6, 800e1f4 <_Balloc+0x28>
 800e1d6:	2010      	movs	r0, #16
 800e1d8:	f7ff ff44 	bl	800e064 <malloc>
 800e1dc:	4602      	mov	r2, r0
 800e1de:	61e0      	str	r0, [r4, #28]
 800e1e0:	b920      	cbnz	r0, 800e1ec <_Balloc+0x20>
 800e1e2:	4b18      	ldr	r3, [pc, #96]	; (800e244 <_Balloc+0x78>)
 800e1e4:	4818      	ldr	r0, [pc, #96]	; (800e248 <_Balloc+0x7c>)
 800e1e6:	216b      	movs	r1, #107	; 0x6b
 800e1e8:	f000 fdaa 	bl	800ed40 <__assert_func>
 800e1ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1f0:	6006      	str	r6, [r0, #0]
 800e1f2:	60c6      	str	r6, [r0, #12]
 800e1f4:	69e6      	ldr	r6, [r4, #28]
 800e1f6:	68f3      	ldr	r3, [r6, #12]
 800e1f8:	b183      	cbz	r3, 800e21c <_Balloc+0x50>
 800e1fa:	69e3      	ldr	r3, [r4, #28]
 800e1fc:	68db      	ldr	r3, [r3, #12]
 800e1fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e202:	b9b8      	cbnz	r0, 800e234 <_Balloc+0x68>
 800e204:	2101      	movs	r1, #1
 800e206:	fa01 f605 	lsl.w	r6, r1, r5
 800e20a:	1d72      	adds	r2, r6, #5
 800e20c:	0092      	lsls	r2, r2, #2
 800e20e:	4620      	mov	r0, r4
 800e210:	f000 fdb4 	bl	800ed7c <_calloc_r>
 800e214:	b160      	cbz	r0, 800e230 <_Balloc+0x64>
 800e216:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e21a:	e00e      	b.n	800e23a <_Balloc+0x6e>
 800e21c:	2221      	movs	r2, #33	; 0x21
 800e21e:	2104      	movs	r1, #4
 800e220:	4620      	mov	r0, r4
 800e222:	f000 fdab 	bl	800ed7c <_calloc_r>
 800e226:	69e3      	ldr	r3, [r4, #28]
 800e228:	60f0      	str	r0, [r6, #12]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d1e4      	bne.n	800e1fa <_Balloc+0x2e>
 800e230:	2000      	movs	r0, #0
 800e232:	bd70      	pop	{r4, r5, r6, pc}
 800e234:	6802      	ldr	r2, [r0, #0]
 800e236:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e23a:	2300      	movs	r3, #0
 800e23c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e240:	e7f7      	b.n	800e232 <_Balloc+0x66>
 800e242:	bf00      	nop
 800e244:	0800f499 	.word	0x0800f499
 800e248:	0800f519 	.word	0x0800f519

0800e24c <_Bfree>:
 800e24c:	b570      	push	{r4, r5, r6, lr}
 800e24e:	69c6      	ldr	r6, [r0, #28]
 800e250:	4605      	mov	r5, r0
 800e252:	460c      	mov	r4, r1
 800e254:	b976      	cbnz	r6, 800e274 <_Bfree+0x28>
 800e256:	2010      	movs	r0, #16
 800e258:	f7ff ff04 	bl	800e064 <malloc>
 800e25c:	4602      	mov	r2, r0
 800e25e:	61e8      	str	r0, [r5, #28]
 800e260:	b920      	cbnz	r0, 800e26c <_Bfree+0x20>
 800e262:	4b09      	ldr	r3, [pc, #36]	; (800e288 <_Bfree+0x3c>)
 800e264:	4809      	ldr	r0, [pc, #36]	; (800e28c <_Bfree+0x40>)
 800e266:	218f      	movs	r1, #143	; 0x8f
 800e268:	f000 fd6a 	bl	800ed40 <__assert_func>
 800e26c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e270:	6006      	str	r6, [r0, #0]
 800e272:	60c6      	str	r6, [r0, #12]
 800e274:	b13c      	cbz	r4, 800e286 <_Bfree+0x3a>
 800e276:	69eb      	ldr	r3, [r5, #28]
 800e278:	6862      	ldr	r2, [r4, #4]
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e280:	6021      	str	r1, [r4, #0]
 800e282:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e286:	bd70      	pop	{r4, r5, r6, pc}
 800e288:	0800f499 	.word	0x0800f499
 800e28c:	0800f519 	.word	0x0800f519

0800e290 <__multadd>:
 800e290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e294:	690d      	ldr	r5, [r1, #16]
 800e296:	4607      	mov	r7, r0
 800e298:	460c      	mov	r4, r1
 800e29a:	461e      	mov	r6, r3
 800e29c:	f101 0c14 	add.w	ip, r1, #20
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	f8dc 3000 	ldr.w	r3, [ip]
 800e2a6:	b299      	uxth	r1, r3
 800e2a8:	fb02 6101 	mla	r1, r2, r1, r6
 800e2ac:	0c1e      	lsrs	r6, r3, #16
 800e2ae:	0c0b      	lsrs	r3, r1, #16
 800e2b0:	fb02 3306 	mla	r3, r2, r6, r3
 800e2b4:	b289      	uxth	r1, r1
 800e2b6:	3001      	adds	r0, #1
 800e2b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e2bc:	4285      	cmp	r5, r0
 800e2be:	f84c 1b04 	str.w	r1, [ip], #4
 800e2c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e2c6:	dcec      	bgt.n	800e2a2 <__multadd+0x12>
 800e2c8:	b30e      	cbz	r6, 800e30e <__multadd+0x7e>
 800e2ca:	68a3      	ldr	r3, [r4, #8]
 800e2cc:	42ab      	cmp	r3, r5
 800e2ce:	dc19      	bgt.n	800e304 <__multadd+0x74>
 800e2d0:	6861      	ldr	r1, [r4, #4]
 800e2d2:	4638      	mov	r0, r7
 800e2d4:	3101      	adds	r1, #1
 800e2d6:	f7ff ff79 	bl	800e1cc <_Balloc>
 800e2da:	4680      	mov	r8, r0
 800e2dc:	b928      	cbnz	r0, 800e2ea <__multadd+0x5a>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	4b0c      	ldr	r3, [pc, #48]	; (800e314 <__multadd+0x84>)
 800e2e2:	480d      	ldr	r0, [pc, #52]	; (800e318 <__multadd+0x88>)
 800e2e4:	21ba      	movs	r1, #186	; 0xba
 800e2e6:	f000 fd2b 	bl	800ed40 <__assert_func>
 800e2ea:	6922      	ldr	r2, [r4, #16]
 800e2ec:	3202      	adds	r2, #2
 800e2ee:	f104 010c 	add.w	r1, r4, #12
 800e2f2:	0092      	lsls	r2, r2, #2
 800e2f4:	300c      	adds	r0, #12
 800e2f6:	f000 fd15 	bl	800ed24 <memcpy>
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	4638      	mov	r0, r7
 800e2fe:	f7ff ffa5 	bl	800e24c <_Bfree>
 800e302:	4644      	mov	r4, r8
 800e304:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e308:	3501      	adds	r5, #1
 800e30a:	615e      	str	r6, [r3, #20]
 800e30c:	6125      	str	r5, [r4, #16]
 800e30e:	4620      	mov	r0, r4
 800e310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e314:	0800f508 	.word	0x0800f508
 800e318:	0800f519 	.word	0x0800f519

0800e31c <__hi0bits>:
 800e31c:	0c03      	lsrs	r3, r0, #16
 800e31e:	041b      	lsls	r3, r3, #16
 800e320:	b9d3      	cbnz	r3, 800e358 <__hi0bits+0x3c>
 800e322:	0400      	lsls	r0, r0, #16
 800e324:	2310      	movs	r3, #16
 800e326:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e32a:	bf04      	itt	eq
 800e32c:	0200      	lsleq	r0, r0, #8
 800e32e:	3308      	addeq	r3, #8
 800e330:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e334:	bf04      	itt	eq
 800e336:	0100      	lsleq	r0, r0, #4
 800e338:	3304      	addeq	r3, #4
 800e33a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e33e:	bf04      	itt	eq
 800e340:	0080      	lsleq	r0, r0, #2
 800e342:	3302      	addeq	r3, #2
 800e344:	2800      	cmp	r0, #0
 800e346:	db05      	blt.n	800e354 <__hi0bits+0x38>
 800e348:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e34c:	f103 0301 	add.w	r3, r3, #1
 800e350:	bf08      	it	eq
 800e352:	2320      	moveq	r3, #32
 800e354:	4618      	mov	r0, r3
 800e356:	4770      	bx	lr
 800e358:	2300      	movs	r3, #0
 800e35a:	e7e4      	b.n	800e326 <__hi0bits+0xa>

0800e35c <__lo0bits>:
 800e35c:	6803      	ldr	r3, [r0, #0]
 800e35e:	f013 0207 	ands.w	r2, r3, #7
 800e362:	d00c      	beq.n	800e37e <__lo0bits+0x22>
 800e364:	07d9      	lsls	r1, r3, #31
 800e366:	d422      	bmi.n	800e3ae <__lo0bits+0x52>
 800e368:	079a      	lsls	r2, r3, #30
 800e36a:	bf49      	itett	mi
 800e36c:	085b      	lsrmi	r3, r3, #1
 800e36e:	089b      	lsrpl	r3, r3, #2
 800e370:	6003      	strmi	r3, [r0, #0]
 800e372:	2201      	movmi	r2, #1
 800e374:	bf5c      	itt	pl
 800e376:	6003      	strpl	r3, [r0, #0]
 800e378:	2202      	movpl	r2, #2
 800e37a:	4610      	mov	r0, r2
 800e37c:	4770      	bx	lr
 800e37e:	b299      	uxth	r1, r3
 800e380:	b909      	cbnz	r1, 800e386 <__lo0bits+0x2a>
 800e382:	0c1b      	lsrs	r3, r3, #16
 800e384:	2210      	movs	r2, #16
 800e386:	b2d9      	uxtb	r1, r3
 800e388:	b909      	cbnz	r1, 800e38e <__lo0bits+0x32>
 800e38a:	3208      	adds	r2, #8
 800e38c:	0a1b      	lsrs	r3, r3, #8
 800e38e:	0719      	lsls	r1, r3, #28
 800e390:	bf04      	itt	eq
 800e392:	091b      	lsreq	r3, r3, #4
 800e394:	3204      	addeq	r2, #4
 800e396:	0799      	lsls	r1, r3, #30
 800e398:	bf04      	itt	eq
 800e39a:	089b      	lsreq	r3, r3, #2
 800e39c:	3202      	addeq	r2, #2
 800e39e:	07d9      	lsls	r1, r3, #31
 800e3a0:	d403      	bmi.n	800e3aa <__lo0bits+0x4e>
 800e3a2:	085b      	lsrs	r3, r3, #1
 800e3a4:	f102 0201 	add.w	r2, r2, #1
 800e3a8:	d003      	beq.n	800e3b2 <__lo0bits+0x56>
 800e3aa:	6003      	str	r3, [r0, #0]
 800e3ac:	e7e5      	b.n	800e37a <__lo0bits+0x1e>
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	e7e3      	b.n	800e37a <__lo0bits+0x1e>
 800e3b2:	2220      	movs	r2, #32
 800e3b4:	e7e1      	b.n	800e37a <__lo0bits+0x1e>
	...

0800e3b8 <__i2b>:
 800e3b8:	b510      	push	{r4, lr}
 800e3ba:	460c      	mov	r4, r1
 800e3bc:	2101      	movs	r1, #1
 800e3be:	f7ff ff05 	bl	800e1cc <_Balloc>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	b928      	cbnz	r0, 800e3d2 <__i2b+0x1a>
 800e3c6:	4b05      	ldr	r3, [pc, #20]	; (800e3dc <__i2b+0x24>)
 800e3c8:	4805      	ldr	r0, [pc, #20]	; (800e3e0 <__i2b+0x28>)
 800e3ca:	f240 1145 	movw	r1, #325	; 0x145
 800e3ce:	f000 fcb7 	bl	800ed40 <__assert_func>
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	6144      	str	r4, [r0, #20]
 800e3d6:	6103      	str	r3, [r0, #16]
 800e3d8:	bd10      	pop	{r4, pc}
 800e3da:	bf00      	nop
 800e3dc:	0800f508 	.word	0x0800f508
 800e3e0:	0800f519 	.word	0x0800f519

0800e3e4 <__multiply>:
 800e3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e8:	4691      	mov	r9, r2
 800e3ea:	690a      	ldr	r2, [r1, #16]
 800e3ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	bfb8      	it	lt
 800e3f4:	460b      	movlt	r3, r1
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	bfbc      	itt	lt
 800e3fa:	464c      	movlt	r4, r9
 800e3fc:	4699      	movlt	r9, r3
 800e3fe:	6927      	ldr	r7, [r4, #16]
 800e400:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e404:	68a3      	ldr	r3, [r4, #8]
 800e406:	6861      	ldr	r1, [r4, #4]
 800e408:	eb07 060a 	add.w	r6, r7, sl
 800e40c:	42b3      	cmp	r3, r6
 800e40e:	b085      	sub	sp, #20
 800e410:	bfb8      	it	lt
 800e412:	3101      	addlt	r1, #1
 800e414:	f7ff feda 	bl	800e1cc <_Balloc>
 800e418:	b930      	cbnz	r0, 800e428 <__multiply+0x44>
 800e41a:	4602      	mov	r2, r0
 800e41c:	4b44      	ldr	r3, [pc, #272]	; (800e530 <__multiply+0x14c>)
 800e41e:	4845      	ldr	r0, [pc, #276]	; (800e534 <__multiply+0x150>)
 800e420:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e424:	f000 fc8c 	bl	800ed40 <__assert_func>
 800e428:	f100 0514 	add.w	r5, r0, #20
 800e42c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e430:	462b      	mov	r3, r5
 800e432:	2200      	movs	r2, #0
 800e434:	4543      	cmp	r3, r8
 800e436:	d321      	bcc.n	800e47c <__multiply+0x98>
 800e438:	f104 0314 	add.w	r3, r4, #20
 800e43c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e440:	f109 0314 	add.w	r3, r9, #20
 800e444:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e448:	9202      	str	r2, [sp, #8]
 800e44a:	1b3a      	subs	r2, r7, r4
 800e44c:	3a15      	subs	r2, #21
 800e44e:	f022 0203 	bic.w	r2, r2, #3
 800e452:	3204      	adds	r2, #4
 800e454:	f104 0115 	add.w	r1, r4, #21
 800e458:	428f      	cmp	r7, r1
 800e45a:	bf38      	it	cc
 800e45c:	2204      	movcc	r2, #4
 800e45e:	9201      	str	r2, [sp, #4]
 800e460:	9a02      	ldr	r2, [sp, #8]
 800e462:	9303      	str	r3, [sp, #12]
 800e464:	429a      	cmp	r2, r3
 800e466:	d80c      	bhi.n	800e482 <__multiply+0x9e>
 800e468:	2e00      	cmp	r6, #0
 800e46a:	dd03      	ble.n	800e474 <__multiply+0x90>
 800e46c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e470:	2b00      	cmp	r3, #0
 800e472:	d05b      	beq.n	800e52c <__multiply+0x148>
 800e474:	6106      	str	r6, [r0, #16]
 800e476:	b005      	add	sp, #20
 800e478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e47c:	f843 2b04 	str.w	r2, [r3], #4
 800e480:	e7d8      	b.n	800e434 <__multiply+0x50>
 800e482:	f8b3 a000 	ldrh.w	sl, [r3]
 800e486:	f1ba 0f00 	cmp.w	sl, #0
 800e48a:	d024      	beq.n	800e4d6 <__multiply+0xf2>
 800e48c:	f104 0e14 	add.w	lr, r4, #20
 800e490:	46a9      	mov	r9, r5
 800e492:	f04f 0c00 	mov.w	ip, #0
 800e496:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e49a:	f8d9 1000 	ldr.w	r1, [r9]
 800e49e:	fa1f fb82 	uxth.w	fp, r2
 800e4a2:	b289      	uxth	r1, r1
 800e4a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e4a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e4ac:	f8d9 2000 	ldr.w	r2, [r9]
 800e4b0:	4461      	add	r1, ip
 800e4b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e4b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e4ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e4be:	b289      	uxth	r1, r1
 800e4c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e4c4:	4577      	cmp	r7, lr
 800e4c6:	f849 1b04 	str.w	r1, [r9], #4
 800e4ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e4ce:	d8e2      	bhi.n	800e496 <__multiply+0xb2>
 800e4d0:	9a01      	ldr	r2, [sp, #4]
 800e4d2:	f845 c002 	str.w	ip, [r5, r2]
 800e4d6:	9a03      	ldr	r2, [sp, #12]
 800e4d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e4dc:	3304      	adds	r3, #4
 800e4de:	f1b9 0f00 	cmp.w	r9, #0
 800e4e2:	d021      	beq.n	800e528 <__multiply+0x144>
 800e4e4:	6829      	ldr	r1, [r5, #0]
 800e4e6:	f104 0c14 	add.w	ip, r4, #20
 800e4ea:	46ae      	mov	lr, r5
 800e4ec:	f04f 0a00 	mov.w	sl, #0
 800e4f0:	f8bc b000 	ldrh.w	fp, [ip]
 800e4f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e4f8:	fb09 220b 	mla	r2, r9, fp, r2
 800e4fc:	4452      	add	r2, sl
 800e4fe:	b289      	uxth	r1, r1
 800e500:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e504:	f84e 1b04 	str.w	r1, [lr], #4
 800e508:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e50c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e510:	f8be 1000 	ldrh.w	r1, [lr]
 800e514:	fb09 110a 	mla	r1, r9, sl, r1
 800e518:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e51c:	4567      	cmp	r7, ip
 800e51e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e522:	d8e5      	bhi.n	800e4f0 <__multiply+0x10c>
 800e524:	9a01      	ldr	r2, [sp, #4]
 800e526:	50a9      	str	r1, [r5, r2]
 800e528:	3504      	adds	r5, #4
 800e52a:	e799      	b.n	800e460 <__multiply+0x7c>
 800e52c:	3e01      	subs	r6, #1
 800e52e:	e79b      	b.n	800e468 <__multiply+0x84>
 800e530:	0800f508 	.word	0x0800f508
 800e534:	0800f519 	.word	0x0800f519

0800e538 <__pow5mult>:
 800e538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e53c:	4615      	mov	r5, r2
 800e53e:	f012 0203 	ands.w	r2, r2, #3
 800e542:	4606      	mov	r6, r0
 800e544:	460f      	mov	r7, r1
 800e546:	d007      	beq.n	800e558 <__pow5mult+0x20>
 800e548:	4c25      	ldr	r4, [pc, #148]	; (800e5e0 <__pow5mult+0xa8>)
 800e54a:	3a01      	subs	r2, #1
 800e54c:	2300      	movs	r3, #0
 800e54e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e552:	f7ff fe9d 	bl	800e290 <__multadd>
 800e556:	4607      	mov	r7, r0
 800e558:	10ad      	asrs	r5, r5, #2
 800e55a:	d03d      	beq.n	800e5d8 <__pow5mult+0xa0>
 800e55c:	69f4      	ldr	r4, [r6, #28]
 800e55e:	b97c      	cbnz	r4, 800e580 <__pow5mult+0x48>
 800e560:	2010      	movs	r0, #16
 800e562:	f7ff fd7f 	bl	800e064 <malloc>
 800e566:	4602      	mov	r2, r0
 800e568:	61f0      	str	r0, [r6, #28]
 800e56a:	b928      	cbnz	r0, 800e578 <__pow5mult+0x40>
 800e56c:	4b1d      	ldr	r3, [pc, #116]	; (800e5e4 <__pow5mult+0xac>)
 800e56e:	481e      	ldr	r0, [pc, #120]	; (800e5e8 <__pow5mult+0xb0>)
 800e570:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e574:	f000 fbe4 	bl	800ed40 <__assert_func>
 800e578:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e57c:	6004      	str	r4, [r0, #0]
 800e57e:	60c4      	str	r4, [r0, #12]
 800e580:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e584:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e588:	b94c      	cbnz	r4, 800e59e <__pow5mult+0x66>
 800e58a:	f240 2171 	movw	r1, #625	; 0x271
 800e58e:	4630      	mov	r0, r6
 800e590:	f7ff ff12 	bl	800e3b8 <__i2b>
 800e594:	2300      	movs	r3, #0
 800e596:	f8c8 0008 	str.w	r0, [r8, #8]
 800e59a:	4604      	mov	r4, r0
 800e59c:	6003      	str	r3, [r0, #0]
 800e59e:	f04f 0900 	mov.w	r9, #0
 800e5a2:	07eb      	lsls	r3, r5, #31
 800e5a4:	d50a      	bpl.n	800e5bc <__pow5mult+0x84>
 800e5a6:	4639      	mov	r1, r7
 800e5a8:	4622      	mov	r2, r4
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	f7ff ff1a 	bl	800e3e4 <__multiply>
 800e5b0:	4639      	mov	r1, r7
 800e5b2:	4680      	mov	r8, r0
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	f7ff fe49 	bl	800e24c <_Bfree>
 800e5ba:	4647      	mov	r7, r8
 800e5bc:	106d      	asrs	r5, r5, #1
 800e5be:	d00b      	beq.n	800e5d8 <__pow5mult+0xa0>
 800e5c0:	6820      	ldr	r0, [r4, #0]
 800e5c2:	b938      	cbnz	r0, 800e5d4 <__pow5mult+0x9c>
 800e5c4:	4622      	mov	r2, r4
 800e5c6:	4621      	mov	r1, r4
 800e5c8:	4630      	mov	r0, r6
 800e5ca:	f7ff ff0b 	bl	800e3e4 <__multiply>
 800e5ce:	6020      	str	r0, [r4, #0]
 800e5d0:	f8c0 9000 	str.w	r9, [r0]
 800e5d4:	4604      	mov	r4, r0
 800e5d6:	e7e4      	b.n	800e5a2 <__pow5mult+0x6a>
 800e5d8:	4638      	mov	r0, r7
 800e5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5de:	bf00      	nop
 800e5e0:	0800f668 	.word	0x0800f668
 800e5e4:	0800f499 	.word	0x0800f499
 800e5e8:	0800f519 	.word	0x0800f519

0800e5ec <__lshift>:
 800e5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5f0:	460c      	mov	r4, r1
 800e5f2:	6849      	ldr	r1, [r1, #4]
 800e5f4:	6923      	ldr	r3, [r4, #16]
 800e5f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e5fa:	68a3      	ldr	r3, [r4, #8]
 800e5fc:	4607      	mov	r7, r0
 800e5fe:	4691      	mov	r9, r2
 800e600:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e604:	f108 0601 	add.w	r6, r8, #1
 800e608:	42b3      	cmp	r3, r6
 800e60a:	db0b      	blt.n	800e624 <__lshift+0x38>
 800e60c:	4638      	mov	r0, r7
 800e60e:	f7ff fddd 	bl	800e1cc <_Balloc>
 800e612:	4605      	mov	r5, r0
 800e614:	b948      	cbnz	r0, 800e62a <__lshift+0x3e>
 800e616:	4602      	mov	r2, r0
 800e618:	4b28      	ldr	r3, [pc, #160]	; (800e6bc <__lshift+0xd0>)
 800e61a:	4829      	ldr	r0, [pc, #164]	; (800e6c0 <__lshift+0xd4>)
 800e61c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e620:	f000 fb8e 	bl	800ed40 <__assert_func>
 800e624:	3101      	adds	r1, #1
 800e626:	005b      	lsls	r3, r3, #1
 800e628:	e7ee      	b.n	800e608 <__lshift+0x1c>
 800e62a:	2300      	movs	r3, #0
 800e62c:	f100 0114 	add.w	r1, r0, #20
 800e630:	f100 0210 	add.w	r2, r0, #16
 800e634:	4618      	mov	r0, r3
 800e636:	4553      	cmp	r3, sl
 800e638:	db33      	blt.n	800e6a2 <__lshift+0xb6>
 800e63a:	6920      	ldr	r0, [r4, #16]
 800e63c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e640:	f104 0314 	add.w	r3, r4, #20
 800e644:	f019 091f 	ands.w	r9, r9, #31
 800e648:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e64c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e650:	d02b      	beq.n	800e6aa <__lshift+0xbe>
 800e652:	f1c9 0e20 	rsb	lr, r9, #32
 800e656:	468a      	mov	sl, r1
 800e658:	2200      	movs	r2, #0
 800e65a:	6818      	ldr	r0, [r3, #0]
 800e65c:	fa00 f009 	lsl.w	r0, r0, r9
 800e660:	4310      	orrs	r0, r2
 800e662:	f84a 0b04 	str.w	r0, [sl], #4
 800e666:	f853 2b04 	ldr.w	r2, [r3], #4
 800e66a:	459c      	cmp	ip, r3
 800e66c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e670:	d8f3      	bhi.n	800e65a <__lshift+0x6e>
 800e672:	ebac 0304 	sub.w	r3, ip, r4
 800e676:	3b15      	subs	r3, #21
 800e678:	f023 0303 	bic.w	r3, r3, #3
 800e67c:	3304      	adds	r3, #4
 800e67e:	f104 0015 	add.w	r0, r4, #21
 800e682:	4584      	cmp	ip, r0
 800e684:	bf38      	it	cc
 800e686:	2304      	movcc	r3, #4
 800e688:	50ca      	str	r2, [r1, r3]
 800e68a:	b10a      	cbz	r2, 800e690 <__lshift+0xa4>
 800e68c:	f108 0602 	add.w	r6, r8, #2
 800e690:	3e01      	subs	r6, #1
 800e692:	4638      	mov	r0, r7
 800e694:	612e      	str	r6, [r5, #16]
 800e696:	4621      	mov	r1, r4
 800e698:	f7ff fdd8 	bl	800e24c <_Bfree>
 800e69c:	4628      	mov	r0, r5
 800e69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	e7c5      	b.n	800e636 <__lshift+0x4a>
 800e6aa:	3904      	subs	r1, #4
 800e6ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6b4:	459c      	cmp	ip, r3
 800e6b6:	d8f9      	bhi.n	800e6ac <__lshift+0xc0>
 800e6b8:	e7ea      	b.n	800e690 <__lshift+0xa4>
 800e6ba:	bf00      	nop
 800e6bc:	0800f508 	.word	0x0800f508
 800e6c0:	0800f519 	.word	0x0800f519

0800e6c4 <__mcmp>:
 800e6c4:	b530      	push	{r4, r5, lr}
 800e6c6:	6902      	ldr	r2, [r0, #16]
 800e6c8:	690c      	ldr	r4, [r1, #16]
 800e6ca:	1b12      	subs	r2, r2, r4
 800e6cc:	d10e      	bne.n	800e6ec <__mcmp+0x28>
 800e6ce:	f100 0314 	add.w	r3, r0, #20
 800e6d2:	3114      	adds	r1, #20
 800e6d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e6d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e6dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e6e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e6e4:	42a5      	cmp	r5, r4
 800e6e6:	d003      	beq.n	800e6f0 <__mcmp+0x2c>
 800e6e8:	d305      	bcc.n	800e6f6 <__mcmp+0x32>
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	4610      	mov	r0, r2
 800e6ee:	bd30      	pop	{r4, r5, pc}
 800e6f0:	4283      	cmp	r3, r0
 800e6f2:	d3f3      	bcc.n	800e6dc <__mcmp+0x18>
 800e6f4:	e7fa      	b.n	800e6ec <__mcmp+0x28>
 800e6f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e6fa:	e7f7      	b.n	800e6ec <__mcmp+0x28>

0800e6fc <__mdiff>:
 800e6fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e700:	460c      	mov	r4, r1
 800e702:	4606      	mov	r6, r0
 800e704:	4611      	mov	r1, r2
 800e706:	4620      	mov	r0, r4
 800e708:	4690      	mov	r8, r2
 800e70a:	f7ff ffdb 	bl	800e6c4 <__mcmp>
 800e70e:	1e05      	subs	r5, r0, #0
 800e710:	d110      	bne.n	800e734 <__mdiff+0x38>
 800e712:	4629      	mov	r1, r5
 800e714:	4630      	mov	r0, r6
 800e716:	f7ff fd59 	bl	800e1cc <_Balloc>
 800e71a:	b930      	cbnz	r0, 800e72a <__mdiff+0x2e>
 800e71c:	4b3a      	ldr	r3, [pc, #232]	; (800e808 <__mdiff+0x10c>)
 800e71e:	4602      	mov	r2, r0
 800e720:	f240 2137 	movw	r1, #567	; 0x237
 800e724:	4839      	ldr	r0, [pc, #228]	; (800e80c <__mdiff+0x110>)
 800e726:	f000 fb0b 	bl	800ed40 <__assert_func>
 800e72a:	2301      	movs	r3, #1
 800e72c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e730:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e734:	bfa4      	itt	ge
 800e736:	4643      	movge	r3, r8
 800e738:	46a0      	movge	r8, r4
 800e73a:	4630      	mov	r0, r6
 800e73c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e740:	bfa6      	itte	ge
 800e742:	461c      	movge	r4, r3
 800e744:	2500      	movge	r5, #0
 800e746:	2501      	movlt	r5, #1
 800e748:	f7ff fd40 	bl	800e1cc <_Balloc>
 800e74c:	b920      	cbnz	r0, 800e758 <__mdiff+0x5c>
 800e74e:	4b2e      	ldr	r3, [pc, #184]	; (800e808 <__mdiff+0x10c>)
 800e750:	4602      	mov	r2, r0
 800e752:	f240 2145 	movw	r1, #581	; 0x245
 800e756:	e7e5      	b.n	800e724 <__mdiff+0x28>
 800e758:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e75c:	6926      	ldr	r6, [r4, #16]
 800e75e:	60c5      	str	r5, [r0, #12]
 800e760:	f104 0914 	add.w	r9, r4, #20
 800e764:	f108 0514 	add.w	r5, r8, #20
 800e768:	f100 0e14 	add.w	lr, r0, #20
 800e76c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e770:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e774:	f108 0210 	add.w	r2, r8, #16
 800e778:	46f2      	mov	sl, lr
 800e77a:	2100      	movs	r1, #0
 800e77c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e780:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e784:	fa11 f88b 	uxtah	r8, r1, fp
 800e788:	b299      	uxth	r1, r3
 800e78a:	0c1b      	lsrs	r3, r3, #16
 800e78c:	eba8 0801 	sub.w	r8, r8, r1
 800e790:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e794:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e798:	fa1f f888 	uxth.w	r8, r8
 800e79c:	1419      	asrs	r1, r3, #16
 800e79e:	454e      	cmp	r6, r9
 800e7a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e7a4:	f84a 3b04 	str.w	r3, [sl], #4
 800e7a8:	d8e8      	bhi.n	800e77c <__mdiff+0x80>
 800e7aa:	1b33      	subs	r3, r6, r4
 800e7ac:	3b15      	subs	r3, #21
 800e7ae:	f023 0303 	bic.w	r3, r3, #3
 800e7b2:	3304      	adds	r3, #4
 800e7b4:	3415      	adds	r4, #21
 800e7b6:	42a6      	cmp	r6, r4
 800e7b8:	bf38      	it	cc
 800e7ba:	2304      	movcc	r3, #4
 800e7bc:	441d      	add	r5, r3
 800e7be:	4473      	add	r3, lr
 800e7c0:	469e      	mov	lr, r3
 800e7c2:	462e      	mov	r6, r5
 800e7c4:	4566      	cmp	r6, ip
 800e7c6:	d30e      	bcc.n	800e7e6 <__mdiff+0xea>
 800e7c8:	f10c 0203 	add.w	r2, ip, #3
 800e7cc:	1b52      	subs	r2, r2, r5
 800e7ce:	f022 0203 	bic.w	r2, r2, #3
 800e7d2:	3d03      	subs	r5, #3
 800e7d4:	45ac      	cmp	ip, r5
 800e7d6:	bf38      	it	cc
 800e7d8:	2200      	movcc	r2, #0
 800e7da:	4413      	add	r3, r2
 800e7dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e7e0:	b17a      	cbz	r2, 800e802 <__mdiff+0x106>
 800e7e2:	6107      	str	r7, [r0, #16]
 800e7e4:	e7a4      	b.n	800e730 <__mdiff+0x34>
 800e7e6:	f856 8b04 	ldr.w	r8, [r6], #4
 800e7ea:	fa11 f288 	uxtah	r2, r1, r8
 800e7ee:	1414      	asrs	r4, r2, #16
 800e7f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e7f4:	b292      	uxth	r2, r2
 800e7f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e7fa:	f84e 2b04 	str.w	r2, [lr], #4
 800e7fe:	1421      	asrs	r1, r4, #16
 800e800:	e7e0      	b.n	800e7c4 <__mdiff+0xc8>
 800e802:	3f01      	subs	r7, #1
 800e804:	e7ea      	b.n	800e7dc <__mdiff+0xe0>
 800e806:	bf00      	nop
 800e808:	0800f508 	.word	0x0800f508
 800e80c:	0800f519 	.word	0x0800f519

0800e810 <__d2b>:
 800e810:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e814:	460f      	mov	r7, r1
 800e816:	2101      	movs	r1, #1
 800e818:	ec59 8b10 	vmov	r8, r9, d0
 800e81c:	4616      	mov	r6, r2
 800e81e:	f7ff fcd5 	bl	800e1cc <_Balloc>
 800e822:	4604      	mov	r4, r0
 800e824:	b930      	cbnz	r0, 800e834 <__d2b+0x24>
 800e826:	4602      	mov	r2, r0
 800e828:	4b24      	ldr	r3, [pc, #144]	; (800e8bc <__d2b+0xac>)
 800e82a:	4825      	ldr	r0, [pc, #148]	; (800e8c0 <__d2b+0xb0>)
 800e82c:	f240 310f 	movw	r1, #783	; 0x30f
 800e830:	f000 fa86 	bl	800ed40 <__assert_func>
 800e834:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e83c:	bb2d      	cbnz	r5, 800e88a <__d2b+0x7a>
 800e83e:	9301      	str	r3, [sp, #4]
 800e840:	f1b8 0300 	subs.w	r3, r8, #0
 800e844:	d026      	beq.n	800e894 <__d2b+0x84>
 800e846:	4668      	mov	r0, sp
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	f7ff fd87 	bl	800e35c <__lo0bits>
 800e84e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e852:	b1e8      	cbz	r0, 800e890 <__d2b+0x80>
 800e854:	f1c0 0320 	rsb	r3, r0, #32
 800e858:	fa02 f303 	lsl.w	r3, r2, r3
 800e85c:	430b      	orrs	r3, r1
 800e85e:	40c2      	lsrs	r2, r0
 800e860:	6163      	str	r3, [r4, #20]
 800e862:	9201      	str	r2, [sp, #4]
 800e864:	9b01      	ldr	r3, [sp, #4]
 800e866:	61a3      	str	r3, [r4, #24]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	bf14      	ite	ne
 800e86c:	2202      	movne	r2, #2
 800e86e:	2201      	moveq	r2, #1
 800e870:	6122      	str	r2, [r4, #16]
 800e872:	b1bd      	cbz	r5, 800e8a4 <__d2b+0x94>
 800e874:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e878:	4405      	add	r5, r0
 800e87a:	603d      	str	r5, [r7, #0]
 800e87c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e880:	6030      	str	r0, [r6, #0]
 800e882:	4620      	mov	r0, r4
 800e884:	b003      	add	sp, #12
 800e886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e88a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e88e:	e7d6      	b.n	800e83e <__d2b+0x2e>
 800e890:	6161      	str	r1, [r4, #20]
 800e892:	e7e7      	b.n	800e864 <__d2b+0x54>
 800e894:	a801      	add	r0, sp, #4
 800e896:	f7ff fd61 	bl	800e35c <__lo0bits>
 800e89a:	9b01      	ldr	r3, [sp, #4]
 800e89c:	6163      	str	r3, [r4, #20]
 800e89e:	3020      	adds	r0, #32
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	e7e5      	b.n	800e870 <__d2b+0x60>
 800e8a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e8a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e8ac:	6038      	str	r0, [r7, #0]
 800e8ae:	6918      	ldr	r0, [r3, #16]
 800e8b0:	f7ff fd34 	bl	800e31c <__hi0bits>
 800e8b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e8b8:	e7e2      	b.n	800e880 <__d2b+0x70>
 800e8ba:	bf00      	nop
 800e8bc:	0800f508 	.word	0x0800f508
 800e8c0:	0800f519 	.word	0x0800f519

0800e8c4 <__ssputs_r>:
 800e8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8c8:	688e      	ldr	r6, [r1, #8]
 800e8ca:	461f      	mov	r7, r3
 800e8cc:	42be      	cmp	r6, r7
 800e8ce:	680b      	ldr	r3, [r1, #0]
 800e8d0:	4682      	mov	sl, r0
 800e8d2:	460c      	mov	r4, r1
 800e8d4:	4690      	mov	r8, r2
 800e8d6:	d82c      	bhi.n	800e932 <__ssputs_r+0x6e>
 800e8d8:	898a      	ldrh	r2, [r1, #12]
 800e8da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e8de:	d026      	beq.n	800e92e <__ssputs_r+0x6a>
 800e8e0:	6965      	ldr	r5, [r4, #20]
 800e8e2:	6909      	ldr	r1, [r1, #16]
 800e8e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8e8:	eba3 0901 	sub.w	r9, r3, r1
 800e8ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8f0:	1c7b      	adds	r3, r7, #1
 800e8f2:	444b      	add	r3, r9
 800e8f4:	106d      	asrs	r5, r5, #1
 800e8f6:	429d      	cmp	r5, r3
 800e8f8:	bf38      	it	cc
 800e8fa:	461d      	movcc	r5, r3
 800e8fc:	0553      	lsls	r3, r2, #21
 800e8fe:	d527      	bpl.n	800e950 <__ssputs_r+0x8c>
 800e900:	4629      	mov	r1, r5
 800e902:	f7ff fbd7 	bl	800e0b4 <_malloc_r>
 800e906:	4606      	mov	r6, r0
 800e908:	b360      	cbz	r0, 800e964 <__ssputs_r+0xa0>
 800e90a:	6921      	ldr	r1, [r4, #16]
 800e90c:	464a      	mov	r2, r9
 800e90e:	f000 fa09 	bl	800ed24 <memcpy>
 800e912:	89a3      	ldrh	r3, [r4, #12]
 800e914:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e91c:	81a3      	strh	r3, [r4, #12]
 800e91e:	6126      	str	r6, [r4, #16]
 800e920:	6165      	str	r5, [r4, #20]
 800e922:	444e      	add	r6, r9
 800e924:	eba5 0509 	sub.w	r5, r5, r9
 800e928:	6026      	str	r6, [r4, #0]
 800e92a:	60a5      	str	r5, [r4, #8]
 800e92c:	463e      	mov	r6, r7
 800e92e:	42be      	cmp	r6, r7
 800e930:	d900      	bls.n	800e934 <__ssputs_r+0x70>
 800e932:	463e      	mov	r6, r7
 800e934:	6820      	ldr	r0, [r4, #0]
 800e936:	4632      	mov	r2, r6
 800e938:	4641      	mov	r1, r8
 800e93a:	f000 f9c9 	bl	800ecd0 <memmove>
 800e93e:	68a3      	ldr	r3, [r4, #8]
 800e940:	1b9b      	subs	r3, r3, r6
 800e942:	60a3      	str	r3, [r4, #8]
 800e944:	6823      	ldr	r3, [r4, #0]
 800e946:	4433      	add	r3, r6
 800e948:	6023      	str	r3, [r4, #0]
 800e94a:	2000      	movs	r0, #0
 800e94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e950:	462a      	mov	r2, r5
 800e952:	f000 fa3b 	bl	800edcc <_realloc_r>
 800e956:	4606      	mov	r6, r0
 800e958:	2800      	cmp	r0, #0
 800e95a:	d1e0      	bne.n	800e91e <__ssputs_r+0x5a>
 800e95c:	6921      	ldr	r1, [r4, #16]
 800e95e:	4650      	mov	r0, sl
 800e960:	f7ff fb34 	bl	800dfcc <_free_r>
 800e964:	230c      	movs	r3, #12
 800e966:	f8ca 3000 	str.w	r3, [sl]
 800e96a:	89a3      	ldrh	r3, [r4, #12]
 800e96c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e970:	81a3      	strh	r3, [r4, #12]
 800e972:	f04f 30ff 	mov.w	r0, #4294967295
 800e976:	e7e9      	b.n	800e94c <__ssputs_r+0x88>

0800e978 <_svfiprintf_r>:
 800e978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e97c:	4698      	mov	r8, r3
 800e97e:	898b      	ldrh	r3, [r1, #12]
 800e980:	061b      	lsls	r3, r3, #24
 800e982:	b09d      	sub	sp, #116	; 0x74
 800e984:	4607      	mov	r7, r0
 800e986:	460d      	mov	r5, r1
 800e988:	4614      	mov	r4, r2
 800e98a:	d50e      	bpl.n	800e9aa <_svfiprintf_r+0x32>
 800e98c:	690b      	ldr	r3, [r1, #16]
 800e98e:	b963      	cbnz	r3, 800e9aa <_svfiprintf_r+0x32>
 800e990:	2140      	movs	r1, #64	; 0x40
 800e992:	f7ff fb8f 	bl	800e0b4 <_malloc_r>
 800e996:	6028      	str	r0, [r5, #0]
 800e998:	6128      	str	r0, [r5, #16]
 800e99a:	b920      	cbnz	r0, 800e9a6 <_svfiprintf_r+0x2e>
 800e99c:	230c      	movs	r3, #12
 800e99e:	603b      	str	r3, [r7, #0]
 800e9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a4:	e0d0      	b.n	800eb48 <_svfiprintf_r+0x1d0>
 800e9a6:	2340      	movs	r3, #64	; 0x40
 800e9a8:	616b      	str	r3, [r5, #20]
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e9ae:	2320      	movs	r3, #32
 800e9b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9b8:	2330      	movs	r3, #48	; 0x30
 800e9ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eb60 <_svfiprintf_r+0x1e8>
 800e9be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9c2:	f04f 0901 	mov.w	r9, #1
 800e9c6:	4623      	mov	r3, r4
 800e9c8:	469a      	mov	sl, r3
 800e9ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9ce:	b10a      	cbz	r2, 800e9d4 <_svfiprintf_r+0x5c>
 800e9d0:	2a25      	cmp	r2, #37	; 0x25
 800e9d2:	d1f9      	bne.n	800e9c8 <_svfiprintf_r+0x50>
 800e9d4:	ebba 0b04 	subs.w	fp, sl, r4
 800e9d8:	d00b      	beq.n	800e9f2 <_svfiprintf_r+0x7a>
 800e9da:	465b      	mov	r3, fp
 800e9dc:	4622      	mov	r2, r4
 800e9de:	4629      	mov	r1, r5
 800e9e0:	4638      	mov	r0, r7
 800e9e2:	f7ff ff6f 	bl	800e8c4 <__ssputs_r>
 800e9e6:	3001      	adds	r0, #1
 800e9e8:	f000 80a9 	beq.w	800eb3e <_svfiprintf_r+0x1c6>
 800e9ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9ee:	445a      	add	r2, fp
 800e9f0:	9209      	str	r2, [sp, #36]	; 0x24
 800e9f2:	f89a 3000 	ldrb.w	r3, [sl]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	f000 80a1 	beq.w	800eb3e <_svfiprintf_r+0x1c6>
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800ea02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea06:	f10a 0a01 	add.w	sl, sl, #1
 800ea0a:	9304      	str	r3, [sp, #16]
 800ea0c:	9307      	str	r3, [sp, #28]
 800ea0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea12:	931a      	str	r3, [sp, #104]	; 0x68
 800ea14:	4654      	mov	r4, sl
 800ea16:	2205      	movs	r2, #5
 800ea18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea1c:	4850      	ldr	r0, [pc, #320]	; (800eb60 <_svfiprintf_r+0x1e8>)
 800ea1e:	f7f1 fbdf 	bl	80001e0 <memchr>
 800ea22:	9a04      	ldr	r2, [sp, #16]
 800ea24:	b9d8      	cbnz	r0, 800ea5e <_svfiprintf_r+0xe6>
 800ea26:	06d0      	lsls	r0, r2, #27
 800ea28:	bf44      	itt	mi
 800ea2a:	2320      	movmi	r3, #32
 800ea2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea30:	0711      	lsls	r1, r2, #28
 800ea32:	bf44      	itt	mi
 800ea34:	232b      	movmi	r3, #43	; 0x2b
 800ea36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ea3e:	2b2a      	cmp	r3, #42	; 0x2a
 800ea40:	d015      	beq.n	800ea6e <_svfiprintf_r+0xf6>
 800ea42:	9a07      	ldr	r2, [sp, #28]
 800ea44:	4654      	mov	r4, sl
 800ea46:	2000      	movs	r0, #0
 800ea48:	f04f 0c0a 	mov.w	ip, #10
 800ea4c:	4621      	mov	r1, r4
 800ea4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea52:	3b30      	subs	r3, #48	; 0x30
 800ea54:	2b09      	cmp	r3, #9
 800ea56:	d94d      	bls.n	800eaf4 <_svfiprintf_r+0x17c>
 800ea58:	b1b0      	cbz	r0, 800ea88 <_svfiprintf_r+0x110>
 800ea5a:	9207      	str	r2, [sp, #28]
 800ea5c:	e014      	b.n	800ea88 <_svfiprintf_r+0x110>
 800ea5e:	eba0 0308 	sub.w	r3, r0, r8
 800ea62:	fa09 f303 	lsl.w	r3, r9, r3
 800ea66:	4313      	orrs	r3, r2
 800ea68:	9304      	str	r3, [sp, #16]
 800ea6a:	46a2      	mov	sl, r4
 800ea6c:	e7d2      	b.n	800ea14 <_svfiprintf_r+0x9c>
 800ea6e:	9b03      	ldr	r3, [sp, #12]
 800ea70:	1d19      	adds	r1, r3, #4
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	9103      	str	r1, [sp, #12]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	bfbb      	ittet	lt
 800ea7a:	425b      	neglt	r3, r3
 800ea7c:	f042 0202 	orrlt.w	r2, r2, #2
 800ea80:	9307      	strge	r3, [sp, #28]
 800ea82:	9307      	strlt	r3, [sp, #28]
 800ea84:	bfb8      	it	lt
 800ea86:	9204      	strlt	r2, [sp, #16]
 800ea88:	7823      	ldrb	r3, [r4, #0]
 800ea8a:	2b2e      	cmp	r3, #46	; 0x2e
 800ea8c:	d10c      	bne.n	800eaa8 <_svfiprintf_r+0x130>
 800ea8e:	7863      	ldrb	r3, [r4, #1]
 800ea90:	2b2a      	cmp	r3, #42	; 0x2a
 800ea92:	d134      	bne.n	800eafe <_svfiprintf_r+0x186>
 800ea94:	9b03      	ldr	r3, [sp, #12]
 800ea96:	1d1a      	adds	r2, r3, #4
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	9203      	str	r2, [sp, #12]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	bfb8      	it	lt
 800eaa0:	f04f 33ff 	movlt.w	r3, #4294967295
 800eaa4:	3402      	adds	r4, #2
 800eaa6:	9305      	str	r3, [sp, #20]
 800eaa8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800eb70 <_svfiprintf_r+0x1f8>
 800eaac:	7821      	ldrb	r1, [r4, #0]
 800eaae:	2203      	movs	r2, #3
 800eab0:	4650      	mov	r0, sl
 800eab2:	f7f1 fb95 	bl	80001e0 <memchr>
 800eab6:	b138      	cbz	r0, 800eac8 <_svfiprintf_r+0x150>
 800eab8:	9b04      	ldr	r3, [sp, #16]
 800eaba:	eba0 000a 	sub.w	r0, r0, sl
 800eabe:	2240      	movs	r2, #64	; 0x40
 800eac0:	4082      	lsls	r2, r0
 800eac2:	4313      	orrs	r3, r2
 800eac4:	3401      	adds	r4, #1
 800eac6:	9304      	str	r3, [sp, #16]
 800eac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eacc:	4825      	ldr	r0, [pc, #148]	; (800eb64 <_svfiprintf_r+0x1ec>)
 800eace:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ead2:	2206      	movs	r2, #6
 800ead4:	f7f1 fb84 	bl	80001e0 <memchr>
 800ead8:	2800      	cmp	r0, #0
 800eada:	d038      	beq.n	800eb4e <_svfiprintf_r+0x1d6>
 800eadc:	4b22      	ldr	r3, [pc, #136]	; (800eb68 <_svfiprintf_r+0x1f0>)
 800eade:	bb1b      	cbnz	r3, 800eb28 <_svfiprintf_r+0x1b0>
 800eae0:	9b03      	ldr	r3, [sp, #12]
 800eae2:	3307      	adds	r3, #7
 800eae4:	f023 0307 	bic.w	r3, r3, #7
 800eae8:	3308      	adds	r3, #8
 800eaea:	9303      	str	r3, [sp, #12]
 800eaec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaee:	4433      	add	r3, r6
 800eaf0:	9309      	str	r3, [sp, #36]	; 0x24
 800eaf2:	e768      	b.n	800e9c6 <_svfiprintf_r+0x4e>
 800eaf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800eaf8:	460c      	mov	r4, r1
 800eafa:	2001      	movs	r0, #1
 800eafc:	e7a6      	b.n	800ea4c <_svfiprintf_r+0xd4>
 800eafe:	2300      	movs	r3, #0
 800eb00:	3401      	adds	r4, #1
 800eb02:	9305      	str	r3, [sp, #20]
 800eb04:	4619      	mov	r1, r3
 800eb06:	f04f 0c0a 	mov.w	ip, #10
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb10:	3a30      	subs	r2, #48	; 0x30
 800eb12:	2a09      	cmp	r2, #9
 800eb14:	d903      	bls.n	800eb1e <_svfiprintf_r+0x1a6>
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d0c6      	beq.n	800eaa8 <_svfiprintf_r+0x130>
 800eb1a:	9105      	str	r1, [sp, #20]
 800eb1c:	e7c4      	b.n	800eaa8 <_svfiprintf_r+0x130>
 800eb1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb22:	4604      	mov	r4, r0
 800eb24:	2301      	movs	r3, #1
 800eb26:	e7f0      	b.n	800eb0a <_svfiprintf_r+0x192>
 800eb28:	ab03      	add	r3, sp, #12
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	462a      	mov	r2, r5
 800eb2e:	4b0f      	ldr	r3, [pc, #60]	; (800eb6c <_svfiprintf_r+0x1f4>)
 800eb30:	a904      	add	r1, sp, #16
 800eb32:	4638      	mov	r0, r7
 800eb34:	f7fd fe4e 	bl	800c7d4 <_printf_float>
 800eb38:	1c42      	adds	r2, r0, #1
 800eb3a:	4606      	mov	r6, r0
 800eb3c:	d1d6      	bne.n	800eaec <_svfiprintf_r+0x174>
 800eb3e:	89ab      	ldrh	r3, [r5, #12]
 800eb40:	065b      	lsls	r3, r3, #25
 800eb42:	f53f af2d 	bmi.w	800e9a0 <_svfiprintf_r+0x28>
 800eb46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb48:	b01d      	add	sp, #116	; 0x74
 800eb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb4e:	ab03      	add	r3, sp, #12
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	462a      	mov	r2, r5
 800eb54:	4b05      	ldr	r3, [pc, #20]	; (800eb6c <_svfiprintf_r+0x1f4>)
 800eb56:	a904      	add	r1, sp, #16
 800eb58:	4638      	mov	r0, r7
 800eb5a:	f7fe f8df 	bl	800cd1c <_printf_i>
 800eb5e:	e7eb      	b.n	800eb38 <_svfiprintf_r+0x1c0>
 800eb60:	0800f674 	.word	0x0800f674
 800eb64:	0800f67e 	.word	0x0800f67e
 800eb68:	0800c7d5 	.word	0x0800c7d5
 800eb6c:	0800e8c5 	.word	0x0800e8c5
 800eb70:	0800f67a 	.word	0x0800f67a

0800eb74 <__sflush_r>:
 800eb74:	898a      	ldrh	r2, [r1, #12]
 800eb76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb7a:	4605      	mov	r5, r0
 800eb7c:	0710      	lsls	r0, r2, #28
 800eb7e:	460c      	mov	r4, r1
 800eb80:	d458      	bmi.n	800ec34 <__sflush_r+0xc0>
 800eb82:	684b      	ldr	r3, [r1, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	dc05      	bgt.n	800eb94 <__sflush_r+0x20>
 800eb88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	dc02      	bgt.n	800eb94 <__sflush_r+0x20>
 800eb8e:	2000      	movs	r0, #0
 800eb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb96:	2e00      	cmp	r6, #0
 800eb98:	d0f9      	beq.n	800eb8e <__sflush_r+0x1a>
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eba0:	682f      	ldr	r7, [r5, #0]
 800eba2:	6a21      	ldr	r1, [r4, #32]
 800eba4:	602b      	str	r3, [r5, #0]
 800eba6:	d032      	beq.n	800ec0e <__sflush_r+0x9a>
 800eba8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebaa:	89a3      	ldrh	r3, [r4, #12]
 800ebac:	075a      	lsls	r2, r3, #29
 800ebae:	d505      	bpl.n	800ebbc <__sflush_r+0x48>
 800ebb0:	6863      	ldr	r3, [r4, #4]
 800ebb2:	1ac0      	subs	r0, r0, r3
 800ebb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebb6:	b10b      	cbz	r3, 800ebbc <__sflush_r+0x48>
 800ebb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebba:	1ac0      	subs	r0, r0, r3
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebc2:	6a21      	ldr	r1, [r4, #32]
 800ebc4:	4628      	mov	r0, r5
 800ebc6:	47b0      	blx	r6
 800ebc8:	1c43      	adds	r3, r0, #1
 800ebca:	89a3      	ldrh	r3, [r4, #12]
 800ebcc:	d106      	bne.n	800ebdc <__sflush_r+0x68>
 800ebce:	6829      	ldr	r1, [r5, #0]
 800ebd0:	291d      	cmp	r1, #29
 800ebd2:	d82b      	bhi.n	800ec2c <__sflush_r+0xb8>
 800ebd4:	4a29      	ldr	r2, [pc, #164]	; (800ec7c <__sflush_r+0x108>)
 800ebd6:	410a      	asrs	r2, r1
 800ebd8:	07d6      	lsls	r6, r2, #31
 800ebda:	d427      	bmi.n	800ec2c <__sflush_r+0xb8>
 800ebdc:	2200      	movs	r2, #0
 800ebde:	6062      	str	r2, [r4, #4]
 800ebe0:	04d9      	lsls	r1, r3, #19
 800ebe2:	6922      	ldr	r2, [r4, #16]
 800ebe4:	6022      	str	r2, [r4, #0]
 800ebe6:	d504      	bpl.n	800ebf2 <__sflush_r+0x7e>
 800ebe8:	1c42      	adds	r2, r0, #1
 800ebea:	d101      	bne.n	800ebf0 <__sflush_r+0x7c>
 800ebec:	682b      	ldr	r3, [r5, #0]
 800ebee:	b903      	cbnz	r3, 800ebf2 <__sflush_r+0x7e>
 800ebf0:	6560      	str	r0, [r4, #84]	; 0x54
 800ebf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebf4:	602f      	str	r7, [r5, #0]
 800ebf6:	2900      	cmp	r1, #0
 800ebf8:	d0c9      	beq.n	800eb8e <__sflush_r+0x1a>
 800ebfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebfe:	4299      	cmp	r1, r3
 800ec00:	d002      	beq.n	800ec08 <__sflush_r+0x94>
 800ec02:	4628      	mov	r0, r5
 800ec04:	f7ff f9e2 	bl	800dfcc <_free_r>
 800ec08:	2000      	movs	r0, #0
 800ec0a:	6360      	str	r0, [r4, #52]	; 0x34
 800ec0c:	e7c0      	b.n	800eb90 <__sflush_r+0x1c>
 800ec0e:	2301      	movs	r3, #1
 800ec10:	4628      	mov	r0, r5
 800ec12:	47b0      	blx	r6
 800ec14:	1c41      	adds	r1, r0, #1
 800ec16:	d1c8      	bne.n	800ebaa <__sflush_r+0x36>
 800ec18:	682b      	ldr	r3, [r5, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d0c5      	beq.n	800ebaa <__sflush_r+0x36>
 800ec1e:	2b1d      	cmp	r3, #29
 800ec20:	d001      	beq.n	800ec26 <__sflush_r+0xb2>
 800ec22:	2b16      	cmp	r3, #22
 800ec24:	d101      	bne.n	800ec2a <__sflush_r+0xb6>
 800ec26:	602f      	str	r7, [r5, #0]
 800ec28:	e7b1      	b.n	800eb8e <__sflush_r+0x1a>
 800ec2a:	89a3      	ldrh	r3, [r4, #12]
 800ec2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec30:	81a3      	strh	r3, [r4, #12]
 800ec32:	e7ad      	b.n	800eb90 <__sflush_r+0x1c>
 800ec34:	690f      	ldr	r7, [r1, #16]
 800ec36:	2f00      	cmp	r7, #0
 800ec38:	d0a9      	beq.n	800eb8e <__sflush_r+0x1a>
 800ec3a:	0793      	lsls	r3, r2, #30
 800ec3c:	680e      	ldr	r6, [r1, #0]
 800ec3e:	bf08      	it	eq
 800ec40:	694b      	ldreq	r3, [r1, #20]
 800ec42:	600f      	str	r7, [r1, #0]
 800ec44:	bf18      	it	ne
 800ec46:	2300      	movne	r3, #0
 800ec48:	eba6 0807 	sub.w	r8, r6, r7
 800ec4c:	608b      	str	r3, [r1, #8]
 800ec4e:	f1b8 0f00 	cmp.w	r8, #0
 800ec52:	dd9c      	ble.n	800eb8e <__sflush_r+0x1a>
 800ec54:	6a21      	ldr	r1, [r4, #32]
 800ec56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec58:	4643      	mov	r3, r8
 800ec5a:	463a      	mov	r2, r7
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	47b0      	blx	r6
 800ec60:	2800      	cmp	r0, #0
 800ec62:	dc06      	bgt.n	800ec72 <__sflush_r+0xfe>
 800ec64:	89a3      	ldrh	r3, [r4, #12]
 800ec66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec6a:	81a3      	strh	r3, [r4, #12]
 800ec6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec70:	e78e      	b.n	800eb90 <__sflush_r+0x1c>
 800ec72:	4407      	add	r7, r0
 800ec74:	eba8 0800 	sub.w	r8, r8, r0
 800ec78:	e7e9      	b.n	800ec4e <__sflush_r+0xda>
 800ec7a:	bf00      	nop
 800ec7c:	dfbffffe 	.word	0xdfbffffe

0800ec80 <_fflush_r>:
 800ec80:	b538      	push	{r3, r4, r5, lr}
 800ec82:	690b      	ldr	r3, [r1, #16]
 800ec84:	4605      	mov	r5, r0
 800ec86:	460c      	mov	r4, r1
 800ec88:	b913      	cbnz	r3, 800ec90 <_fflush_r+0x10>
 800ec8a:	2500      	movs	r5, #0
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	bd38      	pop	{r3, r4, r5, pc}
 800ec90:	b118      	cbz	r0, 800ec9a <_fflush_r+0x1a>
 800ec92:	6a03      	ldr	r3, [r0, #32]
 800ec94:	b90b      	cbnz	r3, 800ec9a <_fflush_r+0x1a>
 800ec96:	f7fe f9ef 	bl	800d078 <__sinit>
 800ec9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d0f3      	beq.n	800ec8a <_fflush_r+0xa>
 800eca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eca4:	07d0      	lsls	r0, r2, #31
 800eca6:	d404      	bmi.n	800ecb2 <_fflush_r+0x32>
 800eca8:	0599      	lsls	r1, r3, #22
 800ecaa:	d402      	bmi.n	800ecb2 <_fflush_r+0x32>
 800ecac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecae:	f7fe fb0e 	bl	800d2ce <__retarget_lock_acquire_recursive>
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	4621      	mov	r1, r4
 800ecb6:	f7ff ff5d 	bl	800eb74 <__sflush_r>
 800ecba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecbc:	07da      	lsls	r2, r3, #31
 800ecbe:	4605      	mov	r5, r0
 800ecc0:	d4e4      	bmi.n	800ec8c <_fflush_r+0xc>
 800ecc2:	89a3      	ldrh	r3, [r4, #12]
 800ecc4:	059b      	lsls	r3, r3, #22
 800ecc6:	d4e1      	bmi.n	800ec8c <_fflush_r+0xc>
 800ecc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecca:	f7fe fb01 	bl	800d2d0 <__retarget_lock_release_recursive>
 800ecce:	e7dd      	b.n	800ec8c <_fflush_r+0xc>

0800ecd0 <memmove>:
 800ecd0:	4288      	cmp	r0, r1
 800ecd2:	b510      	push	{r4, lr}
 800ecd4:	eb01 0402 	add.w	r4, r1, r2
 800ecd8:	d902      	bls.n	800ece0 <memmove+0x10>
 800ecda:	4284      	cmp	r4, r0
 800ecdc:	4623      	mov	r3, r4
 800ecde:	d807      	bhi.n	800ecf0 <memmove+0x20>
 800ece0:	1e43      	subs	r3, r0, #1
 800ece2:	42a1      	cmp	r1, r4
 800ece4:	d008      	beq.n	800ecf8 <memmove+0x28>
 800ece6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ecea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ecee:	e7f8      	b.n	800ece2 <memmove+0x12>
 800ecf0:	4402      	add	r2, r0
 800ecf2:	4601      	mov	r1, r0
 800ecf4:	428a      	cmp	r2, r1
 800ecf6:	d100      	bne.n	800ecfa <memmove+0x2a>
 800ecf8:	bd10      	pop	{r4, pc}
 800ecfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed02:	e7f7      	b.n	800ecf4 <memmove+0x24>

0800ed04 <_sbrk_r>:
 800ed04:	b538      	push	{r3, r4, r5, lr}
 800ed06:	4d06      	ldr	r5, [pc, #24]	; (800ed20 <_sbrk_r+0x1c>)
 800ed08:	2300      	movs	r3, #0
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	4608      	mov	r0, r1
 800ed0e:	602b      	str	r3, [r5, #0]
 800ed10:	f7f3 f94e 	bl	8001fb0 <_sbrk>
 800ed14:	1c43      	adds	r3, r0, #1
 800ed16:	d102      	bne.n	800ed1e <_sbrk_r+0x1a>
 800ed18:	682b      	ldr	r3, [r5, #0]
 800ed1a:	b103      	cbz	r3, 800ed1e <_sbrk_r+0x1a>
 800ed1c:	6023      	str	r3, [r4, #0]
 800ed1e:	bd38      	pop	{r3, r4, r5, pc}
 800ed20:	200022b0 	.word	0x200022b0

0800ed24 <memcpy>:
 800ed24:	440a      	add	r2, r1
 800ed26:	4291      	cmp	r1, r2
 800ed28:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed2c:	d100      	bne.n	800ed30 <memcpy+0xc>
 800ed2e:	4770      	bx	lr
 800ed30:	b510      	push	{r4, lr}
 800ed32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed3a:	4291      	cmp	r1, r2
 800ed3c:	d1f9      	bne.n	800ed32 <memcpy+0xe>
 800ed3e:	bd10      	pop	{r4, pc}

0800ed40 <__assert_func>:
 800ed40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed42:	4614      	mov	r4, r2
 800ed44:	461a      	mov	r2, r3
 800ed46:	4b09      	ldr	r3, [pc, #36]	; (800ed6c <__assert_func+0x2c>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4605      	mov	r5, r0
 800ed4c:	68d8      	ldr	r0, [r3, #12]
 800ed4e:	b14c      	cbz	r4, 800ed64 <__assert_func+0x24>
 800ed50:	4b07      	ldr	r3, [pc, #28]	; (800ed70 <__assert_func+0x30>)
 800ed52:	9100      	str	r1, [sp, #0]
 800ed54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed58:	4906      	ldr	r1, [pc, #24]	; (800ed74 <__assert_func+0x34>)
 800ed5a:	462b      	mov	r3, r5
 800ed5c:	f000 f872 	bl	800ee44 <fiprintf>
 800ed60:	f000 f882 	bl	800ee68 <abort>
 800ed64:	4b04      	ldr	r3, [pc, #16]	; (800ed78 <__assert_func+0x38>)
 800ed66:	461c      	mov	r4, r3
 800ed68:	e7f3      	b.n	800ed52 <__assert_func+0x12>
 800ed6a:	bf00      	nop
 800ed6c:	20000178 	.word	0x20000178
 800ed70:	0800f68f 	.word	0x0800f68f
 800ed74:	0800f69c 	.word	0x0800f69c
 800ed78:	0800f6ca 	.word	0x0800f6ca

0800ed7c <_calloc_r>:
 800ed7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed7e:	fba1 2402 	umull	r2, r4, r1, r2
 800ed82:	b94c      	cbnz	r4, 800ed98 <_calloc_r+0x1c>
 800ed84:	4611      	mov	r1, r2
 800ed86:	9201      	str	r2, [sp, #4]
 800ed88:	f7ff f994 	bl	800e0b4 <_malloc_r>
 800ed8c:	9a01      	ldr	r2, [sp, #4]
 800ed8e:	4605      	mov	r5, r0
 800ed90:	b930      	cbnz	r0, 800eda0 <_calloc_r+0x24>
 800ed92:	4628      	mov	r0, r5
 800ed94:	b003      	add	sp, #12
 800ed96:	bd30      	pop	{r4, r5, pc}
 800ed98:	220c      	movs	r2, #12
 800ed9a:	6002      	str	r2, [r0, #0]
 800ed9c:	2500      	movs	r5, #0
 800ed9e:	e7f8      	b.n	800ed92 <_calloc_r+0x16>
 800eda0:	4621      	mov	r1, r4
 800eda2:	f7fe fa16 	bl	800d1d2 <memset>
 800eda6:	e7f4      	b.n	800ed92 <_calloc_r+0x16>

0800eda8 <__ascii_mbtowc>:
 800eda8:	b082      	sub	sp, #8
 800edaa:	b901      	cbnz	r1, 800edae <__ascii_mbtowc+0x6>
 800edac:	a901      	add	r1, sp, #4
 800edae:	b142      	cbz	r2, 800edc2 <__ascii_mbtowc+0x1a>
 800edb0:	b14b      	cbz	r3, 800edc6 <__ascii_mbtowc+0x1e>
 800edb2:	7813      	ldrb	r3, [r2, #0]
 800edb4:	600b      	str	r3, [r1, #0]
 800edb6:	7812      	ldrb	r2, [r2, #0]
 800edb8:	1e10      	subs	r0, r2, #0
 800edba:	bf18      	it	ne
 800edbc:	2001      	movne	r0, #1
 800edbe:	b002      	add	sp, #8
 800edc0:	4770      	bx	lr
 800edc2:	4610      	mov	r0, r2
 800edc4:	e7fb      	b.n	800edbe <__ascii_mbtowc+0x16>
 800edc6:	f06f 0001 	mvn.w	r0, #1
 800edca:	e7f8      	b.n	800edbe <__ascii_mbtowc+0x16>

0800edcc <_realloc_r>:
 800edcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edd0:	4680      	mov	r8, r0
 800edd2:	4614      	mov	r4, r2
 800edd4:	460e      	mov	r6, r1
 800edd6:	b921      	cbnz	r1, 800ede2 <_realloc_r+0x16>
 800edd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eddc:	4611      	mov	r1, r2
 800edde:	f7ff b969 	b.w	800e0b4 <_malloc_r>
 800ede2:	b92a      	cbnz	r2, 800edf0 <_realloc_r+0x24>
 800ede4:	f7ff f8f2 	bl	800dfcc <_free_r>
 800ede8:	4625      	mov	r5, r4
 800edea:	4628      	mov	r0, r5
 800edec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edf0:	f000 f841 	bl	800ee76 <_malloc_usable_size_r>
 800edf4:	4284      	cmp	r4, r0
 800edf6:	4607      	mov	r7, r0
 800edf8:	d802      	bhi.n	800ee00 <_realloc_r+0x34>
 800edfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800edfe:	d812      	bhi.n	800ee26 <_realloc_r+0x5a>
 800ee00:	4621      	mov	r1, r4
 800ee02:	4640      	mov	r0, r8
 800ee04:	f7ff f956 	bl	800e0b4 <_malloc_r>
 800ee08:	4605      	mov	r5, r0
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	d0ed      	beq.n	800edea <_realloc_r+0x1e>
 800ee0e:	42bc      	cmp	r4, r7
 800ee10:	4622      	mov	r2, r4
 800ee12:	4631      	mov	r1, r6
 800ee14:	bf28      	it	cs
 800ee16:	463a      	movcs	r2, r7
 800ee18:	f7ff ff84 	bl	800ed24 <memcpy>
 800ee1c:	4631      	mov	r1, r6
 800ee1e:	4640      	mov	r0, r8
 800ee20:	f7ff f8d4 	bl	800dfcc <_free_r>
 800ee24:	e7e1      	b.n	800edea <_realloc_r+0x1e>
 800ee26:	4635      	mov	r5, r6
 800ee28:	e7df      	b.n	800edea <_realloc_r+0x1e>

0800ee2a <__ascii_wctomb>:
 800ee2a:	b149      	cbz	r1, 800ee40 <__ascii_wctomb+0x16>
 800ee2c:	2aff      	cmp	r2, #255	; 0xff
 800ee2e:	bf85      	ittet	hi
 800ee30:	238a      	movhi	r3, #138	; 0x8a
 800ee32:	6003      	strhi	r3, [r0, #0]
 800ee34:	700a      	strbls	r2, [r1, #0]
 800ee36:	f04f 30ff 	movhi.w	r0, #4294967295
 800ee3a:	bf98      	it	ls
 800ee3c:	2001      	movls	r0, #1
 800ee3e:	4770      	bx	lr
 800ee40:	4608      	mov	r0, r1
 800ee42:	4770      	bx	lr

0800ee44 <fiprintf>:
 800ee44:	b40e      	push	{r1, r2, r3}
 800ee46:	b503      	push	{r0, r1, lr}
 800ee48:	4601      	mov	r1, r0
 800ee4a:	ab03      	add	r3, sp, #12
 800ee4c:	4805      	ldr	r0, [pc, #20]	; (800ee64 <fiprintf+0x20>)
 800ee4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee52:	6800      	ldr	r0, [r0, #0]
 800ee54:	9301      	str	r3, [sp, #4]
 800ee56:	f000 f83f 	bl	800eed8 <_vfiprintf_r>
 800ee5a:	b002      	add	sp, #8
 800ee5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee60:	b003      	add	sp, #12
 800ee62:	4770      	bx	lr
 800ee64:	20000178 	.word	0x20000178

0800ee68 <abort>:
 800ee68:	b508      	push	{r3, lr}
 800ee6a:	2006      	movs	r0, #6
 800ee6c:	f000 fa0c 	bl	800f288 <raise>
 800ee70:	2001      	movs	r0, #1
 800ee72:	f7f3 f825 	bl	8001ec0 <_exit>

0800ee76 <_malloc_usable_size_r>:
 800ee76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee7a:	1f18      	subs	r0, r3, #4
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	bfbc      	itt	lt
 800ee80:	580b      	ldrlt	r3, [r1, r0]
 800ee82:	18c0      	addlt	r0, r0, r3
 800ee84:	4770      	bx	lr

0800ee86 <__sfputc_r>:
 800ee86:	6893      	ldr	r3, [r2, #8]
 800ee88:	3b01      	subs	r3, #1
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	b410      	push	{r4}
 800ee8e:	6093      	str	r3, [r2, #8]
 800ee90:	da08      	bge.n	800eea4 <__sfputc_r+0x1e>
 800ee92:	6994      	ldr	r4, [r2, #24]
 800ee94:	42a3      	cmp	r3, r4
 800ee96:	db01      	blt.n	800ee9c <__sfputc_r+0x16>
 800ee98:	290a      	cmp	r1, #10
 800ee9a:	d103      	bne.n	800eea4 <__sfputc_r+0x1e>
 800ee9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eea0:	f000 b934 	b.w	800f10c <__swbuf_r>
 800eea4:	6813      	ldr	r3, [r2, #0]
 800eea6:	1c58      	adds	r0, r3, #1
 800eea8:	6010      	str	r0, [r2, #0]
 800eeaa:	7019      	strb	r1, [r3, #0]
 800eeac:	4608      	mov	r0, r1
 800eeae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <__sfputs_r>:
 800eeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeb6:	4606      	mov	r6, r0
 800eeb8:	460f      	mov	r7, r1
 800eeba:	4614      	mov	r4, r2
 800eebc:	18d5      	adds	r5, r2, r3
 800eebe:	42ac      	cmp	r4, r5
 800eec0:	d101      	bne.n	800eec6 <__sfputs_r+0x12>
 800eec2:	2000      	movs	r0, #0
 800eec4:	e007      	b.n	800eed6 <__sfputs_r+0x22>
 800eec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeca:	463a      	mov	r2, r7
 800eecc:	4630      	mov	r0, r6
 800eece:	f7ff ffda 	bl	800ee86 <__sfputc_r>
 800eed2:	1c43      	adds	r3, r0, #1
 800eed4:	d1f3      	bne.n	800eebe <__sfputs_r+0xa>
 800eed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eed8 <_vfiprintf_r>:
 800eed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eedc:	460d      	mov	r5, r1
 800eede:	b09d      	sub	sp, #116	; 0x74
 800eee0:	4614      	mov	r4, r2
 800eee2:	4698      	mov	r8, r3
 800eee4:	4606      	mov	r6, r0
 800eee6:	b118      	cbz	r0, 800eef0 <_vfiprintf_r+0x18>
 800eee8:	6a03      	ldr	r3, [r0, #32]
 800eeea:	b90b      	cbnz	r3, 800eef0 <_vfiprintf_r+0x18>
 800eeec:	f7fe f8c4 	bl	800d078 <__sinit>
 800eef0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eef2:	07d9      	lsls	r1, r3, #31
 800eef4:	d405      	bmi.n	800ef02 <_vfiprintf_r+0x2a>
 800eef6:	89ab      	ldrh	r3, [r5, #12]
 800eef8:	059a      	lsls	r2, r3, #22
 800eefa:	d402      	bmi.n	800ef02 <_vfiprintf_r+0x2a>
 800eefc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eefe:	f7fe f9e6 	bl	800d2ce <__retarget_lock_acquire_recursive>
 800ef02:	89ab      	ldrh	r3, [r5, #12]
 800ef04:	071b      	lsls	r3, r3, #28
 800ef06:	d501      	bpl.n	800ef0c <_vfiprintf_r+0x34>
 800ef08:	692b      	ldr	r3, [r5, #16]
 800ef0a:	b99b      	cbnz	r3, 800ef34 <_vfiprintf_r+0x5c>
 800ef0c:	4629      	mov	r1, r5
 800ef0e:	4630      	mov	r0, r6
 800ef10:	f000 f93a 	bl	800f188 <__swsetup_r>
 800ef14:	b170      	cbz	r0, 800ef34 <_vfiprintf_r+0x5c>
 800ef16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef18:	07dc      	lsls	r4, r3, #31
 800ef1a:	d504      	bpl.n	800ef26 <_vfiprintf_r+0x4e>
 800ef1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef20:	b01d      	add	sp, #116	; 0x74
 800ef22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef26:	89ab      	ldrh	r3, [r5, #12]
 800ef28:	0598      	lsls	r0, r3, #22
 800ef2a:	d4f7      	bmi.n	800ef1c <_vfiprintf_r+0x44>
 800ef2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef2e:	f7fe f9cf 	bl	800d2d0 <__retarget_lock_release_recursive>
 800ef32:	e7f3      	b.n	800ef1c <_vfiprintf_r+0x44>
 800ef34:	2300      	movs	r3, #0
 800ef36:	9309      	str	r3, [sp, #36]	; 0x24
 800ef38:	2320      	movs	r3, #32
 800ef3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef42:	2330      	movs	r3, #48	; 0x30
 800ef44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f0f8 <_vfiprintf_r+0x220>
 800ef48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef4c:	f04f 0901 	mov.w	r9, #1
 800ef50:	4623      	mov	r3, r4
 800ef52:	469a      	mov	sl, r3
 800ef54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef58:	b10a      	cbz	r2, 800ef5e <_vfiprintf_r+0x86>
 800ef5a:	2a25      	cmp	r2, #37	; 0x25
 800ef5c:	d1f9      	bne.n	800ef52 <_vfiprintf_r+0x7a>
 800ef5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ef62:	d00b      	beq.n	800ef7c <_vfiprintf_r+0xa4>
 800ef64:	465b      	mov	r3, fp
 800ef66:	4622      	mov	r2, r4
 800ef68:	4629      	mov	r1, r5
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	f7ff ffa2 	bl	800eeb4 <__sfputs_r>
 800ef70:	3001      	adds	r0, #1
 800ef72:	f000 80a9 	beq.w	800f0c8 <_vfiprintf_r+0x1f0>
 800ef76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef78:	445a      	add	r2, fp
 800ef7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ef7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	f000 80a1 	beq.w	800f0c8 <_vfiprintf_r+0x1f0>
 800ef86:	2300      	movs	r3, #0
 800ef88:	f04f 32ff 	mov.w	r2, #4294967295
 800ef8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef90:	f10a 0a01 	add.w	sl, sl, #1
 800ef94:	9304      	str	r3, [sp, #16]
 800ef96:	9307      	str	r3, [sp, #28]
 800ef98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ef9e:	4654      	mov	r4, sl
 800efa0:	2205      	movs	r2, #5
 800efa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efa6:	4854      	ldr	r0, [pc, #336]	; (800f0f8 <_vfiprintf_r+0x220>)
 800efa8:	f7f1 f91a 	bl	80001e0 <memchr>
 800efac:	9a04      	ldr	r2, [sp, #16]
 800efae:	b9d8      	cbnz	r0, 800efe8 <_vfiprintf_r+0x110>
 800efb0:	06d1      	lsls	r1, r2, #27
 800efb2:	bf44      	itt	mi
 800efb4:	2320      	movmi	r3, #32
 800efb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efba:	0713      	lsls	r3, r2, #28
 800efbc:	bf44      	itt	mi
 800efbe:	232b      	movmi	r3, #43	; 0x2b
 800efc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efc4:	f89a 3000 	ldrb.w	r3, [sl]
 800efc8:	2b2a      	cmp	r3, #42	; 0x2a
 800efca:	d015      	beq.n	800eff8 <_vfiprintf_r+0x120>
 800efcc:	9a07      	ldr	r2, [sp, #28]
 800efce:	4654      	mov	r4, sl
 800efd0:	2000      	movs	r0, #0
 800efd2:	f04f 0c0a 	mov.w	ip, #10
 800efd6:	4621      	mov	r1, r4
 800efd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efdc:	3b30      	subs	r3, #48	; 0x30
 800efde:	2b09      	cmp	r3, #9
 800efe0:	d94d      	bls.n	800f07e <_vfiprintf_r+0x1a6>
 800efe2:	b1b0      	cbz	r0, 800f012 <_vfiprintf_r+0x13a>
 800efe4:	9207      	str	r2, [sp, #28]
 800efe6:	e014      	b.n	800f012 <_vfiprintf_r+0x13a>
 800efe8:	eba0 0308 	sub.w	r3, r0, r8
 800efec:	fa09 f303 	lsl.w	r3, r9, r3
 800eff0:	4313      	orrs	r3, r2
 800eff2:	9304      	str	r3, [sp, #16]
 800eff4:	46a2      	mov	sl, r4
 800eff6:	e7d2      	b.n	800ef9e <_vfiprintf_r+0xc6>
 800eff8:	9b03      	ldr	r3, [sp, #12]
 800effa:	1d19      	adds	r1, r3, #4
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	9103      	str	r1, [sp, #12]
 800f000:	2b00      	cmp	r3, #0
 800f002:	bfbb      	ittet	lt
 800f004:	425b      	neglt	r3, r3
 800f006:	f042 0202 	orrlt.w	r2, r2, #2
 800f00a:	9307      	strge	r3, [sp, #28]
 800f00c:	9307      	strlt	r3, [sp, #28]
 800f00e:	bfb8      	it	lt
 800f010:	9204      	strlt	r2, [sp, #16]
 800f012:	7823      	ldrb	r3, [r4, #0]
 800f014:	2b2e      	cmp	r3, #46	; 0x2e
 800f016:	d10c      	bne.n	800f032 <_vfiprintf_r+0x15a>
 800f018:	7863      	ldrb	r3, [r4, #1]
 800f01a:	2b2a      	cmp	r3, #42	; 0x2a
 800f01c:	d134      	bne.n	800f088 <_vfiprintf_r+0x1b0>
 800f01e:	9b03      	ldr	r3, [sp, #12]
 800f020:	1d1a      	adds	r2, r3, #4
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	9203      	str	r2, [sp, #12]
 800f026:	2b00      	cmp	r3, #0
 800f028:	bfb8      	it	lt
 800f02a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f02e:	3402      	adds	r4, #2
 800f030:	9305      	str	r3, [sp, #20]
 800f032:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f108 <_vfiprintf_r+0x230>
 800f036:	7821      	ldrb	r1, [r4, #0]
 800f038:	2203      	movs	r2, #3
 800f03a:	4650      	mov	r0, sl
 800f03c:	f7f1 f8d0 	bl	80001e0 <memchr>
 800f040:	b138      	cbz	r0, 800f052 <_vfiprintf_r+0x17a>
 800f042:	9b04      	ldr	r3, [sp, #16]
 800f044:	eba0 000a 	sub.w	r0, r0, sl
 800f048:	2240      	movs	r2, #64	; 0x40
 800f04a:	4082      	lsls	r2, r0
 800f04c:	4313      	orrs	r3, r2
 800f04e:	3401      	adds	r4, #1
 800f050:	9304      	str	r3, [sp, #16]
 800f052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f056:	4829      	ldr	r0, [pc, #164]	; (800f0fc <_vfiprintf_r+0x224>)
 800f058:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f05c:	2206      	movs	r2, #6
 800f05e:	f7f1 f8bf 	bl	80001e0 <memchr>
 800f062:	2800      	cmp	r0, #0
 800f064:	d03f      	beq.n	800f0e6 <_vfiprintf_r+0x20e>
 800f066:	4b26      	ldr	r3, [pc, #152]	; (800f100 <_vfiprintf_r+0x228>)
 800f068:	bb1b      	cbnz	r3, 800f0b2 <_vfiprintf_r+0x1da>
 800f06a:	9b03      	ldr	r3, [sp, #12]
 800f06c:	3307      	adds	r3, #7
 800f06e:	f023 0307 	bic.w	r3, r3, #7
 800f072:	3308      	adds	r3, #8
 800f074:	9303      	str	r3, [sp, #12]
 800f076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f078:	443b      	add	r3, r7
 800f07a:	9309      	str	r3, [sp, #36]	; 0x24
 800f07c:	e768      	b.n	800ef50 <_vfiprintf_r+0x78>
 800f07e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f082:	460c      	mov	r4, r1
 800f084:	2001      	movs	r0, #1
 800f086:	e7a6      	b.n	800efd6 <_vfiprintf_r+0xfe>
 800f088:	2300      	movs	r3, #0
 800f08a:	3401      	adds	r4, #1
 800f08c:	9305      	str	r3, [sp, #20]
 800f08e:	4619      	mov	r1, r3
 800f090:	f04f 0c0a 	mov.w	ip, #10
 800f094:	4620      	mov	r0, r4
 800f096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f09a:	3a30      	subs	r2, #48	; 0x30
 800f09c:	2a09      	cmp	r2, #9
 800f09e:	d903      	bls.n	800f0a8 <_vfiprintf_r+0x1d0>
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d0c6      	beq.n	800f032 <_vfiprintf_r+0x15a>
 800f0a4:	9105      	str	r1, [sp, #20]
 800f0a6:	e7c4      	b.n	800f032 <_vfiprintf_r+0x15a>
 800f0a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0ac:	4604      	mov	r4, r0
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e7f0      	b.n	800f094 <_vfiprintf_r+0x1bc>
 800f0b2:	ab03      	add	r3, sp, #12
 800f0b4:	9300      	str	r3, [sp, #0]
 800f0b6:	462a      	mov	r2, r5
 800f0b8:	4b12      	ldr	r3, [pc, #72]	; (800f104 <_vfiprintf_r+0x22c>)
 800f0ba:	a904      	add	r1, sp, #16
 800f0bc:	4630      	mov	r0, r6
 800f0be:	f7fd fb89 	bl	800c7d4 <_printf_float>
 800f0c2:	4607      	mov	r7, r0
 800f0c4:	1c78      	adds	r0, r7, #1
 800f0c6:	d1d6      	bne.n	800f076 <_vfiprintf_r+0x19e>
 800f0c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0ca:	07d9      	lsls	r1, r3, #31
 800f0cc:	d405      	bmi.n	800f0da <_vfiprintf_r+0x202>
 800f0ce:	89ab      	ldrh	r3, [r5, #12]
 800f0d0:	059a      	lsls	r2, r3, #22
 800f0d2:	d402      	bmi.n	800f0da <_vfiprintf_r+0x202>
 800f0d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0d6:	f7fe f8fb 	bl	800d2d0 <__retarget_lock_release_recursive>
 800f0da:	89ab      	ldrh	r3, [r5, #12]
 800f0dc:	065b      	lsls	r3, r3, #25
 800f0de:	f53f af1d 	bmi.w	800ef1c <_vfiprintf_r+0x44>
 800f0e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0e4:	e71c      	b.n	800ef20 <_vfiprintf_r+0x48>
 800f0e6:	ab03      	add	r3, sp, #12
 800f0e8:	9300      	str	r3, [sp, #0]
 800f0ea:	462a      	mov	r2, r5
 800f0ec:	4b05      	ldr	r3, [pc, #20]	; (800f104 <_vfiprintf_r+0x22c>)
 800f0ee:	a904      	add	r1, sp, #16
 800f0f0:	4630      	mov	r0, r6
 800f0f2:	f7fd fe13 	bl	800cd1c <_printf_i>
 800f0f6:	e7e4      	b.n	800f0c2 <_vfiprintf_r+0x1ea>
 800f0f8:	0800f674 	.word	0x0800f674
 800f0fc:	0800f67e 	.word	0x0800f67e
 800f100:	0800c7d5 	.word	0x0800c7d5
 800f104:	0800eeb5 	.word	0x0800eeb5
 800f108:	0800f67a 	.word	0x0800f67a

0800f10c <__swbuf_r>:
 800f10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10e:	460e      	mov	r6, r1
 800f110:	4614      	mov	r4, r2
 800f112:	4605      	mov	r5, r0
 800f114:	b118      	cbz	r0, 800f11e <__swbuf_r+0x12>
 800f116:	6a03      	ldr	r3, [r0, #32]
 800f118:	b90b      	cbnz	r3, 800f11e <__swbuf_r+0x12>
 800f11a:	f7fd ffad 	bl	800d078 <__sinit>
 800f11e:	69a3      	ldr	r3, [r4, #24]
 800f120:	60a3      	str	r3, [r4, #8]
 800f122:	89a3      	ldrh	r3, [r4, #12]
 800f124:	071a      	lsls	r2, r3, #28
 800f126:	d525      	bpl.n	800f174 <__swbuf_r+0x68>
 800f128:	6923      	ldr	r3, [r4, #16]
 800f12a:	b31b      	cbz	r3, 800f174 <__swbuf_r+0x68>
 800f12c:	6823      	ldr	r3, [r4, #0]
 800f12e:	6922      	ldr	r2, [r4, #16]
 800f130:	1a98      	subs	r0, r3, r2
 800f132:	6963      	ldr	r3, [r4, #20]
 800f134:	b2f6      	uxtb	r6, r6
 800f136:	4283      	cmp	r3, r0
 800f138:	4637      	mov	r7, r6
 800f13a:	dc04      	bgt.n	800f146 <__swbuf_r+0x3a>
 800f13c:	4621      	mov	r1, r4
 800f13e:	4628      	mov	r0, r5
 800f140:	f7ff fd9e 	bl	800ec80 <_fflush_r>
 800f144:	b9e0      	cbnz	r0, 800f180 <__swbuf_r+0x74>
 800f146:	68a3      	ldr	r3, [r4, #8]
 800f148:	3b01      	subs	r3, #1
 800f14a:	60a3      	str	r3, [r4, #8]
 800f14c:	6823      	ldr	r3, [r4, #0]
 800f14e:	1c5a      	adds	r2, r3, #1
 800f150:	6022      	str	r2, [r4, #0]
 800f152:	701e      	strb	r6, [r3, #0]
 800f154:	6962      	ldr	r2, [r4, #20]
 800f156:	1c43      	adds	r3, r0, #1
 800f158:	429a      	cmp	r2, r3
 800f15a:	d004      	beq.n	800f166 <__swbuf_r+0x5a>
 800f15c:	89a3      	ldrh	r3, [r4, #12]
 800f15e:	07db      	lsls	r3, r3, #31
 800f160:	d506      	bpl.n	800f170 <__swbuf_r+0x64>
 800f162:	2e0a      	cmp	r6, #10
 800f164:	d104      	bne.n	800f170 <__swbuf_r+0x64>
 800f166:	4621      	mov	r1, r4
 800f168:	4628      	mov	r0, r5
 800f16a:	f7ff fd89 	bl	800ec80 <_fflush_r>
 800f16e:	b938      	cbnz	r0, 800f180 <__swbuf_r+0x74>
 800f170:	4638      	mov	r0, r7
 800f172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f174:	4621      	mov	r1, r4
 800f176:	4628      	mov	r0, r5
 800f178:	f000 f806 	bl	800f188 <__swsetup_r>
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d0d5      	beq.n	800f12c <__swbuf_r+0x20>
 800f180:	f04f 37ff 	mov.w	r7, #4294967295
 800f184:	e7f4      	b.n	800f170 <__swbuf_r+0x64>
	...

0800f188 <__swsetup_r>:
 800f188:	b538      	push	{r3, r4, r5, lr}
 800f18a:	4b2a      	ldr	r3, [pc, #168]	; (800f234 <__swsetup_r+0xac>)
 800f18c:	4605      	mov	r5, r0
 800f18e:	6818      	ldr	r0, [r3, #0]
 800f190:	460c      	mov	r4, r1
 800f192:	b118      	cbz	r0, 800f19c <__swsetup_r+0x14>
 800f194:	6a03      	ldr	r3, [r0, #32]
 800f196:	b90b      	cbnz	r3, 800f19c <__swsetup_r+0x14>
 800f198:	f7fd ff6e 	bl	800d078 <__sinit>
 800f19c:	89a3      	ldrh	r3, [r4, #12]
 800f19e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1a2:	0718      	lsls	r0, r3, #28
 800f1a4:	d422      	bmi.n	800f1ec <__swsetup_r+0x64>
 800f1a6:	06d9      	lsls	r1, r3, #27
 800f1a8:	d407      	bmi.n	800f1ba <__swsetup_r+0x32>
 800f1aa:	2309      	movs	r3, #9
 800f1ac:	602b      	str	r3, [r5, #0]
 800f1ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f1b2:	81a3      	strh	r3, [r4, #12]
 800f1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b8:	e034      	b.n	800f224 <__swsetup_r+0x9c>
 800f1ba:	0758      	lsls	r0, r3, #29
 800f1bc:	d512      	bpl.n	800f1e4 <__swsetup_r+0x5c>
 800f1be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1c0:	b141      	cbz	r1, 800f1d4 <__swsetup_r+0x4c>
 800f1c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1c6:	4299      	cmp	r1, r3
 800f1c8:	d002      	beq.n	800f1d0 <__swsetup_r+0x48>
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	f7fe fefe 	bl	800dfcc <_free_r>
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	6363      	str	r3, [r4, #52]	; 0x34
 800f1d4:	89a3      	ldrh	r3, [r4, #12]
 800f1d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f1da:	81a3      	strh	r3, [r4, #12]
 800f1dc:	2300      	movs	r3, #0
 800f1de:	6063      	str	r3, [r4, #4]
 800f1e0:	6923      	ldr	r3, [r4, #16]
 800f1e2:	6023      	str	r3, [r4, #0]
 800f1e4:	89a3      	ldrh	r3, [r4, #12]
 800f1e6:	f043 0308 	orr.w	r3, r3, #8
 800f1ea:	81a3      	strh	r3, [r4, #12]
 800f1ec:	6923      	ldr	r3, [r4, #16]
 800f1ee:	b94b      	cbnz	r3, 800f204 <__swsetup_r+0x7c>
 800f1f0:	89a3      	ldrh	r3, [r4, #12]
 800f1f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f1f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1fa:	d003      	beq.n	800f204 <__swsetup_r+0x7c>
 800f1fc:	4621      	mov	r1, r4
 800f1fe:	4628      	mov	r0, r5
 800f200:	f000 f884 	bl	800f30c <__smakebuf_r>
 800f204:	89a0      	ldrh	r0, [r4, #12]
 800f206:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f20a:	f010 0301 	ands.w	r3, r0, #1
 800f20e:	d00a      	beq.n	800f226 <__swsetup_r+0x9e>
 800f210:	2300      	movs	r3, #0
 800f212:	60a3      	str	r3, [r4, #8]
 800f214:	6963      	ldr	r3, [r4, #20]
 800f216:	425b      	negs	r3, r3
 800f218:	61a3      	str	r3, [r4, #24]
 800f21a:	6923      	ldr	r3, [r4, #16]
 800f21c:	b943      	cbnz	r3, 800f230 <__swsetup_r+0xa8>
 800f21e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f222:	d1c4      	bne.n	800f1ae <__swsetup_r+0x26>
 800f224:	bd38      	pop	{r3, r4, r5, pc}
 800f226:	0781      	lsls	r1, r0, #30
 800f228:	bf58      	it	pl
 800f22a:	6963      	ldrpl	r3, [r4, #20]
 800f22c:	60a3      	str	r3, [r4, #8]
 800f22e:	e7f4      	b.n	800f21a <__swsetup_r+0x92>
 800f230:	2000      	movs	r0, #0
 800f232:	e7f7      	b.n	800f224 <__swsetup_r+0x9c>
 800f234:	20000178 	.word	0x20000178

0800f238 <_raise_r>:
 800f238:	291f      	cmp	r1, #31
 800f23a:	b538      	push	{r3, r4, r5, lr}
 800f23c:	4604      	mov	r4, r0
 800f23e:	460d      	mov	r5, r1
 800f240:	d904      	bls.n	800f24c <_raise_r+0x14>
 800f242:	2316      	movs	r3, #22
 800f244:	6003      	str	r3, [r0, #0]
 800f246:	f04f 30ff 	mov.w	r0, #4294967295
 800f24a:	bd38      	pop	{r3, r4, r5, pc}
 800f24c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f24e:	b112      	cbz	r2, 800f256 <_raise_r+0x1e>
 800f250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f254:	b94b      	cbnz	r3, 800f26a <_raise_r+0x32>
 800f256:	4620      	mov	r0, r4
 800f258:	f000 f830 	bl	800f2bc <_getpid_r>
 800f25c:	462a      	mov	r2, r5
 800f25e:	4601      	mov	r1, r0
 800f260:	4620      	mov	r0, r4
 800f262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f266:	f000 b817 	b.w	800f298 <_kill_r>
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d00a      	beq.n	800f284 <_raise_r+0x4c>
 800f26e:	1c59      	adds	r1, r3, #1
 800f270:	d103      	bne.n	800f27a <_raise_r+0x42>
 800f272:	2316      	movs	r3, #22
 800f274:	6003      	str	r3, [r0, #0]
 800f276:	2001      	movs	r0, #1
 800f278:	e7e7      	b.n	800f24a <_raise_r+0x12>
 800f27a:	2400      	movs	r4, #0
 800f27c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f280:	4628      	mov	r0, r5
 800f282:	4798      	blx	r3
 800f284:	2000      	movs	r0, #0
 800f286:	e7e0      	b.n	800f24a <_raise_r+0x12>

0800f288 <raise>:
 800f288:	4b02      	ldr	r3, [pc, #8]	; (800f294 <raise+0xc>)
 800f28a:	4601      	mov	r1, r0
 800f28c:	6818      	ldr	r0, [r3, #0]
 800f28e:	f7ff bfd3 	b.w	800f238 <_raise_r>
 800f292:	bf00      	nop
 800f294:	20000178 	.word	0x20000178

0800f298 <_kill_r>:
 800f298:	b538      	push	{r3, r4, r5, lr}
 800f29a:	4d07      	ldr	r5, [pc, #28]	; (800f2b8 <_kill_r+0x20>)
 800f29c:	2300      	movs	r3, #0
 800f29e:	4604      	mov	r4, r0
 800f2a0:	4608      	mov	r0, r1
 800f2a2:	4611      	mov	r1, r2
 800f2a4:	602b      	str	r3, [r5, #0]
 800f2a6:	f7f2 fdfb 	bl	8001ea0 <_kill>
 800f2aa:	1c43      	adds	r3, r0, #1
 800f2ac:	d102      	bne.n	800f2b4 <_kill_r+0x1c>
 800f2ae:	682b      	ldr	r3, [r5, #0]
 800f2b0:	b103      	cbz	r3, 800f2b4 <_kill_r+0x1c>
 800f2b2:	6023      	str	r3, [r4, #0]
 800f2b4:	bd38      	pop	{r3, r4, r5, pc}
 800f2b6:	bf00      	nop
 800f2b8:	200022b0 	.word	0x200022b0

0800f2bc <_getpid_r>:
 800f2bc:	f7f2 bde8 	b.w	8001e90 <_getpid>

0800f2c0 <__swhatbuf_r>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	460c      	mov	r4, r1
 800f2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2c8:	2900      	cmp	r1, #0
 800f2ca:	b096      	sub	sp, #88	; 0x58
 800f2cc:	4615      	mov	r5, r2
 800f2ce:	461e      	mov	r6, r3
 800f2d0:	da0d      	bge.n	800f2ee <__swhatbuf_r+0x2e>
 800f2d2:	89a3      	ldrh	r3, [r4, #12]
 800f2d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f2d8:	f04f 0100 	mov.w	r1, #0
 800f2dc:	bf0c      	ite	eq
 800f2de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f2e2:	2340      	movne	r3, #64	; 0x40
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	6031      	str	r1, [r6, #0]
 800f2e8:	602b      	str	r3, [r5, #0]
 800f2ea:	b016      	add	sp, #88	; 0x58
 800f2ec:	bd70      	pop	{r4, r5, r6, pc}
 800f2ee:	466a      	mov	r2, sp
 800f2f0:	f000 f848 	bl	800f384 <_fstat_r>
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	dbec      	blt.n	800f2d2 <__swhatbuf_r+0x12>
 800f2f8:	9901      	ldr	r1, [sp, #4]
 800f2fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f2fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f302:	4259      	negs	r1, r3
 800f304:	4159      	adcs	r1, r3
 800f306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f30a:	e7eb      	b.n	800f2e4 <__swhatbuf_r+0x24>

0800f30c <__smakebuf_r>:
 800f30c:	898b      	ldrh	r3, [r1, #12]
 800f30e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f310:	079d      	lsls	r5, r3, #30
 800f312:	4606      	mov	r6, r0
 800f314:	460c      	mov	r4, r1
 800f316:	d507      	bpl.n	800f328 <__smakebuf_r+0x1c>
 800f318:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f31c:	6023      	str	r3, [r4, #0]
 800f31e:	6123      	str	r3, [r4, #16]
 800f320:	2301      	movs	r3, #1
 800f322:	6163      	str	r3, [r4, #20]
 800f324:	b002      	add	sp, #8
 800f326:	bd70      	pop	{r4, r5, r6, pc}
 800f328:	ab01      	add	r3, sp, #4
 800f32a:	466a      	mov	r2, sp
 800f32c:	f7ff ffc8 	bl	800f2c0 <__swhatbuf_r>
 800f330:	9900      	ldr	r1, [sp, #0]
 800f332:	4605      	mov	r5, r0
 800f334:	4630      	mov	r0, r6
 800f336:	f7fe febd 	bl	800e0b4 <_malloc_r>
 800f33a:	b948      	cbnz	r0, 800f350 <__smakebuf_r+0x44>
 800f33c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f340:	059a      	lsls	r2, r3, #22
 800f342:	d4ef      	bmi.n	800f324 <__smakebuf_r+0x18>
 800f344:	f023 0303 	bic.w	r3, r3, #3
 800f348:	f043 0302 	orr.w	r3, r3, #2
 800f34c:	81a3      	strh	r3, [r4, #12]
 800f34e:	e7e3      	b.n	800f318 <__smakebuf_r+0xc>
 800f350:	89a3      	ldrh	r3, [r4, #12]
 800f352:	6020      	str	r0, [r4, #0]
 800f354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f358:	81a3      	strh	r3, [r4, #12]
 800f35a:	9b00      	ldr	r3, [sp, #0]
 800f35c:	6163      	str	r3, [r4, #20]
 800f35e:	9b01      	ldr	r3, [sp, #4]
 800f360:	6120      	str	r0, [r4, #16]
 800f362:	b15b      	cbz	r3, 800f37c <__smakebuf_r+0x70>
 800f364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f368:	4630      	mov	r0, r6
 800f36a:	f000 f81d 	bl	800f3a8 <_isatty_r>
 800f36e:	b128      	cbz	r0, 800f37c <__smakebuf_r+0x70>
 800f370:	89a3      	ldrh	r3, [r4, #12]
 800f372:	f023 0303 	bic.w	r3, r3, #3
 800f376:	f043 0301 	orr.w	r3, r3, #1
 800f37a:	81a3      	strh	r3, [r4, #12]
 800f37c:	89a3      	ldrh	r3, [r4, #12]
 800f37e:	431d      	orrs	r5, r3
 800f380:	81a5      	strh	r5, [r4, #12]
 800f382:	e7cf      	b.n	800f324 <__smakebuf_r+0x18>

0800f384 <_fstat_r>:
 800f384:	b538      	push	{r3, r4, r5, lr}
 800f386:	4d07      	ldr	r5, [pc, #28]	; (800f3a4 <_fstat_r+0x20>)
 800f388:	2300      	movs	r3, #0
 800f38a:	4604      	mov	r4, r0
 800f38c:	4608      	mov	r0, r1
 800f38e:	4611      	mov	r1, r2
 800f390:	602b      	str	r3, [r5, #0]
 800f392:	f7f2 fde4 	bl	8001f5e <_fstat>
 800f396:	1c43      	adds	r3, r0, #1
 800f398:	d102      	bne.n	800f3a0 <_fstat_r+0x1c>
 800f39a:	682b      	ldr	r3, [r5, #0]
 800f39c:	b103      	cbz	r3, 800f3a0 <_fstat_r+0x1c>
 800f39e:	6023      	str	r3, [r4, #0]
 800f3a0:	bd38      	pop	{r3, r4, r5, pc}
 800f3a2:	bf00      	nop
 800f3a4:	200022b0 	.word	0x200022b0

0800f3a8 <_isatty_r>:
 800f3a8:	b538      	push	{r3, r4, r5, lr}
 800f3aa:	4d06      	ldr	r5, [pc, #24]	; (800f3c4 <_isatty_r+0x1c>)
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	4608      	mov	r0, r1
 800f3b2:	602b      	str	r3, [r5, #0]
 800f3b4:	f7f2 fde3 	bl	8001f7e <_isatty>
 800f3b8:	1c43      	adds	r3, r0, #1
 800f3ba:	d102      	bne.n	800f3c2 <_isatty_r+0x1a>
 800f3bc:	682b      	ldr	r3, [r5, #0]
 800f3be:	b103      	cbz	r3, 800f3c2 <_isatty_r+0x1a>
 800f3c0:	6023      	str	r3, [r4, #0]
 800f3c2:	bd38      	pop	{r3, r4, r5, pc}
 800f3c4:	200022b0 	.word	0x200022b0

0800f3c8 <_init>:
 800f3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ca:	bf00      	nop
 800f3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ce:	bc08      	pop	{r3}
 800f3d0:	469e      	mov	lr, r3
 800f3d2:	4770      	bx	lr

0800f3d4 <_fini>:
 800f3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3d6:	bf00      	nop
 800f3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3da:	bc08      	pop	{r3}
 800f3dc:	469e      	mov	lr, r3
 800f3de:	4770      	bx	lr
